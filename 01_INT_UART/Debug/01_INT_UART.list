
01_INT_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e60  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08004fe8  08004fe8  00014fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050a8  080050a8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  080050a8  080050a8  000150a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080050b0  080050b0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050b0  080050b0  000150b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050b4  080050b4  000150b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  080050b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d8  20000088  08005140  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08005140  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feb5  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002132  00000000  00000000  0002ff6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  000320a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  00032b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270e9  00000000  00000000  000334b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cc9b  00000000  00000000  0005a5a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb416  00000000  00000000  0006723c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00152652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002fe0  00000000  00000000  001526a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000088 	.word	0x20000088
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004fd0 	.word	0x08004fd0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000008c 	.word	0x2000008c
 80001c4:	08004fd0 	.word	0x08004fd0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b083      	sub	sp, #12
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
		 HAL_UART_Receive_IT(&huart1, RxBuffer[count], 1);

				 Transmit with 100 ms timeout
				//HAL_UART_Transmit(&huart1,RxBuffer, 1, 100);
	  }*/
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80004e8:	f000 fcfb 	bl	8000ee2 <HAL_Init>

  /* USER CODE END Init */

  /* Co
   * nfigure the system clock */
  SystemClock_Config();
 80004ec:	f000 f858 	bl	80005a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f8d8 	bl	80006a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f8a6 	bl	8000644 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //first = RxBuffer;

  printf("print for debuging \n");
 80004f8:	4824      	ldr	r0, [pc, #144]	; (800058c <main+0xa8>)
 80004fa:	f004 f911 	bl	8004720 <puts>
  HAL_UART_Transmit_IT(&huart1, TxBuffer, strlen(TxBuffer));
 80004fe:	4824      	ldr	r0, [pc, #144]	; (8000590 <main+0xac>)
 8000500:	f7ff fe62 	bl	80001c8 <strlen>
 8000504:	4603      	mov	r3, r0
 8000506:	b29b      	uxth	r3, r3
 8000508:	461a      	mov	r2, r3
 800050a:	4921      	ldr	r1, [pc, #132]	; (8000590 <main+0xac>)
 800050c:	4821      	ldr	r0, [pc, #132]	; (8000594 <main+0xb0>)
 800050e:	f002 fcd3 	bl	8002eb8 <HAL_UART_Transmit_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 12);
 8000512:	220c      	movs	r2, #12
 8000514:	4920      	ldr	r1, [pc, #128]	; (8000598 <main+0xb4>)
 8000516:	481f      	ldr	r0, [pc, #124]	; (8000594 <main+0xb0>)
 8000518:	f002 fd3c 	bl	8002f94 <HAL_UART_Receive_IT>
	  size1 = strlen(UART1_rxBuffer);
 800051c:	481e      	ldr	r0, [pc, #120]	; (8000598 <main+0xb4>)
 800051e:	f7ff fe53 	bl	80001c8 <strlen>
 8000522:	4603      	mov	r3, r0
 8000524:	b2da      	uxtb	r2, r3
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <main+0xb8>)
 8000528:	701a      	strb	r2, [r3, #0]

	  if (UART1_rxBuffer[size1-1] == '\r')
 800052a:	4b1c      	ldr	r3, [pc, #112]	; (800059c <main+0xb8>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	3b01      	subs	r3, #1
 8000530:	4a19      	ldr	r2, [pc, #100]	; (8000598 <main+0xb4>)
 8000532:	5cd3      	ldrb	r3, [r2, r3]
 8000534:	2b0d      	cmp	r3, #13
 8000536:	d110      	bne.n	800055a <main+0x76>
	  {
		  UART1_rxBuffer[size1] = '\n';
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <main+0xb8>)
 800053a:	781b      	ldrb	r3, [r3, #0]
 800053c:	461a      	mov	r2, r3
 800053e:	4b16      	ldr	r3, [pc, #88]	; (8000598 <main+0xb4>)
 8000540:	210a      	movs	r1, #10
 8000542:	5499      	strb	r1, [r3, r2]
		  HAL_UART_Transmit(&huart1, UART1_rxBuffer, SIZE_OF_RX_BUFF, 50);
 8000544:	2332      	movs	r3, #50	; 0x32
 8000546:	2214      	movs	r2, #20
 8000548:	4913      	ldr	r1, [pc, #76]	; (8000598 <main+0xb4>)
 800054a:	4812      	ldr	r0, [pc, #72]	; (8000594 <main+0xb0>)
 800054c:	f002 fc20 	bl	8002d90 <HAL_UART_Transmit>
		  memset(UART1_rxBuffer, 0, SIZE_OF_RX_BUFF);
 8000550:	2214      	movs	r2, #20
 8000552:	2100      	movs	r1, #0
 8000554:	4810      	ldr	r0, [pc, #64]	; (8000598 <main+0xb4>)
 8000556:	f004 f86d 	bl	8004634 <memset>
		  //size1 = strlen(UART1_rxBuffer);
	  }


	  if(UART1_rxBuffer[size1] == '\r')
 800055a:	4b10      	ldr	r3, [pc, #64]	; (800059c <main+0xb8>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	461a      	mov	r2, r3
 8000560:	4b0d      	ldr	r3, [pc, #52]	; (8000598 <main+0xb4>)
 8000562:	5c9b      	ldrb	r3, [r3, r2]
 8000564:	2b0d      	cmp	r3, #13
 8000566:	d1d4      	bne.n	8000512 <main+0x2e>
	  	  {
	  		 // size1 = strlen(UART1_rxBuffer);
		  	  UART1_rxBuffer[size1+1] = '\n';
 8000568:	4b0c      	ldr	r3, [pc, #48]	; (800059c <main+0xb8>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	3301      	adds	r3, #1
 800056e:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <main+0xb4>)
 8000570:	210a      	movs	r1, #10
 8000572:	54d1      	strb	r1, [r2, r3]
			  HAL_UART_Transmit(&huart1, UART1_rxBuffer, SIZE_OF_RX_BUFF, 50);
 8000574:	2332      	movs	r3, #50	; 0x32
 8000576:	2214      	movs	r2, #20
 8000578:	4907      	ldr	r1, [pc, #28]	; (8000598 <main+0xb4>)
 800057a:	4806      	ldr	r0, [pc, #24]	; (8000594 <main+0xb0>)
 800057c:	f002 fc08 	bl	8002d90 <HAL_UART_Transmit>
			  memset(UART1_rxBuffer, 0, SIZE_OF_RX_BUFF);
 8000580:	2214      	movs	r2, #20
 8000582:	2100      	movs	r1, #0
 8000584:	4804      	ldr	r0, [pc, #16]	; (8000598 <main+0xb4>)
 8000586:	f004 f855 	bl	8004634 <memset>
	  HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 12);
 800058a:	e7c2      	b.n	8000512 <main+0x2e>
 800058c:	08004fe8 	.word	0x08004fe8
 8000590:	20000000 	.word	0x20000000
 8000594:	200000c8 	.word	0x200000c8
 8000598:	200000a4 	.word	0x200000a4
 800059c:	200000b8 	.word	0x200000b8

080005a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b096      	sub	sp, #88	; 0x58
 80005a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005a6:	f107 0314 	add.w	r3, r7, #20
 80005aa:	2244      	movs	r2, #68	; 0x44
 80005ac:	2100      	movs	r1, #0
 80005ae:	4618      	mov	r0, r3
 80005b0:	f004 f840 	bl	8004634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b4:	463b      	mov	r3, r7
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005c6:	f001 f885 	bl	80016d4 <HAL_PWREx_ControlVoltageScaling>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d0:	f000 fa92 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005d4:	2310      	movs	r3, #16
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005dc:	2300      	movs	r3, #0
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005e0:	2360      	movs	r3, #96	; 0x60
 80005e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005e8:	2301      	movs	r3, #1
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005ec:	2301      	movs	r3, #1
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005f0:	2328      	movs	r3, #40	; 0x28
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0314 	add.w	r3, r7, #20
 8000604:	4618      	mov	r0, r3
 8000606:	f001 f8bb 	bl	8001780 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000610:	f000 fa72 	bl	8000af8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2303      	movs	r3, #3
 800061a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	2104      	movs	r1, #4
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fc81 	bl	8001f34 <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000638:	f000 fa5e 	bl	8000af8 <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3758      	adds	r7, #88	; 0x58
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}

08000644 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000648:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_USART1_UART_Init+0x58>)
 800064a:	4a15      	ldr	r2, [pc, #84]	; (80006a0 <MX_USART1_UART_Init+0x5c>)
 800064c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800064e:	4b13      	ldr	r3, [pc, #76]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800065c:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_USART1_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000662:	4b0e      	ldr	r3, [pc, #56]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000668:	4b0c      	ldr	r3, [pc, #48]	; (800069c <MX_USART1_UART_Init+0x58>)
 800066a:	220c      	movs	r2, #12
 800066c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800066e:	4b0b      	ldr	r3, [pc, #44]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000670:	2200      	movs	r2, #0
 8000672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000674:	4b09      	ldr	r3, [pc, #36]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000676:	2200      	movs	r2, #0
 8000678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <MX_USART1_UART_Init+0x58>)
 800067c:	2200      	movs	r2, #0
 800067e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000682:	2200      	movs	r2, #0
 8000684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_USART1_UART_Init+0x58>)
 8000688:	f002 fb34 	bl	8002cf4 <HAL_UART_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000692:	f000 fa31 	bl	8000af8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	200000c8 	.word	0x200000c8
 80006a0:	40013800 	.word	0x40013800

080006a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b08a      	sub	sp, #40	; 0x28
 80006a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006aa:	f107 0314 	add.w	r3, r7, #20
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]
 80006b6:	60da      	str	r2, [r3, #12]
 80006b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ba:	4bbc      	ldr	r3, [pc, #752]	; (80009ac <MX_GPIO_Init+0x308>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	4abb      	ldr	r2, [pc, #748]	; (80009ac <MX_GPIO_Init+0x308>)
 80006c0:	f043 0310 	orr.w	r3, r3, #16
 80006c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006c6:	4bb9      	ldr	r3, [pc, #740]	; (80009ac <MX_GPIO_Init+0x308>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	f003 0310 	and.w	r3, r3, #16
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4bb6      	ldr	r3, [pc, #728]	; (80009ac <MX_GPIO_Init+0x308>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	4ab5      	ldr	r2, [pc, #724]	; (80009ac <MX_GPIO_Init+0x308>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006de:	4bb3      	ldr	r3, [pc, #716]	; (80009ac <MX_GPIO_Init+0x308>)
 80006e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4bb0      	ldr	r3, [pc, #704]	; (80009ac <MX_GPIO_Init+0x308>)
 80006ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ee:	4aaf      	ldr	r2, [pc, #700]	; (80009ac <MX_GPIO_Init+0x308>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f6:	4bad      	ldr	r3, [pc, #692]	; (80009ac <MX_GPIO_Init+0x308>)
 80006f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000702:	4baa      	ldr	r3, [pc, #680]	; (80009ac <MX_GPIO_Init+0x308>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000706:	4aa9      	ldr	r2, [pc, #676]	; (80009ac <MX_GPIO_Init+0x308>)
 8000708:	f043 0302 	orr.w	r3, r3, #2
 800070c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800070e:	4ba7      	ldr	r3, [pc, #668]	; (80009ac <MX_GPIO_Init+0x308>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000712:	f003 0302 	and.w	r3, r3, #2
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	4ba4      	ldr	r3, [pc, #656]	; (80009ac <MX_GPIO_Init+0x308>)
 800071c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800071e:	4aa3      	ldr	r2, [pc, #652]	; (80009ac <MX_GPIO_Init+0x308>)
 8000720:	f043 0308 	orr.w	r3, r3, #8
 8000724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000726:	4ba1      	ldr	r3, [pc, #644]	; (80009ac <MX_GPIO_Init+0x308>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	f003 0308 	and.w	r3, r3, #8
 800072e:	603b      	str	r3, [r7, #0]
 8000730:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000732:	2200      	movs	r2, #0
 8000734:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000738:	489d      	ldr	r0, [pc, #628]	; (80009b0 <MX_GPIO_Init+0x30c>)
 800073a:	f000 ff81 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800073e:	2200      	movs	r2, #0
 8000740:	f248 1104 	movw	r1, #33028	; 0x8104
 8000744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000748:	f000 ff7a 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800074c:	2200      	movs	r2, #0
 800074e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000752:	4898      	ldr	r0, [pc, #608]	; (80009b4 <MX_GPIO_Init+0x310>)
 8000754:	f000 ff74 	bl	8001640 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
 800075a:	f241 0181 	movw	r1, #4225	; 0x1081
 800075e:	4896      	ldr	r0, [pc, #600]	; (80009b8 <MX_GPIO_Init+0x314>)
 8000760:	f000 ff6e 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000764:	2201      	movs	r2, #1
 8000766:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076a:	4893      	ldr	r0, [pc, #588]	; (80009b8 <MX_GPIO_Init+0x314>)
 800076c:	f000 ff68 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000776:	4891      	ldr	r0, [pc, #580]	; (80009bc <MX_GPIO_Init+0x318>)
 8000778:	f000 ff62 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800077c:	2201      	movs	r2, #1
 800077e:	2120      	movs	r1, #32
 8000780:	488c      	ldr	r0, [pc, #560]	; (80009b4 <MX_GPIO_Init+0x310>)
 8000782:	f000 ff5d 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000786:	2201      	movs	r2, #1
 8000788:	2101      	movs	r1, #1
 800078a:	4889      	ldr	r0, [pc, #548]	; (80009b0 <MX_GPIO_Init+0x30c>)
 800078c:	f000 ff58 	bl	8001640 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000790:	f240 1315 	movw	r3, #277	; 0x115
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000796:	2301      	movs	r3, #1
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4619      	mov	r1, r3
 80007a8:	4881      	ldr	r0, [pc, #516]	; (80009b0 <MX_GPIO_Init+0x30c>)
 80007aa:	f000 fd9f 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80007ae:	236a      	movs	r3, #106	; 0x6a
 80007b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007bc:	f107 0314 	add.w	r3, r7, #20
 80007c0:	4619      	mov	r1, r3
 80007c2:	487b      	ldr	r0, [pc, #492]	; (80009b0 <MX_GPIO_Init+0x30c>)
 80007c4:	f000 fd92 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80007c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4877      	ldr	r0, [pc, #476]	; (80009bc <MX_GPIO_Init+0x318>)
 80007e0:	f000 fd84 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80007e4:	233f      	movs	r3, #63	; 0x3f
 80007e6:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007e8:	230b      	movs	r3, #11
 80007ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007f0:	f107 0314 	add.w	r3, r7, #20
 80007f4:	4619      	mov	r1, r3
 80007f6:	4871      	ldr	r0, [pc, #452]	; (80009bc <MX_GPIO_Init+0x318>)
 80007f8:	f000 fd78 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80007fc:	2303      	movs	r3, #3
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800080c:	2308      	movs	r3, #8
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000810:	f107 0314 	add.w	r3, r7, #20
 8000814:	4619      	mov	r1, r3
 8000816:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800081a:	f000 fd67 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800081e:	f248 1304 	movw	r3, #33028	; 0x8104
 8000822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000824:	2301      	movs	r3, #1
 8000826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000828:	2300      	movs	r3, #0
 800082a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000830:	f107 0314 	add.w	r3, r7, #20
 8000834:	4619      	mov	r1, r3
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fd57 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800083e:	2308      	movs	r3, #8
 8000840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000842:	2302      	movs	r3, #2
 8000844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084a:	2300      	movs	r3, #0
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800084e:	2301      	movs	r3, #1
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	4619      	mov	r1, r3
 8000858:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800085c:	f000 fd46 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000860:	2310      	movs	r3, #16
 8000862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000864:	230b      	movs	r3, #11
 8000866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f000 fd39 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 800087a:	23e0      	movs	r3, #224	; 0xe0
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800087e:	2302      	movs	r3, #2
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000886:	2303      	movs	r3, #3
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800088a:	2305      	movs	r3, #5
 800088c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800088e:	f107 0314 	add.w	r3, r7, #20
 8000892:	4619      	mov	r1, r3
 8000894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000898:	f000 fd28 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 800089c:	2301      	movs	r3, #1
 800089e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	4619      	mov	r1, r3
 80008b0:	4840      	ldr	r0, [pc, #256]	; (80009b4 <MX_GPIO_Init+0x310>)
 80008b2:	f000 fd1b 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80008b6:	2302      	movs	r3, #2
 80008b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80008ba:	230b      	movs	r3, #11
 80008bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 0314 	add.w	r3, r7, #20
 80008c6:	4619      	mov	r1, r3
 80008c8:	483a      	ldr	r0, [pc, #232]	; (80009b4 <MX_GPIO_Init+0x310>)
 80008ca:	f000 fd0f 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80008ce:	f24f 0334 	movw	r3, #61492	; 0xf034
 80008d2:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	4833      	ldr	r0, [pc, #204]	; (80009b4 <MX_GPIO_Init+0x310>)
 80008e8:	f000 fd00 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80008ec:	f44f 7320 	mov.w	r3, #640	; 0x280
 80008f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f2:	2302      	movs	r3, #2
 80008f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80008fe:	2306      	movs	r3, #6
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4829      	ldr	r0, [pc, #164]	; (80009b0 <MX_GPIO_Init+0x30c>)
 800090a:	f000 fcef 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800090e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000912:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000920:	230a      	movs	r3, #10
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000924:	f107 0314 	add.w	r3, r7, #20
 8000928:	4619      	mov	r1, r3
 800092a:	4821      	ldr	r0, [pc, #132]	; (80009b0 <MX_GPIO_Init+0x30c>)
 800092c:	f000 fcde 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_I2C2_SCL_Pin INTERNAL_I2C2_SDA_Pin */
  GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000930:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000934:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000936:	2312      	movs	r3, #18
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093e:	2303      	movs	r3, #3
 8000940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000942:	2304      	movs	r3, #4
 8000944:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f107 0314 	add.w	r3, r7, #20
 800094a:	4619      	mov	r1, r3
 800094c:	4819      	ldr	r0, [pc, #100]	; (80009b4 <MX_GPIO_Init+0x310>)
 800094e:	f000 fccd 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000952:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000964:	2307      	movs	r3, #7
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4812      	ldr	r0, [pc, #72]	; (80009b8 <MX_GPIO_Init+0x314>)
 8000970:	f000 fcbc 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000974:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000978:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800097a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800097e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	4619      	mov	r1, r3
 800098a:	480b      	ldr	r0, [pc, #44]	; (80009b8 <MX_GPIO_Init+0x314>)
 800098c:	f000 fcae 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000990:	f243 0381 	movw	r3, #12417	; 0x3081
 8000994:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000996:	2301      	movs	r3, #1
 8000998:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	e00a      	b.n	80009c0 <MX_GPIO_Init+0x31c>
 80009aa:	bf00      	nop
 80009ac:	40021000 	.word	0x40021000
 80009b0:	48001000 	.word	0x48001000
 80009b4:	48000400 	.word	0x48000400
 80009b8:	48000c00 	.word	0x48000c00
 80009bc:	48000800 	.word	0x48000800
 80009c0:	484a      	ldr	r0, [pc, #296]	; (8000aec <MX_GPIO_Init+0x448>)
 80009c2:	f000 fc93 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80009c6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4844      	ldr	r0, [pc, #272]	; (8000af0 <MX_GPIO_Init+0x44c>)
 80009e0:	f000 fc84 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80009e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	483d      	ldr	r0, [pc, #244]	; (8000af0 <MX_GPIO_Init+0x44c>)
 80009fc:	f000 fc76 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8000a00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a0e:	f107 0314 	add.w	r3, r7, #20
 8000a12:	4619      	mov	r1, r3
 8000a14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a18:	f000 fc68 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8000a1c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2a:	2303      	movs	r3, #3
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a2e:	230a      	movs	r3, #10
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3c:	f000 fc56 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000a40:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a52:	2306      	movs	r3, #6
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4824      	ldr	r0, [pc, #144]	; (8000af0 <MX_GPIO_Init+0x44c>)
 8000a5e:	f000 fc45 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000a62:	2302      	movs	r3, #2
 8000a64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a72:	2305      	movs	r3, #5
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	481b      	ldr	r0, [pc, #108]	; (8000aec <MX_GPIO_Init+0x448>)
 8000a7e:	f000 fc35 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000a82:	2378      	movs	r3, #120	; 0x78
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a92:	2307      	movs	r3, #7
 8000a94:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4813      	ldr	r0, [pc, #76]	; (8000aec <MX_GPIO_Init+0x448>)
 8000a9e:	f000 fc25 	bl	80012ec <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000aa2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aa8:	2312      	movs	r3, #18
 8000aaa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	480d      	ldr	r0, [pc, #52]	; (8000af4 <MX_GPIO_Init+0x450>)
 8000ac0:	f000 fc14 	bl	80012ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	2017      	movs	r0, #23
 8000aca:	f000 fb5a 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ace:	2017      	movs	r0, #23
 8000ad0:	f000 fb73 	bl	80011ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2028      	movs	r0, #40	; 0x28
 8000ada:	f000 fb52 	bl	8001182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ade:	2028      	movs	r0, #40	; 0x28
 8000ae0:	f000 fb6b 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	48000c00 	.word	0x48000c00
 8000af0:	48000800 	.word	0x48000800
 8000af4:	48000400 	.word	0x48000400

08000af8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6613      	str	r3, [r2, #96]	; 0x60
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b0ac      	sub	sp, #176	; 0xb0
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2288      	movs	r2, #136	; 0x88
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f003 fd61 	bl	8004634 <memset>
  if(huart->Instance==USART1)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a25      	ldr	r2, [pc, #148]	; (8000c0c <HAL_UART_MspInit+0xc0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d142      	bne.n	8000c02 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b80:	2300      	movs	r3, #0
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 fbf7 	bl	800237c <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b94:	f7ff ffb0 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b98:	4b1d      	ldr	r3, [pc, #116]	; (8000c10 <HAL_UART_MspInit+0xc4>)
 8000b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9c:	4a1c      	ldr	r2, [pc, #112]	; (8000c10 <HAL_UART_MspInit+0xc4>)
 8000b9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	; (8000c10 <HAL_UART_MspInit+0xc4>)
 8000ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_UART_MspInit+0xc4>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	4a16      	ldr	r2, [pc, #88]	; (8000c10 <HAL_UART_MspInit+0xc4>)
 8000bb6:	f043 0302 	orr.w	r3, r3, #2
 8000bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbc:	4b14      	ldr	r3, [pc, #80]	; (8000c10 <HAL_UART_MspInit+0xc4>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	f003 0302 	and.w	r3, r3, #2
 8000bc4:	60fb      	str	r3, [r7, #12]
 8000bc6:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000bc8:	23c0      	movs	r3, #192	; 0xc0
 8000bca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000be0:	2307      	movs	r3, #7
 8000be2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bea:	4619      	mov	r1, r3
 8000bec:	4809      	ldr	r0, [pc, #36]	; (8000c14 <HAL_UART_MspInit+0xc8>)
 8000bee:	f000 fb7d 	bl	80012ec <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	2025      	movs	r0, #37	; 0x25
 8000bf8:	f000 fac3 	bl	8001182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000bfc:	2025      	movs	r0, #37	; 0x25
 8000bfe:	f000 fadc 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	37b0      	adds	r7, #176	; 0xb0
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40013800 	.word	0x40013800
 8000c10:	40021000 	.word	0x40021000
 8000c14:	48000400 	.word	0x48000400

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <MemManage_Handler+0x4>

08000c2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <BusFault_Handler+0x4>

08000c30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <UsageFault_Handler+0x4>

08000c36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c64:	f000 f992 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c70:	2020      	movs	r0, #32
 8000c72:	f000 fcfd 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8000c76:	2040      	movs	r0, #64	; 0x40
 8000c78:	f000 fcfa 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8000c7c:	2080      	movs	r0, #128	; 0x80
 8000c7e:	f000 fcf7 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8000c82:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000c86:	f000 fcf3 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <USART1_IRQHandler+0x10>)
 8000c96:	f002 f9d3 	bl	8003040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200000c8 	.word	0x200000c8

08000ca4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000ca8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000cac:	f000 fce0 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000cb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000cb4:	f000 fcdc 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000cb8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000cbc:	f000 fcd8 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8000cc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000cc4:	f000 fcd4 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000cc8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000ccc:	f000 fcd0 	bl	8001670 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <ITM_SendChar+0x48>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a0e      	ldr	r2, [pc, #56]	; (8000d1c <ITM_SendChar+0x48>)
 8000ce4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ce8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <ITM_SendChar+0x4c>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <ITM_SendChar+0x4c>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000cf6:	bf00      	nop
 8000cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f8      	beq.n	8000cf8 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000d06:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	6013      	str	r3, [r2, #0]
}
 8000d0e:	bf00      	nop
 8000d10:	370c      	adds	r7, #12
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	e000edfc 	.word	0xe000edfc
 8000d20:	e0000e00 	.word	0xe0000e00

08000d24 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	e00a      	b.n	8000d4c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d36:	f3af 8000 	nop.w
 8000d3a:	4601      	mov	r1, r0
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	1c5a      	adds	r2, r3, #1
 8000d40:	60ba      	str	r2, [r7, #8]
 8000d42:	b2ca      	uxtb	r2, r1
 8000d44:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	617b      	str	r3, [r7, #20]
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbf0      	blt.n	8000d36 <_read+0x12>
	}

return len;
 8000d54:	687b      	ldr	r3, [r7, #4]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3718      	adds	r7, #24
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b086      	sub	sp, #24
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	60f8      	str	r0, [r7, #12]
 8000d66:	60b9      	str	r1, [r7, #8]
 8000d68:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	e009      	b.n	8000d84 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	60ba      	str	r2, [r7, #8]
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ffab 	bl	8000cd4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	3301      	adds	r3, #1
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	dbf1      	blt.n	8000d70 <_write+0x12>
	}
	return len;
 8000d8c:	687b      	ldr	r3, [r7, #4]
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3718      	adds	r7, #24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}

08000d96 <_close>:

int _close(int file)
{
 8000d96:	b480      	push	{r7}
 8000d98:	b083      	sub	sp, #12
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
	return -1;
 8000d9e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
 8000db6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dbe:	605a      	str	r2, [r3, #4]
	return 0;
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <_isatty>:

int _isatty(int file)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
	return 1;
 8000dd6:	2301      	movs	r3, #1
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
	return 0;
 8000df0:	2300      	movs	r3, #0
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
	...

08000e00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e08:	4a14      	ldr	r2, [pc, #80]	; (8000e5c <_sbrk+0x5c>)
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <_sbrk+0x60>)
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e14:	4b13      	ldr	r3, [pc, #76]	; (8000e64 <_sbrk+0x64>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d102      	bne.n	8000e22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e1c:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <_sbrk+0x64>)
 8000e1e:	4a12      	ldr	r2, [pc, #72]	; (8000e68 <_sbrk+0x68>)
 8000e20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e22:	4b10      	ldr	r3, [pc, #64]	; (8000e64 <_sbrk+0x64>)
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4413      	add	r3, r2
 8000e2a:	693a      	ldr	r2, [r7, #16]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	d207      	bcs.n	8000e40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e30:	f003 fbd6 	bl	80045e0 <__errno>
 8000e34:	4603      	mov	r3, r0
 8000e36:	220c      	movs	r2, #12
 8000e38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	e009      	b.n	8000e54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e40:	4b08      	ldr	r3, [pc, #32]	; (8000e64 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e46:	4b07      	ldr	r3, [pc, #28]	; (8000e64 <_sbrk+0x64>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	4413      	add	r3, r2
 8000e4e:	4a05      	ldr	r2, [pc, #20]	; (8000e64 <_sbrk+0x64>)
 8000e50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e52:	68fb      	ldr	r3, [r7, #12]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	20018000 	.word	0x20018000
 8000e60:	00000400 	.word	0x00000400
 8000e64:	200000bc 	.word	0x200000bc
 8000e68:	20000160 	.word	0x20000160

08000e6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <SystemInit+0x20>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <SystemInit+0x20>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e94:	f7ff ffea 	bl	8000e6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	; (8000ecc <LoopForever+0x6>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	; (8000ed0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	; (8000ed4 <LoopForever+0xe>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	; (8000edc <LoopForever+0x16>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f003 fb95 	bl	80045ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ec2:	f7ff fb0f 	bl	80004e4 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ec8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000ed4:	080050b8 	.word	0x080050b8
  ldr r2, =_sbss
 8000ed8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000edc:	20000160 	.word	0x20000160

08000ee0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_2_IRQHandler>

08000ee2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b082      	sub	sp, #8
 8000ee6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f93d 	bl	800116c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f000 f80e 	bl	8000f14 <HAL_InitTick>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d002      	beq.n	8000f04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	71fb      	strb	r3, [r7, #7]
 8000f02:	e001      	b.n	8000f08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f04:	f7ff fdfe 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f20:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d023      	beq.n	8000f70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <HAL_InitTick+0x70>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <HAL_InitTick+0x6c>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	4619      	mov	r1, r3
 8000f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f949 	bl	80011d6 <HAL_SYSTICK_Config>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d10f      	bne.n	8000f6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b0f      	cmp	r3, #15
 8000f4e:	d809      	bhi.n	8000f64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f50:	2200      	movs	r2, #0
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	f04f 30ff 	mov.w	r0, #4294967295
 8000f58:	f000 f913 	bl	8001182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f5c:	4a0a      	ldr	r2, [pc, #40]	; (8000f88 <HAL_InitTick+0x74>)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e007      	b.n	8000f74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e004      	b.n	8000f74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	73fb      	strb	r3, [r7, #15]
 8000f6e:	e001      	b.n	8000f74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f70:	2301      	movs	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000020 	.word	0x20000020
 8000f84:	20000018 	.word	0x20000018
 8000f88:	2000001c 	.word	0x2000001c

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000020 	.word	0x20000020
 8000fb0:	2000014c 	.word	0x2000014c

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	2000014c 	.word	0x2000014c

08000fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	f003 0307 	and.w	r3, r3, #7
 8000fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fe2:	68ba      	ldr	r2, [r7, #8]
 8000fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fe8:	4013      	ands	r3, r2
 8000fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff0:	68bb      	ldr	r3, [r7, #8]
 8000ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ffe:	4a04      	ldr	r2, [pc, #16]	; (8001010 <__NVIC_SetPriorityGrouping+0x44>)
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	60d3      	str	r3, [r2, #12]
}
 8001004:	bf00      	nop
 8001006:	3714      	adds	r7, #20
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr
 8001010:	e000ed00 	.word	0xe000ed00

08001014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001018:	4b04      	ldr	r3, [pc, #16]	; (800102c <__NVIC_GetPriorityGrouping+0x18>)
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	0a1b      	lsrs	r3, r3, #8
 800101e:	f003 0307 	and.w	r3, r3, #7
}
 8001022:	4618      	mov	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800103e:	2b00      	cmp	r3, #0
 8001040:	db0b      	blt.n	800105a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	f003 021f 	and.w	r2, r3, #31
 8001048:	4907      	ldr	r1, [pc, #28]	; (8001068 <__NVIC_EnableIRQ+0x38>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	2001      	movs	r0, #1
 8001052:	fa00 f202 	lsl.w	r2, r0, r2
 8001056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800105a:	bf00      	nop
 800105c:	370c      	adds	r7, #12
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107c:	2b00      	cmp	r3, #0
 800107e:	db0a      	blt.n	8001096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	490c      	ldr	r1, [pc, #48]	; (80010b8 <__NVIC_SetPriority+0x4c>)
 8001086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108a:	0112      	lsls	r2, r2, #4
 800108c:	b2d2      	uxtb	r2, r2
 800108e:	440b      	add	r3, r1
 8001090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001094:	e00a      	b.n	80010ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	b2da      	uxtb	r2, r3
 800109a:	4908      	ldr	r1, [pc, #32]	; (80010bc <__NVIC_SetPriority+0x50>)
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	3b04      	subs	r3, #4
 80010a4:	0112      	lsls	r2, r2, #4
 80010a6:	b2d2      	uxtb	r2, r2
 80010a8:	440b      	add	r3, r1
 80010aa:	761a      	strb	r2, [r3, #24]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000e100 	.word	0xe000e100
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b089      	sub	sp, #36	; 0x24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	f003 0307 	and.w	r3, r3, #7
 80010d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d4:	69fb      	ldr	r3, [r7, #28]
 80010d6:	f1c3 0307 	rsb	r3, r3, #7
 80010da:	2b04      	cmp	r3, #4
 80010dc:	bf28      	it	cs
 80010de:	2304      	movcs	r3, #4
 80010e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3304      	adds	r3, #4
 80010e6:	2b06      	cmp	r3, #6
 80010e8:	d902      	bls.n	80010f0 <NVIC_EncodePriority+0x30>
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3b03      	subs	r3, #3
 80010ee:	e000      	b.n	80010f2 <NVIC_EncodePriority+0x32>
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	f04f 32ff 	mov.w	r2, #4294967295
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	43da      	mvns	r2, r3
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	401a      	ands	r2, r3
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001108:	f04f 31ff 	mov.w	r1, #4294967295
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa01 f303 	lsl.w	r3, r1, r3
 8001112:	43d9      	mvns	r1, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	4313      	orrs	r3, r2
         );
}
 800111a:	4618      	mov	r0, r3
 800111c:	3724      	adds	r7, #36	; 0x24
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	3b01      	subs	r3, #1
 8001134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001138:	d301      	bcc.n	800113e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800113a:	2301      	movs	r3, #1
 800113c:	e00f      	b.n	800115e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800113e:	4a0a      	ldr	r2, [pc, #40]	; (8001168 <SysTick_Config+0x40>)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3b01      	subs	r3, #1
 8001144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001146:	210f      	movs	r1, #15
 8001148:	f04f 30ff 	mov.w	r0, #4294967295
 800114c:	f7ff ff8e 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <SysTick_Config+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <SysTick_Config+0x40>)
 8001158:	2207      	movs	r2, #7
 800115a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	e000e010 	.word	0xe000e010

0800116c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f7ff ff29 	bl	8000fcc <__NVIC_SetPriorityGrouping>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b086      	sub	sp, #24
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	60b9      	str	r1, [r7, #8]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001194:	f7ff ff3e 	bl	8001014 <__NVIC_GetPriorityGrouping>
 8001198:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800119a:	687a      	ldr	r2, [r7, #4]
 800119c:	68b9      	ldr	r1, [r7, #8]
 800119e:	6978      	ldr	r0, [r7, #20]
 80011a0:	f7ff ff8e 	bl	80010c0 <NVIC_EncodePriority>
 80011a4:	4602      	mov	r2, r0
 80011a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011aa:	4611      	mov	r1, r2
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	bf00      	nop
 80011b4:	3718      	adds	r7, #24
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	4603      	mov	r3, r0
 80011c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff ff31 	bl	8001030 <__NVIC_EnableIRQ>
}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff ffa2 	bl	8001128 <SysTick_Config>
 80011e4:	4603      	mov	r3, r0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011f6:	2300      	movs	r3, #0
 80011f8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2b02      	cmp	r3, #2
 8001204:	d008      	beq.n	8001218 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2204      	movs	r2, #4
 800120a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e022      	b.n	800125e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 020e 	bic.w	r2, r2, #14
 8001226:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0201 	bic.w	r2, r2, #1
 8001236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123c:	f003 021c 	and.w	r2, r3, #28
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001244:	2101      	movs	r1, #1
 8001246:	fa01 f202 	lsl.w	r2, r1, r2
 800124a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2201      	movs	r2, #1
 8001250:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800125e:	4618      	mov	r0, r3
 8001260:	3714      	adds	r7, #20
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b084      	sub	sp, #16
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d005      	beq.n	800128e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2204      	movs	r2, #4
 8001286:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	73fb      	strb	r3, [r7, #15]
 800128c:	e029      	b.n	80012e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 020e 	bic.w	r2, r2, #14
 800129c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f022 0201 	bic.w	r2, r2, #1
 80012ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	f003 021c 	and.w	r2, r3, #28
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2201      	movs	r2, #1
 80012c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	4798      	blx	r3
    }
  }
  return status;
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012f6:	2300      	movs	r3, #0
 80012f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012fa:	e17f      	b.n	80015fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	2101      	movs	r1, #1
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	fa01 f303 	lsl.w	r3, r1, r3
 8001308:	4013      	ands	r3, r2
 800130a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8171 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	2b01      	cmp	r3, #1
 800131e:	d005      	beq.n	800132c <HAL_GPIO_Init+0x40>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0303 	and.w	r3, r3, #3
 8001328:	2b02      	cmp	r3, #2
 800132a:	d130      	bne.n	800138e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4013      	ands	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	68da      	ldr	r2, [r3, #12]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	4313      	orrs	r3, r2
 8001354:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001362:	2201      	movs	r2, #1
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4013      	ands	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	091b      	lsrs	r3, r3, #4
 8001378:	f003 0201 	and.w	r2, r3, #1
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4313      	orrs	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	693a      	ldr	r2, [r7, #16]
 800138c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
 8001396:	2b03      	cmp	r3, #3
 8001398:	d118      	bne.n	80013cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013a0:	2201      	movs	r2, #1
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa02 f303 	lsl.w	r3, r2, r3
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	08db      	lsrs	r3, r3, #3
 80013b6:	f003 0201 	and.w	r2, r3, #1
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d017      	beq.n	8001408 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	4013      	ands	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	4313      	orrs	r3, r2
 8001400:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d123      	bne.n	800145c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	08da      	lsrs	r2, r3, #3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	3208      	adds	r2, #8
 800141c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001420:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	f003 0307 	and.w	r3, r3, #7
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	220f      	movs	r2, #15
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	691a      	ldr	r2, [r3, #16]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	fa02 f303 	lsl.w	r3, r2, r3
 8001448:	693a      	ldr	r2, [r7, #16]
 800144a:	4313      	orrs	r3, r2
 800144c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	08da      	lsrs	r2, r3, #3
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	3208      	adds	r2, #8
 8001456:	6939      	ldr	r1, [r7, #16]
 8001458:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	2203      	movs	r2, #3
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	43db      	mvns	r3, r3
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4013      	ands	r3, r2
 8001472:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0203 	and.w	r2, r3, #3
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	fa02 f303 	lsl.w	r3, r2, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001498:	2b00      	cmp	r3, #0
 800149a:	f000 80ac 	beq.w	80015f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	4b5f      	ldr	r3, [pc, #380]	; (800161c <HAL_GPIO_Init+0x330>)
 80014a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a2:	4a5e      	ldr	r2, [pc, #376]	; (800161c <HAL_GPIO_Init+0x330>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6613      	str	r3, [r2, #96]	; 0x60
 80014aa:	4b5c      	ldr	r3, [pc, #368]	; (800161c <HAL_GPIO_Init+0x330>)
 80014ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b6:	4a5a      	ldr	r2, [pc, #360]	; (8001620 <HAL_GPIO_Init+0x334>)
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	089b      	lsrs	r3, r3, #2
 80014bc:	3302      	adds	r3, #2
 80014be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	f003 0303 	and.w	r3, r3, #3
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	220f      	movs	r2, #15
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014e0:	d025      	beq.n	800152e <HAL_GPIO_Init+0x242>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4f      	ldr	r2, [pc, #316]	; (8001624 <HAL_GPIO_Init+0x338>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d01f      	beq.n	800152a <HAL_GPIO_Init+0x23e>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4e      	ldr	r2, [pc, #312]	; (8001628 <HAL_GPIO_Init+0x33c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d019      	beq.n	8001526 <HAL_GPIO_Init+0x23a>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_GPIO_Init+0x340>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d013      	beq.n	8001522 <HAL_GPIO_Init+0x236>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	; (8001630 <HAL_GPIO_Init+0x344>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d00d      	beq.n	800151e <HAL_GPIO_Init+0x232>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4b      	ldr	r2, [pc, #300]	; (8001634 <HAL_GPIO_Init+0x348>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d007      	beq.n	800151a <HAL_GPIO_Init+0x22e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	; (8001638 <HAL_GPIO_Init+0x34c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d101      	bne.n	8001516 <HAL_GPIO_Init+0x22a>
 8001512:	2306      	movs	r3, #6
 8001514:	e00c      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001516:	2307      	movs	r3, #7
 8001518:	e00a      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151a:	2305      	movs	r3, #5
 800151c:	e008      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800151e:	2304      	movs	r3, #4
 8001520:	e006      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001522:	2303      	movs	r3, #3
 8001524:	e004      	b.n	8001530 <HAL_GPIO_Init+0x244>
 8001526:	2302      	movs	r3, #2
 8001528:	e002      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152a:	2301      	movs	r3, #1
 800152c:	e000      	b.n	8001530 <HAL_GPIO_Init+0x244>
 800152e:	2300      	movs	r3, #0
 8001530:	697a      	ldr	r2, [r7, #20]
 8001532:	f002 0203 	and.w	r2, r2, #3
 8001536:	0092      	lsls	r2, r2, #2
 8001538:	4093      	lsls	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001540:	4937      	ldr	r1, [pc, #220]	; (8001620 <HAL_GPIO_Init+0x334>)
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	089b      	lsrs	r3, r3, #2
 8001546:	3302      	adds	r3, #2
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_GPIO_Init+0x350>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	43db      	mvns	r3, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d003      	beq.n	8001572 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <HAL_GPIO_Init+0x350>)
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001578:	4b30      	ldr	r3, [pc, #192]	; (800163c <HAL_GPIO_Init+0x350>)
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <HAL_GPIO_Init+0x350>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <HAL_GPIO_Init+0x350>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015c6:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_GPIO_Init+0x350>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <HAL_GPIO_Init+0x350>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015f0:	4a12      	ldr	r2, [pc, #72]	; (800163c <HAL_GPIO_Init+0x350>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	3301      	adds	r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	fa22 f303 	lsr.w	r3, r2, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	f47f ae78 	bne.w	80012fc <HAL_GPIO_Init+0x10>
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	371c      	adds	r7, #28
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000
 8001624:	48000400 	.word	0x48000400
 8001628:	48000800 	.word	0x48000800
 800162c:	48000c00 	.word	0x48000c00
 8001630:	48001000 	.word	0x48001000
 8001634:	48001400 	.word	0x48001400
 8001638:	48001800 	.word	0x48001800
 800163c:	40010400 	.word	0x40010400

08001640 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
 800164c:	4613      	mov	r3, r2
 800164e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001650:	787b      	ldrb	r3, [r7, #1]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d003      	beq.n	800165e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001656:	887a      	ldrh	r2, [r7, #2]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800165c:	e002      	b.n	8001664 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800165e:	887a      	ldrh	r2, [r7, #2]
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800167a:	4b08      	ldr	r3, [pc, #32]	; (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800167c:	695a      	ldr	r2, [r3, #20]
 800167e:	88fb      	ldrh	r3, [r7, #6]
 8001680:	4013      	ands	r3, r2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d006      	beq.n	8001694 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001686:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001688:	88fb      	ldrh	r3, [r7, #6]
 800168a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	4618      	mov	r0, r3
 8001690:	f000 f806 	bl	80016a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001694:	bf00      	nop
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	40010400 	.word	0x40010400

080016a0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	4603      	mov	r3, r0
 80016a8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000

080016d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016e2:	d130      	bne.n	8001746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016e4:	4b23      	ldr	r3, [pc, #140]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016f0:	d038      	beq.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016f2:	4b20      	ldr	r3, [pc, #128]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016fa:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001702:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2232      	movs	r2, #50	; 0x32
 8001708:	fb02 f303 	mul.w	r3, r2, r3
 800170c:	4a1b      	ldr	r2, [pc, #108]	; (800177c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800170e:	fba2 2303 	umull	r2, r3, r2, r3
 8001712:	0c9b      	lsrs	r3, r3, #18
 8001714:	3301      	adds	r3, #1
 8001716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001718:	e002      	b.n	8001720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001722:	695b      	ldr	r3, [r3, #20]
 8001724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172c:	d102      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1f2      	bne.n	800171a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	695b      	ldr	r3, [r3, #20]
 8001738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800173c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001740:	d110      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e00f      	b.n	8001766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800174e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001752:	d007      	beq.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001754:	4b07      	ldr	r3, [pc, #28]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800175c:	4a05      	ldr	r2, [pc, #20]	; (8001774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800175e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40007000 	.word	0x40007000
 8001778:	20000018 	.word	0x20000018
 800177c:	431bde83 	.word	0x431bde83

08001780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b088      	sub	sp, #32
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e3c6      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001792:	4ba1      	ldr	r3, [pc, #644]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001794:	689b      	ldr	r3, [r3, #8]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800179c:	4b9e      	ldr	r3, [pc, #632]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	f003 0303 	and.w	r3, r3, #3
 80017a4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	f000 80e4 	beq.w	800197c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d007      	beq.n	80017ca <HAL_RCC_OscConfig+0x4a>
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b0c      	cmp	r3, #12
 80017be:	f040 808b 	bne.w	80018d8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	f040 8087 	bne.w	80018d8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017ca:	4b93      	ldr	r3, [pc, #588]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d005      	beq.n	80017e2 <HAL_RCC_OscConfig+0x62>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d101      	bne.n	80017e2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e39e      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6a1a      	ldr	r2, [r3, #32]
 80017e6:	4b8c      	ldr	r3, [pc, #560]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d004      	beq.n	80017fc <HAL_RCC_OscConfig+0x7c>
 80017f2:	4b89      	ldr	r3, [pc, #548]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017fa:	e005      	b.n	8001808 <HAL_RCC_OscConfig+0x88>
 80017fc:	4b86      	ldr	r3, [pc, #536]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80017fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001808:	4293      	cmp	r3, r2
 800180a:	d223      	bcs.n	8001854 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	4618      	mov	r0, r3
 8001812:	f000 fd53 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	e37f      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001820:	4b7d      	ldr	r3, [pc, #500]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a7c      	ldr	r2, [pc, #496]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001826:	f043 0308 	orr.w	r3, r3, #8
 800182a:	6013      	str	r3, [r2, #0]
 800182c:	4b7a      	ldr	r3, [pc, #488]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	4977      	ldr	r1, [pc, #476]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800183e:	4b76      	ldr	r3, [pc, #472]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	69db      	ldr	r3, [r3, #28]
 800184a:	021b      	lsls	r3, r3, #8
 800184c:	4972      	ldr	r1, [pc, #456]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
 8001852:	e025      	b.n	80018a0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001854:	4b70      	ldr	r3, [pc, #448]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a6f      	ldr	r2, [pc, #444]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b6d      	ldr	r3, [pc, #436]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	496a      	ldr	r1, [pc, #424]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800186e:	4313      	orrs	r3, r2
 8001870:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001872:	4b69      	ldr	r3, [pc, #420]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69db      	ldr	r3, [r3, #28]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	4965      	ldr	r1, [pc, #404]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001882:	4313      	orrs	r3, r2
 8001884:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d109      	bne.n	80018a0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a1b      	ldr	r3, [r3, #32]
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fd13 	bl	80022bc <RCC_SetFlashLatencyFromMSIRange>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e33f      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80018a0:	f000 fc48 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80018a4:	4602      	mov	r2, r0
 80018a6:	4b5c      	ldr	r3, [pc, #368]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	495a      	ldr	r1, [pc, #360]	; (8001a1c <HAL_RCC_OscConfig+0x29c>)
 80018b2:	5ccb      	ldrb	r3, [r1, r3]
 80018b4:	f003 031f 	and.w	r3, r3, #31
 80018b8:	fa22 f303 	lsr.w	r3, r2, r3
 80018bc:	4a58      	ldr	r2, [pc, #352]	; (8001a20 <HAL_RCC_OscConfig+0x2a0>)
 80018be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80018c0:	4b58      	ldr	r3, [pc, #352]	; (8001a24 <HAL_RCC_OscConfig+0x2a4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff fb25 	bl	8000f14 <HAL_InitTick>
 80018ca:	4603      	mov	r3, r0
 80018cc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d052      	beq.n	800197a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
 80018d6:	e323      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d032      	beq.n	8001946 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018e0:	4b4d      	ldr	r3, [pc, #308]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a4c      	ldr	r2, [pc, #304]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb62 	bl	8000fb4 <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018f4:	f7ff fb5e 	bl	8000fb4 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e30c      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001906:	4b44      	ldr	r3, [pc, #272]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001912:	4b41      	ldr	r3, [pc, #260]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a40      	ldr	r2, [pc, #256]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001918:	f043 0308 	orr.w	r3, r3, #8
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b3e      	ldr	r3, [pc, #248]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1b      	ldr	r3, [r3, #32]
 800192a:	493b      	ldr	r1, [pc, #236]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800192c:	4313      	orrs	r3, r2
 800192e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001930:	4b39      	ldr	r3, [pc, #228]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	021b      	lsls	r3, r3, #8
 800193e:	4936      	ldr	r1, [pc, #216]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e01a      	b.n	800197c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001946:	4b34      	ldr	r3, [pc, #208]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a33      	ldr	r2, [pc, #204]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800194c:	f023 0301 	bic.w	r3, r3, #1
 8001950:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001952:	f7ff fb2f 	bl	8000fb4 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800195a:	f7ff fb2b 	bl	8000fb4 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e2d9      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800196c:	4b2a      	ldr	r3, [pc, #168]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x1da>
 8001978:	e000      	b.n	800197c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800197a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	2b00      	cmp	r3, #0
 8001986:	d074      	beq.n	8001a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	2b08      	cmp	r3, #8
 800198c:	d005      	beq.n	800199a <HAL_RCC_OscConfig+0x21a>
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	2b0c      	cmp	r3, #12
 8001992:	d10e      	bne.n	80019b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d10b      	bne.n	80019b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800199a:	4b1f      	ldr	r3, [pc, #124]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d064      	beq.n	8001a70 <HAL_RCC_OscConfig+0x2f0>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d160      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e2b6      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x24a>
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a15      	ldr	r2, [pc, #84]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c6:	6013      	str	r3, [r2, #0]
 80019c8:	e01d      	b.n	8001a06 <HAL_RCC_OscConfig+0x286>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019d2:	d10c      	bne.n	80019ee <HAL_RCC_OscConfig+0x26e>
 80019d4:	4b10      	ldr	r3, [pc, #64]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019de:	6013      	str	r3, [r2, #0]
 80019e0:	4b0d      	ldr	r3, [pc, #52]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0c      	ldr	r2, [pc, #48]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e00b      	b.n	8001a06 <HAL_RCC_OscConfig+0x286>
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019f8:	6013      	str	r3, [r2, #0]
 80019fa:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a06      	ldr	r2, [pc, #24]	; (8001a18 <HAL_RCC_OscConfig+0x298>)
 8001a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a04:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d01c      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0e:	f7ff fad1 	bl	8000fb4 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a14:	e011      	b.n	8001a3a <HAL_RCC_OscConfig+0x2ba>
 8001a16:	bf00      	nop
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	08004ffc 	.word	0x08004ffc
 8001a20:	20000018 	.word	0x20000018
 8001a24:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fac4 	bl	8000fb4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e272      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a3a:	4baf      	ldr	r3, [pc, #700]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2a8>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fab4 	bl	8000fb4 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fab0 	bl	8000fb4 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e25e      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a62:	4ba5      	ldr	r3, [pc, #660]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2d0>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d060      	beq.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d005      	beq.n	8001a90 <HAL_RCC_OscConfig+0x310>
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b0c      	cmp	r3, #12
 8001a88:	d119      	bne.n	8001abe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d116      	bne.n	8001abe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a90:	4b99      	ldr	r3, [pc, #612]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d005      	beq.n	8001aa8 <HAL_RCC_OscConfig+0x328>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e23b      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aa8:	4b93      	ldr	r3, [pc, #588]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	691b      	ldr	r3, [r3, #16]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	4990      	ldr	r1, [pc, #576]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001abc:	e040      	b.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d023      	beq.n	8001b0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ac6:	4b8c      	ldr	r3, [pc, #560]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a8b      	ldr	r2, [pc, #556]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad2:	f7ff fa6f 	bl	8000fb4 <HAL_GetTick>
 8001ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ada:	f7ff fa6b 	bl	8000fb4 <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e219      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aec:	4b82      	ldr	r3, [pc, #520]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af8:	4b7f      	ldr	r3, [pc, #508]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	691b      	ldr	r3, [r3, #16]
 8001b04:	061b      	lsls	r3, r3, #24
 8001b06:	497c      	ldr	r1, [pc, #496]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]
 8001b0c:	e018      	b.n	8001b40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b0e:	4b7a      	ldr	r3, [pc, #488]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a79      	ldr	r2, [pc, #484]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fa4b 	bl	8000fb4 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fa47 	bl	8000fb4 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1f5      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b34:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d03c      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d01c      	beq.n	8001b8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b54:	4b68      	ldr	r3, [pc, #416]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b5a:	4a67      	ldr	r2, [pc, #412]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b64:	f7ff fa26 	bl	8000fb4 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b6c:	f7ff fa22 	bl	8000fb4 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e1d0      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b7e:	4b5e      	ldr	r3, [pc, #376]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d0ef      	beq.n	8001b6c <HAL_RCC_OscConfig+0x3ec>
 8001b8c:	e01b      	b.n	8001bc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b8e:	4b5a      	ldr	r3, [pc, #360]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b94:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001b96:	f023 0301 	bic.w	r3, r3, #1
 8001b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b9e:	f7ff fa09 	bl	8000fb4 <HAL_GetTick>
 8001ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba6:	f7ff fa05 	bl	8000fb4 <HAL_GetTick>
 8001baa:	4602      	mov	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b02      	cmp	r3, #2
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e1b3      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001bb8:	4b4f      	ldr	r3, [pc, #316]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1ef      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0304 	and.w	r3, r3, #4
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	f000 80a6 	beq.w	8001d20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bd8:	4b47      	ldr	r3, [pc, #284]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10d      	bne.n	8001c00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001be4:	4b44      	ldr	r3, [pc, #272]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be8:	4a43      	ldr	r2, [pc, #268]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bee:	6593      	str	r3, [r2, #88]	; 0x58
 8001bf0:	4b41      	ldr	r3, [pc, #260]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c00:	4b3e      	ldr	r3, [pc, #248]	; (8001cfc <HAL_RCC_OscConfig+0x57c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d118      	bne.n	8001c3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c0c:	4b3b      	ldr	r3, [pc, #236]	; (8001cfc <HAL_RCC_OscConfig+0x57c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a3a      	ldr	r2, [pc, #232]	; (8001cfc <HAL_RCC_OscConfig+0x57c>)
 8001c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c18:	f7ff f9cc 	bl	8000fb4 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c20:	f7ff f9c8 	bl	8000fb4 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e176      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c32:	4b32      	ldr	r3, [pc, #200]	; (8001cfc <HAL_RCC_OscConfig+0x57c>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d108      	bne.n	8001c58 <HAL_RCC_OscConfig+0x4d8>
 8001c46:	4b2c      	ldr	r3, [pc, #176]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c4c:	4a2a      	ldr	r2, [pc, #168]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c56:	e024      	b.n	8001ca2 <HAL_RCC_OscConfig+0x522>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	2b05      	cmp	r3, #5
 8001c5e:	d110      	bne.n	8001c82 <HAL_RCC_OscConfig+0x502>
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c66:	4a24      	ldr	r2, [pc, #144]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c68:	f043 0304 	orr.w	r3, r3, #4
 8001c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c70:	4b21      	ldr	r3, [pc, #132]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c76:	4a20      	ldr	r2, [pc, #128]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c78:	f043 0301 	orr.w	r3, r3, #1
 8001c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c80:	e00f      	b.n	8001ca2 <HAL_RCC_OscConfig+0x522>
 8001c82:	4b1d      	ldr	r3, [pc, #116]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c88:	4a1b      	ldr	r2, [pc, #108]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c92:	4b19      	ldr	r3, [pc, #100]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c98:	4a17      	ldr	r2, [pc, #92]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	689b      	ldr	r3, [r3, #8]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d016      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f983 	bl	8000fb4 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cb0:	e00a      	b.n	8001cc8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff f97f 	bl	8000fb4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e12b      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001cc8:	4b0b      	ldr	r3, [pc, #44]	; (8001cf8 <HAL_RCC_OscConfig+0x578>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d0ed      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x532>
 8001cd6:	e01a      	b.n	8001d0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd8:	f7ff f96c 	bl	8000fb4 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cde:	e00f      	b.n	8001d00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ce0:	f7ff f968 	bl	8000fb4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d906      	bls.n	8001d00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e114      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d00:	4b89      	ldr	r3, [pc, #548]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1e8      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001d0e:	7ffb      	ldrb	r3, [r7, #31]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d105      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d14:	4b84      	ldr	r3, [pc, #528]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	4a83      	ldr	r2, [pc, #524]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80fa 	beq.w	8001f1e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	f040 80d0 	bne.w	8001ed4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d34:	4b7c      	ldr	r3, [pc, #496]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	f003 0203 	and.w	r2, r3, #3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d130      	bne.n	8001daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	3b01      	subs	r3, #1
 8001d54:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d127      	bne.n	8001daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d64:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d11f      	bne.n	8001daa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d74:	2a07      	cmp	r2, #7
 8001d76:	bf14      	ite	ne
 8001d78:	2201      	movne	r2, #1
 8001d7a:	2200      	moveq	r2, #0
 8001d7c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d113      	bne.n	8001daa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d109      	bne.n	8001daa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da0:	085b      	lsrs	r3, r3, #1
 8001da2:	3b01      	subs	r3, #1
 8001da4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d06e      	beq.n	8001e88 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b0c      	cmp	r3, #12
 8001dae:	d069      	beq.n	8001e84 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001db0:	4b5d      	ldr	r3, [pc, #372]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d105      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001dbc:	4b5a      	ldr	r3, [pc, #360]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e0a9      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001dcc:	4b56      	ldr	r3, [pc, #344]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a55      	ldr	r2, [pc, #340]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001dd2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dd6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dd8:	f7ff f8ec 	bl	8000fb4 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f8e8 	bl	8000fb4 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e096      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df2:	4b4d      	ldr	r3, [pc, #308]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dfe:	4b4a      	ldr	r3, [pc, #296]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	4b4a      	ldr	r3, [pc, #296]	; (8001f2c <HAL_RCC_OscConfig+0x7ac>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e0a:	687a      	ldr	r2, [r7, #4]
 8001e0c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e0e:	3a01      	subs	r2, #1
 8001e10:	0112      	lsls	r2, r2, #4
 8001e12:	4311      	orrs	r1, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e18:	0212      	lsls	r2, r2, #8
 8001e1a:	4311      	orrs	r1, r2
 8001e1c:	687a      	ldr	r2, [r7, #4]
 8001e1e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e20:	0852      	lsrs	r2, r2, #1
 8001e22:	3a01      	subs	r2, #1
 8001e24:	0552      	lsls	r2, r2, #21
 8001e26:	4311      	orrs	r1, r2
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e2c:	0852      	lsrs	r2, r2, #1
 8001e2e:	3a01      	subs	r2, #1
 8001e30:	0652      	lsls	r2, r2, #25
 8001e32:	4311      	orrs	r1, r2
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e38:	0912      	lsrs	r2, r2, #4
 8001e3a:	0452      	lsls	r2, r2, #17
 8001e3c:	430a      	orrs	r2, r1
 8001e3e:	493a      	ldr	r1, [pc, #232]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e44:	4b38      	ldr	r3, [pc, #224]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a37      	ldr	r2, [pc, #220]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e50:	4b35      	ldr	r3, [pc, #212]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	4a34      	ldr	r2, [pc, #208]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e5a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e5c:	f7ff f8aa 	bl	8000fb4 <HAL_GetTick>
 8001e60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e64:	f7ff f8a6 	bl	8000fb4 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e054      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e76:	4b2c      	ldr	r3, [pc, #176]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d0f0      	beq.n	8001e64 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e82:	e04c      	b.n	8001f1e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e04b      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e88:	4b27      	ldr	r3, [pc, #156]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d144      	bne.n	8001f1e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e94:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a23      	ldr	r2, [pc, #140]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ea0:	4b21      	ldr	r3, [pc, #132]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	4a20      	ldr	r2, [pc, #128]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001ea6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eaa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001eac:	f7ff f882 	bl	8000fb4 <HAL_GetTick>
 8001eb0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eb4:	f7ff f87e 	bl	8000fb4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b02      	cmp	r3, #2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e02c      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ec6:	4b18      	ldr	r3, [pc, #96]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x734>
 8001ed2:	e024      	b.n	8001f1e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d01f      	beq.n	8001f1a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a12      	ldr	r2, [pc, #72]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001ee0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff f865 	bl	8000fb4 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001eee:	f7ff f861 	bl	8000fb4 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e00f      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f00:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d1f0      	bne.n	8001eee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001f0c:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	4905      	ldr	r1, [pc, #20]	; (8001f28 <HAL_RCC_OscConfig+0x7a8>)
 8001f12:	4b07      	ldr	r3, [pc, #28]	; (8001f30 <HAL_RCC_OscConfig+0x7b0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	60cb      	str	r3, [r1, #12]
 8001f18:	e001      	b.n	8001f1e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8001f1e:	2300      	movs	r3, #0
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	3720      	adds	r7, #32
 8001f24:	46bd      	mov	sp, r7
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	f99d808c 	.word	0xf99d808c
 8001f30:	feeefffc 	.word	0xfeeefffc

08001f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0e7      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f48:	4b75      	ldr	r3, [pc, #468]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0307 	and.w	r3, r3, #7
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d910      	bls.n	8001f78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b72      	ldr	r3, [pc, #456]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f023 0207 	bic.w	r2, r3, #7
 8001f5e:	4970      	ldr	r1, [pc, #448]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	4313      	orrs	r3, r2
 8001f64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f66:	4b6e      	ldr	r3, [pc, #440]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0307 	and.w	r3, r3, #7
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d001      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f74:	2301      	movs	r3, #1
 8001f76:	e0cf      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b66      	ldr	r3, [pc, #408]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d908      	bls.n	8001fa6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b63      	ldr	r3, [pc, #396]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	4960      	ldr	r1, [pc, #384]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d04c      	beq.n	800204c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	2b03      	cmp	r3, #3
 8001fb8:	d107      	bne.n	8001fca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b5a      	ldr	r3, [pc, #360]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d121      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0a6      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d107      	bne.n	8001fe2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd2:	4b54      	ldr	r3, [pc, #336]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d115      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e09a      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d107      	bne.n	8001ffa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fea:	4b4e      	ldr	r3, [pc, #312]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d109      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e08e      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ffa:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e086      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800200a:	4b46      	ldr	r3, [pc, #280]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0203 	bic.w	r2, r3, #3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	4943      	ldr	r1, [pc, #268]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	4313      	orrs	r3, r2
 800201a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800201c:	f7fe ffca 	bl	8000fb4 <HAL_GetTick>
 8002020:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002022:	e00a      	b.n	800203a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002024:	f7fe ffc6 	bl	8000fb4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e06e      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800203a:	4b3a      	ldr	r3, [pc, #232]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f003 020c 	and.w	r2, r3, #12
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	429a      	cmp	r2, r3
 800204a:	d1eb      	bne.n	8002024 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d010      	beq.n	800207a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	4b31      	ldr	r3, [pc, #196]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002064:	429a      	cmp	r2, r3
 8002066:	d208      	bcs.n	800207a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002068:	4b2e      	ldr	r3, [pc, #184]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	492b      	ldr	r1, [pc, #172]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800207a:	4b29      	ldr	r3, [pc, #164]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d210      	bcs.n	80020aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002088:	4b25      	ldr	r3, [pc, #148]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f023 0207 	bic.w	r2, r3, #7
 8002090:	4923      	ldr	r1, [pc, #140]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002098:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_RCC_ClockConfig+0x1ec>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d001      	beq.n	80020aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e036      	b.n	8002118 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0304 	and.w	r3, r3, #4
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	4918      	ldr	r1, [pc, #96]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0308 	and.w	r3, r3, #8
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d009      	beq.n	80020e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020d4:	4b13      	ldr	r3, [pc, #76]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4910      	ldr	r1, [pc, #64]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020e8:	f000 f824 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 80020ec:	4602      	mov	r2, r0
 80020ee:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <HAL_RCC_ClockConfig+0x1f0>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	091b      	lsrs	r3, r3, #4
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	490b      	ldr	r1, [pc, #44]	; (8002128 <HAL_RCC_ClockConfig+0x1f4>)
 80020fa:	5ccb      	ldrb	r3, [r1, r3]
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	fa22 f303 	lsr.w	r3, r2, r3
 8002104:	4a09      	ldr	r2, [pc, #36]	; (800212c <HAL_RCC_ClockConfig+0x1f8>)
 8002106:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002108:	4b09      	ldr	r3, [pc, #36]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe ff01 	bl	8000f14 <HAL_InitTick>
 8002112:	4603      	mov	r3, r0
 8002114:	72fb      	strb	r3, [r7, #11]

  return status;
 8002116:	7afb      	ldrb	r3, [r7, #11]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3710      	adds	r7, #16
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40022000 	.word	0x40022000
 8002124:	40021000 	.word	0x40021000
 8002128:	08004ffc 	.word	0x08004ffc
 800212c:	20000018 	.word	0x20000018
 8002130:	2000001c 	.word	0x2000001c

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	b480      	push	{r7}
 8002136:	b089      	sub	sp, #36	; 0x24
 8002138:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002142:	4b3e      	ldr	r3, [pc, #248]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800214c:	4b3b      	ldr	r3, [pc, #236]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0x34>
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d121      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d11e      	bne.n	80021a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002168:	4b34      	ldr	r3, [pc, #208]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0308 	and.w	r3, r3, #8
 8002170:	2b00      	cmp	r3, #0
 8002172:	d107      	bne.n	8002184 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002174:	4b31      	ldr	r3, [pc, #196]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800217a:	0a1b      	lsrs	r3, r3, #8
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	e005      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002184:	4b2d      	ldr	r3, [pc, #180]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 030f 	and.w	r3, r3, #15
 800218e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002190:	4a2b      	ldr	r2, [pc, #172]	; (8002240 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002198:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10d      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021a0:	69fb      	ldr	r3, [r7, #28]
 80021a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d102      	bne.n	80021b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021ac:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021ae:	61bb      	str	r3, [r7, #24]
 80021b0:	e004      	b.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021b2:	693b      	ldr	r3, [r7, #16]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d101      	bne.n	80021bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021b8:	4b23      	ldr	r3, [pc, #140]	; (8002248 <HAL_RCC_GetSysClockFreq+0x114>)
 80021ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b0c      	cmp	r3, #12
 80021c0:	d134      	bne.n	800222c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80021c2:	4b1e      	ldr	r3, [pc, #120]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	f003 0303 	and.w	r3, r3, #3
 80021ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d003      	beq.n	80021da <HAL_RCC_GetSysClockFreq+0xa6>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d003      	beq.n	80021e0 <HAL_RCC_GetSysClockFreq+0xac>
 80021d8:	e005      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021da:	4b1a      	ldr	r3, [pc, #104]	; (8002244 <HAL_RCC_GetSysClockFreq+0x110>)
 80021dc:	617b      	str	r3, [r7, #20]
      break;
 80021de:	e005      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <HAL_RCC_GetSysClockFreq+0x114>)
 80021e2:	617b      	str	r3, [r7, #20]
      break;
 80021e4:	e002      	b.n	80021ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	617b      	str	r3, [r7, #20]
      break;
 80021ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021ec:	4b13      	ldr	r3, [pc, #76]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	3301      	adds	r3, #1
 80021f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021fa:	4b10      	ldr	r3, [pc, #64]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	0a1b      	lsrs	r3, r3, #8
 8002200:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	fb02 f203 	mul.w	r2, r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002210:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <HAL_RCC_GetSysClockFreq+0x108>)
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	0e5b      	lsrs	r3, r3, #25
 8002218:	f003 0303 	and.w	r3, r3, #3
 800221c:	3301      	adds	r3, #1
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002222:	697a      	ldr	r2, [r7, #20]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	fbb2 f3f3 	udiv	r3, r2, r3
 800222a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800222c:	69bb      	ldr	r3, [r7, #24]
}
 800222e:	4618      	mov	r0, r3
 8002230:	3724      	adds	r7, #36	; 0x24
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	40021000 	.word	0x40021000
 8002240:	08005014 	.word	0x08005014
 8002244:	00f42400 	.word	0x00f42400
 8002248:	007a1200 	.word	0x007a1200

0800224c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002250:	4b03      	ldr	r3, [pc, #12]	; (8002260 <HAL_RCC_GetHCLKFreq+0x14>)
 8002252:	681b      	ldr	r3, [r3, #0]
}
 8002254:	4618      	mov	r0, r3
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	20000018 	.word	0x20000018

08002264 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002268:	f7ff fff0 	bl	800224c <HAL_RCC_GetHCLKFreq>
 800226c:	4602      	mov	r2, r0
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	4904      	ldr	r1, [pc, #16]	; (800228c <HAL_RCC_GetPCLK1Freq+0x28>)
 800227a:	5ccb      	ldrb	r3, [r1, r3]
 800227c:	f003 031f 	and.w	r3, r3, #31
 8002280:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	0800500c 	.word	0x0800500c

08002290 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002294:	f7ff ffda 	bl	800224c <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b06      	ldr	r3, [pc, #24]	; (80022b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	0adb      	lsrs	r3, r3, #11
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4904      	ldr	r1, [pc, #16]	; (80022b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	f003 031f 	and.w	r3, r3, #31
 80022ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40021000 	.word	0x40021000
 80022b8:	0800500c 	.word	0x0800500c

080022bc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022d4:	f7ff f9f0 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 80022d8:	6178      	str	r0, [r7, #20]
 80022da:	e014      	b.n	8002306 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022dc:	4b25      	ldr	r3, [pc, #148]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4a24      	ldr	r2, [pc, #144]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f0:	60fb      	str	r3, [r7, #12]
 80022f2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022f4:	f7ff f9e0 	bl	80016b8 <HAL_PWREx_GetVoltageRange>
 80022f8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fe:	4a1d      	ldr	r2, [pc, #116]	; (8002374 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002304:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230c:	d10b      	bne.n	8002326 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b80      	cmp	r3, #128	; 0x80
 8002312:	d919      	bls.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2ba0      	cmp	r3, #160	; 0xa0
 8002318:	d902      	bls.n	8002320 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800231a:	2302      	movs	r3, #2
 800231c:	613b      	str	r3, [r7, #16]
 800231e:	e013      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002320:	2301      	movs	r3, #1
 8002322:	613b      	str	r3, [r7, #16]
 8002324:	e010      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b80      	cmp	r3, #128	; 0x80
 800232a:	d902      	bls.n	8002332 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800232c:	2303      	movs	r3, #3
 800232e:	613b      	str	r3, [r7, #16]
 8002330:	e00a      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b80      	cmp	r3, #128	; 0x80
 8002336:	d102      	bne.n	800233e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002338:	2302      	movs	r3, #2
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e004      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2b70      	cmp	r3, #112	; 0x70
 8002342:	d101      	bne.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002344:	2301      	movs	r3, #1
 8002346:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002348:	4b0b      	ldr	r3, [pc, #44]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f023 0207 	bic.w	r2, r3, #7
 8002350:	4909      	ldr	r1, [pc, #36]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	4313      	orrs	r3, r2
 8002356:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002358:	4b07      	ldr	r3, [pc, #28]	; (8002378 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	429a      	cmp	r2, r3
 8002364:	d001      	beq.n	800236a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40021000 	.word	0x40021000
 8002378:	40022000 	.word	0x40022000

0800237c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002384:	2300      	movs	r3, #0
 8002386:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002388:	2300      	movs	r3, #0
 800238a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002394:	2b00      	cmp	r3, #0
 8002396:	d041      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800239c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a0:	d02a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80023a2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80023a6:	d824      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023ac:	d008      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80023ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80023b2:	d81e      	bhi.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d00a      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x52>
 80023b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023bc:	d010      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80023be:	e018      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023c0:	4b86      	ldr	r3, [pc, #536]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a85      	ldr	r2, [pc, #532]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023cc:	e015      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	3304      	adds	r3, #4
 80023d2:	2100      	movs	r1, #0
 80023d4:	4618      	mov	r0, r3
 80023d6:	f000 fabb 	bl	8002950 <RCCEx_PLLSAI1_Config>
 80023da:	4603      	mov	r3, r0
 80023dc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023de:	e00c      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	3320      	adds	r3, #32
 80023e4:	2100      	movs	r1, #0
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fba6 	bl	8002b38 <RCCEx_PLLSAI2_Config>
 80023ec:	4603      	mov	r3, r0
 80023ee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023f0:	e003      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	74fb      	strb	r3, [r7, #19]
      break;
 80023f6:	e000      	b.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023fa:	7cfb      	ldrb	r3, [r7, #19]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10b      	bne.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002400:	4b76      	ldr	r3, [pc, #472]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002406:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800240e:	4973      	ldr	r1, [pc, #460]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002410:	4313      	orrs	r3, r2
 8002412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002416:	e001      	b.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002418:	7cfb      	ldrb	r3, [r7, #19]
 800241a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002424:	2b00      	cmp	r3, #0
 8002426:	d041      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800242c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002430:	d02a      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002432:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002436:	d824      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800243e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002442:	d81e      	bhi.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00a      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002448:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800244c:	d010      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800244e:	e018      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002450:	4b62      	ldr	r3, [pc, #392]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	4a61      	ldr	r2, [pc, #388]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245c:	e015      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	3304      	adds	r3, #4
 8002462:	2100      	movs	r1, #0
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fa73 	bl	8002950 <RCCEx_PLLSAI1_Config>
 800246a:	4603      	mov	r3, r0
 800246c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800246e:	e00c      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3320      	adds	r3, #32
 8002474:	2100      	movs	r1, #0
 8002476:	4618      	mov	r0, r3
 8002478:	f000 fb5e 	bl	8002b38 <RCCEx_PLLSAI2_Config>
 800247c:	4603      	mov	r3, r0
 800247e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002480:	e003      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	74fb      	strb	r3, [r7, #19]
      break;
 8002486:	e000      	b.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002488:	bf00      	nop
    }

    if(ret == HAL_OK)
 800248a:	7cfb      	ldrb	r3, [r7, #19]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d10b      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800249e:	494f      	ldr	r1, [pc, #316]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80024a6:	e001      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f000 80a0 	beq.w	80025fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ba:	2300      	movs	r3, #0
 80024bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024be:	4b47      	ldr	r3, [pc, #284]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024ce:	2300      	movs	r3, #0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d00d      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b41      	ldr	r3, [pc, #260]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d8:	4a40      	ldr	r2, [pc, #256]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	6593      	str	r3, [r2, #88]	; 0x58
 80024e0:	4b3e      	ldr	r3, [pc, #248]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e8:	60bb      	str	r3, [r7, #8]
 80024ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024ec:	2301      	movs	r3, #1
 80024ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024f0:	4b3b      	ldr	r3, [pc, #236]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a3a      	ldr	r2, [pc, #232]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fd5a 	bl	8000fb4 <HAL_GetTick>
 8002500:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002502:	e009      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002504:	f7fe fd56 	bl	8000fb4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d902      	bls.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	74fb      	strb	r3, [r7, #19]
        break;
 8002516:	e005      	b.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002518:	4b31      	ldr	r3, [pc, #196]	; (80025e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0ef      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002524:	7cfb      	ldrb	r3, [r7, #19]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d15c      	bne.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800252a:	4b2c      	ldr	r3, [pc, #176]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002534:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01f      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	429a      	cmp	r2, r3
 8002546:	d019      	beq.n	800257c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002548:	4b24      	ldr	r3, [pc, #144]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800254a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800254e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002552:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002554:	4b21      	ldr	r3, [pc, #132]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255a:	4a20      	ldr	r2, [pc, #128]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800255c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002560:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800256a:	4a1c      	ldr	r2, [pc, #112]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800256c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002570:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	d016      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002586:	f7fe fd15 	bl	8000fb4 <HAL_GetTick>
 800258a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800258c:	e00b      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258e:	f7fe fd11 	bl	8000fb4 <HAL_GetTick>
 8002592:	4602      	mov	r2, r0
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	1ad3      	subs	r3, r2, r3
 8002598:	f241 3288 	movw	r2, #5000	; 0x1388
 800259c:	4293      	cmp	r3, r2
 800259e:	d902      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	74fb      	strb	r3, [r7, #19]
            break;
 80025a4:	e006      	b.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0ec      	beq.n	800258e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80025b4:	7cfb      	ldrb	r3, [r7, #19]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80025ca:	4904      	ldr	r1, [pc, #16]	; (80025dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025d2:	e009      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	74bb      	strb	r3, [r7, #18]
 80025d8:	e006      	b.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025da:	bf00      	nop
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025e4:	7cfb      	ldrb	r3, [r7, #19]
 80025e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e8:	7c7b      	ldrb	r3, [r7, #17]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d105      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ee:	4b9e      	ldr	r3, [pc, #632]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	4a9d      	ldr	r2, [pc, #628]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002606:	4b98      	ldr	r3, [pc, #608]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f023 0203 	bic.w	r2, r3, #3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002614:	4994      	ldr	r1, [pc, #592]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0302 	and.w	r3, r3, #2
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002628:	4b8f      	ldr	r3, [pc, #572]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 020c 	bic.w	r2, r3, #12
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	498c      	ldr	r1, [pc, #560]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800264a:	4b87      	ldr	r3, [pc, #540]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	4983      	ldr	r1, [pc, #524]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0308 	and.w	r3, r3, #8
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800267a:	497b      	ldr	r1, [pc, #492]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0310 	and.w	r3, r3, #16
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00a      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800268e:	4b76      	ldr	r3, [pc, #472]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002694:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269c:	4972      	ldr	r1, [pc, #456]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0320 	and.w	r3, r3, #32
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00a      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026b0:	4b6d      	ldr	r3, [pc, #436]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	496a      	ldr	r1, [pc, #424]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00a      	beq.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026d2:	4b65      	ldr	r3, [pc, #404]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e0:	4961      	ldr	r1, [pc, #388]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e2:	4313      	orrs	r3, r2
 80026e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d00a      	beq.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026f4:	4b5c      	ldr	r3, [pc, #368]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002702:	4959      	ldr	r1, [pc, #356]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002704:	4313      	orrs	r3, r2
 8002706:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00a      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002716:	4b54      	ldr	r3, [pc, #336]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002724:	4950      	ldr	r1, [pc, #320]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002726:	4313      	orrs	r3, r2
 8002728:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002734:	2b00      	cmp	r3, #0
 8002736:	d00a      	beq.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002738:	4b4b      	ldr	r3, [pc, #300]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002746:	4948      	ldr	r1, [pc, #288]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d00a      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800275a:	4b43      	ldr	r3, [pc, #268]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002760:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002768:	493f      	ldr	r1, [pc, #252]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800276a:	4313      	orrs	r3, r2
 800276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d028      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800277c:	4b3a      	ldr	r3, [pc, #232]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002782:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800278a:	4937      	ldr	r1, [pc, #220]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002796:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279a:	d106      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279c:	4b32      	ldr	r3, [pc, #200]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	4a31      	ldr	r2, [pc, #196]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a6:	60d3      	str	r3, [r2, #12]
 80027a8:	e011      	b.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027b2:	d10c      	bne.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3304      	adds	r3, #4
 80027b8:	2101      	movs	r1, #1
 80027ba:	4618      	mov	r0, r3
 80027bc:	f000 f8c8 	bl	8002950 <RCCEx_PLLSAI1_Config>
 80027c0:	4603      	mov	r3, r0
 80027c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d028      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027da:	4b23      	ldr	r3, [pc, #140]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	491f      	ldr	r1, [pc, #124]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027f8:	d106      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027fa:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	4a1a      	ldr	r2, [pc, #104]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002800:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002804:	60d3      	str	r3, [r2, #12]
 8002806:	e011      	b.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002810:	d10c      	bne.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	3304      	adds	r3, #4
 8002816:	2101      	movs	r1, #1
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f899 	bl	8002950 <RCCEx_PLLSAI1_Config>
 800281e:	4603      	mov	r3, r0
 8002820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d001      	beq.n	800282c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002828:	7cfb      	ldrb	r3, [r7, #19]
 800282a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d02b      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002838:	4b0b      	ldr	r3, [pc, #44]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002848:	4313      	orrs	r3, r2
 800284a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002852:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002856:	d109      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002858:	4b03      	ldr	r3, [pc, #12]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a02      	ldr	r2, [pc, #8]	; (8002868 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800285e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002862:	60d3      	str	r3, [r2, #12]
 8002864:	e014      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002870:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002874:	d10c      	bne.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	3304      	adds	r3, #4
 800287a:	2101      	movs	r1, #1
 800287c:	4618      	mov	r0, r3
 800287e:	f000 f867 	bl	8002950 <RCCEx_PLLSAI1_Config>
 8002882:	4603      	mov	r3, r0
 8002884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002886:	7cfb      	ldrb	r3, [r7, #19]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d001      	beq.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d02f      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800289c:	4b2b      	ldr	r3, [pc, #172]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800289e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028aa:	4928      	ldr	r1, [pc, #160]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ba:	d10d      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3304      	adds	r3, #4
 80028c0:	2102      	movs	r1, #2
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 f844 	bl	8002950 <RCCEx_PLLSAI1_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028cc:	7cfb      	ldrb	r3, [r7, #19]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d014      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028d2:	7cfb      	ldrb	r3, [r7, #19]
 80028d4:	74bb      	strb	r3, [r7, #18]
 80028d6:	e011      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028e0:	d10c      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	3320      	adds	r3, #32
 80028e6:	2102      	movs	r1, #2
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f925 	bl	8002b38 <RCCEx_PLLSAI2_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028f2:	7cfb      	ldrb	r3, [r7, #19]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d00a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002908:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800290a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002916:	490d      	ldr	r1, [pc, #52]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00b      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800292a:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800293a:	4904      	ldr	r1, [pc, #16]	; (800294c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002942:	7cbb      	ldrb	r3, [r7, #18]
}
 8002944:	4618      	mov	r0, r3
 8002946:	3718      	adds	r7, #24
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	40021000 	.word	0x40021000

08002950 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b084      	sub	sp, #16
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
 8002958:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295e:	4b75      	ldr	r3, [pc, #468]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f003 0303 	and.w	r3, r3, #3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d018      	beq.n	800299c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800296a:	4b72      	ldr	r3, [pc, #456]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	f003 0203 	and.w	r2, r3, #3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	429a      	cmp	r2, r3
 8002978:	d10d      	bne.n	8002996 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
       ||
 800297e:	2b00      	cmp	r3, #0
 8002980:	d009      	beq.n	8002996 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002982:	4b6c      	ldr	r3, [pc, #432]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	091b      	lsrs	r3, r3, #4
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
       ||
 8002992:	429a      	cmp	r2, r3
 8002994:	d047      	beq.n	8002a26 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
 800299a:	e044      	b.n	8002a26 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d018      	beq.n	80029d6 <RCCEx_PLLSAI1_Config+0x86>
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d825      	bhi.n	80029f4 <RCCEx_PLLSAI1_Config+0xa4>
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d002      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x62>
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d009      	beq.n	80029c4 <RCCEx_PLLSAI1_Config+0x74>
 80029b0:	e020      	b.n	80029f4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029b2:	4b60      	ldr	r3, [pc, #384]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d11d      	bne.n	80029fa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029c2:	e01a      	b.n	80029fa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c4:	4b5b      	ldr	r3, [pc, #364]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d116      	bne.n	80029fe <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d4:	e013      	b.n	80029fe <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d6:	4b57      	ldr	r3, [pc, #348]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10f      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029e2:	4b54      	ldr	r3, [pc, #336]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029f2:	e006      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f4:	2301      	movs	r3, #1
 80029f6:	73fb      	strb	r3, [r7, #15]
      break;
 80029f8:	e004      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029fa:	bf00      	nop
 80029fc:	e002      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029fe:	bf00      	nop
 8002a00:	e000      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002a02:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10d      	bne.n	8002a26 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a0a:	4b4a      	ldr	r3, [pc, #296]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6819      	ldr	r1, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	430b      	orrs	r3, r1
 8002a20:	4944      	ldr	r1, [pc, #272]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d17d      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a2c:	4b41      	ldr	r3, [pc, #260]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a40      	ldr	r2, [pc, #256]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a32:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002a36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a38:	f7fe fabc 	bl	8000fb4 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a3e:	e009      	b.n	8002a54 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a40:	f7fe fab8 	bl	8000fb4 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d902      	bls.n	8002a54 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	73fb      	strb	r3, [r7, #15]
        break;
 8002a52:	e005      	b.n	8002a60 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a54:	4b37      	ldr	r3, [pc, #220]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1ef      	bne.n	8002a40 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d160      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d111      	bne.n	8002a90 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a6c:	4b31      	ldr	r3, [pc, #196]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6892      	ldr	r2, [r2, #8]
 8002a7c:	0211      	lsls	r1, r2, #8
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	68d2      	ldr	r2, [r2, #12]
 8002a82:	0912      	lsrs	r2, r2, #4
 8002a84:	0452      	lsls	r2, r2, #17
 8002a86:	430a      	orrs	r2, r1
 8002a88:	492a      	ldr	r1, [pc, #168]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	610b      	str	r3, [r1, #16]
 8002a8e:	e027      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d112      	bne.n	8002abc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a96:	4b27      	ldr	r3, [pc, #156]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a98:	691b      	ldr	r3, [r3, #16]
 8002a9a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a9e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6892      	ldr	r2, [r2, #8]
 8002aa6:	0211      	lsls	r1, r2, #8
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6912      	ldr	r2, [r2, #16]
 8002aac:	0852      	lsrs	r2, r2, #1
 8002aae:	3a01      	subs	r2, #1
 8002ab0:	0552      	lsls	r2, r2, #21
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	491f      	ldr	r1, [pc, #124]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	610b      	str	r3, [r1, #16]
 8002aba:	e011      	b.n	8002ae0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002abc:	4b1d      	ldr	r3, [pc, #116]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ac4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6892      	ldr	r2, [r2, #8]
 8002acc:	0211      	lsls	r1, r2, #8
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6952      	ldr	r2, [r2, #20]
 8002ad2:	0852      	lsrs	r2, r2, #1
 8002ad4:	3a01      	subs	r2, #1
 8002ad6:	0652      	lsls	r2, r2, #25
 8002ad8:	430a      	orrs	r2, r1
 8002ada:	4916      	ldr	r1, [pc, #88]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ae0:	4b14      	ldr	r3, [pc, #80]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a13      	ldr	r2, [pc, #76]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aec:	f7fe fa62 	bl	8000fb4 <HAL_GetTick>
 8002af0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002af2:	e009      	b.n	8002b08 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af4:	f7fe fa5e 	bl	8000fb4 <HAL_GetTick>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	1ad3      	subs	r3, r2, r3
 8002afe:	2b02      	cmp	r3, #2
 8002b00:	d902      	bls.n	8002b08 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002b02:	2303      	movs	r3, #3
 8002b04:	73fb      	strb	r3, [r7, #15]
          break;
 8002b06:	e005      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b08:	4b0a      	ldr	r3, [pc, #40]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d0ef      	beq.n	8002af4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b1a:	4b06      	ldr	r3, [pc, #24]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b1c:	691a      	ldr	r2, [r3, #16]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	699b      	ldr	r3, [r3, #24]
 8002b22:	4904      	ldr	r1, [pc, #16]	; (8002b34 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000

08002b38 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b42:	2300      	movs	r3, #0
 8002b44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b46:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	f003 0303 	and.w	r3, r3, #3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d018      	beq.n	8002b84 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b52:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f003 0203 	and.w	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d10d      	bne.n	8002b7e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
       ||
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d009      	beq.n	8002b7e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b6a:	4b61      	ldr	r3, [pc, #388]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	091b      	lsrs	r3, r3, #4
 8002b70:	f003 0307 	and.w	r3, r3, #7
 8002b74:	1c5a      	adds	r2, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
       ||
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d047      	beq.n	8002c0e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	73fb      	strb	r3, [r7, #15]
 8002b82:	e044      	b.n	8002c0e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b03      	cmp	r3, #3
 8002b8a:	d018      	beq.n	8002bbe <RCCEx_PLLSAI2_Config+0x86>
 8002b8c:	2b03      	cmp	r3, #3
 8002b8e:	d825      	bhi.n	8002bdc <RCCEx_PLLSAI2_Config+0xa4>
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d002      	beq.n	8002b9a <RCCEx_PLLSAI2_Config+0x62>
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d009      	beq.n	8002bac <RCCEx_PLLSAI2_Config+0x74>
 8002b98:	e020      	b.n	8002bdc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b9a:	4b55      	ldr	r3, [pc, #340]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d11d      	bne.n	8002be2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002baa:	e01a      	b.n	8002be2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d116      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bbc:	e013      	b.n	8002be6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bbe:	4b4c      	ldr	r3, [pc, #304]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d10f      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bca:	4b49      	ldr	r3, [pc, #292]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d109      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bda:	e006      	b.n	8002bea <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	73fb      	strb	r3, [r7, #15]
      break;
 8002be0:	e004      	b.n	8002bec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002be2:	bf00      	nop
 8002be4:	e002      	b.n	8002bec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002be6:	bf00      	nop
 8002be8:	e000      	b.n	8002bec <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bea:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bec:	7bfb      	ldrb	r3, [r7, #15]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d10d      	bne.n	8002c0e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6819      	ldr	r1, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	430b      	orrs	r3, r1
 8002c08:	4939      	ldr	r1, [pc, #228]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c0e:	7bfb      	ldrb	r3, [r7, #15]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d167      	bne.n	8002ce4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002c14:	4b36      	ldr	r3, [pc, #216]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a35      	ldr	r2, [pc, #212]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe f9c8 	bl	8000fb4 <HAL_GetTick>
 8002c24:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c26:	e009      	b.n	8002c3c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c28:	f7fe f9c4 	bl	8000fb4 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d902      	bls.n	8002c3c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	73fb      	strb	r3, [r7, #15]
        break;
 8002c3a:	e005      	b.n	8002c48 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c3c:	4b2c      	ldr	r3, [pc, #176]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d1ef      	bne.n	8002c28 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d14a      	bne.n	8002ce4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d111      	bne.n	8002c78 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c54:	4b26      	ldr	r3, [pc, #152]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	0211      	lsls	r1, r2, #8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	68d2      	ldr	r2, [r2, #12]
 8002c6a:	0912      	lsrs	r2, r2, #4
 8002c6c:	0452      	lsls	r2, r2, #17
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	491f      	ldr	r1, [pc, #124]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	614b      	str	r3, [r1, #20]
 8002c76:	e011      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c78:	4b1d      	ldr	r3, [pc, #116]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	6892      	ldr	r2, [r2, #8]
 8002c88:	0211      	lsls	r1, r2, #8
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6912      	ldr	r2, [r2, #16]
 8002c8e:	0852      	lsrs	r2, r2, #1
 8002c90:	3a01      	subs	r2, #1
 8002c92:	0652      	lsls	r2, r2, #25
 8002c94:	430a      	orrs	r2, r1
 8002c96:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c9c:	4b14      	ldr	r3, [pc, #80]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a13      	ldr	r2, [pc, #76]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca8:	f7fe f984 	bl	8000fb4 <HAL_GetTick>
 8002cac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cae:	e009      	b.n	8002cc4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cb0:	f7fe f980 	bl	8000fb4 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d902      	bls.n	8002cc4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	73fb      	strb	r3, [r7, #15]
          break;
 8002cc2:	e005      	b.n	8002cd0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002cc4:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d0ef      	beq.n	8002cb0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d106      	bne.n	8002ce4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cd8:	695a      	ldr	r2, [r3, #20]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	4904      	ldr	r1, [pc, #16]	; (8002cf0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40021000 	.word	0x40021000

08002cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b082      	sub	sp, #8
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e040      	b.n	8002d88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7fd ff18 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2224      	movs	r2, #36	; 0x24
 8002d20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f022 0201 	bic.w	r2, r2, #1
 8002d30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fc86 	bl	8003644 <UART_SetConfig>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d101      	bne.n	8002d42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e022      	b.n	8002d88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 ff04 	bl	8003b58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f042 0201 	orr.w	r2, r2, #1
 8002d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 ff8b 	bl	8003c9c <UART_CheckIdleState>
 8002d86:	4603      	mov	r3, r0
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b08a      	sub	sp, #40	; 0x28
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	f040 8082 	bne.w	8002eae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d002      	beq.n	8002db6 <HAL_UART_Transmit+0x26>
 8002db0:	88fb      	ldrh	r3, [r7, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07a      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_UART_Transmit+0x38>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e073      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2221      	movs	r2, #33	; 0x21
 8002ddc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002dde:	f7fe f8e9 	bl	8000fb4 <HAL_GetTick>
 8002de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	88fa      	ldrh	r2, [r7, #6]
 8002df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dfc:	d108      	bne.n	8002e10 <HAL_UART_Transmit+0x80>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d104      	bne.n	8002e10 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	61bb      	str	r3, [r7, #24]
 8002e0e:	e003      	b.n	8002e18 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e20:	e02d      	b.n	8002e7e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2180      	movs	r1, #128	; 0x80
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 ff7e 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e039      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d10b      	bne.n	8002e5a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	881a      	ldrh	r2, [r3, #0]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e4e:	b292      	uxth	r2, r2
 8002e50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	3302      	adds	r3, #2
 8002e56:	61bb      	str	r3, [r7, #24]
 8002e58:	e008      	b.n	8002e6c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	781a      	ldrb	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b292      	uxth	r2, r2
 8002e64:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1cb      	bne.n	8002e22 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2140      	movs	r1, #64	; 0x40
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 ff4a 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e005      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	e000      	b.n	8002eb0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002eae:	2302      	movs	r3, #2
  }
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b08b      	sub	sp, #44	; 0x2c
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eca:	2b20      	cmp	r3, #32
 8002ecc:	d156      	bne.n	8002f7c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <HAL_UART_Transmit_IT+0x22>
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e04f      	b.n	8002f7e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d101      	bne.n	8002eec <HAL_UART_Transmit_IT+0x34>
 8002ee8:	2302      	movs	r3, #2
 8002eea:	e048      	b.n	8002f7e <HAL_UART_Transmit_IT+0xc6>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	68ba      	ldr	r2, [r7, #8]
 8002ef8:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	88fa      	ldrh	r2, [r7, #6]
 8002efe:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	88fa      	ldrh	r2, [r7, #6]
 8002f06:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2221      	movs	r2, #33	; 0x21
 8002f1c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f26:	d107      	bne.n	8002f38 <HAL_UART_Transmit_IT+0x80>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d103      	bne.n	8002f38 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4a16      	ldr	r2, [pc, #88]	; (8002f8c <HAL_UART_Transmit_IT+0xd4>)
 8002f34:	669a      	str	r2, [r3, #104]	; 0x68
 8002f36:	e002      	b.n	8002f3e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a15      	ldr	r2, [pc, #84]	; (8002f90 <HAL_UART_Transmit_IT+0xd8>)
 8002f3c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	613b      	str	r3, [r7, #16]
   return(result);
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	623b      	str	r3, [r7, #32]
 8002f66:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f68:	69f9      	ldr	r1, [r7, #28]
 8002f6a:	6a3a      	ldr	r2, [r7, #32]
 8002f6c:	e841 2300 	strex	r3, r2, [r1]
 8002f70:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e6      	bne.n	8002f46 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	e000      	b.n	8002f7e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8002f7c:	2302      	movs	r3, #2
  }
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	372c      	adds	r7, #44	; 0x2c
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	080041f7 	.word	0x080041f7
 8002f90:	0800413f 	.word	0x0800413f

08002f94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08a      	sub	sp, #40	; 0x28
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d142      	bne.n	8003030 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_UART_Receive_IT+0x22>
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e03b      	b.n	8003032 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_UART_Receive_IT+0x34>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e034      	b.n	8003032 <HAL_UART_Receive_IT+0x9e>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_UART_Receive_IT+0xa8>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d01f      	beq.n	8003020 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d018      	beq.n	8003020 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	e853 3f00 	ldrex	r3, [r3]
 8002ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003002:	627b      	str	r3, [r7, #36]	; 0x24
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	623b      	str	r3, [r7, #32]
 800300e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003010:	69f9      	ldr	r1, [r7, #28]
 8003012:	6a3a      	ldr	r2, [r7, #32]
 8003014:	e841 2300 	strex	r3, r2, [r1]
 8003018:	61bb      	str	r3, [r7, #24]
   return(result);
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d1e6      	bne.n	8002fee <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	461a      	mov	r2, r3
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 ff46 	bl	8003eb8 <UART_Start_Receive_IT>
 800302c:	4603      	mov	r3, r0
 800302e:	e000      	b.n	8003032 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003030:	2302      	movs	r3, #2
  }
}
 8003032:	4618      	mov	r0, r3
 8003034:	3728      	adds	r7, #40	; 0x28
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	40008000 	.word	0x40008000

08003040 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	b0ba      	sub	sp, #232	; 0xe8
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003066:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800306a:	f640 030f 	movw	r3, #2063	; 0x80f
 800306e:	4013      	ands	r3, r2
 8003070:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d115      	bne.n	80030a8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800307c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00f      	beq.n	80030a8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003088:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800308c:	f003 0320 	and.w	r3, r3, #32
 8003090:	2b00      	cmp	r3, #0
 8003092:	d009      	beq.n	80030a8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 82a6 	beq.w	80035ea <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
      }
      return;
 80030a6:	e2a0      	b.n	80035ea <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80030a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 8117 	beq.w	80032e0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80030be:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80030c2:	4b85      	ldr	r3, [pc, #532]	; (80032d8 <HAL_UART_IRQHandler+0x298>)
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 810a 	beq.w	80032e0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d011      	beq.n	80030fc <HAL_UART_IRQHandler+0xbc>
 80030d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00b      	beq.n	80030fc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2201      	movs	r2, #1
 80030ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f2:	f043 0201 	orr.w	r2, r3, #1
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003100:	f003 0302 	and.w	r3, r3, #2
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <HAL_UART_IRQHandler+0xec>
 8003108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00b      	beq.n	800312c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2202      	movs	r2, #2
 800311a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003122:	f043 0204 	orr.w	r2, r3, #4
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d011      	beq.n	800315c <HAL_UART_IRQHandler+0x11c>
 8003138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800313c:	f003 0301 	and.w	r3, r3, #1
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00b      	beq.n	800315c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2204      	movs	r2, #4
 800314a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800315c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b00      	cmp	r3, #0
 8003166:	d017      	beq.n	8003198 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800316c:	f003 0320 	and.w	r3, r3, #32
 8003170:	2b00      	cmp	r3, #0
 8003172:	d105      	bne.n	8003180 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003174:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003178:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00b      	beq.n	8003198 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	2208      	movs	r2, #8
 8003186:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800318e:	f043 0208 	orr.w	r2, r3, #8
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800319c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <HAL_UART_IRQHandler+0x18a>
 80031a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00c      	beq.n	80031ca <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c0:	f043 0220 	orr.w	r2, r3, #32
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 820c 	beq.w	80035ee <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80031d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00d      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d007      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003204:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	689b      	ldr	r3, [r3, #8]
 800320e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003212:	2b40      	cmp	r3, #64	; 0x40
 8003214:	d005      	beq.n	8003222 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003216:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800321a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d04f      	beq.n	80032c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 ff12 	bl	800404c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d141      	bne.n	80032ba <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	3308      	adds	r3, #8
 800323c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003244:	e853 3f00 	ldrex	r3, [r3]
 8003248:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800324c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003250:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003254:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3308      	adds	r3, #8
 800325e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003262:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003266:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800326e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003272:	e841 2300 	strex	r3, r2, [r1]
 8003276:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800327a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1d9      	bne.n	8003236 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003286:	2b00      	cmp	r3, #0
 8003288:	d013      	beq.n	80032b2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <HAL_UART_IRQHandler+0x29c>)
 8003290:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	4618      	mov	r0, r3
 8003298:	f7fd ffe7 	bl	800126a <HAL_DMA_Abort_IT>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d017      	beq.n	80032d2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80032ac:	4610      	mov	r0, r2
 80032ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b0:	e00f      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f000 f9b0 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00b      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f9ac 	bl	8003618 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e007      	b.n	80032d2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f9a8 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80032d0:	e18d      	b.n	80035ee <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d2:	bf00      	nop
    return;
 80032d4:	e18b      	b.n	80035ee <HAL_UART_IRQHandler+0x5ae>
 80032d6:	bf00      	nop
 80032d8:	04000120 	.word	0x04000120
 80032dc:	08004113 	.word	0x08004113

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	f040 8146 	bne.w	8003576 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80032ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ee:	f003 0310 	and.w	r3, r3, #16
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 813f 	beq.w	8003576 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032fc:	f003 0310 	and.w	r3, r3, #16
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 8138 	beq.w	8003576 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2210      	movs	r2, #16
 800330c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003318:	2b40      	cmp	r3, #64	; 0x40
 800331a:	f040 80b4 	bne.w	8003486 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800332a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 815f 	beq.w	80035f2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800333a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800333e:	429a      	cmp	r2, r3
 8003340:	f080 8157 	bcs.w	80035f2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800334a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	f040 8085 	bne.w	800346a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003368:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800336c:	e853 3f00 	ldrex	r3, [r3]
 8003370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003378:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800337c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	461a      	mov	r2, r3
 8003386:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800338a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800338e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003392:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003396:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800339a:	e841 2300 	strex	r3, r2, [r1]
 800339e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80033a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d1da      	bne.n	8003360 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3308      	adds	r3, #8
 80033b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80033ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033bc:	f023 0301 	bic.w	r3, r3, #1
 80033c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3308      	adds	r3, #8
 80033ca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80033ce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80033d2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80033d6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80033da:	e841 2300 	strex	r3, r2, [r1]
 80033de:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80033e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1e1      	bne.n	80033aa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	3308      	adds	r3, #8
 80033ec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80033f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	3308      	adds	r3, #8
 8003406:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800340a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800340c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003410:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003418:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1e3      	bne.n	80033e6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2220      	movs	r2, #32
 8003422:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800343a:	f023 0310 	bic.w	r3, r3, #16
 800343e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	461a      	mov	r2, r3
 8003448:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800344c:	65bb      	str	r3, [r7, #88]	; 0x58
 800344e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003452:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800345a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e4      	bne.n	800342a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd fec2 	bl	80011ee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003476:	b29b      	uxth	r3, r3
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	b29b      	uxth	r3, r3
 800347c:	4619      	mov	r1, r3
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f8d4 	bl	800362c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003484:	e0b5      	b.n	80035f2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003492:	b29b      	uxth	r3, r3
 8003494:	1ad3      	subs	r3, r2, r3
 8003496:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f000 80a7 	beq.w	80035f6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80034a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	f000 80a2 	beq.w	80035f6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ba:	e853 3f00 	ldrex	r3, [r3]
 80034be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80034c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	461a      	mov	r2, r3
 80034d0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80034d4:	647b      	str	r3, [r7, #68]	; 0x44
 80034d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80034da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80034dc:	e841 2300 	strex	r3, r2, [r1]
 80034e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80034e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1e4      	bne.n	80034b2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	3308      	adds	r3, #8
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	623b      	str	r3, [r7, #32]
   return(result);
 80034f8:	6a3b      	ldr	r3, [r7, #32]
 80034fa:	f023 0301 	bic.w	r3, r3, #1
 80034fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3308      	adds	r3, #8
 8003508:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800350c:	633a      	str	r2, [r7, #48]	; 0x30
 800350e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003512:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800351a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e3      	bne.n	80034e8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2220      	movs	r2, #32
 8003524:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	e853 3f00 	ldrex	r3, [r3]
 800353e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f023 0310 	bic.w	r3, r3, #16
 8003546:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	461a      	mov	r2, r3
 8003550:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003558:	69b9      	ldr	r1, [r7, #24]
 800355a:	69fa      	ldr	r2, [r7, #28]
 800355c:	e841 2300 	strex	r3, r2, [r1]
 8003560:	617b      	str	r3, [r7, #20]
   return(result);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e4      	bne.n	8003532 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003568:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800356c:	4619      	mov	r1, r3
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f85c 	bl	800362c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003574:	e03f      	b.n	80035f6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <HAL_UART_IRQHandler+0x560>
 8003582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d008      	beq.n	80035a0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003596:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 f816 	bl	80045ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800359e:	e02d      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80035a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00e      	beq.n	80035ca <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80035ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d008      	beq.n	80035ca <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01c      	beq.n	80035fa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
    }
    return;
 80035c8:	e017      	b.n	80035fa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80035ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d012      	beq.n	80035fc <HAL_UART_IRQHandler+0x5bc>
 80035d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00c      	beq.n	80035fc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fe67 	bl	80042b6 <UART_EndTransmit_IT>
    return;
 80035e8:	e008      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80035ea:	bf00      	nop
 80035ec:	e006      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80035ee:	bf00      	nop
 80035f0:	e004      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80035f2:	bf00      	nop
 80035f4:	e002      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
      return;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HAL_UART_IRQHandler+0x5bc>
    return;
 80035fa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80035fc:	37e8      	adds	r7, #232	; 0xe8
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop

08003604 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003604:	b480      	push	{r7}
 8003606:	b083      	sub	sp, #12
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800360c:	bf00      	nop
 800360e:	370c      	adds	r7, #12
 8003610:	46bd      	mov	sp, r7
 8003612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003616:	4770      	bx	lr

08003618 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003638:	bf00      	nop
 800363a:	370c      	adds	r7, #12
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	691b      	ldr	r3, [r3, #16]
 8003658:	431a      	orrs	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	431a      	orrs	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	69db      	ldr	r3, [r3, #28]
 8003664:	4313      	orrs	r3, r2
 8003666:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	4bad      	ldr	r3, [pc, #692]	; (8003924 <UART_SetConfig+0x2e0>)
 8003670:	4013      	ands	r3, r2
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6812      	ldr	r2, [r2, #0]
 8003676:	69f9      	ldr	r1, [r7, #28]
 8003678:	430b      	orrs	r3, r1
 800367a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68da      	ldr	r2, [r3, #12]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	430a      	orrs	r2, r1
 8003690:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4aa2      	ldr	r2, [pc, #648]	; (8003928 <UART_SetConfig+0x2e4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	69fa      	ldr	r2, [r7, #28]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	69fa      	ldr	r2, [r7, #28]
 80036bc:	430a      	orrs	r2, r1
 80036be:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a99      	ldr	r2, [pc, #612]	; (800392c <UART_SetConfig+0x2e8>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d121      	bne.n	800370e <UART_SetConfig+0xca>
 80036ca:	4b99      	ldr	r3, [pc, #612]	; (8003930 <UART_SetConfig+0x2ec>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f003 0303 	and.w	r3, r3, #3
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d817      	bhi.n	8003708 <UART_SetConfig+0xc4>
 80036d8:	a201      	add	r2, pc, #4	; (adr r2, 80036e0 <UART_SetConfig+0x9c>)
 80036da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036de:	bf00      	nop
 80036e0:	080036f1 	.word	0x080036f1
 80036e4:	080036fd 	.word	0x080036fd
 80036e8:	080036f7 	.word	0x080036f7
 80036ec:	08003703 	.word	0x08003703
 80036f0:	2301      	movs	r3, #1
 80036f2:	76fb      	strb	r3, [r7, #27]
 80036f4:	e0e7      	b.n	80038c6 <UART_SetConfig+0x282>
 80036f6:	2302      	movs	r3, #2
 80036f8:	76fb      	strb	r3, [r7, #27]
 80036fa:	e0e4      	b.n	80038c6 <UART_SetConfig+0x282>
 80036fc:	2304      	movs	r3, #4
 80036fe:	76fb      	strb	r3, [r7, #27]
 8003700:	e0e1      	b.n	80038c6 <UART_SetConfig+0x282>
 8003702:	2308      	movs	r3, #8
 8003704:	76fb      	strb	r3, [r7, #27]
 8003706:	e0de      	b.n	80038c6 <UART_SetConfig+0x282>
 8003708:	2310      	movs	r3, #16
 800370a:	76fb      	strb	r3, [r7, #27]
 800370c:	e0db      	b.n	80038c6 <UART_SetConfig+0x282>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a88      	ldr	r2, [pc, #544]	; (8003934 <UART_SetConfig+0x2f0>)
 8003714:	4293      	cmp	r3, r2
 8003716:	d132      	bne.n	800377e <UART_SetConfig+0x13a>
 8003718:	4b85      	ldr	r3, [pc, #532]	; (8003930 <UART_SetConfig+0x2ec>)
 800371a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b0c      	cmp	r3, #12
 8003724:	d828      	bhi.n	8003778 <UART_SetConfig+0x134>
 8003726:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0xe8>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003761 	.word	0x08003761
 8003730:	08003779 	.word	0x08003779
 8003734:	08003779 	.word	0x08003779
 8003738:	08003779 	.word	0x08003779
 800373c:	0800376d 	.word	0x0800376d
 8003740:	08003779 	.word	0x08003779
 8003744:	08003779 	.word	0x08003779
 8003748:	08003779 	.word	0x08003779
 800374c:	08003767 	.word	0x08003767
 8003750:	08003779 	.word	0x08003779
 8003754:	08003779 	.word	0x08003779
 8003758:	08003779 	.word	0x08003779
 800375c:	08003773 	.word	0x08003773
 8003760:	2300      	movs	r3, #0
 8003762:	76fb      	strb	r3, [r7, #27]
 8003764:	e0af      	b.n	80038c6 <UART_SetConfig+0x282>
 8003766:	2302      	movs	r3, #2
 8003768:	76fb      	strb	r3, [r7, #27]
 800376a:	e0ac      	b.n	80038c6 <UART_SetConfig+0x282>
 800376c:	2304      	movs	r3, #4
 800376e:	76fb      	strb	r3, [r7, #27]
 8003770:	e0a9      	b.n	80038c6 <UART_SetConfig+0x282>
 8003772:	2308      	movs	r3, #8
 8003774:	76fb      	strb	r3, [r7, #27]
 8003776:	e0a6      	b.n	80038c6 <UART_SetConfig+0x282>
 8003778:	2310      	movs	r3, #16
 800377a:	76fb      	strb	r3, [r7, #27]
 800377c:	e0a3      	b.n	80038c6 <UART_SetConfig+0x282>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a6d      	ldr	r2, [pc, #436]	; (8003938 <UART_SetConfig+0x2f4>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d120      	bne.n	80037ca <UART_SetConfig+0x186>
 8003788:	4b69      	ldr	r3, [pc, #420]	; (8003930 <UART_SetConfig+0x2ec>)
 800378a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800378e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003792:	2b30      	cmp	r3, #48	; 0x30
 8003794:	d013      	beq.n	80037be <UART_SetConfig+0x17a>
 8003796:	2b30      	cmp	r3, #48	; 0x30
 8003798:	d814      	bhi.n	80037c4 <UART_SetConfig+0x180>
 800379a:	2b20      	cmp	r3, #32
 800379c:	d009      	beq.n	80037b2 <UART_SetConfig+0x16e>
 800379e:	2b20      	cmp	r3, #32
 80037a0:	d810      	bhi.n	80037c4 <UART_SetConfig+0x180>
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <UART_SetConfig+0x168>
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d006      	beq.n	80037b8 <UART_SetConfig+0x174>
 80037aa:	e00b      	b.n	80037c4 <UART_SetConfig+0x180>
 80037ac:	2300      	movs	r3, #0
 80037ae:	76fb      	strb	r3, [r7, #27]
 80037b0:	e089      	b.n	80038c6 <UART_SetConfig+0x282>
 80037b2:	2302      	movs	r3, #2
 80037b4:	76fb      	strb	r3, [r7, #27]
 80037b6:	e086      	b.n	80038c6 <UART_SetConfig+0x282>
 80037b8:	2304      	movs	r3, #4
 80037ba:	76fb      	strb	r3, [r7, #27]
 80037bc:	e083      	b.n	80038c6 <UART_SetConfig+0x282>
 80037be:	2308      	movs	r3, #8
 80037c0:	76fb      	strb	r3, [r7, #27]
 80037c2:	e080      	b.n	80038c6 <UART_SetConfig+0x282>
 80037c4:	2310      	movs	r3, #16
 80037c6:	76fb      	strb	r3, [r7, #27]
 80037c8:	e07d      	b.n	80038c6 <UART_SetConfig+0x282>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a5b      	ldr	r2, [pc, #364]	; (800393c <UART_SetConfig+0x2f8>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d120      	bne.n	8003816 <UART_SetConfig+0x1d2>
 80037d4:	4b56      	ldr	r3, [pc, #344]	; (8003930 <UART_SetConfig+0x2ec>)
 80037d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037da:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037de:	2bc0      	cmp	r3, #192	; 0xc0
 80037e0:	d013      	beq.n	800380a <UART_SetConfig+0x1c6>
 80037e2:	2bc0      	cmp	r3, #192	; 0xc0
 80037e4:	d814      	bhi.n	8003810 <UART_SetConfig+0x1cc>
 80037e6:	2b80      	cmp	r3, #128	; 0x80
 80037e8:	d009      	beq.n	80037fe <UART_SetConfig+0x1ba>
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d810      	bhi.n	8003810 <UART_SetConfig+0x1cc>
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d002      	beq.n	80037f8 <UART_SetConfig+0x1b4>
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d006      	beq.n	8003804 <UART_SetConfig+0x1c0>
 80037f6:	e00b      	b.n	8003810 <UART_SetConfig+0x1cc>
 80037f8:	2300      	movs	r3, #0
 80037fa:	76fb      	strb	r3, [r7, #27]
 80037fc:	e063      	b.n	80038c6 <UART_SetConfig+0x282>
 80037fe:	2302      	movs	r3, #2
 8003800:	76fb      	strb	r3, [r7, #27]
 8003802:	e060      	b.n	80038c6 <UART_SetConfig+0x282>
 8003804:	2304      	movs	r3, #4
 8003806:	76fb      	strb	r3, [r7, #27]
 8003808:	e05d      	b.n	80038c6 <UART_SetConfig+0x282>
 800380a:	2308      	movs	r3, #8
 800380c:	76fb      	strb	r3, [r7, #27]
 800380e:	e05a      	b.n	80038c6 <UART_SetConfig+0x282>
 8003810:	2310      	movs	r3, #16
 8003812:	76fb      	strb	r3, [r7, #27]
 8003814:	e057      	b.n	80038c6 <UART_SetConfig+0x282>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a49      	ldr	r2, [pc, #292]	; (8003940 <UART_SetConfig+0x2fc>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d125      	bne.n	800386c <UART_SetConfig+0x228>
 8003820:	4b43      	ldr	r3, [pc, #268]	; (8003930 <UART_SetConfig+0x2ec>)
 8003822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003826:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800382e:	d017      	beq.n	8003860 <UART_SetConfig+0x21c>
 8003830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003834:	d817      	bhi.n	8003866 <UART_SetConfig+0x222>
 8003836:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800383a:	d00b      	beq.n	8003854 <UART_SetConfig+0x210>
 800383c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003840:	d811      	bhi.n	8003866 <UART_SetConfig+0x222>
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <UART_SetConfig+0x20a>
 8003846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384a:	d006      	beq.n	800385a <UART_SetConfig+0x216>
 800384c:	e00b      	b.n	8003866 <UART_SetConfig+0x222>
 800384e:	2300      	movs	r3, #0
 8003850:	76fb      	strb	r3, [r7, #27]
 8003852:	e038      	b.n	80038c6 <UART_SetConfig+0x282>
 8003854:	2302      	movs	r3, #2
 8003856:	76fb      	strb	r3, [r7, #27]
 8003858:	e035      	b.n	80038c6 <UART_SetConfig+0x282>
 800385a:	2304      	movs	r3, #4
 800385c:	76fb      	strb	r3, [r7, #27]
 800385e:	e032      	b.n	80038c6 <UART_SetConfig+0x282>
 8003860:	2308      	movs	r3, #8
 8003862:	76fb      	strb	r3, [r7, #27]
 8003864:	e02f      	b.n	80038c6 <UART_SetConfig+0x282>
 8003866:	2310      	movs	r3, #16
 8003868:	76fb      	strb	r3, [r7, #27]
 800386a:	e02c      	b.n	80038c6 <UART_SetConfig+0x282>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2d      	ldr	r2, [pc, #180]	; (8003928 <UART_SetConfig+0x2e4>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d125      	bne.n	80038c2 <UART_SetConfig+0x27e>
 8003876:	4b2e      	ldr	r3, [pc, #184]	; (8003930 <UART_SetConfig+0x2ec>)
 8003878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800387c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003880:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003884:	d017      	beq.n	80038b6 <UART_SetConfig+0x272>
 8003886:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800388a:	d817      	bhi.n	80038bc <UART_SetConfig+0x278>
 800388c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003890:	d00b      	beq.n	80038aa <UART_SetConfig+0x266>
 8003892:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003896:	d811      	bhi.n	80038bc <UART_SetConfig+0x278>
 8003898:	2b00      	cmp	r3, #0
 800389a:	d003      	beq.n	80038a4 <UART_SetConfig+0x260>
 800389c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038a0:	d006      	beq.n	80038b0 <UART_SetConfig+0x26c>
 80038a2:	e00b      	b.n	80038bc <UART_SetConfig+0x278>
 80038a4:	2300      	movs	r3, #0
 80038a6:	76fb      	strb	r3, [r7, #27]
 80038a8:	e00d      	b.n	80038c6 <UART_SetConfig+0x282>
 80038aa:	2302      	movs	r3, #2
 80038ac:	76fb      	strb	r3, [r7, #27]
 80038ae:	e00a      	b.n	80038c6 <UART_SetConfig+0x282>
 80038b0:	2304      	movs	r3, #4
 80038b2:	76fb      	strb	r3, [r7, #27]
 80038b4:	e007      	b.n	80038c6 <UART_SetConfig+0x282>
 80038b6:	2308      	movs	r3, #8
 80038b8:	76fb      	strb	r3, [r7, #27]
 80038ba:	e004      	b.n	80038c6 <UART_SetConfig+0x282>
 80038bc:	2310      	movs	r3, #16
 80038be:	76fb      	strb	r3, [r7, #27]
 80038c0:	e001      	b.n	80038c6 <UART_SetConfig+0x282>
 80038c2:	2310      	movs	r3, #16
 80038c4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a17      	ldr	r2, [pc, #92]	; (8003928 <UART_SetConfig+0x2e4>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	f040 8087 	bne.w	80039e0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038d2:	7efb      	ldrb	r3, [r7, #27]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d837      	bhi.n	8003948 <UART_SetConfig+0x304>
 80038d8:	a201      	add	r2, pc, #4	; (adr r2, 80038e0 <UART_SetConfig+0x29c>)
 80038da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038de:	bf00      	nop
 80038e0:	08003905 	.word	0x08003905
 80038e4:	08003949 	.word	0x08003949
 80038e8:	0800390d 	.word	0x0800390d
 80038ec:	08003949 	.word	0x08003949
 80038f0:	08003913 	.word	0x08003913
 80038f4:	08003949 	.word	0x08003949
 80038f8:	08003949 	.word	0x08003949
 80038fc:	08003949 	.word	0x08003949
 8003900:	0800391b 	.word	0x0800391b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003904:	f7fe fcae 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8003908:	6178      	str	r0, [r7, #20]
        break;
 800390a:	e022      	b.n	8003952 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800390c:	4b0d      	ldr	r3, [pc, #52]	; (8003944 <UART_SetConfig+0x300>)
 800390e:	617b      	str	r3, [r7, #20]
        break;
 8003910:	e01f      	b.n	8003952 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003912:	f7fe fc0f 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003916:	6178      	str	r0, [r7, #20]
        break;
 8003918:	e01b      	b.n	8003952 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800391e:	617b      	str	r3, [r7, #20]
        break;
 8003920:	e017      	b.n	8003952 <UART_SetConfig+0x30e>
 8003922:	bf00      	nop
 8003924:	efff69f3 	.word	0xefff69f3
 8003928:	40008000 	.word	0x40008000
 800392c:	40013800 	.word	0x40013800
 8003930:	40021000 	.word	0x40021000
 8003934:	40004400 	.word	0x40004400
 8003938:	40004800 	.word	0x40004800
 800393c:	40004c00 	.word	0x40004c00
 8003940:	40005000 	.word	0x40005000
 8003944:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	76bb      	strb	r3, [r7, #26]
        break;
 8003950:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80f1 	beq.w	8003b3c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	429a      	cmp	r2, r3
 8003968:	d305      	bcc.n	8003976 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003970:	697a      	ldr	r2, [r7, #20]
 8003972:	429a      	cmp	r2, r3
 8003974:	d902      	bls.n	800397c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	76bb      	strb	r3, [r7, #26]
 800397a:	e0df      	b.n	8003b3c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	4618      	mov	r0, r3
 8003980:	f04f 0100 	mov.w	r1, #0
 8003984:	f04f 0200 	mov.w	r2, #0
 8003988:	f04f 0300 	mov.w	r3, #0
 800398c:	020b      	lsls	r3, r1, #8
 800398e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003992:	0202      	lsls	r2, r0, #8
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	6849      	ldr	r1, [r1, #4]
 8003998:	0849      	lsrs	r1, r1, #1
 800399a:	4608      	mov	r0, r1
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	1814      	adds	r4, r2, r0
 80039a2:	eb43 0501 	adc.w	r5, r3, r1
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	461a      	mov	r2, r3
 80039ac:	f04f 0300 	mov.w	r3, #0
 80039b0:	4620      	mov	r0, r4
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7fc fc10 	bl	80001d8 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039c6:	d308      	bcc.n	80039da <UART_SetConfig+0x396>
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039ce:	d204      	bcs.n	80039da <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	60da      	str	r2, [r3, #12]
 80039d8:	e0b0      	b.n	8003b3c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	76bb      	strb	r3, [r7, #26]
 80039de:	e0ad      	b.n	8003b3c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e8:	d15b      	bne.n	8003aa2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80039ea:	7efb      	ldrb	r3, [r7, #27]
 80039ec:	2b08      	cmp	r3, #8
 80039ee:	d828      	bhi.n	8003a42 <UART_SetConfig+0x3fe>
 80039f0:	a201      	add	r2, pc, #4	; (adr r2, 80039f8 <UART_SetConfig+0x3b4>)
 80039f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f6:	bf00      	nop
 80039f8:	08003a1d 	.word	0x08003a1d
 80039fc:	08003a25 	.word	0x08003a25
 8003a00:	08003a2d 	.word	0x08003a2d
 8003a04:	08003a43 	.word	0x08003a43
 8003a08:	08003a33 	.word	0x08003a33
 8003a0c:	08003a43 	.word	0x08003a43
 8003a10:	08003a43 	.word	0x08003a43
 8003a14:	08003a43 	.word	0x08003a43
 8003a18:	08003a3b 	.word	0x08003a3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a1c:	f7fe fc22 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8003a20:	6178      	str	r0, [r7, #20]
        break;
 8003a22:	e013      	b.n	8003a4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a24:	f7fe fc34 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8003a28:	6178      	str	r0, [r7, #20]
        break;
 8003a2a:	e00f      	b.n	8003a4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a2c:	4b49      	ldr	r3, [pc, #292]	; (8003b54 <UART_SetConfig+0x510>)
 8003a2e:	617b      	str	r3, [r7, #20]
        break;
 8003a30:	e00c      	b.n	8003a4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a32:	f7fe fb7f 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003a36:	6178      	str	r0, [r7, #20]
        break;
 8003a38:	e008      	b.n	8003a4c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a3e:	617b      	str	r3, [r7, #20]
        break;
 8003a40:	e004      	b.n	8003a4c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	76bb      	strb	r3, [r7, #26]
        break;
 8003a4a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d074      	beq.n	8003b3c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005a      	lsls	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	085b      	lsrs	r3, r3, #1
 8003a5c:	441a      	add	r2, r3
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a66:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d916      	bls.n	8003a9c <UART_SetConfig+0x458>
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d212      	bcs.n	8003a9c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	f023 030f 	bic.w	r3, r3, #15
 8003a7e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	085b      	lsrs	r3, r3, #1
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	f003 0307 	and.w	r3, r3, #7
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	89fb      	ldrh	r3, [r7, #14]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	89fa      	ldrh	r2, [r7, #14]
 8003a98:	60da      	str	r2, [r3, #12]
 8003a9a:	e04f      	b.n	8003b3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	76bb      	strb	r3, [r7, #26]
 8003aa0:	e04c      	b.n	8003b3c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aa2:	7efb      	ldrb	r3, [r7, #27]
 8003aa4:	2b08      	cmp	r3, #8
 8003aa6:	d828      	bhi.n	8003afa <UART_SetConfig+0x4b6>
 8003aa8:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <UART_SetConfig+0x46c>)
 8003aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aae:	bf00      	nop
 8003ab0:	08003ad5 	.word	0x08003ad5
 8003ab4:	08003add 	.word	0x08003add
 8003ab8:	08003ae5 	.word	0x08003ae5
 8003abc:	08003afb 	.word	0x08003afb
 8003ac0:	08003aeb 	.word	0x08003aeb
 8003ac4:	08003afb 	.word	0x08003afb
 8003ac8:	08003afb 	.word	0x08003afb
 8003acc:	08003afb 	.word	0x08003afb
 8003ad0:	08003af3 	.word	0x08003af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ad4:	f7fe fbc6 	bl	8002264 <HAL_RCC_GetPCLK1Freq>
 8003ad8:	6178      	str	r0, [r7, #20]
        break;
 8003ada:	e013      	b.n	8003b04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003adc:	f7fe fbd8 	bl	8002290 <HAL_RCC_GetPCLK2Freq>
 8003ae0:	6178      	str	r0, [r7, #20]
        break;
 8003ae2:	e00f      	b.n	8003b04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <UART_SetConfig+0x510>)
 8003ae6:	617b      	str	r3, [r7, #20]
        break;
 8003ae8:	e00c      	b.n	8003b04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003aea:	f7fe fb23 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8003aee:	6178      	str	r0, [r7, #20]
        break;
 8003af0:	e008      	b.n	8003b04 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af6:	617b      	str	r3, [r7, #20]
        break;
 8003af8:	e004      	b.n	8003b04 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003afa:	2300      	movs	r3, #0
 8003afc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	76bb      	strb	r3, [r7, #26]
        break;
 8003b02:	bf00      	nop
    }

    if (pclk != 0U)
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d018      	beq.n	8003b3c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	085a      	lsrs	r2, r3, #1
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	441a      	add	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b1c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b0f      	cmp	r3, #15
 8003b22:	d909      	bls.n	8003b38 <UART_SetConfig+0x4f4>
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2a:	d205      	bcs.n	8003b38 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	60da      	str	r2, [r3, #12]
 8003b36:	e001      	b.n	8003b3c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b48:	7ebb      	ldrb	r3, [r7, #26]
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3720      	adds	r7, #32
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bdb0      	pop	{r4, r5, r7, pc}
 8003b52:	bf00      	nop
 8003b54:	00f42400 	.word	0x00f42400

08003b58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b083      	sub	sp, #12
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0304 	and.w	r3, r3, #4
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0308 	and.w	r3, r3, #8
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0310 	and.w	r3, r3, #16
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00a      	beq.n	8003c0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d00a      	beq.n	8003c2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	430a      	orrs	r2, r1
 8003c2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d01a      	beq.n	8003c6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	430a      	orrs	r2, r1
 8003c4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c56:	d10a      	bne.n	8003c6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00a      	beq.n	8003c90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	430a      	orrs	r2, r1
 8003c8e:	605a      	str	r2, [r3, #4]
  }
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cac:	f7fd f982 	bl	8000fb4 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d10e      	bne.n	8003cde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f82d 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e023      	b.n	8003d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f003 0304 	and.w	r3, r3, #4
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d10e      	bne.n	8003d0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f817 	bl	8003d2e <UART_WaitOnFlagUntilTimeout>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d001      	beq.n	8003d0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e00d      	b.n	8003d26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3710      	adds	r7, #16
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b09c      	sub	sp, #112	; 0x70
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	60f8      	str	r0, [r7, #12]
 8003d36:	60b9      	str	r1, [r7, #8]
 8003d38:	603b      	str	r3, [r7, #0]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d3e:	e0a5      	b.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d46:	f000 80a1 	beq.w	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4a:	f7fd f933 	bl	8000fb4 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d302      	bcc.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x32>
 8003d5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13e      	bne.n	8003dde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d74:	667b      	str	r3, [r7, #100]	; 0x64
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d80:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d86:	e841 2300 	strex	r3, r2, [r1]
 8003d8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1e6      	bne.n	8003d60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	3308      	adds	r3, #8
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	e853 3f00 	ldrex	r3, [r3]
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	f023 0301 	bic.w	r3, r3, #1
 8003da8:	663b      	str	r3, [r7, #96]	; 0x60
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	3308      	adds	r3, #8
 8003db0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003db2:	64ba      	str	r2, [r7, #72]	; 0x48
 8003db4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003db8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dba:	e841 2300 	strex	r3, r2, [r1]
 8003dbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003dc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d1e5      	bne.n	8003d92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e067      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0304 	and.w	r3, r3, #4
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d04f      	beq.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dfa:	d147      	bne.n	8003e8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0e:	e853 3f00 	ldrex	r3, [r3]
 8003e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	461a      	mov	r2, r3
 8003e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
 8003e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e2c:	e841 2300 	strex	r3, r2, [r1]
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d1e6      	bne.n	8003e06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	e853 3f00 	ldrex	r3, [r3]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	3308      	adds	r3, #8
 8003e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e58:	623a      	str	r2, [r7, #32]
 8003e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5c:	69f9      	ldr	r1, [r7, #28]
 8003e5e:	6a3a      	ldr	r2, [r7, #32]
 8003e60:	e841 2300 	strex	r3, r2, [r1]
 8003e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1e5      	bne.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2220      	movs	r2, #32
 8003e70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e010      	b.n	8003eae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	f43f af4a 	beq.w	8003d40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003eac:	2300      	movs	r3, #0
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3770      	adds	r7, #112	; 0x70
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b097      	sub	sp, #92	; 0x5c
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d10e      	bne.n	8003f0a <UART_Start_Receive_IT+0x52>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <UART_Start_Receive_IT+0x48>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003efa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003efe:	e02d      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f08:	e028      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <UART_Start_Receive_IT+0x76>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <UART_Start_Receive_IT+0x6c>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f22:	e01b      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	227f      	movs	r2, #127	; 0x7f
 8003f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f2c:	e016      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f36:	d10d      	bne.n	8003f54 <UART_Start_Receive_IT+0x9c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <UART_Start_Receive_IT+0x92>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	227f      	movs	r2, #127	; 0x7f
 8003f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f48:	e008      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	223f      	movs	r2, #63	; 0x3f
 8003f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f52:	e003      	b.n	8003f5c <UART_Start_Receive_IT+0xa4>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2222      	movs	r2, #34	; 0x22
 8003f68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f7c:	f043 0301 	orr.w	r3, r3, #1
 8003f80:	657b      	str	r3, [r7, #84]	; 0x54
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	3308      	adds	r3, #8
 8003f88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f8a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f8c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f90:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e5      	bne.n	8003f6a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa6:	d107      	bne.n	8003fb8 <UART_Start_Receive_IT+0x100>
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d103      	bne.n	8003fb8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	4a24      	ldr	r2, [pc, #144]	; (8004044 <UART_Start_Receive_IT+0x18c>)
 8003fb4:	665a      	str	r2, [r3, #100]	; 0x64
 8003fb6:	e002      	b.n	8003fbe <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	4a23      	ldr	r2, [pc, #140]	; (8004048 <UART_Start_Receive_IT+0x190>)
 8003fbc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d019      	beq.n	8004002 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fec:	637b      	str	r3, [r7, #52]	; 0x34
 8003fee:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ff2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e6      	bne.n	8003fce <UART_Start_Receive_IT+0x116>
 8004000:	e018      	b.n	8004034 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	613b      	str	r3, [r7, #16]
   return(result);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f043 0320 	orr.w	r3, r3, #32
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004020:	623b      	str	r3, [r7, #32]
 8004022:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	6a3a      	ldr	r2, [r7, #32]
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	61bb      	str	r3, [r7, #24]
   return(result);
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	375c      	adds	r7, #92	; 0x5c
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	0800446b 	.word	0x0800446b
 8004048:	0800430b 	.word	0x0800430b

0800404c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800404c:	b480      	push	{r7}
 800404e:	b095      	sub	sp, #84	; 0x54
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004064:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004068:	64fb      	str	r3, [r7, #76]	; 0x4c
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	461a      	mov	r2, r3
 8004070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004072:	643b      	str	r3, [r7, #64]	; 0x40
 8004074:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004078:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e6      	bne.n	8004054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	3308      	adds	r3, #8
 800408c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408e:	6a3b      	ldr	r3, [r7, #32]
 8004090:	e853 3f00 	ldrex	r3, [r3]
 8004094:	61fb      	str	r3, [r7, #28]
   return(result);
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f023 0301 	bic.w	r3, r3, #1
 800409c:	64bb      	str	r3, [r7, #72]	; 0x48
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	e841 2300 	strex	r3, r2, [r1]
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1e5      	bne.n	8004086 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d118      	bne.n	80040f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f023 0310 	bic.w	r3, r3, #16
 80040d6:	647b      	str	r3, [r7, #68]	; 0x44
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	461a      	mov	r2, r3
 80040de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e0:	61bb      	str	r3, [r7, #24]
 80040e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6979      	ldr	r1, [r7, #20]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	613b      	str	r3, [r7, #16]
   return(result);
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e6      	bne.n	80040c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004106:	bf00      	nop
 8004108:	3754      	adds	r7, #84	; 0x54
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr

08004112 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004112:	b580      	push	{r7, lr}
 8004114:	b084      	sub	sp, #16
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2200      	movs	r2, #0
 800412c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f7ff fa71 	bl	8003618 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004136:	bf00      	nop
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}

0800413e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800413e:	b480      	push	{r7}
 8004140:	b08f      	sub	sp, #60	; 0x3c
 8004142:	af00      	add	r7, sp, #0
 8004144:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800414a:	2b21      	cmp	r3, #33	; 0x21
 800414c:	d14d      	bne.n	80041ea <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	d132      	bne.n	80041c0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	61fb      	str	r3, [r7, #28]
   return(result);
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800416e:	637b      	str	r3, [r7, #52]	; 0x34
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	461a      	mov	r2, r3
 8004176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
 800417a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800417e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004180:	e841 2300 	strex	r3, r2, [r1]
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e6      	bne.n	800415a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	60bb      	str	r3, [r7, #8]
   return(result);
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041a0:	633b      	str	r3, [r7, #48]	; 0x30
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	61bb      	str	r3, [r7, #24]
 80041ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	6979      	ldr	r1, [r7, #20]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	e841 2300 	strex	r3, r2, [r1]
 80041b6:	613b      	str	r3, [r7, #16]
   return(result);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1e6      	bne.n	800418c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80041be:	e014      	b.n	80041ea <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041c4:	781a      	ldrb	r2, [r3, #0]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	b292      	uxth	r2, r2
 80041cc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80041de:	b29b      	uxth	r3, r3
 80041e0:	3b01      	subs	r3, #1
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80041ea:	bf00      	nop
 80041ec:	373c      	adds	r7, #60	; 0x3c
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80041f6:	b480      	push	{r7}
 80041f8:	b091      	sub	sp, #68	; 0x44
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004202:	2b21      	cmp	r3, #33	; 0x21
 8004204:	d151      	bne.n	80042aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800420c:	b29b      	uxth	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d132      	bne.n	8004278 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	623b      	str	r3, [r7, #32]
   return(result);
 8004220:	6a3b      	ldr	r3, [r7, #32]
 8004222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004226:	63bb      	str	r3, [r7, #56]	; 0x38
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	461a      	mov	r2, r3
 800422e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
 8004232:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004236:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800423e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e6      	bne.n	8004212 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	e853 3f00 	ldrex	r3, [r3]
 8004250:	60fb      	str	r3, [r7, #12]
   return(result);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	461a      	mov	r2, r3
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	61fb      	str	r3, [r7, #28]
 8004264:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	69b9      	ldr	r1, [r7, #24]
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	617b      	str	r3, [r7, #20]
   return(result);
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e6      	bne.n	8004244 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004276:	e018      	b.n	80042aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800427e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004280:	881a      	ldrh	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800428a:	b292      	uxth	r2, r2
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	1c9a      	adds	r2, r3, #2
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80042aa:	bf00      	nop
 80042ac:	3744      	adds	r7, #68	; 0x44
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr

080042b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b088      	sub	sp, #32
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	e853 3f00 	ldrex	r3, [r3]
 80042ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	461a      	mov	r2, r3
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042e0:	6979      	ldr	r1, [r7, #20]
 80042e2:	69ba      	ldr	r2, [r7, #24]
 80042e4:	e841 2300 	strex	r3, r2, [r1]
 80042e8:	613b      	str	r3, [r7, #16]
   return(result);
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1e6      	bne.n	80042be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f7ff f981 	bl	8003604 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004302:	bf00      	nop
 8004304:	3720      	adds	r7, #32
 8004306:	46bd      	mov	sp, r7
 8004308:	bd80      	pop	{r7, pc}

0800430a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800430a:	b580      	push	{r7, lr}
 800430c:	b096      	sub	sp, #88	; 0x58
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004318:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004320:	2b22      	cmp	r3, #34	; 0x22
 8004322:	f040 8094 	bne.w	800444e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800432c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004330:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004334:	b2d9      	uxtb	r1, r3
 8004336:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800433a:	b2da      	uxtb	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004340:	400a      	ands	r2, r1
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004368:	b29b      	uxth	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d179      	bne.n	8004462 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800437c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800437e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004382:	653b      	str	r3, [r7, #80]	; 0x50
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	461a      	mov	r2, r3
 800438a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800438c:	647b      	str	r3, [r7, #68]	; 0x44
 800438e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004392:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e6      	bne.n	800436e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	3308      	adds	r3, #8
 80043a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	e853 3f00 	ldrex	r3, [r3]
 80043ae:	623b      	str	r3, [r7, #32]
   return(result);
 80043b0:	6a3b      	ldr	r3, [r7, #32]
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c0:	633a      	str	r2, [r7, #48]	; 0x30
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e5      	bne.n	80043a0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d12e      	bne.n	8004446 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	e853 3f00 	ldrex	r3, [r3]
 80043fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f023 0310 	bic.w	r3, r3, #16
 8004402:	64bb      	str	r3, [r7, #72]	; 0x48
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	69b9      	ldr	r1, [r7, #24]
 8004412:	69fa      	ldr	r2, [r7, #28]
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	617b      	str	r3, [r7, #20]
   return(result);
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e6      	bne.n	80043ee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	69db      	ldr	r3, [r3, #28]
 8004426:	f003 0310 	and.w	r3, r3, #16
 800442a:	2b10      	cmp	r3, #16
 800442c:	d103      	bne.n	8004436 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2210      	movs	r2, #16
 8004434:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7ff f8f4 	bl	800362c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004444:	e00d      	b.n	8004462 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f7fc f842 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 800444c:	e009      	b.n	8004462 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	8b1b      	ldrh	r3, [r3, #24]
 8004454:	b29a      	uxth	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0208 	orr.w	r2, r2, #8
 800445e:	b292      	uxth	r2, r2
 8004460:	831a      	strh	r2, [r3, #24]
}
 8004462:	bf00      	nop
 8004464:	3758      	adds	r7, #88	; 0x58
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800446a:	b580      	push	{r7, lr}
 800446c:	b096      	sub	sp, #88	; 0x58
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004478:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004480:	2b22      	cmp	r3, #34	; 0x22
 8004482:	f040 8094 	bne.w	80045ae <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800448c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004494:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004496:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800449a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800449e:	4013      	ands	r3, r2
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044aa:	1c9a      	adds	r2, r3, #2
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d179      	bne.n	80045c2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044d6:	e853 3f00 	ldrex	r3, [r3]
 80044da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	461a      	mov	r2, r3
 80044ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044ec:	643b      	str	r3, [r7, #64]	; 0x40
 80044ee:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044f4:	e841 2300 	strex	r3, r2, [r1]
 80044f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1e6      	bne.n	80044ce <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3308      	adds	r3, #8
 8004506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004508:	6a3b      	ldr	r3, [r7, #32]
 800450a:	e853 3f00 	ldrex	r3, [r3]
 800450e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	f023 0301 	bic.w	r3, r3, #1
 8004516:	64bb      	str	r3, [r7, #72]	; 0x48
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3308      	adds	r3, #8
 800451e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004520:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004526:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004528:	e841 2300 	strex	r3, r2, [r1]
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	2b00      	cmp	r3, #0
 8004532:	d1e5      	bne.n	8004500 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2220      	movs	r2, #32
 8004538:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004544:	2b01      	cmp	r3, #1
 8004546:	d12e      	bne.n	80045a6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	e853 3f00 	ldrex	r3, [r3]
 800455a:	60bb      	str	r3, [r7, #8]
   return(result);
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	f023 0310 	bic.w	r3, r3, #16
 8004562:	647b      	str	r3, [r7, #68]	; 0x44
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	461a      	mov	r2, r3
 800456a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004570:	6979      	ldr	r1, [r7, #20]
 8004572:	69ba      	ldr	r2, [r7, #24]
 8004574:	e841 2300 	strex	r3, r2, [r1]
 8004578:	613b      	str	r3, [r7, #16]
   return(result);
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1e6      	bne.n	800454e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69db      	ldr	r3, [r3, #28]
 8004586:	f003 0310 	and.w	r3, r3, #16
 800458a:	2b10      	cmp	r3, #16
 800458c:	d103      	bne.n	8004596 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2210      	movs	r2, #16
 8004594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800459c:	4619      	mov	r1, r3
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7ff f844 	bl	800362c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045a4:	e00d      	b.n	80045c2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f7fb ff92 	bl	80004d0 <HAL_UART_RxCpltCallback>
}
 80045ac:	e009      	b.n	80045c2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	8b1b      	ldrh	r3, [r3, #24]
 80045b4:	b29a      	uxth	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	b292      	uxth	r2, r2
 80045c0:	831a      	strh	r2, [r3, #24]
}
 80045c2:	bf00      	nop
 80045c4:	3758      	adds	r7, #88	; 0x58
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045d2:	bf00      	nop
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <__errno>:
 80045e0:	4b01      	ldr	r3, [pc, #4]	; (80045e8 <__errno+0x8>)
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	20000024 	.word	0x20000024

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	4d0d      	ldr	r5, [pc, #52]	; (8004624 <__libc_init_array+0x38>)
 80045f0:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f2:	1b64      	subs	r4, r4, r5
 80045f4:	10a4      	asrs	r4, r4, #2
 80045f6:	2600      	movs	r6, #0
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	4d0b      	ldr	r5, [pc, #44]	; (800462c <__libc_init_array+0x40>)
 80045fe:	4c0c      	ldr	r4, [pc, #48]	; (8004630 <__libc_init_array+0x44>)
 8004600:	f000 fce6 	bl	8004fd0 <_init>
 8004604:	1b64      	subs	r4, r4, r5
 8004606:	10a4      	asrs	r4, r4, #2
 8004608:	2600      	movs	r6, #0
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	f855 3b04 	ldr.w	r3, [r5], #4
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	f855 3b04 	ldr.w	r3, [r5], #4
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	080050b0 	.word	0x080050b0
 8004628:	080050b0 	.word	0x080050b0
 800462c:	080050b0 	.word	0x080050b0
 8004630:	080050b4 	.word	0x080050b4

08004634 <memset>:
 8004634:	4402      	add	r2, r0
 8004636:	4603      	mov	r3, r0
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	f803 1b01 	strb.w	r1, [r3], #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <_puts_r>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	460e      	mov	r6, r1
 8004648:	4605      	mov	r5, r0
 800464a:	b118      	cbz	r0, 8004654 <_puts_r+0x10>
 800464c:	6983      	ldr	r3, [r0, #24]
 800464e:	b90b      	cbnz	r3, 8004654 <_puts_r+0x10>
 8004650:	f000 fa48 	bl	8004ae4 <__sinit>
 8004654:	69ab      	ldr	r3, [r5, #24]
 8004656:	68ac      	ldr	r4, [r5, #8]
 8004658:	b913      	cbnz	r3, 8004660 <_puts_r+0x1c>
 800465a:	4628      	mov	r0, r5
 800465c:	f000 fa42 	bl	8004ae4 <__sinit>
 8004660:	4b2c      	ldr	r3, [pc, #176]	; (8004714 <_puts_r+0xd0>)
 8004662:	429c      	cmp	r4, r3
 8004664:	d120      	bne.n	80046a8 <_puts_r+0x64>
 8004666:	686c      	ldr	r4, [r5, #4]
 8004668:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800466a:	07db      	lsls	r3, r3, #31
 800466c:	d405      	bmi.n	800467a <_puts_r+0x36>
 800466e:	89a3      	ldrh	r3, [r4, #12]
 8004670:	0598      	lsls	r0, r3, #22
 8004672:	d402      	bmi.n	800467a <_puts_r+0x36>
 8004674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004676:	f000 fad3 	bl	8004c20 <__retarget_lock_acquire_recursive>
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	0719      	lsls	r1, r3, #28
 800467e:	d51d      	bpl.n	80046bc <_puts_r+0x78>
 8004680:	6923      	ldr	r3, [r4, #16]
 8004682:	b1db      	cbz	r3, 80046bc <_puts_r+0x78>
 8004684:	3e01      	subs	r6, #1
 8004686:	68a3      	ldr	r3, [r4, #8]
 8004688:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800468c:	3b01      	subs	r3, #1
 800468e:	60a3      	str	r3, [r4, #8]
 8004690:	bb39      	cbnz	r1, 80046e2 <_puts_r+0x9e>
 8004692:	2b00      	cmp	r3, #0
 8004694:	da38      	bge.n	8004708 <_puts_r+0xc4>
 8004696:	4622      	mov	r2, r4
 8004698:	210a      	movs	r1, #10
 800469a:	4628      	mov	r0, r5
 800469c:	f000 f848 	bl	8004730 <__swbuf_r>
 80046a0:	3001      	adds	r0, #1
 80046a2:	d011      	beq.n	80046c8 <_puts_r+0x84>
 80046a4:	250a      	movs	r5, #10
 80046a6:	e011      	b.n	80046cc <_puts_r+0x88>
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <_puts_r+0xd4>)
 80046aa:	429c      	cmp	r4, r3
 80046ac:	d101      	bne.n	80046b2 <_puts_r+0x6e>
 80046ae:	68ac      	ldr	r4, [r5, #8]
 80046b0:	e7da      	b.n	8004668 <_puts_r+0x24>
 80046b2:	4b1a      	ldr	r3, [pc, #104]	; (800471c <_puts_r+0xd8>)
 80046b4:	429c      	cmp	r4, r3
 80046b6:	bf08      	it	eq
 80046b8:	68ec      	ldreq	r4, [r5, #12]
 80046ba:	e7d5      	b.n	8004668 <_puts_r+0x24>
 80046bc:	4621      	mov	r1, r4
 80046be:	4628      	mov	r0, r5
 80046c0:	f000 f888 	bl	80047d4 <__swsetup_r>
 80046c4:	2800      	cmp	r0, #0
 80046c6:	d0dd      	beq.n	8004684 <_puts_r+0x40>
 80046c8:	f04f 35ff 	mov.w	r5, #4294967295
 80046cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80046ce:	07da      	lsls	r2, r3, #31
 80046d0:	d405      	bmi.n	80046de <_puts_r+0x9a>
 80046d2:	89a3      	ldrh	r3, [r4, #12]
 80046d4:	059b      	lsls	r3, r3, #22
 80046d6:	d402      	bmi.n	80046de <_puts_r+0x9a>
 80046d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80046da:	f000 faa2 	bl	8004c22 <__retarget_lock_release_recursive>
 80046de:	4628      	mov	r0, r5
 80046e0:	bd70      	pop	{r4, r5, r6, pc}
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	da04      	bge.n	80046f0 <_puts_r+0xac>
 80046e6:	69a2      	ldr	r2, [r4, #24]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	dc06      	bgt.n	80046fa <_puts_r+0xb6>
 80046ec:	290a      	cmp	r1, #10
 80046ee:	d004      	beq.n	80046fa <_puts_r+0xb6>
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	1c5a      	adds	r2, r3, #1
 80046f4:	6022      	str	r2, [r4, #0]
 80046f6:	7019      	strb	r1, [r3, #0]
 80046f8:	e7c5      	b.n	8004686 <_puts_r+0x42>
 80046fa:	4622      	mov	r2, r4
 80046fc:	4628      	mov	r0, r5
 80046fe:	f000 f817 	bl	8004730 <__swbuf_r>
 8004702:	3001      	adds	r0, #1
 8004704:	d1bf      	bne.n	8004686 <_puts_r+0x42>
 8004706:	e7df      	b.n	80046c8 <_puts_r+0x84>
 8004708:	6823      	ldr	r3, [r4, #0]
 800470a:	250a      	movs	r5, #10
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	701d      	strb	r5, [r3, #0]
 8004712:	e7db      	b.n	80046cc <_puts_r+0x88>
 8004714:	08005068 	.word	0x08005068
 8004718:	08005088 	.word	0x08005088
 800471c:	08005048 	.word	0x08005048

08004720 <puts>:
 8004720:	4b02      	ldr	r3, [pc, #8]	; (800472c <puts+0xc>)
 8004722:	4601      	mov	r1, r0
 8004724:	6818      	ldr	r0, [r3, #0]
 8004726:	f7ff bf8d 	b.w	8004644 <_puts_r>
 800472a:	bf00      	nop
 800472c:	20000024 	.word	0x20000024

08004730 <__swbuf_r>:
 8004730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004732:	460e      	mov	r6, r1
 8004734:	4614      	mov	r4, r2
 8004736:	4605      	mov	r5, r0
 8004738:	b118      	cbz	r0, 8004742 <__swbuf_r+0x12>
 800473a:	6983      	ldr	r3, [r0, #24]
 800473c:	b90b      	cbnz	r3, 8004742 <__swbuf_r+0x12>
 800473e:	f000 f9d1 	bl	8004ae4 <__sinit>
 8004742:	4b21      	ldr	r3, [pc, #132]	; (80047c8 <__swbuf_r+0x98>)
 8004744:	429c      	cmp	r4, r3
 8004746:	d12b      	bne.n	80047a0 <__swbuf_r+0x70>
 8004748:	686c      	ldr	r4, [r5, #4]
 800474a:	69a3      	ldr	r3, [r4, #24]
 800474c:	60a3      	str	r3, [r4, #8]
 800474e:	89a3      	ldrh	r3, [r4, #12]
 8004750:	071a      	lsls	r2, r3, #28
 8004752:	d52f      	bpl.n	80047b4 <__swbuf_r+0x84>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	b36b      	cbz	r3, 80047b4 <__swbuf_r+0x84>
 8004758:	6923      	ldr	r3, [r4, #16]
 800475a:	6820      	ldr	r0, [r4, #0]
 800475c:	1ac0      	subs	r0, r0, r3
 800475e:	6963      	ldr	r3, [r4, #20]
 8004760:	b2f6      	uxtb	r6, r6
 8004762:	4283      	cmp	r3, r0
 8004764:	4637      	mov	r7, r6
 8004766:	dc04      	bgt.n	8004772 <__swbuf_r+0x42>
 8004768:	4621      	mov	r1, r4
 800476a:	4628      	mov	r0, r5
 800476c:	f000 f926 	bl	80049bc <_fflush_r>
 8004770:	bb30      	cbnz	r0, 80047c0 <__swbuf_r+0x90>
 8004772:	68a3      	ldr	r3, [r4, #8]
 8004774:	3b01      	subs	r3, #1
 8004776:	60a3      	str	r3, [r4, #8]
 8004778:	6823      	ldr	r3, [r4, #0]
 800477a:	1c5a      	adds	r2, r3, #1
 800477c:	6022      	str	r2, [r4, #0]
 800477e:	701e      	strb	r6, [r3, #0]
 8004780:	6963      	ldr	r3, [r4, #20]
 8004782:	3001      	adds	r0, #1
 8004784:	4283      	cmp	r3, r0
 8004786:	d004      	beq.n	8004792 <__swbuf_r+0x62>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	07db      	lsls	r3, r3, #31
 800478c:	d506      	bpl.n	800479c <__swbuf_r+0x6c>
 800478e:	2e0a      	cmp	r6, #10
 8004790:	d104      	bne.n	800479c <__swbuf_r+0x6c>
 8004792:	4621      	mov	r1, r4
 8004794:	4628      	mov	r0, r5
 8004796:	f000 f911 	bl	80049bc <_fflush_r>
 800479a:	b988      	cbnz	r0, 80047c0 <__swbuf_r+0x90>
 800479c:	4638      	mov	r0, r7
 800479e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047a0:	4b0a      	ldr	r3, [pc, #40]	; (80047cc <__swbuf_r+0x9c>)
 80047a2:	429c      	cmp	r4, r3
 80047a4:	d101      	bne.n	80047aa <__swbuf_r+0x7a>
 80047a6:	68ac      	ldr	r4, [r5, #8]
 80047a8:	e7cf      	b.n	800474a <__swbuf_r+0x1a>
 80047aa:	4b09      	ldr	r3, [pc, #36]	; (80047d0 <__swbuf_r+0xa0>)
 80047ac:	429c      	cmp	r4, r3
 80047ae:	bf08      	it	eq
 80047b0:	68ec      	ldreq	r4, [r5, #12]
 80047b2:	e7ca      	b.n	800474a <__swbuf_r+0x1a>
 80047b4:	4621      	mov	r1, r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	f000 f80c 	bl	80047d4 <__swsetup_r>
 80047bc:	2800      	cmp	r0, #0
 80047be:	d0cb      	beq.n	8004758 <__swbuf_r+0x28>
 80047c0:	f04f 37ff 	mov.w	r7, #4294967295
 80047c4:	e7ea      	b.n	800479c <__swbuf_r+0x6c>
 80047c6:	bf00      	nop
 80047c8:	08005068 	.word	0x08005068
 80047cc:	08005088 	.word	0x08005088
 80047d0:	08005048 	.word	0x08005048

080047d4 <__swsetup_r>:
 80047d4:	4b32      	ldr	r3, [pc, #200]	; (80048a0 <__swsetup_r+0xcc>)
 80047d6:	b570      	push	{r4, r5, r6, lr}
 80047d8:	681d      	ldr	r5, [r3, #0]
 80047da:	4606      	mov	r6, r0
 80047dc:	460c      	mov	r4, r1
 80047de:	b125      	cbz	r5, 80047ea <__swsetup_r+0x16>
 80047e0:	69ab      	ldr	r3, [r5, #24]
 80047e2:	b913      	cbnz	r3, 80047ea <__swsetup_r+0x16>
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f97d 	bl	8004ae4 <__sinit>
 80047ea:	4b2e      	ldr	r3, [pc, #184]	; (80048a4 <__swsetup_r+0xd0>)
 80047ec:	429c      	cmp	r4, r3
 80047ee:	d10f      	bne.n	8004810 <__swsetup_r+0x3c>
 80047f0:	686c      	ldr	r4, [r5, #4]
 80047f2:	89a3      	ldrh	r3, [r4, #12]
 80047f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80047f8:	0719      	lsls	r1, r3, #28
 80047fa:	d42c      	bmi.n	8004856 <__swsetup_r+0x82>
 80047fc:	06dd      	lsls	r5, r3, #27
 80047fe:	d411      	bmi.n	8004824 <__swsetup_r+0x50>
 8004800:	2309      	movs	r3, #9
 8004802:	6033      	str	r3, [r6, #0]
 8004804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004808:	81a3      	strh	r3, [r4, #12]
 800480a:	f04f 30ff 	mov.w	r0, #4294967295
 800480e:	e03e      	b.n	800488e <__swsetup_r+0xba>
 8004810:	4b25      	ldr	r3, [pc, #148]	; (80048a8 <__swsetup_r+0xd4>)
 8004812:	429c      	cmp	r4, r3
 8004814:	d101      	bne.n	800481a <__swsetup_r+0x46>
 8004816:	68ac      	ldr	r4, [r5, #8]
 8004818:	e7eb      	b.n	80047f2 <__swsetup_r+0x1e>
 800481a:	4b24      	ldr	r3, [pc, #144]	; (80048ac <__swsetup_r+0xd8>)
 800481c:	429c      	cmp	r4, r3
 800481e:	bf08      	it	eq
 8004820:	68ec      	ldreq	r4, [r5, #12]
 8004822:	e7e6      	b.n	80047f2 <__swsetup_r+0x1e>
 8004824:	0758      	lsls	r0, r3, #29
 8004826:	d512      	bpl.n	800484e <__swsetup_r+0x7a>
 8004828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800482a:	b141      	cbz	r1, 800483e <__swsetup_r+0x6a>
 800482c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004830:	4299      	cmp	r1, r3
 8004832:	d002      	beq.n	800483a <__swsetup_r+0x66>
 8004834:	4630      	mov	r0, r6
 8004836:	f000 fa59 	bl	8004cec <_free_r>
 800483a:	2300      	movs	r3, #0
 800483c:	6363      	str	r3, [r4, #52]	; 0x34
 800483e:	89a3      	ldrh	r3, [r4, #12]
 8004840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004844:	81a3      	strh	r3, [r4, #12]
 8004846:	2300      	movs	r3, #0
 8004848:	6063      	str	r3, [r4, #4]
 800484a:	6923      	ldr	r3, [r4, #16]
 800484c:	6023      	str	r3, [r4, #0]
 800484e:	89a3      	ldrh	r3, [r4, #12]
 8004850:	f043 0308 	orr.w	r3, r3, #8
 8004854:	81a3      	strh	r3, [r4, #12]
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	b94b      	cbnz	r3, 800486e <__swsetup_r+0x9a>
 800485a:	89a3      	ldrh	r3, [r4, #12]
 800485c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004864:	d003      	beq.n	800486e <__swsetup_r+0x9a>
 8004866:	4621      	mov	r1, r4
 8004868:	4630      	mov	r0, r6
 800486a:	f000 f9ff 	bl	8004c6c <__smakebuf_r>
 800486e:	89a0      	ldrh	r0, [r4, #12]
 8004870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004874:	f010 0301 	ands.w	r3, r0, #1
 8004878:	d00a      	beq.n	8004890 <__swsetup_r+0xbc>
 800487a:	2300      	movs	r3, #0
 800487c:	60a3      	str	r3, [r4, #8]
 800487e:	6963      	ldr	r3, [r4, #20]
 8004880:	425b      	negs	r3, r3
 8004882:	61a3      	str	r3, [r4, #24]
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	b943      	cbnz	r3, 800489a <__swsetup_r+0xc6>
 8004888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800488c:	d1ba      	bne.n	8004804 <__swsetup_r+0x30>
 800488e:	bd70      	pop	{r4, r5, r6, pc}
 8004890:	0781      	lsls	r1, r0, #30
 8004892:	bf58      	it	pl
 8004894:	6963      	ldrpl	r3, [r4, #20]
 8004896:	60a3      	str	r3, [r4, #8]
 8004898:	e7f4      	b.n	8004884 <__swsetup_r+0xb0>
 800489a:	2000      	movs	r0, #0
 800489c:	e7f7      	b.n	800488e <__swsetup_r+0xba>
 800489e:	bf00      	nop
 80048a0:	20000024 	.word	0x20000024
 80048a4:	08005068 	.word	0x08005068
 80048a8:	08005088 	.word	0x08005088
 80048ac:	08005048 	.word	0x08005048

080048b0 <__sflush_r>:
 80048b0:	898a      	ldrh	r2, [r1, #12]
 80048b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048b6:	4605      	mov	r5, r0
 80048b8:	0710      	lsls	r0, r2, #28
 80048ba:	460c      	mov	r4, r1
 80048bc:	d458      	bmi.n	8004970 <__sflush_r+0xc0>
 80048be:	684b      	ldr	r3, [r1, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	dc05      	bgt.n	80048d0 <__sflush_r+0x20>
 80048c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	dc02      	bgt.n	80048d0 <__sflush_r+0x20>
 80048ca:	2000      	movs	r0, #0
 80048cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048d2:	2e00      	cmp	r6, #0
 80048d4:	d0f9      	beq.n	80048ca <__sflush_r+0x1a>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80048dc:	682f      	ldr	r7, [r5, #0]
 80048de:	602b      	str	r3, [r5, #0]
 80048e0:	d032      	beq.n	8004948 <__sflush_r+0x98>
 80048e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	075a      	lsls	r2, r3, #29
 80048e8:	d505      	bpl.n	80048f6 <__sflush_r+0x46>
 80048ea:	6863      	ldr	r3, [r4, #4]
 80048ec:	1ac0      	subs	r0, r0, r3
 80048ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80048f0:	b10b      	cbz	r3, 80048f6 <__sflush_r+0x46>
 80048f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048f4:	1ac0      	subs	r0, r0, r3
 80048f6:	2300      	movs	r3, #0
 80048f8:	4602      	mov	r2, r0
 80048fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80048fc:	6a21      	ldr	r1, [r4, #32]
 80048fe:	4628      	mov	r0, r5
 8004900:	47b0      	blx	r6
 8004902:	1c43      	adds	r3, r0, #1
 8004904:	89a3      	ldrh	r3, [r4, #12]
 8004906:	d106      	bne.n	8004916 <__sflush_r+0x66>
 8004908:	6829      	ldr	r1, [r5, #0]
 800490a:	291d      	cmp	r1, #29
 800490c:	d82c      	bhi.n	8004968 <__sflush_r+0xb8>
 800490e:	4a2a      	ldr	r2, [pc, #168]	; (80049b8 <__sflush_r+0x108>)
 8004910:	40ca      	lsrs	r2, r1
 8004912:	07d6      	lsls	r6, r2, #31
 8004914:	d528      	bpl.n	8004968 <__sflush_r+0xb8>
 8004916:	2200      	movs	r2, #0
 8004918:	6062      	str	r2, [r4, #4]
 800491a:	04d9      	lsls	r1, r3, #19
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	6022      	str	r2, [r4, #0]
 8004920:	d504      	bpl.n	800492c <__sflush_r+0x7c>
 8004922:	1c42      	adds	r2, r0, #1
 8004924:	d101      	bne.n	800492a <__sflush_r+0x7a>
 8004926:	682b      	ldr	r3, [r5, #0]
 8004928:	b903      	cbnz	r3, 800492c <__sflush_r+0x7c>
 800492a:	6560      	str	r0, [r4, #84]	; 0x54
 800492c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800492e:	602f      	str	r7, [r5, #0]
 8004930:	2900      	cmp	r1, #0
 8004932:	d0ca      	beq.n	80048ca <__sflush_r+0x1a>
 8004934:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004938:	4299      	cmp	r1, r3
 800493a:	d002      	beq.n	8004942 <__sflush_r+0x92>
 800493c:	4628      	mov	r0, r5
 800493e:	f000 f9d5 	bl	8004cec <_free_r>
 8004942:	2000      	movs	r0, #0
 8004944:	6360      	str	r0, [r4, #52]	; 0x34
 8004946:	e7c1      	b.n	80048cc <__sflush_r+0x1c>
 8004948:	6a21      	ldr	r1, [r4, #32]
 800494a:	2301      	movs	r3, #1
 800494c:	4628      	mov	r0, r5
 800494e:	47b0      	blx	r6
 8004950:	1c41      	adds	r1, r0, #1
 8004952:	d1c7      	bne.n	80048e4 <__sflush_r+0x34>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c4      	beq.n	80048e4 <__sflush_r+0x34>
 800495a:	2b1d      	cmp	r3, #29
 800495c:	d001      	beq.n	8004962 <__sflush_r+0xb2>
 800495e:	2b16      	cmp	r3, #22
 8004960:	d101      	bne.n	8004966 <__sflush_r+0xb6>
 8004962:	602f      	str	r7, [r5, #0]
 8004964:	e7b1      	b.n	80048ca <__sflush_r+0x1a>
 8004966:	89a3      	ldrh	r3, [r4, #12]
 8004968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800496c:	81a3      	strh	r3, [r4, #12]
 800496e:	e7ad      	b.n	80048cc <__sflush_r+0x1c>
 8004970:	690f      	ldr	r7, [r1, #16]
 8004972:	2f00      	cmp	r7, #0
 8004974:	d0a9      	beq.n	80048ca <__sflush_r+0x1a>
 8004976:	0793      	lsls	r3, r2, #30
 8004978:	680e      	ldr	r6, [r1, #0]
 800497a:	bf08      	it	eq
 800497c:	694b      	ldreq	r3, [r1, #20]
 800497e:	600f      	str	r7, [r1, #0]
 8004980:	bf18      	it	ne
 8004982:	2300      	movne	r3, #0
 8004984:	eba6 0807 	sub.w	r8, r6, r7
 8004988:	608b      	str	r3, [r1, #8]
 800498a:	f1b8 0f00 	cmp.w	r8, #0
 800498e:	dd9c      	ble.n	80048ca <__sflush_r+0x1a>
 8004990:	6a21      	ldr	r1, [r4, #32]
 8004992:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004994:	4643      	mov	r3, r8
 8004996:	463a      	mov	r2, r7
 8004998:	4628      	mov	r0, r5
 800499a:	47b0      	blx	r6
 800499c:	2800      	cmp	r0, #0
 800499e:	dc06      	bgt.n	80049ae <__sflush_r+0xfe>
 80049a0:	89a3      	ldrh	r3, [r4, #12]
 80049a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049a6:	81a3      	strh	r3, [r4, #12]
 80049a8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ac:	e78e      	b.n	80048cc <__sflush_r+0x1c>
 80049ae:	4407      	add	r7, r0
 80049b0:	eba8 0800 	sub.w	r8, r8, r0
 80049b4:	e7e9      	b.n	800498a <__sflush_r+0xda>
 80049b6:	bf00      	nop
 80049b8:	20400001 	.word	0x20400001

080049bc <_fflush_r>:
 80049bc:	b538      	push	{r3, r4, r5, lr}
 80049be:	690b      	ldr	r3, [r1, #16]
 80049c0:	4605      	mov	r5, r0
 80049c2:	460c      	mov	r4, r1
 80049c4:	b913      	cbnz	r3, 80049cc <_fflush_r+0x10>
 80049c6:	2500      	movs	r5, #0
 80049c8:	4628      	mov	r0, r5
 80049ca:	bd38      	pop	{r3, r4, r5, pc}
 80049cc:	b118      	cbz	r0, 80049d6 <_fflush_r+0x1a>
 80049ce:	6983      	ldr	r3, [r0, #24]
 80049d0:	b90b      	cbnz	r3, 80049d6 <_fflush_r+0x1a>
 80049d2:	f000 f887 	bl	8004ae4 <__sinit>
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <_fflush_r+0x6c>)
 80049d8:	429c      	cmp	r4, r3
 80049da:	d11b      	bne.n	8004a14 <_fflush_r+0x58>
 80049dc:	686c      	ldr	r4, [r5, #4]
 80049de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d0ef      	beq.n	80049c6 <_fflush_r+0xa>
 80049e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80049e8:	07d0      	lsls	r0, r2, #31
 80049ea:	d404      	bmi.n	80049f6 <_fflush_r+0x3a>
 80049ec:	0599      	lsls	r1, r3, #22
 80049ee:	d402      	bmi.n	80049f6 <_fflush_r+0x3a>
 80049f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80049f2:	f000 f915 	bl	8004c20 <__retarget_lock_acquire_recursive>
 80049f6:	4628      	mov	r0, r5
 80049f8:	4621      	mov	r1, r4
 80049fa:	f7ff ff59 	bl	80048b0 <__sflush_r>
 80049fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a00:	07da      	lsls	r2, r3, #31
 8004a02:	4605      	mov	r5, r0
 8004a04:	d4e0      	bmi.n	80049c8 <_fflush_r+0xc>
 8004a06:	89a3      	ldrh	r3, [r4, #12]
 8004a08:	059b      	lsls	r3, r3, #22
 8004a0a:	d4dd      	bmi.n	80049c8 <_fflush_r+0xc>
 8004a0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a0e:	f000 f908 	bl	8004c22 <__retarget_lock_release_recursive>
 8004a12:	e7d9      	b.n	80049c8 <_fflush_r+0xc>
 8004a14:	4b05      	ldr	r3, [pc, #20]	; (8004a2c <_fflush_r+0x70>)
 8004a16:	429c      	cmp	r4, r3
 8004a18:	d101      	bne.n	8004a1e <_fflush_r+0x62>
 8004a1a:	68ac      	ldr	r4, [r5, #8]
 8004a1c:	e7df      	b.n	80049de <_fflush_r+0x22>
 8004a1e:	4b04      	ldr	r3, [pc, #16]	; (8004a30 <_fflush_r+0x74>)
 8004a20:	429c      	cmp	r4, r3
 8004a22:	bf08      	it	eq
 8004a24:	68ec      	ldreq	r4, [r5, #12]
 8004a26:	e7da      	b.n	80049de <_fflush_r+0x22>
 8004a28:	08005068 	.word	0x08005068
 8004a2c:	08005088 	.word	0x08005088
 8004a30:	08005048 	.word	0x08005048

08004a34 <std>:
 8004a34:	2300      	movs	r3, #0
 8004a36:	b510      	push	{r4, lr}
 8004a38:	4604      	mov	r4, r0
 8004a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004a42:	6083      	str	r3, [r0, #8]
 8004a44:	8181      	strh	r1, [r0, #12]
 8004a46:	6643      	str	r3, [r0, #100]	; 0x64
 8004a48:	81c2      	strh	r2, [r0, #14]
 8004a4a:	6183      	str	r3, [r0, #24]
 8004a4c:	4619      	mov	r1, r3
 8004a4e:	2208      	movs	r2, #8
 8004a50:	305c      	adds	r0, #92	; 0x5c
 8004a52:	f7ff fdef 	bl	8004634 <memset>
 8004a56:	4b05      	ldr	r3, [pc, #20]	; (8004a6c <std+0x38>)
 8004a58:	6263      	str	r3, [r4, #36]	; 0x24
 8004a5a:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <std+0x3c>)
 8004a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8004a5e:	4b05      	ldr	r3, [pc, #20]	; (8004a74 <std+0x40>)
 8004a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a62:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <std+0x44>)
 8004a64:	6224      	str	r4, [r4, #32]
 8004a66:	6323      	str	r3, [r4, #48]	; 0x30
 8004a68:	bd10      	pop	{r4, pc}
 8004a6a:	bf00      	nop
 8004a6c:	08004e61 	.word	0x08004e61
 8004a70:	08004e83 	.word	0x08004e83
 8004a74:	08004ebb 	.word	0x08004ebb
 8004a78:	08004edf 	.word	0x08004edf

08004a7c <_cleanup_r>:
 8004a7c:	4901      	ldr	r1, [pc, #4]	; (8004a84 <_cleanup_r+0x8>)
 8004a7e:	f000 b8af 	b.w	8004be0 <_fwalk_reent>
 8004a82:	bf00      	nop
 8004a84:	080049bd 	.word	0x080049bd

08004a88 <__sfmoreglue>:
 8004a88:	b570      	push	{r4, r5, r6, lr}
 8004a8a:	1e4a      	subs	r2, r1, #1
 8004a8c:	2568      	movs	r5, #104	; 0x68
 8004a8e:	4355      	muls	r5, r2
 8004a90:	460e      	mov	r6, r1
 8004a92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a96:	f000 f979 	bl	8004d8c <_malloc_r>
 8004a9a:	4604      	mov	r4, r0
 8004a9c:	b140      	cbz	r0, 8004ab0 <__sfmoreglue+0x28>
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	e9c0 1600 	strd	r1, r6, [r0]
 8004aa4:	300c      	adds	r0, #12
 8004aa6:	60a0      	str	r0, [r4, #8]
 8004aa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004aac:	f7ff fdc2 	bl	8004634 <memset>
 8004ab0:	4620      	mov	r0, r4
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}

08004ab4 <__sfp_lock_acquire>:
 8004ab4:	4801      	ldr	r0, [pc, #4]	; (8004abc <__sfp_lock_acquire+0x8>)
 8004ab6:	f000 b8b3 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004aba:	bf00      	nop
 8004abc:	20000158 	.word	0x20000158

08004ac0 <__sfp_lock_release>:
 8004ac0:	4801      	ldr	r0, [pc, #4]	; (8004ac8 <__sfp_lock_release+0x8>)
 8004ac2:	f000 b8ae 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004ac6:	bf00      	nop
 8004ac8:	20000158 	.word	0x20000158

08004acc <__sinit_lock_acquire>:
 8004acc:	4801      	ldr	r0, [pc, #4]	; (8004ad4 <__sinit_lock_acquire+0x8>)
 8004ace:	f000 b8a7 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004ad2:	bf00      	nop
 8004ad4:	20000153 	.word	0x20000153

08004ad8 <__sinit_lock_release>:
 8004ad8:	4801      	ldr	r0, [pc, #4]	; (8004ae0 <__sinit_lock_release+0x8>)
 8004ada:	f000 b8a2 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004ade:	bf00      	nop
 8004ae0:	20000153 	.word	0x20000153

08004ae4 <__sinit>:
 8004ae4:	b510      	push	{r4, lr}
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	f7ff fff0 	bl	8004acc <__sinit_lock_acquire>
 8004aec:	69a3      	ldr	r3, [r4, #24]
 8004aee:	b11b      	cbz	r3, 8004af8 <__sinit+0x14>
 8004af0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af4:	f7ff bff0 	b.w	8004ad8 <__sinit_lock_release>
 8004af8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004afc:	6523      	str	r3, [r4, #80]	; 0x50
 8004afe:	4b13      	ldr	r3, [pc, #76]	; (8004b4c <__sinit+0x68>)
 8004b00:	4a13      	ldr	r2, [pc, #76]	; (8004b50 <__sinit+0x6c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	62a2      	str	r2, [r4, #40]	; 0x28
 8004b06:	42a3      	cmp	r3, r4
 8004b08:	bf04      	itt	eq
 8004b0a:	2301      	moveq	r3, #1
 8004b0c:	61a3      	streq	r3, [r4, #24]
 8004b0e:	4620      	mov	r0, r4
 8004b10:	f000 f820 	bl	8004b54 <__sfp>
 8004b14:	6060      	str	r0, [r4, #4]
 8004b16:	4620      	mov	r0, r4
 8004b18:	f000 f81c 	bl	8004b54 <__sfp>
 8004b1c:	60a0      	str	r0, [r4, #8]
 8004b1e:	4620      	mov	r0, r4
 8004b20:	f000 f818 	bl	8004b54 <__sfp>
 8004b24:	2200      	movs	r2, #0
 8004b26:	60e0      	str	r0, [r4, #12]
 8004b28:	2104      	movs	r1, #4
 8004b2a:	6860      	ldr	r0, [r4, #4]
 8004b2c:	f7ff ff82 	bl	8004a34 <std>
 8004b30:	68a0      	ldr	r0, [r4, #8]
 8004b32:	2201      	movs	r2, #1
 8004b34:	2109      	movs	r1, #9
 8004b36:	f7ff ff7d 	bl	8004a34 <std>
 8004b3a:	68e0      	ldr	r0, [r4, #12]
 8004b3c:	2202      	movs	r2, #2
 8004b3e:	2112      	movs	r1, #18
 8004b40:	f7ff ff78 	bl	8004a34 <std>
 8004b44:	2301      	movs	r3, #1
 8004b46:	61a3      	str	r3, [r4, #24]
 8004b48:	e7d2      	b.n	8004af0 <__sinit+0xc>
 8004b4a:	bf00      	nop
 8004b4c:	08005044 	.word	0x08005044
 8004b50:	08004a7d 	.word	0x08004a7d

08004b54 <__sfp>:
 8004b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b56:	4607      	mov	r7, r0
 8004b58:	f7ff ffac 	bl	8004ab4 <__sfp_lock_acquire>
 8004b5c:	4b1e      	ldr	r3, [pc, #120]	; (8004bd8 <__sfp+0x84>)
 8004b5e:	681e      	ldr	r6, [r3, #0]
 8004b60:	69b3      	ldr	r3, [r6, #24]
 8004b62:	b913      	cbnz	r3, 8004b6a <__sfp+0x16>
 8004b64:	4630      	mov	r0, r6
 8004b66:	f7ff ffbd 	bl	8004ae4 <__sinit>
 8004b6a:	3648      	adds	r6, #72	; 0x48
 8004b6c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b70:	3b01      	subs	r3, #1
 8004b72:	d503      	bpl.n	8004b7c <__sfp+0x28>
 8004b74:	6833      	ldr	r3, [r6, #0]
 8004b76:	b30b      	cbz	r3, 8004bbc <__sfp+0x68>
 8004b78:	6836      	ldr	r6, [r6, #0]
 8004b7a:	e7f7      	b.n	8004b6c <__sfp+0x18>
 8004b7c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b80:	b9d5      	cbnz	r5, 8004bb8 <__sfp+0x64>
 8004b82:	4b16      	ldr	r3, [pc, #88]	; (8004bdc <__sfp+0x88>)
 8004b84:	60e3      	str	r3, [r4, #12]
 8004b86:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b8a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b8c:	f000 f847 	bl	8004c1e <__retarget_lock_init_recursive>
 8004b90:	f7ff ff96 	bl	8004ac0 <__sfp_lock_release>
 8004b94:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b98:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b9c:	6025      	str	r5, [r4, #0]
 8004b9e:	61a5      	str	r5, [r4, #24]
 8004ba0:	2208      	movs	r2, #8
 8004ba2:	4629      	mov	r1, r5
 8004ba4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004ba8:	f7ff fd44 	bl	8004634 <memset>
 8004bac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004bb0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004bb4:	4620      	mov	r0, r4
 8004bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bb8:	3468      	adds	r4, #104	; 0x68
 8004bba:	e7d9      	b.n	8004b70 <__sfp+0x1c>
 8004bbc:	2104      	movs	r1, #4
 8004bbe:	4638      	mov	r0, r7
 8004bc0:	f7ff ff62 	bl	8004a88 <__sfmoreglue>
 8004bc4:	4604      	mov	r4, r0
 8004bc6:	6030      	str	r0, [r6, #0]
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d1d5      	bne.n	8004b78 <__sfp+0x24>
 8004bcc:	f7ff ff78 	bl	8004ac0 <__sfp_lock_release>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	e7ee      	b.n	8004bb4 <__sfp+0x60>
 8004bd6:	bf00      	nop
 8004bd8:	08005044 	.word	0x08005044
 8004bdc:	ffff0001 	.word	0xffff0001

08004be0 <_fwalk_reent>:
 8004be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004be4:	4606      	mov	r6, r0
 8004be6:	4688      	mov	r8, r1
 8004be8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004bec:	2700      	movs	r7, #0
 8004bee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf2:	f1b9 0901 	subs.w	r9, r9, #1
 8004bf6:	d505      	bpl.n	8004c04 <_fwalk_reent+0x24>
 8004bf8:	6824      	ldr	r4, [r4, #0]
 8004bfa:	2c00      	cmp	r4, #0
 8004bfc:	d1f7      	bne.n	8004bee <_fwalk_reent+0xe>
 8004bfe:	4638      	mov	r0, r7
 8004c00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c04:	89ab      	ldrh	r3, [r5, #12]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d907      	bls.n	8004c1a <_fwalk_reent+0x3a>
 8004c0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	d003      	beq.n	8004c1a <_fwalk_reent+0x3a>
 8004c12:	4629      	mov	r1, r5
 8004c14:	4630      	mov	r0, r6
 8004c16:	47c0      	blx	r8
 8004c18:	4307      	orrs	r7, r0
 8004c1a:	3568      	adds	r5, #104	; 0x68
 8004c1c:	e7e9      	b.n	8004bf2 <_fwalk_reent+0x12>

08004c1e <__retarget_lock_init_recursive>:
 8004c1e:	4770      	bx	lr

08004c20 <__retarget_lock_acquire_recursive>:
 8004c20:	4770      	bx	lr

08004c22 <__retarget_lock_release_recursive>:
 8004c22:	4770      	bx	lr

08004c24 <__swhatbuf_r>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	460e      	mov	r6, r1
 8004c28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c2c:	2900      	cmp	r1, #0
 8004c2e:	b096      	sub	sp, #88	; 0x58
 8004c30:	4614      	mov	r4, r2
 8004c32:	461d      	mov	r5, r3
 8004c34:	da07      	bge.n	8004c46 <__swhatbuf_r+0x22>
 8004c36:	2300      	movs	r3, #0
 8004c38:	602b      	str	r3, [r5, #0]
 8004c3a:	89b3      	ldrh	r3, [r6, #12]
 8004c3c:	061a      	lsls	r2, r3, #24
 8004c3e:	d410      	bmi.n	8004c62 <__swhatbuf_r+0x3e>
 8004c40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c44:	e00e      	b.n	8004c64 <__swhatbuf_r+0x40>
 8004c46:	466a      	mov	r2, sp
 8004c48:	f000 f970 	bl	8004f2c <_fstat_r>
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	dbf2      	blt.n	8004c36 <__swhatbuf_r+0x12>
 8004c50:	9a01      	ldr	r2, [sp, #4]
 8004c52:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004c56:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004c5a:	425a      	negs	r2, r3
 8004c5c:	415a      	adcs	r2, r3
 8004c5e:	602a      	str	r2, [r5, #0]
 8004c60:	e7ee      	b.n	8004c40 <__swhatbuf_r+0x1c>
 8004c62:	2340      	movs	r3, #64	; 0x40
 8004c64:	2000      	movs	r0, #0
 8004c66:	6023      	str	r3, [r4, #0]
 8004c68:	b016      	add	sp, #88	; 0x58
 8004c6a:	bd70      	pop	{r4, r5, r6, pc}

08004c6c <__smakebuf_r>:
 8004c6c:	898b      	ldrh	r3, [r1, #12]
 8004c6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c70:	079d      	lsls	r5, r3, #30
 8004c72:	4606      	mov	r6, r0
 8004c74:	460c      	mov	r4, r1
 8004c76:	d507      	bpl.n	8004c88 <__smakebuf_r+0x1c>
 8004c78:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c7c:	6023      	str	r3, [r4, #0]
 8004c7e:	6123      	str	r3, [r4, #16]
 8004c80:	2301      	movs	r3, #1
 8004c82:	6163      	str	r3, [r4, #20]
 8004c84:	b002      	add	sp, #8
 8004c86:	bd70      	pop	{r4, r5, r6, pc}
 8004c88:	ab01      	add	r3, sp, #4
 8004c8a:	466a      	mov	r2, sp
 8004c8c:	f7ff ffca 	bl	8004c24 <__swhatbuf_r>
 8004c90:	9900      	ldr	r1, [sp, #0]
 8004c92:	4605      	mov	r5, r0
 8004c94:	4630      	mov	r0, r6
 8004c96:	f000 f879 	bl	8004d8c <_malloc_r>
 8004c9a:	b948      	cbnz	r0, 8004cb0 <__smakebuf_r+0x44>
 8004c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ca0:	059a      	lsls	r2, r3, #22
 8004ca2:	d4ef      	bmi.n	8004c84 <__smakebuf_r+0x18>
 8004ca4:	f023 0303 	bic.w	r3, r3, #3
 8004ca8:	f043 0302 	orr.w	r3, r3, #2
 8004cac:	81a3      	strh	r3, [r4, #12]
 8004cae:	e7e3      	b.n	8004c78 <__smakebuf_r+0xc>
 8004cb0:	4b0d      	ldr	r3, [pc, #52]	; (8004ce8 <__smakebuf_r+0x7c>)
 8004cb2:	62b3      	str	r3, [r6, #40]	; 0x28
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cbc:	81a3      	strh	r3, [r4, #12]
 8004cbe:	9b00      	ldr	r3, [sp, #0]
 8004cc0:	6163      	str	r3, [r4, #20]
 8004cc2:	9b01      	ldr	r3, [sp, #4]
 8004cc4:	6120      	str	r0, [r4, #16]
 8004cc6:	b15b      	cbz	r3, 8004ce0 <__smakebuf_r+0x74>
 8004cc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ccc:	4630      	mov	r0, r6
 8004cce:	f000 f93f 	bl	8004f50 <_isatty_r>
 8004cd2:	b128      	cbz	r0, 8004ce0 <__smakebuf_r+0x74>
 8004cd4:	89a3      	ldrh	r3, [r4, #12]
 8004cd6:	f023 0303 	bic.w	r3, r3, #3
 8004cda:	f043 0301 	orr.w	r3, r3, #1
 8004cde:	81a3      	strh	r3, [r4, #12]
 8004ce0:	89a0      	ldrh	r0, [r4, #12]
 8004ce2:	4305      	orrs	r5, r0
 8004ce4:	81a5      	strh	r5, [r4, #12]
 8004ce6:	e7cd      	b.n	8004c84 <__smakebuf_r+0x18>
 8004ce8:	08004a7d 	.word	0x08004a7d

08004cec <_free_r>:
 8004cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	d048      	beq.n	8004d84 <_free_r+0x98>
 8004cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cf6:	9001      	str	r0, [sp, #4]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8004cfe:	bfb8      	it	lt
 8004d00:	18e4      	addlt	r4, r4, r3
 8004d02:	f000 f947 	bl	8004f94 <__malloc_lock>
 8004d06:	4a20      	ldr	r2, [pc, #128]	; (8004d88 <_free_r+0x9c>)
 8004d08:	9801      	ldr	r0, [sp, #4]
 8004d0a:	6813      	ldr	r3, [r2, #0]
 8004d0c:	4615      	mov	r5, r2
 8004d0e:	b933      	cbnz	r3, 8004d1e <_free_r+0x32>
 8004d10:	6063      	str	r3, [r4, #4]
 8004d12:	6014      	str	r4, [r2, #0]
 8004d14:	b003      	add	sp, #12
 8004d16:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d1a:	f000 b941 	b.w	8004fa0 <__malloc_unlock>
 8004d1e:	42a3      	cmp	r3, r4
 8004d20:	d90b      	bls.n	8004d3a <_free_r+0x4e>
 8004d22:	6821      	ldr	r1, [r4, #0]
 8004d24:	1862      	adds	r2, r4, r1
 8004d26:	4293      	cmp	r3, r2
 8004d28:	bf04      	itt	eq
 8004d2a:	681a      	ldreq	r2, [r3, #0]
 8004d2c:	685b      	ldreq	r3, [r3, #4]
 8004d2e:	6063      	str	r3, [r4, #4]
 8004d30:	bf04      	itt	eq
 8004d32:	1852      	addeq	r2, r2, r1
 8004d34:	6022      	streq	r2, [r4, #0]
 8004d36:	602c      	str	r4, [r5, #0]
 8004d38:	e7ec      	b.n	8004d14 <_free_r+0x28>
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	b10b      	cbz	r3, 8004d44 <_free_r+0x58>
 8004d40:	42a3      	cmp	r3, r4
 8004d42:	d9fa      	bls.n	8004d3a <_free_r+0x4e>
 8004d44:	6811      	ldr	r1, [r2, #0]
 8004d46:	1855      	adds	r5, r2, r1
 8004d48:	42a5      	cmp	r5, r4
 8004d4a:	d10b      	bne.n	8004d64 <_free_r+0x78>
 8004d4c:	6824      	ldr	r4, [r4, #0]
 8004d4e:	4421      	add	r1, r4
 8004d50:	1854      	adds	r4, r2, r1
 8004d52:	42a3      	cmp	r3, r4
 8004d54:	6011      	str	r1, [r2, #0]
 8004d56:	d1dd      	bne.n	8004d14 <_free_r+0x28>
 8004d58:	681c      	ldr	r4, [r3, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	6053      	str	r3, [r2, #4]
 8004d5e:	4421      	add	r1, r4
 8004d60:	6011      	str	r1, [r2, #0]
 8004d62:	e7d7      	b.n	8004d14 <_free_r+0x28>
 8004d64:	d902      	bls.n	8004d6c <_free_r+0x80>
 8004d66:	230c      	movs	r3, #12
 8004d68:	6003      	str	r3, [r0, #0]
 8004d6a:	e7d3      	b.n	8004d14 <_free_r+0x28>
 8004d6c:	6825      	ldr	r5, [r4, #0]
 8004d6e:	1961      	adds	r1, r4, r5
 8004d70:	428b      	cmp	r3, r1
 8004d72:	bf04      	itt	eq
 8004d74:	6819      	ldreq	r1, [r3, #0]
 8004d76:	685b      	ldreq	r3, [r3, #4]
 8004d78:	6063      	str	r3, [r4, #4]
 8004d7a:	bf04      	itt	eq
 8004d7c:	1949      	addeq	r1, r1, r5
 8004d7e:	6021      	streq	r1, [r4, #0]
 8004d80:	6054      	str	r4, [r2, #4]
 8004d82:	e7c7      	b.n	8004d14 <_free_r+0x28>
 8004d84:	b003      	add	sp, #12
 8004d86:	bd30      	pop	{r4, r5, pc}
 8004d88:	200000c0 	.word	0x200000c0

08004d8c <_malloc_r>:
 8004d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d8e:	1ccd      	adds	r5, r1, #3
 8004d90:	f025 0503 	bic.w	r5, r5, #3
 8004d94:	3508      	adds	r5, #8
 8004d96:	2d0c      	cmp	r5, #12
 8004d98:	bf38      	it	cc
 8004d9a:	250c      	movcc	r5, #12
 8004d9c:	2d00      	cmp	r5, #0
 8004d9e:	4606      	mov	r6, r0
 8004da0:	db01      	blt.n	8004da6 <_malloc_r+0x1a>
 8004da2:	42a9      	cmp	r1, r5
 8004da4:	d903      	bls.n	8004dae <_malloc_r+0x22>
 8004da6:	230c      	movs	r3, #12
 8004da8:	6033      	str	r3, [r6, #0]
 8004daa:	2000      	movs	r0, #0
 8004dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dae:	f000 f8f1 	bl	8004f94 <__malloc_lock>
 8004db2:	4921      	ldr	r1, [pc, #132]	; (8004e38 <_malloc_r+0xac>)
 8004db4:	680a      	ldr	r2, [r1, #0]
 8004db6:	4614      	mov	r4, r2
 8004db8:	b99c      	cbnz	r4, 8004de2 <_malloc_r+0x56>
 8004dba:	4f20      	ldr	r7, [pc, #128]	; (8004e3c <_malloc_r+0xb0>)
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	b923      	cbnz	r3, 8004dca <_malloc_r+0x3e>
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f000 f83c 	bl	8004e40 <_sbrk_r>
 8004dc8:	6038      	str	r0, [r7, #0]
 8004dca:	4629      	mov	r1, r5
 8004dcc:	4630      	mov	r0, r6
 8004dce:	f000 f837 	bl	8004e40 <_sbrk_r>
 8004dd2:	1c43      	adds	r3, r0, #1
 8004dd4:	d123      	bne.n	8004e1e <_malloc_r+0x92>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	4630      	mov	r0, r6
 8004ddc:	f000 f8e0 	bl	8004fa0 <__malloc_unlock>
 8004de0:	e7e3      	b.n	8004daa <_malloc_r+0x1e>
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	1b5b      	subs	r3, r3, r5
 8004de6:	d417      	bmi.n	8004e18 <_malloc_r+0x8c>
 8004de8:	2b0b      	cmp	r3, #11
 8004dea:	d903      	bls.n	8004df4 <_malloc_r+0x68>
 8004dec:	6023      	str	r3, [r4, #0]
 8004dee:	441c      	add	r4, r3
 8004df0:	6025      	str	r5, [r4, #0]
 8004df2:	e004      	b.n	8004dfe <_malloc_r+0x72>
 8004df4:	6863      	ldr	r3, [r4, #4]
 8004df6:	42a2      	cmp	r2, r4
 8004df8:	bf0c      	ite	eq
 8004dfa:	600b      	streq	r3, [r1, #0]
 8004dfc:	6053      	strne	r3, [r2, #4]
 8004dfe:	4630      	mov	r0, r6
 8004e00:	f000 f8ce 	bl	8004fa0 <__malloc_unlock>
 8004e04:	f104 000b 	add.w	r0, r4, #11
 8004e08:	1d23      	adds	r3, r4, #4
 8004e0a:	f020 0007 	bic.w	r0, r0, #7
 8004e0e:	1ac2      	subs	r2, r0, r3
 8004e10:	d0cc      	beq.n	8004dac <_malloc_r+0x20>
 8004e12:	1a1b      	subs	r3, r3, r0
 8004e14:	50a3      	str	r3, [r4, r2]
 8004e16:	e7c9      	b.n	8004dac <_malloc_r+0x20>
 8004e18:	4622      	mov	r2, r4
 8004e1a:	6864      	ldr	r4, [r4, #4]
 8004e1c:	e7cc      	b.n	8004db8 <_malloc_r+0x2c>
 8004e1e:	1cc4      	adds	r4, r0, #3
 8004e20:	f024 0403 	bic.w	r4, r4, #3
 8004e24:	42a0      	cmp	r0, r4
 8004e26:	d0e3      	beq.n	8004df0 <_malloc_r+0x64>
 8004e28:	1a21      	subs	r1, r4, r0
 8004e2a:	4630      	mov	r0, r6
 8004e2c:	f000 f808 	bl	8004e40 <_sbrk_r>
 8004e30:	3001      	adds	r0, #1
 8004e32:	d1dd      	bne.n	8004df0 <_malloc_r+0x64>
 8004e34:	e7cf      	b.n	8004dd6 <_malloc_r+0x4a>
 8004e36:	bf00      	nop
 8004e38:	200000c0 	.word	0x200000c0
 8004e3c:	200000c4 	.word	0x200000c4

08004e40 <_sbrk_r>:
 8004e40:	b538      	push	{r3, r4, r5, lr}
 8004e42:	4d06      	ldr	r5, [pc, #24]	; (8004e5c <_sbrk_r+0x1c>)
 8004e44:	2300      	movs	r3, #0
 8004e46:	4604      	mov	r4, r0
 8004e48:	4608      	mov	r0, r1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	f7fb ffd8 	bl	8000e00 <_sbrk>
 8004e50:	1c43      	adds	r3, r0, #1
 8004e52:	d102      	bne.n	8004e5a <_sbrk_r+0x1a>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	b103      	cbz	r3, 8004e5a <_sbrk_r+0x1a>
 8004e58:	6023      	str	r3, [r4, #0]
 8004e5a:	bd38      	pop	{r3, r4, r5, pc}
 8004e5c:	2000015c 	.word	0x2000015c

08004e60 <__sread>:
 8004e60:	b510      	push	{r4, lr}
 8004e62:	460c      	mov	r4, r1
 8004e64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e68:	f000 f8a0 	bl	8004fac <_read_r>
 8004e6c:	2800      	cmp	r0, #0
 8004e6e:	bfab      	itete	ge
 8004e70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004e72:	89a3      	ldrhlt	r3, [r4, #12]
 8004e74:	181b      	addge	r3, r3, r0
 8004e76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004e7a:	bfac      	ite	ge
 8004e7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8004e7e:	81a3      	strhlt	r3, [r4, #12]
 8004e80:	bd10      	pop	{r4, pc}

08004e82 <__swrite>:
 8004e82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e86:	461f      	mov	r7, r3
 8004e88:	898b      	ldrh	r3, [r1, #12]
 8004e8a:	05db      	lsls	r3, r3, #23
 8004e8c:	4605      	mov	r5, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	4616      	mov	r6, r2
 8004e92:	d505      	bpl.n	8004ea0 <__swrite+0x1e>
 8004e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e98:	2302      	movs	r3, #2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f000 f868 	bl	8004f70 <_lseek_r>
 8004ea0:	89a3      	ldrh	r3, [r4, #12]
 8004ea2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004eaa:	81a3      	strh	r3, [r4, #12]
 8004eac:	4632      	mov	r2, r6
 8004eae:	463b      	mov	r3, r7
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb6:	f000 b817 	b.w	8004ee8 <_write_r>

08004eba <__sseek>:
 8004eba:	b510      	push	{r4, lr}
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ec2:	f000 f855 	bl	8004f70 <_lseek_r>
 8004ec6:	1c43      	adds	r3, r0, #1
 8004ec8:	89a3      	ldrh	r3, [r4, #12]
 8004eca:	bf15      	itete	ne
 8004ecc:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ece:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ed2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004ed6:	81a3      	strheq	r3, [r4, #12]
 8004ed8:	bf18      	it	ne
 8004eda:	81a3      	strhne	r3, [r4, #12]
 8004edc:	bd10      	pop	{r4, pc}

08004ede <__sclose>:
 8004ede:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ee2:	f000 b813 	b.w	8004f0c <_close_r>
	...

08004ee8 <_write_r>:
 8004ee8:	b538      	push	{r3, r4, r5, lr}
 8004eea:	4d07      	ldr	r5, [pc, #28]	; (8004f08 <_write_r+0x20>)
 8004eec:	4604      	mov	r4, r0
 8004eee:	4608      	mov	r0, r1
 8004ef0:	4611      	mov	r1, r2
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	602a      	str	r2, [r5, #0]
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f7fb ff31 	bl	8000d5e <_write>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d102      	bne.n	8004f06 <_write_r+0x1e>
 8004f00:	682b      	ldr	r3, [r5, #0]
 8004f02:	b103      	cbz	r3, 8004f06 <_write_r+0x1e>
 8004f04:	6023      	str	r3, [r4, #0]
 8004f06:	bd38      	pop	{r3, r4, r5, pc}
 8004f08:	2000015c 	.word	0x2000015c

08004f0c <_close_r>:
 8004f0c:	b538      	push	{r3, r4, r5, lr}
 8004f0e:	4d06      	ldr	r5, [pc, #24]	; (8004f28 <_close_r+0x1c>)
 8004f10:	2300      	movs	r3, #0
 8004f12:	4604      	mov	r4, r0
 8004f14:	4608      	mov	r0, r1
 8004f16:	602b      	str	r3, [r5, #0]
 8004f18:	f7fb ff3d 	bl	8000d96 <_close>
 8004f1c:	1c43      	adds	r3, r0, #1
 8004f1e:	d102      	bne.n	8004f26 <_close_r+0x1a>
 8004f20:	682b      	ldr	r3, [r5, #0]
 8004f22:	b103      	cbz	r3, 8004f26 <_close_r+0x1a>
 8004f24:	6023      	str	r3, [r4, #0]
 8004f26:	bd38      	pop	{r3, r4, r5, pc}
 8004f28:	2000015c 	.word	0x2000015c

08004f2c <_fstat_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	4d07      	ldr	r5, [pc, #28]	; (8004f4c <_fstat_r+0x20>)
 8004f30:	2300      	movs	r3, #0
 8004f32:	4604      	mov	r4, r0
 8004f34:	4608      	mov	r0, r1
 8004f36:	4611      	mov	r1, r2
 8004f38:	602b      	str	r3, [r5, #0]
 8004f3a:	f7fb ff38 	bl	8000dae <_fstat>
 8004f3e:	1c43      	adds	r3, r0, #1
 8004f40:	d102      	bne.n	8004f48 <_fstat_r+0x1c>
 8004f42:	682b      	ldr	r3, [r5, #0]
 8004f44:	b103      	cbz	r3, 8004f48 <_fstat_r+0x1c>
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	bd38      	pop	{r3, r4, r5, pc}
 8004f4a:	bf00      	nop
 8004f4c:	2000015c 	.word	0x2000015c

08004f50 <_isatty_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4d06      	ldr	r5, [pc, #24]	; (8004f6c <_isatty_r+0x1c>)
 8004f54:	2300      	movs	r3, #0
 8004f56:	4604      	mov	r4, r0
 8004f58:	4608      	mov	r0, r1
 8004f5a:	602b      	str	r3, [r5, #0]
 8004f5c:	f7fb ff37 	bl	8000dce <_isatty>
 8004f60:	1c43      	adds	r3, r0, #1
 8004f62:	d102      	bne.n	8004f6a <_isatty_r+0x1a>
 8004f64:	682b      	ldr	r3, [r5, #0]
 8004f66:	b103      	cbz	r3, 8004f6a <_isatty_r+0x1a>
 8004f68:	6023      	str	r3, [r4, #0]
 8004f6a:	bd38      	pop	{r3, r4, r5, pc}
 8004f6c:	2000015c 	.word	0x2000015c

08004f70 <_lseek_r>:
 8004f70:	b538      	push	{r3, r4, r5, lr}
 8004f72:	4d07      	ldr	r5, [pc, #28]	; (8004f90 <_lseek_r+0x20>)
 8004f74:	4604      	mov	r4, r0
 8004f76:	4608      	mov	r0, r1
 8004f78:	4611      	mov	r1, r2
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	602a      	str	r2, [r5, #0]
 8004f7e:	461a      	mov	r2, r3
 8004f80:	f7fb ff30 	bl	8000de4 <_lseek>
 8004f84:	1c43      	adds	r3, r0, #1
 8004f86:	d102      	bne.n	8004f8e <_lseek_r+0x1e>
 8004f88:	682b      	ldr	r3, [r5, #0]
 8004f8a:	b103      	cbz	r3, 8004f8e <_lseek_r+0x1e>
 8004f8c:	6023      	str	r3, [r4, #0]
 8004f8e:	bd38      	pop	{r3, r4, r5, pc}
 8004f90:	2000015c 	.word	0x2000015c

08004f94 <__malloc_lock>:
 8004f94:	4801      	ldr	r0, [pc, #4]	; (8004f9c <__malloc_lock+0x8>)
 8004f96:	f7ff be43 	b.w	8004c20 <__retarget_lock_acquire_recursive>
 8004f9a:	bf00      	nop
 8004f9c:	20000154 	.word	0x20000154

08004fa0 <__malloc_unlock>:
 8004fa0:	4801      	ldr	r0, [pc, #4]	; (8004fa8 <__malloc_unlock+0x8>)
 8004fa2:	f7ff be3e 	b.w	8004c22 <__retarget_lock_release_recursive>
 8004fa6:	bf00      	nop
 8004fa8:	20000154 	.word	0x20000154

08004fac <_read_r>:
 8004fac:	b538      	push	{r3, r4, r5, lr}
 8004fae:	4d07      	ldr	r5, [pc, #28]	; (8004fcc <_read_r+0x20>)
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	4608      	mov	r0, r1
 8004fb4:	4611      	mov	r1, r2
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	602a      	str	r2, [r5, #0]
 8004fba:	461a      	mov	r2, r3
 8004fbc:	f7fb feb2 	bl	8000d24 <_read>
 8004fc0:	1c43      	adds	r3, r0, #1
 8004fc2:	d102      	bne.n	8004fca <_read_r+0x1e>
 8004fc4:	682b      	ldr	r3, [r5, #0]
 8004fc6:	b103      	cbz	r3, 8004fca <_read_r+0x1e>
 8004fc8:	6023      	str	r3, [r4, #0]
 8004fca:	bd38      	pop	{r3, r4, r5, pc}
 8004fcc:	2000015c 	.word	0x2000015c

08004fd0 <_init>:
 8004fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fd2:	bf00      	nop
 8004fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fd6:	bc08      	pop	{r3}
 8004fd8:	469e      	mov	lr, r3
 8004fda:	4770      	bx	lr

08004fdc <_fini>:
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004fde:	bf00      	nop
 8004fe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004fe2:	bc08      	pop	{r3}
 8004fe4:	469e      	mov	lr, r3
 8004fe6:	4770      	bx	lr
