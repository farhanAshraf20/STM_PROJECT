
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a328  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800a4b8  0800a4b8  0001a4b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa0c  0800aa0c  00020324  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa0c  0800aa0c  0001aa0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa14  0800aa14  00020324  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa14  0800aa14  0001aa14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000324  20000000  0800aa1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000480  20000324  0800ad40  00020324  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  0800ad40  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020324  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cf91  00000000  00000000  00020354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036e2  00000000  00000000  0003d2e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001618  00000000  00000000  000409c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001490  00000000  00000000  00041fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a093  00000000  00000000  00043470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aac4  00000000  00000000  0006d503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbd33  00000000  00000000  00087fc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00183cfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d58  00000000  00000000  00183d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000324 	.word	0x20000324
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a4a0 	.word	0x0800a4a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000328 	.word	0x20000328
 80001cc:	0800a4a0 	.word	0x0800a4a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <f_Temperature>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/*This function use for extracting Temperature data */
void f_Temperature(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af02      	add	r7, sp, #8
	printf("Flag state  :%d\n",flag);
 8000ea6:	4b23      	ldr	r3, [pc, #140]	; (8000f34 <f_Temperature+0x94>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4822      	ldr	r0, [pc, #136]	; (8000f38 <f_Temperature+0x98>)
 8000eae:	f007 f8af 	bl	8008010 <iprintf>
	if(flag)
 8000eb2:	4b20      	ldr	r3, [pc, #128]	; (8000f34 <f_Temperature+0x94>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d038      	beq.n	8000f2c <f_Temperature+0x8c>
	{

		if(BSP_TSENSOR_Init())
 8000eba:	f001 fb01 	bl	80024c0 <BSP_TSENSOR_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d010      	beq.n	8000ee6 <f_Temperature+0x46>
		{
			snprintf(str_tmp,100,"\033\143 Not Taking TEMPERATURE Data\r");
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	; (8000f3c <f_Temperature+0x9c>)
 8000ec6:	2164      	movs	r1, #100	; 0x64
 8000ec8:	481d      	ldr	r0, [pc, #116]	; (8000f40 <f_Temperature+0xa0>)
 8000eca:	f007 f8b9 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8000ece:	230a      	movs	r3, #10
 8000ed0:	2264      	movs	r2, #100	; 0x64
 8000ed2:	491b      	ldr	r1, [pc, #108]	; (8000f40 <f_Temperature+0xa0>)
 8000ed4:	481b      	ldr	r0, [pc, #108]	; (8000f44 <f_Temperature+0xa4>)
 8000ed6:	f004 ffc9 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 8000eda:	2264      	movs	r2, #100	; 0x64
 8000edc:	2100      	movs	r1, #0
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <f_Temperature+0xa0>)
 8000ee0:	f006 fc24 	bl	800772c <memset>
		}


	}

}
 8000ee4:	e022      	b.n	8000f2c <f_Temperature+0x8c>
			temp_value = BSP_TSENSOR_ReadTemp();
 8000ee6:	f001 fb07 	bl	80024f8 <BSP_TSENSOR_ReadTemp>
 8000eea:	eef0 7a40 	vmov.f32	s15, s0
 8000eee:	4b16      	ldr	r3, [pc, #88]	; (8000f48 <f_Temperature+0xa8>)
 8000ef0:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_tmp,100," \033\143 TEMPERATURE = %.2f \r", temp_value);
 8000ef4:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <f_Temperature+0xa8>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fb25 	bl	8000548 <__aeabi_f2d>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	e9cd 2300 	strd	r2, r3, [sp]
 8000f06:	4a11      	ldr	r2, [pc, #68]	; (8000f4c <f_Temperature+0xac>)
 8000f08:	2164      	movs	r1, #100	; 0x64
 8000f0a:	480d      	ldr	r0, [pc, #52]	; (8000f40 <f_Temperature+0xa0>)
 8000f0c:	f007 f898 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8000f10:	230a      	movs	r3, #10
 8000f12:	2264      	movs	r2, #100	; 0x64
 8000f14:	490a      	ldr	r1, [pc, #40]	; (8000f40 <f_Temperature+0xa0>)
 8000f16:	480b      	ldr	r0, [pc, #44]	; (8000f44 <f_Temperature+0xa4>)
 8000f18:	f004 ffa8 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 8000f1c:	2264      	movs	r2, #100	; 0x64
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4807      	ldr	r0, [pc, #28]	; (8000f40 <f_Temperature+0xa0>)
 8000f22:	f006 fc03 	bl	800772c <memset>
			flag=0;
 8000f26:	4b03      	ldr	r3, [pc, #12]	; (8000f34 <f_Temperature+0x94>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	701a      	strb	r2, [r3, #0]
}
 8000f2c:	bf00      	nop
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000ea 	.word	0x200000ea
 8000f38:	0800a4b8 	.word	0x0800a4b8
 8000f3c:	0800a4cc 	.word	0x0800a4cc
 8000f40:	2000034c 	.word	0x2000034c
 8000f44:	2000055c 	.word	0x2000055c
 8000f48:	20000340 	.word	0x20000340
 8000f4c:	0800a4ec 	.word	0x0800a4ec

08000f50 <f_Humidity>:


/*This function use for extracting Humidity data */
void f_Humidity(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af02      	add	r7, sp, #8
	if(flag)
 8000f56:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <f_Humidity+0x88>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d038      	beq.n	8000fd0 <f_Humidity+0x80>
	{
		if(BSP_HSENSOR_Init())
 8000f5e:	f001 fa53 	bl	8002408 <BSP_HSENSOR_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d010      	beq.n	8000f8a <f_Humidity+0x3a>
		{
			snprintf(str_humi,100,"\033\143 Not Taking HUMIDITY Data \r");
 8000f68:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <f_Humidity+0x8c>)
 8000f6a:	2164      	movs	r1, #100	; 0x64
 8000f6c:	481c      	ldr	r0, [pc, #112]	; (8000fe0 <f_Humidity+0x90>)
 8000f6e:	f007 f867 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 8000f72:	230a      	movs	r3, #10
 8000f74:	2264      	movs	r2, #100	; 0x64
 8000f76:	491a      	ldr	r1, [pc, #104]	; (8000fe0 <f_Humidity+0x90>)
 8000f78:	481a      	ldr	r0, [pc, #104]	; (8000fe4 <f_Humidity+0x94>)
 8000f7a:	f004 ff77 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 8000f7e:	2264      	movs	r2, #100	; 0x64
 8000f80:	2100      	movs	r1, #0
 8000f82:	4817      	ldr	r0, [pc, #92]	; (8000fe0 <f_Humidity+0x90>)
 8000f84:	f006 fbd2 	bl	800772c <memset>
			memset(str_humi, 0, sizeof(str_humi));
			flag=0;
		}

	}
}
 8000f88:	e022      	b.n	8000fd0 <f_Humidity+0x80>
			humi_value = BSP_HSENSOR_ReadHumidity();
 8000f8a:	f001 fa5d 	bl	8002448 <BSP_HSENSOR_ReadHumidity>
 8000f8e:	eef0 7a40 	vmov.f32	s15, s0
 8000f92:	4b15      	ldr	r3, [pc, #84]	; (8000fe8 <f_Humidity+0x98>)
 8000f94:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_humi,100,"\033\143 HUMIDITY = %.2f \r", humi_value);
 8000f98:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <f_Humidity+0x98>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff fad3 	bl	8000548 <__aeabi_f2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	e9cd 2300 	strd	r2, r3, [sp]
 8000faa:	4a10      	ldr	r2, [pc, #64]	; (8000fec <f_Humidity+0x9c>)
 8000fac:	2164      	movs	r1, #100	; 0x64
 8000fae:	480c      	ldr	r0, [pc, #48]	; (8000fe0 <f_Humidity+0x90>)
 8000fb0:	f007 f846 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	2264      	movs	r2, #100	; 0x64
 8000fb8:	4909      	ldr	r1, [pc, #36]	; (8000fe0 <f_Humidity+0x90>)
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <f_Humidity+0x94>)
 8000fbc:	f004 ff56 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 8000fc0:	2264      	movs	r2, #100	; 0x64
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4806      	ldr	r0, [pc, #24]	; (8000fe0 <f_Humidity+0x90>)
 8000fc6:	f006 fbb1 	bl	800772c <memset>
			flag=0;
 8000fca:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <f_Humidity+0x88>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000ea 	.word	0x200000ea
 8000fdc:	0800a508 	.word	0x0800a508
 8000fe0:	200003b0 	.word	0x200003b0
 8000fe4:	2000055c 	.word	0x2000055c
 8000fe8:	20000344 	.word	0x20000344
 8000fec:	0800a528 	.word	0x0800a528

08000ff0 <f_Pressure>:


/*This function use for extracting Pressure data */
void f_Pressure(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af02      	add	r7, sp, #8
	if(flag)
 8000ff6:	4b1f      	ldr	r3, [pc, #124]	; (8001074 <f_Pressure+0x84>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d037      	beq.n	800106e <f_Pressure+0x7e>
	{
		if(BSP_PSENSOR_Init())
 8000ffe:	f001 fa31 	bl	8002464 <BSP_PSENSOR_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d00f      	beq.n	8001028 <f_Pressure+0x38>
		{
			snprintf(str_pre,100,"\033\143 Not Taking PRESSURE Data \r");
 8001008:	4a1b      	ldr	r2, [pc, #108]	; (8001078 <f_Pressure+0x88>)
 800100a:	2164      	movs	r1, #100	; 0x64
 800100c:	481b      	ldr	r0, [pc, #108]	; (800107c <f_Pressure+0x8c>)
 800100e:	f007 f817 	bl	8008040 <sniprintf>
			HAL_UART_Transmit_IT(&huart1,( uint8_t * )str_pre,sizeof(str_pre));
 8001012:	2264      	movs	r2, #100	; 0x64
 8001014:	4919      	ldr	r1, [pc, #100]	; (800107c <f_Pressure+0x8c>)
 8001016:	481a      	ldr	r0, [pc, #104]	; (8001080 <f_Pressure+0x90>)
 8001018:	f004 ffbc 	bl	8005f94 <HAL_UART_Transmit_IT>
			memset(str_pre, 0, sizeof(str_pre));
 800101c:	2264      	movs	r2, #100	; 0x64
 800101e:	2100      	movs	r1, #0
 8001020:	4816      	ldr	r0, [pc, #88]	; (800107c <f_Pressure+0x8c>)
 8001022:	f006 fb83 	bl	800772c <memset>
			flag=0;
		}

	}

}
 8001026:	e022      	b.n	800106e <f_Pressure+0x7e>
			pre_value = BSP_PSENSOR_ReadPressure();
 8001028:	f001 fa3c 	bl	80024a4 <BSP_PSENSOR_ReadPressure>
 800102c:	eef0 7a40 	vmov.f32	s15, s0
 8001030:	4b14      	ldr	r3, [pc, #80]	; (8001084 <f_Pressure+0x94>)
 8001032:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_pre,100,"\033\143 PRESSURE = %.2f \r", pre_value);
 8001036:	4b13      	ldr	r3, [pc, #76]	; (8001084 <f_Pressure+0x94>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff fa84 	bl	8000548 <__aeabi_f2d>
 8001040:	4602      	mov	r2, r0
 8001042:	460b      	mov	r3, r1
 8001044:	e9cd 2300 	strd	r2, r3, [sp]
 8001048:	4a0f      	ldr	r2, [pc, #60]	; (8001088 <f_Pressure+0x98>)
 800104a:	2164      	movs	r1, #100	; 0x64
 800104c:	480b      	ldr	r0, [pc, #44]	; (800107c <f_Pressure+0x8c>)
 800104e:	f006 fff7 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8001052:	230a      	movs	r3, #10
 8001054:	2264      	movs	r2, #100	; 0x64
 8001056:	4909      	ldr	r1, [pc, #36]	; (800107c <f_Pressure+0x8c>)
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <f_Pressure+0x90>)
 800105a:	f004 ff07 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 800105e:	2264      	movs	r2, #100	; 0x64
 8001060:	2100      	movs	r1, #0
 8001062:	4806      	ldr	r0, [pc, #24]	; (800107c <f_Pressure+0x8c>)
 8001064:	f006 fb62 	bl	800772c <memset>
			flag=0;
 8001068:	4b02      	ldr	r3, [pc, #8]	; (8001074 <f_Pressure+0x84>)
 800106a:	2200      	movs	r2, #0
 800106c:	701a      	strb	r2, [r3, #0]
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	200000ea 	.word	0x200000ea
 8001078:	0800a540 	.word	0x0800a540
 800107c:	20000414 	.word	0x20000414
 8001080:	2000055c 	.word	0x2000055c
 8001084:	20000348 	.word	0x20000348
 8001088:	0800a560 	.word	0x0800a560

0800108c <f_ACCELEROMETER>:


/*This function use for extracting ACCELEROMETER data */
void f_ACCELEROMETER(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
	if(flag)
 8001090:	4b3e      	ldr	r3, [pc, #248]	; (800118c <f_ACCELEROMETER+0x100>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d077      	beq.n	8001188 <f_ACCELEROMETER+0xfc>
	{
		if(BSP_ACCELERO_Init())
 8001098:	f001 f960 	bl	800235c <BSP_ACCELERO_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d033      	beq.n	800110a <f_ACCELEROMETER+0x7e>
		{
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80010a2:	483b      	ldr	r0, [pc, #236]	; (8001190 <f_ACCELEROMETER+0x104>)
 80010a4:	f001 f998 	bl	80023d8 <BSP_ACCELERO_AccGetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error");
 80010a8:	4a3a      	ldr	r2, [pc, #232]	; (8001194 <f_ACCELEROMETER+0x108>)
 80010aa:	2164      	movs	r1, #100	; 0x64
 80010ac:	483a      	ldr	r0, [pc, #232]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010ae:	f006 ffc7 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 80010b2:	230a      	movs	r3, #10
 80010b4:	2264      	movs	r2, #100	; 0x64
 80010b6:	4938      	ldr	r1, [pc, #224]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010b8:	4838      	ldr	r0, [pc, #224]	; (800119c <f_ACCELEROMETER+0x110>)
 80010ba:	f004 fed7 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 80010be:	2264      	movs	r2, #100	; 0x64
 80010c0:	2100      	movs	r1, #0
 80010c2:	4835      	ldr	r0, [pc, #212]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010c4:	f006 fb32 	bl	800772c <memset>
			snprintf(str_acc1,100," Y-axis Error");
 80010c8:	4a35      	ldr	r2, [pc, #212]	; (80011a0 <f_ACCELEROMETER+0x114>)
 80010ca:	2164      	movs	r1, #100	; 0x64
 80010cc:	4832      	ldr	r0, [pc, #200]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010ce:	f006 ffb7 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 80010d2:	230a      	movs	r3, #10
 80010d4:	2264      	movs	r2, #100	; 0x64
 80010d6:	4930      	ldr	r1, [pc, #192]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010d8:	4830      	ldr	r0, [pc, #192]	; (800119c <f_ACCELEROMETER+0x110>)
 80010da:	f004 fec7 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 80010de:	2264      	movs	r2, #100	; 0x64
 80010e0:	2100      	movs	r1, #0
 80010e2:	482d      	ldr	r0, [pc, #180]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010e4:	f006 fb22 	bl	800772c <memset>
			snprintf(str_acc1,100," Z-axis Error \r");
 80010e8:	4a2e      	ldr	r2, [pc, #184]	; (80011a4 <f_ACCELEROMETER+0x118>)
 80010ea:	2164      	movs	r1, #100	; 0x64
 80010ec:	482a      	ldr	r0, [pc, #168]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010ee:	f006 ffa7 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 80010f2:	230a      	movs	r3, #10
 80010f4:	2264      	movs	r2, #100	; 0x64
 80010f6:	4928      	ldr	r1, [pc, #160]	; (8001198 <f_ACCELEROMETER+0x10c>)
 80010f8:	4828      	ldr	r0, [pc, #160]	; (800119c <f_ACCELEROMETER+0x110>)
 80010fa:	f004 feb7 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 80010fe:	2264      	movs	r2, #100	; 0x64
 8001100:	2100      	movs	r1, #0
 8001102:	4825      	ldr	r0, [pc, #148]	; (8001198 <f_ACCELEROMETER+0x10c>)
 8001104:	f006 fb12 	bl	800772c <memset>
			flag=0;
		}

	}

}
 8001108:	e03e      	b.n	8001188 <f_ACCELEROMETER+0xfc>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800110a:	4821      	ldr	r0, [pc, #132]	; (8001190 <f_ACCELEROMETER+0x104>)
 800110c:	f001 f964 	bl	80023d8 <BSP_ACCELERO_AccGetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      ", pDataXYZ[0]);
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <f_ACCELEROMETER+0x104>)
 8001112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001116:	4a24      	ldr	r2, [pc, #144]	; (80011a8 <f_ACCELEROMETER+0x11c>)
 8001118:	2164      	movs	r1, #100	; 0x64
 800111a:	481f      	ldr	r0, [pc, #124]	; (8001198 <f_ACCELEROMETER+0x10c>)
 800111c:	f006 ff90 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8001120:	230a      	movs	r3, #10
 8001122:	2264      	movs	r2, #100	; 0x64
 8001124:	491c      	ldr	r1, [pc, #112]	; (8001198 <f_ACCELEROMETER+0x10c>)
 8001126:	481d      	ldr	r0, [pc, #116]	; (800119c <f_ACCELEROMETER+0x110>)
 8001128:	f004 fea0 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 800112c:	2264      	movs	r2, #100	; 0x64
 800112e:	2100      	movs	r1, #0
 8001130:	4819      	ldr	r0, [pc, #100]	; (8001198 <f_ACCELEROMETER+0x10c>)
 8001132:	f006 fafb 	bl	800772c <memset>
			snprintf(str_acc1,100," Y-axis = %d      ", pDataXYZ[1]);
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <f_ACCELEROMETER+0x104>)
 8001138:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <f_ACCELEROMETER+0x120>)
 800113e:	2164      	movs	r1, #100	; 0x64
 8001140:	4815      	ldr	r0, [pc, #84]	; (8001198 <f_ACCELEROMETER+0x10c>)
 8001142:	f006 ff7d 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8001146:	230a      	movs	r3, #10
 8001148:	2264      	movs	r2, #100	; 0x64
 800114a:	4913      	ldr	r1, [pc, #76]	; (8001198 <f_ACCELEROMETER+0x10c>)
 800114c:	4813      	ldr	r0, [pc, #76]	; (800119c <f_ACCELEROMETER+0x110>)
 800114e:	f004 fe8d 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8001152:	2264      	movs	r2, #100	; 0x64
 8001154:	2100      	movs	r1, #0
 8001156:	4810      	ldr	r0, [pc, #64]	; (8001198 <f_ACCELEROMETER+0x10c>)
 8001158:	f006 fae8 	bl	800772c <memset>
			snprintf(str_acc1,100," Z-axis = %d \r", pDataXYZ[2]);
 800115c:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <f_ACCELEROMETER+0x104>)
 800115e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <f_ACCELEROMETER+0x124>)
 8001164:	2164      	movs	r1, #100	; 0x64
 8001166:	480c      	ldr	r0, [pc, #48]	; (8001198 <f_ACCELEROMETER+0x10c>)
 8001168:	f006 ff6a 	bl	8008040 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 800116c:	230a      	movs	r3, #10
 800116e:	2264      	movs	r2, #100	; 0x64
 8001170:	4909      	ldr	r1, [pc, #36]	; (8001198 <f_ACCELEROMETER+0x10c>)
 8001172:	480a      	ldr	r0, [pc, #40]	; (800119c <f_ACCELEROMETER+0x110>)
 8001174:	f004 fe7a 	bl	8005e6c <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8001178:	2264      	movs	r2, #100	; 0x64
 800117a:	2100      	movs	r1, #0
 800117c:	4806      	ldr	r0, [pc, #24]	; (8001198 <f_ACCELEROMETER+0x10c>)
 800117e:	f006 fad5 	bl	800772c <memset>
			flag=0;
 8001182:	4b02      	ldr	r3, [pc, #8]	; (800118c <f_ACCELEROMETER+0x100>)
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	200000ea 	.word	0x200000ea
 8001190:	200004dc 	.word	0x200004dc
 8001194:	0800a578 	.word	0x0800a578
 8001198:	20000478 	.word	0x20000478
 800119c:	2000055c 	.word	0x2000055c
 80011a0:	0800a588 	.word	0x0800a588
 80011a4:	0800a598 	.word	0x0800a598
 80011a8:	0800a5a8 	.word	0x0800a5a8
 80011ac:	0800a5c0 	.word	0x0800a5c0
 80011b0:	0800a5d4 	.word	0x0800a5d4

080011b4 <f_Menu>:

/*This function use for Printing MENU */
int f_Menu(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),100);
 80011b8:	2364      	movs	r3, #100	; 0x64
 80011ba:	227f      	movs	r2, #127	; 0x7f
 80011bc:	4904      	ldr	r1, [pc, #16]	; (80011d0 <f_Menu+0x1c>)
 80011be:	4805      	ldr	r0, [pc, #20]	; (80011d4 <f_Menu+0x20>)
 80011c0:	f004 fe54 	bl	8005e6c <HAL_UART_Transmit>
	s_case=0;
 80011c4:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <f_Menu+0x24>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	701a      	strb	r2, [r3, #0]
	return 0;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	2000004c 	.word	0x2000004c
 80011d4:	2000055c 	.word	0x2000055c
 80011d8:	200004e2 	.word	0x200004e2

080011dc <f_Invalid>:

/*This function use for Printing Invalid */
void f_Invalid(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t*)Invalid,strlen(Invalid),10);
 80011e0:	480b      	ldr	r0, [pc, #44]	; (8001210 <f_Invalid+0x34>)
 80011e2:	f7fe fff5 	bl	80001d0 <strlen>
 80011e6:	4603      	mov	r3, r0
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	230a      	movs	r3, #10
 80011ec:	4908      	ldr	r1, [pc, #32]	; (8001210 <f_Invalid+0x34>)
 80011ee:	4809      	ldr	r0, [pc, #36]	; (8001214 <f_Invalid+0x38>)
 80011f0:	f004 fe3c 	bl	8005e6c <HAL_UART_Transmit>
	s_case=0;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <f_Invalid+0x3c>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	701a      	strb	r2, [r3, #0]
	if(flag)
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <f_Invalid+0x40>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d004      	beq.n	800120c <f_Invalid+0x30>
	{
		f_Menu();
 8001202:	f7ff ffd7 	bl	80011b4 <f_Menu>
		flag=0;
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <f_Invalid+0x40>)
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
	}

}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200000cc 	.word	0x200000cc
 8001214:	2000055c 	.word	0x2000055c
 8001218:	200004e2 	.word	0x200004e2
 800121c:	200000ea 	.word	0x200000ea

08001220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001224:	f001 fce6 	bl	8002bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001228:	f000 f8ba 	bl	80013a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800122c:	f000 f9d2 	bl	80015d4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001230:	f000 f9a0 	bl	8001574 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8001234:	f000 f96e 	bl	8001514 <MX_UART4_Init>
  MX_I2C2_Init();
 8001238:	f000 f904 	bl	8001444 <MX_I2C2_Init>
  MX_TIM16_Init();
 800123c:	f000 f942 	bl	80014c4 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */

	// Start timer
	HAL_TIM_Base_Start_IT(&htim16);
 8001240:	484d      	ldr	r0, [pc, #308]	; (8001378 <main+0x158>)
 8001242:	f004 fb55 	bl	80058f0 <HAL_TIM_Base_Start_IT>

	BSP_TSENSOR_Init();
 8001246:	f001 f93b 	bl	80024c0 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 800124a:	f001 f8dd 	bl	8002408 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 800124e:	f001 f909 	bl	8002464 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 8001252:	f001 f883 	bl	800235c <BSP_ACCELERO_Init>

	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8001256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800125a:	222e      	movs	r2, #46	; 0x2e
 800125c:	4947      	ldr	r1, [pc, #284]	; (800137c <main+0x15c>)
 800125e:	4848      	ldr	r0, [pc, #288]	; (8001380 <main+0x160>)
 8001260:	f004 fe04 	bl	8005e6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8001264:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001268:	2219      	movs	r2, #25
 800126a:	4946      	ldr	r1, [pc, #280]	; (8001384 <main+0x164>)
 800126c:	4844      	ldr	r0, [pc, #272]	; (8001380 <main+0x160>)
 800126e:	f004 fdfd 	bl	8005e6c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	227f      	movs	r2, #127	; 0x7f
 8001278:	4943      	ldr	r1, [pc, #268]	; (8001388 <main+0x168>)
 800127a:	4841      	ldr	r0, [pc, #260]	; (8001380 <main+0x160>)
 800127c:	f004 fdf6 	bl	8005e6c <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart1,rxData,1);
 8001280:	2201      	movs	r2, #1
 8001282:	4942      	ldr	r1, [pc, #264]	; (800138c <main+0x16c>)
 8001284:	483e      	ldr	r0, [pc, #248]	; (8001380 <main+0x160>)
 8001286:	f004 fef3 	bl	8006070 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*  This if condition is use for UART1 (Interrupt based) */
		if(newMsg)
 800128a:	4b41      	ldr	r3, [pc, #260]	; (8001390 <main+0x170>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d01a      	beq.n	80012c8 <main+0xa8>
		{

			size = strlen(rxBuffer);
 8001292:	4840      	ldr	r0, [pc, #256]	; (8001394 <main+0x174>)
 8001294:	f7fe ff9c 	bl	80001d0 <strlen>
 8001298:	4603      	mov	r3, r0
 800129a:	b2da      	uxtb	r2, r3
 800129c:	4b3e      	ldr	r3, [pc, #248]	; (8001398 <main+0x178>)
 800129e:	701a      	strb	r2, [r3, #0]

			if(size == f_size)
 80012a0:	4b3d      	ldr	r3, [pc, #244]	; (8001398 <main+0x178>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d104      	bne.n	80012b2 <main+0x92>
			{
				s_case= rxBuffer[0];
 80012a8:	4b3a      	ldr	r3, [pc, #232]	; (8001394 <main+0x174>)
 80012aa:	781a      	ldrb	r2, [r3, #0]
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <main+0x17c>)
 80012ae:	701a      	strb	r2, [r3, #0]
 80012b0:	e002      	b.n	80012b8 <main+0x98>
			}
			else
			{
				s_case = f_error;
 80012b2:	4b3a      	ldr	r3, [pc, #232]	; (800139c <main+0x17c>)
 80012b4:	2235      	movs	r2, #53	; 0x35
 80012b6:	701a      	strb	r2, [r3, #0]
			}

			memset(rxBuffer, 0, sizeof(rxBuffer));
 80012b8:	2205      	movs	r2, #5
 80012ba:	2100      	movs	r1, #0
 80012bc:	4835      	ldr	r0, [pc, #212]	; (8001394 <main+0x174>)
 80012be:	f006 fa35 	bl	800772c <memset>

			newMsg=0;
 80012c2:	4b33      	ldr	r3, [pc, #204]	; (8001390 <main+0x170>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
		}



		/* This switch case is using for calling Sensor functions */
		switch(s_case)
 80012c8:	4b34      	ldr	r3, [pc, #208]	; (800139c <main+0x17c>)
 80012ca:	781b      	ldrb	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d051      	beq.n	8001374 <main+0x154>
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db4c      	blt.n	800136e <main+0x14e>
 80012d4:	2b34      	cmp	r3, #52	; 0x34
 80012d6:	dc4a      	bgt.n	800136e <main+0x14e>
 80012d8:	2b1b      	cmp	r3, #27
 80012da:	db48      	blt.n	800136e <main+0x14e>
 80012dc:	3b1b      	subs	r3, #27
 80012de:	2b19      	cmp	r3, #25
 80012e0:	d845      	bhi.n	800136e <main+0x14e>
 80012e2:	a201      	add	r2, pc, #4	; (adr r2, 80012e8 <main+0xc8>)
 80012e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012e8:	08001369 	.word	0x08001369
 80012ec:	0800136f 	.word	0x0800136f
 80012f0:	0800136f 	.word	0x0800136f
 80012f4:	0800136f 	.word	0x0800136f
 80012f8:	0800136f 	.word	0x0800136f
 80012fc:	0800136f 	.word	0x0800136f
 8001300:	0800136f 	.word	0x0800136f
 8001304:	0800136f 	.word	0x0800136f
 8001308:	0800136f 	.word	0x0800136f
 800130c:	0800136f 	.word	0x0800136f
 8001310:	0800136f 	.word	0x0800136f
 8001314:	0800136f 	.word	0x0800136f
 8001318:	0800136f 	.word	0x0800136f
 800131c:	0800136f 	.word	0x0800136f
 8001320:	0800136f 	.word	0x0800136f
 8001324:	0800136f 	.word	0x0800136f
 8001328:	0800136f 	.word	0x0800136f
 800132c:	0800136f 	.word	0x0800136f
 8001330:	0800136f 	.word	0x0800136f
 8001334:	0800136f 	.word	0x0800136f
 8001338:	0800136f 	.word	0x0800136f
 800133c:	0800136f 	.word	0x0800136f
 8001340:	08001351 	.word	0x08001351
 8001344:	08001357 	.word	0x08001357
 8001348:	0800135d 	.word	0x0800135d
 800134c:	08001363 	.word	0x08001363
				break;
			}

			case f_One:
			{
				f_Temperature();
 8001350:	f7ff fda6 	bl	8000ea0 <f_Temperature>
				break;
 8001354:	e00f      	b.n	8001376 <main+0x156>
			}
			case f_Two:
			{
				f_Humidity();
 8001356:	f7ff fdfb 	bl	8000f50 <f_Humidity>
				break;
 800135a:	e00c      	b.n	8001376 <main+0x156>
			}
			case f_Three:
			{

				f_Pressure();
 800135c:	f7ff fe48 	bl	8000ff0 <f_Pressure>
				break;
 8001360:	e009      	b.n	8001376 <main+0x156>
			}
			case f_Four:
			{
				f_ACCELEROMETER();
 8001362:	f7ff fe93 	bl	800108c <f_ACCELEROMETER>
				break;
 8001366:	e006      	b.n	8001376 <main+0x156>
			}
			case f_escape:
			{
				f_Menu();
 8001368:	f7ff ff24 	bl	80011b4 <f_Menu>
				break;
 800136c:	e003      	b.n	8001376 <main+0x156>
			}

			default :
			{
				f_Invalid();
 800136e:	f7ff ff35 	bl	80011dc <f_Invalid>
 8001372:	e78a      	b.n	800128a <main+0x6a>
				break;
 8001374:	bf00      	nop
		if(newMsg)
 8001376:	e788      	b.n	800128a <main+0x6a>
 8001378:	2000066c 	.word	0x2000066c
 800137c:	20000000 	.word	0x20000000
 8001380:	2000055c 	.word	0x2000055c
 8001384:	20000030 	.word	0x20000030
 8001388:	2000004c 	.word	0x2000004c
 800138c:	20000504 	.word	0x20000504
 8001390:	200004e3 	.word	0x200004e3
 8001394:	200005e0 	.word	0x200005e0
 8001398:	200004e5 	.word	0x200004e5
 800139c:	200004e2 	.word	0x200004e2

080013a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b096      	sub	sp, #88	; 0x58
 80013a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a6:	f107 0314 	add.w	r3, r7, #20
 80013aa:	2244      	movs	r2, #68	; 0x44
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f006 f9bc 	bl	800772c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b4:	463b      	mov	r3, r7
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013c6:	f002 ff2b 	bl	8004220 <HAL_PWREx_ControlVoltageScaling>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013d0:	f000 fb54 	bl	8001a7c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013d4:	2310      	movs	r3, #16
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013e0:	2360      	movs	r3, #96	; 0x60
 80013e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e4:	2302      	movs	r3, #2
 80013e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013e8:	2301      	movs	r3, #1
 80013ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013ec:	2301      	movs	r3, #1
 80013ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013f0:	2328      	movs	r3, #40	; 0x28
 80013f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f4:	2307      	movs	r3, #7
 80013f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013f8:	2302      	movs	r3, #2
 80013fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4618      	mov	r0, r3
 8001406:	f002 ff61 	bl	80042cc <HAL_RCC_OscConfig>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001410:	f000 fb34 	bl	8001a7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001414:	230f      	movs	r3, #15
 8001416:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2303      	movs	r3, #3
 800141a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	2104      	movs	r1, #4
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fb27 	bl	8004a80 <HAL_RCC_ClockConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001438:	f000 fb20 	bl	8001a7c <Error_Handler>
  }
}
 800143c:	bf00      	nop
 800143e:	3758      	adds	r7, #88	; 0x58
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001448:	4b1b      	ldr	r3, [pc, #108]	; (80014b8 <MX_I2C2_Init+0x74>)
 800144a:	4a1c      	ldr	r2, [pc, #112]	; (80014bc <MX_I2C2_Init+0x78>)
 800144c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800144e:	4b1a      	ldr	r3, [pc, #104]	; (80014b8 <MX_I2C2_Init+0x74>)
 8001450:	4a1b      	ldr	r2, [pc, #108]	; (80014c0 <MX_I2C2_Init+0x7c>)
 8001452:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001454:	4b18      	ldr	r3, [pc, #96]	; (80014b8 <MX_I2C2_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145a:	4b17      	ldr	r3, [pc, #92]	; (80014b8 <MX_I2C2_Init+0x74>)
 800145c:	2201      	movs	r2, #1
 800145e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <MX_I2C2_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001466:	4b14      	ldr	r3, [pc, #80]	; (80014b8 <MX_I2C2_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800146c:	4b12      	ldr	r3, [pc, #72]	; (80014b8 <MX_I2C2_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001472:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <MX_I2C2_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001478:	4b0f      	ldr	r3, [pc, #60]	; (80014b8 <MX_I2C2_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800147e:	480e      	ldr	r0, [pc, #56]	; (80014b8 <MX_I2C2_Init+0x74>)
 8001480:	f002 f895 	bl	80035ae <HAL_I2C_Init>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800148a:	f000 faf7 	bl	8001a7c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800148e:	2100      	movs	r1, #0
 8001490:	4809      	ldr	r0, [pc, #36]	; (80014b8 <MX_I2C2_Init+0x74>)
 8001492:	f002 fe1f 	bl	80040d4 <HAL_I2CEx_ConfigAnalogFilter>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d001      	beq.n	80014a0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800149c:	f000 faee 	bl	8001a7c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80014a0:	2100      	movs	r1, #0
 80014a2:	4805      	ldr	r0, [pc, #20]	; (80014b8 <MX_I2C2_Init+0x74>)
 80014a4:	f002 fe61 	bl	800416a <HAL_I2CEx_ConfigDigitalFilter>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80014ae:	f000 fae5 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	20000508 	.word	0x20000508
 80014bc:	40005800 	.word	0x40005800
 80014c0:	10909cec 	.word	0x10909cec

080014c4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_TIM16_Init+0x48>)
 80014ca:	4a11      	ldr	r2, [pc, #68]	; (8001510 <MX_TIM16_Init+0x4c>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80014ce:	4b0f      	ldr	r3, [pc, #60]	; (800150c <MX_TIM16_Init+0x48>)
 80014d0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80014d4:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <MX_TIM16_Init+0x48>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <MX_TIM16_Init+0x48>)
 80014de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014e2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b09      	ldr	r3, [pc, #36]	; (800150c <MX_TIM16_Init+0x48>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80014ea:	4b08      	ldr	r3, [pc, #32]	; (800150c <MX_TIM16_Init+0x48>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f0:	4b06      	ldr	r3, [pc, #24]	; (800150c <MX_TIM16_Init+0x48>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <MX_TIM16_Init+0x48>)
 80014f8:	f004 f9a2 	bl	8005840 <HAL_TIM_Base_Init>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001502:	f000 fabb 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	2000066c 	.word	0x2000066c
 8001510:	40014400 	.word	0x40014400

08001514 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001518:	4b14      	ldr	r3, [pc, #80]	; (800156c <MX_UART4_Init+0x58>)
 800151a:	4a15      	ldr	r2, [pc, #84]	; (8001570 <MX_UART4_Init+0x5c>)
 800151c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800151e:	4b13      	ldr	r3, [pc, #76]	; (800156c <MX_UART4_Init+0x58>)
 8001520:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001524:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001526:	4b11      	ldr	r3, [pc, #68]	; (800156c <MX_UART4_Init+0x58>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <MX_UART4_Init+0x58>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001532:	4b0e      	ldr	r3, [pc, #56]	; (800156c <MX_UART4_Init+0x58>)
 8001534:	2200      	movs	r2, #0
 8001536:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <MX_UART4_Init+0x58>)
 800153a:	220c      	movs	r2, #12
 800153c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800153e:	4b0b      	ldr	r3, [pc, #44]	; (800156c <MX_UART4_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <MX_UART4_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800154a:	4b08      	ldr	r3, [pc, #32]	; (800156c <MX_UART4_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001550:	4b06      	ldr	r3, [pc, #24]	; (800156c <MX_UART4_Init+0x58>)
 8001552:	2200      	movs	r2, #0
 8001554:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001556:	4805      	ldr	r0, [pc, #20]	; (800156c <MX_UART4_Init+0x58>)
 8001558:	f004 fc3a 	bl	8005dd0 <HAL_UART_Init>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d001      	beq.n	8001566 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001562:	f000 fa8b 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	200005e8 	.word	0x200005e8
 8001570:	40004c00 	.word	0x40004c00

08001574 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001578:	4b14      	ldr	r3, [pc, #80]	; (80015cc <MX_USART1_UART_Init+0x58>)
 800157a:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <MX_USART1_UART_Init+0x5c>)
 800157c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800157e:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_USART1_UART_Init+0x58>)
 8001580:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001584:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001586:	4b11      	ldr	r3, [pc, #68]	; (80015cc <MX_USART1_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800158c:	4b0f      	ldr	r3, [pc, #60]	; (80015cc <MX_USART1_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001592:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_USART1_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <MX_USART1_UART_Init+0x58>)
 800159a:	220c      	movs	r2, #12
 800159c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80015a4:	4b09      	ldr	r3, [pc, #36]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015aa:	4b08      	ldr	r3, [pc, #32]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80015b6:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_USART1_UART_Init+0x58>)
 80015b8:	f004 fc0a 	bl	8005dd0 <HAL_UART_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80015c2:	f000 fa5b 	bl	8001a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000055c 	.word	0x2000055c
 80015d0:	40013800 	.word	0x40013800

080015d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015ea:	4bbd      	ldr	r3, [pc, #756]	; (80018e0 <MX_GPIO_Init+0x30c>)
 80015ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ee:	4abc      	ldr	r2, [pc, #752]	; (80018e0 <MX_GPIO_Init+0x30c>)
 80015f0:	f043 0310 	orr.w	r3, r3, #16
 80015f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015f6:	4bba      	ldr	r3, [pc, #744]	; (80018e0 <MX_GPIO_Init+0x30c>)
 80015f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fa:	f003 0310 	and.w	r3, r3, #16
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001602:	4bb7      	ldr	r3, [pc, #732]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001606:	4ab6      	ldr	r2, [pc, #728]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001608:	f043 0304 	orr.w	r3, r3, #4
 800160c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800160e:	4bb4      	ldr	r3, [pc, #720]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001612:	f003 0304 	and.w	r3, r3, #4
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800161a:	4bb1      	ldr	r3, [pc, #708]	; (80018e0 <MX_GPIO_Init+0x30c>)
 800161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161e:	4ab0      	ldr	r2, [pc, #704]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001626:	4bae      	ldr	r3, [pc, #696]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	4bab      	ldr	r3, [pc, #684]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4aaa      	ldr	r2, [pc, #680]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001638:	f043 0302 	orr.w	r3, r3, #2
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4ba8      	ldr	r3, [pc, #672]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0302 	and.w	r3, r3, #2
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800164a:	4ba5      	ldr	r3, [pc, #660]	; (80018e0 <MX_GPIO_Init+0x30c>)
 800164c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164e:	4aa4      	ldr	r2, [pc, #656]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001650:	f043 0308 	orr.w	r3, r3, #8
 8001654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001656:	4ba2      	ldr	r3, [pc, #648]	; (80018e0 <MX_GPIO_Init+0x30c>)
 8001658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165a:	f003 0308 	and.w	r3, r3, #8
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001668:	489e      	ldr	r0, [pc, #632]	; (80018e4 <MX_GPIO_Init+0x310>)
 800166a:	f001 ff65 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800166e:	2200      	movs	r2, #0
 8001670:	f248 1104 	movw	r1, #33028	; 0x8104
 8001674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001678:	f001 ff5e 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800167c:	2200      	movs	r2, #0
 800167e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001682:	4899      	ldr	r0, [pc, #612]	; (80018e8 <MX_GPIO_Init+0x314>)
 8001684:	f001 ff58 	bl	8003538 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001688:	2200      	movs	r2, #0
 800168a:	f241 0181 	movw	r1, #4225	; 0x1081
 800168e:	4897      	ldr	r0, [pc, #604]	; (80018ec <MX_GPIO_Init+0x318>)
 8001690:	f001 ff52 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001694:	2201      	movs	r2, #1
 8001696:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800169a:	4894      	ldr	r0, [pc, #592]	; (80018ec <MX_GPIO_Init+0x318>)
 800169c:	f001 ff4c 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80016a0:	2200      	movs	r2, #0
 80016a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80016a6:	4892      	ldr	r0, [pc, #584]	; (80018f0 <MX_GPIO_Init+0x31c>)
 80016a8:	f001 ff46 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2120      	movs	r1, #32
 80016b0:	488d      	ldr	r0, [pc, #564]	; (80018e8 <MX_GPIO_Init+0x314>)
 80016b2:	f001 ff41 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80016b6:	2201      	movs	r2, #1
 80016b8:	2101      	movs	r1, #1
 80016ba:	488a      	ldr	r0, [pc, #552]	; (80018e4 <MX_GPIO_Init+0x310>)
 80016bc:	f001 ff3c 	bl	8003538 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80016c0:	f240 1315 	movw	r3, #277	; 0x115
 80016c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016d2:	f107 0314 	add.w	r3, r7, #20
 80016d6:	4619      	mov	r1, r3
 80016d8:	4882      	ldr	r0, [pc, #520]	; (80018e4 <MX_GPIO_Init+0x310>)
 80016da:	f001 fc8f 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80016de:	236a      	movs	r3, #106	; 0x6a
 80016e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016ec:	f107 0314 	add.w	r3, r7, #20
 80016f0:	4619      	mov	r1, r3
 80016f2:	487c      	ldr	r0, [pc, #496]	; (80018e4 <MX_GPIO_Init+0x310>)
 80016f4:	f001 fc82 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4878      	ldr	r0, [pc, #480]	; (80018f0 <MX_GPIO_Init+0x31c>)
 8001710:	f001 fc74 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001714:	233f      	movs	r3, #63	; 0x3f
 8001716:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001718:	230b      	movs	r3, #11
 800171a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171c:	2300      	movs	r3, #0
 800171e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4872      	ldr	r0, [pc, #456]	; (80018f0 <MX_GPIO_Init+0x31c>)
 8001728:	f001 fc68 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 800172c:	f248 1304 	movw	r3, #33028	; 0x8104
 8001730:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001732:	2301      	movs	r3, #1
 8001734:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f001 fc58 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800174c:	2308      	movs	r3, #8
 800174e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001758:	2300      	movs	r3, #0
 800175a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800175c:	2301      	movs	r3, #1
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001760:	f107 0314 	add.w	r3, r7, #20
 8001764:	4619      	mov	r1, r3
 8001766:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176a:	f001 fc47 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800176e:	2310      	movs	r3, #16
 8001770:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001772:	230b      	movs	r3, #11
 8001774:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001784:	f001 fc3a 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001788:	23e0      	movs	r3, #224	; 0xe0
 800178a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800178c:	2302      	movs	r3, #2
 800178e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001790:	2300      	movs	r3, #0
 8001792:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001794:	2303      	movs	r3, #3
 8001796:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001798:	2305      	movs	r3, #5
 800179a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	4619      	mov	r1, r3
 80017a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017a6:	f001 fc29 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80017aa:	2301      	movs	r3, #1
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017b2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	484a      	ldr	r0, [pc, #296]	; (80018e8 <MX_GPIO_Init+0x314>)
 80017c0:	f001 fc1c 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80017c4:	2302      	movs	r3, #2
 80017c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80017c8:	230b      	movs	r3, #11
 80017ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80017d0:	f107 0314 	add.w	r3, r7, #20
 80017d4:	4619      	mov	r1, r3
 80017d6:	4844      	ldr	r0, [pc, #272]	; (80018e8 <MX_GPIO_Init+0x314>)
 80017d8:	f001 fc10 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80017dc:	f24f 0334 	movw	r3, #61492	; 0xf034
 80017e0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ee:	f107 0314 	add.w	r3, r7, #20
 80017f2:	4619      	mov	r1, r3
 80017f4:	483c      	ldr	r0, [pc, #240]	; (80018e8 <MX_GPIO_Init+0x314>)
 80017f6:	f001 fc01 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80017fa:	f44f 7320 	mov.w	r3, #640	; 0x280
 80017fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800180c:	2306      	movs	r3, #6
 800180e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	4833      	ldr	r0, [pc, #204]	; (80018e4 <MX_GPIO_Init+0x310>)
 8001818:	f001 fbf0 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800181c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001820:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001822:	2302      	movs	r3, #2
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182a:	2303      	movs	r3, #3
 800182c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800182e:	230a      	movs	r3, #10
 8001830:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001832:	f107 0314 	add.w	r3, r7, #20
 8001836:	4619      	mov	r1, r3
 8001838:	482a      	ldr	r0, [pc, #168]	; (80018e4 <MX_GPIO_Init+0x310>)
 800183a:	f001 fbdf 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800183e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800184c:	2303      	movs	r3, #3
 800184e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001850:	2307      	movs	r3, #7
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4824      	ldr	r0, [pc, #144]	; (80018ec <MX_GPIO_Init+0x318>)
 800185c:	f001 fbce 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001860:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001864:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001866:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	481d      	ldr	r0, [pc, #116]	; (80018ec <MX_GPIO_Init+0x318>)
 8001878:	f001 fbc0 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 800187c:	f243 0381 	movw	r3, #12417	; 0x3081
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001882:	2301      	movs	r3, #1
 8001884:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188a:	2300      	movs	r3, #0
 800188c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188e:	f107 0314 	add.w	r3, r7, #20
 8001892:	4619      	mov	r1, r3
 8001894:	4815      	ldr	r0, [pc, #84]	; (80018ec <MX_GPIO_Init+0x318>)
 8001896:	f001 fbb1 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800189a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800189e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a0:	2301      	movs	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	4619      	mov	r1, r3
 80018b2:	480f      	ldr	r0, [pc, #60]	; (80018f0 <MX_GPIO_Init+0x31c>)
 80018b4:	f001 fba2 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80018b8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80018c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c8:	f107 0314 	add.w	r3, r7, #20
 80018cc:	4619      	mov	r1, r3
 80018ce:	4808      	ldr	r0, [pc, #32]	; (80018f0 <MX_GPIO_Init+0x31c>)
 80018d0:	f001 fb94 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80018d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018da:	2300      	movs	r3, #0
 80018dc:	e00a      	b.n	80018f4 <MX_GPIO_Init+0x320>
 80018de:	bf00      	nop
 80018e0:	40021000 	.word	0x40021000
 80018e4:	48001000 	.word	0x48001000
 80018e8:	48000400 	.word	0x48000400
 80018ec:	48000c00 	.word	0x48000c00
 80018f0:	48000800 	.word	0x48000800
 80018f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001904:	f001 fb7a 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001908:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800190c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001916:	2303      	movs	r3, #3
 8001918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800191a:	230a      	movs	r3, #10
 800191c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001928:	f001 fb68 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800192c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001932:	2302      	movs	r3, #2
 8001934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193a:	2303      	movs	r3, #3
 800193c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800193e:	2306      	movs	r3, #6
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001942:	f107 0314 	add.w	r3, r7, #20
 8001946:	4619      	mov	r1, r3
 8001948:	4823      	ldr	r0, [pc, #140]	; (80019d8 <MX_GPIO_Init+0x404>)
 800194a:	f001 fb57 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800194e:	2302      	movs	r3, #2
 8001950:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195a:	2303      	movs	r3, #3
 800195c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800195e:	2305      	movs	r3, #5
 8001960:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 0314 	add.w	r3, r7, #20
 8001966:	4619      	mov	r1, r3
 8001968:	481c      	ldr	r0, [pc, #112]	; (80019dc <MX_GPIO_Init+0x408>)
 800196a:	f001 fb47 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800196e:	2378      	movs	r3, #120	; 0x78
 8001970:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001972:	2302      	movs	r3, #2
 8001974:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800197a:	2303      	movs	r3, #3
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800197e:	2307      	movs	r3, #7
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4814      	ldr	r0, [pc, #80]	; (80019dc <MX_GPIO_Init+0x408>)
 800198a:	f001 fb37 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800198e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001994:	2312      	movs	r3, #18
 8001996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800199c:	2303      	movs	r3, #3
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80019a0:	2304      	movs	r3, #4
 80019a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a4:	f107 0314 	add.w	r3, r7, #20
 80019a8:	4619      	mov	r1, r3
 80019aa:	480d      	ldr	r0, [pc, #52]	; (80019e0 <MX_GPIO_Init+0x40c>)
 80019ac:	f001 fb26 	bl	8002ffc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2100      	movs	r1, #0
 80019b4:	2017      	movs	r0, #23
 80019b6:	f001 fa6c 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80019ba:	2017      	movs	r0, #23
 80019bc:	f001 fa85 	bl	8002eca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2028      	movs	r0, #40	; 0x28
 80019c6:	f001 fa64 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019ca:	2028      	movs	r0, #40	; 0x28
 80019cc:	f001 fa7d 	bl	8002eca <HAL_NVIC_EnableIRQ>

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	48000800 	.word	0x48000800
 80019dc:	48000c00 	.word	0x48000c00
 80019e0:	48000400 	.word	0x48000400

080019e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_UART_RxCpltCallback+0x54>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d11c      	bne.n	8001a30 <HAL_UART_RxCpltCallback+0x4c>
    {
    	if(rxData[0]!='\r')
 80019f6:	4b11      	ldr	r3, [pc, #68]	; (8001a3c <HAL_UART_RxCpltCallback+0x58>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b0d      	cmp	r3, #13
 80019fc:	d00d      	beq.n	8001a1a <HAL_UART_RxCpltCallback+0x36>
        {
            rxBuffer[rxIndex]=rxData[0];
 80019fe:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_UART_RxCpltCallback+0x5c>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <HAL_UART_RxCpltCallback+0x58>)
 8001a06:	7819      	ldrb	r1, [r3, #0]
 8001a08:	4b0e      	ldr	r3, [pc, #56]	; (8001a44 <HAL_UART_RxCpltCallback+0x60>)
 8001a0a:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <HAL_UART_RxCpltCallback+0x5c>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	3301      	adds	r3, #1
 8001a12:	b2da      	uxtb	r2, r3
 8001a14:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <HAL_UART_RxCpltCallback+0x5c>)
 8001a16:	701a      	strb	r2, [r3, #0]
 8001a18:	e005      	b.n	8001a26 <HAL_UART_RxCpltCallback+0x42>
        }
        else
        {
            newMsg=1;
 8001a1a:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_UART_RxCpltCallback+0x64>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 8001a20:	4b07      	ldr	r3, [pc, #28]	; (8001a40 <HAL_UART_RxCpltCallback+0x5c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8001a26:	2201      	movs	r2, #1
 8001a28:	4904      	ldr	r1, [pc, #16]	; (8001a3c <HAL_UART_RxCpltCallback+0x58>)
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <HAL_UART_RxCpltCallback+0x68>)
 8001a2c:	f004 fb20 	bl	8006070 <HAL_UART_Receive_IT>
    }

}
 8001a30:	bf00      	nop
 8001a32:	3708      	adds	r7, #8
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}
 8001a38:	40013800 	.word	0x40013800
 8001a3c:	20000504 	.word	0x20000504
 8001a40:	200004e4 	.word	0x200004e4
 8001a44:	200005e0 	.word	0x200005e0
 8001a48:	200004e3 	.word	0x200004e3
 8001a4c:	2000055c 	.word	0x2000055c

08001a50 <HAL_TIM_PeriodElapsedCallback>:
/*This Callback function use for generating Timer(timer 16) delay  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  // Check the timer triggered this callback
  if (htim == &htim16 )
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a06      	ldr	r2, [pc, #24]	; (8001a74 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d102      	bne.n	8001a66 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
	  flag = 1;
 8001a60:	4b05      	ldr	r3, [pc, #20]	; (8001a78 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
  }
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	2000066c 	.word	0x2000066c
 8001a78:	200000ea 	.word	0x200000ea

08001a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a80:	b672      	cpsid	i
}
 8001a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <Error_Handler+0x8>
	...

08001a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x44>)
 8001a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_MspInit+0x44>)
 8001a94:	f043 0301 	orr.w	r3, r3, #1
 8001a98:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_MspInit+0x44>)
 8001a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9e:	f003 0301 	and.w	r3, r3, #1
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <HAL_MspInit+0x44>)
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <HAL_MspInit+0x44>)
 8001aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <HAL_MspInit+0x44>)
 8001ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aba:	603b      	str	r3, [r7, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b0ac      	sub	sp, #176	; 0xb0
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ae8:	f107 0314 	add.w	r3, r7, #20
 8001aec:	2288      	movs	r2, #136	; 0x88
 8001aee:	2100      	movs	r1, #0
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 fe1b 	bl	800772c <memset>
  if(hi2c->Instance==I2C2)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <HAL_I2C_MspInit+0xb0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d13b      	bne.n	8001b78 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001b04:	2300      	movs	r3, #0
 8001b06:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b08:	f107 0314 	add.w	r3, r7, #20
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f003 f9db 	bl	8004ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001b18:	f7ff ffb0 	bl	8001a7c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b1c:	4b19      	ldr	r3, [pc, #100]	; (8001b84 <HAL_I2C_MspInit+0xb4>)
 8001b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b20:	4a18      	ldr	r2, [pc, #96]	; (8001b84 <HAL_I2C_MspInit+0xb4>)
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b28:	4b16      	ldr	r3, [pc, #88]	; (8001b84 <HAL_I2C_MspInit+0xb4>)
 8001b2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2c:	f003 0302 	and.w	r3, r3, #2
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001b34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b54:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b58:	4619      	mov	r1, r3
 8001b5a:	480b      	ldr	r0, [pc, #44]	; (8001b88 <HAL_I2C_MspInit+0xb8>)
 8001b5c:	f001 fa4e 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b60:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <HAL_I2C_MspInit+0xb4>)
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <HAL_I2C_MspInit+0xb4>)
 8001b66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b6a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <HAL_I2C_MspInit+0xb4>)
 8001b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b78:	bf00      	nop
 8001b7a:	37b0      	adds	r7, #176	; 0xb0
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40005800 	.word	0x40005800
 8001b84:	40021000 	.word	0x40021000
 8001b88:	48000400 	.word	0x48000400

08001b8c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <HAL_I2C_MspDeInit+0x3c>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10f      	bne.n	8001bbe <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <HAL_I2C_MspDeInit+0x40>)
 8001ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <HAL_I2C_MspDeInit+0x40>)
 8001ba4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001ba8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bae:	4808      	ldr	r0, [pc, #32]	; (8001bd0 <HAL_I2C_MspDeInit+0x44>)
 8001bb0:	f001 fbce 	bl	8003350 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001bb4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <HAL_I2C_MspDeInit+0x44>)
 8001bba:	f001 fbc9 	bl	8003350 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40005800 	.word	0x40005800
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	48000400 	.word	0x48000400

08001bd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a0d      	ldr	r2, [pc, #52]	; (8001c18 <HAL_TIM_Base_MspInit+0x44>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d113      	bne.n	8001c0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001be6:	4b0d      	ldr	r3, [pc, #52]	; (8001c1c <HAL_TIM_Base_MspInit+0x48>)
 8001be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bea:	4a0c      	ldr	r2, [pc, #48]	; (8001c1c <HAL_TIM_Base_MspInit+0x48>)
 8001bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bf0:	6613      	str	r3, [r2, #96]	; 0x60
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <HAL_TIM_Base_MspInit+0x48>)
 8001bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001bfe:	2200      	movs	r2, #0
 8001c00:	2100      	movs	r1, #0
 8001c02:	2019      	movs	r0, #25
 8001c04:	f001 f945 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001c08:	2019      	movs	r0, #25
 8001c0a:	f001 f95e 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	40014400 	.word	0x40014400
 8001c1c:	40021000 	.word	0x40021000

08001c20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b0ae      	sub	sp, #184	; 0xb8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c28:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c38:	f107 031c 	add.w	r3, r7, #28
 8001c3c:	2288      	movs	r2, #136	; 0x88
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f005 fd73 	bl	800772c <memset>
  if(huart->Instance==UART4)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a4a      	ldr	r2, [pc, #296]	; (8001d74 <HAL_UART_MspInit+0x154>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d144      	bne.n	8001cda <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001c50:	2308      	movs	r3, #8
 8001c52:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001c54:	2300      	movs	r3, #0
 8001c56:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c58:	f107 031c 	add.w	r3, r7, #28
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 f933 	bl	8004ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d001      	beq.n	8001c6c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001c68:	f7ff ff08 	bl	8001a7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c70:	4a41      	ldr	r2, [pc, #260]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001c72:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001c76:	6593      	str	r3, [r2, #88]	; 0x58
 8001c78:	4b3f      	ldr	r3, [pc, #252]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c84:	4b3c      	ldr	r3, [pc, #240]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c88:	4a3b      	ldr	r2, [pc, #236]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c90:	4b39      	ldr	r3, [pc, #228]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001cc4:	f001 f99a 	bl	8002ffc <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001cc8:	2200      	movs	r2, #0
 8001cca:	2100      	movs	r1, #0
 8001ccc:	2034      	movs	r0, #52	; 0x34
 8001cce:	f001 f8e0 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001cd2:	2034      	movs	r0, #52	; 0x34
 8001cd4:	f001 f8f9 	bl	8002eca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cd8:	e047      	b.n	8001d6a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_UART_MspInit+0x15c>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d142      	bne.n	8001d6a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cec:	f107 031c 	add.w	r3, r7, #28
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f003 f8e9 	bl	8004ec8 <HAL_RCCEx_PeriphCLKConfig>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001cfc:	f7ff febe 	bl	8001a7c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	4a1c      	ldr	r2, [pc, #112]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001d1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1c:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001d1e:	f043 0302 	orr.w	r3, r3, #2
 8001d22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d24:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <HAL_UART_MspInit+0x158>)
 8001d26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	60fb      	str	r3, [r7, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001d30:	23c0      	movs	r3, #192	; 0xc0
 8001d32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d48:	2307      	movs	r3, #7
 8001d4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001d52:	4619      	mov	r1, r3
 8001d54:	480a      	ldr	r0, [pc, #40]	; (8001d80 <HAL_UART_MspInit+0x160>)
 8001d56:	f001 f951 	bl	8002ffc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2025      	movs	r0, #37	; 0x25
 8001d60:	f001 f897 	bl	8002e92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d64:	2025      	movs	r0, #37	; 0x25
 8001d66:	f001 f8b0 	bl	8002eca <HAL_NVIC_EnableIRQ>
}
 8001d6a:	bf00      	nop
 8001d6c:	37b8      	adds	r7, #184	; 0xb8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	40004c00 	.word	0x40004c00
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	40013800 	.word	0x40013800
 8001d80:	48000400 	.word	0x48000400

08001d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d84:	b480      	push	{r7}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d88:	e7fe      	b.n	8001d88 <NMI_Handler+0x4>

08001d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d8e:	e7fe      	b.n	8001d8e <HardFault_Handler+0x4>

08001d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d94:	e7fe      	b.n	8001d94 <MemManage_Handler+0x4>

08001d96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d9a:	e7fe      	b.n	8001d9a <BusFault_Handler+0x4>

08001d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001da0:	e7fe      	b.n	8001da0 <UsageFault_Handler+0x4>

08001da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001da2:	b480      	push	{r7}
 8001da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr

08001db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dd0:	f000 ff64 	bl	8002c9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ddc:	2020      	movs	r0, #32
 8001dde:	f001 fbc3 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001de2:	2040      	movs	r0, #64	; 0x40
 8001de4:	f001 fbc0 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001de8:	2080      	movs	r0, #128	; 0x80
 8001dea:	f001 fbbd 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001dee:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001df2:	f001 fbb9 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
	...

08001dfc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001e02:	f003 fde5 	bl	80059d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	2000066c 	.word	0x2000066c

08001e10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <USART1_IRQHandler+0x10>)
 8001e16:	f004 f981 	bl	800611c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	2000055c 	.word	0x2000055c

08001e24 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001e28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e2c:	f001 fb9c 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001e30:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e34:	f001 fb98 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e3c:	f001 fb94 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001e40:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e44:	f001 fb90 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001e48:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001e4c:	f001 fb8c 	bl	8003568 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e58:	4802      	ldr	r0, [pc, #8]	; (8001e64 <UART4_IRQHandler+0x10>)
 8001e5a:	f004 f95f 	bl	800611c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	200005e8 	.word	0x200005e8

08001e68 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001e72:	4b0f      	ldr	r3, [pc, #60]	; (8001eb0 <ITM_SendChar+0x48>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a0e      	ldr	r2, [pc, #56]	; (8001eb0 <ITM_SendChar+0x48>)
 8001e78:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e7c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	; (8001eb4 <ITM_SendChar+0x4c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a0c      	ldr	r2, [pc, #48]	; (8001eb4 <ITM_SendChar+0x4c>)
 8001e84:	f043 0301 	orr.w	r3, r3, #1
 8001e88:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001e8a:	bf00      	nop
 8001e8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0f8      	beq.n	8001e8c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001e9a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001e9e:	79fb      	ldrb	r3, [r7, #7]
 8001ea0:	6013      	str	r3, [r2, #0]
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000edfc 	.word	0xe000edfc
 8001eb4:	e0000e00 	.word	0xe0000e00

08001eb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
	return 1;
 8001ebc:	2301      	movs	r3, #1
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <_kill>:

int _kill(int pid, int sig)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ed2:	f005 fbf3 	bl	80076bc <__errno>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2216      	movs	r2, #22
 8001eda:	601a      	str	r2, [r3, #0]
	return -1;
 8001edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3708      	adds	r7, #8
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <_exit>:

void _exit (int status)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f7ff ffe7 	bl	8001ec8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001efa:	e7fe      	b.n	8001efa <_exit+0x12>

08001efc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	e00a      	b.n	8001f24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f0e:	f3af 8000 	nop.w
 8001f12:	4601      	mov	r1, r0
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	60ba      	str	r2, [r7, #8]
 8001f1a:	b2ca      	uxtb	r2, r1
 8001f1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf0      	blt.n	8001f0e <_read+0x12>
	}

return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	60f8      	str	r0, [r7, #12]
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f42:	2300      	movs	r3, #0
 8001f44:	617b      	str	r3, [r7, #20]
 8001f46:	e009      	b.n	8001f5c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	1c5a      	adds	r2, r3, #1
 8001f4c:	60ba      	str	r2, [r7, #8]
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7ff ff89 	bl	8001e68 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf1      	blt.n	8001f48 <_write+0x12>
	}
	return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_close>:

int _close(int file)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
	return -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr

08001f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
 8001f8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f96:	605a      	str	r2, [r3, #4]
	return 0;
 8001f98:	2300      	movs	r3, #0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <_isatty>:

int _isatty(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
	return 1;
 8001fae:	2301      	movs	r3, #1
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
	return 0;
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3714      	adds	r7, #20
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b086      	sub	sp, #24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fe0:	4a14      	ldr	r2, [pc, #80]	; (8002034 <_sbrk+0x5c>)
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <_sbrk+0x60>)
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fec:	4b13      	ldr	r3, [pc, #76]	; (800203c <_sbrk+0x64>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d102      	bne.n	8001ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ff4:	4b11      	ldr	r3, [pc, #68]	; (800203c <_sbrk+0x64>)
 8001ff6:	4a12      	ldr	r2, [pc, #72]	; (8002040 <_sbrk+0x68>)
 8001ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <_sbrk+0x64>)
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4413      	add	r3, r2
 8002002:	693a      	ldr	r2, [r7, #16]
 8002004:	429a      	cmp	r2, r3
 8002006:	d207      	bcs.n	8002018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002008:	f005 fb58 	bl	80076bc <__errno>
 800200c:	4603      	mov	r3, r0
 800200e:	220c      	movs	r2, #12
 8002010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002012:	f04f 33ff 	mov.w	r3, #4294967295
 8002016:	e009      	b.n	800202c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <_sbrk+0x64>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800201e:	4b07      	ldr	r3, [pc, #28]	; (800203c <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	4a05      	ldr	r2, [pc, #20]	; (800203c <_sbrk+0x64>)
 8002028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800202a:	68fb      	ldr	r3, [r7, #12]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3718      	adds	r7, #24
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20018000 	.word	0x20018000
 8002038:	00000400 	.word	0x00000400
 800203c:	200004e8 	.word	0x200004e8
 8002040:	200007a8 	.word	0x200007a8

08002044 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	; (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800206c:	f7ff ffea 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002072:	490d      	ldr	r1, [pc, #52]	; (80020a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002074:	4a0d      	ldr	r2, [pc, #52]	; (80020ac <LoopForever+0xe>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002078:	e002      	b.n	8002080 <LoopCopyDataInit>

0800207a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800207a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800207c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800207e:	3304      	adds	r3, #4

08002080 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002080:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002082:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002084:	d3f9      	bcc.n	800207a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002086:	4a0a      	ldr	r2, [pc, #40]	; (80020b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002088:	4c0a      	ldr	r4, [pc, #40]	; (80020b4 <LoopForever+0x16>)
  movs r3, #0
 800208a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800208c:	e001      	b.n	8002092 <LoopFillZerobss>

0800208e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800208e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002090:	3204      	adds	r2, #4

08002092 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002092:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002094:	d3fb      	bcc.n	800208e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002096:	f005 fb17 	bl	80076c8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800209a:	f7ff f8c1 	bl	8001220 <main>

0800209e <LoopForever>:

LoopForever:
    b LoopForever
 800209e:	e7fe      	b.n	800209e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020a8:	20000324 	.word	0x20000324
  ldr r2, =_sidata
 80020ac:	0800aa1c 	.word	0x0800aa1c
  ldr r2, =_sbss
 80020b0:	20000324 	.word	0x20000324
  ldr r4, =_ebss
 80020b4:	200007a4 	.word	0x200007a4

080020b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020b8:	e7fe      	b.n	80020b8 <ADC1_2_IRQHandler>
	...

080020bc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08a      	sub	sp, #40	; 0x28
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <I2Cx_MspInit+0xa8>)
 80020c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020c8:	4a26      	ldr	r2, [pc, #152]	; (8002164 <I2Cx_MspInit+0xa8>)
 80020ca:	f043 0302 	orr.w	r3, r3, #2
 80020ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80020d0:	4b24      	ldr	r3, [pc, #144]	; (8002164 <I2Cx_MspInit+0xa8>)
 80020d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d4:	f003 0302 	and.w	r3, r3, #2
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80020dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020e0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80020e2:	2312      	movs	r3, #18
 80020e4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80020e6:	2301      	movs	r3, #1
 80020e8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ea:	2303      	movs	r3, #3
 80020ec:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80020ee:	2304      	movs	r3, #4
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020f2:	f107 0314 	add.w	r3, r7, #20
 80020f6:	4619      	mov	r1, r3
 80020f8:	481b      	ldr	r0, [pc, #108]	; (8002168 <I2Cx_MspInit+0xac>)
 80020fa:	f000 ff7f 	bl	8002ffc <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020fe:	f107 0314 	add.w	r3, r7, #20
 8002102:	4619      	mov	r1, r3
 8002104:	4818      	ldr	r0, [pc, #96]	; (8002168 <I2Cx_MspInit+0xac>)
 8002106:	f000 ff79 	bl	8002ffc <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800210a:	4b16      	ldr	r3, [pc, #88]	; (8002164 <I2Cx_MspInit+0xa8>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4a15      	ldr	r2, [pc, #84]	; (8002164 <I2Cx_MspInit+0xa8>)
 8002110:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
 8002116:	4b13      	ldr	r3, [pc, #76]	; (8002164 <I2Cx_MspInit+0xa8>)
 8002118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800211a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002122:	4b10      	ldr	r3, [pc, #64]	; (8002164 <I2Cx_MspInit+0xa8>)
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	4a0f      	ldr	r2, [pc, #60]	; (8002164 <I2Cx_MspInit+0xa8>)
 8002128:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800212c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800212e:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <I2Cx_MspInit+0xa8>)
 8002130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002132:	4a0c      	ldr	r2, [pc, #48]	; (8002164 <I2Cx_MspInit+0xa8>)
 8002134:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002138:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800213a:	2200      	movs	r2, #0
 800213c:	210f      	movs	r1, #15
 800213e:	2021      	movs	r0, #33	; 0x21
 8002140:	f000 fea7 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002144:	2021      	movs	r0, #33	; 0x21
 8002146:	f000 fec0 	bl	8002eca <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800214a:	2200      	movs	r2, #0
 800214c:	210f      	movs	r1, #15
 800214e:	2022      	movs	r0, #34	; 0x22
 8002150:	f000 fe9f 	bl	8002e92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002154:	2022      	movs	r0, #34	; 0x22
 8002156:	f000 feb8 	bl	8002eca <HAL_NVIC_EnableIRQ>
}
 800215a:	bf00      	nop
 800215c:	3728      	adds	r7, #40	; 0x28
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40021000 	.word	0x40021000
 8002168:	48000400 	.word	0x48000400

0800216c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a12      	ldr	r2, [pc, #72]	; (80021c0 <I2Cx_Init+0x54>)
 8002178:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	4a11      	ldr	r2, [pc, #68]	; (80021c4 <I2Cx_Init+0x58>)
 800217e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f7ff ff89 	bl	80020bc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f001 f9ff 	bl	80035ae <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80021b0:	2100      	movs	r1, #0
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f001 ff8e 	bl	80040d4 <HAL_I2CEx_ConfigAnalogFilter>
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40005800 	.word	0x40005800
 80021c4:	00702681 	.word	0x00702681

080021c8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	; 0x28
 80021cc:	af04      	add	r7, sp, #16
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	4608      	mov	r0, r1
 80021d2:	4611      	mov	r1, r2
 80021d4:	461a      	mov	r2, r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	72fb      	strb	r3, [r7, #11]
 80021da:	460b      	mov	r3, r1
 80021dc:	813b      	strh	r3, [r7, #8]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	b299      	uxth	r1, r3
 80021ea:	88f8      	ldrh	r0, [r7, #6]
 80021ec:	893a      	ldrh	r2, [r7, #8]
 80021ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021f2:	9302      	str	r3, [sp, #8]
 80021f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021f6:	9301      	str	r3, [sp, #4]
 80021f8:	6a3b      	ldr	r3, [r7, #32]
 80021fa:	9300      	str	r3, [sp, #0]
 80021fc:	4603      	mov	r3, r0
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f001 fba8 	bl	8003954 <HAL_I2C_Mem_Read>
 8002204:	4603      	mov	r3, r0
 8002206:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d004      	beq.n	8002218 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	4619      	mov	r1, r3
 8002212:	68f8      	ldr	r0, [r7, #12]
 8002214:	f000 f832 	bl	800227c <I2Cx_Error>
  }
  return status;
 8002218:	7dfb      	ldrb	r3, [r7, #23]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b08a      	sub	sp, #40	; 0x28
 8002226:	af04      	add	r7, sp, #16
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	4608      	mov	r0, r1
 800222c:	4611      	mov	r1, r2
 800222e:	461a      	mov	r2, r3
 8002230:	4603      	mov	r3, r0
 8002232:	72fb      	strb	r3, [r7, #11]
 8002234:	460b      	mov	r3, r1
 8002236:	813b      	strh	r3, [r7, #8]
 8002238:	4613      	mov	r3, r2
 800223a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800223c:	2300      	movs	r3, #0
 800223e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002240:	7afb      	ldrb	r3, [r7, #11]
 8002242:	b299      	uxth	r1, r3
 8002244:	88f8      	ldrh	r0, [r7, #6]
 8002246:	893a      	ldrh	r2, [r7, #8]
 8002248:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800224c:	9302      	str	r3, [sp, #8]
 800224e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	6a3b      	ldr	r3, [r7, #32]
 8002254:	9300      	str	r3, [sp, #0]
 8002256:	4603      	mov	r3, r0
 8002258:	68f8      	ldr	r0, [r7, #12]
 800225a:	f001 fa67 	bl	800372c <HAL_I2C_Mem_Write>
 800225e:	4603      	mov	r3, r0
 8002260:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002262:	7dfb      	ldrb	r3, [r7, #23]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002268:	7afb      	ldrb	r3, [r7, #11]
 800226a:	4619      	mov	r1, r3
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f000 f805 	bl	800227c <I2Cx_Error>
  }
  return status;
 8002272:	7dfb      	ldrb	r3, [r7, #23]
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	460b      	mov	r3, r1
 8002286:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	f001 fa1f 	bl	80036cc <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ff6c 	bl	800216c <I2Cx_Init>
}
 8002294:	bf00      	nop
 8002296:	3708      	adds	r7, #8
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}

0800229c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80022a0:	4802      	ldr	r0, [pc, #8]	; (80022ac <SENSOR_IO_Init+0x10>)
 80022a2:	f7ff ff63 	bl	800216c <I2Cx_Init>
}
 80022a6:	bf00      	nop
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	2000073c 	.word	0x2000073c

080022b0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	4603      	mov	r3, r0
 80022b8:	71fb      	strb	r3, [r7, #7]
 80022ba:	460b      	mov	r3, r1
 80022bc:	71bb      	strb	r3, [r7, #6]
 80022be:	4613      	mov	r3, r2
 80022c0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80022c2:	79bb      	ldrb	r3, [r7, #6]
 80022c4:	b29a      	uxth	r2, r3
 80022c6:	79f9      	ldrb	r1, [r7, #7]
 80022c8:	2301      	movs	r3, #1
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	1d7b      	adds	r3, r7, #5
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2301      	movs	r3, #1
 80022d2:	4803      	ldr	r0, [pc, #12]	; (80022e0 <SENSOR_IO_Write+0x30>)
 80022d4:	f7ff ffa5 	bl	8002222 <I2Cx_WriteMultiple>
}
 80022d8:	bf00      	nop
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	2000073c 	.word	0x2000073c

080022e4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	4603      	mov	r3, r0
 80022ec:	460a      	mov	r2, r1
 80022ee:	71fb      	strb	r3, [r7, #7]
 80022f0:	4613      	mov	r3, r2
 80022f2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80022f4:	2300      	movs	r3, #0
 80022f6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80022f8:	79bb      	ldrb	r3, [r7, #6]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	79f9      	ldrb	r1, [r7, #7]
 80022fe:	2301      	movs	r3, #1
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	f107 030f 	add.w	r3, r7, #15
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	2301      	movs	r3, #1
 800230a:	4804      	ldr	r0, [pc, #16]	; (800231c <SENSOR_IO_Read+0x38>)
 800230c:	f7ff ff5c 	bl	80021c8 <I2Cx_ReadMultiple>

  return read_value;
 8002310:	7bfb      	ldrb	r3, [r7, #15]
}
 8002312:	4618      	mov	r0, r3
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	2000073c 	.word	0x2000073c

08002320 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af02      	add	r7, sp, #8
 8002326:	603a      	str	r2, [r7, #0]
 8002328:	461a      	mov	r2, r3
 800232a:	4603      	mov	r3, r0
 800232c:	71fb      	strb	r3, [r7, #7]
 800232e:	460b      	mov	r3, r1
 8002330:	71bb      	strb	r3, [r7, #6]
 8002332:	4613      	mov	r3, r2
 8002334:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002336:	79bb      	ldrb	r3, [r7, #6]
 8002338:	b29a      	uxth	r2, r3
 800233a:	79f9      	ldrb	r1, [r7, #7]
 800233c:	88bb      	ldrh	r3, [r7, #4]
 800233e:	9301      	str	r3, [sp, #4]
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	2301      	movs	r3, #1
 8002346:	4804      	ldr	r0, [pc, #16]	; (8002358 <SENSOR_IO_ReadMultiple+0x38>)
 8002348:	f7ff ff3e 	bl	80021c8 <I2Cx_ReadMultiple>
 800234c:	4603      	mov	r3, r0
 800234e:	b29b      	uxth	r3, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}
 8002358:	2000073c 	.word	0x2000073c

0800235c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002366:	2300      	movs	r3, #0
 8002368:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800236a:	4b19      	ldr	r3, [pc, #100]	; (80023d0 <BSP_ACCELERO_Init+0x74>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	4798      	blx	r3
 8002370:	4603      	mov	r3, r0
 8002372:	2b6a      	cmp	r3, #106	; 0x6a
 8002374:	d002      	beq.n	800237c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	73fb      	strb	r3, [r7, #15]
 800237a:	e024      	b.n	80023c6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <BSP_ACCELERO_Init+0x78>)
 800237e:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <BSP_ACCELERO_Init+0x74>)
 8002380:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002382:	2330      	movs	r3, #48	; 0x30
 8002384:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800238a:	2300      	movs	r3, #0
 800238c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800238e:	2340      	movs	r3, #64	; 0x40
 8002390:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002396:	2300      	movs	r3, #0
 8002398:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800239a:	797a      	ldrb	r2, [r7, #5]
 800239c:	7abb      	ldrb	r3, [r7, #10]
 800239e:	4313      	orrs	r3, r2
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80023a4:	7a3b      	ldrb	r3, [r7, #8]
 80023a6:	f043 0304 	orr.w	r3, r3, #4
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	021b      	lsls	r3, r3, #8
 80023ae:	b21a      	sxth	r2, r3
 80023b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	b21b      	sxth	r3, r3
 80023b8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80023ba:	4b06      	ldr	r3, [pc, #24]	; (80023d4 <BSP_ACCELERO_Init+0x78>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	89ba      	ldrh	r2, [r7, #12]
 80023c2:	4610      	mov	r0, r2
 80023c4:	4798      	blx	r3
  }  

  return ret;
 80023c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000118 	.word	0x20000118
 80023d4:	200004ec 	.word	0x200004ec

080023d8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d009      	beq.n	80023fc <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d004      	beq.n	80023fc <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80023f2:	4b04      	ldr	r3, [pc, #16]	; (8002404 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	4798      	blx	r3
    }
  }
}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	200004ec 	.word	0x200004ec

08002408 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800240e:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <BSP_HSENSOR_Init+0x38>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	20be      	movs	r0, #190	; 0xbe
 8002414:	4798      	blx	r3
 8002416:	4603      	mov	r3, r0
 8002418:	2bbc      	cmp	r3, #188	; 0xbc
 800241a:	d002      	beq.n	8002422 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	607b      	str	r3, [r7, #4]
 8002420:	e009      	b.n	8002436 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002422:	4b08      	ldr	r3, [pc, #32]	; (8002444 <BSP_HSENSOR_Init+0x3c>)
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <BSP_HSENSOR_Init+0x38>)
 8002426:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002428:	4b06      	ldr	r3, [pc, #24]	; (8002444 <BSP_HSENSOR_Init+0x3c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	20be      	movs	r0, #190	; 0xbe
 8002430:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002436:	687b      	ldr	r3, [r7, #4]
}
 8002438:	4618      	mov	r0, r3
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	200000f0 	.word	0x200000f0
 8002444:	200004f0 	.word	0x200004f0

08002448 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <BSP_HSENSOR_ReadHumidity+0x18>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	20be      	movs	r0, #190	; 0xbe
 8002454:	4798      	blx	r3
 8002456:	eef0 7a40 	vmov.f32	s15, s0
}
 800245a:	eeb0 0a67 	vmov.f32	s0, s15
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200004f0 	.word	0x200004f0

08002464 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <BSP_PSENSOR_Init+0x38>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	20ba      	movs	r0, #186	; 0xba
 8002470:	4798      	blx	r3
 8002472:	4603      	mov	r3, r0
 8002474:	2bb1      	cmp	r3, #177	; 0xb1
 8002476:	d002      	beq.n	800247e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	607b      	str	r3, [r7, #4]
 800247c:	e009      	b.n	8002492 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <BSP_PSENSOR_Init+0x3c>)
 8002480:	4a06      	ldr	r2, [pc, #24]	; (800249c <BSP_PSENSOR_Init+0x38>)
 8002482:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002484:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <BSP_PSENSOR_Init+0x3c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	20ba      	movs	r0, #186	; 0xba
 800248c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002492:	687b      	ldr	r3, [r7, #4]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	2000010c 	.word	0x2000010c
 80024a0:	200004f4 	.word	0x200004f4

080024a4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <BSP_PSENSOR_ReadPressure+0x18>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	20ba      	movs	r0, #186	; 0xba
 80024b0:	4798      	blx	r3
 80024b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80024b6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	200004f4 	.word	0x200004f4

080024c0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b082      	sub	sp, #8
 80024c4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80024ca:	4b09      	ldr	r3, [pc, #36]	; (80024f0 <BSP_TSENSOR_Init+0x30>)
 80024cc:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <BSP_TSENSOR_Init+0x34>)
 80024ce:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80024d0:	f7ff fee4 	bl	800229c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80024d4:	4b06      	ldr	r3, [pc, #24]	; (80024f0 <BSP_TSENSOR_Init+0x30>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2100      	movs	r1, #0
 80024dc:	20be      	movs	r0, #190	; 0xbe
 80024de:	4798      	blx	r3

  ret = TSENSOR_OK;
 80024e0:	2300      	movs	r3, #0
 80024e2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80024e4:	79fb      	ldrb	r3, [r7, #7]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	200004f8 	.word	0x200004f8
 80024f4:	200000fc 	.word	0x200000fc

080024f8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80024fc:	4b04      	ldr	r3, [pc, #16]	; (8002510 <BSP_TSENSOR_ReadTemp+0x18>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68db      	ldr	r3, [r3, #12]
 8002502:	20be      	movs	r0, #190	; 0xbe
 8002504:	4798      	blx	r3
 8002506:	eef0 7a40 	vmov.f32	s15, s0
}
 800250a:	eeb0 0a67 	vmov.f32	s0, s15
 800250e:	bd80      	pop	{r7, pc}
 8002510:	200004f8 	.word	0x200004f8

08002514 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b084      	sub	sp, #16
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800251e:	88fb      	ldrh	r3, [r7, #6]
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2120      	movs	r1, #32
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fedd 	bl	80022e4 <SENSOR_IO_Read>
 800252a:	4603      	mov	r3, r0
 800252c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800252e:	7bfb      	ldrb	r3, [r7, #15]
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	f043 0304 	orr.w	r3, r3, #4
 800253c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	f023 0303 	bic.w	r3, r3, #3
 8002544:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002546:	7bfb      	ldrb	r3, [r7, #15]
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002554:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002556:	88fb      	ldrh	r3, [r7, #6]
 8002558:	b2db      	uxtb	r3, r3
 800255a:	7bfa      	ldrb	r2, [r7, #15]
 800255c:	2120      	movs	r1, #32
 800255e:	4618      	mov	r0, r3
 8002560:	f7ff fea6 	bl	80022b0 <SENSOR_IO_Write>
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}

0800256c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800257a:	f7ff fe8f 	bl	800229c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800257e:	88fb      	ldrh	r3, [r7, #6]
 8002580:	b2db      	uxtb	r3, r3
 8002582:	210f      	movs	r1, #15
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fead 	bl	80022e4 <SENSOR_IO_Read>
 800258a:	4603      	mov	r3, r0
 800258c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800258e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b088      	sub	sp, #32
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	b2d8      	uxtb	r0, r3
 80025a6:	f107 020c 	add.w	r2, r7, #12
 80025aa:	2302      	movs	r3, #2
 80025ac:	21b0      	movs	r1, #176	; 0xb0
 80025ae:	f7ff feb7 	bl	8002320 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80025b2:	7b3b      	ldrb	r3, [r7, #12]
 80025b4:	085b      	lsrs	r3, r3, #1
 80025b6:	b2db      	uxtb	r3, r3
 80025b8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80025ba:	7b7b      	ldrb	r3, [r7, #13]
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	b2d8      	uxtb	r0, r3
 80025c6:	f107 020c 	add.w	r2, r7, #12
 80025ca:	2302      	movs	r3, #2
 80025cc:	21b6      	movs	r1, #182	; 0xb6
 80025ce:	f7ff fea7 	bl	8002320 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80025d2:	7b7b      	ldrb	r3, [r7, #13]
 80025d4:	021b      	lsls	r3, r3, #8
 80025d6:	b21a      	sxth	r2, r3
 80025d8:	7b3b      	ldrb	r3, [r7, #12]
 80025da:	b21b      	sxth	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80025e0:	88fb      	ldrh	r3, [r7, #6]
 80025e2:	b2d8      	uxtb	r0, r3
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	2302      	movs	r3, #2
 80025ea:	21ba      	movs	r1, #186	; 0xba
 80025ec:	f7ff fe98 	bl	8002320 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80025f0:	7b7b      	ldrb	r3, [r7, #13]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21a      	sxth	r2, r3
 80025f6:	7b3b      	ldrb	r3, [r7, #12]
 80025f8:	b21b      	sxth	r3, r3
 80025fa:	4313      	orrs	r3, r2
 80025fc:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	b2d8      	uxtb	r0, r3
 8002602:	f107 020c 	add.w	r2, r7, #12
 8002606:	2302      	movs	r3, #2
 8002608:	21a8      	movs	r1, #168	; 0xa8
 800260a:	f7ff fe89 	bl	8002320 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800260e:	7b7b      	ldrb	r3, [r7, #13]
 8002610:	021b      	lsls	r3, r3, #8
 8002612:	b21a      	sxth	r2, r3
 8002614:	7b3b      	ldrb	r3, [r7, #12]
 8002616:	b21b      	sxth	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800261c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002620:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	ee07 3a90 	vmov	s15, r3
 800262a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800262e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002632:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002640:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002644:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002648:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	ee07 3a90 	vmov	s15, r3
 8002652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800265a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800265e:	ee07 3a90 	vmov	s15, r3
 8002662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800266a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800266e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002672:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002676:	ee67 7a87 	vmul.f32	s15, s15, s14
 800267a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800267e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002682:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80026c8 <HTS221_H_ReadHumidity+0x130>
 8002686:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800268e:	dd01      	ble.n	8002694 <HTS221_H_ReadHumidity+0xfc>
 8002690:	4b0e      	ldr	r3, [pc, #56]	; (80026cc <HTS221_H_ReadHumidity+0x134>)
 8002692:	e00a      	b.n	80026aa <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002694:	edd7 7a04 	vldr	s15, [r7, #16]
 8002698:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d502      	bpl.n	80026a8 <HTS221_H_ReadHumidity+0x110>
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	e000      	b.n	80026aa <HTS221_H_ReadHumidity+0x112>
 80026a8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 80026aa:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 80026ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80026b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026b4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80026b8:	eef0 7a66 	vmov.f32	s15, s13
}
 80026bc:	eeb0 0a67 	vmov.f32	s0, s15
 80026c0:	3720      	adds	r7, #32
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	447a0000 	.word	0x447a0000
 80026cc:	447a0000 	.word	0x447a0000

080026d0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	4603      	mov	r3, r0
 80026d8:	6039      	str	r1, [r7, #0]
 80026da:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80026dc:	88fb      	ldrh	r3, [r7, #6]
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2120      	movs	r1, #32
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7ff fdfe 	bl	80022e4 <SENSOR_IO_Read>
 80026e8:	4603      	mov	r3, r0
 80026ea:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	f023 0304 	bic.w	r3, r3, #4
 80026f2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
 80026f6:	f043 0304 	orr.w	r3, r3, #4
 80026fa:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
 80026fe:	f023 0303 	bic.w	r3, r3, #3
 8002702:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
 800270e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002712:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	b2db      	uxtb	r3, r3
 8002718:	7bfa      	ldrb	r2, [r7, #15]
 800271a:	2120      	movs	r1, #32
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff fdc7 	bl	80022b0 <SENSOR_IO_Write>
}
 8002722:	bf00      	nop
 8002724:	3710      	adds	r7, #16
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b088      	sub	sp, #32
 800272e:	af00      	add	r7, sp, #0
 8002730:	4603      	mov	r3, r0
 8002732:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002734:	88fb      	ldrh	r3, [r7, #6]
 8002736:	b2d8      	uxtb	r0, r3
 8002738:	f107 0208 	add.w	r2, r7, #8
 800273c:	2302      	movs	r3, #2
 800273e:	21b2      	movs	r1, #178	; 0xb2
 8002740:	f7ff fdee 	bl	8002320 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2135      	movs	r1, #53	; 0x35
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff fdca 	bl	80022e4 <SENSOR_IO_Read>
 8002750:	4603      	mov	r3, r0
 8002752:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002754:	7ffb      	ldrb	r3, [r7, #31]
 8002756:	021b      	lsls	r3, r3, #8
 8002758:	b21b      	sxth	r3, r3
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	b21a      	sxth	r2, r3
 8002760:	7a3b      	ldrb	r3, [r7, #8]
 8002762:	b21b      	sxth	r3, r3
 8002764:	4313      	orrs	r3, r2
 8002766:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002768:	7ffb      	ldrb	r3, [r7, #31]
 800276a:	019b      	lsls	r3, r3, #6
 800276c:	b21b      	sxth	r3, r3
 800276e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002772:	b21a      	sxth	r2, r3
 8002774:	7a7b      	ldrb	r3, [r7, #9]
 8002776:	b21b      	sxth	r3, r3
 8002778:	4313      	orrs	r3, r2
 800277a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800277c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002780:	10db      	asrs	r3, r3, #3
 8002782:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002784:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002788:	10db      	asrs	r3, r3, #3
 800278a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800278c:	88fb      	ldrh	r3, [r7, #6]
 800278e:	b2d8      	uxtb	r0, r3
 8002790:	f107 0208 	add.w	r2, r7, #8
 8002794:	2304      	movs	r3, #4
 8002796:	21bc      	movs	r1, #188	; 0xbc
 8002798:	f7ff fdc2 	bl	8002320 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800279c:	7a7b      	ldrb	r3, [r7, #9]
 800279e:	021b      	lsls	r3, r3, #8
 80027a0:	b21a      	sxth	r2, r3
 80027a2:	7a3b      	ldrb	r3, [r7, #8]
 80027a4:	b21b      	sxth	r3, r3
 80027a6:	4313      	orrs	r3, r2
 80027a8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 80027aa:	7afb      	ldrb	r3, [r7, #11]
 80027ac:	021b      	lsls	r3, r3, #8
 80027ae:	b21a      	sxth	r2, r3
 80027b0:	7abb      	ldrb	r3, [r7, #10]
 80027b2:	b21b      	sxth	r3, r3
 80027b4:	4313      	orrs	r3, r2
 80027b6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80027b8:	88fb      	ldrh	r3, [r7, #6]
 80027ba:	b2d8      	uxtb	r0, r3
 80027bc:	f107 0208 	add.w	r2, r7, #8
 80027c0:	2302      	movs	r3, #2
 80027c2:	21aa      	movs	r1, #170	; 0xaa
 80027c4:	f7ff fdac 	bl	8002320 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80027c8:	7a7b      	ldrb	r3, [r7, #9]
 80027ca:	021b      	lsls	r3, r3, #8
 80027cc:	b21a      	sxth	r2, r3
 80027ce:	7a3b      	ldrb	r3, [r7, #8]
 80027d0:	b21b      	sxth	r3, r3
 80027d2:	4313      	orrs	r3, r2
 80027d4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80027d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027da:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	ee07 3a90 	vmov	s15, r3
 80027e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	ee07 3a90 	vmov	s15, r3
 80027f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80027fe:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002802:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	ee07 3a90 	vmov	s15, r3
 800280c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002814:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002818:	ee07 3a90 	vmov	s15, r3
 800281c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002820:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002824:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	ee07 3a90 	vmov	s15, r3
}
 800282e:	eeb0 0a67 	vmov.f32	s0, s15
 8002832:	3720      	adds	r7, #32
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	4603      	mov	r3, r0
 8002840:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002842:	88fb      	ldrh	r3, [r7, #6]
 8002844:	4618      	mov	r0, r3
 8002846:	f000 f87b 	bl	8002940 <LPS22HB_Init>
}
 800284a:	bf00      	nop
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}

08002852 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002852:	b580      	push	{r7, lr}
 8002854:	b084      	sub	sp, #16
 8002856:	af00      	add	r7, sp, #0
 8002858:	4603      	mov	r3, r0
 800285a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800285c:	2300      	movs	r3, #0
 800285e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002860:	f7ff fd1c 	bl	800229c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002864:	88fb      	ldrh	r3, [r7, #6]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	210f      	movs	r1, #15
 800286a:	4618      	mov	r0, r3
 800286c:	f7ff fd3a 	bl	80022e4 <SENSOR_IO_Read>
 8002870:	4603      	mov	r3, r0
 8002872:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002874:	7bfb      	ldrb	r3, [r7, #15]
}
 8002876:	4618      	mov	r0, r3
 8002878:	3710      	adds	r7, #16
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002880:	b590      	push	{r4, r7, lr}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	4603      	mov	r3, r0
 8002888:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800288e:	2300      	movs	r3, #0
 8002890:	74fb      	strb	r3, [r7, #19]
 8002892:	e013      	b.n	80028bc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	7cfb      	ldrb	r3, [r7, #19]
 800289a:	3328      	adds	r3, #40	; 0x28
 800289c:	b2db      	uxtb	r3, r3
 800289e:	7cfc      	ldrb	r4, [r7, #19]
 80028a0:	4619      	mov	r1, r3
 80028a2:	4610      	mov	r0, r2
 80028a4:	f7ff fd1e 	bl	80022e4 <SENSOR_IO_Read>
 80028a8:	4603      	mov	r3, r0
 80028aa:	461a      	mov	r2, r3
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	4423      	add	r3, r4
 80028b2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80028b6:	7cfb      	ldrb	r3, [r7, #19]
 80028b8:	3301      	adds	r3, #1
 80028ba:	74fb      	strb	r3, [r7, #19]
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d9e8      	bls.n	8002894 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80028c2:	2300      	movs	r3, #0
 80028c4:	74fb      	strb	r3, [r7, #19]
 80028c6:	e010      	b.n	80028ea <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80028c8:	7cfb      	ldrb	r3, [r7, #19]
 80028ca:	f107 0218 	add.w	r2, r7, #24
 80028ce:	4413      	add	r3, r2
 80028d0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80028d4:	461a      	mov	r2, r3
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	4313      	orrs	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	3301      	adds	r3, #1
 80028e8:	74fb      	strb	r3, [r7, #19]
 80028ea:	7cfb      	ldrb	r3, [r7, #19]
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d9eb      	bls.n	80028c8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002900:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2264      	movs	r2, #100	; 0x64
 800290a:	fb02 f303 	mul.w	r3, r2, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	da01      	bge.n	8002916 <LPS22HB_P_ReadPressure+0x96>
 8002912:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002916:	131b      	asrs	r3, r3, #12
 8002918:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	ee07 3a90 	vmov	s15, r3
 8002920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002924:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800293c <LPS22HB_P_ReadPressure+0xbc>
 8002928:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800292c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002930:	eeb0 0a67 	vmov.f32	s0, s15
 8002934:	371c      	adds	r7, #28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd90      	pop	{r4, r7, pc}
 800293a:	bf00      	nop
 800293c:	42c80000 	.word	0x42c80000

08002940 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	4603      	mov	r3, r0
 8002948:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800294a:	88fb      	ldrh	r3, [r7, #6]
 800294c:	b2db      	uxtb	r3, r3
 800294e:	211a      	movs	r1, #26
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff fcc7 	bl	80022e4 <SENSOR_IO_Read>
 8002956:	4603      	mov	r3, r0
 8002958:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	211a      	movs	r1, #26
 8002972:	4618      	mov	r0, r3
 8002974:	f7ff fc9c 	bl	80022b0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002978:	88fb      	ldrh	r3, [r7, #6]
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2110      	movs	r1, #16
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fcb0 	bl	80022e4 <SENSOR_IO_Read>
 8002984:	4603      	mov	r3, r0
 8002986:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002988:	7bfb      	ldrb	r3, [r7, #15]
 800298a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002996:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	f023 0302 	bic.w	r3, r3, #2
 800299e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
 80029a2:	f043 0302 	orr.w	r3, r3, #2
 80029a6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80029a8:	88fb      	ldrh	r3, [r7, #6]
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	7bfa      	ldrb	r2, [r7, #15]
 80029ae:	2110      	movs	r1, #16
 80029b0:	4618      	mov	r0, r3
 80029b2:	f7ff fc7d 	bl	80022b0 <SENSOR_IO_Write>
}  
 80029b6:	bf00      	nop
 80029b8:	3710      	adds	r7, #16
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}

080029be <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80029be:	b580      	push	{r7, lr}
 80029c0:	b084      	sub	sp, #16
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	4603      	mov	r3, r0
 80029c6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80029cc:	2110      	movs	r1, #16
 80029ce:	20d4      	movs	r0, #212	; 0xd4
 80029d0:	f7ff fc88 	bl	80022e4 <SENSOR_IO_Read>
 80029d4:	4603      	mov	r3, r0
 80029d6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80029dc:	7bbb      	ldrb	r3, [r7, #14]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80029e4:	7bba      	ldrb	r2, [r7, #14]
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80029ec:	7bbb      	ldrb	r3, [r7, #14]
 80029ee:	461a      	mov	r2, r3
 80029f0:	2110      	movs	r1, #16
 80029f2:	20d4      	movs	r0, #212	; 0xd4
 80029f4:	f7ff fc5c 	bl	80022b0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80029f8:	2112      	movs	r1, #18
 80029fa:	20d4      	movs	r0, #212	; 0xd4
 80029fc:	f7ff fc72 	bl	80022e4 <SENSOR_IO_Read>
 8002a00:	4603      	mov	r3, r0
 8002a02:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002a04:	88fb      	ldrh	r3, [r7, #6]
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002a0c:	7bbb      	ldrb	r3, [r7, #14]
 8002a0e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002a12:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002a14:	7bba      	ldrb	r2, [r7, #14]
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002a1c:	7bbb      	ldrb	r3, [r7, #14]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	2112      	movs	r1, #18
 8002a22:	20d4      	movs	r0, #212	; 0xd4
 8002a24:	f7ff fc44 	bl	80022b0 <SENSOR_IO_Write>
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002a36:	2300      	movs	r3, #0
 8002a38:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002a3a:	2110      	movs	r1, #16
 8002a3c:	20d4      	movs	r0, #212	; 0xd4
 8002a3e:	f7ff fc51 	bl	80022e4 <SENSOR_IO_Read>
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002a46:	79fb      	ldrb	r3, [r7, #7]
 8002a48:	f003 030f 	and.w	r3, r3, #15
 8002a4c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	461a      	mov	r2, r3
 8002a52:	2110      	movs	r1, #16
 8002a54:	20d4      	movs	r0, #212	; 0xd4
 8002a56:	f7ff fc2b 	bl	80022b0 <SENSOR_IO_Write>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002a62:	b580      	push	{r7, lr}
 8002a64:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002a66:	f7ff fc19 	bl	800229c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8002a6a:	210f      	movs	r1, #15
 8002a6c:	20d4      	movs	r0, #212	; 0xd4
 8002a6e:	f7ff fc39 	bl	80022e4 <SENSOR_IO_Read>
 8002a72:	4603      	mov	r3, r0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002a86:	2115      	movs	r1, #21
 8002a88:	20d4      	movs	r0, #212	; 0xd4
 8002a8a:	f7ff fc2b 	bl	80022e4 <SENSOR_IO_Read>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	f023 0310 	bic.w	r3, r3, #16
 8002a98:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002a9a:	88fb      	ldrh	r3, [r7, #6]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	f043 0310 	orr.w	r3, r3, #16
 8002aa6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2115      	movs	r1, #21
 8002aae:	20d4      	movs	r0, #212	; 0xd4
 8002ab0:	f7ff fbfe 	bl	80022b0 <SENSOR_IO_Write>
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002acc:	f04f 0300 	mov.w	r3, #0
 8002ad0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8002ad2:	2110      	movs	r1, #16
 8002ad4:	20d4      	movs	r0, #212	; 0xd4
 8002ad6:	f7ff fc05 	bl	80022e4 <SENSOR_IO_Read>
 8002ada:	4603      	mov	r3, r0
 8002adc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8002ade:	f107 0208 	add.w	r2, r7, #8
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	2128      	movs	r1, #40	; 0x28
 8002ae6:	20d4      	movs	r0, #212	; 0xd4
 8002ae8:	f7ff fc1a 	bl	8002320 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002aec:	2300      	movs	r3, #0
 8002aee:	77fb      	strb	r3, [r7, #31]
 8002af0:	e01f      	b.n	8002b32 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002af2:	7ffb      	ldrb	r3, [r7, #31]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	3301      	adds	r3, #1
 8002af8:	f107 0220 	add.w	r2, r7, #32
 8002afc:	4413      	add	r3, r2
 8002afe:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	021b      	lsls	r3, r3, #8
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	7ffb      	ldrb	r3, [r7, #31]
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	f107 0120 	add.w	r1, r7, #32
 8002b10:	440b      	add	r3, r1
 8002b12:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4413      	add	r3, r2
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
 8002b1e:	b212      	sxth	r2, r2
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	f107 0120 	add.w	r1, r7, #32
 8002b26:	440b      	add	r3, r1
 8002b28:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002b2c:	7ffb      	ldrb	r3, [r7, #31]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	77fb      	strb	r3, [r7, #31]
 8002b32:	7ffb      	ldrb	r3, [r7, #31]
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d9dc      	bls.n	8002af2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002b38:	7dfb      	ldrb	r3, [r7, #23]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b0c      	cmp	r3, #12
 8002b40:	d828      	bhi.n	8002b94 <LSM6DSL_AccReadXYZ+0xd8>
 8002b42:	a201      	add	r2, pc, #4	; (adr r2, 8002b48 <LSM6DSL_AccReadXYZ+0x8c>)
 8002b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b48:	08002b7d 	.word	0x08002b7d
 8002b4c:	08002b95 	.word	0x08002b95
 8002b50:	08002b95 	.word	0x08002b95
 8002b54:	08002b95 	.word	0x08002b95
 8002b58:	08002b8f 	.word	0x08002b8f
 8002b5c:	08002b95 	.word	0x08002b95
 8002b60:	08002b95 	.word	0x08002b95
 8002b64:	08002b95 	.word	0x08002b95
 8002b68:	08002b83 	.word	0x08002b83
 8002b6c:	08002b95 	.word	0x08002b95
 8002b70:	08002b95 	.word	0x08002b95
 8002b74:	08002b95 	.word	0x08002b95
 8002b78:	08002b89 	.word	0x08002b89
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002b7c:	4b19      	ldr	r3, [pc, #100]	; (8002be4 <LSM6DSL_AccReadXYZ+0x128>)
 8002b7e:	61bb      	str	r3, [r7, #24]
    break;
 8002b80:	e008      	b.n	8002b94 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <LSM6DSL_AccReadXYZ+0x12c>)
 8002b84:	61bb      	str	r3, [r7, #24]
    break;
 8002b86:	e005      	b.n	8002b94 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002b88:	4b18      	ldr	r3, [pc, #96]	; (8002bec <LSM6DSL_AccReadXYZ+0x130>)
 8002b8a:	61bb      	str	r3, [r7, #24]
    break;
 8002b8c:	e002      	b.n	8002b94 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <LSM6DSL_AccReadXYZ+0x134>)
 8002b90:	61bb      	str	r3, [r7, #24]
    break;    
 8002b92:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	77fb      	strb	r3, [r7, #31]
 8002b98:	e01b      	b.n	8002bd2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002b9a:	7ffb      	ldrb	r3, [r7, #31]
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	f107 0220 	add.w	r2, r7, #32
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002ba8:	ee07 3a90 	vmov	s15, r3
 8002bac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bb8:	7ffb      	ldrb	r3, [r7, #31]
 8002bba:	005b      	lsls	r3, r3, #1
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bc4:	ee17 2a90 	vmov	r2, s15
 8002bc8:	b212      	sxth	r2, r2
 8002bca:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002bcc:	7ffb      	ldrb	r3, [r7, #31]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	77fb      	strb	r3, [r7, #31]
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d9e0      	bls.n	8002b9a <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	3d79db23 	.word	0x3d79db23
 8002be8:	3df9db23 	.word	0x3df9db23
 8002bec:	3e79db23 	.word	0x3e79db23
 8002bf0:	3ef9db23 	.word	0x3ef9db23

08002bf4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bfe:	2003      	movs	r0, #3
 8002c00:	f000 f93c 	bl	8002e7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c04:	2000      	movs	r0, #0
 8002c06:	f000 f80d 	bl	8002c24 <HAL_InitTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d002      	beq.n	8002c16 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	71fb      	strb	r3, [r7, #7]
 8002c14:	e001      	b.n	8002c1a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c16:	f7fe ff37 	bl	8001a88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3708      	adds	r7, #8
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002c30:	4b17      	ldr	r3, [pc, #92]	; (8002c90 <HAL_InitTick+0x6c>)
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d023      	beq.n	8002c80 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002c38:	4b16      	ldr	r3, [pc, #88]	; (8002c94 <HAL_InitTick+0x70>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	4b14      	ldr	r3, [pc, #80]	; (8002c90 <HAL_InitTick+0x6c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	4619      	mov	r1, r3
 8002c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f949 	bl	8002ee6 <HAL_SYSTICK_Config>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10f      	bne.n	8002c7a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d809      	bhi.n	8002c74 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c60:	2200      	movs	r2, #0
 8002c62:	6879      	ldr	r1, [r7, #4]
 8002c64:	f04f 30ff 	mov.w	r0, #4294967295
 8002c68:	f000 f913 	bl	8002e92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_InitTick+0x74>)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	e007      	b.n	8002c84 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	e004      	b.n	8002c84 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	73fb      	strb	r3, [r7, #15]
 8002c7e:	e001      	b.n	8002c84 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	20000150 	.word	0x20000150
 8002c94:	200000ec 	.word	0x200000ec
 8002c98:	2000014c 	.word	0x2000014c

08002c9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ca0:	4b06      	ldr	r3, [pc, #24]	; (8002cbc <HAL_IncTick+0x20>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	4b06      	ldr	r3, [pc, #24]	; (8002cc0 <HAL_IncTick+0x24>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4413      	add	r3, r2
 8002cac:	4a04      	ldr	r2, [pc, #16]	; (8002cc0 <HAL_IncTick+0x24>)
 8002cae:	6013      	str	r3, [r2, #0]
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000150 	.word	0x20000150
 8002cc0:	20000790 	.word	0x20000790

08002cc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_GetTick+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000790 	.word	0x20000790

08002cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cec:	4b0c      	ldr	r3, [pc, #48]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d0e:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <__NVIC_SetPriorityGrouping+0x44>)
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	60d3      	str	r3, [r2, #12]
}
 8002d14:	bf00      	nop
 8002d16:	3714      	adds	r7, #20
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d28:	4b04      	ldr	r3, [pc, #16]	; (8002d3c <__NVIC_GetPriorityGrouping+0x18>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	0a1b      	lsrs	r3, r3, #8
 8002d2e:	f003 0307 	and.w	r3, r3, #7
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	4603      	mov	r3, r0
 8002d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	db0b      	blt.n	8002d6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d52:	79fb      	ldrb	r3, [r7, #7]
 8002d54:	f003 021f 	and.w	r2, r3, #31
 8002d58:	4907      	ldr	r1, [pc, #28]	; (8002d78 <__NVIC_EnableIRQ+0x38>)
 8002d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	6039      	str	r1, [r7, #0]
 8002d86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	db0a      	blt.n	8002da6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	b2da      	uxtb	r2, r3
 8002d94:	490c      	ldr	r1, [pc, #48]	; (8002dc8 <__NVIC_SetPriority+0x4c>)
 8002d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9a:	0112      	lsls	r2, r2, #4
 8002d9c:	b2d2      	uxtb	r2, r2
 8002d9e:	440b      	add	r3, r1
 8002da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da4:	e00a      	b.n	8002dbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	b2da      	uxtb	r2, r3
 8002daa:	4908      	ldr	r1, [pc, #32]	; (8002dcc <__NVIC_SetPriority+0x50>)
 8002dac:	79fb      	ldrb	r3, [r7, #7]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	3b04      	subs	r3, #4
 8002db4:	0112      	lsls	r2, r2, #4
 8002db6:	b2d2      	uxtb	r2, r2
 8002db8:	440b      	add	r3, r1
 8002dba:	761a      	strb	r2, [r3, #24]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000e100 	.word	0xe000e100
 8002dcc:	e000ed00 	.word	0xe000ed00

08002dd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b089      	sub	sp, #36	; 0x24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 0307 	and.w	r3, r3, #7
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f1c3 0307 	rsb	r3, r3, #7
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	bf28      	it	cs
 8002dee:	2304      	movcs	r3, #4
 8002df0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3304      	adds	r3, #4
 8002df6:	2b06      	cmp	r3, #6
 8002df8:	d902      	bls.n	8002e00 <NVIC_EncodePriority+0x30>
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	3b03      	subs	r3, #3
 8002dfe:	e000      	b.n	8002e02 <NVIC_EncodePriority+0x32>
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e04:	f04f 32ff 	mov.w	r2, #4294967295
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e0e:	43da      	mvns	r2, r3
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	401a      	ands	r2, r3
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e18:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e22:	43d9      	mvns	r1, r3
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	4313      	orrs	r3, r2
         );
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3724      	adds	r7, #36	; 0x24
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b082      	sub	sp, #8
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	3b01      	subs	r3, #1
 8002e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e48:	d301      	bcc.n	8002e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e00f      	b.n	8002e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e4e:	4a0a      	ldr	r2, [pc, #40]	; (8002e78 <SysTick_Config+0x40>)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3b01      	subs	r3, #1
 8002e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e56:	210f      	movs	r1, #15
 8002e58:	f04f 30ff 	mov.w	r0, #4294967295
 8002e5c:	f7ff ff8e 	bl	8002d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e60:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <SysTick_Config+0x40>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e66:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <SysTick_Config+0x40>)
 8002e68:	2207      	movs	r2, #7
 8002e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000e010 	.word	0xe000e010

08002e7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f7ff ff29 	bl	8002cdc <__NVIC_SetPriorityGrouping>
}
 8002e8a:	bf00      	nop
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e92:	b580      	push	{r7, lr}
 8002e94:	b086      	sub	sp, #24
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	4603      	mov	r3, r0
 8002e9a:	60b9      	str	r1, [r7, #8]
 8002e9c:	607a      	str	r2, [r7, #4]
 8002e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea4:	f7ff ff3e 	bl	8002d24 <__NVIC_GetPriorityGrouping>
 8002ea8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	68b9      	ldr	r1, [r7, #8]
 8002eae:	6978      	ldr	r0, [r7, #20]
 8002eb0:	f7ff ff8e 	bl	8002dd0 <NVIC_EncodePriority>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7ff ff5d 	bl	8002d7c <__NVIC_SetPriority>
}
 8002ec2:	bf00      	nop
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}

08002eca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eca:	b580      	push	{r7, lr}
 8002ecc:	b082      	sub	sp, #8
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff31 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002ede:	bf00      	nop
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff ffa2 	bl	8002e38 <SysTick_Config>
 8002ef4:	4603      	mov	r3, r0
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3708      	adds	r7, #8
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bd80      	pop	{r7, pc}

08002efe <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002efe:	b480      	push	{r7}
 8002f00:	b085      	sub	sp, #20
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d008      	beq.n	8002f28 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e022      	b.n	8002f6e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 020e 	bic.w	r2, r2, #14
 8002f36:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4c:	f003 021c 	and.w	r2, r3, #28
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	2101      	movs	r1, #1
 8002f56:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002f6c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002f6e:	4618      	mov	r0, r3
 8002f70:	3714      	adds	r7, #20
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr

08002f7a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f82:	2300      	movs	r3, #0
 8002f84:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d005      	beq.n	8002f9e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2204      	movs	r2, #4
 8002f96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	73fb      	strb	r3, [r7, #15]
 8002f9c:	e029      	b.n	8002ff2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 020e 	bic.w	r2, r2, #14
 8002fac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f022 0201 	bic.w	r2, r2, #1
 8002fbc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fc2:	f003 021c 	and.w	r2, r3, #28
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2101      	movs	r1, #1
 8002fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d003      	beq.n	8002ff2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
    }
  }
  return status;
 8002ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3710      	adds	r7, #16
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800300a:	e17f      	b.n	800330c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	2101      	movs	r1, #1
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	4013      	ands	r3, r2
 800301a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2b00      	cmp	r3, #0
 8003020:	f000 8171 	beq.w	8003306 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	2b01      	cmp	r3, #1
 800302e:	d005      	beq.n	800303c <HAL_GPIO_Init+0x40>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d130      	bne.n	800309e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	2203      	movs	r2, #3
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	4013      	ands	r3, r2
 8003052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	68da      	ldr	r2, [r3, #12]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	fa02 f303 	lsl.w	r3, r2, r3
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003072:	2201      	movs	r2, #1
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	43db      	mvns	r3, r3
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 0201 	and.w	r2, r3, #1
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f003 0303 	and.w	r3, r3, #3
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	d118      	bne.n	80030dc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80030b0:	2201      	movs	r2, #1
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	08db      	lsrs	r3, r3, #3
 80030c6:	f003 0201 	and.w	r2, r3, #1
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b03      	cmp	r3, #3
 80030e6:	d017      	beq.n	8003118 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	2203      	movs	r2, #3
 80030f4:	fa02 f303 	lsl.w	r3, r2, r3
 80030f8:	43db      	mvns	r3, r3
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4013      	ands	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 0303 	and.w	r3, r3, #3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d123      	bne.n	800316c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	08da      	lsrs	r2, r3, #3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	3208      	adds	r2, #8
 800312c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003130:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	220f      	movs	r2, #15
 800313c:	fa02 f303 	lsl.w	r3, r2, r3
 8003140:	43db      	mvns	r3, r3
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4013      	ands	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	691a      	ldr	r2, [r3, #16]
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	f003 0307 	and.w	r3, r3, #7
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	fa02 f303 	lsl.w	r3, r2, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800315e:	697b      	ldr	r3, [r7, #20]
 8003160:	08da      	lsrs	r2, r3, #3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3208      	adds	r2, #8
 8003166:	6939      	ldr	r1, [r7, #16]
 8003168:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	2203      	movs	r2, #3
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4013      	ands	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	f003 0203 	and.w	r2, r3, #3
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fa02 f303 	lsl.w	r3, r2, r3
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	693a      	ldr	r2, [r7, #16]
 800319e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80ac 	beq.w	8003306 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031ae:	4b5f      	ldr	r3, [pc, #380]	; (800332c <HAL_GPIO_Init+0x330>)
 80031b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b2:	4a5e      	ldr	r2, [pc, #376]	; (800332c <HAL_GPIO_Init+0x330>)
 80031b4:	f043 0301 	orr.w	r3, r3, #1
 80031b8:	6613      	str	r3, [r2, #96]	; 0x60
 80031ba:	4b5c      	ldr	r3, [pc, #368]	; (800332c <HAL_GPIO_Init+0x330>)
 80031bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	60bb      	str	r3, [r7, #8]
 80031c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80031c6:	4a5a      	ldr	r2, [pc, #360]	; (8003330 <HAL_GPIO_Init+0x334>)
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	009b      	lsls	r3, r3, #2
 80031dc:	220f      	movs	r2, #15
 80031de:	fa02 f303 	lsl.w	r3, r2, r3
 80031e2:	43db      	mvns	r3, r3
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	4013      	ands	r3, r2
 80031e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031f0:	d025      	beq.n	800323e <HAL_GPIO_Init+0x242>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4f      	ldr	r2, [pc, #316]	; (8003334 <HAL_GPIO_Init+0x338>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d01f      	beq.n	800323a <HAL_GPIO_Init+0x23e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4e      	ldr	r2, [pc, #312]	; (8003338 <HAL_GPIO_Init+0x33c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d019      	beq.n	8003236 <HAL_GPIO_Init+0x23a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a4d      	ldr	r2, [pc, #308]	; (800333c <HAL_GPIO_Init+0x340>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d013      	beq.n	8003232 <HAL_GPIO_Init+0x236>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a4c      	ldr	r2, [pc, #304]	; (8003340 <HAL_GPIO_Init+0x344>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00d      	beq.n	800322e <HAL_GPIO_Init+0x232>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a4b      	ldr	r2, [pc, #300]	; (8003344 <HAL_GPIO_Init+0x348>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <HAL_GPIO_Init+0x22e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a4a      	ldr	r2, [pc, #296]	; (8003348 <HAL_GPIO_Init+0x34c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d101      	bne.n	8003226 <HAL_GPIO_Init+0x22a>
 8003222:	2306      	movs	r3, #6
 8003224:	e00c      	b.n	8003240 <HAL_GPIO_Init+0x244>
 8003226:	2307      	movs	r3, #7
 8003228:	e00a      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800322a:	2305      	movs	r3, #5
 800322c:	e008      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800322e:	2304      	movs	r3, #4
 8003230:	e006      	b.n	8003240 <HAL_GPIO_Init+0x244>
 8003232:	2303      	movs	r3, #3
 8003234:	e004      	b.n	8003240 <HAL_GPIO_Init+0x244>
 8003236:	2302      	movs	r3, #2
 8003238:	e002      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <HAL_GPIO_Init+0x244>
 800323e:	2300      	movs	r3, #0
 8003240:	697a      	ldr	r2, [r7, #20]
 8003242:	f002 0203 	and.w	r2, r2, #3
 8003246:	0092      	lsls	r2, r2, #2
 8003248:	4093      	lsls	r3, r2
 800324a:	693a      	ldr	r2, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003250:	4937      	ldr	r1, [pc, #220]	; (8003330 <HAL_GPIO_Init+0x334>)
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	089b      	lsrs	r3, r3, #2
 8003256:	3302      	adds	r3, #2
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_GPIO_Init+0x350>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	43db      	mvns	r3, r3
 8003268:	693a      	ldr	r2, [r7, #16]
 800326a:	4013      	ands	r3, r2
 800326c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4313      	orrs	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003282:	4a32      	ldr	r2, [pc, #200]	; (800334c <HAL_GPIO_Init+0x350>)
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003288:	4b30      	ldr	r3, [pc, #192]	; (800334c <HAL_GPIO_Init+0x350>)
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	43db      	mvns	r3, r3
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4013      	ands	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032ac:	4a27      	ldr	r2, [pc, #156]	; (800334c <HAL_GPIO_Init+0x350>)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032b2:	4b26      	ldr	r3, [pc, #152]	; (800334c <HAL_GPIO_Init+0x350>)
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	693a      	ldr	r2, [r7, #16]
 80032be:	4013      	ands	r3, r2
 80032c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80032d6:	4a1d      	ldr	r2, [pc, #116]	; (800334c <HAL_GPIO_Init+0x350>)
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80032dc:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_GPIO_Init+0x350>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	4013      	ands	r3, r2
 80032ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80032f8:	693a      	ldr	r2, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003300:	4a12      	ldr	r2, [pc, #72]	; (800334c <HAL_GPIO_Init+0x350>)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	3301      	adds	r3, #1
 800330a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	f47f ae78 	bne.w	800300c <HAL_GPIO_Init+0x10>
  }
}
 800331c:	bf00      	nop
 800331e:	bf00      	nop
 8003320:	371c      	adds	r7, #28
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	40021000 	.word	0x40021000
 8003330:	40010000 	.word	0x40010000
 8003334:	48000400 	.word	0x48000400
 8003338:	48000800 	.word	0x48000800
 800333c:	48000c00 	.word	0x48000c00
 8003340:	48001000 	.word	0x48001000
 8003344:	48001400 	.word	0x48001400
 8003348:	48001800 	.word	0x48001800
 800334c:	40010400 	.word	0x40010400

08003350 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003350:	b480      	push	{r7}
 8003352:	b087      	sub	sp, #28
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800335a:	2300      	movs	r3, #0
 800335c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800335e:	e0cd      	b.n	80034fc <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003360:	2201      	movs	r2, #1
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	683a      	ldr	r2, [r7, #0]
 800336a:	4013      	ands	r3, r2
 800336c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	f000 80c0 	beq.w	80034f6 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003376:	4a68      	ldr	r2, [pc, #416]	; (8003518 <HAL_GPIO_DeInit+0x1c8>)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	4013      	ands	r3, r2
 8003396:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800339e:	d025      	beq.n	80033ec <HAL_GPIO_DeInit+0x9c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a5e      	ldr	r2, [pc, #376]	; (800351c <HAL_GPIO_DeInit+0x1cc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01f      	beq.n	80033e8 <HAL_GPIO_DeInit+0x98>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_GPIO_DeInit+0x1d0>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d019      	beq.n	80033e4 <HAL_GPIO_DeInit+0x94>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_GPIO_DeInit+0x1d4>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d013      	beq.n	80033e0 <HAL_GPIO_DeInit+0x90>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_GPIO_DeInit+0x1d8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00d      	beq.n	80033dc <HAL_GPIO_DeInit+0x8c>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_GPIO_DeInit+0x1dc>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <HAL_GPIO_DeInit+0x88>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a59      	ldr	r2, [pc, #356]	; (8003530 <HAL_GPIO_DeInit+0x1e0>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d101      	bne.n	80033d4 <HAL_GPIO_DeInit+0x84>
 80033d0:	2306      	movs	r3, #6
 80033d2:	e00c      	b.n	80033ee <HAL_GPIO_DeInit+0x9e>
 80033d4:	2307      	movs	r3, #7
 80033d6:	e00a      	b.n	80033ee <HAL_GPIO_DeInit+0x9e>
 80033d8:	2305      	movs	r3, #5
 80033da:	e008      	b.n	80033ee <HAL_GPIO_DeInit+0x9e>
 80033dc:	2304      	movs	r3, #4
 80033de:	e006      	b.n	80033ee <HAL_GPIO_DeInit+0x9e>
 80033e0:	2303      	movs	r3, #3
 80033e2:	e004      	b.n	80033ee <HAL_GPIO_DeInit+0x9e>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e002      	b.n	80033ee <HAL_GPIO_DeInit+0x9e>
 80033e8:	2301      	movs	r3, #1
 80033ea:	e000      	b.n	80033ee <HAL_GPIO_DeInit+0x9e>
 80033ec:	2300      	movs	r3, #0
 80033ee:	697a      	ldr	r2, [r7, #20]
 80033f0:	f002 0203 	and.w	r2, r2, #3
 80033f4:	0092      	lsls	r2, r2, #2
 80033f6:	4093      	lsls	r3, r2
 80033f8:	68fa      	ldr	r2, [r7, #12]
 80033fa:	429a      	cmp	r2, r3
 80033fc:	d132      	bne.n	8003464 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80033fe:	4b4d      	ldr	r3, [pc, #308]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	43db      	mvns	r3, r3
 8003406:	494b      	ldr	r1, [pc, #300]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 8003408:	4013      	ands	r3, r2
 800340a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800340c:	4b49      	ldr	r3, [pc, #292]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 800340e:	685a      	ldr	r2, [r3, #4]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	43db      	mvns	r3, r3
 8003414:	4947      	ldr	r1, [pc, #284]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 8003416:	4013      	ands	r3, r2
 8003418:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800341a:	4b46      	ldr	r3, [pc, #280]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 800341c:	68da      	ldr	r2, [r3, #12]
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	43db      	mvns	r3, r3
 8003422:	4944      	ldr	r1, [pc, #272]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 8003424:	4013      	ands	r3, r2
 8003426:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003428:	4b42      	ldr	r3, [pc, #264]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	43db      	mvns	r3, r3
 8003430:	4940      	ldr	r1, [pc, #256]	; (8003534 <HAL_GPIO_DeInit+0x1e4>)
 8003432:	4013      	ands	r3, r2
 8003434:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f003 0303 	and.w	r3, r3, #3
 800343c:	009b      	lsls	r3, r3, #2
 800343e:	220f      	movs	r2, #15
 8003440:	fa02 f303 	lsl.w	r3, r2, r3
 8003444:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003446:	4a34      	ldr	r2, [pc, #208]	; (8003518 <HAL_GPIO_DeInit+0x1c8>)
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	089b      	lsrs	r3, r3, #2
 800344c:	3302      	adds	r3, #2
 800344e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	43da      	mvns	r2, r3
 8003456:	4830      	ldr	r0, [pc, #192]	; (8003518 <HAL_GPIO_DeInit+0x1c8>)
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	089b      	lsrs	r3, r3, #2
 800345c:	400a      	ands	r2, r1
 800345e:	3302      	adds	r3, #2
 8003460:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2103      	movs	r1, #3
 800346e:	fa01 f303 	lsl.w	r3, r1, r3
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	220f      	movs	r2, #15
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	43db      	mvns	r3, r3
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	08d2      	lsrs	r2, r2, #3
 8003498:	4019      	ands	r1, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	3208      	adds	r2, #8
 800349e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	689a      	ldr	r2, [r3, #8]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	2103      	movs	r1, #3
 80034ac:	fa01 f303 	lsl.w	r3, r1, r3
 80034b0:	43db      	mvns	r3, r3
 80034b2:	401a      	ands	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685a      	ldr	r2, [r3, #4]
 80034bc:	2101      	movs	r1, #1
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	401a      	ands	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	2103      	movs	r1, #3
 80034d6:	fa01 f303 	lsl.w	r3, r1, r3
 80034da:	43db      	mvns	r3, r3
 80034dc:	401a      	ands	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e6:	2101      	movs	r1, #1
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	fa01 f303 	lsl.w	r3, r1, r3
 80034ee:	43db      	mvns	r3, r3
 80034f0:	401a      	ands	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	3301      	adds	r3, #1
 80034fa:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	f47f af2b 	bne.w	8003360 <HAL_GPIO_DeInit+0x10>
  }
}
 800350a:	bf00      	nop
 800350c:	bf00      	nop
 800350e:	371c      	adds	r7, #28
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr
 8003518:	40010000 	.word	0x40010000
 800351c:	48000400 	.word	0x48000400
 8003520:	48000800 	.word	0x48000800
 8003524:	48000c00 	.word	0x48000c00
 8003528:	48001000 	.word	0x48001000
 800352c:	48001400 	.word	0x48001400
 8003530:	48001800 	.word	0x48001800
 8003534:	40010400 	.word	0x40010400

08003538 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
 8003544:	4613      	mov	r3, r2
 8003546:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003548:	787b      	ldrb	r3, [r7, #1]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800354e:	887a      	ldrh	r2, [r7, #2]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003554:	e002      	b.n	800355c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003572:	4b08      	ldr	r3, [pc, #32]	; (8003594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	d006      	beq.n	800358c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800357e:	4a05      	ldr	r2, [pc, #20]	; (8003594 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003580:	88fb      	ldrh	r3, [r7, #6]
 8003582:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003584:	88fb      	ldrh	r3, [r7, #6]
 8003586:	4618      	mov	r0, r3
 8003588:	f000 f806 	bl	8003598 <HAL_GPIO_EXTI_Callback>
  }
}
 800358c:	bf00      	nop
 800358e:	3708      	adds	r7, #8
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}
 8003594:	40010400 	.word	0x40010400

08003598 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	4603      	mov	r3, r0
 80035a0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d101      	bne.n	80035c0 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035bc:	2301      	movs	r3, #1
 80035be:	e081      	b.n	80036c4 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fe fa7b 	bl	8001ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2224      	movs	r2, #36	; 0x24
 80035de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	685a      	ldr	r2, [r3, #4]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689a      	ldr	r2, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800360e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d107      	bne.n	8003628 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003624:	609a      	str	r2, [r3, #8]
 8003626:	e006      	b.n	8003636 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003634:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d104      	bne.n	8003648 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003646:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6812      	ldr	r2, [r2, #0]
 8003652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003656:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365a:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68da      	ldr	r2, [r3, #12]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800366a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691a      	ldr	r2, [r3, #16]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	695b      	ldr	r3, [r3, #20]
 8003674:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	69d9      	ldr	r1, [r3, #28]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a1a      	ldr	r2, [r3, #32]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2220      	movs	r2, #32
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80036c2:	2300      	movs	r3, #0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e021      	b.n	8003722 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2224      	movs	r2, #36	; 0x24
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7fe fa48 	bl	8001b8c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
	...

0800372c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b088      	sub	sp, #32
 8003730:	af02      	add	r7, sp, #8
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	461a      	mov	r2, r3
 800373a:	4603      	mov	r3, r0
 800373c:	817b      	strh	r3, [r7, #10]
 800373e:	460b      	mov	r3, r1
 8003740:	813b      	strh	r3, [r7, #8]
 8003742:	4613      	mov	r3, r2
 8003744:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800374c:	b2db      	uxtb	r3, r3
 800374e:	2b20      	cmp	r3, #32
 8003750:	f040 80f9 	bne.w	8003946 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <HAL_I2C_Mem_Write+0x34>
 800375a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003766:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e0ed      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003772:	2b01      	cmp	r3, #1
 8003774:	d101      	bne.n	800377a <HAL_I2C_Mem_Write+0x4e>
 8003776:	2302      	movs	r3, #2
 8003778:	e0e6      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003782:	f7ff fa9f 	bl	8002cc4 <HAL_GetTick>
 8003786:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	2319      	movs	r3, #25
 800378e:	2201      	movs	r2, #1
 8003790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fac3 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0d1      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2221      	movs	r2, #33	; 0x21
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2240      	movs	r2, #64	; 0x40
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037cc:	88f8      	ldrh	r0, [r7, #6]
 80037ce:	893a      	ldrh	r2, [r7, #8]
 80037d0:	8979      	ldrh	r1, [r7, #10]
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	9301      	str	r3, [sp, #4]
 80037d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	4603      	mov	r3, r0
 80037dc:	68f8      	ldr	r0, [r7, #12]
 80037de:	f000 f9d3 	bl	8003b88 <I2C_RequestMemoryWrite>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e0a9      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2bff      	cmp	r3, #255	; 0xff
 80037fc:	d90e      	bls.n	800381c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	22ff      	movs	r2, #255	; 0xff
 8003802:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003808:	b2da      	uxtb	r2, r3
 800380a:	8979      	ldrh	r1, [r7, #10]
 800380c:	2300      	movs	r3, #0
 800380e:	9300      	str	r3, [sp, #0]
 8003810:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fc2b 	bl	8004070 <I2C_TransferConfig>
 800381a:	e00f      	b.n	800383c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382a:	b2da      	uxtb	r2, r3
 800382c:	8979      	ldrh	r1, [r7, #10]
 800382e:	2300      	movs	r3, #0
 8003830:	9300      	str	r3, [sp, #0]
 8003832:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 fc1a 	bl	8004070 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 faad 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e07b      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	781a      	ldrb	r2, [r3, #0]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	1c5a      	adds	r2, r3, #1
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d034      	beq.n	80038f4 <HAL_I2C_Mem_Write+0x1c8>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800388e:	2b00      	cmp	r3, #0
 8003890:	d130      	bne.n	80038f4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	9300      	str	r3, [sp, #0]
 8003896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003898:	2200      	movs	r2, #0
 800389a:	2180      	movs	r1, #128	; 0x80
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fa3f 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d001      	beq.n	80038ac <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e04d      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	2bff      	cmp	r3, #255	; 0xff
 80038b4:	d90e      	bls.n	80038d4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	22ff      	movs	r2, #255	; 0xff
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038c0:	b2da      	uxtb	r2, r3
 80038c2:	8979      	ldrh	r1, [r7, #10]
 80038c4:	2300      	movs	r3, #0
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038cc:	68f8      	ldr	r0, [r7, #12]
 80038ce:	f000 fbcf 	bl	8004070 <I2C_TransferConfig>
 80038d2:	e00f      	b.n	80038f4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e2:	b2da      	uxtb	r2, r3
 80038e4:	8979      	ldrh	r1, [r7, #10]
 80038e6:	2300      	movs	r3, #0
 80038e8:	9300      	str	r3, [sp, #0]
 80038ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 fbbe 	bl	8004070 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d19e      	bne.n	800383c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f000 fa8c 	bl	8003e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003908:	4603      	mov	r3, r0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e01a      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2220      	movs	r2, #32
 8003918:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	6859      	ldr	r1, [r3, #4]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <HAL_I2C_Mem_Write+0x224>)
 8003926:	400b      	ands	r3, r1
 8003928:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	e000      	b.n	8003948 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003946:	2302      	movs	r3, #2
  }
}
 8003948:	4618      	mov	r0, r3
 800394a:	3718      	adds	r7, #24
 800394c:	46bd      	mov	sp, r7
 800394e:	bd80      	pop	{r7, pc}
 8003950:	fe00e800 	.word	0xfe00e800

08003954 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b088      	sub	sp, #32
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	4608      	mov	r0, r1
 800395e:	4611      	mov	r1, r2
 8003960:	461a      	mov	r2, r3
 8003962:	4603      	mov	r3, r0
 8003964:	817b      	strh	r3, [r7, #10]
 8003966:	460b      	mov	r3, r1
 8003968:	813b      	strh	r3, [r7, #8]
 800396a:	4613      	mov	r3, r2
 800396c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b20      	cmp	r3, #32
 8003978:	f040 80fd 	bne.w	8003b76 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	2b00      	cmp	r3, #0
 8003980:	d002      	beq.n	8003988 <HAL_I2C_Mem_Read+0x34>
 8003982:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800398e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e0f1      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_I2C_Mem_Read+0x4e>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0ea      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80039aa:	f7ff f98b 	bl	8002cc4 <HAL_GetTick>
 80039ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	9300      	str	r3, [sp, #0]
 80039b4:	2319      	movs	r3, #25
 80039b6:	2201      	movs	r2, #1
 80039b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f9af 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0d5      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2222      	movs	r2, #34	; 0x22
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2240      	movs	r2, #64	; 0x40
 80039d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6a3a      	ldr	r2, [r7, #32]
 80039e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039f4:	88f8      	ldrh	r0, [r7, #6]
 80039f6:	893a      	ldrh	r2, [r7, #8]
 80039f8:	8979      	ldrh	r1, [r7, #10]
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	9300      	str	r3, [sp, #0]
 8003a02:	4603      	mov	r3, r0
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f913 	bl	8003c30 <I2C_RequestMemoryRead>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0ad      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2bff      	cmp	r3, #255	; 0xff
 8003a24:	d90e      	bls.n	8003a44 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	22ff      	movs	r2, #255	; 0xff
 8003a2a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a30:	b2da      	uxtb	r2, r3
 8003a32:	8979      	ldrh	r1, [r7, #10]
 8003a34:	4b52      	ldr	r3, [pc, #328]	; (8003b80 <HAL_I2C_Mem_Read+0x22c>)
 8003a36:	9300      	str	r3, [sp, #0]
 8003a38:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fb17 	bl	8004070 <I2C_TransferConfig>
 8003a42:	e00f      	b.n	8003a64 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a48:	b29a      	uxth	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	8979      	ldrh	r1, [r7, #10]
 8003a56:	4b4a      	ldr	r3, [pc, #296]	; (8003b80 <HAL_I2C_Mem_Read+0x22c>)
 8003a58:	9300      	str	r3, [sp, #0]
 8003a5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 fb06 	bl	8004070 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	9300      	str	r3, [sp, #0]
 8003a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2104      	movs	r1, #4
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f956 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d001      	beq.n	8003a7e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07c      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	b2d2      	uxtb	r2, r2
 8003a8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	1c5a      	adds	r2, r3, #1
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d034      	beq.n	8003b24 <HAL_I2C_Mem_Read+0x1d0>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d130      	bne.n	8003b24 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac8:	2200      	movs	r2, #0
 8003aca:	2180      	movs	r1, #128	; 0x80
 8003acc:	68f8      	ldr	r0, [r7, #12]
 8003ace:	f000 f927 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e04d      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	2bff      	cmp	r3, #255	; 0xff
 8003ae4:	d90e      	bls.n	8003b04 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	22ff      	movs	r2, #255	; 0xff
 8003aea:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	b2da      	uxtb	r2, r3
 8003af2:	8979      	ldrh	r1, [r7, #10]
 8003af4:	2300      	movs	r3, #0
 8003af6:	9300      	str	r3, [sp, #0]
 8003af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 fab7 	bl	8004070 <I2C_TransferConfig>
 8003b02:	e00f      	b.n	8003b24 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b12:	b2da      	uxtb	r2, r3
 8003b14:	8979      	ldrh	r1, [r7, #10]
 8003b16:	2300      	movs	r3, #0
 8003b18:	9300      	str	r3, [sp, #0]
 8003b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 faa6 	bl	8004070 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b28:	b29b      	uxth	r3, r3
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d19a      	bne.n	8003a64 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b2e:	697a      	ldr	r2, [r7, #20]
 8003b30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f000 f974 	bl	8003e20 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d001      	beq.n	8003b42 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e01a      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2220      	movs	r2, #32
 8003b48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	6859      	ldr	r1, [r3, #4]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <HAL_I2C_Mem_Read+0x230>)
 8003b56:	400b      	ands	r3, r1
 8003b58:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b72:	2300      	movs	r3, #0
 8003b74:	e000      	b.n	8003b78 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003b76:	2302      	movs	r3, #2
  }
}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3718      	adds	r7, #24
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	80002400 	.word	0x80002400
 8003b84:	fe00e800 	.word	0xfe00e800

08003b88 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af02      	add	r7, sp, #8
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	4608      	mov	r0, r1
 8003b92:	4611      	mov	r1, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	4603      	mov	r3, r0
 8003b98:	817b      	strh	r3, [r7, #10]
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	813b      	strh	r3, [r7, #8]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ba2:	88fb      	ldrh	r3, [r7, #6]
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	8979      	ldrh	r1, [r7, #10]
 8003ba8:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <I2C_RequestMemoryWrite+0xa4>)
 8003baa:	9300      	str	r3, [sp, #0]
 8003bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fa5d 	bl	8004070 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bb6:	69fa      	ldr	r2, [r7, #28]
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 f8f0 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e02c      	b.n	8003c24 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d105      	bne.n	8003bdc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bd0:	893b      	ldrh	r3, [r7, #8]
 8003bd2:	b2da      	uxtb	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	629a      	str	r2, [r3, #40]	; 0x28
 8003bda:	e015      	b.n	8003c08 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	0a1b      	lsrs	r3, r3, #8
 8003be0:	b29b      	uxth	r3, r3
 8003be2:	b2da      	uxtb	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bea:	69fa      	ldr	r2, [r7, #28]
 8003bec:	69b9      	ldr	r1, [r7, #24]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 f8d6 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d001      	beq.n	8003bfe <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e012      	b.n	8003c24 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bfe:	893b      	ldrh	r3, [r7, #8]
 8003c00:	b2da      	uxtb	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	2180      	movs	r1, #128	; 0x80
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f000 f884 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d001      	beq.n	8003c22 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	80002000 	.word	0x80002000

08003c30 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b086      	sub	sp, #24
 8003c34:	af02      	add	r7, sp, #8
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	4608      	mov	r0, r1
 8003c3a:	4611      	mov	r1, r2
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	4603      	mov	r3, r0
 8003c40:	817b      	strh	r3, [r7, #10]
 8003c42:	460b      	mov	r3, r1
 8003c44:	813b      	strh	r3, [r7, #8]
 8003c46:	4613      	mov	r3, r2
 8003c48:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c4a:	88fb      	ldrh	r3, [r7, #6]
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	8979      	ldrh	r1, [r7, #10]
 8003c50:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <I2C_RequestMemoryRead+0xa4>)
 8003c52:	9300      	str	r3, [sp, #0]
 8003c54:	2300      	movs	r3, #0
 8003c56:	68f8      	ldr	r0, [r7, #12]
 8003c58:	f000 fa0a 	bl	8004070 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c5c:	69fa      	ldr	r2, [r7, #28]
 8003c5e:	69b9      	ldr	r1, [r7, #24]
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f89d 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	e02c      	b.n	8003cca <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c70:	88fb      	ldrh	r3, [r7, #6]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d105      	bne.n	8003c82 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c76:	893b      	ldrh	r3, [r7, #8]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c80:	e015      	b.n	8003cae <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c82:	893b      	ldrh	r3, [r7, #8]
 8003c84:	0a1b      	lsrs	r3, r3, #8
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	b2da      	uxtb	r2, r3
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	69b9      	ldr	r1, [r7, #24]
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 f883 	bl	8003da0 <I2C_WaitOnTXISFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e012      	b.n	8003cca <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003ca4:	893b      	ldrh	r3, [r7, #8]
 8003ca6:	b2da      	uxtb	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	9300      	str	r3, [sp, #0]
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	2140      	movs	r1, #64	; 0x40
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f000 f831 	bl	8003d20 <I2C_WaitOnFlagUntilTimeout>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d001      	beq.n	8003cc8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3710      	adds	r7, #16
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	80002000 	.word	0x80002000

08003cd8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d103      	bne.n	8003cf6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d007      	beq.n	8003d14 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	619a      	str	r2, [r3, #24]
  }
}
 8003d14:	bf00      	nop
 8003d16:	370c      	adds	r7, #12
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	603b      	str	r3, [r7, #0]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d30:	e022      	b.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d01e      	beq.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d3a:	f7fe ffc3 	bl	8002cc4 <HAL_GetTick>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d302      	bcc.n	8003d50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d113      	bne.n	8003d78 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e00f      	b.n	8003d98 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	4013      	ands	r3, r2
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	bf0c      	ite	eq
 8003d88:	2301      	moveq	r3, #1
 8003d8a:	2300      	movne	r3, #0
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	461a      	mov	r2, r3
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d0cd      	beq.n	8003d32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b084      	sub	sp, #16
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003dac:	e02c      	b.n	8003e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	68f8      	ldr	r0, [r7, #12]
 8003db4:	f000 f870 	bl	8003e98 <I2C_IsErrorOccurred>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e02a      	b.n	8003e18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dc8:	d01e      	beq.n	8003e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dca:	f7fe ff7b 	bl	8002cc4 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	68ba      	ldr	r2, [r7, #8]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d302      	bcc.n	8003de0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d113      	bne.n	8003e08 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de4:	f043 0220 	orr.w	r2, r3, #32
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e007      	b.n	8003e18 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f003 0302 	and.w	r3, r3, #2
 8003e12:	2b02      	cmp	r3, #2
 8003e14:	d1cb      	bne.n	8003dae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2c:	e028      	b.n	8003e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f830 	bl	8003e98 <I2C_IsErrorOccurred>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e026      	b.n	8003e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe ff3f 	bl	8002cc4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d113      	bne.n	8003e80 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e5c:	f043 0220 	orr.w	r2, r3, #32
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e007      	b.n	8003e90 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d1cf      	bne.n	8003e2e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3710      	adds	r7, #16
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d075      	beq.n	8003fb0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2210      	movs	r2, #16
 8003eca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003ecc:	e056      	b.n	8003f7c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed4:	d052      	beq.n	8003f7c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fef5 	bl	8002cc4 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_IsErrorOccurred+0x54>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d147      	bne.n	8003f7c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ef6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003efe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f0e:	d12e      	bne.n	8003f6e <I2C_IsErrorOccurred+0xd6>
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f16:	d02a      	beq.n	8003f6e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003f18:	7cfb      	ldrb	r3, [r7, #19]
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d027      	beq.n	8003f6e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f2c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003f2e:	f7fe fec9 	bl	8002cc4 <HAL_GetTick>
 8003f32:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f34:	e01b      	b.n	8003f6e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003f36:	f7fe fec5 	bl	8002cc4 <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b19      	cmp	r3, #25
 8003f42:	d914      	bls.n	8003f6e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f48:	f043 0220 	orr.w	r2, r3, #32
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2220      	movs	r2, #32
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0320 	and.w	r3, r3, #32
 8003f78:	2b20      	cmp	r3, #32
 8003f7a:	d1dc      	bne.n	8003f36 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b20      	cmp	r3, #32
 8003f88:	d003      	beq.n	8003f92 <I2C_IsErrorOccurred+0xfa>
 8003f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d09d      	beq.n	8003ece <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d103      	bne.n	8003fa2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f043 0304 	orr.w	r3, r3, #4
 8003fa8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00b      	beq.n	8003fda <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003fc2:	6a3b      	ldr	r3, [r7, #32]
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fd2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	f043 0308 	orr.w	r3, r3, #8
 8003fea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ff4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f043 0302 	orr.w	r3, r3, #2
 800400c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004016:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800401e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004022:	2b00      	cmp	r3, #0
 8004024:	d01c      	beq.n	8004060 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7ff fe56 	bl	8003cd8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6859      	ldr	r1, [r3, #4]
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	4b0d      	ldr	r3, [pc, #52]	; (800406c <I2C_IsErrorOccurred+0x1d4>)
 8004038:	400b      	ands	r3, r1
 800403a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	431a      	orrs	r2, r3
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2220      	movs	r2, #32
 800404c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004060:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004064:	4618      	mov	r0, r3
 8004066:	3728      	adds	r7, #40	; 0x28
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	fe00e800 	.word	0xfe00e800

08004070 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	607b      	str	r3, [r7, #4]
 800407a:	460b      	mov	r3, r1
 800407c:	817b      	strh	r3, [r7, #10]
 800407e:	4613      	mov	r3, r2
 8004080:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004082:	897b      	ldrh	r3, [r7, #10]
 8004084:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004088:	7a7b      	ldrb	r3, [r7, #9]
 800408a:	041b      	lsls	r3, r3, #16
 800408c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004090:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004096:	6a3b      	ldr	r3, [r7, #32]
 8004098:	4313      	orrs	r3, r2
 800409a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800409e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	0d5b      	lsrs	r3, r3, #21
 80040aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80040ae:	4b08      	ldr	r3, [pc, #32]	; (80040d0 <I2C_TransferConfig+0x60>)
 80040b0:	430b      	orrs	r3, r1
 80040b2:	43db      	mvns	r3, r3
 80040b4:	ea02 0103 	and.w	r1, r2, r3
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	430a      	orrs	r2, r1
 80040c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80040c2:	bf00      	nop
 80040c4:	371c      	adds	r7, #28
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	03ff63ff 	.word	0x03ff63ff

080040d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b20      	cmp	r3, #32
 80040e8:	d138      	bne.n	800415c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e032      	b.n	800415e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2224      	movs	r2, #36	; 0x24
 8004104:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0201 	bic.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004126:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	6819      	ldr	r1, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	683a      	ldr	r2, [r7, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f042 0201 	orr.w	r2, r2, #1
 8004146:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	e000      	b.n	800415e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800415c:	2302      	movs	r3, #2
  }
}
 800415e:	4618      	mov	r0, r3
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b085      	sub	sp, #20
 800416e:	af00      	add	r7, sp, #0
 8004170:	6078      	str	r0, [r7, #4]
 8004172:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800417a:	b2db      	uxtb	r3, r3
 800417c:	2b20      	cmp	r3, #32
 800417e:	d139      	bne.n	80041f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800418a:	2302      	movs	r3, #2
 800418c:	e033      	b.n	80041f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2224      	movs	r2, #36	; 0x24
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0201 	bic.w	r2, r2, #1
 80041ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80041bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68fa      	ldr	r2, [r7, #12]
 80041ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f042 0201 	orr.w	r2, r2, #1
 80041de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041f0:	2300      	movs	r3, #0
 80041f2:	e000      	b.n	80041f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80041f4:	2302      	movs	r3, #2
  }
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3714      	adds	r7, #20
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr
	...

08004204 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004204:	b480      	push	{r7}
 8004206:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004208:	4b04      	ldr	r3, [pc, #16]	; (800421c <HAL_PWREx_GetVoltageRange+0x18>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004210:	4618      	mov	r0, r3
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40007000 	.word	0x40007000

08004220 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004220:	b480      	push	{r7}
 8004222:	b085      	sub	sp, #20
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800422e:	d130      	bne.n	8004292 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004230:	4b23      	ldr	r3, [pc, #140]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004238:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800423c:	d038      	beq.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004246:	4a1e      	ldr	r2, [pc, #120]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004248:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800424c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800424e:	4b1d      	ldr	r3, [pc, #116]	; (80042c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2232      	movs	r2, #50	; 0x32
 8004254:	fb02 f303 	mul.w	r3, r2, r3
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800425a:	fba2 2303 	umull	r2, r3, r2, r3
 800425e:	0c9b      	lsrs	r3, r3, #18
 8004260:	3301      	adds	r3, #1
 8004262:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004264:	e002      	b.n	800426c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	3b01      	subs	r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800426c:	4b14      	ldr	r3, [pc, #80]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800426e:	695b      	ldr	r3, [r3, #20]
 8004270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d102      	bne.n	8004280 <HAL_PWREx_ControlVoltageScaling+0x60>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1f2      	bne.n	8004266 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004280:	4b0f      	ldr	r3, [pc, #60]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004282:	695b      	ldr	r3, [r3, #20]
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800428c:	d110      	bne.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e00f      	b.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800429a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800429e:	d007      	beq.n	80042b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80042a8:	4a05      	ldr	r2, [pc, #20]	; (80042c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80042aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80042ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80042b0:	2300      	movs	r3, #0
}
 80042b2:	4618      	mov	r0, r3
 80042b4:	3714      	adds	r7, #20
 80042b6:	46bd      	mov	sp, r7
 80042b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042bc:	4770      	bx	lr
 80042be:	bf00      	nop
 80042c0:	40007000 	.word	0x40007000
 80042c4:	200000ec 	.word	0x200000ec
 80042c8:	431bde83 	.word	0x431bde83

080042cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e3c6      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80042de:	4ba1      	ldr	r3, [pc, #644]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	f003 030c 	and.w	r3, r3, #12
 80042e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042e8:	4b9e      	ldr	r3, [pc, #632]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0310 	and.w	r3, r3, #16
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80e4 	beq.w	80044c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d007      	beq.n	8004316 <HAL_RCC_OscConfig+0x4a>
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b0c      	cmp	r3, #12
 800430a:	f040 808b 	bne.w	8004424 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	2b01      	cmp	r3, #1
 8004312:	f040 8087 	bne.w	8004424 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004316:	4b93      	ldr	r3, [pc, #588]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b00      	cmp	r3, #0
 8004320:	d005      	beq.n	800432e <HAL_RCC_OscConfig+0x62>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e39e      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1a      	ldr	r2, [r3, #32]
 8004332:	4b8c      	ldr	r3, [pc, #560]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d004      	beq.n	8004348 <HAL_RCC_OscConfig+0x7c>
 800433e:	4b89      	ldr	r3, [pc, #548]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004346:	e005      	b.n	8004354 <HAL_RCC_OscConfig+0x88>
 8004348:	4b86      	ldr	r3, [pc, #536]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800434a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004354:	4293      	cmp	r3, r2
 8004356:	d223      	bcs.n	80043a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a1b      	ldr	r3, [r3, #32]
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fd53 	bl	8004e08 <RCC_SetFlashLatencyFromMSIRange>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d001      	beq.n	800436c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e37f      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800436c:	4b7d      	ldr	r3, [pc, #500]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a7c      	ldr	r2, [pc, #496]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004372:	f043 0308 	orr.w	r3, r3, #8
 8004376:	6013      	str	r3, [r2, #0]
 8004378:	4b7a      	ldr	r3, [pc, #488]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	4977      	ldr	r1, [pc, #476]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800438a:	4b76      	ldr	r3, [pc, #472]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	4972      	ldr	r1, [pc, #456]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
 800439e:	e025      	b.n	80043ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043a0:	4b70      	ldr	r3, [pc, #448]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a6f      	ldr	r2, [pc, #444]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80043a6:	f043 0308 	orr.w	r3, r3, #8
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	496a      	ldr	r1, [pc, #424]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80043ba:	4313      	orrs	r3, r2
 80043bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043be:	4b69      	ldr	r3, [pc, #420]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	021b      	lsls	r3, r3, #8
 80043cc:	4965      	ldr	r1, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80043ce:	4313      	orrs	r3, r2
 80043d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d109      	bne.n	80043ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a1b      	ldr	r3, [r3, #32]
 80043dc:	4618      	mov	r0, r3
 80043de:	f000 fd13 	bl	8004e08 <RCC_SetFlashLatencyFromMSIRange>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e33f      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ec:	f000 fc48 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b5c      	ldr	r3, [pc, #368]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	091b      	lsrs	r3, r3, #4
 80043f8:	f003 030f 	and.w	r3, r3, #15
 80043fc:	495a      	ldr	r1, [pc, #360]	; (8004568 <HAL_RCC_OscConfig+0x29c>)
 80043fe:	5ccb      	ldrb	r3, [r1, r3]
 8004400:	f003 031f 	and.w	r3, r3, #31
 8004404:	fa22 f303 	lsr.w	r3, r2, r3
 8004408:	4a58      	ldr	r2, [pc, #352]	; (800456c <HAL_RCC_OscConfig+0x2a0>)
 800440a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800440c:	4b58      	ldr	r3, [pc, #352]	; (8004570 <HAL_RCC_OscConfig+0x2a4>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7fe fc07 	bl	8002c24 <HAL_InitTick>
 8004416:	4603      	mov	r3, r0
 8004418:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800441a:	7bfb      	ldrb	r3, [r7, #15]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d052      	beq.n	80044c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	e323      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	699b      	ldr	r3, [r3, #24]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d032      	beq.n	8004492 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800442c:	4b4d      	ldr	r3, [pc, #308]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a4c      	ldr	r2, [pc, #304]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004432:	f043 0301 	orr.w	r3, r3, #1
 8004436:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004438:	f7fe fc44 	bl	8002cc4 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004440:	f7fe fc40 	bl	8002cc4 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e30c      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d0f0      	beq.n	8004440 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a40      	ldr	r2, [pc, #256]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004464:	f043 0308 	orr.w	r3, r3, #8
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b3e      	ldr	r3, [pc, #248]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	493b      	ldr	r1, [pc, #236]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004478:	4313      	orrs	r3, r2
 800447a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800447c:	4b39      	ldr	r3, [pc, #228]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	69db      	ldr	r3, [r3, #28]
 8004488:	021b      	lsls	r3, r3, #8
 800448a:	4936      	ldr	r1, [pc, #216]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800448c:	4313      	orrs	r3, r2
 800448e:	604b      	str	r3, [r1, #4]
 8004490:	e01a      	b.n	80044c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004492:	4b34      	ldr	r3, [pc, #208]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a33      	ldr	r2, [pc, #204]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004498:	f023 0301 	bic.w	r3, r3, #1
 800449c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800449e:	f7fe fc11 	bl	8002cc4 <HAL_GetTick>
 80044a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044a4:	e008      	b.n	80044b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044a6:	f7fe fc0d 	bl	8002cc4 <HAL_GetTick>
 80044aa:	4602      	mov	r2, r0
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1ad3      	subs	r3, r2, r3
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	d901      	bls.n	80044b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80044b4:	2303      	movs	r3, #3
 80044b6:	e2d9      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80044b8:	4b2a      	ldr	r3, [pc, #168]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0302 	and.w	r3, r3, #2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <HAL_RCC_OscConfig+0x1da>
 80044c4:	e000      	b.n	80044c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80044c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d074      	beq.n	80045be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	2b08      	cmp	r3, #8
 80044d8:	d005      	beq.n	80044e6 <HAL_RCC_OscConfig+0x21a>
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b0c      	cmp	r3, #12
 80044de:	d10e      	bne.n	80044fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	2b03      	cmp	r3, #3
 80044e4:	d10b      	bne.n	80044fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044e6:	4b1f      	ldr	r3, [pc, #124]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d064      	beq.n	80045bc <HAL_RCC_OscConfig+0x2f0>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d160      	bne.n	80045bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044fa:	2301      	movs	r3, #1
 80044fc:	e2b6      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004506:	d106      	bne.n	8004516 <HAL_RCC_OscConfig+0x24a>
 8004508:	4b16      	ldr	r3, [pc, #88]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a15      	ldr	r2, [pc, #84]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800450e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	e01d      	b.n	8004552 <HAL_RCC_OscConfig+0x286>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800451e:	d10c      	bne.n	800453a <HAL_RCC_OscConfig+0x26e>
 8004520:	4b10      	ldr	r3, [pc, #64]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a0f      	ldr	r2, [pc, #60]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004526:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800452a:	6013      	str	r3, [r2, #0]
 800452c:	4b0d      	ldr	r3, [pc, #52]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4a0c      	ldr	r2, [pc, #48]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	e00b      	b.n	8004552 <HAL_RCC_OscConfig+0x286>
 800453a:	4b0a      	ldr	r3, [pc, #40]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a09      	ldr	r2, [pc, #36]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004544:	6013      	str	r3, [r2, #0]
 8004546:	4b07      	ldr	r3, [pc, #28]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a06      	ldr	r2, [pc, #24]	; (8004564 <HAL_RCC_OscConfig+0x298>)
 800454c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004550:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d01c      	beq.n	8004594 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fe fbb3 	bl	8002cc4 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004560:	e011      	b.n	8004586 <HAL_RCC_OscConfig+0x2ba>
 8004562:	bf00      	nop
 8004564:	40021000 	.word	0x40021000
 8004568:	0800a5e4 	.word	0x0800a5e4
 800456c:	200000ec 	.word	0x200000ec
 8004570:	2000014c 	.word	0x2000014c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fba6 	bl	8002cc4 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	; 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e272      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004586:	4baf      	ldr	r3, [pc, #700]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0x2a8>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004594:	f7fe fb96 	bl	8002cc4 <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe fb92 	bl	8002cc4 <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	; 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e25e      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80045ae:	4ba5      	ldr	r3, [pc, #660]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0x2d0>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d060      	beq.n	800468c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d005      	beq.n	80045dc <HAL_RCC_OscConfig+0x310>
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	2b0c      	cmp	r3, #12
 80045d4:	d119      	bne.n	800460a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	2b02      	cmp	r3, #2
 80045da:	d116      	bne.n	800460a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045dc:	4b99      	ldr	r3, [pc, #612]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_OscConfig+0x328>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e23b      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045f4:	4b93      	ldr	r3, [pc, #588]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	061b      	lsls	r3, r3, #24
 8004602:	4990      	ldr	r1, [pc, #576]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004604:	4313      	orrs	r3, r2
 8004606:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004608:	e040      	b.n	800468c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d023      	beq.n	800465a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004612:	4b8c      	ldr	r3, [pc, #560]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a8b      	ldr	r2, [pc, #556]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7fe fb51 	bl	8002cc4 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7fe fb4d 	bl	8002cc4 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e219      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004638:	4b82      	ldr	r3, [pc, #520]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d0f0      	beq.n	8004626 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004644:	4b7f      	ldr	r3, [pc, #508]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	691b      	ldr	r3, [r3, #16]
 8004650:	061b      	lsls	r3, r3, #24
 8004652:	497c      	ldr	r1, [pc, #496]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004654:	4313      	orrs	r3, r2
 8004656:	604b      	str	r3, [r1, #4]
 8004658:	e018      	b.n	800468c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800465a:	4b7a      	ldr	r3, [pc, #488]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a79      	ldr	r2, [pc, #484]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004660:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004664:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe fb2d 	bl	8002cc4 <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800466e:	f7fe fb29 	bl	8002cc4 <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1f5      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004680:	4b70      	ldr	r3, [pc, #448]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f0      	bne.n	800466e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d03c      	beq.n	8004712 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	695b      	ldr	r3, [r3, #20]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01c      	beq.n	80046da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a0:	4b68      	ldr	r3, [pc, #416]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80046a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046a6:	4a67      	ldr	r2, [pc, #412]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80046a8:	f043 0301 	orr.w	r3, r3, #1
 80046ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b0:	f7fe fb08 	bl	8002cc4 <HAL_GetTick>
 80046b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046b6:	e008      	b.n	80046ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046b8:	f7fe fb04 	bl	8002cc4 <HAL_GetTick>
 80046bc:	4602      	mov	r2, r0
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	2b02      	cmp	r3, #2
 80046c4:	d901      	bls.n	80046ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e1d0      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80046ca:	4b5e      	ldr	r3, [pc, #376]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80046cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046d0:	f003 0302 	and.w	r3, r3, #2
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d0ef      	beq.n	80046b8 <HAL_RCC_OscConfig+0x3ec>
 80046d8:	e01b      	b.n	8004712 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046da:	4b5a      	ldr	r3, [pc, #360]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80046dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046e0:	4a58      	ldr	r2, [pc, #352]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80046e2:	f023 0301 	bic.w	r3, r3, #1
 80046e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ea:	f7fe faeb 	bl	8002cc4 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046f2:	f7fe fae7 	bl	8002cc4 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1b3      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004704:	4b4f      	ldr	r3, [pc, #316]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004706:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800470a:	f003 0302 	and.w	r3, r3, #2
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0304 	and.w	r3, r3, #4
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 80a6 	beq.w	800486c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004720:	2300      	movs	r3, #0
 8004722:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004724:	4b47      	ldr	r3, [pc, #284]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10d      	bne.n	800474c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004730:	4b44      	ldr	r3, [pc, #272]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004734:	4a43      	ldr	r2, [pc, #268]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800473a:	6593      	str	r3, [r2, #88]	; 0x58
 800473c:	4b41      	ldr	r3, [pc, #260]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 800473e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004744:	60bb      	str	r3, [r7, #8]
 8004746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004748:	2301      	movs	r3, #1
 800474a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800474c:	4b3e      	ldr	r3, [pc, #248]	; (8004848 <HAL_RCC_OscConfig+0x57c>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004754:	2b00      	cmp	r3, #0
 8004756:	d118      	bne.n	800478a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004758:	4b3b      	ldr	r3, [pc, #236]	; (8004848 <HAL_RCC_OscConfig+0x57c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a3a      	ldr	r2, [pc, #232]	; (8004848 <HAL_RCC_OscConfig+0x57c>)
 800475e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004762:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004764:	f7fe faae 	bl	8002cc4 <HAL_GetTick>
 8004768:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800476a:	e008      	b.n	800477e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476c:	f7fe faaa 	bl	8002cc4 <HAL_GetTick>
 8004770:	4602      	mov	r2, r0
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	2b02      	cmp	r3, #2
 8004778:	d901      	bls.n	800477e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e176      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800477e:	4b32      	ldr	r3, [pc, #200]	; (8004848 <HAL_RCC_OscConfig+0x57c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0f0      	beq.n	800476c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d108      	bne.n	80047a4 <HAL_RCC_OscConfig+0x4d8>
 8004792:	4b2c      	ldr	r3, [pc, #176]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004798:	4a2a      	ldr	r2, [pc, #168]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 800479a:	f043 0301 	orr.w	r3, r3, #1
 800479e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a2:	e024      	b.n	80047ee <HAL_RCC_OscConfig+0x522>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	2b05      	cmp	r3, #5
 80047aa:	d110      	bne.n	80047ce <HAL_RCC_OscConfig+0x502>
 80047ac:	4b25      	ldr	r3, [pc, #148]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b2:	4a24      	ldr	r2, [pc, #144]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047b4:	f043 0304 	orr.w	r3, r3, #4
 80047b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047bc:	4b21      	ldr	r3, [pc, #132]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	4a20      	ldr	r2, [pc, #128]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047cc:	e00f      	b.n	80047ee <HAL_RCC_OscConfig+0x522>
 80047ce:	4b1d      	ldr	r3, [pc, #116]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d4:	4a1b      	ldr	r2, [pc, #108]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047d6:	f023 0301 	bic.w	r3, r3, #1
 80047da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047de:	4b19      	ldr	r3, [pc, #100]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e4:	4a17      	ldr	r2, [pc, #92]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 80047e6:	f023 0304 	bic.w	r3, r3, #4
 80047ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d016      	beq.n	8004824 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047f6:	f7fe fa65 	bl	8002cc4 <HAL_GetTick>
 80047fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fc:	e00a      	b.n	8004814 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fe:	f7fe fa61 	bl	8002cc4 <HAL_GetTick>
 8004802:	4602      	mov	r2, r0
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	1ad3      	subs	r3, r2, r3
 8004808:	f241 3288 	movw	r2, #5000	; 0x1388
 800480c:	4293      	cmp	r3, r2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e12b      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004814:	4b0b      	ldr	r3, [pc, #44]	; (8004844 <HAL_RCC_OscConfig+0x578>)
 8004816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d0ed      	beq.n	80047fe <HAL_RCC_OscConfig+0x532>
 8004822:	e01a      	b.n	800485a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004824:	f7fe fa4e 	bl	8002cc4 <HAL_GetTick>
 8004828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800482a:	e00f      	b.n	800484c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800482c:	f7fe fa4a 	bl	8002cc4 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	f241 3288 	movw	r2, #5000	; 0x1388
 800483a:	4293      	cmp	r3, r2
 800483c:	d906      	bls.n	800484c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	e114      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
 8004842:	bf00      	nop
 8004844:	40021000 	.word	0x40021000
 8004848:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800484c:	4b89      	ldr	r3, [pc, #548]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 800484e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004852:	f003 0302 	and.w	r3, r3, #2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e8      	bne.n	800482c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800485a:	7ffb      	ldrb	r3, [r7, #31]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004860:	4b84      	ldr	r3, [pc, #528]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004864:	4a83      	ldr	r2, [pc, #524]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004866:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800486a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80fa 	beq.w	8004a6a <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487a:	2b02      	cmp	r3, #2
 800487c:	f040 80d0 	bne.w	8004a20 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004880:	4b7c      	ldr	r3, [pc, #496]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f003 0203 	and.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	429a      	cmp	r2, r3
 8004892:	d130      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489e:	3b01      	subs	r3, #1
 80048a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d127      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d11f      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048c0:	2a07      	cmp	r2, #7
 80048c2:	bf14      	ite	ne
 80048c4:	2201      	movne	r2, #1
 80048c6:	2200      	moveq	r2, #0
 80048c8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d113      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	3b01      	subs	r3, #1
 80048dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80048de:	429a      	cmp	r2, r3
 80048e0:	d109      	bne.n	80048f6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ec:	085b      	lsrs	r3, r3, #1
 80048ee:	3b01      	subs	r3, #1
 80048f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048f2:	429a      	cmp	r2, r3
 80048f4:	d06e      	beq.n	80049d4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	2b0c      	cmp	r3, #12
 80048fa:	d069      	beq.n	80049d0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048fc:	4b5d      	ldr	r3, [pc, #372]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d105      	bne.n	8004914 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004908:	4b5a      	ldr	r3, [pc, #360]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d001      	beq.n	8004918 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	e0a9      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004918:	4b56      	ldr	r3, [pc, #344]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a55      	ldr	r2, [pc, #340]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 800491e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004924:	f7fe f9ce 	bl	8002cc4 <HAL_GetTick>
 8004928:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800492a:	e008      	b.n	800493e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800492c:	f7fe f9ca 	bl	8002cc4 <HAL_GetTick>
 8004930:	4602      	mov	r2, r0
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	1ad3      	subs	r3, r2, r3
 8004936:	2b02      	cmp	r3, #2
 8004938:	d901      	bls.n	800493e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e096      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800493e:	4b4d      	ldr	r3, [pc, #308]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1f0      	bne.n	800492c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800494a:	4b4a      	ldr	r3, [pc, #296]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 800494c:	68da      	ldr	r2, [r3, #12]
 800494e:	4b4a      	ldr	r3, [pc, #296]	; (8004a78 <HAL_RCC_OscConfig+0x7ac>)
 8004950:	4013      	ands	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800495a:	3a01      	subs	r2, #1
 800495c:	0112      	lsls	r2, r2, #4
 800495e:	4311      	orrs	r1, r2
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004964:	0212      	lsls	r2, r2, #8
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800496c:	0852      	lsrs	r2, r2, #1
 800496e:	3a01      	subs	r2, #1
 8004970:	0552      	lsls	r2, r2, #21
 8004972:	4311      	orrs	r1, r2
 8004974:	687a      	ldr	r2, [r7, #4]
 8004976:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004978:	0852      	lsrs	r2, r2, #1
 800497a:	3a01      	subs	r2, #1
 800497c:	0652      	lsls	r2, r2, #25
 800497e:	4311      	orrs	r1, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004984:	0912      	lsrs	r2, r2, #4
 8004986:	0452      	lsls	r2, r2, #17
 8004988:	430a      	orrs	r2, r1
 800498a:	493a      	ldr	r1, [pc, #232]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 800498c:	4313      	orrs	r3, r2
 800498e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004990:	4b38      	ldr	r3, [pc, #224]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a37      	ldr	r2, [pc, #220]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800499a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800499c:	4b35      	ldr	r3, [pc, #212]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 800499e:	68db      	ldr	r3, [r3, #12]
 80049a0:	4a34      	ldr	r2, [pc, #208]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80049a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80049a8:	f7fe f98c 	bl	8002cc4 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b0:	f7fe f988 	bl	8002cc4 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e054      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049c2:	4b2c      	ldr	r3, [pc, #176]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d0f0      	beq.n	80049b0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ce:	e04c      	b.n	8004a6a <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e04b      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d4:	4b27      	ldr	r3, [pc, #156]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d144      	bne.n	8004a6a <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049e0:	4b24      	ldr	r3, [pc, #144]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a23      	ldr	r2, [pc, #140]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80049e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ec:	4b21      	ldr	r3, [pc, #132]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 80049f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049f8:	f7fe f964 	bl	8002cc4 <HAL_GetTick>
 80049fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fe:	e008      	b.n	8004a12 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a00:	f7fe f960 	bl	8002cc4 <HAL_GetTick>
 8004a04:	4602      	mov	r2, r0
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1ad3      	subs	r3, r2, r3
 8004a0a:	2b02      	cmp	r3, #2
 8004a0c:	d901      	bls.n	8004a12 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e02c      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a12:	4b18      	ldr	r3, [pc, #96]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d0f0      	beq.n	8004a00 <HAL_RCC_OscConfig+0x734>
 8004a1e:	e024      	b.n	8004a6a <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b0c      	cmp	r3, #12
 8004a24:	d01f      	beq.n	8004a66 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a26:	4b13      	ldr	r3, [pc, #76]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a12      	ldr	r2, [pc, #72]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a32:	f7fe f947 	bl	8002cc4 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fe f943 	bl	8002cc4 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e00f      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a4c:	4b09      	ldr	r3, [pc, #36]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a58:	4b06      	ldr	r3, [pc, #24]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	4905      	ldr	r1, [pc, #20]	; (8004a74 <HAL_RCC_OscConfig+0x7a8>)
 8004a5e:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_RCC_OscConfig+0x7b0>)
 8004a60:	4013      	ands	r3, r2
 8004a62:	60cb      	str	r3, [r1, #12]
 8004a64:	e001      	b.n	8004a6a <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e000      	b.n	8004a6c <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000
 8004a78:	f99d808c 	.word	0xf99d808c
 8004a7c:	feeefffc 	.word	0xfeeefffc

08004a80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e0e7      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a94:	4b75      	ldr	r3, [pc, #468]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f003 0307 	and.w	r3, r3, #7
 8004a9c:	683a      	ldr	r2, [r7, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d910      	bls.n	8004ac4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa2:	4b72      	ldr	r3, [pc, #456]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f023 0207 	bic.w	r2, r3, #7
 8004aaa:	4970      	ldr	r1, [pc, #448]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab2:	4b6e      	ldr	r3, [pc, #440]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0307 	and.w	r3, r3, #7
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d001      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e0cf      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0302 	and.w	r3, r3, #2
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d010      	beq.n	8004af2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	689a      	ldr	r2, [r3, #8]
 8004ad4:	4b66      	ldr	r3, [pc, #408]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d908      	bls.n	8004af2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae0:	4b63      	ldr	r3, [pc, #396]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	4960      	ldr	r1, [pc, #384]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0301 	and.w	r3, r3, #1
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d04c      	beq.n	8004b98 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d107      	bne.n	8004b16 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004b06:	4b5a      	ldr	r3, [pc, #360]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d121      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e0a6      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	685b      	ldr	r3, [r3, #4]
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d107      	bne.n	8004b2e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b1e:	4b54      	ldr	r3, [pc, #336]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d115      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e09a      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d107      	bne.n	8004b46 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b36:	4b4e      	ldr	r3, [pc, #312]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d109      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e08e      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b46:	4b4a      	ldr	r3, [pc, #296]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d101      	bne.n	8004b56 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	e086      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b56:	4b46      	ldr	r3, [pc, #280]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f023 0203 	bic.w	r2, r3, #3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	4943      	ldr	r1, [pc, #268]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b64:	4313      	orrs	r3, r2
 8004b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fe f8ac 	bl	8002cc4 <HAL_GetTick>
 8004b6c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6e:	e00a      	b.n	8004b86 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b70:	f7fe f8a8 	bl	8002cc4 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d901      	bls.n	8004b86 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e06e      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b86:	4b3a      	ldr	r3, [pc, #232]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004b88:	689b      	ldr	r3, [r3, #8]
 8004b8a:	f003 020c 	and.w	r2, r3, #12
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d1eb      	bne.n	8004b70 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 0302 	and.w	r3, r3, #2
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d010      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	4b31      	ldr	r3, [pc, #196]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d208      	bcs.n	8004bc6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bb4:	4b2e      	ldr	r3, [pc, #184]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	492b      	ldr	r1, [pc, #172]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bc6:	4b29      	ldr	r3, [pc, #164]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 0307 	and.w	r3, r3, #7
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d210      	bcs.n	8004bf6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bd4:	4b25      	ldr	r3, [pc, #148]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f023 0207 	bic.w	r2, r3, #7
 8004bdc:	4923      	ldr	r1, [pc, #140]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004be4:	4b21      	ldr	r3, [pc, #132]	; (8004c6c <HAL_RCC_ClockConfig+0x1ec>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e036      	b.n	8004c64 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0304 	and.w	r3, r3, #4
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d008      	beq.n	8004c14 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c02:	4b1b      	ldr	r3, [pc, #108]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	4918      	ldr	r1, [pc, #96]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d009      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c20:	4b13      	ldr	r3, [pc, #76]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4910      	ldr	r1, [pc, #64]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c34:	f000 f824 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	4b0d      	ldr	r3, [pc, #52]	; (8004c70 <HAL_RCC_ClockConfig+0x1f0>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	091b      	lsrs	r3, r3, #4
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	490b      	ldr	r1, [pc, #44]	; (8004c74 <HAL_RCC_ClockConfig+0x1f4>)
 8004c46:	5ccb      	ldrb	r3, [r1, r3]
 8004c48:	f003 031f 	and.w	r3, r3, #31
 8004c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c50:	4a09      	ldr	r2, [pc, #36]	; (8004c78 <HAL_RCC_ClockConfig+0x1f8>)
 8004c52:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c54:	4b09      	ldr	r3, [pc, #36]	; (8004c7c <HAL_RCC_ClockConfig+0x1fc>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fd ffe3 	bl	8002c24 <HAL_InitTick>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c62:	7afb      	ldrb	r3, [r7, #11]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	40022000 	.word	0x40022000
 8004c70:	40021000 	.word	0x40021000
 8004c74:	0800a5e4 	.word	0x0800a5e4
 8004c78:	200000ec 	.word	0x200000ec
 8004c7c:	2000014c 	.word	0x2000014c

08004c80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b089      	sub	sp, #36	; 0x24
 8004c84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c8e:	4b3e      	ldr	r3, [pc, #248]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	f003 030c 	and.w	r3, r3, #12
 8004c96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c98:	4b3b      	ldr	r3, [pc, #236]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9a:	68db      	ldr	r3, [r3, #12]
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x34>
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	2b0c      	cmp	r3, #12
 8004cac:	d121      	bne.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d11e      	bne.n	8004cf2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004cb4:	4b34      	ldr	r3, [pc, #208]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0308 	and.w	r3, r3, #8
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d107      	bne.n	8004cd0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cc0:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	61fb      	str	r3, [r7, #28]
 8004cce:	e005      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cd0:	4b2d      	ldr	r3, [pc, #180]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	091b      	lsrs	r3, r3, #4
 8004cd6:	f003 030f 	and.w	r3, r3, #15
 8004cda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cdc:	4a2b      	ldr	r2, [pc, #172]	; (8004d8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ce4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10d      	bne.n	8004d08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cf0:	e00a      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d102      	bne.n	8004cfe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cf8:	4b25      	ldr	r3, [pc, #148]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cfa:	61bb      	str	r3, [r7, #24]
 8004cfc:	e004      	b.n	8004d08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d101      	bne.n	8004d08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d04:	4b23      	ldr	r3, [pc, #140]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b0c      	cmp	r3, #12
 8004d0c:	d134      	bne.n	8004d78 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d0e:	4b1e      	ldr	r3, [pc, #120]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	f003 0303 	and.w	r3, r3, #3
 8004d16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d003      	beq.n	8004d26 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	2b03      	cmp	r3, #3
 8004d22:	d003      	beq.n	8004d2c <HAL_RCC_GetSysClockFreq+0xac>
 8004d24:	e005      	b.n	8004d32 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d26:	4b1a      	ldr	r3, [pc, #104]	; (8004d90 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d28:	617b      	str	r3, [r7, #20]
      break;
 8004d2a:	e005      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d2c:	4b19      	ldr	r3, [pc, #100]	; (8004d94 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d2e:	617b      	str	r3, [r7, #20]
      break;
 8004d30:	e002      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d32:	69fb      	ldr	r3, [r7, #28]
 8004d34:	617b      	str	r3, [r7, #20]
      break;
 8004d36:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d38:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	091b      	lsrs	r3, r3, #4
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	3301      	adds	r3, #1
 8004d44:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d46:	4b10      	ldr	r3, [pc, #64]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d48:	68db      	ldr	r3, [r3, #12]
 8004d4a:	0a1b      	lsrs	r3, r3, #8
 8004d4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	fb02 f203 	mul.w	r2, r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d5e:	4b0a      	ldr	r3, [pc, #40]	; (8004d88 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	0e5b      	lsrs	r3, r3, #25
 8004d64:	f003 0303 	and.w	r3, r3, #3
 8004d68:	3301      	adds	r3, #1
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d6e:	697a      	ldr	r2, [r7, #20]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d76:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d78:	69bb      	ldr	r3, [r7, #24]
}
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	3724      	adds	r7, #36	; 0x24
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
 8004d86:	bf00      	nop
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	0800a5fc 	.word	0x0800a5fc
 8004d90:	00f42400 	.word	0x00f42400
 8004d94:	007a1200 	.word	0x007a1200

08004d98 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d9c:	4b03      	ldr	r3, [pc, #12]	; (8004dac <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	200000ec 	.word	0x200000ec

08004db0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004db4:	f7ff fff0 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0a1b      	lsrs	r3, r3, #8
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4904      	ldr	r1, [pc, #16]	; (8004dd8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	0800a5f4 	.word	0x0800a5f4

08004ddc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004de0:	f7ff ffda 	bl	8004d98 <HAL_RCC_GetHCLKFreq>
 8004de4:	4602      	mov	r2, r0
 8004de6:	4b06      	ldr	r3, [pc, #24]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	0adb      	lsrs	r3, r3, #11
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	4904      	ldr	r1, [pc, #16]	; (8004e04 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004df2:	5ccb      	ldrb	r3, [r1, r3]
 8004df4:	f003 031f 	and.w	r3, r3, #31
 8004df8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	40021000 	.word	0x40021000
 8004e04:	0800a5f4 	.word	0x0800a5f4

08004e08 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b086      	sub	sp, #24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e10:	2300      	movs	r3, #0
 8004e12:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e14:	4b2a      	ldr	r3, [pc, #168]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d003      	beq.n	8004e28 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e20:	f7ff f9f0 	bl	8004204 <HAL_PWREx_GetVoltageRange>
 8004e24:	6178      	str	r0, [r7, #20]
 8004e26:	e014      	b.n	8004e52 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e28:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2c:	4a24      	ldr	r2, [pc, #144]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	6593      	str	r3, [r2, #88]	; 0x58
 8004e34:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e40:	f7ff f9e0 	bl	8004204 <HAL_PWREx_GetVoltageRange>
 8004e44:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e46:	4b1e      	ldr	r3, [pc, #120]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e50:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e58:	d10b      	bne.n	8004e72 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b80      	cmp	r3, #128	; 0x80
 8004e5e:	d919      	bls.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2ba0      	cmp	r3, #160	; 0xa0
 8004e64:	d902      	bls.n	8004e6c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e66:	2302      	movs	r3, #2
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	e013      	b.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	613b      	str	r3, [r7, #16]
 8004e70:	e010      	b.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2b80      	cmp	r3, #128	; 0x80
 8004e76:	d902      	bls.n	8004e7e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e78:	2303      	movs	r3, #3
 8004e7a:	613b      	str	r3, [r7, #16]
 8004e7c:	e00a      	b.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d102      	bne.n	8004e8a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e84:	2302      	movs	r3, #2
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	e004      	b.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b70      	cmp	r3, #112	; 0x70
 8004e8e:	d101      	bne.n	8004e94 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e90:	2301      	movs	r3, #1
 8004e92:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e94:	4b0b      	ldr	r3, [pc, #44]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f023 0207 	bic.w	r2, r3, #7
 8004e9c:	4909      	ldr	r1, [pc, #36]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ea4:	4b07      	ldr	r3, [pc, #28]	; (8004ec4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0307 	and.w	r3, r3, #7
 8004eac:	693a      	ldr	r2, [r7, #16]
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d001      	beq.n	8004eb6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40022000 	.word	0x40022000

08004ec8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b086      	sub	sp, #24
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d041      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ee8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eec:	d02a      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004eee:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ef2:	d824      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ef4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ef8:	d008      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004efa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004efe:	d81e      	bhi.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d00a      	beq.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f08:	d010      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004f0a:	e018      	b.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f0c:	4b86      	ldr	r3, [pc, #536]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a85      	ldr	r2, [pc, #532]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f16:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f18:	e015      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	2100      	movs	r1, #0
 8004f20:	4618      	mov	r0, r3
 8004f22:	f000 fabb 	bl	800549c <RCCEx_PLLSAI1_Config>
 8004f26:	4603      	mov	r3, r0
 8004f28:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f2a:	e00c      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3320      	adds	r3, #32
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fba6 	bl	8005684 <RCCEx_PLLSAI2_Config>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f3c:	e003      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	74fb      	strb	r3, [r7, #19]
      break;
 8004f42:	e000      	b.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f4c:	4b76      	ldr	r3, [pc, #472]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f5a:	4973      	ldr	r1, [pc, #460]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f62:	e001      	b.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f64:	7cfb      	ldrb	r3, [r7, #19]
 8004f66:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d041      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f78:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f7c:	d02a      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f7e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f82:	d824      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f88:	d008      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f8e:	d81e      	bhi.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f98:	d010      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f9a:	e018      	b.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f9c:	4b62      	ldr	r3, [pc, #392]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	4a61      	ldr	r2, [pc, #388]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fa8:	e015      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	3304      	adds	r3, #4
 8004fae:	2100      	movs	r1, #0
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f000 fa73 	bl	800549c <RCCEx_PLLSAI1_Config>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fba:	e00c      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	3320      	adds	r3, #32
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	f000 fb5e 	bl	8005684 <RCCEx_PLLSAI2_Config>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004fcc:	e003      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	74fb      	strb	r3, [r7, #19]
      break;
 8004fd2:	e000      	b.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004fd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004fd6:	7cfb      	ldrb	r3, [r7, #19]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d10b      	bne.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004fdc:	4b52      	ldr	r3, [pc, #328]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fea:	494f      	ldr	r1, [pc, #316]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ff2:	e001      	b.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ff4:	7cfb      	ldrb	r3, [r7, #19]
 8004ff6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005000:	2b00      	cmp	r3, #0
 8005002:	f000 80a0 	beq.w	8005146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005006:	2300      	movs	r3, #0
 8005008:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800500a:	4b47      	ldr	r3, [pc, #284]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800500e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d101      	bne.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005016:	2301      	movs	r3, #1
 8005018:	e000      	b.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800501a:	2300      	movs	r3, #0
 800501c:	2b00      	cmp	r3, #0
 800501e:	d00d      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005020:	4b41      	ldr	r3, [pc, #260]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	4a40      	ldr	r2, [pc, #256]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800502a:	6593      	str	r3, [r2, #88]	; 0x58
 800502c:	4b3e      	ldr	r3, [pc, #248]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005038:	2301      	movs	r3, #1
 800503a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800503c:	4b3b      	ldr	r3, [pc, #236]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a3a      	ldr	r2, [pc, #232]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005046:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005048:	f7fd fe3c 	bl	8002cc4 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800504e:	e009      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005050:	f7fd fe38 	bl	8002cc4 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	2b02      	cmp	r3, #2
 800505c:	d902      	bls.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800505e:	2303      	movs	r3, #3
 8005060:	74fb      	strb	r3, [r7, #19]
        break;
 8005062:	e005      	b.n	8005070 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005064:	4b31      	ldr	r3, [pc, #196]	; (800512c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800506c:	2b00      	cmp	r3, #0
 800506e:	d0ef      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d15c      	bne.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005076:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005080:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d01f      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508e:	697a      	ldr	r2, [r7, #20]
 8005090:	429a      	cmp	r2, r3
 8005092:	d019      	beq.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005094:	4b24      	ldr	r3, [pc, #144]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80050a0:	4b21      	ldr	r3, [pc, #132]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a6:	4a20      	ldr	r2, [pc, #128]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80050b0:	4b1d      	ldr	r3, [pc, #116]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b6:	4a1c      	ldr	r2, [pc, #112]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80050c0:	4a19      	ldr	r2, [pc, #100]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d016      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fd fdf7 	bl	8002cc4 <HAL_GetTick>
 80050d6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d8:	e00b      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050da:	f7fd fdf3 	bl	8002cc4 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d902      	bls.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	74fb      	strb	r3, [r7, #19]
            break;
 80050f0:	e006      	b.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050f2:	4b0d      	ldr	r3, [pc, #52]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ec      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005100:	7cfb      	ldrb	r3, [r7, #19]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10c      	bne.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005106:	4b08      	ldr	r3, [pc, #32]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800510c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005116:	4904      	ldr	r1, [pc, #16]	; (8005128 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005118:	4313      	orrs	r3, r2
 800511a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800511e:	e009      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005120:	7cfb      	ldrb	r3, [r7, #19]
 8005122:	74bb      	strb	r3, [r7, #18]
 8005124:	e006      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005126:	bf00      	nop
 8005128:	40021000 	.word	0x40021000
 800512c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005130:	7cfb      	ldrb	r3, [r7, #19]
 8005132:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005134:	7c7b      	ldrb	r3, [r7, #17]
 8005136:	2b01      	cmp	r3, #1
 8005138:	d105      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800513a:	4b9e      	ldr	r3, [pc, #632]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	4a9d      	ldr	r2, [pc, #628]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005144:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0301 	and.w	r3, r3, #1
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005152:	4b98      	ldr	r3, [pc, #608]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f023 0203 	bic.w	r2, r3, #3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005160:	4994      	ldr	r1, [pc, #592]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0302 	and.w	r3, r3, #2
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005174:	4b8f      	ldr	r3, [pc, #572]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f023 020c 	bic.w	r2, r3, #12
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005182:	498c      	ldr	r1, [pc, #560]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005196:	4b87      	ldr	r3, [pc, #540]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a4:	4983      	ldr	r1, [pc, #524]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80051b8:	4b7e      	ldr	r3, [pc, #504]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051c6:	497b      	ldr	r1, [pc, #492]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80051da:	4b76      	ldr	r3, [pc, #472]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051e8:	4972      	ldr	r1, [pc, #456]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 0320 	and.w	r3, r3, #32
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051fc:	4b6d      	ldr	r3, [pc, #436]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800520a:	496a      	ldr	r1, [pc, #424]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800521e:	4b65      	ldr	r3, [pc, #404]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800522c:	4961      	ldr	r1, [pc, #388]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005240:	4b5c      	ldr	r3, [pc, #368]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524e:	4959      	ldr	r1, [pc, #356]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005262:	4b54      	ldr	r3, [pc, #336]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005270:	4950      	ldr	r1, [pc, #320]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005284:	4b4b      	ldr	r3, [pc, #300]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005292:	4948      	ldr	r1, [pc, #288]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80052a6:	4b43      	ldr	r3, [pc, #268]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052b4:	493f      	ldr	r1, [pc, #252]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d028      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80052c8:	4b3a      	ldr	r3, [pc, #232]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052ce:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d6:	4937      	ldr	r1, [pc, #220]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052e6:	d106      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e8:	4b32      	ldr	r3, [pc, #200]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a31      	ldr	r2, [pc, #196]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052f2:	60d3      	str	r3, [r2, #12]
 80052f4:	e011      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052fe:	d10c      	bne.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	2101      	movs	r1, #1
 8005306:	4618      	mov	r0, r3
 8005308:	f000 f8c8 	bl	800549c <RCCEx_PLLSAI1_Config>
 800530c:	4603      	mov	r3, r0
 800530e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d001      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005316:	7cfb      	ldrb	r3, [r7, #19]
 8005318:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d028      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005326:	4b23      	ldr	r3, [pc, #140]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800532c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005334:	491f      	ldr	r1, [pc, #124]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005344:	d106      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005346:	4b1b      	ldr	r3, [pc, #108]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	4a1a      	ldr	r2, [pc, #104]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800534c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005350:	60d3      	str	r3, [r2, #12]
 8005352:	e011      	b.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800535c:	d10c      	bne.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	3304      	adds	r3, #4
 8005362:	2101      	movs	r1, #1
 8005364:	4618      	mov	r0, r3
 8005366:	f000 f899 	bl	800549c <RCCEx_PLLSAI1_Config>
 800536a:	4603      	mov	r3, r0
 800536c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800536e:	7cfb      	ldrb	r3, [r7, #19]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d001      	beq.n	8005378 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005374:	7cfb      	ldrb	r3, [r7, #19]
 8005376:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005380:	2b00      	cmp	r3, #0
 8005382:	d02b      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005384:	4b0b      	ldr	r3, [pc, #44]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005392:	4908      	ldr	r1, [pc, #32]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005394:	4313      	orrs	r3, r2
 8005396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800539e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a2:	d109      	bne.n	80053b8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053a4:	4b03      	ldr	r3, [pc, #12]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053a6:	68db      	ldr	r3, [r3, #12]
 80053a8:	4a02      	ldr	r2, [pc, #8]	; (80053b4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80053aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ae:	60d3      	str	r3, [r2, #12]
 80053b0:	e014      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x514>
 80053b2:	bf00      	nop
 80053b4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c0:	d10c      	bne.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	3304      	adds	r3, #4
 80053c6:	2101      	movs	r1, #1
 80053c8:	4618      	mov	r0, r3
 80053ca:	f000 f867 	bl	800549c <RCCEx_PLLSAI1_Config>
 80053ce:	4603      	mov	r3, r0
 80053d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d2:	7cfb      	ldrb	r3, [r7, #19]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d02f      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053e8:	4b2b      	ldr	r3, [pc, #172]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053f6:	4928      	ldr	r1, [pc, #160]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005402:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005406:	d10d      	bne.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3304      	adds	r3, #4
 800540c:	2102      	movs	r1, #2
 800540e:	4618      	mov	r0, r3
 8005410:	f000 f844 	bl	800549c <RCCEx_PLLSAI1_Config>
 8005414:	4603      	mov	r3, r0
 8005416:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005418:	7cfb      	ldrb	r3, [r7, #19]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d014      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800541e:	7cfb      	ldrb	r3, [r7, #19]
 8005420:	74bb      	strb	r3, [r7, #18]
 8005422:	e011      	b.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005428:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800542c:	d10c      	bne.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	3320      	adds	r3, #32
 8005432:	2102      	movs	r1, #2
 8005434:	4618      	mov	r0, r3
 8005436:	f000 f925 	bl	8005684 <RCCEx_PLLSAI2_Config>
 800543a:	4603      	mov	r3, r0
 800543c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800543e:	7cfb      	ldrb	r3, [r7, #19]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d001      	beq.n	8005448 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005444:	7cfb      	ldrb	r3, [r7, #19]
 8005446:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d00a      	beq.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005454:	4b10      	ldr	r3, [pc, #64]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800545a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005462:	490d      	ldr	r1, [pc, #52]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005464:	4313      	orrs	r3, r2
 8005466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00b      	beq.n	800548e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005476:	4b08      	ldr	r3, [pc, #32]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800547c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005486:	4904      	ldr	r1, [pc, #16]	; (8005498 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005488:	4313      	orrs	r3, r2
 800548a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800548e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000

0800549c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054aa:	4b75      	ldr	r3, [pc, #468]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d018      	beq.n	80054e8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054b6:	4b72      	ldr	r3, [pc, #456]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	f003 0203 	and.w	r2, r3, #3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d10d      	bne.n	80054e2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d009      	beq.n	80054e2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80054ce:	4b6c      	ldr	r3, [pc, #432]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	091b      	lsrs	r3, r3, #4
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	1c5a      	adds	r2, r3, #1
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
       ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d047      	beq.n	8005572 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054e2:	2301      	movs	r3, #1
 80054e4:	73fb      	strb	r3, [r7, #15]
 80054e6:	e044      	b.n	8005572 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d018      	beq.n	8005522 <RCCEx_PLLSAI1_Config+0x86>
 80054f0:	2b03      	cmp	r3, #3
 80054f2:	d825      	bhi.n	8005540 <RCCEx_PLLSAI1_Config+0xa4>
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d002      	beq.n	80054fe <RCCEx_PLLSAI1_Config+0x62>
 80054f8:	2b02      	cmp	r3, #2
 80054fa:	d009      	beq.n	8005510 <RCCEx_PLLSAI1_Config+0x74>
 80054fc:	e020      	b.n	8005540 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054fe:	4b60      	ldr	r3, [pc, #384]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11d      	bne.n	8005546 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800550e:	e01a      	b.n	8005546 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005510:	4b5b      	ldr	r3, [pc, #364]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005518:	2b00      	cmp	r3, #0
 800551a:	d116      	bne.n	800554a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005520:	e013      	b.n	800554a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005522:	4b57      	ldr	r3, [pc, #348]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10f      	bne.n	800554e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800552e:	4b54      	ldr	r3, [pc, #336]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d109      	bne.n	800554e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800553a:	2301      	movs	r3, #1
 800553c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800553e:	e006      	b.n	800554e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	73fb      	strb	r3, [r7, #15]
      break;
 8005544:	e004      	b.n	8005550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005546:	bf00      	nop
 8005548:	e002      	b.n	8005550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800554a:	bf00      	nop
 800554c:	e000      	b.n	8005550 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800554e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005556:	4b4a      	ldr	r3, [pc, #296]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6819      	ldr	r1, [r3, #0]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	3b01      	subs	r3, #1
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	430b      	orrs	r3, r1
 800556c:	4944      	ldr	r1, [pc, #272]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556e:	4313      	orrs	r3, r2
 8005570:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005572:	7bfb      	ldrb	r3, [r7, #15]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d17d      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005578:	4b41      	ldr	r3, [pc, #260]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a40      	ldr	r2, [pc, #256]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005582:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005584:	f7fd fb9e 	bl	8002cc4 <HAL_GetTick>
 8005588:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800558a:	e009      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800558c:	f7fd fb9a 	bl	8002cc4 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b02      	cmp	r3, #2
 8005598:	d902      	bls.n	80055a0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800559a:	2303      	movs	r3, #3
 800559c:	73fb      	strb	r3, [r7, #15]
        break;
 800559e:	e005      	b.n	80055ac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055a0:	4b37      	ldr	r3, [pc, #220]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1ef      	bne.n	800558c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d160      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d111      	bne.n	80055dc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055b8:	4b31      	ldr	r3, [pc, #196]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80055c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6892      	ldr	r2, [r2, #8]
 80055c8:	0211      	lsls	r1, r2, #8
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	0912      	lsrs	r2, r2, #4
 80055d0:	0452      	lsls	r2, r2, #17
 80055d2:	430a      	orrs	r2, r1
 80055d4:	492a      	ldr	r1, [pc, #168]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	610b      	str	r3, [r1, #16]
 80055da:	e027      	b.n	800562c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d112      	bne.n	8005608 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055e2:	4b27      	ldr	r3, [pc, #156]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	691b      	ldr	r3, [r3, #16]
 80055e6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	6892      	ldr	r2, [r2, #8]
 80055f2:	0211      	lsls	r1, r2, #8
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	6912      	ldr	r2, [r2, #16]
 80055f8:	0852      	lsrs	r2, r2, #1
 80055fa:	3a01      	subs	r2, #1
 80055fc:	0552      	lsls	r2, r2, #21
 80055fe:	430a      	orrs	r2, r1
 8005600:	491f      	ldr	r1, [pc, #124]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005602:	4313      	orrs	r3, r2
 8005604:	610b      	str	r3, [r1, #16]
 8005606:	e011      	b.n	800562c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800560a:	691b      	ldr	r3, [r3, #16]
 800560c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005610:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	6892      	ldr	r2, [r2, #8]
 8005618:	0211      	lsls	r1, r2, #8
 800561a:	687a      	ldr	r2, [r7, #4]
 800561c:	6952      	ldr	r2, [r2, #20]
 800561e:	0852      	lsrs	r2, r2, #1
 8005620:	3a01      	subs	r2, #1
 8005622:	0652      	lsls	r2, r2, #25
 8005624:	430a      	orrs	r2, r1
 8005626:	4916      	ldr	r1, [pc, #88]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005628:	4313      	orrs	r3, r2
 800562a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800562c:	4b14      	ldr	r3, [pc, #80]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a13      	ldr	r2, [pc, #76]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005632:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005636:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005638:	f7fd fb44 	bl	8002cc4 <HAL_GetTick>
 800563c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800563e:	e009      	b.n	8005654 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005640:	f7fd fb40 	bl	8002cc4 <HAL_GetTick>
 8005644:	4602      	mov	r2, r0
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	1ad3      	subs	r3, r2, r3
 800564a:	2b02      	cmp	r3, #2
 800564c:	d902      	bls.n	8005654 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	73fb      	strb	r3, [r7, #15]
          break;
 8005652:	e005      	b.n	8005660 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005654:	4b0a      	ldr	r3, [pc, #40]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d0ef      	beq.n	8005640 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d106      	bne.n	8005674 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005666:	4b06      	ldr	r3, [pc, #24]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005668:	691a      	ldr	r2, [r3, #16]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	4904      	ldr	r1, [pc, #16]	; (8005680 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005670:	4313      	orrs	r3, r2
 8005672:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005674:	7bfb      	ldrb	r3, [r7, #15]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000

08005684 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2300      	movs	r3, #0
 8005690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005692:	4b6a      	ldr	r3, [pc, #424]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f003 0303 	and.w	r3, r3, #3
 800569a:	2b00      	cmp	r3, #0
 800569c:	d018      	beq.n	80056d0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800569e:	4b67      	ldr	r3, [pc, #412]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f003 0203 	and.w	r2, r3, #3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	429a      	cmp	r2, r3
 80056ac:	d10d      	bne.n	80056ca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
       ||
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d009      	beq.n	80056ca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80056b6:	4b61      	ldr	r3, [pc, #388]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	091b      	lsrs	r3, r3, #4
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
       ||
 80056c6:	429a      	cmp	r2, r3
 80056c8:	d047      	beq.n	800575a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	73fb      	strb	r3, [r7, #15]
 80056ce:	e044      	b.n	800575a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d018      	beq.n	800570a <RCCEx_PLLSAI2_Config+0x86>
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d825      	bhi.n	8005728 <RCCEx_PLLSAI2_Config+0xa4>
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d002      	beq.n	80056e6 <RCCEx_PLLSAI2_Config+0x62>
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d009      	beq.n	80056f8 <RCCEx_PLLSAI2_Config+0x74>
 80056e4:	e020      	b.n	8005728 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056e6:	4b55      	ldr	r3, [pc, #340]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0302 	and.w	r3, r3, #2
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d11d      	bne.n	800572e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056f6:	e01a      	b.n	800572e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056f8:	4b50      	ldr	r3, [pc, #320]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005700:	2b00      	cmp	r3, #0
 8005702:	d116      	bne.n	8005732 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005708:	e013      	b.n	8005732 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800570a:	4b4c      	ldr	r3, [pc, #304]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10f      	bne.n	8005736 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005716:	4b49      	ldr	r3, [pc, #292]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005726:	e006      	b.n	8005736 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	73fb      	strb	r3, [r7, #15]
      break;
 800572c:	e004      	b.n	8005738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800572e:	bf00      	nop
 8005730:	e002      	b.n	8005738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005732:	bf00      	nop
 8005734:	e000      	b.n	8005738 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005736:	bf00      	nop
    }

    if(status == HAL_OK)
 8005738:	7bfb      	ldrb	r3, [r7, #15]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10d      	bne.n	800575a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800573e:	4b3f      	ldr	r3, [pc, #252]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6819      	ldr	r1, [r3, #0]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	3b01      	subs	r3, #1
 8005750:	011b      	lsls	r3, r3, #4
 8005752:	430b      	orrs	r3, r1
 8005754:	4939      	ldr	r1, [pc, #228]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005756:	4313      	orrs	r3, r2
 8005758:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800575a:	7bfb      	ldrb	r3, [r7, #15]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d167      	bne.n	8005830 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005760:	4b36      	ldr	r3, [pc, #216]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a35      	ldr	r2, [pc, #212]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800576c:	f7fd faaa 	bl	8002cc4 <HAL_GetTick>
 8005770:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005772:	e009      	b.n	8005788 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005774:	f7fd faa6 	bl	8002cc4 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d902      	bls.n	8005788 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	73fb      	strb	r3, [r7, #15]
        break;
 8005786:	e005      	b.n	8005794 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005788:	4b2c      	ldr	r3, [pc, #176]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1ef      	bne.n	8005774 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d14a      	bne.n	8005830 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d111      	bne.n	80057c4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a0:	4b26      	ldr	r3, [pc, #152]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a2:	695b      	ldr	r3, [r3, #20]
 80057a4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80057a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6892      	ldr	r2, [r2, #8]
 80057b0:	0211      	lsls	r1, r2, #8
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68d2      	ldr	r2, [r2, #12]
 80057b6:	0912      	lsrs	r2, r2, #4
 80057b8:	0452      	lsls	r2, r2, #17
 80057ba:	430a      	orrs	r2, r1
 80057bc:	491f      	ldr	r1, [pc, #124]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057be:	4313      	orrs	r3, r2
 80057c0:	614b      	str	r3, [r1, #20]
 80057c2:	e011      	b.n	80057e8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057c4:	4b1d      	ldr	r3, [pc, #116]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057c6:	695b      	ldr	r3, [r3, #20]
 80057c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80057cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80057d0:	687a      	ldr	r2, [r7, #4]
 80057d2:	6892      	ldr	r2, [r2, #8]
 80057d4:	0211      	lsls	r1, r2, #8
 80057d6:	687a      	ldr	r2, [r7, #4]
 80057d8:	6912      	ldr	r2, [r2, #16]
 80057da:	0852      	lsrs	r2, r2, #1
 80057dc:	3a01      	subs	r2, #1
 80057de:	0652      	lsls	r2, r2, #25
 80057e0:	430a      	orrs	r2, r1
 80057e2:	4916      	ldr	r1, [pc, #88]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057e8:	4b14      	ldr	r3, [pc, #80]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a13      	ldr	r2, [pc, #76]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f4:	f7fd fa66 	bl	8002cc4 <HAL_GetTick>
 80057f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057fa:	e009      	b.n	8005810 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057fc:	f7fd fa62 	bl	8002cc4 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d902      	bls.n	8005810 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	73fb      	strb	r3, [r7, #15]
          break;
 800580e:	e005      	b.n	800581c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005810:	4b0a      	ldr	r3, [pc, #40]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0ef      	beq.n	80057fc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800581c:	7bfb      	ldrb	r3, [r7, #15]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005822:	4b06      	ldr	r3, [pc, #24]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005824:	695a      	ldr	r2, [r3, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	695b      	ldr	r3, [r3, #20]
 800582a:	4904      	ldr	r1, [pc, #16]	; (800583c <RCCEx_PLLSAI2_Config+0x1b8>)
 800582c:	4313      	orrs	r3, r2
 800582e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	40021000 	.word	0x40021000

08005840 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b082      	sub	sp, #8
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d101      	bne.n	8005852 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	e049      	b.n	80058e6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f7fc f9b4 	bl	8001bd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	3304      	adds	r3, #4
 800587c:	4619      	mov	r1, r3
 800587e:	4610      	mov	r0, r2
 8005880:	f000 f9ee 	bl	8005c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3708      	adds	r7, #8
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
	...

080058f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b085      	sub	sp, #20
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b01      	cmp	r3, #1
 8005902:	d001      	beq.n	8005908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005904:	2301      	movs	r3, #1
 8005906:	e04f      	b.n	80059a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2202      	movs	r2, #2
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f042 0201 	orr.w	r2, r2, #1
 800591e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a23      	ldr	r2, [pc, #140]	; (80059b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d01d      	beq.n	8005966 <HAL_TIM_Base_Start_IT+0x76>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005932:	d018      	beq.n	8005966 <HAL_TIM_Base_Start_IT+0x76>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a1f      	ldr	r2, [pc, #124]	; (80059b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d013      	beq.n	8005966 <HAL_TIM_Base_Start_IT+0x76>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a1e      	ldr	r2, [pc, #120]	; (80059bc <HAL_TIM_Base_Start_IT+0xcc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d00e      	beq.n	8005966 <HAL_TIM_Base_Start_IT+0x76>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d009      	beq.n	8005966 <HAL_TIM_Base_Start_IT+0x76>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a1b      	ldr	r2, [pc, #108]	; (80059c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d004      	beq.n	8005966 <HAL_TIM_Base_Start_IT+0x76>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a19      	ldr	r2, [pc, #100]	; (80059c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d115      	bne.n	8005992 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	4b17      	ldr	r3, [pc, #92]	; (80059cc <HAL_TIM_Base_Start_IT+0xdc>)
 800596e:	4013      	ands	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2b06      	cmp	r3, #6
 8005976:	d015      	beq.n	80059a4 <HAL_TIM_Base_Start_IT+0xb4>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800597e:	d011      	beq.n	80059a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005990:	e008      	b.n	80059a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f042 0201 	orr.w	r2, r2, #1
 80059a0:	601a      	str	r2, [r3, #0]
 80059a2:	e000      	b.n	80059a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr
 80059b4:	40012c00 	.word	0x40012c00
 80059b8:	40000400 	.word	0x40000400
 80059bc:	40000800 	.word	0x40000800
 80059c0:	40000c00 	.word	0x40000c00
 80059c4:	40013400 	.word	0x40013400
 80059c8:	40014000 	.word	0x40014000
 80059cc:	00010007 	.word	0x00010007

080059d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	691b      	ldr	r3, [r3, #16]
 80059de:	f003 0302 	and.w	r3, r3, #2
 80059e2:	2b02      	cmp	r3, #2
 80059e4:	d122      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d11b      	bne.n	8005a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f06f 0202 	mvn.w	r2, #2
 80059fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	f003 0303 	and.w	r3, r3, #3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d003      	beq.n	8005a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 f905 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 8005a18:	e005      	b.n	8005a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f8f7 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 f908 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	f003 0304 	and.w	r3, r3, #4
 8005a36:	2b04      	cmp	r3, #4
 8005a38:	d122      	bne.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b04      	cmp	r3, #4
 8005a46:	d11b      	bne.n	8005a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f06f 0204 	mvn.w	r2, #4
 8005a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d003      	beq.n	8005a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f8db 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 8005a6c:	e005      	b.n	8005a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f8cd 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f000 f8de 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	f003 0308 	and.w	r3, r3, #8
 8005a8a:	2b08      	cmp	r3, #8
 8005a8c:	d122      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f003 0308 	and.w	r3, r3, #8
 8005a98:	2b08      	cmp	r3, #8
 8005a9a:	d11b      	bne.n	8005ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0208 	mvn.w	r2, #8
 8005aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2204      	movs	r2, #4
 8005aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	f003 0303 	and.w	r3, r3, #3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f8b1 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 8005ac0:	e005      	b.n	8005ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f8a3 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f000 f8b4 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b10      	cmp	r3, #16
 8005ae0:	d122      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68db      	ldr	r3, [r3, #12]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	2b10      	cmp	r3, #16
 8005aee:	d11b      	bne.n	8005b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f06f 0210 	mvn.w	r2, #16
 8005af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2208      	movs	r2, #8
 8005afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d003      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f887 	bl	8005c22 <HAL_TIM_IC_CaptureCallback>
 8005b14:	e005      	b.n	8005b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f879 	bl	8005c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f88a 	bl	8005c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0301 	and.w	r3, r3, #1
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d10e      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d107      	bne.n	8005b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0201 	mvn.w	r2, #1
 8005b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7fb ff7e 	bl	8001a50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5e:	2b80      	cmp	r3, #128	; 0x80
 8005b60:	d10e      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6c:	2b80      	cmp	r3, #128	; 0x80
 8005b6e:	d107      	bne.n	8005b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f000 f914 	bl	8005da8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b8e:	d10e      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	68db      	ldr	r3, [r3, #12]
 8005b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d107      	bne.n	8005bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f000 f907 	bl	8005dbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	691b      	ldr	r3, [r3, #16]
 8005bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb8:	2b40      	cmp	r3, #64	; 0x40
 8005bba:	d10e      	bne.n	8005bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f838 	bl	8005c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	f003 0320 	and.w	r3, r3, #32
 8005be4:	2b20      	cmp	r3, #32
 8005be6:	d10e      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0320 	and.w	r3, r3, #32
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d107      	bne.n	8005c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f06f 0220 	mvn.w	r2, #32
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f8c7 	bl	8005d94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c06:	bf00      	nop
 8005c08:	3708      	adds	r7, #8
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c0e:	b480      	push	{r7}
 8005c10:	b083      	sub	sp, #12
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c16:	bf00      	nop
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c2a:	bf00      	nop
 8005c2c:	370c      	adds	r7, #12
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005c3e:	bf00      	nop
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005c52:	bf00      	nop
 8005c54:	370c      	adds	r7, #12
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
	...

08005c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a40      	ldr	r2, [pc, #256]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a3d      	ldr	r2, [pc, #244]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a3c      	ldr	r2, [pc, #240]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a3b      	ldr	r2, [pc, #236]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_Base_SetConfig+0x40>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a3a      	ldr	r2, [pc, #232]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d108      	bne.n	8005cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	4a2f      	ldr	r2, [pc, #188]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d01f      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cc0:	d01b      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a2c      	ldr	r2, [pc, #176]	; (8005d78 <TIM_Base_SetConfig+0x118>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d017      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a2b      	ldr	r2, [pc, #172]	; (8005d7c <TIM_Base_SetConfig+0x11c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a2a      	ldr	r2, [pc, #168]	; (8005d80 <TIM_Base_SetConfig+0x120>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a29      	ldr	r2, [pc, #164]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a28      	ldr	r2, [pc, #160]	; (8005d88 <TIM_Base_SetConfig+0x128>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a27      	ldr	r2, [pc, #156]	; (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_Base_SetConfig+0x9a>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a26      	ldr	r2, [pc, #152]	; (8005d90 <TIM_Base_SetConfig+0x130>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d108      	bne.n	8005d0c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	68db      	ldr	r3, [r3, #12]
 8005d06:	68fa      	ldr	r2, [r7, #12]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	4313      	orrs	r3, r2
 8005d18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68fa      	ldr	r2, [r7, #12]
 8005d1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	689a      	ldr	r2, [r3, #8]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a10      	ldr	r2, [pc, #64]	; (8005d74 <TIM_Base_SetConfig+0x114>)
 8005d34:	4293      	cmp	r3, r2
 8005d36:	d00f      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	4a12      	ldr	r2, [pc, #72]	; (8005d84 <TIM_Base_SetConfig+0x124>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00b      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4a11      	ldr	r2, [pc, #68]	; (8005d88 <TIM_Base_SetConfig+0x128>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d007      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	4a10      	ldr	r2, [pc, #64]	; (8005d8c <TIM_Base_SetConfig+0x12c>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d003      	beq.n	8005d58 <TIM_Base_SetConfig+0xf8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	4a0f      	ldr	r2, [pc, #60]	; (8005d90 <TIM_Base_SetConfig+0x130>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d103      	bne.n	8005d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	691a      	ldr	r2, [r3, #16]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	615a      	str	r2, [r3, #20]
}
 8005d66:	bf00      	nop
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	40012c00 	.word	0x40012c00
 8005d78:	40000400 	.word	0x40000400
 8005d7c:	40000800 	.word	0x40000800
 8005d80:	40000c00 	.word	0x40000c00
 8005d84:	40013400 	.word	0x40013400
 8005d88:	40014000 	.word	0x40014000
 8005d8c:	40014400 	.word	0x40014400
 8005d90:	40014800 	.word	0x40014800

08005d94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b083      	sub	sp, #12
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d9c:	bf00      	nop
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr

08005da8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dc4:	bf00      	nop
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b082      	sub	sp, #8
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d101      	bne.n	8005de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	e040      	b.n	8005e64 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f7fb ff14 	bl	8001c20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2224      	movs	r2, #36	; 0x24
 8005dfc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0201 	bic.w	r2, r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fc86 	bl	8006720 <UART_SetConfig>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d101      	bne.n	8005e1e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e022      	b.n	8005e64 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d002      	beq.n	8005e2c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	f000 ff04 	bl	8006c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	681a      	ldr	r2, [r3, #0]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f042 0201 	orr.w	r2, r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 ff8b 	bl	8006d78 <UART_CheckIdleState>
 8005e62:	4603      	mov	r3, r0
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08a      	sub	sp, #40	; 0x28
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e80:	2b20      	cmp	r3, #32
 8005e82:	f040 8082 	bne.w	8005f8a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d002      	beq.n	8005e92 <HAL_UART_Transmit+0x26>
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d101      	bne.n	8005e96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e07a      	b.n	8005f8c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Transmit+0x38>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e073      	b.n	8005f8c <HAL_UART_Transmit+0x120>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2221      	movs	r2, #33	; 0x21
 8005eb8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005eba:	f7fc ff03 	bl	8002cc4 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	88fa      	ldrh	r2, [r7, #6]
 8005ec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	88fa      	ldrh	r2, [r7, #6]
 8005ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed8:	d108      	bne.n	8005eec <HAL_UART_Transmit+0x80>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	691b      	ldr	r3, [r3, #16]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d104      	bne.n	8005eec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	61bb      	str	r3, [r7, #24]
 8005eea:	e003      	b.n	8005ef4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005efc:	e02d      	b.n	8005f5a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	9300      	str	r3, [sp, #0]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	2200      	movs	r2, #0
 8005f06:	2180      	movs	r1, #128	; 0x80
 8005f08:	68f8      	ldr	r0, [r7, #12]
 8005f0a:	f000 ff7e 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d001      	beq.n	8005f18 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e039      	b.n	8005f8c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	881a      	ldrh	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f2a:	b292      	uxth	r2, r2
 8005f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005f2e:	69bb      	ldr	r3, [r7, #24]
 8005f30:	3302      	adds	r3, #2
 8005f32:	61bb      	str	r3, [r7, #24]
 8005f34:	e008      	b.n	8005f48 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	b292      	uxth	r2, r2
 8005f40:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	3301      	adds	r3, #1
 8005f46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f4e:	b29b      	uxth	r3, r3
 8005f50:	3b01      	subs	r3, #1
 8005f52:	b29a      	uxth	r2, r3
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1cb      	bne.n	8005efe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	9300      	str	r3, [sp, #0]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2140      	movs	r1, #64	; 0x40
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f000 ff4a 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8005f76:	4603      	mov	r3, r0
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d001      	beq.n	8005f80 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005f7c:	2303      	movs	r3, #3
 8005f7e:	e005      	b.n	8005f8c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2220      	movs	r2, #32
 8005f84:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005f86:	2300      	movs	r3, #0
 8005f88:	e000      	b.n	8005f8c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005f8a:	2302      	movs	r3, #2
  }
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3720      	adds	r7, #32
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b08b      	sub	sp, #44	; 0x2c
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	4613      	mov	r3, r2
 8005fa0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d156      	bne.n	8006058 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d002      	beq.n	8005fb6 <HAL_UART_Transmit_IT+0x22>
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e04f      	b.n	800605a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d101      	bne.n	8005fc8 <HAL_UART_Transmit_IT+0x34>
 8005fc4:	2302      	movs	r3, #2
 8005fc6:	e048      	b.n	800605a <HAL_UART_Transmit_IT+0xc6>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	88fa      	ldrh	r2, [r7, #6]
 8005fda:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	88fa      	ldrh	r2, [r7, #6]
 8005fe2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2221      	movs	r2, #33	; 0x21
 8005ff8:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d107      	bne.n	8006014 <HAL_UART_Transmit_IT+0x80>
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d103      	bne.n	8006014 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4a16      	ldr	r2, [pc, #88]	; (8006068 <HAL_UART_Transmit_IT+0xd4>)
 8006010:	669a      	str	r2, [r3, #104]	; 0x68
 8006012:	e002      	b.n	800601a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4a15      	ldr	r2, [pc, #84]	; (800606c <HAL_UART_Transmit_IT+0xd8>)
 8006018:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	e853 3f00 	ldrex	r3, [r3]
 800602e:	613b      	str	r3, [r7, #16]
   return(result);
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006036:	627b      	str	r3, [r7, #36]	; 0x24
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006040:	623b      	str	r3, [r7, #32]
 8006042:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006044:	69f9      	ldr	r1, [r7, #28]
 8006046:	6a3a      	ldr	r2, [r7, #32]
 8006048:	e841 2300 	strex	r3, r2, [r1]
 800604c:	61bb      	str	r3, [r7, #24]
   return(result);
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d1e6      	bne.n	8006022 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006054:	2300      	movs	r3, #0
 8006056:	e000      	b.n	800605a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006058:	2302      	movs	r3, #2
  }
}
 800605a:	4618      	mov	r0, r3
 800605c:	372c      	adds	r7, #44	; 0x2c
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	080072d3 	.word	0x080072d3
 800606c:	0800721b 	.word	0x0800721b

08006070 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b08a      	sub	sp, #40	; 0x28
 8006074:	af00      	add	r7, sp, #0
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	60b9      	str	r1, [r7, #8]
 800607a:	4613      	mov	r3, r2
 800607c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006082:	2b20      	cmp	r3, #32
 8006084:	d142      	bne.n	800610c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_UART_Receive_IT+0x22>
 800608c:	88fb      	ldrh	r3, [r7, #6]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d101      	bne.n	8006096 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e03b      	b.n	800610e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_UART_Receive_IT+0x34>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e034      	b.n	800610e <HAL_UART_Receive_IT+0x9e>
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a18      	ldr	r2, [pc, #96]	; (8006118 <HAL_UART_Receive_IT+0xa8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d01f      	beq.n	80060fc <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d018      	beq.n	80060fc <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	e853 3f00 	ldrex	r3, [r3]
 80060d6:	613b      	str	r3, [r7, #16]
   return(result);
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060de:	627b      	str	r3, [r7, #36]	; 0x24
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	461a      	mov	r2, r3
 80060e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e8:	623b      	str	r3, [r7, #32]
 80060ea:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	69f9      	ldr	r1, [r7, #28]
 80060ee:	6a3a      	ldr	r2, [r7, #32]
 80060f0:	e841 2300 	strex	r3, r2, [r1]
 80060f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1e6      	bne.n	80060ca <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80060fc:	88fb      	ldrh	r3, [r7, #6]
 80060fe:	461a      	mov	r2, r3
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 ff46 	bl	8006f94 <UART_Start_Receive_IT>
 8006108:	4603      	mov	r3, r0
 800610a:	e000      	b.n	800610e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800610c:	2302      	movs	r3, #2
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3728      	adds	r7, #40	; 0x28
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40008000 	.word	0x40008000

0800611c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b0ba      	sub	sp, #232	; 0xe8
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69db      	ldr	r3, [r3, #28]
 800612a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006142:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006146:	f640 030f 	movw	r3, #2063	; 0x80f
 800614a:	4013      	ands	r3, r2
 800614c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006150:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006154:	2b00      	cmp	r3, #0
 8006156:	d115      	bne.n	8006184 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800615c:	f003 0320 	and.w	r3, r3, #32
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00f      	beq.n	8006184 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006168:	f003 0320 	and.w	r3, r3, #32
 800616c:	2b00      	cmp	r3, #0
 800616e:	d009      	beq.n	8006184 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 82a6 	beq.w	80066c6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	4798      	blx	r3
      }
      return;
 8006182:	e2a0      	b.n	80066c6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006184:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006188:	2b00      	cmp	r3, #0
 800618a:	f000 8117 	beq.w	80063bc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800618e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d106      	bne.n	80061a8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800619a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800619e:	4b85      	ldr	r3, [pc, #532]	; (80063b4 <HAL_UART_IRQHandler+0x298>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 810a 	beq.w	80063bc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d011      	beq.n	80061d8 <HAL_UART_IRQHandler+0xbc>
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00b      	beq.n	80061d8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2201      	movs	r2, #1
 80061c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ce:	f043 0201 	orr.w	r2, r3, #1
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d011      	beq.n	8006208 <HAL_UART_IRQHandler+0xec>
 80061e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00b      	beq.n	8006208 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2202      	movs	r2, #2
 80061f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061fe:	f043 0204 	orr.w	r2, r3, #4
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800620c:	f003 0304 	and.w	r3, r3, #4
 8006210:	2b00      	cmp	r3, #0
 8006212:	d011      	beq.n	8006238 <HAL_UART_IRQHandler+0x11c>
 8006214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00b      	beq.n	8006238 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2204      	movs	r2, #4
 8006226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800622e:	f043 0202 	orr.w	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b00      	cmp	r3, #0
 8006242:	d017      	beq.n	8006274 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006244:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006248:	f003 0320 	and.w	r3, r3, #32
 800624c:	2b00      	cmp	r3, #0
 800624e:	d105      	bne.n	800625c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006250:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006254:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00b      	beq.n	8006274 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2208      	movs	r2, #8
 8006262:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800626a:	f043 0208 	orr.w	r2, r3, #8
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006274:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800627c:	2b00      	cmp	r3, #0
 800627e:	d012      	beq.n	80062a6 <HAL_UART_IRQHandler+0x18a>
 8006280:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006284:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00c      	beq.n	80062a6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006294:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629c:	f043 0220 	orr.w	r2, r3, #32
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 820c 	beq.w	80066ca <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062b6:	f003 0320 	and.w	r3, r3, #32
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d007      	beq.n	80062da <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d003      	beq.n	80062da <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689b      	ldr	r3, [r3, #8]
 80062ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ee:	2b40      	cmp	r3, #64	; 0x40
 80062f0:	d005      	beq.n	80062fe <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d04f      	beq.n	800639e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 ff12 	bl	8007128 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800630e:	2b40      	cmp	r3, #64	; 0x40
 8006310:	d141      	bne.n	8006396 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3308      	adds	r3, #8
 8006318:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006328:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800632c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006330:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	3308      	adds	r3, #8
 800633a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800633e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006342:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006346:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800634a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800634e:	e841 2300 	strex	r3, r2, [r1]
 8006352:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006356:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1d9      	bne.n	8006312 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	2b00      	cmp	r3, #0
 8006364:	d013      	beq.n	800638e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636a:	4a13      	ldr	r2, [pc, #76]	; (80063b8 <HAL_UART_IRQHandler+0x29c>)
 800636c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	4618      	mov	r0, r3
 8006374:	f7fc fe01 	bl	8002f7a <HAL_DMA_Abort_IT>
 8006378:	4603      	mov	r3, r0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d017      	beq.n	80063ae <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006388:	4610      	mov	r0, r2
 800638a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e00f      	b.n	80063ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9b0 	bl	80066f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006394:	e00b      	b.n	80063ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f9ac 	bl	80066f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639c:	e007      	b.n	80063ae <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f9a8 	bl	80066f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80063ac:	e18d      	b.n	80066ca <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ae:	bf00      	nop
    return;
 80063b0:	e18b      	b.n	80066ca <HAL_UART_IRQHandler+0x5ae>
 80063b2:	bf00      	nop
 80063b4:	04000120 	.word	0x04000120
 80063b8:	080071ef 	.word	0x080071ef

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	f040 8146 	bne.w	8006652 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ca:	f003 0310 	and.w	r3, r3, #16
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 813f 	beq.w	8006652 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d8:	f003 0310 	and.w	r3, r3, #16
 80063dc:	2b00      	cmp	r3, #0
 80063de:	f000 8138 	beq.w	8006652 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	2210      	movs	r2, #16
 80063e8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	f040 80b4 	bne.w	8006562 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	685b      	ldr	r3, [r3, #4]
 8006402:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006406:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800640a:	2b00      	cmp	r3, #0
 800640c:	f000 815f 	beq.w	80066ce <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800641a:	429a      	cmp	r2, r3
 800641c:	f080 8157 	bcs.w	80066ce <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006426:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 0320 	and.w	r3, r3, #32
 8006436:	2b00      	cmp	r3, #0
 8006438:	f040 8085 	bne.w	8006546 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006444:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006448:	e853 3f00 	ldrex	r3, [r3]
 800644c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006450:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006454:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006458:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	461a      	mov	r2, r3
 8006462:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006466:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800646a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006472:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006476:	e841 2300 	strex	r3, r2, [r1]
 800647a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800647e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006482:	2b00      	cmp	r3, #0
 8006484:	d1da      	bne.n	800643c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	3308      	adds	r3, #8
 800648c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800648e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006490:	e853 3f00 	ldrex	r3, [r3]
 8006494:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006496:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006498:	f023 0301 	bic.w	r3, r3, #1
 800649c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	3308      	adds	r3, #8
 80064a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80064aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80064ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80064b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064b6:	e841 2300 	strex	r3, r2, [r1]
 80064ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d1e1      	bne.n	8006486 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	3308      	adds	r3, #8
 80064c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064cc:	e853 3f00 	ldrex	r3, [r3]
 80064d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	3308      	adds	r3, #8
 80064e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d1e3      	bne.n	80064c2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800650c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800650e:	e853 3f00 	ldrex	r3, [r3]
 8006512:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006516:	f023 0310 	bic.w	r3, r3, #16
 800651a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	461a      	mov	r2, r3
 8006524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006528:	65bb      	str	r3, [r7, #88]	; 0x58
 800652a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800652c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800652e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006530:	e841 2300 	strex	r3, r2, [r1]
 8006534:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1e4      	bne.n	8006506 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006540:	4618      	mov	r0, r3
 8006542:	f7fc fcdc 	bl	8002efe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006552:	b29b      	uxth	r3, r3
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	b29b      	uxth	r3, r3
 8006558:	4619      	mov	r1, r3
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f8d4 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006560:	e0b5      	b.n	80066ce <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800656e:	b29b      	uxth	r3, r3
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800657c:	b29b      	uxth	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	f000 80a7 	beq.w	80066d2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006584:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006588:	2b00      	cmp	r3, #0
 800658a:	f000 80a2 	beq.w	80066d2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006596:	e853 3f00 	ldrex	r3, [r3]
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	461a      	mov	r2, r3
 80065ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065b0:	647b      	str	r3, [r7, #68]	; 0x44
 80065b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065b8:	e841 2300 	strex	r3, r2, [r1]
 80065bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1e4      	bne.n	800658e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3308      	adds	r3, #8
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ce:	e853 3f00 	ldrex	r3, [r3]
 80065d2:	623b      	str	r3, [r7, #32]
   return(result);
 80065d4:	6a3b      	ldr	r3, [r7, #32]
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	3308      	adds	r3, #8
 80065e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065e8:	633a      	str	r2, [r7, #48]	; 0x30
 80065ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e3      	bne.n	80065c4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2220      	movs	r2, #32
 8006600:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	60fb      	str	r3, [r7, #12]
   return(result);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f023 0310 	bic.w	r3, r3, #16
 8006622:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	461a      	mov	r2, r3
 800662c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006630:	61fb      	str	r3, [r7, #28]
 8006632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	69fa      	ldr	r2, [r7, #28]
 8006638:	e841 2300 	strex	r3, r2, [r1]
 800663c:	617b      	str	r3, [r7, #20]
   return(result);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1e4      	bne.n	800660e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006644:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006648:	4619      	mov	r1, r3
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f85c 	bl	8006708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006650:	e03f      	b.n	80066d2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00e      	beq.n	800667c <HAL_UART_IRQHandler+0x560>
 800665e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006662:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006666:	2b00      	cmp	r3, #0
 8006668:	d008      	beq.n	800667c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006672:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 f816 	bl	80076a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800667a:	e02d      	b.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800667c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00e      	beq.n	80066a6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800668c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006690:	2b00      	cmp	r3, #0
 8006692:	d008      	beq.n	80066a6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006698:	2b00      	cmp	r3, #0
 800669a:	d01c      	beq.n	80066d6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	4798      	blx	r3
    }
    return;
 80066a4:	e017      	b.n	80066d6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80066a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d012      	beq.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
 80066b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00c      	beq.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fe67 	bl	8007392 <UART_EndTransmit_IT>
    return;
 80066c4:	e008      	b.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80066c6:	bf00      	nop
 80066c8:	e006      	b.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80066ca:	bf00      	nop
 80066cc:	e004      	b.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80066ce:	bf00      	nop
 80066d0:	e002      	b.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80066d2:	bf00      	nop
 80066d4:	e000      	b.n	80066d8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80066d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80066d8:	37e8      	adds	r7, #232	; 0xe8
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}
 80066de:	bf00      	nop

080066e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066fc:	bf00      	nop
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006708:	b480      	push	{r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	460b      	mov	r3, r1
 8006712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006720:	b5b0      	push	{r4, r5, r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4bad      	ldr	r3, [pc, #692]	; (8006a00 <UART_SetConfig+0x2e0>)
 800674c:	4013      	ands	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	69f9      	ldr	r1, [r7, #28]
 8006754:	430b      	orrs	r3, r1
 8006756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4aa2      	ldr	r2, [pc, #648]	; (8006a04 <UART_SetConfig+0x2e4>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d004      	beq.n	8006788 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	69fa      	ldr	r2, [r7, #28]
 8006784:	4313      	orrs	r3, r2
 8006786:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	69fa      	ldr	r2, [r7, #28]
 8006798:	430a      	orrs	r2, r1
 800679a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a99      	ldr	r2, [pc, #612]	; (8006a08 <UART_SetConfig+0x2e8>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d121      	bne.n	80067ea <UART_SetConfig+0xca>
 80067a6:	4b99      	ldr	r3, [pc, #612]	; (8006a0c <UART_SetConfig+0x2ec>)
 80067a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ac:	f003 0303 	and.w	r3, r3, #3
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d817      	bhi.n	80067e4 <UART_SetConfig+0xc4>
 80067b4:	a201      	add	r2, pc, #4	; (adr r2, 80067bc <UART_SetConfig+0x9c>)
 80067b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067ba:	bf00      	nop
 80067bc:	080067cd 	.word	0x080067cd
 80067c0:	080067d9 	.word	0x080067d9
 80067c4:	080067d3 	.word	0x080067d3
 80067c8:	080067df 	.word	0x080067df
 80067cc:	2301      	movs	r3, #1
 80067ce:	76fb      	strb	r3, [r7, #27]
 80067d0:	e0e7      	b.n	80069a2 <UART_SetConfig+0x282>
 80067d2:	2302      	movs	r3, #2
 80067d4:	76fb      	strb	r3, [r7, #27]
 80067d6:	e0e4      	b.n	80069a2 <UART_SetConfig+0x282>
 80067d8:	2304      	movs	r3, #4
 80067da:	76fb      	strb	r3, [r7, #27]
 80067dc:	e0e1      	b.n	80069a2 <UART_SetConfig+0x282>
 80067de:	2308      	movs	r3, #8
 80067e0:	76fb      	strb	r3, [r7, #27]
 80067e2:	e0de      	b.n	80069a2 <UART_SetConfig+0x282>
 80067e4:	2310      	movs	r3, #16
 80067e6:	76fb      	strb	r3, [r7, #27]
 80067e8:	e0db      	b.n	80069a2 <UART_SetConfig+0x282>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	4a88      	ldr	r2, [pc, #544]	; (8006a10 <UART_SetConfig+0x2f0>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d132      	bne.n	800685a <UART_SetConfig+0x13a>
 80067f4:	4b85      	ldr	r3, [pc, #532]	; (8006a0c <UART_SetConfig+0x2ec>)
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	f003 030c 	and.w	r3, r3, #12
 80067fe:	2b0c      	cmp	r3, #12
 8006800:	d828      	bhi.n	8006854 <UART_SetConfig+0x134>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <UART_SetConfig+0xe8>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800683d 	.word	0x0800683d
 800680c:	08006855 	.word	0x08006855
 8006810:	08006855 	.word	0x08006855
 8006814:	08006855 	.word	0x08006855
 8006818:	08006849 	.word	0x08006849
 800681c:	08006855 	.word	0x08006855
 8006820:	08006855 	.word	0x08006855
 8006824:	08006855 	.word	0x08006855
 8006828:	08006843 	.word	0x08006843
 800682c:	08006855 	.word	0x08006855
 8006830:	08006855 	.word	0x08006855
 8006834:	08006855 	.word	0x08006855
 8006838:	0800684f 	.word	0x0800684f
 800683c:	2300      	movs	r3, #0
 800683e:	76fb      	strb	r3, [r7, #27]
 8006840:	e0af      	b.n	80069a2 <UART_SetConfig+0x282>
 8006842:	2302      	movs	r3, #2
 8006844:	76fb      	strb	r3, [r7, #27]
 8006846:	e0ac      	b.n	80069a2 <UART_SetConfig+0x282>
 8006848:	2304      	movs	r3, #4
 800684a:	76fb      	strb	r3, [r7, #27]
 800684c:	e0a9      	b.n	80069a2 <UART_SetConfig+0x282>
 800684e:	2308      	movs	r3, #8
 8006850:	76fb      	strb	r3, [r7, #27]
 8006852:	e0a6      	b.n	80069a2 <UART_SetConfig+0x282>
 8006854:	2310      	movs	r3, #16
 8006856:	76fb      	strb	r3, [r7, #27]
 8006858:	e0a3      	b.n	80069a2 <UART_SetConfig+0x282>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a6d      	ldr	r2, [pc, #436]	; (8006a14 <UART_SetConfig+0x2f4>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d120      	bne.n	80068a6 <UART_SetConfig+0x186>
 8006864:	4b69      	ldr	r3, [pc, #420]	; (8006a0c <UART_SetConfig+0x2ec>)
 8006866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800686a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800686e:	2b30      	cmp	r3, #48	; 0x30
 8006870:	d013      	beq.n	800689a <UART_SetConfig+0x17a>
 8006872:	2b30      	cmp	r3, #48	; 0x30
 8006874:	d814      	bhi.n	80068a0 <UART_SetConfig+0x180>
 8006876:	2b20      	cmp	r3, #32
 8006878:	d009      	beq.n	800688e <UART_SetConfig+0x16e>
 800687a:	2b20      	cmp	r3, #32
 800687c:	d810      	bhi.n	80068a0 <UART_SetConfig+0x180>
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <UART_SetConfig+0x168>
 8006882:	2b10      	cmp	r3, #16
 8006884:	d006      	beq.n	8006894 <UART_SetConfig+0x174>
 8006886:	e00b      	b.n	80068a0 <UART_SetConfig+0x180>
 8006888:	2300      	movs	r3, #0
 800688a:	76fb      	strb	r3, [r7, #27]
 800688c:	e089      	b.n	80069a2 <UART_SetConfig+0x282>
 800688e:	2302      	movs	r3, #2
 8006890:	76fb      	strb	r3, [r7, #27]
 8006892:	e086      	b.n	80069a2 <UART_SetConfig+0x282>
 8006894:	2304      	movs	r3, #4
 8006896:	76fb      	strb	r3, [r7, #27]
 8006898:	e083      	b.n	80069a2 <UART_SetConfig+0x282>
 800689a:	2308      	movs	r3, #8
 800689c:	76fb      	strb	r3, [r7, #27]
 800689e:	e080      	b.n	80069a2 <UART_SetConfig+0x282>
 80068a0:	2310      	movs	r3, #16
 80068a2:	76fb      	strb	r3, [r7, #27]
 80068a4:	e07d      	b.n	80069a2 <UART_SetConfig+0x282>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4a5b      	ldr	r2, [pc, #364]	; (8006a18 <UART_SetConfig+0x2f8>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d120      	bne.n	80068f2 <UART_SetConfig+0x1d2>
 80068b0:	4b56      	ldr	r3, [pc, #344]	; (8006a0c <UART_SetConfig+0x2ec>)
 80068b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ba:	2bc0      	cmp	r3, #192	; 0xc0
 80068bc:	d013      	beq.n	80068e6 <UART_SetConfig+0x1c6>
 80068be:	2bc0      	cmp	r3, #192	; 0xc0
 80068c0:	d814      	bhi.n	80068ec <UART_SetConfig+0x1cc>
 80068c2:	2b80      	cmp	r3, #128	; 0x80
 80068c4:	d009      	beq.n	80068da <UART_SetConfig+0x1ba>
 80068c6:	2b80      	cmp	r3, #128	; 0x80
 80068c8:	d810      	bhi.n	80068ec <UART_SetConfig+0x1cc>
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <UART_SetConfig+0x1b4>
 80068ce:	2b40      	cmp	r3, #64	; 0x40
 80068d0:	d006      	beq.n	80068e0 <UART_SetConfig+0x1c0>
 80068d2:	e00b      	b.n	80068ec <UART_SetConfig+0x1cc>
 80068d4:	2300      	movs	r3, #0
 80068d6:	76fb      	strb	r3, [r7, #27]
 80068d8:	e063      	b.n	80069a2 <UART_SetConfig+0x282>
 80068da:	2302      	movs	r3, #2
 80068dc:	76fb      	strb	r3, [r7, #27]
 80068de:	e060      	b.n	80069a2 <UART_SetConfig+0x282>
 80068e0:	2304      	movs	r3, #4
 80068e2:	76fb      	strb	r3, [r7, #27]
 80068e4:	e05d      	b.n	80069a2 <UART_SetConfig+0x282>
 80068e6:	2308      	movs	r3, #8
 80068e8:	76fb      	strb	r3, [r7, #27]
 80068ea:	e05a      	b.n	80069a2 <UART_SetConfig+0x282>
 80068ec:	2310      	movs	r3, #16
 80068ee:	76fb      	strb	r3, [r7, #27]
 80068f0:	e057      	b.n	80069a2 <UART_SetConfig+0x282>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a49      	ldr	r2, [pc, #292]	; (8006a1c <UART_SetConfig+0x2fc>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d125      	bne.n	8006948 <UART_SetConfig+0x228>
 80068fc:	4b43      	ldr	r3, [pc, #268]	; (8006a0c <UART_SetConfig+0x2ec>)
 80068fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006906:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690a:	d017      	beq.n	800693c <UART_SetConfig+0x21c>
 800690c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006910:	d817      	bhi.n	8006942 <UART_SetConfig+0x222>
 8006912:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006916:	d00b      	beq.n	8006930 <UART_SetConfig+0x210>
 8006918:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800691c:	d811      	bhi.n	8006942 <UART_SetConfig+0x222>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d003      	beq.n	800692a <UART_SetConfig+0x20a>
 8006922:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006926:	d006      	beq.n	8006936 <UART_SetConfig+0x216>
 8006928:	e00b      	b.n	8006942 <UART_SetConfig+0x222>
 800692a:	2300      	movs	r3, #0
 800692c:	76fb      	strb	r3, [r7, #27]
 800692e:	e038      	b.n	80069a2 <UART_SetConfig+0x282>
 8006930:	2302      	movs	r3, #2
 8006932:	76fb      	strb	r3, [r7, #27]
 8006934:	e035      	b.n	80069a2 <UART_SetConfig+0x282>
 8006936:	2304      	movs	r3, #4
 8006938:	76fb      	strb	r3, [r7, #27]
 800693a:	e032      	b.n	80069a2 <UART_SetConfig+0x282>
 800693c:	2308      	movs	r3, #8
 800693e:	76fb      	strb	r3, [r7, #27]
 8006940:	e02f      	b.n	80069a2 <UART_SetConfig+0x282>
 8006942:	2310      	movs	r3, #16
 8006944:	76fb      	strb	r3, [r7, #27]
 8006946:	e02c      	b.n	80069a2 <UART_SetConfig+0x282>
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a2d      	ldr	r2, [pc, #180]	; (8006a04 <UART_SetConfig+0x2e4>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d125      	bne.n	800699e <UART_SetConfig+0x27e>
 8006952:	4b2e      	ldr	r3, [pc, #184]	; (8006a0c <UART_SetConfig+0x2ec>)
 8006954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006958:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800695c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006960:	d017      	beq.n	8006992 <UART_SetConfig+0x272>
 8006962:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006966:	d817      	bhi.n	8006998 <UART_SetConfig+0x278>
 8006968:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800696c:	d00b      	beq.n	8006986 <UART_SetConfig+0x266>
 800696e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006972:	d811      	bhi.n	8006998 <UART_SetConfig+0x278>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d003      	beq.n	8006980 <UART_SetConfig+0x260>
 8006978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800697c:	d006      	beq.n	800698c <UART_SetConfig+0x26c>
 800697e:	e00b      	b.n	8006998 <UART_SetConfig+0x278>
 8006980:	2300      	movs	r3, #0
 8006982:	76fb      	strb	r3, [r7, #27]
 8006984:	e00d      	b.n	80069a2 <UART_SetConfig+0x282>
 8006986:	2302      	movs	r3, #2
 8006988:	76fb      	strb	r3, [r7, #27]
 800698a:	e00a      	b.n	80069a2 <UART_SetConfig+0x282>
 800698c:	2304      	movs	r3, #4
 800698e:	76fb      	strb	r3, [r7, #27]
 8006990:	e007      	b.n	80069a2 <UART_SetConfig+0x282>
 8006992:	2308      	movs	r3, #8
 8006994:	76fb      	strb	r3, [r7, #27]
 8006996:	e004      	b.n	80069a2 <UART_SetConfig+0x282>
 8006998:	2310      	movs	r3, #16
 800699a:	76fb      	strb	r3, [r7, #27]
 800699c:	e001      	b.n	80069a2 <UART_SetConfig+0x282>
 800699e:	2310      	movs	r3, #16
 80069a0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <UART_SetConfig+0x2e4>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	f040 8087 	bne.w	8006abc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80069ae:	7efb      	ldrb	r3, [r7, #27]
 80069b0:	2b08      	cmp	r3, #8
 80069b2:	d837      	bhi.n	8006a24 <UART_SetConfig+0x304>
 80069b4:	a201      	add	r2, pc, #4	; (adr r2, 80069bc <UART_SetConfig+0x29c>)
 80069b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ba:	bf00      	nop
 80069bc:	080069e1 	.word	0x080069e1
 80069c0:	08006a25 	.word	0x08006a25
 80069c4:	080069e9 	.word	0x080069e9
 80069c8:	08006a25 	.word	0x08006a25
 80069cc:	080069ef 	.word	0x080069ef
 80069d0:	08006a25 	.word	0x08006a25
 80069d4:	08006a25 	.word	0x08006a25
 80069d8:	08006a25 	.word	0x08006a25
 80069dc:	080069f7 	.word	0x080069f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e0:	f7fe f9e6 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 80069e4:	6178      	str	r0, [r7, #20]
        break;
 80069e6:	e022      	b.n	8006a2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069e8:	4b0d      	ldr	r3, [pc, #52]	; (8006a20 <UART_SetConfig+0x300>)
 80069ea:	617b      	str	r3, [r7, #20]
        break;
 80069ec:	e01f      	b.n	8006a2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ee:	f7fe f947 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 80069f2:	6178      	str	r0, [r7, #20]
        break;
 80069f4:	e01b      	b.n	8006a2e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069fa:	617b      	str	r3, [r7, #20]
        break;
 80069fc:	e017      	b.n	8006a2e <UART_SetConfig+0x30e>
 80069fe:	bf00      	nop
 8006a00:	efff69f3 	.word	0xefff69f3
 8006a04:	40008000 	.word	0x40008000
 8006a08:	40013800 	.word	0x40013800
 8006a0c:	40021000 	.word	0x40021000
 8006a10:	40004400 	.word	0x40004400
 8006a14:	40004800 	.word	0x40004800
 8006a18:	40004c00 	.word	0x40004c00
 8006a1c:	40005000 	.word	0x40005000
 8006a20:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006a24:	2300      	movs	r3, #0
 8006a26:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a28:	2301      	movs	r3, #1
 8006a2a:	76bb      	strb	r3, [r7, #26]
        break;
 8006a2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 80f1 	beq.w	8006c18 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	4613      	mov	r3, r2
 8006a3c:	005b      	lsls	r3, r3, #1
 8006a3e:	4413      	add	r3, r2
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d305      	bcc.n	8006a52 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a4c:	697a      	ldr	r2, [r7, #20]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d902      	bls.n	8006a58 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	76bb      	strb	r3, [r7, #26]
 8006a56:	e0df      	b.n	8006c18 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f04f 0100 	mov.w	r1, #0
 8006a60:	f04f 0200 	mov.w	r2, #0
 8006a64:	f04f 0300 	mov.w	r3, #0
 8006a68:	020b      	lsls	r3, r1, #8
 8006a6a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006a6e:	0202      	lsls	r2, r0, #8
 8006a70:	6879      	ldr	r1, [r7, #4]
 8006a72:	6849      	ldr	r1, [r1, #4]
 8006a74:	0849      	lsrs	r1, r1, #1
 8006a76:	4608      	mov	r0, r1
 8006a78:	f04f 0100 	mov.w	r1, #0
 8006a7c:	1814      	adds	r4, r2, r0
 8006a7e:	eb43 0501 	adc.w	r5, r3, r1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	685b      	ldr	r3, [r3, #4]
 8006a86:	461a      	mov	r2, r3
 8006a88:	f04f 0300 	mov.w	r3, #0
 8006a8c:	4620      	mov	r0, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	f7fa f88a 	bl	8000ba8 <__aeabi_uldivmod>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4613      	mov	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006aa2:	d308      	bcc.n	8006ab6 <UART_SetConfig+0x396>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006aaa:	d204      	bcs.n	8006ab6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	60da      	str	r2, [r3, #12]
 8006ab4:	e0b0      	b.n	8006c18 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	76bb      	strb	r3, [r7, #26]
 8006aba:	e0ad      	b.n	8006c18 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	69db      	ldr	r3, [r3, #28]
 8006ac0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ac4:	d15b      	bne.n	8006b7e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8006ac6:	7efb      	ldrb	r3, [r7, #27]
 8006ac8:	2b08      	cmp	r3, #8
 8006aca:	d828      	bhi.n	8006b1e <UART_SetConfig+0x3fe>
 8006acc:	a201      	add	r2, pc, #4	; (adr r2, 8006ad4 <UART_SetConfig+0x3b4>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006af9 	.word	0x08006af9
 8006ad8:	08006b01 	.word	0x08006b01
 8006adc:	08006b09 	.word	0x08006b09
 8006ae0:	08006b1f 	.word	0x08006b1f
 8006ae4:	08006b0f 	.word	0x08006b0f
 8006ae8:	08006b1f 	.word	0x08006b1f
 8006aec:	08006b1f 	.word	0x08006b1f
 8006af0:	08006b1f 	.word	0x08006b1f
 8006af4:	08006b17 	.word	0x08006b17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006af8:	f7fe f95a 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8006afc:	6178      	str	r0, [r7, #20]
        break;
 8006afe:	e013      	b.n	8006b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b00:	f7fe f96c 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8006b04:	6178      	str	r0, [r7, #20]
        break;
 8006b06:	e00f      	b.n	8006b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b08:	4b49      	ldr	r3, [pc, #292]	; (8006c30 <UART_SetConfig+0x510>)
 8006b0a:	617b      	str	r3, [r7, #20]
        break;
 8006b0c:	e00c      	b.n	8006b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b0e:	f7fe f8b7 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8006b12:	6178      	str	r0, [r7, #20]
        break;
 8006b14:	e008      	b.n	8006b28 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b1a:	617b      	str	r3, [r7, #20]
        break;
 8006b1c:	e004      	b.n	8006b28 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	76bb      	strb	r3, [r7, #26]
        break;
 8006b26:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d074      	beq.n	8006c18 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	005a      	lsls	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	441a      	add	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b42:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	2b0f      	cmp	r3, #15
 8006b48:	d916      	bls.n	8006b78 <UART_SetConfig+0x458>
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b50:	d212      	bcs.n	8006b78 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b52:	693b      	ldr	r3, [r7, #16]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f023 030f 	bic.w	r3, r3, #15
 8006b5a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	085b      	lsrs	r3, r3, #1
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	f003 0307 	and.w	r3, r3, #7
 8006b66:	b29a      	uxth	r2, r3
 8006b68:	89fb      	ldrh	r3, [r7, #14]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	89fa      	ldrh	r2, [r7, #14]
 8006b74:	60da      	str	r2, [r3, #12]
 8006b76:	e04f      	b.n	8006c18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	76bb      	strb	r3, [r7, #26]
 8006b7c:	e04c      	b.n	8006c18 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b7e:	7efb      	ldrb	r3, [r7, #27]
 8006b80:	2b08      	cmp	r3, #8
 8006b82:	d828      	bhi.n	8006bd6 <UART_SetConfig+0x4b6>
 8006b84:	a201      	add	r2, pc, #4	; (adr r2, 8006b8c <UART_SetConfig+0x46c>)
 8006b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b8a:	bf00      	nop
 8006b8c:	08006bb1 	.word	0x08006bb1
 8006b90:	08006bb9 	.word	0x08006bb9
 8006b94:	08006bc1 	.word	0x08006bc1
 8006b98:	08006bd7 	.word	0x08006bd7
 8006b9c:	08006bc7 	.word	0x08006bc7
 8006ba0:	08006bd7 	.word	0x08006bd7
 8006ba4:	08006bd7 	.word	0x08006bd7
 8006ba8:	08006bd7 	.word	0x08006bd7
 8006bac:	08006bcf 	.word	0x08006bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006bb0:	f7fe f8fe 	bl	8004db0 <HAL_RCC_GetPCLK1Freq>
 8006bb4:	6178      	str	r0, [r7, #20]
        break;
 8006bb6:	e013      	b.n	8006be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006bb8:	f7fe f910 	bl	8004ddc <HAL_RCC_GetPCLK2Freq>
 8006bbc:	6178      	str	r0, [r7, #20]
        break;
 8006bbe:	e00f      	b.n	8006be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006bc0:	4b1b      	ldr	r3, [pc, #108]	; (8006c30 <UART_SetConfig+0x510>)
 8006bc2:	617b      	str	r3, [r7, #20]
        break;
 8006bc4:	e00c      	b.n	8006be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006bc6:	f7fe f85b 	bl	8004c80 <HAL_RCC_GetSysClockFreq>
 8006bca:	6178      	str	r0, [r7, #20]
        break;
 8006bcc:	e008      	b.n	8006be0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd2:	617b      	str	r3, [r7, #20]
        break;
 8006bd4:	e004      	b.n	8006be0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	76bb      	strb	r3, [r7, #26]
        break;
 8006bde:	bf00      	nop
    }

    if (pclk != 0U)
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d018      	beq.n	8006c18 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	685b      	ldr	r3, [r3, #4]
 8006bea:	085a      	lsrs	r2, r3, #1
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	441a      	add	r2, r3
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bf8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bfa:	693b      	ldr	r3, [r7, #16]
 8006bfc:	2b0f      	cmp	r3, #15
 8006bfe:	d909      	bls.n	8006c14 <UART_SetConfig+0x4f4>
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c06:	d205      	bcs.n	8006c14 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006c08:	693b      	ldr	r3, [r7, #16]
 8006c0a:	b29a      	uxth	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	60da      	str	r2, [r3, #12]
 8006c12:	e001      	b.n	8006c18 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006c14:	2301      	movs	r3, #1
 8006c16:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006c24:	7ebb      	ldrb	r3, [r7, #26]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3720      	adds	r7, #32
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bdb0      	pop	{r4, r5, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	00f42400 	.word	0x00f42400

08006c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c40:	f003 0301 	and.w	r3, r3, #1
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	f003 0302 	and.w	r3, r3, #2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	430a      	orrs	r2, r1
 8006c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d00a      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ca6:	f003 0308 	and.w	r3, r3, #8
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00a      	beq.n	8006cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc8:	f003 0310 	and.w	r3, r3, #16
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cea:	f003 0320 	and.w	r3, r3, #32
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	430a      	orrs	r2, r1
 8006d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d01a      	beq.n	8006d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	685b      	ldr	r3, [r3, #4]
 8006d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	430a      	orrs	r2, r1
 8006d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d32:	d10a      	bne.n	8006d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	430a      	orrs	r2, r1
 8006d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d00a      	beq.n	8006d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	605a      	str	r2, [r3, #4]
  }
}
 8006d6c:	bf00      	nop
 8006d6e:	370c      	adds	r7, #12
 8006d70:	46bd      	mov	sp, r7
 8006d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d76:	4770      	bx	lr

08006d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b086      	sub	sp, #24
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d88:	f7fb ff9c 	bl	8002cc4 <HAL_GetTick>
 8006d8c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d10e      	bne.n	8006dba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f82d 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e023      	b.n	8006e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f003 0304 	and.w	r3, r3, #4
 8006dc4:	2b04      	cmp	r3, #4
 8006dc6:	d10e      	bne.n	8006de6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006dc8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006dcc:	9300      	str	r3, [sp, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f817 	bl	8006e0a <UART_WaitOnFlagUntilTimeout>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e00d      	b.n	8006e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2220      	movs	r2, #32
 8006dea:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2200      	movs	r2, #0
 8006df6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006e00:	2300      	movs	r3, #0
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}

08006e0a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e0a:	b580      	push	{r7, lr}
 8006e0c:	b09c      	sub	sp, #112	; 0x70
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	60f8      	str	r0, [r7, #12]
 8006e12:	60b9      	str	r1, [r7, #8]
 8006e14:	603b      	str	r3, [r7, #0]
 8006e16:	4613      	mov	r3, r2
 8006e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e1a:	e0a5      	b.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e22:	f000 80a1 	beq.w	8006f68 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e26:	f7fb ff4d 	bl	8002cc4 <HAL_GetTick>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e32:	429a      	cmp	r2, r3
 8006e34:	d302      	bcc.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d13e      	bne.n	8006eba <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e4c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e50:	667b      	str	r3, [r7, #100]	; 0x64
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	461a      	mov	r2, r3
 8006e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e5c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e5e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e60:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e62:	e841 2300 	strex	r3, r2, [r1]
 8006e66:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1e6      	bne.n	8006e3c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	3308      	adds	r3, #8
 8006e74:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	f023 0301 	bic.w	r3, r3, #1
 8006e84:	663b      	str	r3, [r7, #96]	; 0x60
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e8e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e90:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e5      	bne.n	8006e6e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	2220      	movs	r2, #32
 8006ea6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2220      	movs	r2, #32
 8006eac:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e067      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d04f      	beq.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	69db      	ldr	r3, [r3, #28]
 8006ece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ed2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ed6:	d147      	bne.n	8006f68 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eea:	e853 3f00 	ldrex	r3, [r3]
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	461a      	mov	r2, r3
 8006efe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
 8006f02:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f04:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f08:	e841 2300 	strex	r3, r2, [r1]
 8006f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d1e6      	bne.n	8006ee2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	3308      	adds	r3, #8
 8006f1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f1c:	697b      	ldr	r3, [r7, #20]
 8006f1e:	e853 3f00 	ldrex	r3, [r3]
 8006f22:	613b      	str	r3, [r7, #16]
   return(result);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f023 0301 	bic.w	r3, r3, #1
 8006f2a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	3308      	adds	r3, #8
 8006f32:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f34:	623a      	str	r2, [r7, #32]
 8006f36:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f38:	69f9      	ldr	r1, [r7, #28]
 8006f3a:	6a3a      	ldr	r2, [r7, #32]
 8006f3c:	e841 2300 	strex	r3, r2, [r1]
 8006f40:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d1e5      	bne.n	8006f14 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	2220      	movs	r2, #32
 8006f52:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2220      	movs	r2, #32
 8006f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e010      	b.n	8006f8a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	69da      	ldr	r2, [r3, #28]
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	4013      	ands	r3, r2
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	429a      	cmp	r2, r3
 8006f76:	bf0c      	ite	eq
 8006f78:	2301      	moveq	r3, #1
 8006f7a:	2300      	movne	r3, #0
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	461a      	mov	r2, r3
 8006f80:	79fb      	ldrb	r3, [r7, #7]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	f43f af4a 	beq.w	8006e1c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3770      	adds	r7, #112	; 0x70
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b097      	sub	sp, #92	; 0x5c
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	88fa      	ldrh	r2, [r7, #6]
 8006fb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	689b      	ldr	r3, [r3, #8]
 8006fc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fc6:	d10e      	bne.n	8006fe6 <UART_Start_Receive_IT+0x52>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d105      	bne.n	8006fdc <UART_Start_Receive_IT+0x48>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fda:	e02d      	b.n	8007038 <UART_Start_Receive_IT+0xa4>
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	22ff      	movs	r2, #255	; 0xff
 8006fe0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006fe4:	e028      	b.n	8007038 <UART_Start_Receive_IT+0xa4>
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d10d      	bne.n	800700a <UART_Start_Receive_IT+0x76>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d104      	bne.n	8007000 <UART_Start_Receive_IT+0x6c>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	22ff      	movs	r2, #255	; 0xff
 8006ffa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006ffe:	e01b      	b.n	8007038 <UART_Start_Receive_IT+0xa4>
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	227f      	movs	r2, #127	; 0x7f
 8007004:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007008:	e016      	b.n	8007038 <UART_Start_Receive_IT+0xa4>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	689b      	ldr	r3, [r3, #8]
 800700e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007012:	d10d      	bne.n	8007030 <UART_Start_Receive_IT+0x9c>
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d104      	bne.n	8007026 <UART_Start_Receive_IT+0x92>
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	227f      	movs	r2, #127	; 0x7f
 8007020:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007024:	e008      	b.n	8007038 <UART_Start_Receive_IT+0xa4>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	223f      	movs	r2, #63	; 0x3f
 800702a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800702e:	e003      	b.n	8007038 <UART_Start_Receive_IT+0xa4>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	2200      	movs	r2, #0
 800703c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2222      	movs	r2, #34	; 0x22
 8007044:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3308      	adds	r3, #8
 800704c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800704e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007050:	e853 3f00 	ldrex	r3, [r3]
 8007054:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007058:	f043 0301 	orr.w	r3, r3, #1
 800705c:	657b      	str	r3, [r7, #84]	; 0x54
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	3308      	adds	r3, #8
 8007064:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007066:	64ba      	str	r2, [r7, #72]	; 0x48
 8007068:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800706a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800706c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800706e:	e841 2300 	strex	r3, r2, [r1]
 8007072:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007074:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007076:	2b00      	cmp	r3, #0
 8007078:	d1e5      	bne.n	8007046 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007082:	d107      	bne.n	8007094 <UART_Start_Receive_IT+0x100>
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	691b      	ldr	r3, [r3, #16]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4a24      	ldr	r2, [pc, #144]	; (8007120 <UART_Start_Receive_IT+0x18c>)
 8007090:	665a      	str	r2, [r3, #100]	; 0x64
 8007092:	e002      	b.n	800709a <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4a23      	ldr	r2, [pc, #140]	; (8007124 <UART_Start_Receive_IT+0x190>)
 8007098:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2200      	movs	r2, #0
 800709e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d019      	beq.n	80070de <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80070be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	461a      	mov	r2, r3
 80070c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c8:	637b      	str	r3, [r7, #52]	; 0x34
 80070ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80070d0:	e841 2300 	strex	r3, r2, [r1]
 80070d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80070d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d1e6      	bne.n	80070aa <UART_Start_Receive_IT+0x116>
 80070dc:	e018      	b.n	8007110 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	e853 3f00 	ldrex	r3, [r3]
 80070ea:	613b      	str	r3, [r7, #16]
   return(result);
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f043 0320 	orr.w	r3, r3, #32
 80070f2:	653b      	str	r3, [r7, #80]	; 0x50
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	461a      	mov	r2, r3
 80070fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070fc:	623b      	str	r3, [r7, #32]
 80070fe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007100:	69f9      	ldr	r1, [r7, #28]
 8007102:	6a3a      	ldr	r2, [r7, #32]
 8007104:	e841 2300 	strex	r3, r2, [r1]
 8007108:	61bb      	str	r3, [r7, #24]
   return(result);
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e6      	bne.n	80070de <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	4618      	mov	r0, r3
 8007114:	375c      	adds	r7, #92	; 0x5c
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop
 8007120:	08007547 	.word	0x08007547
 8007124:	080073e7 	.word	0x080073e7

08007128 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b095      	sub	sp, #84	; 0x54
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	e853 3f00 	ldrex	r3, [r3]
 800713c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800713e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007140:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007144:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	461a      	mov	r2, r3
 800714c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800714e:	643b      	str	r3, [r7, #64]	; 0x40
 8007150:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007152:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007154:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007156:	e841 2300 	strex	r3, r2, [r1]
 800715a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800715c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1e6      	bne.n	8007130 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	e853 3f00 	ldrex	r3, [r3]
 8007170:	61fb      	str	r3, [r7, #28]
   return(result);
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	f023 0301 	bic.w	r3, r3, #1
 8007178:	64bb      	str	r3, [r7, #72]	; 0x48
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	3308      	adds	r3, #8
 8007180:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007182:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e5      	bne.n	8007162 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800719a:	2b01      	cmp	r3, #1
 800719c:	d118      	bne.n	80071d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	647b      	str	r3, [r7, #68]	; 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80071bc:	61bb      	str	r3, [r7, #24]
 80071be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6979      	ldr	r1, [r7, #20]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e6      	bne.n	800719e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2200      	movs	r2, #0
 80071da:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	665a      	str	r2, [r3, #100]	; 0x64
}
 80071e2:	bf00      	nop
 80071e4:	3754      	adds	r7, #84	; 0x54
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b084      	sub	sp, #16
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2200      	movs	r2, #0
 8007200:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2200      	movs	r2, #0
 8007208:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f7ff fa71 	bl	80066f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007212:	bf00      	nop
 8007214:	3710      	adds	r7, #16
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}

0800721a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800721a:	b480      	push	{r7}
 800721c:	b08f      	sub	sp, #60	; 0x3c
 800721e:	af00      	add	r7, sp, #0
 8007220:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007226:	2b21      	cmp	r3, #33	; 0x21
 8007228:	d14d      	bne.n	80072c6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d132      	bne.n	800729c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	e853 3f00 	ldrex	r3, [r3]
 8007242:	61fb      	str	r3, [r7, #28]
   return(result);
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800724a:	637b      	str	r3, [r7, #52]	; 0x34
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	461a      	mov	r2, r3
 8007252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007254:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007256:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007258:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800725a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800725c:	e841 2300 	strex	r3, r2, [r1]
 8007260:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007264:	2b00      	cmp	r3, #0
 8007266:	d1e6      	bne.n	8007236 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	e853 3f00 	ldrex	r3, [r3]
 8007274:	60bb      	str	r3, [r7, #8]
   return(result);
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800727c:	633b      	str	r3, [r7, #48]	; 0x30
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	461a      	mov	r2, r3
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	61bb      	str	r3, [r7, #24]
 8007288:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800728a:	6979      	ldr	r1, [r7, #20]
 800728c:	69ba      	ldr	r2, [r7, #24]
 800728e:	e841 2300 	strex	r3, r2, [r1]
 8007292:	613b      	str	r3, [r7, #16]
   return(result);
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d1e6      	bne.n	8007268 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800729a:	e014      	b.n	80072c6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a0:	781a      	ldrb	r2, [r3, #0]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	b292      	uxth	r2, r2
 80072a8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ae:	1c5a      	adds	r2, r3, #1
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072ba:	b29b      	uxth	r3, r3
 80072bc:	3b01      	subs	r3, #1
 80072be:	b29a      	uxth	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80072c6:	bf00      	nop
 80072c8:	373c      	adds	r7, #60	; 0x3c
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b091      	sub	sp, #68	; 0x44
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80072de:	2b21      	cmp	r3, #33	; 0x21
 80072e0:	d151      	bne.n	8007386 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072e8:	b29b      	uxth	r3, r3
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d132      	bne.n	8007354 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	623b      	str	r3, [r7, #32]
   return(result);
 80072fc:	6a3b      	ldr	r3, [r7, #32]
 80072fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007302:	63bb      	str	r3, [r7, #56]	; 0x38
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800730c:	633b      	str	r3, [r7, #48]	; 0x30
 800730e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007310:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007314:	e841 2300 	strex	r3, r2, [r1]
 8007318:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800731a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800731c:	2b00      	cmp	r3, #0
 800731e:	d1e6      	bne.n	80072ee <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	e853 3f00 	ldrex	r3, [r3]
 800732c:	60fb      	str	r3, [r7, #12]
   return(result);
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007334:	637b      	str	r3, [r7, #52]	; 0x34
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	461a      	mov	r2, r3
 800733c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007342:	69b9      	ldr	r1, [r7, #24]
 8007344:	69fa      	ldr	r2, [r7, #28]
 8007346:	e841 2300 	strex	r3, r2, [r1]
 800734a:	617b      	str	r3, [r7, #20]
   return(result);
 800734c:	697b      	ldr	r3, [r7, #20]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d1e6      	bne.n	8007320 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007352:	e018      	b.n	8007386 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007358:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800735a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800735c:	881a      	ldrh	r2, [r3, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007366:	b292      	uxth	r2, r2
 8007368:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800736e:	1c9a      	adds	r2, r3, #2
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800737a:	b29b      	uxth	r3, r3
 800737c:	3b01      	subs	r3, #1
 800737e:	b29a      	uxth	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007386:	bf00      	nop
 8007388:	3744      	adds	r7, #68	; 0x44
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007392:	b580      	push	{r7, lr}
 8007394:	b088      	sub	sp, #32
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	e853 3f00 	ldrex	r3, [r3]
 80073a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80073a8:	68bb      	ldr	r3, [r7, #8]
 80073aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	461a      	mov	r2, r3
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	61bb      	str	r3, [r7, #24]
 80073ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073bc:	6979      	ldr	r1, [r7, #20]
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	e841 2300 	strex	r3, r2, [r1]
 80073c4:	613b      	str	r3, [r7, #16]
   return(result);
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d1e6      	bne.n	800739a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f7ff f981 	bl	80066e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073de:	bf00      	nop
 80073e0:	3720      	adds	r7, #32
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}

080073e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b096      	sub	sp, #88	; 0x58
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80073f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073fc:	2b22      	cmp	r3, #34	; 0x22
 80073fe:	f040 8094 	bne.w	800752a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007408:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800740c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007410:	b2d9      	uxtb	r1, r3
 8007412:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007416:	b2da      	uxtb	r2, r3
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800741c:	400a      	ands	r2, r1
 800741e:	b2d2      	uxtb	r2, r2
 8007420:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007426:	1c5a      	adds	r2, r3, #1
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007432:	b29b      	uxth	r3, r3
 8007434:	3b01      	subs	r3, #1
 8007436:	b29a      	uxth	r2, r3
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007444:	b29b      	uxth	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d179      	bne.n	800753e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	e853 3f00 	ldrex	r3, [r3]
 8007456:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007458:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800745a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800745e:	653b      	str	r3, [r7, #80]	; 0x50
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	461a      	mov	r2, r3
 8007466:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007468:	647b      	str	r3, [r7, #68]	; 0x44
 800746a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800746c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800746e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007470:	e841 2300 	strex	r3, r2, [r1]
 8007474:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e6      	bne.n	800744a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	3308      	adds	r3, #8
 8007482:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	e853 3f00 	ldrex	r3, [r3]
 800748a:	623b      	str	r3, [r7, #32]
   return(result);
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	f023 0301 	bic.w	r3, r3, #1
 8007492:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	3308      	adds	r3, #8
 800749a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800749c:	633a      	str	r2, [r7, #48]	; 0x30
 800749e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80074a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a4:	e841 2300 	strex	r3, r2, [r1]
 80074a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1e5      	bne.n	800747c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2220      	movs	r2, #32
 80074b4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d12e      	bne.n	8007522 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	e853 3f00 	ldrex	r3, [r3]
 80074d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f023 0310 	bic.w	r3, r3, #16
 80074de:	64bb      	str	r3, [r7, #72]	; 0x48
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	461a      	mov	r2, r3
 80074e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80074e8:	61fb      	str	r3, [r7, #28]
 80074ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ec:	69b9      	ldr	r1, [r7, #24]
 80074ee:	69fa      	ldr	r2, [r7, #28]
 80074f0:	e841 2300 	strex	r3, r2, [r1]
 80074f4:	617b      	str	r3, [r7, #20]
   return(result);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d1e6      	bne.n	80074ca <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69db      	ldr	r3, [r3, #28]
 8007502:	f003 0310 	and.w	r3, r3, #16
 8007506:	2b10      	cmp	r3, #16
 8007508:	d103      	bne.n	8007512 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2210      	movs	r2, #16
 8007510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007518:	4619      	mov	r1, r3
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff f8f4 	bl	8006708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007520:	e00d      	b.n	800753e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f7fa fa5e 	bl	80019e4 <HAL_UART_RxCpltCallback>
}
 8007528:	e009      	b.n	800753e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	8b1b      	ldrh	r3, [r3, #24]
 8007530:	b29a      	uxth	r2, r3
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f042 0208 	orr.w	r2, r2, #8
 800753a:	b292      	uxth	r2, r2
 800753c:	831a      	strh	r2, [r3, #24]
}
 800753e:	bf00      	nop
 8007540:	3758      	adds	r7, #88	; 0x58
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}

08007546 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b096      	sub	sp, #88	; 0x58
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007554:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755c:	2b22      	cmp	r3, #34	; 0x22
 800755e:	f040 8094 	bne.w	800768a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007568:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007570:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007572:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007576:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800757a:	4013      	ands	r3, r2
 800757c:	b29a      	uxth	r2, r3
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007586:	1c9a      	adds	r2, r3, #2
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d179      	bne.n	800769e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	461a      	mov	r2, r3
 80075c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c8:	643b      	str	r3, [r7, #64]	; 0x40
 80075ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80075ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80075d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e6      	bne.n	80075aa <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	3308      	adds	r3, #8
 80075e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	e853 3f00 	ldrex	r3, [r3]
 80075ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	f023 0301 	bic.w	r3, r3, #1
 80075f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007602:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007604:	e841 2300 	strex	r3, r2, [r1]
 8007608:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1e5      	bne.n	80075dc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2220      	movs	r2, #32
 8007614:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007620:	2b01      	cmp	r3, #1
 8007622:	d12e      	bne.n	8007682 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2200      	movs	r2, #0
 8007628:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	e853 3f00 	ldrex	r3, [r3]
 8007636:	60bb      	str	r3, [r7, #8]
   return(result);
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	f023 0310 	bic.w	r3, r3, #16
 800763e:	647b      	str	r3, [r7, #68]	; 0x44
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	461a      	mov	r2, r3
 8007646:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007648:	61bb      	str	r3, [r7, #24]
 800764a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800764c:	6979      	ldr	r1, [r7, #20]
 800764e:	69ba      	ldr	r2, [r7, #24]
 8007650:	e841 2300 	strex	r3, r2, [r1]
 8007654:	613b      	str	r3, [r7, #16]
   return(result);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1e6      	bne.n	800762a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	69db      	ldr	r3, [r3, #28]
 8007662:	f003 0310 	and.w	r3, r3, #16
 8007666:	2b10      	cmp	r3, #16
 8007668:	d103      	bne.n	8007672 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	2210      	movs	r2, #16
 8007670:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff f844 	bl	8006708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007680:	e00d      	b.n	800769e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fa f9ae 	bl	80019e4 <HAL_UART_RxCpltCallback>
}
 8007688:	e009      	b.n	800769e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	8b1b      	ldrh	r3, [r3, #24]
 8007690:	b29a      	uxth	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0208 	orr.w	r2, r2, #8
 800769a:	b292      	uxth	r2, r2
 800769c:	831a      	strh	r2, [r3, #24]
}
 800769e:	bf00      	nop
 80076a0:	3758      	adds	r7, #88	; 0x58
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80076a6:	b480      	push	{r7}
 80076a8:	b083      	sub	sp, #12
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80076ae:	bf00      	nop
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <__errno>:
 80076bc:	4b01      	ldr	r3, [pc, #4]	; (80076c4 <__errno+0x8>)
 80076be:	6818      	ldr	r0, [r3, #0]
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000154 	.word	0x20000154

080076c8 <__libc_init_array>:
 80076c8:	b570      	push	{r4, r5, r6, lr}
 80076ca:	4d0d      	ldr	r5, [pc, #52]	; (8007700 <__libc_init_array+0x38>)
 80076cc:	4c0d      	ldr	r4, [pc, #52]	; (8007704 <__libc_init_array+0x3c>)
 80076ce:	1b64      	subs	r4, r4, r5
 80076d0:	10a4      	asrs	r4, r4, #2
 80076d2:	2600      	movs	r6, #0
 80076d4:	42a6      	cmp	r6, r4
 80076d6:	d109      	bne.n	80076ec <__libc_init_array+0x24>
 80076d8:	4d0b      	ldr	r5, [pc, #44]	; (8007708 <__libc_init_array+0x40>)
 80076da:	4c0c      	ldr	r4, [pc, #48]	; (800770c <__libc_init_array+0x44>)
 80076dc:	f002 fee0 	bl	800a4a0 <_init>
 80076e0:	1b64      	subs	r4, r4, r5
 80076e2:	10a4      	asrs	r4, r4, #2
 80076e4:	2600      	movs	r6, #0
 80076e6:	42a6      	cmp	r6, r4
 80076e8:	d105      	bne.n	80076f6 <__libc_init_array+0x2e>
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80076f0:	4798      	blx	r3
 80076f2:	3601      	adds	r6, #1
 80076f4:	e7ee      	b.n	80076d4 <__libc_init_array+0xc>
 80076f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80076fa:	4798      	blx	r3
 80076fc:	3601      	adds	r6, #1
 80076fe:	e7f2      	b.n	80076e6 <__libc_init_array+0x1e>
 8007700:	0800aa14 	.word	0x0800aa14
 8007704:	0800aa14 	.word	0x0800aa14
 8007708:	0800aa14 	.word	0x0800aa14
 800770c:	0800aa18 	.word	0x0800aa18

08007710 <memcpy>:
 8007710:	440a      	add	r2, r1
 8007712:	4291      	cmp	r1, r2
 8007714:	f100 33ff 	add.w	r3, r0, #4294967295
 8007718:	d100      	bne.n	800771c <memcpy+0xc>
 800771a:	4770      	bx	lr
 800771c:	b510      	push	{r4, lr}
 800771e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007722:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007726:	4291      	cmp	r1, r2
 8007728:	d1f9      	bne.n	800771e <memcpy+0xe>
 800772a:	bd10      	pop	{r4, pc}

0800772c <memset>:
 800772c:	4402      	add	r2, r0
 800772e:	4603      	mov	r3, r0
 8007730:	4293      	cmp	r3, r2
 8007732:	d100      	bne.n	8007736 <memset+0xa>
 8007734:	4770      	bx	lr
 8007736:	f803 1b01 	strb.w	r1, [r3], #1
 800773a:	e7f9      	b.n	8007730 <memset+0x4>

0800773c <__cvt>:
 800773c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007740:	ec55 4b10 	vmov	r4, r5, d0
 8007744:	2d00      	cmp	r5, #0
 8007746:	460e      	mov	r6, r1
 8007748:	4619      	mov	r1, r3
 800774a:	462b      	mov	r3, r5
 800774c:	bfbb      	ittet	lt
 800774e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007752:	461d      	movlt	r5, r3
 8007754:	2300      	movge	r3, #0
 8007756:	232d      	movlt	r3, #45	; 0x2d
 8007758:	700b      	strb	r3, [r1, #0]
 800775a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800775c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007760:	4691      	mov	r9, r2
 8007762:	f023 0820 	bic.w	r8, r3, #32
 8007766:	bfbc      	itt	lt
 8007768:	4622      	movlt	r2, r4
 800776a:	4614      	movlt	r4, r2
 800776c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007770:	d005      	beq.n	800777e <__cvt+0x42>
 8007772:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007776:	d100      	bne.n	800777a <__cvt+0x3e>
 8007778:	3601      	adds	r6, #1
 800777a:	2102      	movs	r1, #2
 800777c:	e000      	b.n	8007780 <__cvt+0x44>
 800777e:	2103      	movs	r1, #3
 8007780:	ab03      	add	r3, sp, #12
 8007782:	9301      	str	r3, [sp, #4]
 8007784:	ab02      	add	r3, sp, #8
 8007786:	9300      	str	r3, [sp, #0]
 8007788:	ec45 4b10 	vmov	d0, r4, r5
 800778c:	4653      	mov	r3, sl
 800778e:	4632      	mov	r2, r6
 8007790:	f000 fd16 	bl	80081c0 <_dtoa_r>
 8007794:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007798:	4607      	mov	r7, r0
 800779a:	d102      	bne.n	80077a2 <__cvt+0x66>
 800779c:	f019 0f01 	tst.w	r9, #1
 80077a0:	d022      	beq.n	80077e8 <__cvt+0xac>
 80077a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80077a6:	eb07 0906 	add.w	r9, r7, r6
 80077aa:	d110      	bne.n	80077ce <__cvt+0x92>
 80077ac:	783b      	ldrb	r3, [r7, #0]
 80077ae:	2b30      	cmp	r3, #48	; 0x30
 80077b0:	d10a      	bne.n	80077c8 <__cvt+0x8c>
 80077b2:	2200      	movs	r2, #0
 80077b4:	2300      	movs	r3, #0
 80077b6:	4620      	mov	r0, r4
 80077b8:	4629      	mov	r1, r5
 80077ba:	f7f9 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 80077be:	b918      	cbnz	r0, 80077c8 <__cvt+0x8c>
 80077c0:	f1c6 0601 	rsb	r6, r6, #1
 80077c4:	f8ca 6000 	str.w	r6, [sl]
 80077c8:	f8da 3000 	ldr.w	r3, [sl]
 80077cc:	4499      	add	r9, r3
 80077ce:	2200      	movs	r2, #0
 80077d0:	2300      	movs	r3, #0
 80077d2:	4620      	mov	r0, r4
 80077d4:	4629      	mov	r1, r5
 80077d6:	f7f9 f977 	bl	8000ac8 <__aeabi_dcmpeq>
 80077da:	b108      	cbz	r0, 80077e0 <__cvt+0xa4>
 80077dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80077e0:	2230      	movs	r2, #48	; 0x30
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	454b      	cmp	r3, r9
 80077e6:	d307      	bcc.n	80077f8 <__cvt+0xbc>
 80077e8:	9b03      	ldr	r3, [sp, #12]
 80077ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077ec:	1bdb      	subs	r3, r3, r7
 80077ee:	4638      	mov	r0, r7
 80077f0:	6013      	str	r3, [r2, #0]
 80077f2:	b004      	add	sp, #16
 80077f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077f8:	1c59      	adds	r1, r3, #1
 80077fa:	9103      	str	r1, [sp, #12]
 80077fc:	701a      	strb	r2, [r3, #0]
 80077fe:	e7f0      	b.n	80077e2 <__cvt+0xa6>

08007800 <__exponent>:
 8007800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007802:	4603      	mov	r3, r0
 8007804:	2900      	cmp	r1, #0
 8007806:	bfb8      	it	lt
 8007808:	4249      	neglt	r1, r1
 800780a:	f803 2b02 	strb.w	r2, [r3], #2
 800780e:	bfb4      	ite	lt
 8007810:	222d      	movlt	r2, #45	; 0x2d
 8007812:	222b      	movge	r2, #43	; 0x2b
 8007814:	2909      	cmp	r1, #9
 8007816:	7042      	strb	r2, [r0, #1]
 8007818:	dd2a      	ble.n	8007870 <__exponent+0x70>
 800781a:	f10d 0407 	add.w	r4, sp, #7
 800781e:	46a4      	mov	ip, r4
 8007820:	270a      	movs	r7, #10
 8007822:	46a6      	mov	lr, r4
 8007824:	460a      	mov	r2, r1
 8007826:	fb91 f6f7 	sdiv	r6, r1, r7
 800782a:	fb07 1516 	mls	r5, r7, r6, r1
 800782e:	3530      	adds	r5, #48	; 0x30
 8007830:	2a63      	cmp	r2, #99	; 0x63
 8007832:	f104 34ff 	add.w	r4, r4, #4294967295
 8007836:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800783a:	4631      	mov	r1, r6
 800783c:	dcf1      	bgt.n	8007822 <__exponent+0x22>
 800783e:	3130      	adds	r1, #48	; 0x30
 8007840:	f1ae 0502 	sub.w	r5, lr, #2
 8007844:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007848:	1c44      	adds	r4, r0, #1
 800784a:	4629      	mov	r1, r5
 800784c:	4561      	cmp	r1, ip
 800784e:	d30a      	bcc.n	8007866 <__exponent+0x66>
 8007850:	f10d 0209 	add.w	r2, sp, #9
 8007854:	eba2 020e 	sub.w	r2, r2, lr
 8007858:	4565      	cmp	r5, ip
 800785a:	bf88      	it	hi
 800785c:	2200      	movhi	r2, #0
 800785e:	4413      	add	r3, r2
 8007860:	1a18      	subs	r0, r3, r0
 8007862:	b003      	add	sp, #12
 8007864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007866:	f811 2b01 	ldrb.w	r2, [r1], #1
 800786a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800786e:	e7ed      	b.n	800784c <__exponent+0x4c>
 8007870:	2330      	movs	r3, #48	; 0x30
 8007872:	3130      	adds	r1, #48	; 0x30
 8007874:	7083      	strb	r3, [r0, #2]
 8007876:	70c1      	strb	r1, [r0, #3]
 8007878:	1d03      	adds	r3, r0, #4
 800787a:	e7f1      	b.n	8007860 <__exponent+0x60>

0800787c <_printf_float>:
 800787c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007880:	ed2d 8b02 	vpush	{d8}
 8007884:	b08d      	sub	sp, #52	; 0x34
 8007886:	460c      	mov	r4, r1
 8007888:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800788c:	4616      	mov	r6, r2
 800788e:	461f      	mov	r7, r3
 8007890:	4605      	mov	r5, r0
 8007892:	f001 fb77 	bl	8008f84 <_localeconv_r>
 8007896:	f8d0 a000 	ldr.w	sl, [r0]
 800789a:	4650      	mov	r0, sl
 800789c:	f7f8 fc98 	bl	80001d0 <strlen>
 80078a0:	2300      	movs	r3, #0
 80078a2:	930a      	str	r3, [sp, #40]	; 0x28
 80078a4:	6823      	ldr	r3, [r4, #0]
 80078a6:	9305      	str	r3, [sp, #20]
 80078a8:	f8d8 3000 	ldr.w	r3, [r8]
 80078ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80078b0:	3307      	adds	r3, #7
 80078b2:	f023 0307 	bic.w	r3, r3, #7
 80078b6:	f103 0208 	add.w	r2, r3, #8
 80078ba:	f8c8 2000 	str.w	r2, [r8]
 80078be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80078c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80078ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80078ce:	9307      	str	r3, [sp, #28]
 80078d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80078d4:	ee08 0a10 	vmov	s16, r0
 80078d8:	4b9f      	ldr	r3, [pc, #636]	; (8007b58 <_printf_float+0x2dc>)
 80078da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078de:	f04f 32ff 	mov.w	r2, #4294967295
 80078e2:	f7f9 f923 	bl	8000b2c <__aeabi_dcmpun>
 80078e6:	bb88      	cbnz	r0, 800794c <_printf_float+0xd0>
 80078e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078ec:	4b9a      	ldr	r3, [pc, #616]	; (8007b58 <_printf_float+0x2dc>)
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	f7f9 f8fd 	bl	8000af0 <__aeabi_dcmple>
 80078f6:	bb48      	cbnz	r0, 800794c <_printf_float+0xd0>
 80078f8:	2200      	movs	r2, #0
 80078fa:	2300      	movs	r3, #0
 80078fc:	4640      	mov	r0, r8
 80078fe:	4649      	mov	r1, r9
 8007900:	f7f9 f8ec 	bl	8000adc <__aeabi_dcmplt>
 8007904:	b110      	cbz	r0, 800790c <_printf_float+0x90>
 8007906:	232d      	movs	r3, #45	; 0x2d
 8007908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790c:	4b93      	ldr	r3, [pc, #588]	; (8007b5c <_printf_float+0x2e0>)
 800790e:	4894      	ldr	r0, [pc, #592]	; (8007b60 <_printf_float+0x2e4>)
 8007910:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007914:	bf94      	ite	ls
 8007916:	4698      	movls	r8, r3
 8007918:	4680      	movhi	r8, r0
 800791a:	2303      	movs	r3, #3
 800791c:	6123      	str	r3, [r4, #16]
 800791e:	9b05      	ldr	r3, [sp, #20]
 8007920:	f023 0204 	bic.w	r2, r3, #4
 8007924:	6022      	str	r2, [r4, #0]
 8007926:	f04f 0900 	mov.w	r9, #0
 800792a:	9700      	str	r7, [sp, #0]
 800792c:	4633      	mov	r3, r6
 800792e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007930:	4621      	mov	r1, r4
 8007932:	4628      	mov	r0, r5
 8007934:	f000 f9d8 	bl	8007ce8 <_printf_common>
 8007938:	3001      	adds	r0, #1
 800793a:	f040 8090 	bne.w	8007a5e <_printf_float+0x1e2>
 800793e:	f04f 30ff 	mov.w	r0, #4294967295
 8007942:	b00d      	add	sp, #52	; 0x34
 8007944:	ecbd 8b02 	vpop	{d8}
 8007948:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800794c:	4642      	mov	r2, r8
 800794e:	464b      	mov	r3, r9
 8007950:	4640      	mov	r0, r8
 8007952:	4649      	mov	r1, r9
 8007954:	f7f9 f8ea 	bl	8000b2c <__aeabi_dcmpun>
 8007958:	b140      	cbz	r0, 800796c <_printf_float+0xf0>
 800795a:	464b      	mov	r3, r9
 800795c:	2b00      	cmp	r3, #0
 800795e:	bfbc      	itt	lt
 8007960:	232d      	movlt	r3, #45	; 0x2d
 8007962:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007966:	487f      	ldr	r0, [pc, #508]	; (8007b64 <_printf_float+0x2e8>)
 8007968:	4b7f      	ldr	r3, [pc, #508]	; (8007b68 <_printf_float+0x2ec>)
 800796a:	e7d1      	b.n	8007910 <_printf_float+0x94>
 800796c:	6863      	ldr	r3, [r4, #4]
 800796e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007972:	9206      	str	r2, [sp, #24]
 8007974:	1c5a      	adds	r2, r3, #1
 8007976:	d13f      	bne.n	80079f8 <_printf_float+0x17c>
 8007978:	2306      	movs	r3, #6
 800797a:	6063      	str	r3, [r4, #4]
 800797c:	9b05      	ldr	r3, [sp, #20]
 800797e:	6861      	ldr	r1, [r4, #4]
 8007980:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007984:	2300      	movs	r3, #0
 8007986:	9303      	str	r3, [sp, #12]
 8007988:	ab0a      	add	r3, sp, #40	; 0x28
 800798a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800798e:	ab09      	add	r3, sp, #36	; 0x24
 8007990:	ec49 8b10 	vmov	d0, r8, r9
 8007994:	9300      	str	r3, [sp, #0]
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800799c:	4628      	mov	r0, r5
 800799e:	f7ff fecd 	bl	800773c <__cvt>
 80079a2:	9b06      	ldr	r3, [sp, #24]
 80079a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a6:	2b47      	cmp	r3, #71	; 0x47
 80079a8:	4680      	mov	r8, r0
 80079aa:	d108      	bne.n	80079be <_printf_float+0x142>
 80079ac:	1cc8      	adds	r0, r1, #3
 80079ae:	db02      	blt.n	80079b6 <_printf_float+0x13a>
 80079b0:	6863      	ldr	r3, [r4, #4]
 80079b2:	4299      	cmp	r1, r3
 80079b4:	dd41      	ble.n	8007a3a <_printf_float+0x1be>
 80079b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80079ba:	fa5f fb8b 	uxtb.w	fp, fp
 80079be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80079c2:	d820      	bhi.n	8007a06 <_printf_float+0x18a>
 80079c4:	3901      	subs	r1, #1
 80079c6:	465a      	mov	r2, fp
 80079c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80079cc:	9109      	str	r1, [sp, #36]	; 0x24
 80079ce:	f7ff ff17 	bl	8007800 <__exponent>
 80079d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80079d4:	1813      	adds	r3, r2, r0
 80079d6:	2a01      	cmp	r2, #1
 80079d8:	4681      	mov	r9, r0
 80079da:	6123      	str	r3, [r4, #16]
 80079dc:	dc02      	bgt.n	80079e4 <_printf_float+0x168>
 80079de:	6822      	ldr	r2, [r4, #0]
 80079e0:	07d2      	lsls	r2, r2, #31
 80079e2:	d501      	bpl.n	80079e8 <_printf_float+0x16c>
 80079e4:	3301      	adds	r3, #1
 80079e6:	6123      	str	r3, [r4, #16]
 80079e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d09c      	beq.n	800792a <_printf_float+0xae>
 80079f0:	232d      	movs	r3, #45	; 0x2d
 80079f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079f6:	e798      	b.n	800792a <_printf_float+0xae>
 80079f8:	9a06      	ldr	r2, [sp, #24]
 80079fa:	2a47      	cmp	r2, #71	; 0x47
 80079fc:	d1be      	bne.n	800797c <_printf_float+0x100>
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1bc      	bne.n	800797c <_printf_float+0x100>
 8007a02:	2301      	movs	r3, #1
 8007a04:	e7b9      	b.n	800797a <_printf_float+0xfe>
 8007a06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007a0a:	d118      	bne.n	8007a3e <_printf_float+0x1c2>
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	6863      	ldr	r3, [r4, #4]
 8007a10:	dd0b      	ble.n	8007a2a <_printf_float+0x1ae>
 8007a12:	6121      	str	r1, [r4, #16]
 8007a14:	b913      	cbnz	r3, 8007a1c <_printf_float+0x1a0>
 8007a16:	6822      	ldr	r2, [r4, #0]
 8007a18:	07d0      	lsls	r0, r2, #31
 8007a1a:	d502      	bpl.n	8007a22 <_printf_float+0x1a6>
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	440b      	add	r3, r1
 8007a20:	6123      	str	r3, [r4, #16]
 8007a22:	65a1      	str	r1, [r4, #88]	; 0x58
 8007a24:	f04f 0900 	mov.w	r9, #0
 8007a28:	e7de      	b.n	80079e8 <_printf_float+0x16c>
 8007a2a:	b913      	cbnz	r3, 8007a32 <_printf_float+0x1b6>
 8007a2c:	6822      	ldr	r2, [r4, #0]
 8007a2e:	07d2      	lsls	r2, r2, #31
 8007a30:	d501      	bpl.n	8007a36 <_printf_float+0x1ba>
 8007a32:	3302      	adds	r3, #2
 8007a34:	e7f4      	b.n	8007a20 <_printf_float+0x1a4>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e7f2      	b.n	8007a20 <_printf_float+0x1a4>
 8007a3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007a3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a40:	4299      	cmp	r1, r3
 8007a42:	db05      	blt.n	8007a50 <_printf_float+0x1d4>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	6121      	str	r1, [r4, #16]
 8007a48:	07d8      	lsls	r0, r3, #31
 8007a4a:	d5ea      	bpl.n	8007a22 <_printf_float+0x1a6>
 8007a4c:	1c4b      	adds	r3, r1, #1
 8007a4e:	e7e7      	b.n	8007a20 <_printf_float+0x1a4>
 8007a50:	2900      	cmp	r1, #0
 8007a52:	bfd4      	ite	le
 8007a54:	f1c1 0202 	rsble	r2, r1, #2
 8007a58:	2201      	movgt	r2, #1
 8007a5a:	4413      	add	r3, r2
 8007a5c:	e7e0      	b.n	8007a20 <_printf_float+0x1a4>
 8007a5e:	6823      	ldr	r3, [r4, #0]
 8007a60:	055a      	lsls	r2, r3, #21
 8007a62:	d407      	bmi.n	8007a74 <_printf_float+0x1f8>
 8007a64:	6923      	ldr	r3, [r4, #16]
 8007a66:	4642      	mov	r2, r8
 8007a68:	4631      	mov	r1, r6
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	47b8      	blx	r7
 8007a6e:	3001      	adds	r0, #1
 8007a70:	d12c      	bne.n	8007acc <_printf_float+0x250>
 8007a72:	e764      	b.n	800793e <_printf_float+0xc2>
 8007a74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a78:	f240 80e0 	bls.w	8007c3c <_printf_float+0x3c0>
 8007a7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a80:	2200      	movs	r2, #0
 8007a82:	2300      	movs	r3, #0
 8007a84:	f7f9 f820 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a88:	2800      	cmp	r0, #0
 8007a8a:	d034      	beq.n	8007af6 <_printf_float+0x27a>
 8007a8c:	4a37      	ldr	r2, [pc, #220]	; (8007b6c <_printf_float+0x2f0>)
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f af51 	beq.w	800793e <_printf_float+0xc2>
 8007a9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	db02      	blt.n	8007aaa <_printf_float+0x22e>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07d8      	lsls	r0, r3, #31
 8007aa8:	d510      	bpl.n	8007acc <_printf_float+0x250>
 8007aaa:	ee18 3a10 	vmov	r3, s16
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af41 	beq.w	800793e <_printf_float+0xc2>
 8007abc:	f04f 0800 	mov.w	r8, #0
 8007ac0:	f104 091a 	add.w	r9, r4, #26
 8007ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	4543      	cmp	r3, r8
 8007aca:	dc09      	bgt.n	8007ae0 <_printf_float+0x264>
 8007acc:	6823      	ldr	r3, [r4, #0]
 8007ace:	079b      	lsls	r3, r3, #30
 8007ad0:	f100 8105 	bmi.w	8007cde <_printf_float+0x462>
 8007ad4:	68e0      	ldr	r0, [r4, #12]
 8007ad6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ad8:	4298      	cmp	r0, r3
 8007ada:	bfb8      	it	lt
 8007adc:	4618      	movlt	r0, r3
 8007ade:	e730      	b.n	8007942 <_printf_float+0xc6>
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	464a      	mov	r2, r9
 8007ae4:	4631      	mov	r1, r6
 8007ae6:	4628      	mov	r0, r5
 8007ae8:	47b8      	blx	r7
 8007aea:	3001      	adds	r0, #1
 8007aec:	f43f af27 	beq.w	800793e <_printf_float+0xc2>
 8007af0:	f108 0801 	add.w	r8, r8, #1
 8007af4:	e7e6      	b.n	8007ac4 <_printf_float+0x248>
 8007af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	dc39      	bgt.n	8007b70 <_printf_float+0x2f4>
 8007afc:	4a1b      	ldr	r2, [pc, #108]	; (8007b6c <_printf_float+0x2f0>)
 8007afe:	2301      	movs	r3, #1
 8007b00:	4631      	mov	r1, r6
 8007b02:	4628      	mov	r0, r5
 8007b04:	47b8      	blx	r7
 8007b06:	3001      	adds	r0, #1
 8007b08:	f43f af19 	beq.w	800793e <_printf_float+0xc2>
 8007b0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b10:	4313      	orrs	r3, r2
 8007b12:	d102      	bne.n	8007b1a <_printf_float+0x29e>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	07d9      	lsls	r1, r3, #31
 8007b18:	d5d8      	bpl.n	8007acc <_printf_float+0x250>
 8007b1a:	ee18 3a10 	vmov	r3, s16
 8007b1e:	4652      	mov	r2, sl
 8007b20:	4631      	mov	r1, r6
 8007b22:	4628      	mov	r0, r5
 8007b24:	47b8      	blx	r7
 8007b26:	3001      	adds	r0, #1
 8007b28:	f43f af09 	beq.w	800793e <_printf_float+0xc2>
 8007b2c:	f04f 0900 	mov.w	r9, #0
 8007b30:	f104 0a1a 	add.w	sl, r4, #26
 8007b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b36:	425b      	negs	r3, r3
 8007b38:	454b      	cmp	r3, r9
 8007b3a:	dc01      	bgt.n	8007b40 <_printf_float+0x2c4>
 8007b3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b3e:	e792      	b.n	8007a66 <_printf_float+0x1ea>
 8007b40:	2301      	movs	r3, #1
 8007b42:	4652      	mov	r2, sl
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f43f aef7 	beq.w	800793e <_printf_float+0xc2>
 8007b50:	f109 0901 	add.w	r9, r9, #1
 8007b54:	e7ee      	b.n	8007b34 <_printf_float+0x2b8>
 8007b56:	bf00      	nop
 8007b58:	7fefffff 	.word	0x7fefffff
 8007b5c:	0800a630 	.word	0x0800a630
 8007b60:	0800a634 	.word	0x0800a634
 8007b64:	0800a63c 	.word	0x0800a63c
 8007b68:	0800a638 	.word	0x0800a638
 8007b6c:	0800a640 	.word	0x0800a640
 8007b70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b74:	429a      	cmp	r2, r3
 8007b76:	bfa8      	it	ge
 8007b78:	461a      	movge	r2, r3
 8007b7a:	2a00      	cmp	r2, #0
 8007b7c:	4691      	mov	r9, r2
 8007b7e:	dc37      	bgt.n	8007bf0 <_printf_float+0x374>
 8007b80:	f04f 0b00 	mov.w	fp, #0
 8007b84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b88:	f104 021a 	add.w	r2, r4, #26
 8007b8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b8e:	9305      	str	r3, [sp, #20]
 8007b90:	eba3 0309 	sub.w	r3, r3, r9
 8007b94:	455b      	cmp	r3, fp
 8007b96:	dc33      	bgt.n	8007c00 <_printf_float+0x384>
 8007b98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	db3b      	blt.n	8007c18 <_printf_float+0x39c>
 8007ba0:	6823      	ldr	r3, [r4, #0]
 8007ba2:	07da      	lsls	r2, r3, #31
 8007ba4:	d438      	bmi.n	8007c18 <_printf_float+0x39c>
 8007ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ba8:	9b05      	ldr	r3, [sp, #20]
 8007baa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007bac:	1ad3      	subs	r3, r2, r3
 8007bae:	eba2 0901 	sub.w	r9, r2, r1
 8007bb2:	4599      	cmp	r9, r3
 8007bb4:	bfa8      	it	ge
 8007bb6:	4699      	movge	r9, r3
 8007bb8:	f1b9 0f00 	cmp.w	r9, #0
 8007bbc:	dc35      	bgt.n	8007c2a <_printf_float+0x3ae>
 8007bbe:	f04f 0800 	mov.w	r8, #0
 8007bc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bc6:	f104 0a1a 	add.w	sl, r4, #26
 8007bca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007bce:	1a9b      	subs	r3, r3, r2
 8007bd0:	eba3 0309 	sub.w	r3, r3, r9
 8007bd4:	4543      	cmp	r3, r8
 8007bd6:	f77f af79 	ble.w	8007acc <_printf_float+0x250>
 8007bda:	2301      	movs	r3, #1
 8007bdc:	4652      	mov	r2, sl
 8007bde:	4631      	mov	r1, r6
 8007be0:	4628      	mov	r0, r5
 8007be2:	47b8      	blx	r7
 8007be4:	3001      	adds	r0, #1
 8007be6:	f43f aeaa 	beq.w	800793e <_printf_float+0xc2>
 8007bea:	f108 0801 	add.w	r8, r8, #1
 8007bee:	e7ec      	b.n	8007bca <_printf_float+0x34e>
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	4631      	mov	r1, r6
 8007bf4:	4642      	mov	r2, r8
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	47b8      	blx	r7
 8007bfa:	3001      	adds	r0, #1
 8007bfc:	d1c0      	bne.n	8007b80 <_printf_float+0x304>
 8007bfe:	e69e      	b.n	800793e <_printf_float+0xc2>
 8007c00:	2301      	movs	r3, #1
 8007c02:	4631      	mov	r1, r6
 8007c04:	4628      	mov	r0, r5
 8007c06:	9205      	str	r2, [sp, #20]
 8007c08:	47b8      	blx	r7
 8007c0a:	3001      	adds	r0, #1
 8007c0c:	f43f ae97 	beq.w	800793e <_printf_float+0xc2>
 8007c10:	9a05      	ldr	r2, [sp, #20]
 8007c12:	f10b 0b01 	add.w	fp, fp, #1
 8007c16:	e7b9      	b.n	8007b8c <_printf_float+0x310>
 8007c18:	ee18 3a10 	vmov	r3, s16
 8007c1c:	4652      	mov	r2, sl
 8007c1e:	4631      	mov	r1, r6
 8007c20:	4628      	mov	r0, r5
 8007c22:	47b8      	blx	r7
 8007c24:	3001      	adds	r0, #1
 8007c26:	d1be      	bne.n	8007ba6 <_printf_float+0x32a>
 8007c28:	e689      	b.n	800793e <_printf_float+0xc2>
 8007c2a:	9a05      	ldr	r2, [sp, #20]
 8007c2c:	464b      	mov	r3, r9
 8007c2e:	4442      	add	r2, r8
 8007c30:	4631      	mov	r1, r6
 8007c32:	4628      	mov	r0, r5
 8007c34:	47b8      	blx	r7
 8007c36:	3001      	adds	r0, #1
 8007c38:	d1c1      	bne.n	8007bbe <_printf_float+0x342>
 8007c3a:	e680      	b.n	800793e <_printf_float+0xc2>
 8007c3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c3e:	2a01      	cmp	r2, #1
 8007c40:	dc01      	bgt.n	8007c46 <_printf_float+0x3ca>
 8007c42:	07db      	lsls	r3, r3, #31
 8007c44:	d538      	bpl.n	8007cb8 <_printf_float+0x43c>
 8007c46:	2301      	movs	r3, #1
 8007c48:	4642      	mov	r2, r8
 8007c4a:	4631      	mov	r1, r6
 8007c4c:	4628      	mov	r0, r5
 8007c4e:	47b8      	blx	r7
 8007c50:	3001      	adds	r0, #1
 8007c52:	f43f ae74 	beq.w	800793e <_printf_float+0xc2>
 8007c56:	ee18 3a10 	vmov	r3, s16
 8007c5a:	4652      	mov	r2, sl
 8007c5c:	4631      	mov	r1, r6
 8007c5e:	4628      	mov	r0, r5
 8007c60:	47b8      	blx	r7
 8007c62:	3001      	adds	r0, #1
 8007c64:	f43f ae6b 	beq.w	800793e <_printf_float+0xc2>
 8007c68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f7f8 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c74:	b9d8      	cbnz	r0, 8007cae <_printf_float+0x432>
 8007c76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c78:	f108 0201 	add.w	r2, r8, #1
 8007c7c:	3b01      	subs	r3, #1
 8007c7e:	4631      	mov	r1, r6
 8007c80:	4628      	mov	r0, r5
 8007c82:	47b8      	blx	r7
 8007c84:	3001      	adds	r0, #1
 8007c86:	d10e      	bne.n	8007ca6 <_printf_float+0x42a>
 8007c88:	e659      	b.n	800793e <_printf_float+0xc2>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4652      	mov	r2, sl
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f ae52 	beq.w	800793e <_printf_float+0xc2>
 8007c9a:	f108 0801 	add.w	r8, r8, #1
 8007c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ca0:	3b01      	subs	r3, #1
 8007ca2:	4543      	cmp	r3, r8
 8007ca4:	dcf1      	bgt.n	8007c8a <_printf_float+0x40e>
 8007ca6:	464b      	mov	r3, r9
 8007ca8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007cac:	e6dc      	b.n	8007a68 <_printf_float+0x1ec>
 8007cae:	f04f 0800 	mov.w	r8, #0
 8007cb2:	f104 0a1a 	add.w	sl, r4, #26
 8007cb6:	e7f2      	b.n	8007c9e <_printf_float+0x422>
 8007cb8:	2301      	movs	r3, #1
 8007cba:	4642      	mov	r2, r8
 8007cbc:	e7df      	b.n	8007c7e <_printf_float+0x402>
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	464a      	mov	r2, r9
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b8      	blx	r7
 8007cc8:	3001      	adds	r0, #1
 8007cca:	f43f ae38 	beq.w	800793e <_printf_float+0xc2>
 8007cce:	f108 0801 	add.w	r8, r8, #1
 8007cd2:	68e3      	ldr	r3, [r4, #12]
 8007cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007cd6:	1a5b      	subs	r3, r3, r1
 8007cd8:	4543      	cmp	r3, r8
 8007cda:	dcf0      	bgt.n	8007cbe <_printf_float+0x442>
 8007cdc:	e6fa      	b.n	8007ad4 <_printf_float+0x258>
 8007cde:	f04f 0800 	mov.w	r8, #0
 8007ce2:	f104 0919 	add.w	r9, r4, #25
 8007ce6:	e7f4      	b.n	8007cd2 <_printf_float+0x456>

08007ce8 <_printf_common>:
 8007ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cec:	4616      	mov	r6, r2
 8007cee:	4699      	mov	r9, r3
 8007cf0:	688a      	ldr	r2, [r1, #8]
 8007cf2:	690b      	ldr	r3, [r1, #16]
 8007cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	bfb8      	it	lt
 8007cfc:	4613      	movlt	r3, r2
 8007cfe:	6033      	str	r3, [r6, #0]
 8007d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d04:	4607      	mov	r7, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	b10a      	cbz	r2, 8007d0e <_printf_common+0x26>
 8007d0a:	3301      	adds	r3, #1
 8007d0c:	6033      	str	r3, [r6, #0]
 8007d0e:	6823      	ldr	r3, [r4, #0]
 8007d10:	0699      	lsls	r1, r3, #26
 8007d12:	bf42      	ittt	mi
 8007d14:	6833      	ldrmi	r3, [r6, #0]
 8007d16:	3302      	addmi	r3, #2
 8007d18:	6033      	strmi	r3, [r6, #0]
 8007d1a:	6825      	ldr	r5, [r4, #0]
 8007d1c:	f015 0506 	ands.w	r5, r5, #6
 8007d20:	d106      	bne.n	8007d30 <_printf_common+0x48>
 8007d22:	f104 0a19 	add.w	sl, r4, #25
 8007d26:	68e3      	ldr	r3, [r4, #12]
 8007d28:	6832      	ldr	r2, [r6, #0]
 8007d2a:	1a9b      	subs	r3, r3, r2
 8007d2c:	42ab      	cmp	r3, r5
 8007d2e:	dc26      	bgt.n	8007d7e <_printf_common+0x96>
 8007d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d34:	1e13      	subs	r3, r2, #0
 8007d36:	6822      	ldr	r2, [r4, #0]
 8007d38:	bf18      	it	ne
 8007d3a:	2301      	movne	r3, #1
 8007d3c:	0692      	lsls	r2, r2, #26
 8007d3e:	d42b      	bmi.n	8007d98 <_printf_common+0xb0>
 8007d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d44:	4649      	mov	r1, r9
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d01e      	beq.n	8007d8c <_printf_common+0xa4>
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	68e5      	ldr	r5, [r4, #12]
 8007d52:	6832      	ldr	r2, [r6, #0]
 8007d54:	f003 0306 	and.w	r3, r3, #6
 8007d58:	2b04      	cmp	r3, #4
 8007d5a:	bf08      	it	eq
 8007d5c:	1aad      	subeq	r5, r5, r2
 8007d5e:	68a3      	ldr	r3, [r4, #8]
 8007d60:	6922      	ldr	r2, [r4, #16]
 8007d62:	bf0c      	ite	eq
 8007d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d68:	2500      	movne	r5, #0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	bfc4      	itt	gt
 8007d6e:	1a9b      	subgt	r3, r3, r2
 8007d70:	18ed      	addgt	r5, r5, r3
 8007d72:	2600      	movs	r6, #0
 8007d74:	341a      	adds	r4, #26
 8007d76:	42b5      	cmp	r5, r6
 8007d78:	d11a      	bne.n	8007db0 <_printf_common+0xc8>
 8007d7a:	2000      	movs	r0, #0
 8007d7c:	e008      	b.n	8007d90 <_printf_common+0xa8>
 8007d7e:	2301      	movs	r3, #1
 8007d80:	4652      	mov	r2, sl
 8007d82:	4649      	mov	r1, r9
 8007d84:	4638      	mov	r0, r7
 8007d86:	47c0      	blx	r8
 8007d88:	3001      	adds	r0, #1
 8007d8a:	d103      	bne.n	8007d94 <_printf_common+0xac>
 8007d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d94:	3501      	adds	r5, #1
 8007d96:	e7c6      	b.n	8007d26 <_printf_common+0x3e>
 8007d98:	18e1      	adds	r1, r4, r3
 8007d9a:	1c5a      	adds	r2, r3, #1
 8007d9c:	2030      	movs	r0, #48	; 0x30
 8007d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007da2:	4422      	add	r2, r4
 8007da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007dac:	3302      	adds	r3, #2
 8007dae:	e7c7      	b.n	8007d40 <_printf_common+0x58>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4622      	mov	r2, r4
 8007db4:	4649      	mov	r1, r9
 8007db6:	4638      	mov	r0, r7
 8007db8:	47c0      	blx	r8
 8007dba:	3001      	adds	r0, #1
 8007dbc:	d0e6      	beq.n	8007d8c <_printf_common+0xa4>
 8007dbe:	3601      	adds	r6, #1
 8007dc0:	e7d9      	b.n	8007d76 <_printf_common+0x8e>
	...

08007dc4 <_printf_i>:
 8007dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007dc8:	460c      	mov	r4, r1
 8007dca:	4691      	mov	r9, r2
 8007dcc:	7e27      	ldrb	r7, [r4, #24]
 8007dce:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007dd0:	2f78      	cmp	r7, #120	; 0x78
 8007dd2:	4680      	mov	r8, r0
 8007dd4:	469a      	mov	sl, r3
 8007dd6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dda:	d807      	bhi.n	8007dec <_printf_i+0x28>
 8007ddc:	2f62      	cmp	r7, #98	; 0x62
 8007dde:	d80a      	bhi.n	8007df6 <_printf_i+0x32>
 8007de0:	2f00      	cmp	r7, #0
 8007de2:	f000 80d8 	beq.w	8007f96 <_printf_i+0x1d2>
 8007de6:	2f58      	cmp	r7, #88	; 0x58
 8007de8:	f000 80a3 	beq.w	8007f32 <_printf_i+0x16e>
 8007dec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007df4:	e03a      	b.n	8007e6c <_printf_i+0xa8>
 8007df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007dfa:	2b15      	cmp	r3, #21
 8007dfc:	d8f6      	bhi.n	8007dec <_printf_i+0x28>
 8007dfe:	a001      	add	r0, pc, #4	; (adr r0, 8007e04 <_printf_i+0x40>)
 8007e00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007e04:	08007e5d 	.word	0x08007e5d
 8007e08:	08007e71 	.word	0x08007e71
 8007e0c:	08007ded 	.word	0x08007ded
 8007e10:	08007ded 	.word	0x08007ded
 8007e14:	08007ded 	.word	0x08007ded
 8007e18:	08007ded 	.word	0x08007ded
 8007e1c:	08007e71 	.word	0x08007e71
 8007e20:	08007ded 	.word	0x08007ded
 8007e24:	08007ded 	.word	0x08007ded
 8007e28:	08007ded 	.word	0x08007ded
 8007e2c:	08007ded 	.word	0x08007ded
 8007e30:	08007f7d 	.word	0x08007f7d
 8007e34:	08007ea1 	.word	0x08007ea1
 8007e38:	08007f5f 	.word	0x08007f5f
 8007e3c:	08007ded 	.word	0x08007ded
 8007e40:	08007ded 	.word	0x08007ded
 8007e44:	08007f9f 	.word	0x08007f9f
 8007e48:	08007ded 	.word	0x08007ded
 8007e4c:	08007ea1 	.word	0x08007ea1
 8007e50:	08007ded 	.word	0x08007ded
 8007e54:	08007ded 	.word	0x08007ded
 8007e58:	08007f67 	.word	0x08007f67
 8007e5c:	680b      	ldr	r3, [r1, #0]
 8007e5e:	1d1a      	adds	r2, r3, #4
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	600a      	str	r2, [r1, #0]
 8007e64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e0a3      	b.n	8007fb8 <_printf_i+0x1f4>
 8007e70:	6825      	ldr	r5, [r4, #0]
 8007e72:	6808      	ldr	r0, [r1, #0]
 8007e74:	062e      	lsls	r6, r5, #24
 8007e76:	f100 0304 	add.w	r3, r0, #4
 8007e7a:	d50a      	bpl.n	8007e92 <_printf_i+0xce>
 8007e7c:	6805      	ldr	r5, [r0, #0]
 8007e7e:	600b      	str	r3, [r1, #0]
 8007e80:	2d00      	cmp	r5, #0
 8007e82:	da03      	bge.n	8007e8c <_printf_i+0xc8>
 8007e84:	232d      	movs	r3, #45	; 0x2d
 8007e86:	426d      	negs	r5, r5
 8007e88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e8c:	485e      	ldr	r0, [pc, #376]	; (8008008 <_printf_i+0x244>)
 8007e8e:	230a      	movs	r3, #10
 8007e90:	e019      	b.n	8007ec6 <_printf_i+0x102>
 8007e92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007e96:	6805      	ldr	r5, [r0, #0]
 8007e98:	600b      	str	r3, [r1, #0]
 8007e9a:	bf18      	it	ne
 8007e9c:	b22d      	sxthne	r5, r5
 8007e9e:	e7ef      	b.n	8007e80 <_printf_i+0xbc>
 8007ea0:	680b      	ldr	r3, [r1, #0]
 8007ea2:	6825      	ldr	r5, [r4, #0]
 8007ea4:	1d18      	adds	r0, r3, #4
 8007ea6:	6008      	str	r0, [r1, #0]
 8007ea8:	0628      	lsls	r0, r5, #24
 8007eaa:	d501      	bpl.n	8007eb0 <_printf_i+0xec>
 8007eac:	681d      	ldr	r5, [r3, #0]
 8007eae:	e002      	b.n	8007eb6 <_printf_i+0xf2>
 8007eb0:	0669      	lsls	r1, r5, #25
 8007eb2:	d5fb      	bpl.n	8007eac <_printf_i+0xe8>
 8007eb4:	881d      	ldrh	r5, [r3, #0]
 8007eb6:	4854      	ldr	r0, [pc, #336]	; (8008008 <_printf_i+0x244>)
 8007eb8:	2f6f      	cmp	r7, #111	; 0x6f
 8007eba:	bf0c      	ite	eq
 8007ebc:	2308      	moveq	r3, #8
 8007ebe:	230a      	movne	r3, #10
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007ec6:	6866      	ldr	r6, [r4, #4]
 8007ec8:	60a6      	str	r6, [r4, #8]
 8007eca:	2e00      	cmp	r6, #0
 8007ecc:	bfa2      	ittt	ge
 8007ece:	6821      	ldrge	r1, [r4, #0]
 8007ed0:	f021 0104 	bicge.w	r1, r1, #4
 8007ed4:	6021      	strge	r1, [r4, #0]
 8007ed6:	b90d      	cbnz	r5, 8007edc <_printf_i+0x118>
 8007ed8:	2e00      	cmp	r6, #0
 8007eda:	d04d      	beq.n	8007f78 <_printf_i+0x1b4>
 8007edc:	4616      	mov	r6, r2
 8007ede:	fbb5 f1f3 	udiv	r1, r5, r3
 8007ee2:	fb03 5711 	mls	r7, r3, r1, r5
 8007ee6:	5dc7      	ldrb	r7, [r0, r7]
 8007ee8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007eec:	462f      	mov	r7, r5
 8007eee:	42bb      	cmp	r3, r7
 8007ef0:	460d      	mov	r5, r1
 8007ef2:	d9f4      	bls.n	8007ede <_printf_i+0x11a>
 8007ef4:	2b08      	cmp	r3, #8
 8007ef6:	d10b      	bne.n	8007f10 <_printf_i+0x14c>
 8007ef8:	6823      	ldr	r3, [r4, #0]
 8007efa:	07df      	lsls	r7, r3, #31
 8007efc:	d508      	bpl.n	8007f10 <_printf_i+0x14c>
 8007efe:	6923      	ldr	r3, [r4, #16]
 8007f00:	6861      	ldr	r1, [r4, #4]
 8007f02:	4299      	cmp	r1, r3
 8007f04:	bfde      	ittt	le
 8007f06:	2330      	movle	r3, #48	; 0x30
 8007f08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f0c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f10:	1b92      	subs	r2, r2, r6
 8007f12:	6122      	str	r2, [r4, #16]
 8007f14:	f8cd a000 	str.w	sl, [sp]
 8007f18:	464b      	mov	r3, r9
 8007f1a:	aa03      	add	r2, sp, #12
 8007f1c:	4621      	mov	r1, r4
 8007f1e:	4640      	mov	r0, r8
 8007f20:	f7ff fee2 	bl	8007ce8 <_printf_common>
 8007f24:	3001      	adds	r0, #1
 8007f26:	d14c      	bne.n	8007fc2 <_printf_i+0x1fe>
 8007f28:	f04f 30ff 	mov.w	r0, #4294967295
 8007f2c:	b004      	add	sp, #16
 8007f2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f32:	4835      	ldr	r0, [pc, #212]	; (8008008 <_printf_i+0x244>)
 8007f34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	680e      	ldr	r6, [r1, #0]
 8007f3c:	061f      	lsls	r7, r3, #24
 8007f3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007f42:	600e      	str	r6, [r1, #0]
 8007f44:	d514      	bpl.n	8007f70 <_printf_i+0x1ac>
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	bf44      	itt	mi
 8007f4a:	f043 0320 	orrmi.w	r3, r3, #32
 8007f4e:	6023      	strmi	r3, [r4, #0]
 8007f50:	b91d      	cbnz	r5, 8007f5a <_printf_i+0x196>
 8007f52:	6823      	ldr	r3, [r4, #0]
 8007f54:	f023 0320 	bic.w	r3, r3, #32
 8007f58:	6023      	str	r3, [r4, #0]
 8007f5a:	2310      	movs	r3, #16
 8007f5c:	e7b0      	b.n	8007ec0 <_printf_i+0xfc>
 8007f5e:	6823      	ldr	r3, [r4, #0]
 8007f60:	f043 0320 	orr.w	r3, r3, #32
 8007f64:	6023      	str	r3, [r4, #0]
 8007f66:	2378      	movs	r3, #120	; 0x78
 8007f68:	4828      	ldr	r0, [pc, #160]	; (800800c <_printf_i+0x248>)
 8007f6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f6e:	e7e3      	b.n	8007f38 <_printf_i+0x174>
 8007f70:	065e      	lsls	r6, r3, #25
 8007f72:	bf48      	it	mi
 8007f74:	b2ad      	uxthmi	r5, r5
 8007f76:	e7e6      	b.n	8007f46 <_printf_i+0x182>
 8007f78:	4616      	mov	r6, r2
 8007f7a:	e7bb      	b.n	8007ef4 <_printf_i+0x130>
 8007f7c:	680b      	ldr	r3, [r1, #0]
 8007f7e:	6826      	ldr	r6, [r4, #0]
 8007f80:	6960      	ldr	r0, [r4, #20]
 8007f82:	1d1d      	adds	r5, r3, #4
 8007f84:	600d      	str	r5, [r1, #0]
 8007f86:	0635      	lsls	r5, r6, #24
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	d501      	bpl.n	8007f90 <_printf_i+0x1cc>
 8007f8c:	6018      	str	r0, [r3, #0]
 8007f8e:	e002      	b.n	8007f96 <_printf_i+0x1d2>
 8007f90:	0671      	lsls	r1, r6, #25
 8007f92:	d5fb      	bpl.n	8007f8c <_printf_i+0x1c8>
 8007f94:	8018      	strh	r0, [r3, #0]
 8007f96:	2300      	movs	r3, #0
 8007f98:	6123      	str	r3, [r4, #16]
 8007f9a:	4616      	mov	r6, r2
 8007f9c:	e7ba      	b.n	8007f14 <_printf_i+0x150>
 8007f9e:	680b      	ldr	r3, [r1, #0]
 8007fa0:	1d1a      	adds	r2, r3, #4
 8007fa2:	600a      	str	r2, [r1, #0]
 8007fa4:	681e      	ldr	r6, [r3, #0]
 8007fa6:	6862      	ldr	r2, [r4, #4]
 8007fa8:	2100      	movs	r1, #0
 8007faa:	4630      	mov	r0, r6
 8007fac:	f7f8 f918 	bl	80001e0 <memchr>
 8007fb0:	b108      	cbz	r0, 8007fb6 <_printf_i+0x1f2>
 8007fb2:	1b80      	subs	r0, r0, r6
 8007fb4:	6060      	str	r0, [r4, #4]
 8007fb6:	6863      	ldr	r3, [r4, #4]
 8007fb8:	6123      	str	r3, [r4, #16]
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc0:	e7a8      	b.n	8007f14 <_printf_i+0x150>
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	4632      	mov	r2, r6
 8007fc6:	4649      	mov	r1, r9
 8007fc8:	4640      	mov	r0, r8
 8007fca:	47d0      	blx	sl
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d0ab      	beq.n	8007f28 <_printf_i+0x164>
 8007fd0:	6823      	ldr	r3, [r4, #0]
 8007fd2:	079b      	lsls	r3, r3, #30
 8007fd4:	d413      	bmi.n	8007ffe <_printf_i+0x23a>
 8007fd6:	68e0      	ldr	r0, [r4, #12]
 8007fd8:	9b03      	ldr	r3, [sp, #12]
 8007fda:	4298      	cmp	r0, r3
 8007fdc:	bfb8      	it	lt
 8007fde:	4618      	movlt	r0, r3
 8007fe0:	e7a4      	b.n	8007f2c <_printf_i+0x168>
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	4649      	mov	r1, r9
 8007fe8:	4640      	mov	r0, r8
 8007fea:	47d0      	blx	sl
 8007fec:	3001      	adds	r0, #1
 8007fee:	d09b      	beq.n	8007f28 <_printf_i+0x164>
 8007ff0:	3501      	adds	r5, #1
 8007ff2:	68e3      	ldr	r3, [r4, #12]
 8007ff4:	9903      	ldr	r1, [sp, #12]
 8007ff6:	1a5b      	subs	r3, r3, r1
 8007ff8:	42ab      	cmp	r3, r5
 8007ffa:	dcf2      	bgt.n	8007fe2 <_printf_i+0x21e>
 8007ffc:	e7eb      	b.n	8007fd6 <_printf_i+0x212>
 8007ffe:	2500      	movs	r5, #0
 8008000:	f104 0619 	add.w	r6, r4, #25
 8008004:	e7f5      	b.n	8007ff2 <_printf_i+0x22e>
 8008006:	bf00      	nop
 8008008:	0800a642 	.word	0x0800a642
 800800c:	0800a653 	.word	0x0800a653

08008010 <iprintf>:
 8008010:	b40f      	push	{r0, r1, r2, r3}
 8008012:	4b0a      	ldr	r3, [pc, #40]	; (800803c <iprintf+0x2c>)
 8008014:	b513      	push	{r0, r1, r4, lr}
 8008016:	681c      	ldr	r4, [r3, #0]
 8008018:	b124      	cbz	r4, 8008024 <iprintf+0x14>
 800801a:	69a3      	ldr	r3, [r4, #24]
 800801c:	b913      	cbnz	r3, 8008024 <iprintf+0x14>
 800801e:	4620      	mov	r0, r4
 8008020:	f000 ff12 	bl	8008e48 <__sinit>
 8008024:	ab05      	add	r3, sp, #20
 8008026:	9a04      	ldr	r2, [sp, #16]
 8008028:	68a1      	ldr	r1, [r4, #8]
 800802a:	9301      	str	r3, [sp, #4]
 800802c:	4620      	mov	r0, r4
 800802e:	f001 fd77 	bl	8009b20 <_vfiprintf_r>
 8008032:	b002      	add	sp, #8
 8008034:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008038:	b004      	add	sp, #16
 800803a:	4770      	bx	lr
 800803c:	20000154 	.word	0x20000154

08008040 <sniprintf>:
 8008040:	b40c      	push	{r2, r3}
 8008042:	b530      	push	{r4, r5, lr}
 8008044:	4b17      	ldr	r3, [pc, #92]	; (80080a4 <sniprintf+0x64>)
 8008046:	1e0c      	subs	r4, r1, #0
 8008048:	681d      	ldr	r5, [r3, #0]
 800804a:	b09d      	sub	sp, #116	; 0x74
 800804c:	da08      	bge.n	8008060 <sniprintf+0x20>
 800804e:	238b      	movs	r3, #139	; 0x8b
 8008050:	602b      	str	r3, [r5, #0]
 8008052:	f04f 30ff 	mov.w	r0, #4294967295
 8008056:	b01d      	add	sp, #116	; 0x74
 8008058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800805c:	b002      	add	sp, #8
 800805e:	4770      	bx	lr
 8008060:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008064:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008068:	bf14      	ite	ne
 800806a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800806e:	4623      	moveq	r3, r4
 8008070:	9304      	str	r3, [sp, #16]
 8008072:	9307      	str	r3, [sp, #28]
 8008074:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008078:	9002      	str	r0, [sp, #8]
 800807a:	9006      	str	r0, [sp, #24]
 800807c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008080:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008082:	ab21      	add	r3, sp, #132	; 0x84
 8008084:	a902      	add	r1, sp, #8
 8008086:	4628      	mov	r0, r5
 8008088:	9301      	str	r3, [sp, #4]
 800808a:	f001 fc1f 	bl	80098cc <_svfiprintf_r>
 800808e:	1c43      	adds	r3, r0, #1
 8008090:	bfbc      	itt	lt
 8008092:	238b      	movlt	r3, #139	; 0x8b
 8008094:	602b      	strlt	r3, [r5, #0]
 8008096:	2c00      	cmp	r4, #0
 8008098:	d0dd      	beq.n	8008056 <sniprintf+0x16>
 800809a:	9b02      	ldr	r3, [sp, #8]
 800809c:	2200      	movs	r2, #0
 800809e:	701a      	strb	r2, [r3, #0]
 80080a0:	e7d9      	b.n	8008056 <sniprintf+0x16>
 80080a2:	bf00      	nop
 80080a4:	20000154 	.word	0x20000154

080080a8 <quorem>:
 80080a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ac:	6903      	ldr	r3, [r0, #16]
 80080ae:	690c      	ldr	r4, [r1, #16]
 80080b0:	42a3      	cmp	r3, r4
 80080b2:	4607      	mov	r7, r0
 80080b4:	f2c0 8081 	blt.w	80081ba <quorem+0x112>
 80080b8:	3c01      	subs	r4, #1
 80080ba:	f101 0814 	add.w	r8, r1, #20
 80080be:	f100 0514 	add.w	r5, r0, #20
 80080c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80080c6:	9301      	str	r3, [sp, #4]
 80080c8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80080cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80080d0:	3301      	adds	r3, #1
 80080d2:	429a      	cmp	r2, r3
 80080d4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80080d8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80080dc:	fbb2 f6f3 	udiv	r6, r2, r3
 80080e0:	d331      	bcc.n	8008146 <quorem+0x9e>
 80080e2:	f04f 0e00 	mov.w	lr, #0
 80080e6:	4640      	mov	r0, r8
 80080e8:	46ac      	mov	ip, r5
 80080ea:	46f2      	mov	sl, lr
 80080ec:	f850 2b04 	ldr.w	r2, [r0], #4
 80080f0:	b293      	uxth	r3, r2
 80080f2:	fb06 e303 	mla	r3, r6, r3, lr
 80080f6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80080fa:	b29b      	uxth	r3, r3
 80080fc:	ebaa 0303 	sub.w	r3, sl, r3
 8008100:	0c12      	lsrs	r2, r2, #16
 8008102:	f8dc a000 	ldr.w	sl, [ip]
 8008106:	fb06 e202 	mla	r2, r6, r2, lr
 800810a:	fa13 f38a 	uxtah	r3, r3, sl
 800810e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008112:	fa1f fa82 	uxth.w	sl, r2
 8008116:	f8dc 2000 	ldr.w	r2, [ip]
 800811a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800811e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008122:	b29b      	uxth	r3, r3
 8008124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008128:	4581      	cmp	r9, r0
 800812a:	f84c 3b04 	str.w	r3, [ip], #4
 800812e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008132:	d2db      	bcs.n	80080ec <quorem+0x44>
 8008134:	f855 300b 	ldr.w	r3, [r5, fp]
 8008138:	b92b      	cbnz	r3, 8008146 <quorem+0x9e>
 800813a:	9b01      	ldr	r3, [sp, #4]
 800813c:	3b04      	subs	r3, #4
 800813e:	429d      	cmp	r5, r3
 8008140:	461a      	mov	r2, r3
 8008142:	d32e      	bcc.n	80081a2 <quorem+0xfa>
 8008144:	613c      	str	r4, [r7, #16]
 8008146:	4638      	mov	r0, r7
 8008148:	f001 f9aa 	bl	80094a0 <__mcmp>
 800814c:	2800      	cmp	r0, #0
 800814e:	db24      	blt.n	800819a <quorem+0xf2>
 8008150:	3601      	adds	r6, #1
 8008152:	4628      	mov	r0, r5
 8008154:	f04f 0c00 	mov.w	ip, #0
 8008158:	f858 2b04 	ldr.w	r2, [r8], #4
 800815c:	f8d0 e000 	ldr.w	lr, [r0]
 8008160:	b293      	uxth	r3, r2
 8008162:	ebac 0303 	sub.w	r3, ip, r3
 8008166:	0c12      	lsrs	r2, r2, #16
 8008168:	fa13 f38e 	uxtah	r3, r3, lr
 800816c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008174:	b29b      	uxth	r3, r3
 8008176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800817a:	45c1      	cmp	r9, r8
 800817c:	f840 3b04 	str.w	r3, [r0], #4
 8008180:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008184:	d2e8      	bcs.n	8008158 <quorem+0xb0>
 8008186:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800818a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800818e:	b922      	cbnz	r2, 800819a <quorem+0xf2>
 8008190:	3b04      	subs	r3, #4
 8008192:	429d      	cmp	r5, r3
 8008194:	461a      	mov	r2, r3
 8008196:	d30a      	bcc.n	80081ae <quorem+0x106>
 8008198:	613c      	str	r4, [r7, #16]
 800819a:	4630      	mov	r0, r6
 800819c:	b003      	add	sp, #12
 800819e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	3b04      	subs	r3, #4
 80081a6:	2a00      	cmp	r2, #0
 80081a8:	d1cc      	bne.n	8008144 <quorem+0x9c>
 80081aa:	3c01      	subs	r4, #1
 80081ac:	e7c7      	b.n	800813e <quorem+0x96>
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	3b04      	subs	r3, #4
 80081b2:	2a00      	cmp	r2, #0
 80081b4:	d1f0      	bne.n	8008198 <quorem+0xf0>
 80081b6:	3c01      	subs	r4, #1
 80081b8:	e7eb      	b.n	8008192 <quorem+0xea>
 80081ba:	2000      	movs	r0, #0
 80081bc:	e7ee      	b.n	800819c <quorem+0xf4>
	...

080081c0 <_dtoa_r>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	ed2d 8b02 	vpush	{d8}
 80081c8:	ec57 6b10 	vmov	r6, r7, d0
 80081cc:	b095      	sub	sp, #84	; 0x54
 80081ce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80081d0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80081d4:	9105      	str	r1, [sp, #20]
 80081d6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80081da:	4604      	mov	r4, r0
 80081dc:	9209      	str	r2, [sp, #36]	; 0x24
 80081de:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e0:	b975      	cbnz	r5, 8008200 <_dtoa_r+0x40>
 80081e2:	2010      	movs	r0, #16
 80081e4:	f000 fed6 	bl	8008f94 <malloc>
 80081e8:	4602      	mov	r2, r0
 80081ea:	6260      	str	r0, [r4, #36]	; 0x24
 80081ec:	b920      	cbnz	r0, 80081f8 <_dtoa_r+0x38>
 80081ee:	4bb2      	ldr	r3, [pc, #712]	; (80084b8 <_dtoa_r+0x2f8>)
 80081f0:	21ea      	movs	r1, #234	; 0xea
 80081f2:	48b2      	ldr	r0, [pc, #712]	; (80084bc <_dtoa_r+0x2fc>)
 80081f4:	f001 feea 	bl	8009fcc <__assert_func>
 80081f8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80081fc:	6005      	str	r5, [r0, #0]
 80081fe:	60c5      	str	r5, [r0, #12]
 8008200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008202:	6819      	ldr	r1, [r3, #0]
 8008204:	b151      	cbz	r1, 800821c <_dtoa_r+0x5c>
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	604a      	str	r2, [r1, #4]
 800820a:	2301      	movs	r3, #1
 800820c:	4093      	lsls	r3, r2
 800820e:	608b      	str	r3, [r1, #8]
 8008210:	4620      	mov	r0, r4
 8008212:	f000 ff07 	bl	8009024 <_Bfree>
 8008216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
 800821c:	1e3b      	subs	r3, r7, #0
 800821e:	bfb9      	ittee	lt
 8008220:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008224:	9303      	strlt	r3, [sp, #12]
 8008226:	2300      	movge	r3, #0
 8008228:	f8c8 3000 	strge.w	r3, [r8]
 800822c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008230:	4ba3      	ldr	r3, [pc, #652]	; (80084c0 <_dtoa_r+0x300>)
 8008232:	bfbc      	itt	lt
 8008234:	2201      	movlt	r2, #1
 8008236:	f8c8 2000 	strlt.w	r2, [r8]
 800823a:	ea33 0309 	bics.w	r3, r3, r9
 800823e:	d11b      	bne.n	8008278 <_dtoa_r+0xb8>
 8008240:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008242:	f242 730f 	movw	r3, #9999	; 0x270f
 8008246:	6013      	str	r3, [r2, #0]
 8008248:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800824c:	4333      	orrs	r3, r6
 800824e:	f000 857a 	beq.w	8008d46 <_dtoa_r+0xb86>
 8008252:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008254:	b963      	cbnz	r3, 8008270 <_dtoa_r+0xb0>
 8008256:	4b9b      	ldr	r3, [pc, #620]	; (80084c4 <_dtoa_r+0x304>)
 8008258:	e024      	b.n	80082a4 <_dtoa_r+0xe4>
 800825a:	4b9b      	ldr	r3, [pc, #620]	; (80084c8 <_dtoa_r+0x308>)
 800825c:	9300      	str	r3, [sp, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008262:	6013      	str	r3, [r2, #0]
 8008264:	9800      	ldr	r0, [sp, #0]
 8008266:	b015      	add	sp, #84	; 0x54
 8008268:	ecbd 8b02 	vpop	{d8}
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008270:	4b94      	ldr	r3, [pc, #592]	; (80084c4 <_dtoa_r+0x304>)
 8008272:	9300      	str	r3, [sp, #0]
 8008274:	3303      	adds	r3, #3
 8008276:	e7f3      	b.n	8008260 <_dtoa_r+0xa0>
 8008278:	ed9d 7b02 	vldr	d7, [sp, #8]
 800827c:	2200      	movs	r2, #0
 800827e:	ec51 0b17 	vmov	r0, r1, d7
 8008282:	2300      	movs	r3, #0
 8008284:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008288:	f7f8 fc1e 	bl	8000ac8 <__aeabi_dcmpeq>
 800828c:	4680      	mov	r8, r0
 800828e:	b158      	cbz	r0, 80082a8 <_dtoa_r+0xe8>
 8008290:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008292:	2301      	movs	r3, #1
 8008294:	6013      	str	r3, [r2, #0]
 8008296:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8551 	beq.w	8008d40 <_dtoa_r+0xb80>
 800829e:	488b      	ldr	r0, [pc, #556]	; (80084cc <_dtoa_r+0x30c>)
 80082a0:	6018      	str	r0, [r3, #0]
 80082a2:	1e43      	subs	r3, r0, #1
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	e7dd      	b.n	8008264 <_dtoa_r+0xa4>
 80082a8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80082ac:	aa12      	add	r2, sp, #72	; 0x48
 80082ae:	a913      	add	r1, sp, #76	; 0x4c
 80082b0:	4620      	mov	r0, r4
 80082b2:	f001 f999 	bl	80095e8 <__d2b>
 80082b6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082ba:	4683      	mov	fp, r0
 80082bc:	2d00      	cmp	r5, #0
 80082be:	d07c      	beq.n	80083ba <_dtoa_r+0x1fa>
 80082c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082c2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80082c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80082ca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80082ce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80082d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80082d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80082da:	4b7d      	ldr	r3, [pc, #500]	; (80084d0 <_dtoa_r+0x310>)
 80082dc:	2200      	movs	r2, #0
 80082de:	4630      	mov	r0, r6
 80082e0:	4639      	mov	r1, r7
 80082e2:	f7f7 ffd1 	bl	8000288 <__aeabi_dsub>
 80082e6:	a36e      	add	r3, pc, #440	; (adr r3, 80084a0 <_dtoa_r+0x2e0>)
 80082e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ec:	f7f8 f984 	bl	80005f8 <__aeabi_dmul>
 80082f0:	a36d      	add	r3, pc, #436	; (adr r3, 80084a8 <_dtoa_r+0x2e8>)
 80082f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082f6:	f7f7 ffc9 	bl	800028c <__adddf3>
 80082fa:	4606      	mov	r6, r0
 80082fc:	4628      	mov	r0, r5
 80082fe:	460f      	mov	r7, r1
 8008300:	f7f8 f910 	bl	8000524 <__aeabi_i2d>
 8008304:	a36a      	add	r3, pc, #424	; (adr r3, 80084b0 <_dtoa_r+0x2f0>)
 8008306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800830a:	f7f8 f975 	bl	80005f8 <__aeabi_dmul>
 800830e:	4602      	mov	r2, r0
 8008310:	460b      	mov	r3, r1
 8008312:	4630      	mov	r0, r6
 8008314:	4639      	mov	r1, r7
 8008316:	f7f7 ffb9 	bl	800028c <__adddf3>
 800831a:	4606      	mov	r6, r0
 800831c:	460f      	mov	r7, r1
 800831e:	f7f8 fc1b 	bl	8000b58 <__aeabi_d2iz>
 8008322:	2200      	movs	r2, #0
 8008324:	4682      	mov	sl, r0
 8008326:	2300      	movs	r3, #0
 8008328:	4630      	mov	r0, r6
 800832a:	4639      	mov	r1, r7
 800832c:	f7f8 fbd6 	bl	8000adc <__aeabi_dcmplt>
 8008330:	b148      	cbz	r0, 8008346 <_dtoa_r+0x186>
 8008332:	4650      	mov	r0, sl
 8008334:	f7f8 f8f6 	bl	8000524 <__aeabi_i2d>
 8008338:	4632      	mov	r2, r6
 800833a:	463b      	mov	r3, r7
 800833c:	f7f8 fbc4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008340:	b908      	cbnz	r0, 8008346 <_dtoa_r+0x186>
 8008342:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008346:	f1ba 0f16 	cmp.w	sl, #22
 800834a:	d854      	bhi.n	80083f6 <_dtoa_r+0x236>
 800834c:	4b61      	ldr	r3, [pc, #388]	; (80084d4 <_dtoa_r+0x314>)
 800834e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800835a:	f7f8 fbbf 	bl	8000adc <__aeabi_dcmplt>
 800835e:	2800      	cmp	r0, #0
 8008360:	d04b      	beq.n	80083fa <_dtoa_r+0x23a>
 8008362:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008366:	2300      	movs	r3, #0
 8008368:	930e      	str	r3, [sp, #56]	; 0x38
 800836a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800836c:	1b5d      	subs	r5, r3, r5
 800836e:	1e6b      	subs	r3, r5, #1
 8008370:	9304      	str	r3, [sp, #16]
 8008372:	bf43      	ittte	mi
 8008374:	2300      	movmi	r3, #0
 8008376:	f1c5 0801 	rsbmi	r8, r5, #1
 800837a:	9304      	strmi	r3, [sp, #16]
 800837c:	f04f 0800 	movpl.w	r8, #0
 8008380:	f1ba 0f00 	cmp.w	sl, #0
 8008384:	db3b      	blt.n	80083fe <_dtoa_r+0x23e>
 8008386:	9b04      	ldr	r3, [sp, #16]
 8008388:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800838c:	4453      	add	r3, sl
 800838e:	9304      	str	r3, [sp, #16]
 8008390:	2300      	movs	r3, #0
 8008392:	9306      	str	r3, [sp, #24]
 8008394:	9b05      	ldr	r3, [sp, #20]
 8008396:	2b09      	cmp	r3, #9
 8008398:	d869      	bhi.n	800846e <_dtoa_r+0x2ae>
 800839a:	2b05      	cmp	r3, #5
 800839c:	bfc4      	itt	gt
 800839e:	3b04      	subgt	r3, #4
 80083a0:	9305      	strgt	r3, [sp, #20]
 80083a2:	9b05      	ldr	r3, [sp, #20]
 80083a4:	f1a3 0302 	sub.w	r3, r3, #2
 80083a8:	bfcc      	ite	gt
 80083aa:	2500      	movgt	r5, #0
 80083ac:	2501      	movle	r5, #1
 80083ae:	2b03      	cmp	r3, #3
 80083b0:	d869      	bhi.n	8008486 <_dtoa_r+0x2c6>
 80083b2:	e8df f003 	tbb	[pc, r3]
 80083b6:	4e2c      	.short	0x4e2c
 80083b8:	5a4c      	.short	0x5a4c
 80083ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80083be:	441d      	add	r5, r3
 80083c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	bfc1      	itttt	gt
 80083c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80083cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80083d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80083d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80083d8:	bfda      	itte	le
 80083da:	f1c3 0320 	rsble	r3, r3, #32
 80083de:	fa06 f003 	lslle.w	r0, r6, r3
 80083e2:	4318      	orrgt	r0, r3
 80083e4:	f7f8 f88e 	bl	8000504 <__aeabi_ui2d>
 80083e8:	2301      	movs	r3, #1
 80083ea:	4606      	mov	r6, r0
 80083ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80083f0:	3d01      	subs	r5, #1
 80083f2:	9310      	str	r3, [sp, #64]	; 0x40
 80083f4:	e771      	b.n	80082da <_dtoa_r+0x11a>
 80083f6:	2301      	movs	r3, #1
 80083f8:	e7b6      	b.n	8008368 <_dtoa_r+0x1a8>
 80083fa:	900e      	str	r0, [sp, #56]	; 0x38
 80083fc:	e7b5      	b.n	800836a <_dtoa_r+0x1aa>
 80083fe:	f1ca 0300 	rsb	r3, sl, #0
 8008402:	9306      	str	r3, [sp, #24]
 8008404:	2300      	movs	r3, #0
 8008406:	eba8 080a 	sub.w	r8, r8, sl
 800840a:	930d      	str	r3, [sp, #52]	; 0x34
 800840c:	e7c2      	b.n	8008394 <_dtoa_r+0x1d4>
 800840e:	2300      	movs	r3, #0
 8008410:	9308      	str	r3, [sp, #32]
 8008412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008414:	2b00      	cmp	r3, #0
 8008416:	dc39      	bgt.n	800848c <_dtoa_r+0x2cc>
 8008418:	f04f 0901 	mov.w	r9, #1
 800841c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008420:	464b      	mov	r3, r9
 8008422:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008426:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008428:	2200      	movs	r2, #0
 800842a:	6042      	str	r2, [r0, #4]
 800842c:	2204      	movs	r2, #4
 800842e:	f102 0614 	add.w	r6, r2, #20
 8008432:	429e      	cmp	r6, r3
 8008434:	6841      	ldr	r1, [r0, #4]
 8008436:	d92f      	bls.n	8008498 <_dtoa_r+0x2d8>
 8008438:	4620      	mov	r0, r4
 800843a:	f000 fdb3 	bl	8008fa4 <_Balloc>
 800843e:	9000      	str	r0, [sp, #0]
 8008440:	2800      	cmp	r0, #0
 8008442:	d14b      	bne.n	80084dc <_dtoa_r+0x31c>
 8008444:	4b24      	ldr	r3, [pc, #144]	; (80084d8 <_dtoa_r+0x318>)
 8008446:	4602      	mov	r2, r0
 8008448:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800844c:	e6d1      	b.n	80081f2 <_dtoa_r+0x32>
 800844e:	2301      	movs	r3, #1
 8008450:	e7de      	b.n	8008410 <_dtoa_r+0x250>
 8008452:	2300      	movs	r3, #0
 8008454:	9308      	str	r3, [sp, #32]
 8008456:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008458:	eb0a 0903 	add.w	r9, sl, r3
 800845c:	f109 0301 	add.w	r3, r9, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	9301      	str	r3, [sp, #4]
 8008464:	bfb8      	it	lt
 8008466:	2301      	movlt	r3, #1
 8008468:	e7dd      	b.n	8008426 <_dtoa_r+0x266>
 800846a:	2301      	movs	r3, #1
 800846c:	e7f2      	b.n	8008454 <_dtoa_r+0x294>
 800846e:	2501      	movs	r5, #1
 8008470:	2300      	movs	r3, #0
 8008472:	9305      	str	r3, [sp, #20]
 8008474:	9508      	str	r5, [sp, #32]
 8008476:	f04f 39ff 	mov.w	r9, #4294967295
 800847a:	2200      	movs	r2, #0
 800847c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008480:	2312      	movs	r3, #18
 8008482:	9209      	str	r2, [sp, #36]	; 0x24
 8008484:	e7cf      	b.n	8008426 <_dtoa_r+0x266>
 8008486:	2301      	movs	r3, #1
 8008488:	9308      	str	r3, [sp, #32]
 800848a:	e7f4      	b.n	8008476 <_dtoa_r+0x2b6>
 800848c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8008490:	f8cd 9004 	str.w	r9, [sp, #4]
 8008494:	464b      	mov	r3, r9
 8008496:	e7c6      	b.n	8008426 <_dtoa_r+0x266>
 8008498:	3101      	adds	r1, #1
 800849a:	6041      	str	r1, [r0, #4]
 800849c:	0052      	lsls	r2, r2, #1
 800849e:	e7c6      	b.n	800842e <_dtoa_r+0x26e>
 80084a0:	636f4361 	.word	0x636f4361
 80084a4:	3fd287a7 	.word	0x3fd287a7
 80084a8:	8b60c8b3 	.word	0x8b60c8b3
 80084ac:	3fc68a28 	.word	0x3fc68a28
 80084b0:	509f79fb 	.word	0x509f79fb
 80084b4:	3fd34413 	.word	0x3fd34413
 80084b8:	0800a671 	.word	0x0800a671
 80084bc:	0800a688 	.word	0x0800a688
 80084c0:	7ff00000 	.word	0x7ff00000
 80084c4:	0800a66d 	.word	0x0800a66d
 80084c8:	0800a664 	.word	0x0800a664
 80084cc:	0800a641 	.word	0x0800a641
 80084d0:	3ff80000 	.word	0x3ff80000
 80084d4:	0800a7e0 	.word	0x0800a7e0
 80084d8:	0800a6e7 	.word	0x0800a6e7
 80084dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084de:	9a00      	ldr	r2, [sp, #0]
 80084e0:	601a      	str	r2, [r3, #0]
 80084e2:	9b01      	ldr	r3, [sp, #4]
 80084e4:	2b0e      	cmp	r3, #14
 80084e6:	f200 80ad 	bhi.w	8008644 <_dtoa_r+0x484>
 80084ea:	2d00      	cmp	r5, #0
 80084ec:	f000 80aa 	beq.w	8008644 <_dtoa_r+0x484>
 80084f0:	f1ba 0f00 	cmp.w	sl, #0
 80084f4:	dd36      	ble.n	8008564 <_dtoa_r+0x3a4>
 80084f6:	4ac3      	ldr	r2, [pc, #780]	; (8008804 <_dtoa_r+0x644>)
 80084f8:	f00a 030f 	and.w	r3, sl, #15
 80084fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008500:	ed93 7b00 	vldr	d7, [r3]
 8008504:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008508:	ea4f 172a 	mov.w	r7, sl, asr #4
 800850c:	eeb0 8a47 	vmov.f32	s16, s14
 8008510:	eef0 8a67 	vmov.f32	s17, s15
 8008514:	d016      	beq.n	8008544 <_dtoa_r+0x384>
 8008516:	4bbc      	ldr	r3, [pc, #752]	; (8008808 <_dtoa_r+0x648>)
 8008518:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800851c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008520:	f7f8 f994 	bl	800084c <__aeabi_ddiv>
 8008524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008528:	f007 070f 	and.w	r7, r7, #15
 800852c:	2503      	movs	r5, #3
 800852e:	4eb6      	ldr	r6, [pc, #728]	; (8008808 <_dtoa_r+0x648>)
 8008530:	b957      	cbnz	r7, 8008548 <_dtoa_r+0x388>
 8008532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008536:	ec53 2b18 	vmov	r2, r3, d8
 800853a:	f7f8 f987 	bl	800084c <__aeabi_ddiv>
 800853e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008542:	e029      	b.n	8008598 <_dtoa_r+0x3d8>
 8008544:	2502      	movs	r5, #2
 8008546:	e7f2      	b.n	800852e <_dtoa_r+0x36e>
 8008548:	07f9      	lsls	r1, r7, #31
 800854a:	d508      	bpl.n	800855e <_dtoa_r+0x39e>
 800854c:	ec51 0b18 	vmov	r0, r1, d8
 8008550:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008554:	f7f8 f850 	bl	80005f8 <__aeabi_dmul>
 8008558:	ec41 0b18 	vmov	d8, r0, r1
 800855c:	3501      	adds	r5, #1
 800855e:	107f      	asrs	r7, r7, #1
 8008560:	3608      	adds	r6, #8
 8008562:	e7e5      	b.n	8008530 <_dtoa_r+0x370>
 8008564:	f000 80a6 	beq.w	80086b4 <_dtoa_r+0x4f4>
 8008568:	f1ca 0600 	rsb	r6, sl, #0
 800856c:	4ba5      	ldr	r3, [pc, #660]	; (8008804 <_dtoa_r+0x644>)
 800856e:	4fa6      	ldr	r7, [pc, #664]	; (8008808 <_dtoa_r+0x648>)
 8008570:	f006 020f 	and.w	r2, r6, #15
 8008574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008580:	f7f8 f83a 	bl	80005f8 <__aeabi_dmul>
 8008584:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008588:	1136      	asrs	r6, r6, #4
 800858a:	2300      	movs	r3, #0
 800858c:	2502      	movs	r5, #2
 800858e:	2e00      	cmp	r6, #0
 8008590:	f040 8085 	bne.w	800869e <_dtoa_r+0x4de>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d1d2      	bne.n	800853e <_dtoa_r+0x37e>
 8008598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 808c 	beq.w	80086b8 <_dtoa_r+0x4f8>
 80085a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085a4:	4b99      	ldr	r3, [pc, #612]	; (800880c <_dtoa_r+0x64c>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	4630      	mov	r0, r6
 80085aa:	4639      	mov	r1, r7
 80085ac:	f7f8 fa96 	bl	8000adc <__aeabi_dcmplt>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	f000 8081 	beq.w	80086b8 <_dtoa_r+0x4f8>
 80085b6:	9b01      	ldr	r3, [sp, #4]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d07d      	beq.n	80086b8 <_dtoa_r+0x4f8>
 80085bc:	f1b9 0f00 	cmp.w	r9, #0
 80085c0:	dd3c      	ble.n	800863c <_dtoa_r+0x47c>
 80085c2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80085c6:	9307      	str	r3, [sp, #28]
 80085c8:	2200      	movs	r2, #0
 80085ca:	4b91      	ldr	r3, [pc, #580]	; (8008810 <_dtoa_r+0x650>)
 80085cc:	4630      	mov	r0, r6
 80085ce:	4639      	mov	r1, r7
 80085d0:	f7f8 f812 	bl	80005f8 <__aeabi_dmul>
 80085d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80085d8:	3501      	adds	r5, #1
 80085da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80085de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80085e2:	4628      	mov	r0, r5
 80085e4:	f7f7 ff9e 	bl	8000524 <__aeabi_i2d>
 80085e8:	4632      	mov	r2, r6
 80085ea:	463b      	mov	r3, r7
 80085ec:	f7f8 f804 	bl	80005f8 <__aeabi_dmul>
 80085f0:	4b88      	ldr	r3, [pc, #544]	; (8008814 <_dtoa_r+0x654>)
 80085f2:	2200      	movs	r2, #0
 80085f4:	f7f7 fe4a 	bl	800028c <__adddf3>
 80085f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80085fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008600:	9303      	str	r3, [sp, #12]
 8008602:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008604:	2b00      	cmp	r3, #0
 8008606:	d15c      	bne.n	80086c2 <_dtoa_r+0x502>
 8008608:	4b83      	ldr	r3, [pc, #524]	; (8008818 <_dtoa_r+0x658>)
 800860a:	2200      	movs	r2, #0
 800860c:	4630      	mov	r0, r6
 800860e:	4639      	mov	r1, r7
 8008610:	f7f7 fe3a 	bl	8000288 <__aeabi_dsub>
 8008614:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008618:	4606      	mov	r6, r0
 800861a:	460f      	mov	r7, r1
 800861c:	f7f8 fa7c 	bl	8000b18 <__aeabi_dcmpgt>
 8008620:	2800      	cmp	r0, #0
 8008622:	f040 8296 	bne.w	8008b52 <_dtoa_r+0x992>
 8008626:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800862a:	4630      	mov	r0, r6
 800862c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008630:	4639      	mov	r1, r7
 8008632:	f7f8 fa53 	bl	8000adc <__aeabi_dcmplt>
 8008636:	2800      	cmp	r0, #0
 8008638:	f040 8288 	bne.w	8008b4c <_dtoa_r+0x98c>
 800863c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008640:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008644:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008646:	2b00      	cmp	r3, #0
 8008648:	f2c0 8158 	blt.w	80088fc <_dtoa_r+0x73c>
 800864c:	f1ba 0f0e 	cmp.w	sl, #14
 8008650:	f300 8154 	bgt.w	80088fc <_dtoa_r+0x73c>
 8008654:	4b6b      	ldr	r3, [pc, #428]	; (8008804 <_dtoa_r+0x644>)
 8008656:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800865a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800865e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008660:	2b00      	cmp	r3, #0
 8008662:	f280 80e3 	bge.w	800882c <_dtoa_r+0x66c>
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	2b00      	cmp	r3, #0
 800866a:	f300 80df 	bgt.w	800882c <_dtoa_r+0x66c>
 800866e:	f040 826d 	bne.w	8008b4c <_dtoa_r+0x98c>
 8008672:	4b69      	ldr	r3, [pc, #420]	; (8008818 <_dtoa_r+0x658>)
 8008674:	2200      	movs	r2, #0
 8008676:	4640      	mov	r0, r8
 8008678:	4649      	mov	r1, r9
 800867a:	f7f7 ffbd 	bl	80005f8 <__aeabi_dmul>
 800867e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008682:	f7f8 fa3f 	bl	8000b04 <__aeabi_dcmpge>
 8008686:	9e01      	ldr	r6, [sp, #4]
 8008688:	4637      	mov	r7, r6
 800868a:	2800      	cmp	r0, #0
 800868c:	f040 8243 	bne.w	8008b16 <_dtoa_r+0x956>
 8008690:	9d00      	ldr	r5, [sp, #0]
 8008692:	2331      	movs	r3, #49	; 0x31
 8008694:	f805 3b01 	strb.w	r3, [r5], #1
 8008698:	f10a 0a01 	add.w	sl, sl, #1
 800869c:	e23f      	b.n	8008b1e <_dtoa_r+0x95e>
 800869e:	07f2      	lsls	r2, r6, #31
 80086a0:	d505      	bpl.n	80086ae <_dtoa_r+0x4ee>
 80086a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a6:	f7f7 ffa7 	bl	80005f8 <__aeabi_dmul>
 80086aa:	3501      	adds	r5, #1
 80086ac:	2301      	movs	r3, #1
 80086ae:	1076      	asrs	r6, r6, #1
 80086b0:	3708      	adds	r7, #8
 80086b2:	e76c      	b.n	800858e <_dtoa_r+0x3ce>
 80086b4:	2502      	movs	r5, #2
 80086b6:	e76f      	b.n	8008598 <_dtoa_r+0x3d8>
 80086b8:	9b01      	ldr	r3, [sp, #4]
 80086ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80086be:	930c      	str	r3, [sp, #48]	; 0x30
 80086c0:	e78d      	b.n	80085de <_dtoa_r+0x41e>
 80086c2:	9900      	ldr	r1, [sp, #0]
 80086c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80086c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086c8:	4b4e      	ldr	r3, [pc, #312]	; (8008804 <_dtoa_r+0x644>)
 80086ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80086ce:	4401      	add	r1, r0
 80086d0:	9102      	str	r1, [sp, #8]
 80086d2:	9908      	ldr	r1, [sp, #32]
 80086d4:	eeb0 8a47 	vmov.f32	s16, s14
 80086d8:	eef0 8a67 	vmov.f32	s17, s15
 80086dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80086e4:	2900      	cmp	r1, #0
 80086e6:	d045      	beq.n	8008774 <_dtoa_r+0x5b4>
 80086e8:	494c      	ldr	r1, [pc, #304]	; (800881c <_dtoa_r+0x65c>)
 80086ea:	2000      	movs	r0, #0
 80086ec:	f7f8 f8ae 	bl	800084c <__aeabi_ddiv>
 80086f0:	ec53 2b18 	vmov	r2, r3, d8
 80086f4:	f7f7 fdc8 	bl	8000288 <__aeabi_dsub>
 80086f8:	9d00      	ldr	r5, [sp, #0]
 80086fa:	ec41 0b18 	vmov	d8, r0, r1
 80086fe:	4639      	mov	r1, r7
 8008700:	4630      	mov	r0, r6
 8008702:	f7f8 fa29 	bl	8000b58 <__aeabi_d2iz>
 8008706:	900c      	str	r0, [sp, #48]	; 0x30
 8008708:	f7f7 ff0c 	bl	8000524 <__aeabi_i2d>
 800870c:	4602      	mov	r2, r0
 800870e:	460b      	mov	r3, r1
 8008710:	4630      	mov	r0, r6
 8008712:	4639      	mov	r1, r7
 8008714:	f7f7 fdb8 	bl	8000288 <__aeabi_dsub>
 8008718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800871a:	3330      	adds	r3, #48	; 0x30
 800871c:	f805 3b01 	strb.w	r3, [r5], #1
 8008720:	ec53 2b18 	vmov	r2, r3, d8
 8008724:	4606      	mov	r6, r0
 8008726:	460f      	mov	r7, r1
 8008728:	f7f8 f9d8 	bl	8000adc <__aeabi_dcmplt>
 800872c:	2800      	cmp	r0, #0
 800872e:	d165      	bne.n	80087fc <_dtoa_r+0x63c>
 8008730:	4632      	mov	r2, r6
 8008732:	463b      	mov	r3, r7
 8008734:	4935      	ldr	r1, [pc, #212]	; (800880c <_dtoa_r+0x64c>)
 8008736:	2000      	movs	r0, #0
 8008738:	f7f7 fda6 	bl	8000288 <__aeabi_dsub>
 800873c:	ec53 2b18 	vmov	r2, r3, d8
 8008740:	f7f8 f9cc 	bl	8000adc <__aeabi_dcmplt>
 8008744:	2800      	cmp	r0, #0
 8008746:	f040 80b9 	bne.w	80088bc <_dtoa_r+0x6fc>
 800874a:	9b02      	ldr	r3, [sp, #8]
 800874c:	429d      	cmp	r5, r3
 800874e:	f43f af75 	beq.w	800863c <_dtoa_r+0x47c>
 8008752:	4b2f      	ldr	r3, [pc, #188]	; (8008810 <_dtoa_r+0x650>)
 8008754:	ec51 0b18 	vmov	r0, r1, d8
 8008758:	2200      	movs	r2, #0
 800875a:	f7f7 ff4d 	bl	80005f8 <__aeabi_dmul>
 800875e:	4b2c      	ldr	r3, [pc, #176]	; (8008810 <_dtoa_r+0x650>)
 8008760:	ec41 0b18 	vmov	d8, r0, r1
 8008764:	2200      	movs	r2, #0
 8008766:	4630      	mov	r0, r6
 8008768:	4639      	mov	r1, r7
 800876a:	f7f7 ff45 	bl	80005f8 <__aeabi_dmul>
 800876e:	4606      	mov	r6, r0
 8008770:	460f      	mov	r7, r1
 8008772:	e7c4      	b.n	80086fe <_dtoa_r+0x53e>
 8008774:	ec51 0b17 	vmov	r0, r1, d7
 8008778:	f7f7 ff3e 	bl	80005f8 <__aeabi_dmul>
 800877c:	9b02      	ldr	r3, [sp, #8]
 800877e:	9d00      	ldr	r5, [sp, #0]
 8008780:	930c      	str	r3, [sp, #48]	; 0x30
 8008782:	ec41 0b18 	vmov	d8, r0, r1
 8008786:	4639      	mov	r1, r7
 8008788:	4630      	mov	r0, r6
 800878a:	f7f8 f9e5 	bl	8000b58 <__aeabi_d2iz>
 800878e:	9011      	str	r0, [sp, #68]	; 0x44
 8008790:	f7f7 fec8 	bl	8000524 <__aeabi_i2d>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4630      	mov	r0, r6
 800879a:	4639      	mov	r1, r7
 800879c:	f7f7 fd74 	bl	8000288 <__aeabi_dsub>
 80087a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087a2:	3330      	adds	r3, #48	; 0x30
 80087a4:	f805 3b01 	strb.w	r3, [r5], #1
 80087a8:	9b02      	ldr	r3, [sp, #8]
 80087aa:	429d      	cmp	r5, r3
 80087ac:	4606      	mov	r6, r0
 80087ae:	460f      	mov	r7, r1
 80087b0:	f04f 0200 	mov.w	r2, #0
 80087b4:	d134      	bne.n	8008820 <_dtoa_r+0x660>
 80087b6:	4b19      	ldr	r3, [pc, #100]	; (800881c <_dtoa_r+0x65c>)
 80087b8:	ec51 0b18 	vmov	r0, r1, d8
 80087bc:	f7f7 fd66 	bl	800028c <__adddf3>
 80087c0:	4602      	mov	r2, r0
 80087c2:	460b      	mov	r3, r1
 80087c4:	4630      	mov	r0, r6
 80087c6:	4639      	mov	r1, r7
 80087c8:	f7f8 f9a6 	bl	8000b18 <__aeabi_dcmpgt>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d175      	bne.n	80088bc <_dtoa_r+0x6fc>
 80087d0:	ec53 2b18 	vmov	r2, r3, d8
 80087d4:	4911      	ldr	r1, [pc, #68]	; (800881c <_dtoa_r+0x65c>)
 80087d6:	2000      	movs	r0, #0
 80087d8:	f7f7 fd56 	bl	8000288 <__aeabi_dsub>
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	4630      	mov	r0, r6
 80087e2:	4639      	mov	r1, r7
 80087e4:	f7f8 f97a 	bl	8000adc <__aeabi_dcmplt>
 80087e8:	2800      	cmp	r0, #0
 80087ea:	f43f af27 	beq.w	800863c <_dtoa_r+0x47c>
 80087ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087f0:	1e6b      	subs	r3, r5, #1
 80087f2:	930c      	str	r3, [sp, #48]	; 0x30
 80087f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80087f8:	2b30      	cmp	r3, #48	; 0x30
 80087fa:	d0f8      	beq.n	80087ee <_dtoa_r+0x62e>
 80087fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008800:	e04a      	b.n	8008898 <_dtoa_r+0x6d8>
 8008802:	bf00      	nop
 8008804:	0800a7e0 	.word	0x0800a7e0
 8008808:	0800a7b8 	.word	0x0800a7b8
 800880c:	3ff00000 	.word	0x3ff00000
 8008810:	40240000 	.word	0x40240000
 8008814:	401c0000 	.word	0x401c0000
 8008818:	40140000 	.word	0x40140000
 800881c:	3fe00000 	.word	0x3fe00000
 8008820:	4baf      	ldr	r3, [pc, #700]	; (8008ae0 <_dtoa_r+0x920>)
 8008822:	f7f7 fee9 	bl	80005f8 <__aeabi_dmul>
 8008826:	4606      	mov	r6, r0
 8008828:	460f      	mov	r7, r1
 800882a:	e7ac      	b.n	8008786 <_dtoa_r+0x5c6>
 800882c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008830:	9d00      	ldr	r5, [sp, #0]
 8008832:	4642      	mov	r2, r8
 8008834:	464b      	mov	r3, r9
 8008836:	4630      	mov	r0, r6
 8008838:	4639      	mov	r1, r7
 800883a:	f7f8 f807 	bl	800084c <__aeabi_ddiv>
 800883e:	f7f8 f98b 	bl	8000b58 <__aeabi_d2iz>
 8008842:	9002      	str	r0, [sp, #8]
 8008844:	f7f7 fe6e 	bl	8000524 <__aeabi_i2d>
 8008848:	4642      	mov	r2, r8
 800884a:	464b      	mov	r3, r9
 800884c:	f7f7 fed4 	bl	80005f8 <__aeabi_dmul>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	4630      	mov	r0, r6
 8008856:	4639      	mov	r1, r7
 8008858:	f7f7 fd16 	bl	8000288 <__aeabi_dsub>
 800885c:	9e02      	ldr	r6, [sp, #8]
 800885e:	9f01      	ldr	r7, [sp, #4]
 8008860:	3630      	adds	r6, #48	; 0x30
 8008862:	f805 6b01 	strb.w	r6, [r5], #1
 8008866:	9e00      	ldr	r6, [sp, #0]
 8008868:	1bae      	subs	r6, r5, r6
 800886a:	42b7      	cmp	r7, r6
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	d137      	bne.n	80088e2 <_dtoa_r+0x722>
 8008872:	f7f7 fd0b 	bl	800028c <__adddf3>
 8008876:	4642      	mov	r2, r8
 8008878:	464b      	mov	r3, r9
 800887a:	4606      	mov	r6, r0
 800887c:	460f      	mov	r7, r1
 800887e:	f7f8 f94b 	bl	8000b18 <__aeabi_dcmpgt>
 8008882:	b9c8      	cbnz	r0, 80088b8 <_dtoa_r+0x6f8>
 8008884:	4642      	mov	r2, r8
 8008886:	464b      	mov	r3, r9
 8008888:	4630      	mov	r0, r6
 800888a:	4639      	mov	r1, r7
 800888c:	f7f8 f91c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008890:	b110      	cbz	r0, 8008898 <_dtoa_r+0x6d8>
 8008892:	9b02      	ldr	r3, [sp, #8]
 8008894:	07d9      	lsls	r1, r3, #31
 8008896:	d40f      	bmi.n	80088b8 <_dtoa_r+0x6f8>
 8008898:	4620      	mov	r0, r4
 800889a:	4659      	mov	r1, fp
 800889c:	f000 fbc2 	bl	8009024 <_Bfree>
 80088a0:	2300      	movs	r3, #0
 80088a2:	702b      	strb	r3, [r5, #0]
 80088a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80088a6:	f10a 0001 	add.w	r0, sl, #1
 80088aa:	6018      	str	r0, [r3, #0]
 80088ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	f43f acd8 	beq.w	8008264 <_dtoa_r+0xa4>
 80088b4:	601d      	str	r5, [r3, #0]
 80088b6:	e4d5      	b.n	8008264 <_dtoa_r+0xa4>
 80088b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80088bc:	462b      	mov	r3, r5
 80088be:	461d      	mov	r5, r3
 80088c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80088c4:	2a39      	cmp	r2, #57	; 0x39
 80088c6:	d108      	bne.n	80088da <_dtoa_r+0x71a>
 80088c8:	9a00      	ldr	r2, [sp, #0]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d1f7      	bne.n	80088be <_dtoa_r+0x6fe>
 80088ce:	9a07      	ldr	r2, [sp, #28]
 80088d0:	9900      	ldr	r1, [sp, #0]
 80088d2:	3201      	adds	r2, #1
 80088d4:	9207      	str	r2, [sp, #28]
 80088d6:	2230      	movs	r2, #48	; 0x30
 80088d8:	700a      	strb	r2, [r1, #0]
 80088da:	781a      	ldrb	r2, [r3, #0]
 80088dc:	3201      	adds	r2, #1
 80088de:	701a      	strb	r2, [r3, #0]
 80088e0:	e78c      	b.n	80087fc <_dtoa_r+0x63c>
 80088e2:	4b7f      	ldr	r3, [pc, #508]	; (8008ae0 <_dtoa_r+0x920>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	f7f7 fe87 	bl	80005f8 <__aeabi_dmul>
 80088ea:	2200      	movs	r2, #0
 80088ec:	2300      	movs	r3, #0
 80088ee:	4606      	mov	r6, r0
 80088f0:	460f      	mov	r7, r1
 80088f2:	f7f8 f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	d09b      	beq.n	8008832 <_dtoa_r+0x672>
 80088fa:	e7cd      	b.n	8008898 <_dtoa_r+0x6d8>
 80088fc:	9a08      	ldr	r2, [sp, #32]
 80088fe:	2a00      	cmp	r2, #0
 8008900:	f000 80c4 	beq.w	8008a8c <_dtoa_r+0x8cc>
 8008904:	9a05      	ldr	r2, [sp, #20]
 8008906:	2a01      	cmp	r2, #1
 8008908:	f300 80a8 	bgt.w	8008a5c <_dtoa_r+0x89c>
 800890c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800890e:	2a00      	cmp	r2, #0
 8008910:	f000 80a0 	beq.w	8008a54 <_dtoa_r+0x894>
 8008914:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008918:	9e06      	ldr	r6, [sp, #24]
 800891a:	4645      	mov	r5, r8
 800891c:	9a04      	ldr	r2, [sp, #16]
 800891e:	2101      	movs	r1, #1
 8008920:	441a      	add	r2, r3
 8008922:	4620      	mov	r0, r4
 8008924:	4498      	add	r8, r3
 8008926:	9204      	str	r2, [sp, #16]
 8008928:	f000 fc38 	bl	800919c <__i2b>
 800892c:	4607      	mov	r7, r0
 800892e:	2d00      	cmp	r5, #0
 8008930:	dd0b      	ble.n	800894a <_dtoa_r+0x78a>
 8008932:	9b04      	ldr	r3, [sp, #16]
 8008934:	2b00      	cmp	r3, #0
 8008936:	dd08      	ble.n	800894a <_dtoa_r+0x78a>
 8008938:	42ab      	cmp	r3, r5
 800893a:	9a04      	ldr	r2, [sp, #16]
 800893c:	bfa8      	it	ge
 800893e:	462b      	movge	r3, r5
 8008940:	eba8 0803 	sub.w	r8, r8, r3
 8008944:	1aed      	subs	r5, r5, r3
 8008946:	1ad3      	subs	r3, r2, r3
 8008948:	9304      	str	r3, [sp, #16]
 800894a:	9b06      	ldr	r3, [sp, #24]
 800894c:	b1fb      	cbz	r3, 800898e <_dtoa_r+0x7ce>
 800894e:	9b08      	ldr	r3, [sp, #32]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 809f 	beq.w	8008a94 <_dtoa_r+0x8d4>
 8008956:	2e00      	cmp	r6, #0
 8008958:	dd11      	ble.n	800897e <_dtoa_r+0x7be>
 800895a:	4639      	mov	r1, r7
 800895c:	4632      	mov	r2, r6
 800895e:	4620      	mov	r0, r4
 8008960:	f000 fcd8 	bl	8009314 <__pow5mult>
 8008964:	465a      	mov	r2, fp
 8008966:	4601      	mov	r1, r0
 8008968:	4607      	mov	r7, r0
 800896a:	4620      	mov	r0, r4
 800896c:	f000 fc2c 	bl	80091c8 <__multiply>
 8008970:	4659      	mov	r1, fp
 8008972:	9007      	str	r0, [sp, #28]
 8008974:	4620      	mov	r0, r4
 8008976:	f000 fb55 	bl	8009024 <_Bfree>
 800897a:	9b07      	ldr	r3, [sp, #28]
 800897c:	469b      	mov	fp, r3
 800897e:	9b06      	ldr	r3, [sp, #24]
 8008980:	1b9a      	subs	r2, r3, r6
 8008982:	d004      	beq.n	800898e <_dtoa_r+0x7ce>
 8008984:	4659      	mov	r1, fp
 8008986:	4620      	mov	r0, r4
 8008988:	f000 fcc4 	bl	8009314 <__pow5mult>
 800898c:	4683      	mov	fp, r0
 800898e:	2101      	movs	r1, #1
 8008990:	4620      	mov	r0, r4
 8008992:	f000 fc03 	bl	800919c <__i2b>
 8008996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008998:	2b00      	cmp	r3, #0
 800899a:	4606      	mov	r6, r0
 800899c:	dd7c      	ble.n	8008a98 <_dtoa_r+0x8d8>
 800899e:	461a      	mov	r2, r3
 80089a0:	4601      	mov	r1, r0
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 fcb6 	bl	8009314 <__pow5mult>
 80089a8:	9b05      	ldr	r3, [sp, #20]
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	4606      	mov	r6, r0
 80089ae:	dd76      	ble.n	8008a9e <_dtoa_r+0x8de>
 80089b0:	2300      	movs	r3, #0
 80089b2:	9306      	str	r3, [sp, #24]
 80089b4:	6933      	ldr	r3, [r6, #16]
 80089b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80089ba:	6918      	ldr	r0, [r3, #16]
 80089bc:	f000 fb9e 	bl	80090fc <__hi0bits>
 80089c0:	f1c0 0020 	rsb	r0, r0, #32
 80089c4:	9b04      	ldr	r3, [sp, #16]
 80089c6:	4418      	add	r0, r3
 80089c8:	f010 001f 	ands.w	r0, r0, #31
 80089cc:	f000 8086 	beq.w	8008adc <_dtoa_r+0x91c>
 80089d0:	f1c0 0320 	rsb	r3, r0, #32
 80089d4:	2b04      	cmp	r3, #4
 80089d6:	dd7f      	ble.n	8008ad8 <_dtoa_r+0x918>
 80089d8:	f1c0 001c 	rsb	r0, r0, #28
 80089dc:	9b04      	ldr	r3, [sp, #16]
 80089de:	4403      	add	r3, r0
 80089e0:	4480      	add	r8, r0
 80089e2:	4405      	add	r5, r0
 80089e4:	9304      	str	r3, [sp, #16]
 80089e6:	f1b8 0f00 	cmp.w	r8, #0
 80089ea:	dd05      	ble.n	80089f8 <_dtoa_r+0x838>
 80089ec:	4659      	mov	r1, fp
 80089ee:	4642      	mov	r2, r8
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fce9 	bl	80093c8 <__lshift>
 80089f6:	4683      	mov	fp, r0
 80089f8:	9b04      	ldr	r3, [sp, #16]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	dd05      	ble.n	8008a0a <_dtoa_r+0x84a>
 80089fe:	4631      	mov	r1, r6
 8008a00:	461a      	mov	r2, r3
 8008a02:	4620      	mov	r0, r4
 8008a04:	f000 fce0 	bl	80093c8 <__lshift>
 8008a08:	4606      	mov	r6, r0
 8008a0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d069      	beq.n	8008ae4 <_dtoa_r+0x924>
 8008a10:	4631      	mov	r1, r6
 8008a12:	4658      	mov	r0, fp
 8008a14:	f000 fd44 	bl	80094a0 <__mcmp>
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	da63      	bge.n	8008ae4 <_dtoa_r+0x924>
 8008a1c:	2300      	movs	r3, #0
 8008a1e:	4659      	mov	r1, fp
 8008a20:	220a      	movs	r2, #10
 8008a22:	4620      	mov	r0, r4
 8008a24:	f000 fb20 	bl	8009068 <__multadd>
 8008a28:	9b08      	ldr	r3, [sp, #32]
 8008a2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a2e:	4683      	mov	fp, r0
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	f000 818f 	beq.w	8008d54 <_dtoa_r+0xb94>
 8008a36:	4639      	mov	r1, r7
 8008a38:	2300      	movs	r3, #0
 8008a3a:	220a      	movs	r2, #10
 8008a3c:	4620      	mov	r0, r4
 8008a3e:	f000 fb13 	bl	8009068 <__multadd>
 8008a42:	f1b9 0f00 	cmp.w	r9, #0
 8008a46:	4607      	mov	r7, r0
 8008a48:	f300 808e 	bgt.w	8008b68 <_dtoa_r+0x9a8>
 8008a4c:	9b05      	ldr	r3, [sp, #20]
 8008a4e:	2b02      	cmp	r3, #2
 8008a50:	dc50      	bgt.n	8008af4 <_dtoa_r+0x934>
 8008a52:	e089      	b.n	8008b68 <_dtoa_r+0x9a8>
 8008a54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008a5a:	e75d      	b.n	8008918 <_dtoa_r+0x758>
 8008a5c:	9b01      	ldr	r3, [sp, #4]
 8008a5e:	1e5e      	subs	r6, r3, #1
 8008a60:	9b06      	ldr	r3, [sp, #24]
 8008a62:	42b3      	cmp	r3, r6
 8008a64:	bfbf      	itttt	lt
 8008a66:	9b06      	ldrlt	r3, [sp, #24]
 8008a68:	9606      	strlt	r6, [sp, #24]
 8008a6a:	1af2      	sublt	r2, r6, r3
 8008a6c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8008a6e:	bfb6      	itet	lt
 8008a70:	189b      	addlt	r3, r3, r2
 8008a72:	1b9e      	subge	r6, r3, r6
 8008a74:	930d      	strlt	r3, [sp, #52]	; 0x34
 8008a76:	9b01      	ldr	r3, [sp, #4]
 8008a78:	bfb8      	it	lt
 8008a7a:	2600      	movlt	r6, #0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	bfb5      	itete	lt
 8008a80:	eba8 0503 	sublt.w	r5, r8, r3
 8008a84:	9b01      	ldrge	r3, [sp, #4]
 8008a86:	2300      	movlt	r3, #0
 8008a88:	4645      	movge	r5, r8
 8008a8a:	e747      	b.n	800891c <_dtoa_r+0x75c>
 8008a8c:	9e06      	ldr	r6, [sp, #24]
 8008a8e:	9f08      	ldr	r7, [sp, #32]
 8008a90:	4645      	mov	r5, r8
 8008a92:	e74c      	b.n	800892e <_dtoa_r+0x76e>
 8008a94:	9a06      	ldr	r2, [sp, #24]
 8008a96:	e775      	b.n	8008984 <_dtoa_r+0x7c4>
 8008a98:	9b05      	ldr	r3, [sp, #20]
 8008a9a:	2b01      	cmp	r3, #1
 8008a9c:	dc18      	bgt.n	8008ad0 <_dtoa_r+0x910>
 8008a9e:	9b02      	ldr	r3, [sp, #8]
 8008aa0:	b9b3      	cbnz	r3, 8008ad0 <_dtoa_r+0x910>
 8008aa2:	9b03      	ldr	r3, [sp, #12]
 8008aa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008aa8:	b9a3      	cbnz	r3, 8008ad4 <_dtoa_r+0x914>
 8008aaa:	9b03      	ldr	r3, [sp, #12]
 8008aac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ab0:	0d1b      	lsrs	r3, r3, #20
 8008ab2:	051b      	lsls	r3, r3, #20
 8008ab4:	b12b      	cbz	r3, 8008ac2 <_dtoa_r+0x902>
 8008ab6:	9b04      	ldr	r3, [sp, #16]
 8008ab8:	3301      	adds	r3, #1
 8008aba:	9304      	str	r3, [sp, #16]
 8008abc:	f108 0801 	add.w	r8, r8, #1
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	9306      	str	r3, [sp, #24]
 8008ac4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	f47f af74 	bne.w	80089b4 <_dtoa_r+0x7f4>
 8008acc:	2001      	movs	r0, #1
 8008ace:	e779      	b.n	80089c4 <_dtoa_r+0x804>
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	e7f6      	b.n	8008ac2 <_dtoa_r+0x902>
 8008ad4:	9b02      	ldr	r3, [sp, #8]
 8008ad6:	e7f4      	b.n	8008ac2 <_dtoa_r+0x902>
 8008ad8:	d085      	beq.n	80089e6 <_dtoa_r+0x826>
 8008ada:	4618      	mov	r0, r3
 8008adc:	301c      	adds	r0, #28
 8008ade:	e77d      	b.n	80089dc <_dtoa_r+0x81c>
 8008ae0:	40240000 	.word	0x40240000
 8008ae4:	9b01      	ldr	r3, [sp, #4]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	dc38      	bgt.n	8008b5c <_dtoa_r+0x99c>
 8008aea:	9b05      	ldr	r3, [sp, #20]
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	dd35      	ble.n	8008b5c <_dtoa_r+0x99c>
 8008af0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008af4:	f1b9 0f00 	cmp.w	r9, #0
 8008af8:	d10d      	bne.n	8008b16 <_dtoa_r+0x956>
 8008afa:	4631      	mov	r1, r6
 8008afc:	464b      	mov	r3, r9
 8008afe:	2205      	movs	r2, #5
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 fab1 	bl	8009068 <__multadd>
 8008b06:	4601      	mov	r1, r0
 8008b08:	4606      	mov	r6, r0
 8008b0a:	4658      	mov	r0, fp
 8008b0c:	f000 fcc8 	bl	80094a0 <__mcmp>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	f73f adbd 	bgt.w	8008690 <_dtoa_r+0x4d0>
 8008b16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b18:	9d00      	ldr	r5, [sp, #0]
 8008b1a:	ea6f 0a03 	mvn.w	sl, r3
 8008b1e:	f04f 0800 	mov.w	r8, #0
 8008b22:	4631      	mov	r1, r6
 8008b24:	4620      	mov	r0, r4
 8008b26:	f000 fa7d 	bl	8009024 <_Bfree>
 8008b2a:	2f00      	cmp	r7, #0
 8008b2c:	f43f aeb4 	beq.w	8008898 <_dtoa_r+0x6d8>
 8008b30:	f1b8 0f00 	cmp.w	r8, #0
 8008b34:	d005      	beq.n	8008b42 <_dtoa_r+0x982>
 8008b36:	45b8      	cmp	r8, r7
 8008b38:	d003      	beq.n	8008b42 <_dtoa_r+0x982>
 8008b3a:	4641      	mov	r1, r8
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	f000 fa71 	bl	8009024 <_Bfree>
 8008b42:	4639      	mov	r1, r7
 8008b44:	4620      	mov	r0, r4
 8008b46:	f000 fa6d 	bl	8009024 <_Bfree>
 8008b4a:	e6a5      	b.n	8008898 <_dtoa_r+0x6d8>
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	4637      	mov	r7, r6
 8008b50:	e7e1      	b.n	8008b16 <_dtoa_r+0x956>
 8008b52:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8008b54:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008b58:	4637      	mov	r7, r6
 8008b5a:	e599      	b.n	8008690 <_dtoa_r+0x4d0>
 8008b5c:	9b08      	ldr	r3, [sp, #32]
 8008b5e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f000 80fd 	beq.w	8008d62 <_dtoa_r+0xba2>
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	dd05      	ble.n	8008b78 <_dtoa_r+0x9b8>
 8008b6c:	4639      	mov	r1, r7
 8008b6e:	462a      	mov	r2, r5
 8008b70:	4620      	mov	r0, r4
 8008b72:	f000 fc29 	bl	80093c8 <__lshift>
 8008b76:	4607      	mov	r7, r0
 8008b78:	9b06      	ldr	r3, [sp, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d05c      	beq.n	8008c38 <_dtoa_r+0xa78>
 8008b7e:	6879      	ldr	r1, [r7, #4]
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fa0f 	bl	8008fa4 <_Balloc>
 8008b86:	4605      	mov	r5, r0
 8008b88:	b928      	cbnz	r0, 8008b96 <_dtoa_r+0x9d6>
 8008b8a:	4b80      	ldr	r3, [pc, #512]	; (8008d8c <_dtoa_r+0xbcc>)
 8008b8c:	4602      	mov	r2, r0
 8008b8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008b92:	f7ff bb2e 	b.w	80081f2 <_dtoa_r+0x32>
 8008b96:	693a      	ldr	r2, [r7, #16]
 8008b98:	3202      	adds	r2, #2
 8008b9a:	0092      	lsls	r2, r2, #2
 8008b9c:	f107 010c 	add.w	r1, r7, #12
 8008ba0:	300c      	adds	r0, #12
 8008ba2:	f7fe fdb5 	bl	8007710 <memcpy>
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	4629      	mov	r1, r5
 8008baa:	4620      	mov	r0, r4
 8008bac:	f000 fc0c 	bl	80093c8 <__lshift>
 8008bb0:	9b00      	ldr	r3, [sp, #0]
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	9301      	str	r3, [sp, #4]
 8008bb6:	9b00      	ldr	r3, [sp, #0]
 8008bb8:	444b      	add	r3, r9
 8008bba:	9307      	str	r3, [sp, #28]
 8008bbc:	9b02      	ldr	r3, [sp, #8]
 8008bbe:	f003 0301 	and.w	r3, r3, #1
 8008bc2:	46b8      	mov	r8, r7
 8008bc4:	9306      	str	r3, [sp, #24]
 8008bc6:	4607      	mov	r7, r0
 8008bc8:	9b01      	ldr	r3, [sp, #4]
 8008bca:	4631      	mov	r1, r6
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	4658      	mov	r0, fp
 8008bd0:	9302      	str	r3, [sp, #8]
 8008bd2:	f7ff fa69 	bl	80080a8 <quorem>
 8008bd6:	4603      	mov	r3, r0
 8008bd8:	3330      	adds	r3, #48	; 0x30
 8008bda:	9004      	str	r0, [sp, #16]
 8008bdc:	4641      	mov	r1, r8
 8008bde:	4658      	mov	r0, fp
 8008be0:	9308      	str	r3, [sp, #32]
 8008be2:	f000 fc5d 	bl	80094a0 <__mcmp>
 8008be6:	463a      	mov	r2, r7
 8008be8:	4681      	mov	r9, r0
 8008bea:	4631      	mov	r1, r6
 8008bec:	4620      	mov	r0, r4
 8008bee:	f000 fc73 	bl	80094d8 <__mdiff>
 8008bf2:	68c2      	ldr	r2, [r0, #12]
 8008bf4:	9b08      	ldr	r3, [sp, #32]
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	bb02      	cbnz	r2, 8008c3c <_dtoa_r+0xa7c>
 8008bfa:	4601      	mov	r1, r0
 8008bfc:	4658      	mov	r0, fp
 8008bfe:	f000 fc4f 	bl	80094a0 <__mcmp>
 8008c02:	9b08      	ldr	r3, [sp, #32]
 8008c04:	4602      	mov	r2, r0
 8008c06:	4629      	mov	r1, r5
 8008c08:	4620      	mov	r0, r4
 8008c0a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008c0e:	f000 fa09 	bl	8009024 <_Bfree>
 8008c12:	9b05      	ldr	r3, [sp, #20]
 8008c14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c16:	9d01      	ldr	r5, [sp, #4]
 8008c18:	ea43 0102 	orr.w	r1, r3, r2
 8008c1c:	9b06      	ldr	r3, [sp, #24]
 8008c1e:	430b      	orrs	r3, r1
 8008c20:	9b08      	ldr	r3, [sp, #32]
 8008c22:	d10d      	bne.n	8008c40 <_dtoa_r+0xa80>
 8008c24:	2b39      	cmp	r3, #57	; 0x39
 8008c26:	d029      	beq.n	8008c7c <_dtoa_r+0xabc>
 8008c28:	f1b9 0f00 	cmp.w	r9, #0
 8008c2c:	dd01      	ble.n	8008c32 <_dtoa_r+0xa72>
 8008c2e:	9b04      	ldr	r3, [sp, #16]
 8008c30:	3331      	adds	r3, #49	; 0x31
 8008c32:	9a02      	ldr	r2, [sp, #8]
 8008c34:	7013      	strb	r3, [r2, #0]
 8008c36:	e774      	b.n	8008b22 <_dtoa_r+0x962>
 8008c38:	4638      	mov	r0, r7
 8008c3a:	e7b9      	b.n	8008bb0 <_dtoa_r+0x9f0>
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	e7e2      	b.n	8008c06 <_dtoa_r+0xa46>
 8008c40:	f1b9 0f00 	cmp.w	r9, #0
 8008c44:	db06      	blt.n	8008c54 <_dtoa_r+0xa94>
 8008c46:	9905      	ldr	r1, [sp, #20]
 8008c48:	ea41 0909 	orr.w	r9, r1, r9
 8008c4c:	9906      	ldr	r1, [sp, #24]
 8008c4e:	ea59 0101 	orrs.w	r1, r9, r1
 8008c52:	d120      	bne.n	8008c96 <_dtoa_r+0xad6>
 8008c54:	2a00      	cmp	r2, #0
 8008c56:	ddec      	ble.n	8008c32 <_dtoa_r+0xa72>
 8008c58:	4659      	mov	r1, fp
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	4620      	mov	r0, r4
 8008c5e:	9301      	str	r3, [sp, #4]
 8008c60:	f000 fbb2 	bl	80093c8 <__lshift>
 8008c64:	4631      	mov	r1, r6
 8008c66:	4683      	mov	fp, r0
 8008c68:	f000 fc1a 	bl	80094a0 <__mcmp>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	9b01      	ldr	r3, [sp, #4]
 8008c70:	dc02      	bgt.n	8008c78 <_dtoa_r+0xab8>
 8008c72:	d1de      	bne.n	8008c32 <_dtoa_r+0xa72>
 8008c74:	07da      	lsls	r2, r3, #31
 8008c76:	d5dc      	bpl.n	8008c32 <_dtoa_r+0xa72>
 8008c78:	2b39      	cmp	r3, #57	; 0x39
 8008c7a:	d1d8      	bne.n	8008c2e <_dtoa_r+0xa6e>
 8008c7c:	9a02      	ldr	r2, [sp, #8]
 8008c7e:	2339      	movs	r3, #57	; 0x39
 8008c80:	7013      	strb	r3, [r2, #0]
 8008c82:	462b      	mov	r3, r5
 8008c84:	461d      	mov	r5, r3
 8008c86:	3b01      	subs	r3, #1
 8008c88:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008c8c:	2a39      	cmp	r2, #57	; 0x39
 8008c8e:	d050      	beq.n	8008d32 <_dtoa_r+0xb72>
 8008c90:	3201      	adds	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
 8008c94:	e745      	b.n	8008b22 <_dtoa_r+0x962>
 8008c96:	2a00      	cmp	r2, #0
 8008c98:	dd03      	ble.n	8008ca2 <_dtoa_r+0xae2>
 8008c9a:	2b39      	cmp	r3, #57	; 0x39
 8008c9c:	d0ee      	beq.n	8008c7c <_dtoa_r+0xabc>
 8008c9e:	3301      	adds	r3, #1
 8008ca0:	e7c7      	b.n	8008c32 <_dtoa_r+0xa72>
 8008ca2:	9a01      	ldr	r2, [sp, #4]
 8008ca4:	9907      	ldr	r1, [sp, #28]
 8008ca6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008caa:	428a      	cmp	r2, r1
 8008cac:	d02a      	beq.n	8008d04 <_dtoa_r+0xb44>
 8008cae:	4659      	mov	r1, fp
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	220a      	movs	r2, #10
 8008cb4:	4620      	mov	r0, r4
 8008cb6:	f000 f9d7 	bl	8009068 <__multadd>
 8008cba:	45b8      	cmp	r8, r7
 8008cbc:	4683      	mov	fp, r0
 8008cbe:	f04f 0300 	mov.w	r3, #0
 8008cc2:	f04f 020a 	mov.w	r2, #10
 8008cc6:	4641      	mov	r1, r8
 8008cc8:	4620      	mov	r0, r4
 8008cca:	d107      	bne.n	8008cdc <_dtoa_r+0xb1c>
 8008ccc:	f000 f9cc 	bl	8009068 <__multadd>
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	9b01      	ldr	r3, [sp, #4]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	9301      	str	r3, [sp, #4]
 8008cda:	e775      	b.n	8008bc8 <_dtoa_r+0xa08>
 8008cdc:	f000 f9c4 	bl	8009068 <__multadd>
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	220a      	movs	r2, #10
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 f9bd 	bl	8009068 <__multadd>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	e7f0      	b.n	8008cd4 <_dtoa_r+0xb14>
 8008cf2:	f1b9 0f00 	cmp.w	r9, #0
 8008cf6:	9a00      	ldr	r2, [sp, #0]
 8008cf8:	bfcc      	ite	gt
 8008cfa:	464d      	movgt	r5, r9
 8008cfc:	2501      	movle	r5, #1
 8008cfe:	4415      	add	r5, r2
 8008d00:	f04f 0800 	mov.w	r8, #0
 8008d04:	4659      	mov	r1, fp
 8008d06:	2201      	movs	r2, #1
 8008d08:	4620      	mov	r0, r4
 8008d0a:	9301      	str	r3, [sp, #4]
 8008d0c:	f000 fb5c 	bl	80093c8 <__lshift>
 8008d10:	4631      	mov	r1, r6
 8008d12:	4683      	mov	fp, r0
 8008d14:	f000 fbc4 	bl	80094a0 <__mcmp>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	dcb2      	bgt.n	8008c82 <_dtoa_r+0xac2>
 8008d1c:	d102      	bne.n	8008d24 <_dtoa_r+0xb64>
 8008d1e:	9b01      	ldr	r3, [sp, #4]
 8008d20:	07db      	lsls	r3, r3, #31
 8008d22:	d4ae      	bmi.n	8008c82 <_dtoa_r+0xac2>
 8008d24:	462b      	mov	r3, r5
 8008d26:	461d      	mov	r5, r3
 8008d28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008d2c:	2a30      	cmp	r2, #48	; 0x30
 8008d2e:	d0fa      	beq.n	8008d26 <_dtoa_r+0xb66>
 8008d30:	e6f7      	b.n	8008b22 <_dtoa_r+0x962>
 8008d32:	9a00      	ldr	r2, [sp, #0]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d1a5      	bne.n	8008c84 <_dtoa_r+0xac4>
 8008d38:	f10a 0a01 	add.w	sl, sl, #1
 8008d3c:	2331      	movs	r3, #49	; 0x31
 8008d3e:	e779      	b.n	8008c34 <_dtoa_r+0xa74>
 8008d40:	4b13      	ldr	r3, [pc, #76]	; (8008d90 <_dtoa_r+0xbd0>)
 8008d42:	f7ff baaf 	b.w	80082a4 <_dtoa_r+0xe4>
 8008d46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f47f aa86 	bne.w	800825a <_dtoa_r+0x9a>
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <_dtoa_r+0xbd4>)
 8008d50:	f7ff baa8 	b.w	80082a4 <_dtoa_r+0xe4>
 8008d54:	f1b9 0f00 	cmp.w	r9, #0
 8008d58:	dc03      	bgt.n	8008d62 <_dtoa_r+0xba2>
 8008d5a:	9b05      	ldr	r3, [sp, #20]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	f73f aec9 	bgt.w	8008af4 <_dtoa_r+0x934>
 8008d62:	9d00      	ldr	r5, [sp, #0]
 8008d64:	4631      	mov	r1, r6
 8008d66:	4658      	mov	r0, fp
 8008d68:	f7ff f99e 	bl	80080a8 <quorem>
 8008d6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008d70:	f805 3b01 	strb.w	r3, [r5], #1
 8008d74:	9a00      	ldr	r2, [sp, #0]
 8008d76:	1aaa      	subs	r2, r5, r2
 8008d78:	4591      	cmp	r9, r2
 8008d7a:	ddba      	ble.n	8008cf2 <_dtoa_r+0xb32>
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	2300      	movs	r3, #0
 8008d80:	220a      	movs	r2, #10
 8008d82:	4620      	mov	r0, r4
 8008d84:	f000 f970 	bl	8009068 <__multadd>
 8008d88:	4683      	mov	fp, r0
 8008d8a:	e7eb      	b.n	8008d64 <_dtoa_r+0xba4>
 8008d8c:	0800a6e7 	.word	0x0800a6e7
 8008d90:	0800a640 	.word	0x0800a640
 8008d94:	0800a664 	.word	0x0800a664

08008d98 <std>:
 8008d98:	2300      	movs	r3, #0
 8008d9a:	b510      	push	{r4, lr}
 8008d9c:	4604      	mov	r4, r0
 8008d9e:	e9c0 3300 	strd	r3, r3, [r0]
 8008da2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008da6:	6083      	str	r3, [r0, #8]
 8008da8:	8181      	strh	r1, [r0, #12]
 8008daa:	6643      	str	r3, [r0, #100]	; 0x64
 8008dac:	81c2      	strh	r2, [r0, #14]
 8008dae:	6183      	str	r3, [r0, #24]
 8008db0:	4619      	mov	r1, r3
 8008db2:	2208      	movs	r2, #8
 8008db4:	305c      	adds	r0, #92	; 0x5c
 8008db6:	f7fe fcb9 	bl	800772c <memset>
 8008dba:	4b05      	ldr	r3, [pc, #20]	; (8008dd0 <std+0x38>)
 8008dbc:	6263      	str	r3, [r4, #36]	; 0x24
 8008dbe:	4b05      	ldr	r3, [pc, #20]	; (8008dd4 <std+0x3c>)
 8008dc0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008dc2:	4b05      	ldr	r3, [pc, #20]	; (8008dd8 <std+0x40>)
 8008dc4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008dc6:	4b05      	ldr	r3, [pc, #20]	; (8008ddc <std+0x44>)
 8008dc8:	6224      	str	r4, [r4, #32]
 8008dca:	6323      	str	r3, [r4, #48]	; 0x30
 8008dcc:	bd10      	pop	{r4, pc}
 8008dce:	bf00      	nop
 8008dd0:	08009da1 	.word	0x08009da1
 8008dd4:	08009dc3 	.word	0x08009dc3
 8008dd8:	08009dfb 	.word	0x08009dfb
 8008ddc:	08009e1f 	.word	0x08009e1f

08008de0 <_cleanup_r>:
 8008de0:	4901      	ldr	r1, [pc, #4]	; (8008de8 <_cleanup_r+0x8>)
 8008de2:	f000 b8af 	b.w	8008f44 <_fwalk_reent>
 8008de6:	bf00      	nop
 8008de8:	0800a135 	.word	0x0800a135

08008dec <__sfmoreglue>:
 8008dec:	b570      	push	{r4, r5, r6, lr}
 8008dee:	1e4a      	subs	r2, r1, #1
 8008df0:	2568      	movs	r5, #104	; 0x68
 8008df2:	4355      	muls	r5, r2
 8008df4:	460e      	mov	r6, r1
 8008df6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dfa:	f000 fcb1 	bl	8009760 <_malloc_r>
 8008dfe:	4604      	mov	r4, r0
 8008e00:	b140      	cbz	r0, 8008e14 <__sfmoreglue+0x28>
 8008e02:	2100      	movs	r1, #0
 8008e04:	e9c0 1600 	strd	r1, r6, [r0]
 8008e08:	300c      	adds	r0, #12
 8008e0a:	60a0      	str	r0, [r4, #8]
 8008e0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e10:	f7fe fc8c 	bl	800772c <memset>
 8008e14:	4620      	mov	r0, r4
 8008e16:	bd70      	pop	{r4, r5, r6, pc}

08008e18 <__sfp_lock_acquire>:
 8008e18:	4801      	ldr	r0, [pc, #4]	; (8008e20 <__sfp_lock_acquire+0x8>)
 8008e1a:	f000 b8b8 	b.w	8008f8e <__retarget_lock_acquire_recursive>
 8008e1e:	bf00      	nop
 8008e20:	2000079c 	.word	0x2000079c

08008e24 <__sfp_lock_release>:
 8008e24:	4801      	ldr	r0, [pc, #4]	; (8008e2c <__sfp_lock_release+0x8>)
 8008e26:	f000 b8b3 	b.w	8008f90 <__retarget_lock_release_recursive>
 8008e2a:	bf00      	nop
 8008e2c:	2000079c 	.word	0x2000079c

08008e30 <__sinit_lock_acquire>:
 8008e30:	4801      	ldr	r0, [pc, #4]	; (8008e38 <__sinit_lock_acquire+0x8>)
 8008e32:	f000 b8ac 	b.w	8008f8e <__retarget_lock_acquire_recursive>
 8008e36:	bf00      	nop
 8008e38:	20000797 	.word	0x20000797

08008e3c <__sinit_lock_release>:
 8008e3c:	4801      	ldr	r0, [pc, #4]	; (8008e44 <__sinit_lock_release+0x8>)
 8008e3e:	f000 b8a7 	b.w	8008f90 <__retarget_lock_release_recursive>
 8008e42:	bf00      	nop
 8008e44:	20000797 	.word	0x20000797

08008e48 <__sinit>:
 8008e48:	b510      	push	{r4, lr}
 8008e4a:	4604      	mov	r4, r0
 8008e4c:	f7ff fff0 	bl	8008e30 <__sinit_lock_acquire>
 8008e50:	69a3      	ldr	r3, [r4, #24]
 8008e52:	b11b      	cbz	r3, 8008e5c <__sinit+0x14>
 8008e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e58:	f7ff bff0 	b.w	8008e3c <__sinit_lock_release>
 8008e5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008e60:	6523      	str	r3, [r4, #80]	; 0x50
 8008e62:	4b13      	ldr	r3, [pc, #76]	; (8008eb0 <__sinit+0x68>)
 8008e64:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <__sinit+0x6c>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	62a2      	str	r2, [r4, #40]	; 0x28
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	bf04      	itt	eq
 8008e6e:	2301      	moveq	r3, #1
 8008e70:	61a3      	streq	r3, [r4, #24]
 8008e72:	4620      	mov	r0, r4
 8008e74:	f000 f820 	bl	8008eb8 <__sfp>
 8008e78:	6060      	str	r0, [r4, #4]
 8008e7a:	4620      	mov	r0, r4
 8008e7c:	f000 f81c 	bl	8008eb8 <__sfp>
 8008e80:	60a0      	str	r0, [r4, #8]
 8008e82:	4620      	mov	r0, r4
 8008e84:	f000 f818 	bl	8008eb8 <__sfp>
 8008e88:	2200      	movs	r2, #0
 8008e8a:	60e0      	str	r0, [r4, #12]
 8008e8c:	2104      	movs	r1, #4
 8008e8e:	6860      	ldr	r0, [r4, #4]
 8008e90:	f7ff ff82 	bl	8008d98 <std>
 8008e94:	68a0      	ldr	r0, [r4, #8]
 8008e96:	2201      	movs	r2, #1
 8008e98:	2109      	movs	r1, #9
 8008e9a:	f7ff ff7d 	bl	8008d98 <std>
 8008e9e:	68e0      	ldr	r0, [r4, #12]
 8008ea0:	2202      	movs	r2, #2
 8008ea2:	2112      	movs	r1, #18
 8008ea4:	f7ff ff78 	bl	8008d98 <std>
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	61a3      	str	r3, [r4, #24]
 8008eac:	e7d2      	b.n	8008e54 <__sinit+0xc>
 8008eae:	bf00      	nop
 8008eb0:	0800a62c 	.word	0x0800a62c
 8008eb4:	08008de1 	.word	0x08008de1

08008eb8 <__sfp>:
 8008eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eba:	4607      	mov	r7, r0
 8008ebc:	f7ff ffac 	bl	8008e18 <__sfp_lock_acquire>
 8008ec0:	4b1e      	ldr	r3, [pc, #120]	; (8008f3c <__sfp+0x84>)
 8008ec2:	681e      	ldr	r6, [r3, #0]
 8008ec4:	69b3      	ldr	r3, [r6, #24]
 8008ec6:	b913      	cbnz	r3, 8008ece <__sfp+0x16>
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f7ff ffbd 	bl	8008e48 <__sinit>
 8008ece:	3648      	adds	r6, #72	; 0x48
 8008ed0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	d503      	bpl.n	8008ee0 <__sfp+0x28>
 8008ed8:	6833      	ldr	r3, [r6, #0]
 8008eda:	b30b      	cbz	r3, 8008f20 <__sfp+0x68>
 8008edc:	6836      	ldr	r6, [r6, #0]
 8008ede:	e7f7      	b.n	8008ed0 <__sfp+0x18>
 8008ee0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008ee4:	b9d5      	cbnz	r5, 8008f1c <__sfp+0x64>
 8008ee6:	4b16      	ldr	r3, [pc, #88]	; (8008f40 <__sfp+0x88>)
 8008ee8:	60e3      	str	r3, [r4, #12]
 8008eea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008eee:	6665      	str	r5, [r4, #100]	; 0x64
 8008ef0:	f000 f84c 	bl	8008f8c <__retarget_lock_init_recursive>
 8008ef4:	f7ff ff96 	bl	8008e24 <__sfp_lock_release>
 8008ef8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008efc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008f00:	6025      	str	r5, [r4, #0]
 8008f02:	61a5      	str	r5, [r4, #24]
 8008f04:	2208      	movs	r2, #8
 8008f06:	4629      	mov	r1, r5
 8008f08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008f0c:	f7fe fc0e 	bl	800772c <memset>
 8008f10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008f14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008f18:	4620      	mov	r0, r4
 8008f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1c:	3468      	adds	r4, #104	; 0x68
 8008f1e:	e7d9      	b.n	8008ed4 <__sfp+0x1c>
 8008f20:	2104      	movs	r1, #4
 8008f22:	4638      	mov	r0, r7
 8008f24:	f7ff ff62 	bl	8008dec <__sfmoreglue>
 8008f28:	4604      	mov	r4, r0
 8008f2a:	6030      	str	r0, [r6, #0]
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d1d5      	bne.n	8008edc <__sfp+0x24>
 8008f30:	f7ff ff78 	bl	8008e24 <__sfp_lock_release>
 8008f34:	230c      	movs	r3, #12
 8008f36:	603b      	str	r3, [r7, #0]
 8008f38:	e7ee      	b.n	8008f18 <__sfp+0x60>
 8008f3a:	bf00      	nop
 8008f3c:	0800a62c 	.word	0x0800a62c
 8008f40:	ffff0001 	.word	0xffff0001

08008f44 <_fwalk_reent>:
 8008f44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f48:	4606      	mov	r6, r0
 8008f4a:	4688      	mov	r8, r1
 8008f4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008f50:	2700      	movs	r7, #0
 8008f52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008f56:	f1b9 0901 	subs.w	r9, r9, #1
 8008f5a:	d505      	bpl.n	8008f68 <_fwalk_reent+0x24>
 8008f5c:	6824      	ldr	r4, [r4, #0]
 8008f5e:	2c00      	cmp	r4, #0
 8008f60:	d1f7      	bne.n	8008f52 <_fwalk_reent+0xe>
 8008f62:	4638      	mov	r0, r7
 8008f64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f68:	89ab      	ldrh	r3, [r5, #12]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d907      	bls.n	8008f7e <_fwalk_reent+0x3a>
 8008f6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f72:	3301      	adds	r3, #1
 8008f74:	d003      	beq.n	8008f7e <_fwalk_reent+0x3a>
 8008f76:	4629      	mov	r1, r5
 8008f78:	4630      	mov	r0, r6
 8008f7a:	47c0      	blx	r8
 8008f7c:	4307      	orrs	r7, r0
 8008f7e:	3568      	adds	r5, #104	; 0x68
 8008f80:	e7e9      	b.n	8008f56 <_fwalk_reent+0x12>
	...

08008f84 <_localeconv_r>:
 8008f84:	4800      	ldr	r0, [pc, #0]	; (8008f88 <_localeconv_r+0x4>)
 8008f86:	4770      	bx	lr
 8008f88:	200002a8 	.word	0x200002a8

08008f8c <__retarget_lock_init_recursive>:
 8008f8c:	4770      	bx	lr

08008f8e <__retarget_lock_acquire_recursive>:
 8008f8e:	4770      	bx	lr

08008f90 <__retarget_lock_release_recursive>:
 8008f90:	4770      	bx	lr
	...

08008f94 <malloc>:
 8008f94:	4b02      	ldr	r3, [pc, #8]	; (8008fa0 <malloc+0xc>)
 8008f96:	4601      	mov	r1, r0
 8008f98:	6818      	ldr	r0, [r3, #0]
 8008f9a:	f000 bbe1 	b.w	8009760 <_malloc_r>
 8008f9e:	bf00      	nop
 8008fa0:	20000154 	.word	0x20000154

08008fa4 <_Balloc>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fa8:	4604      	mov	r4, r0
 8008faa:	460d      	mov	r5, r1
 8008fac:	b976      	cbnz	r6, 8008fcc <_Balloc+0x28>
 8008fae:	2010      	movs	r0, #16
 8008fb0:	f7ff fff0 	bl	8008f94 <malloc>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fb8:	b920      	cbnz	r0, 8008fc4 <_Balloc+0x20>
 8008fba:	4b18      	ldr	r3, [pc, #96]	; (800901c <_Balloc+0x78>)
 8008fbc:	4818      	ldr	r0, [pc, #96]	; (8009020 <_Balloc+0x7c>)
 8008fbe:	2166      	movs	r1, #102	; 0x66
 8008fc0:	f001 f804 	bl	8009fcc <__assert_func>
 8008fc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fc8:	6006      	str	r6, [r0, #0]
 8008fca:	60c6      	str	r6, [r0, #12]
 8008fcc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fce:	68f3      	ldr	r3, [r6, #12]
 8008fd0:	b183      	cbz	r3, 8008ff4 <_Balloc+0x50>
 8008fd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008fda:	b9b8      	cbnz	r0, 800900c <_Balloc+0x68>
 8008fdc:	2101      	movs	r1, #1
 8008fde:	fa01 f605 	lsl.w	r6, r1, r5
 8008fe2:	1d72      	adds	r2, r6, #5
 8008fe4:	0092      	lsls	r2, r2, #2
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f000 fb5a 	bl	80096a0 <_calloc_r>
 8008fec:	b160      	cbz	r0, 8009008 <_Balloc+0x64>
 8008fee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008ff2:	e00e      	b.n	8009012 <_Balloc+0x6e>
 8008ff4:	2221      	movs	r2, #33	; 0x21
 8008ff6:	2104      	movs	r1, #4
 8008ff8:	4620      	mov	r0, r4
 8008ffa:	f000 fb51 	bl	80096a0 <_calloc_r>
 8008ffe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009000:	60f0      	str	r0, [r6, #12]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1e4      	bne.n	8008fd2 <_Balloc+0x2e>
 8009008:	2000      	movs	r0, #0
 800900a:	bd70      	pop	{r4, r5, r6, pc}
 800900c:	6802      	ldr	r2, [r0, #0]
 800900e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009012:	2300      	movs	r3, #0
 8009014:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009018:	e7f7      	b.n	800900a <_Balloc+0x66>
 800901a:	bf00      	nop
 800901c:	0800a671 	.word	0x0800a671
 8009020:	0800a758 	.word	0x0800a758

08009024 <_Bfree>:
 8009024:	b570      	push	{r4, r5, r6, lr}
 8009026:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009028:	4605      	mov	r5, r0
 800902a:	460c      	mov	r4, r1
 800902c:	b976      	cbnz	r6, 800904c <_Bfree+0x28>
 800902e:	2010      	movs	r0, #16
 8009030:	f7ff ffb0 	bl	8008f94 <malloc>
 8009034:	4602      	mov	r2, r0
 8009036:	6268      	str	r0, [r5, #36]	; 0x24
 8009038:	b920      	cbnz	r0, 8009044 <_Bfree+0x20>
 800903a:	4b09      	ldr	r3, [pc, #36]	; (8009060 <_Bfree+0x3c>)
 800903c:	4809      	ldr	r0, [pc, #36]	; (8009064 <_Bfree+0x40>)
 800903e:	218a      	movs	r1, #138	; 0x8a
 8009040:	f000 ffc4 	bl	8009fcc <__assert_func>
 8009044:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009048:	6006      	str	r6, [r0, #0]
 800904a:	60c6      	str	r6, [r0, #12]
 800904c:	b13c      	cbz	r4, 800905e <_Bfree+0x3a>
 800904e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009050:	6862      	ldr	r2, [r4, #4]
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009058:	6021      	str	r1, [r4, #0]
 800905a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800905e:	bd70      	pop	{r4, r5, r6, pc}
 8009060:	0800a671 	.word	0x0800a671
 8009064:	0800a758 	.word	0x0800a758

08009068 <__multadd>:
 8009068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800906c:	690e      	ldr	r6, [r1, #16]
 800906e:	4607      	mov	r7, r0
 8009070:	4698      	mov	r8, r3
 8009072:	460c      	mov	r4, r1
 8009074:	f101 0014 	add.w	r0, r1, #20
 8009078:	2300      	movs	r3, #0
 800907a:	6805      	ldr	r5, [r0, #0]
 800907c:	b2a9      	uxth	r1, r5
 800907e:	fb02 8101 	mla	r1, r2, r1, r8
 8009082:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8009086:	0c2d      	lsrs	r5, r5, #16
 8009088:	fb02 c505 	mla	r5, r2, r5, ip
 800908c:	b289      	uxth	r1, r1
 800908e:	3301      	adds	r3, #1
 8009090:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8009094:	429e      	cmp	r6, r3
 8009096:	f840 1b04 	str.w	r1, [r0], #4
 800909a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800909e:	dcec      	bgt.n	800907a <__multadd+0x12>
 80090a0:	f1b8 0f00 	cmp.w	r8, #0
 80090a4:	d022      	beq.n	80090ec <__multadd+0x84>
 80090a6:	68a3      	ldr	r3, [r4, #8]
 80090a8:	42b3      	cmp	r3, r6
 80090aa:	dc19      	bgt.n	80090e0 <__multadd+0x78>
 80090ac:	6861      	ldr	r1, [r4, #4]
 80090ae:	4638      	mov	r0, r7
 80090b0:	3101      	adds	r1, #1
 80090b2:	f7ff ff77 	bl	8008fa4 <_Balloc>
 80090b6:	4605      	mov	r5, r0
 80090b8:	b928      	cbnz	r0, 80090c6 <__multadd+0x5e>
 80090ba:	4602      	mov	r2, r0
 80090bc:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <__multadd+0x8c>)
 80090be:	480e      	ldr	r0, [pc, #56]	; (80090f8 <__multadd+0x90>)
 80090c0:	21b5      	movs	r1, #181	; 0xb5
 80090c2:	f000 ff83 	bl	8009fcc <__assert_func>
 80090c6:	6922      	ldr	r2, [r4, #16]
 80090c8:	3202      	adds	r2, #2
 80090ca:	f104 010c 	add.w	r1, r4, #12
 80090ce:	0092      	lsls	r2, r2, #2
 80090d0:	300c      	adds	r0, #12
 80090d2:	f7fe fb1d 	bl	8007710 <memcpy>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4638      	mov	r0, r7
 80090da:	f7ff ffa3 	bl	8009024 <_Bfree>
 80090de:	462c      	mov	r4, r5
 80090e0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80090e4:	3601      	adds	r6, #1
 80090e6:	f8c3 8014 	str.w	r8, [r3, #20]
 80090ea:	6126      	str	r6, [r4, #16]
 80090ec:	4620      	mov	r0, r4
 80090ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f2:	bf00      	nop
 80090f4:	0800a6e7 	.word	0x0800a6e7
 80090f8:	0800a758 	.word	0x0800a758

080090fc <__hi0bits>:
 80090fc:	0c03      	lsrs	r3, r0, #16
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	b9d3      	cbnz	r3, 8009138 <__hi0bits+0x3c>
 8009102:	0400      	lsls	r0, r0, #16
 8009104:	2310      	movs	r3, #16
 8009106:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800910a:	bf04      	itt	eq
 800910c:	0200      	lsleq	r0, r0, #8
 800910e:	3308      	addeq	r3, #8
 8009110:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009114:	bf04      	itt	eq
 8009116:	0100      	lsleq	r0, r0, #4
 8009118:	3304      	addeq	r3, #4
 800911a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800911e:	bf04      	itt	eq
 8009120:	0080      	lsleq	r0, r0, #2
 8009122:	3302      	addeq	r3, #2
 8009124:	2800      	cmp	r0, #0
 8009126:	db05      	blt.n	8009134 <__hi0bits+0x38>
 8009128:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800912c:	f103 0301 	add.w	r3, r3, #1
 8009130:	bf08      	it	eq
 8009132:	2320      	moveq	r3, #32
 8009134:	4618      	mov	r0, r3
 8009136:	4770      	bx	lr
 8009138:	2300      	movs	r3, #0
 800913a:	e7e4      	b.n	8009106 <__hi0bits+0xa>

0800913c <__lo0bits>:
 800913c:	6803      	ldr	r3, [r0, #0]
 800913e:	f013 0207 	ands.w	r2, r3, #7
 8009142:	4601      	mov	r1, r0
 8009144:	d00b      	beq.n	800915e <__lo0bits+0x22>
 8009146:	07da      	lsls	r2, r3, #31
 8009148:	d424      	bmi.n	8009194 <__lo0bits+0x58>
 800914a:	0798      	lsls	r0, r3, #30
 800914c:	bf49      	itett	mi
 800914e:	085b      	lsrmi	r3, r3, #1
 8009150:	089b      	lsrpl	r3, r3, #2
 8009152:	2001      	movmi	r0, #1
 8009154:	600b      	strmi	r3, [r1, #0]
 8009156:	bf5c      	itt	pl
 8009158:	600b      	strpl	r3, [r1, #0]
 800915a:	2002      	movpl	r0, #2
 800915c:	4770      	bx	lr
 800915e:	b298      	uxth	r0, r3
 8009160:	b9b0      	cbnz	r0, 8009190 <__lo0bits+0x54>
 8009162:	0c1b      	lsrs	r3, r3, #16
 8009164:	2010      	movs	r0, #16
 8009166:	f013 0fff 	tst.w	r3, #255	; 0xff
 800916a:	bf04      	itt	eq
 800916c:	0a1b      	lsreq	r3, r3, #8
 800916e:	3008      	addeq	r0, #8
 8009170:	071a      	lsls	r2, r3, #28
 8009172:	bf04      	itt	eq
 8009174:	091b      	lsreq	r3, r3, #4
 8009176:	3004      	addeq	r0, #4
 8009178:	079a      	lsls	r2, r3, #30
 800917a:	bf04      	itt	eq
 800917c:	089b      	lsreq	r3, r3, #2
 800917e:	3002      	addeq	r0, #2
 8009180:	07da      	lsls	r2, r3, #31
 8009182:	d403      	bmi.n	800918c <__lo0bits+0x50>
 8009184:	085b      	lsrs	r3, r3, #1
 8009186:	f100 0001 	add.w	r0, r0, #1
 800918a:	d005      	beq.n	8009198 <__lo0bits+0x5c>
 800918c:	600b      	str	r3, [r1, #0]
 800918e:	4770      	bx	lr
 8009190:	4610      	mov	r0, r2
 8009192:	e7e8      	b.n	8009166 <__lo0bits+0x2a>
 8009194:	2000      	movs	r0, #0
 8009196:	4770      	bx	lr
 8009198:	2020      	movs	r0, #32
 800919a:	4770      	bx	lr

0800919c <__i2b>:
 800919c:	b510      	push	{r4, lr}
 800919e:	460c      	mov	r4, r1
 80091a0:	2101      	movs	r1, #1
 80091a2:	f7ff feff 	bl	8008fa4 <_Balloc>
 80091a6:	4602      	mov	r2, r0
 80091a8:	b928      	cbnz	r0, 80091b6 <__i2b+0x1a>
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <__i2b+0x24>)
 80091ac:	4805      	ldr	r0, [pc, #20]	; (80091c4 <__i2b+0x28>)
 80091ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80091b2:	f000 ff0b 	bl	8009fcc <__assert_func>
 80091b6:	2301      	movs	r3, #1
 80091b8:	6144      	str	r4, [r0, #20]
 80091ba:	6103      	str	r3, [r0, #16]
 80091bc:	bd10      	pop	{r4, pc}
 80091be:	bf00      	nop
 80091c0:	0800a6e7 	.word	0x0800a6e7
 80091c4:	0800a758 	.word	0x0800a758

080091c8 <__multiply>:
 80091c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091cc:	4614      	mov	r4, r2
 80091ce:	690a      	ldr	r2, [r1, #16]
 80091d0:	6923      	ldr	r3, [r4, #16]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	bfb8      	it	lt
 80091d6:	460b      	movlt	r3, r1
 80091d8:	460d      	mov	r5, r1
 80091da:	bfbc      	itt	lt
 80091dc:	4625      	movlt	r5, r4
 80091de:	461c      	movlt	r4, r3
 80091e0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80091e4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091e8:	68ab      	ldr	r3, [r5, #8]
 80091ea:	6869      	ldr	r1, [r5, #4]
 80091ec:	eb0a 0709 	add.w	r7, sl, r9
 80091f0:	42bb      	cmp	r3, r7
 80091f2:	b085      	sub	sp, #20
 80091f4:	bfb8      	it	lt
 80091f6:	3101      	addlt	r1, #1
 80091f8:	f7ff fed4 	bl	8008fa4 <_Balloc>
 80091fc:	b930      	cbnz	r0, 800920c <__multiply+0x44>
 80091fe:	4602      	mov	r2, r0
 8009200:	4b42      	ldr	r3, [pc, #264]	; (800930c <__multiply+0x144>)
 8009202:	4843      	ldr	r0, [pc, #268]	; (8009310 <__multiply+0x148>)
 8009204:	f240 115d 	movw	r1, #349	; 0x15d
 8009208:	f000 fee0 	bl	8009fcc <__assert_func>
 800920c:	f100 0614 	add.w	r6, r0, #20
 8009210:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8009214:	4633      	mov	r3, r6
 8009216:	2200      	movs	r2, #0
 8009218:	4543      	cmp	r3, r8
 800921a:	d31e      	bcc.n	800925a <__multiply+0x92>
 800921c:	f105 0c14 	add.w	ip, r5, #20
 8009220:	f104 0314 	add.w	r3, r4, #20
 8009224:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8009228:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800922c:	9202      	str	r2, [sp, #8]
 800922e:	ebac 0205 	sub.w	r2, ip, r5
 8009232:	3a15      	subs	r2, #21
 8009234:	f022 0203 	bic.w	r2, r2, #3
 8009238:	3204      	adds	r2, #4
 800923a:	f105 0115 	add.w	r1, r5, #21
 800923e:	458c      	cmp	ip, r1
 8009240:	bf38      	it	cc
 8009242:	2204      	movcc	r2, #4
 8009244:	9201      	str	r2, [sp, #4]
 8009246:	9a02      	ldr	r2, [sp, #8]
 8009248:	9303      	str	r3, [sp, #12]
 800924a:	429a      	cmp	r2, r3
 800924c:	d808      	bhi.n	8009260 <__multiply+0x98>
 800924e:	2f00      	cmp	r7, #0
 8009250:	dc55      	bgt.n	80092fe <__multiply+0x136>
 8009252:	6107      	str	r7, [r0, #16]
 8009254:	b005      	add	sp, #20
 8009256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800925a:	f843 2b04 	str.w	r2, [r3], #4
 800925e:	e7db      	b.n	8009218 <__multiply+0x50>
 8009260:	f8b3 a000 	ldrh.w	sl, [r3]
 8009264:	f1ba 0f00 	cmp.w	sl, #0
 8009268:	d020      	beq.n	80092ac <__multiply+0xe4>
 800926a:	f105 0e14 	add.w	lr, r5, #20
 800926e:	46b1      	mov	r9, r6
 8009270:	2200      	movs	r2, #0
 8009272:	f85e 4b04 	ldr.w	r4, [lr], #4
 8009276:	f8d9 b000 	ldr.w	fp, [r9]
 800927a:	b2a1      	uxth	r1, r4
 800927c:	fa1f fb8b 	uxth.w	fp, fp
 8009280:	fb0a b101 	mla	r1, sl, r1, fp
 8009284:	4411      	add	r1, r2
 8009286:	f8d9 2000 	ldr.w	r2, [r9]
 800928a:	0c24      	lsrs	r4, r4, #16
 800928c:	0c12      	lsrs	r2, r2, #16
 800928e:	fb0a 2404 	mla	r4, sl, r4, r2
 8009292:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8009296:	b289      	uxth	r1, r1
 8009298:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800929c:	45f4      	cmp	ip, lr
 800929e:	f849 1b04 	str.w	r1, [r9], #4
 80092a2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80092a6:	d8e4      	bhi.n	8009272 <__multiply+0xaa>
 80092a8:	9901      	ldr	r1, [sp, #4]
 80092aa:	5072      	str	r2, [r6, r1]
 80092ac:	9a03      	ldr	r2, [sp, #12]
 80092ae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80092b2:	3304      	adds	r3, #4
 80092b4:	f1b9 0f00 	cmp.w	r9, #0
 80092b8:	d01f      	beq.n	80092fa <__multiply+0x132>
 80092ba:	6834      	ldr	r4, [r6, #0]
 80092bc:	f105 0114 	add.w	r1, r5, #20
 80092c0:	46b6      	mov	lr, r6
 80092c2:	f04f 0a00 	mov.w	sl, #0
 80092c6:	880a      	ldrh	r2, [r1, #0]
 80092c8:	f8be b002 	ldrh.w	fp, [lr, #2]
 80092cc:	fb09 b202 	mla	r2, r9, r2, fp
 80092d0:	4492      	add	sl, r2
 80092d2:	b2a4      	uxth	r4, r4
 80092d4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80092d8:	f84e 4b04 	str.w	r4, [lr], #4
 80092dc:	f851 4b04 	ldr.w	r4, [r1], #4
 80092e0:	f8be 2000 	ldrh.w	r2, [lr]
 80092e4:	0c24      	lsrs	r4, r4, #16
 80092e6:	fb09 2404 	mla	r4, r9, r4, r2
 80092ea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80092ee:	458c      	cmp	ip, r1
 80092f0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80092f4:	d8e7      	bhi.n	80092c6 <__multiply+0xfe>
 80092f6:	9a01      	ldr	r2, [sp, #4]
 80092f8:	50b4      	str	r4, [r6, r2]
 80092fa:	3604      	adds	r6, #4
 80092fc:	e7a3      	b.n	8009246 <__multiply+0x7e>
 80092fe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1a5      	bne.n	8009252 <__multiply+0x8a>
 8009306:	3f01      	subs	r7, #1
 8009308:	e7a1      	b.n	800924e <__multiply+0x86>
 800930a:	bf00      	nop
 800930c:	0800a6e7 	.word	0x0800a6e7
 8009310:	0800a758 	.word	0x0800a758

08009314 <__pow5mult>:
 8009314:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009318:	4615      	mov	r5, r2
 800931a:	f012 0203 	ands.w	r2, r2, #3
 800931e:	4606      	mov	r6, r0
 8009320:	460f      	mov	r7, r1
 8009322:	d007      	beq.n	8009334 <__pow5mult+0x20>
 8009324:	4c25      	ldr	r4, [pc, #148]	; (80093bc <__pow5mult+0xa8>)
 8009326:	3a01      	subs	r2, #1
 8009328:	2300      	movs	r3, #0
 800932a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800932e:	f7ff fe9b 	bl	8009068 <__multadd>
 8009332:	4607      	mov	r7, r0
 8009334:	10ad      	asrs	r5, r5, #2
 8009336:	d03d      	beq.n	80093b4 <__pow5mult+0xa0>
 8009338:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800933a:	b97c      	cbnz	r4, 800935c <__pow5mult+0x48>
 800933c:	2010      	movs	r0, #16
 800933e:	f7ff fe29 	bl	8008f94 <malloc>
 8009342:	4602      	mov	r2, r0
 8009344:	6270      	str	r0, [r6, #36]	; 0x24
 8009346:	b928      	cbnz	r0, 8009354 <__pow5mult+0x40>
 8009348:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <__pow5mult+0xac>)
 800934a:	481e      	ldr	r0, [pc, #120]	; (80093c4 <__pow5mult+0xb0>)
 800934c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009350:	f000 fe3c 	bl	8009fcc <__assert_func>
 8009354:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009358:	6004      	str	r4, [r0, #0]
 800935a:	60c4      	str	r4, [r0, #12]
 800935c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009360:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009364:	b94c      	cbnz	r4, 800937a <__pow5mult+0x66>
 8009366:	f240 2171 	movw	r1, #625	; 0x271
 800936a:	4630      	mov	r0, r6
 800936c:	f7ff ff16 	bl	800919c <__i2b>
 8009370:	2300      	movs	r3, #0
 8009372:	f8c8 0008 	str.w	r0, [r8, #8]
 8009376:	4604      	mov	r4, r0
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	f04f 0900 	mov.w	r9, #0
 800937e:	07eb      	lsls	r3, r5, #31
 8009380:	d50a      	bpl.n	8009398 <__pow5mult+0x84>
 8009382:	4639      	mov	r1, r7
 8009384:	4622      	mov	r2, r4
 8009386:	4630      	mov	r0, r6
 8009388:	f7ff ff1e 	bl	80091c8 <__multiply>
 800938c:	4639      	mov	r1, r7
 800938e:	4680      	mov	r8, r0
 8009390:	4630      	mov	r0, r6
 8009392:	f7ff fe47 	bl	8009024 <_Bfree>
 8009396:	4647      	mov	r7, r8
 8009398:	106d      	asrs	r5, r5, #1
 800939a:	d00b      	beq.n	80093b4 <__pow5mult+0xa0>
 800939c:	6820      	ldr	r0, [r4, #0]
 800939e:	b938      	cbnz	r0, 80093b0 <__pow5mult+0x9c>
 80093a0:	4622      	mov	r2, r4
 80093a2:	4621      	mov	r1, r4
 80093a4:	4630      	mov	r0, r6
 80093a6:	f7ff ff0f 	bl	80091c8 <__multiply>
 80093aa:	6020      	str	r0, [r4, #0]
 80093ac:	f8c0 9000 	str.w	r9, [r0]
 80093b0:	4604      	mov	r4, r0
 80093b2:	e7e4      	b.n	800937e <__pow5mult+0x6a>
 80093b4:	4638      	mov	r0, r7
 80093b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80093ba:	bf00      	nop
 80093bc:	0800a8a8 	.word	0x0800a8a8
 80093c0:	0800a671 	.word	0x0800a671
 80093c4:	0800a758 	.word	0x0800a758

080093c8 <__lshift>:
 80093c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093cc:	460c      	mov	r4, r1
 80093ce:	6849      	ldr	r1, [r1, #4]
 80093d0:	6923      	ldr	r3, [r4, #16]
 80093d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80093d6:	68a3      	ldr	r3, [r4, #8]
 80093d8:	4607      	mov	r7, r0
 80093da:	4691      	mov	r9, r2
 80093dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80093e0:	f108 0601 	add.w	r6, r8, #1
 80093e4:	42b3      	cmp	r3, r6
 80093e6:	db0b      	blt.n	8009400 <__lshift+0x38>
 80093e8:	4638      	mov	r0, r7
 80093ea:	f7ff fddb 	bl	8008fa4 <_Balloc>
 80093ee:	4605      	mov	r5, r0
 80093f0:	b948      	cbnz	r0, 8009406 <__lshift+0x3e>
 80093f2:	4602      	mov	r2, r0
 80093f4:	4b28      	ldr	r3, [pc, #160]	; (8009498 <__lshift+0xd0>)
 80093f6:	4829      	ldr	r0, [pc, #164]	; (800949c <__lshift+0xd4>)
 80093f8:	f240 11d9 	movw	r1, #473	; 0x1d9
 80093fc:	f000 fde6 	bl	8009fcc <__assert_func>
 8009400:	3101      	adds	r1, #1
 8009402:	005b      	lsls	r3, r3, #1
 8009404:	e7ee      	b.n	80093e4 <__lshift+0x1c>
 8009406:	2300      	movs	r3, #0
 8009408:	f100 0114 	add.w	r1, r0, #20
 800940c:	f100 0210 	add.w	r2, r0, #16
 8009410:	4618      	mov	r0, r3
 8009412:	4553      	cmp	r3, sl
 8009414:	db33      	blt.n	800947e <__lshift+0xb6>
 8009416:	6920      	ldr	r0, [r4, #16]
 8009418:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800941c:	f104 0314 	add.w	r3, r4, #20
 8009420:	f019 091f 	ands.w	r9, r9, #31
 8009424:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009428:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800942c:	d02b      	beq.n	8009486 <__lshift+0xbe>
 800942e:	f1c9 0e20 	rsb	lr, r9, #32
 8009432:	468a      	mov	sl, r1
 8009434:	2200      	movs	r2, #0
 8009436:	6818      	ldr	r0, [r3, #0]
 8009438:	fa00 f009 	lsl.w	r0, r0, r9
 800943c:	4302      	orrs	r2, r0
 800943e:	f84a 2b04 	str.w	r2, [sl], #4
 8009442:	f853 2b04 	ldr.w	r2, [r3], #4
 8009446:	459c      	cmp	ip, r3
 8009448:	fa22 f20e 	lsr.w	r2, r2, lr
 800944c:	d8f3      	bhi.n	8009436 <__lshift+0x6e>
 800944e:	ebac 0304 	sub.w	r3, ip, r4
 8009452:	3b15      	subs	r3, #21
 8009454:	f023 0303 	bic.w	r3, r3, #3
 8009458:	3304      	adds	r3, #4
 800945a:	f104 0015 	add.w	r0, r4, #21
 800945e:	4584      	cmp	ip, r0
 8009460:	bf38      	it	cc
 8009462:	2304      	movcc	r3, #4
 8009464:	50ca      	str	r2, [r1, r3]
 8009466:	b10a      	cbz	r2, 800946c <__lshift+0xa4>
 8009468:	f108 0602 	add.w	r6, r8, #2
 800946c:	3e01      	subs	r6, #1
 800946e:	4638      	mov	r0, r7
 8009470:	612e      	str	r6, [r5, #16]
 8009472:	4621      	mov	r1, r4
 8009474:	f7ff fdd6 	bl	8009024 <_Bfree>
 8009478:	4628      	mov	r0, r5
 800947a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009482:	3301      	adds	r3, #1
 8009484:	e7c5      	b.n	8009412 <__lshift+0x4a>
 8009486:	3904      	subs	r1, #4
 8009488:	f853 2b04 	ldr.w	r2, [r3], #4
 800948c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009490:	459c      	cmp	ip, r3
 8009492:	d8f9      	bhi.n	8009488 <__lshift+0xc0>
 8009494:	e7ea      	b.n	800946c <__lshift+0xa4>
 8009496:	bf00      	nop
 8009498:	0800a6e7 	.word	0x0800a6e7
 800949c:	0800a758 	.word	0x0800a758

080094a0 <__mcmp>:
 80094a0:	b530      	push	{r4, r5, lr}
 80094a2:	6902      	ldr	r2, [r0, #16]
 80094a4:	690c      	ldr	r4, [r1, #16]
 80094a6:	1b12      	subs	r2, r2, r4
 80094a8:	d10e      	bne.n	80094c8 <__mcmp+0x28>
 80094aa:	f100 0314 	add.w	r3, r0, #20
 80094ae:	3114      	adds	r1, #20
 80094b0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80094b4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80094b8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80094bc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80094c0:	42a5      	cmp	r5, r4
 80094c2:	d003      	beq.n	80094cc <__mcmp+0x2c>
 80094c4:	d305      	bcc.n	80094d2 <__mcmp+0x32>
 80094c6:	2201      	movs	r2, #1
 80094c8:	4610      	mov	r0, r2
 80094ca:	bd30      	pop	{r4, r5, pc}
 80094cc:	4283      	cmp	r3, r0
 80094ce:	d3f3      	bcc.n	80094b8 <__mcmp+0x18>
 80094d0:	e7fa      	b.n	80094c8 <__mcmp+0x28>
 80094d2:	f04f 32ff 	mov.w	r2, #4294967295
 80094d6:	e7f7      	b.n	80094c8 <__mcmp+0x28>

080094d8 <__mdiff>:
 80094d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094dc:	460c      	mov	r4, r1
 80094de:	4606      	mov	r6, r0
 80094e0:	4611      	mov	r1, r2
 80094e2:	4620      	mov	r0, r4
 80094e4:	4617      	mov	r7, r2
 80094e6:	f7ff ffdb 	bl	80094a0 <__mcmp>
 80094ea:	1e05      	subs	r5, r0, #0
 80094ec:	d110      	bne.n	8009510 <__mdiff+0x38>
 80094ee:	4629      	mov	r1, r5
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff fd57 	bl	8008fa4 <_Balloc>
 80094f6:	b930      	cbnz	r0, 8009506 <__mdiff+0x2e>
 80094f8:	4b39      	ldr	r3, [pc, #228]	; (80095e0 <__mdiff+0x108>)
 80094fa:	4602      	mov	r2, r0
 80094fc:	f240 2132 	movw	r1, #562	; 0x232
 8009500:	4838      	ldr	r0, [pc, #224]	; (80095e4 <__mdiff+0x10c>)
 8009502:	f000 fd63 	bl	8009fcc <__assert_func>
 8009506:	2301      	movs	r3, #1
 8009508:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800950c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009510:	bfa4      	itt	ge
 8009512:	463b      	movge	r3, r7
 8009514:	4627      	movge	r7, r4
 8009516:	4630      	mov	r0, r6
 8009518:	6879      	ldr	r1, [r7, #4]
 800951a:	bfa6      	itte	ge
 800951c:	461c      	movge	r4, r3
 800951e:	2500      	movge	r5, #0
 8009520:	2501      	movlt	r5, #1
 8009522:	f7ff fd3f 	bl	8008fa4 <_Balloc>
 8009526:	b920      	cbnz	r0, 8009532 <__mdiff+0x5a>
 8009528:	4b2d      	ldr	r3, [pc, #180]	; (80095e0 <__mdiff+0x108>)
 800952a:	4602      	mov	r2, r0
 800952c:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009530:	e7e6      	b.n	8009500 <__mdiff+0x28>
 8009532:	693e      	ldr	r6, [r7, #16]
 8009534:	60c5      	str	r5, [r0, #12]
 8009536:	6925      	ldr	r5, [r4, #16]
 8009538:	f107 0114 	add.w	r1, r7, #20
 800953c:	f104 0914 	add.w	r9, r4, #20
 8009540:	f100 0e14 	add.w	lr, r0, #20
 8009544:	f107 0210 	add.w	r2, r7, #16
 8009548:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800954c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8009550:	46f2      	mov	sl, lr
 8009552:	2700      	movs	r7, #0
 8009554:	f859 3b04 	ldr.w	r3, [r9], #4
 8009558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800955c:	fa1f f883 	uxth.w	r8, r3
 8009560:	fa17 f78b 	uxtah	r7, r7, fp
 8009564:	0c1b      	lsrs	r3, r3, #16
 8009566:	eba7 0808 	sub.w	r8, r7, r8
 800956a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800956e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009572:	fa1f f888 	uxth.w	r8, r8
 8009576:	141f      	asrs	r7, r3, #16
 8009578:	454d      	cmp	r5, r9
 800957a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800957e:	f84a 3b04 	str.w	r3, [sl], #4
 8009582:	d8e7      	bhi.n	8009554 <__mdiff+0x7c>
 8009584:	1b2b      	subs	r3, r5, r4
 8009586:	3b15      	subs	r3, #21
 8009588:	f023 0303 	bic.w	r3, r3, #3
 800958c:	3304      	adds	r3, #4
 800958e:	3415      	adds	r4, #21
 8009590:	42a5      	cmp	r5, r4
 8009592:	bf38      	it	cc
 8009594:	2304      	movcc	r3, #4
 8009596:	4419      	add	r1, r3
 8009598:	4473      	add	r3, lr
 800959a:	469e      	mov	lr, r3
 800959c:	460d      	mov	r5, r1
 800959e:	4565      	cmp	r5, ip
 80095a0:	d30e      	bcc.n	80095c0 <__mdiff+0xe8>
 80095a2:	f10c 0203 	add.w	r2, ip, #3
 80095a6:	1a52      	subs	r2, r2, r1
 80095a8:	f022 0203 	bic.w	r2, r2, #3
 80095ac:	3903      	subs	r1, #3
 80095ae:	458c      	cmp	ip, r1
 80095b0:	bf38      	it	cc
 80095b2:	2200      	movcc	r2, #0
 80095b4:	441a      	add	r2, r3
 80095b6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80095ba:	b17b      	cbz	r3, 80095dc <__mdiff+0x104>
 80095bc:	6106      	str	r6, [r0, #16]
 80095be:	e7a5      	b.n	800950c <__mdiff+0x34>
 80095c0:	f855 8b04 	ldr.w	r8, [r5], #4
 80095c4:	fa17 f488 	uxtah	r4, r7, r8
 80095c8:	1422      	asrs	r2, r4, #16
 80095ca:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80095ce:	b2a4      	uxth	r4, r4
 80095d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80095d4:	f84e 4b04 	str.w	r4, [lr], #4
 80095d8:	1417      	asrs	r7, r2, #16
 80095da:	e7e0      	b.n	800959e <__mdiff+0xc6>
 80095dc:	3e01      	subs	r6, #1
 80095de:	e7ea      	b.n	80095b6 <__mdiff+0xde>
 80095e0:	0800a6e7 	.word	0x0800a6e7
 80095e4:	0800a758 	.word	0x0800a758

080095e8 <__d2b>:
 80095e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80095ec:	4689      	mov	r9, r1
 80095ee:	2101      	movs	r1, #1
 80095f0:	ec57 6b10 	vmov	r6, r7, d0
 80095f4:	4690      	mov	r8, r2
 80095f6:	f7ff fcd5 	bl	8008fa4 <_Balloc>
 80095fa:	4604      	mov	r4, r0
 80095fc:	b930      	cbnz	r0, 800960c <__d2b+0x24>
 80095fe:	4602      	mov	r2, r0
 8009600:	4b25      	ldr	r3, [pc, #148]	; (8009698 <__d2b+0xb0>)
 8009602:	4826      	ldr	r0, [pc, #152]	; (800969c <__d2b+0xb4>)
 8009604:	f240 310a 	movw	r1, #778	; 0x30a
 8009608:	f000 fce0 	bl	8009fcc <__assert_func>
 800960c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009614:	bb35      	cbnz	r5, 8009664 <__d2b+0x7c>
 8009616:	2e00      	cmp	r6, #0
 8009618:	9301      	str	r3, [sp, #4]
 800961a:	d028      	beq.n	800966e <__d2b+0x86>
 800961c:	4668      	mov	r0, sp
 800961e:	9600      	str	r6, [sp, #0]
 8009620:	f7ff fd8c 	bl	800913c <__lo0bits>
 8009624:	9900      	ldr	r1, [sp, #0]
 8009626:	b300      	cbz	r0, 800966a <__d2b+0x82>
 8009628:	9a01      	ldr	r2, [sp, #4]
 800962a:	f1c0 0320 	rsb	r3, r0, #32
 800962e:	fa02 f303 	lsl.w	r3, r2, r3
 8009632:	430b      	orrs	r3, r1
 8009634:	40c2      	lsrs	r2, r0
 8009636:	6163      	str	r3, [r4, #20]
 8009638:	9201      	str	r2, [sp, #4]
 800963a:	9b01      	ldr	r3, [sp, #4]
 800963c:	61a3      	str	r3, [r4, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	bf14      	ite	ne
 8009642:	2202      	movne	r2, #2
 8009644:	2201      	moveq	r2, #1
 8009646:	6122      	str	r2, [r4, #16]
 8009648:	b1d5      	cbz	r5, 8009680 <__d2b+0x98>
 800964a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800964e:	4405      	add	r5, r0
 8009650:	f8c9 5000 	str.w	r5, [r9]
 8009654:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009658:	f8c8 0000 	str.w	r0, [r8]
 800965c:	4620      	mov	r0, r4
 800965e:	b003      	add	sp, #12
 8009660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009668:	e7d5      	b.n	8009616 <__d2b+0x2e>
 800966a:	6161      	str	r1, [r4, #20]
 800966c:	e7e5      	b.n	800963a <__d2b+0x52>
 800966e:	a801      	add	r0, sp, #4
 8009670:	f7ff fd64 	bl	800913c <__lo0bits>
 8009674:	9b01      	ldr	r3, [sp, #4]
 8009676:	6163      	str	r3, [r4, #20]
 8009678:	2201      	movs	r2, #1
 800967a:	6122      	str	r2, [r4, #16]
 800967c:	3020      	adds	r0, #32
 800967e:	e7e3      	b.n	8009648 <__d2b+0x60>
 8009680:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009684:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009688:	f8c9 0000 	str.w	r0, [r9]
 800968c:	6918      	ldr	r0, [r3, #16]
 800968e:	f7ff fd35 	bl	80090fc <__hi0bits>
 8009692:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009696:	e7df      	b.n	8009658 <__d2b+0x70>
 8009698:	0800a6e7 	.word	0x0800a6e7
 800969c:	0800a758 	.word	0x0800a758

080096a0 <_calloc_r>:
 80096a0:	b513      	push	{r0, r1, r4, lr}
 80096a2:	434a      	muls	r2, r1
 80096a4:	4611      	mov	r1, r2
 80096a6:	9201      	str	r2, [sp, #4]
 80096a8:	f000 f85a 	bl	8009760 <_malloc_r>
 80096ac:	4604      	mov	r4, r0
 80096ae:	b118      	cbz	r0, 80096b8 <_calloc_r+0x18>
 80096b0:	9a01      	ldr	r2, [sp, #4]
 80096b2:	2100      	movs	r1, #0
 80096b4:	f7fe f83a 	bl	800772c <memset>
 80096b8:	4620      	mov	r0, r4
 80096ba:	b002      	add	sp, #8
 80096bc:	bd10      	pop	{r4, pc}
	...

080096c0 <_free_r>:
 80096c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80096c2:	2900      	cmp	r1, #0
 80096c4:	d048      	beq.n	8009758 <_free_r+0x98>
 80096c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ca:	9001      	str	r0, [sp, #4]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f1a1 0404 	sub.w	r4, r1, #4
 80096d2:	bfb8      	it	lt
 80096d4:	18e4      	addlt	r4, r4, r3
 80096d6:	f000 fe1d 	bl	800a314 <__malloc_lock>
 80096da:	4a20      	ldr	r2, [pc, #128]	; (800975c <_free_r+0x9c>)
 80096dc:	9801      	ldr	r0, [sp, #4]
 80096de:	6813      	ldr	r3, [r2, #0]
 80096e0:	4615      	mov	r5, r2
 80096e2:	b933      	cbnz	r3, 80096f2 <_free_r+0x32>
 80096e4:	6063      	str	r3, [r4, #4]
 80096e6:	6014      	str	r4, [r2, #0]
 80096e8:	b003      	add	sp, #12
 80096ea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80096ee:	f000 be17 	b.w	800a320 <__malloc_unlock>
 80096f2:	42a3      	cmp	r3, r4
 80096f4:	d90b      	bls.n	800970e <_free_r+0x4e>
 80096f6:	6821      	ldr	r1, [r4, #0]
 80096f8:	1862      	adds	r2, r4, r1
 80096fa:	4293      	cmp	r3, r2
 80096fc:	bf04      	itt	eq
 80096fe:	681a      	ldreq	r2, [r3, #0]
 8009700:	685b      	ldreq	r3, [r3, #4]
 8009702:	6063      	str	r3, [r4, #4]
 8009704:	bf04      	itt	eq
 8009706:	1852      	addeq	r2, r2, r1
 8009708:	6022      	streq	r2, [r4, #0]
 800970a:	602c      	str	r4, [r5, #0]
 800970c:	e7ec      	b.n	80096e8 <_free_r+0x28>
 800970e:	461a      	mov	r2, r3
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	b10b      	cbz	r3, 8009718 <_free_r+0x58>
 8009714:	42a3      	cmp	r3, r4
 8009716:	d9fa      	bls.n	800970e <_free_r+0x4e>
 8009718:	6811      	ldr	r1, [r2, #0]
 800971a:	1855      	adds	r5, r2, r1
 800971c:	42a5      	cmp	r5, r4
 800971e:	d10b      	bne.n	8009738 <_free_r+0x78>
 8009720:	6824      	ldr	r4, [r4, #0]
 8009722:	4421      	add	r1, r4
 8009724:	1854      	adds	r4, r2, r1
 8009726:	42a3      	cmp	r3, r4
 8009728:	6011      	str	r1, [r2, #0]
 800972a:	d1dd      	bne.n	80096e8 <_free_r+0x28>
 800972c:	681c      	ldr	r4, [r3, #0]
 800972e:	685b      	ldr	r3, [r3, #4]
 8009730:	6053      	str	r3, [r2, #4]
 8009732:	4421      	add	r1, r4
 8009734:	6011      	str	r1, [r2, #0]
 8009736:	e7d7      	b.n	80096e8 <_free_r+0x28>
 8009738:	d902      	bls.n	8009740 <_free_r+0x80>
 800973a:	230c      	movs	r3, #12
 800973c:	6003      	str	r3, [r0, #0]
 800973e:	e7d3      	b.n	80096e8 <_free_r+0x28>
 8009740:	6825      	ldr	r5, [r4, #0]
 8009742:	1961      	adds	r1, r4, r5
 8009744:	428b      	cmp	r3, r1
 8009746:	bf04      	itt	eq
 8009748:	6819      	ldreq	r1, [r3, #0]
 800974a:	685b      	ldreq	r3, [r3, #4]
 800974c:	6063      	str	r3, [r4, #4]
 800974e:	bf04      	itt	eq
 8009750:	1949      	addeq	r1, r1, r5
 8009752:	6021      	streq	r1, [r4, #0]
 8009754:	6054      	str	r4, [r2, #4]
 8009756:	e7c7      	b.n	80096e8 <_free_r+0x28>
 8009758:	b003      	add	sp, #12
 800975a:	bd30      	pop	{r4, r5, pc}
 800975c:	200004fc 	.word	0x200004fc

08009760 <_malloc_r>:
 8009760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009762:	1ccd      	adds	r5, r1, #3
 8009764:	f025 0503 	bic.w	r5, r5, #3
 8009768:	3508      	adds	r5, #8
 800976a:	2d0c      	cmp	r5, #12
 800976c:	bf38      	it	cc
 800976e:	250c      	movcc	r5, #12
 8009770:	2d00      	cmp	r5, #0
 8009772:	4606      	mov	r6, r0
 8009774:	db01      	blt.n	800977a <_malloc_r+0x1a>
 8009776:	42a9      	cmp	r1, r5
 8009778:	d903      	bls.n	8009782 <_malloc_r+0x22>
 800977a:	230c      	movs	r3, #12
 800977c:	6033      	str	r3, [r6, #0]
 800977e:	2000      	movs	r0, #0
 8009780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009782:	f000 fdc7 	bl	800a314 <__malloc_lock>
 8009786:	4921      	ldr	r1, [pc, #132]	; (800980c <_malloc_r+0xac>)
 8009788:	680a      	ldr	r2, [r1, #0]
 800978a:	4614      	mov	r4, r2
 800978c:	b99c      	cbnz	r4, 80097b6 <_malloc_r+0x56>
 800978e:	4f20      	ldr	r7, [pc, #128]	; (8009810 <_malloc_r+0xb0>)
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	b923      	cbnz	r3, 800979e <_malloc_r+0x3e>
 8009794:	4621      	mov	r1, r4
 8009796:	4630      	mov	r0, r6
 8009798:	f000 faf2 	bl	8009d80 <_sbrk_r>
 800979c:	6038      	str	r0, [r7, #0]
 800979e:	4629      	mov	r1, r5
 80097a0:	4630      	mov	r0, r6
 80097a2:	f000 faed 	bl	8009d80 <_sbrk_r>
 80097a6:	1c43      	adds	r3, r0, #1
 80097a8:	d123      	bne.n	80097f2 <_malloc_r+0x92>
 80097aa:	230c      	movs	r3, #12
 80097ac:	6033      	str	r3, [r6, #0]
 80097ae:	4630      	mov	r0, r6
 80097b0:	f000 fdb6 	bl	800a320 <__malloc_unlock>
 80097b4:	e7e3      	b.n	800977e <_malloc_r+0x1e>
 80097b6:	6823      	ldr	r3, [r4, #0]
 80097b8:	1b5b      	subs	r3, r3, r5
 80097ba:	d417      	bmi.n	80097ec <_malloc_r+0x8c>
 80097bc:	2b0b      	cmp	r3, #11
 80097be:	d903      	bls.n	80097c8 <_malloc_r+0x68>
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	441c      	add	r4, r3
 80097c4:	6025      	str	r5, [r4, #0]
 80097c6:	e004      	b.n	80097d2 <_malloc_r+0x72>
 80097c8:	6863      	ldr	r3, [r4, #4]
 80097ca:	42a2      	cmp	r2, r4
 80097cc:	bf0c      	ite	eq
 80097ce:	600b      	streq	r3, [r1, #0]
 80097d0:	6053      	strne	r3, [r2, #4]
 80097d2:	4630      	mov	r0, r6
 80097d4:	f000 fda4 	bl	800a320 <__malloc_unlock>
 80097d8:	f104 000b 	add.w	r0, r4, #11
 80097dc:	1d23      	adds	r3, r4, #4
 80097de:	f020 0007 	bic.w	r0, r0, #7
 80097e2:	1ac2      	subs	r2, r0, r3
 80097e4:	d0cc      	beq.n	8009780 <_malloc_r+0x20>
 80097e6:	1a1b      	subs	r3, r3, r0
 80097e8:	50a3      	str	r3, [r4, r2]
 80097ea:	e7c9      	b.n	8009780 <_malloc_r+0x20>
 80097ec:	4622      	mov	r2, r4
 80097ee:	6864      	ldr	r4, [r4, #4]
 80097f0:	e7cc      	b.n	800978c <_malloc_r+0x2c>
 80097f2:	1cc4      	adds	r4, r0, #3
 80097f4:	f024 0403 	bic.w	r4, r4, #3
 80097f8:	42a0      	cmp	r0, r4
 80097fa:	d0e3      	beq.n	80097c4 <_malloc_r+0x64>
 80097fc:	1a21      	subs	r1, r4, r0
 80097fe:	4630      	mov	r0, r6
 8009800:	f000 fabe 	bl	8009d80 <_sbrk_r>
 8009804:	3001      	adds	r0, #1
 8009806:	d1dd      	bne.n	80097c4 <_malloc_r+0x64>
 8009808:	e7cf      	b.n	80097aa <_malloc_r+0x4a>
 800980a:	bf00      	nop
 800980c:	200004fc 	.word	0x200004fc
 8009810:	20000500 	.word	0x20000500

08009814 <__ssputs_r>:
 8009814:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009818:	688e      	ldr	r6, [r1, #8]
 800981a:	429e      	cmp	r6, r3
 800981c:	4682      	mov	sl, r0
 800981e:	460c      	mov	r4, r1
 8009820:	4690      	mov	r8, r2
 8009822:	461f      	mov	r7, r3
 8009824:	d838      	bhi.n	8009898 <__ssputs_r+0x84>
 8009826:	898a      	ldrh	r2, [r1, #12]
 8009828:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800982c:	d032      	beq.n	8009894 <__ssputs_r+0x80>
 800982e:	6825      	ldr	r5, [r4, #0]
 8009830:	6909      	ldr	r1, [r1, #16]
 8009832:	eba5 0901 	sub.w	r9, r5, r1
 8009836:	6965      	ldr	r5, [r4, #20]
 8009838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800983c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009840:	3301      	adds	r3, #1
 8009842:	444b      	add	r3, r9
 8009844:	106d      	asrs	r5, r5, #1
 8009846:	429d      	cmp	r5, r3
 8009848:	bf38      	it	cc
 800984a:	461d      	movcc	r5, r3
 800984c:	0553      	lsls	r3, r2, #21
 800984e:	d531      	bpl.n	80098b4 <__ssputs_r+0xa0>
 8009850:	4629      	mov	r1, r5
 8009852:	f7ff ff85 	bl	8009760 <_malloc_r>
 8009856:	4606      	mov	r6, r0
 8009858:	b950      	cbnz	r0, 8009870 <__ssputs_r+0x5c>
 800985a:	230c      	movs	r3, #12
 800985c:	f8ca 3000 	str.w	r3, [sl]
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	f04f 30ff 	mov.w	r0, #4294967295
 800986c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009870:	6921      	ldr	r1, [r4, #16]
 8009872:	464a      	mov	r2, r9
 8009874:	f7fd ff4c 	bl	8007710 <memcpy>
 8009878:	89a3      	ldrh	r3, [r4, #12]
 800987a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800987e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009882:	81a3      	strh	r3, [r4, #12]
 8009884:	6126      	str	r6, [r4, #16]
 8009886:	6165      	str	r5, [r4, #20]
 8009888:	444e      	add	r6, r9
 800988a:	eba5 0509 	sub.w	r5, r5, r9
 800988e:	6026      	str	r6, [r4, #0]
 8009890:	60a5      	str	r5, [r4, #8]
 8009892:	463e      	mov	r6, r7
 8009894:	42be      	cmp	r6, r7
 8009896:	d900      	bls.n	800989a <__ssputs_r+0x86>
 8009898:	463e      	mov	r6, r7
 800989a:	4632      	mov	r2, r6
 800989c:	6820      	ldr	r0, [r4, #0]
 800989e:	4641      	mov	r1, r8
 80098a0:	f000 fd1e 	bl	800a2e0 <memmove>
 80098a4:	68a3      	ldr	r3, [r4, #8]
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	1b9b      	subs	r3, r3, r6
 80098aa:	4432      	add	r2, r6
 80098ac:	60a3      	str	r3, [r4, #8]
 80098ae:	6022      	str	r2, [r4, #0]
 80098b0:	2000      	movs	r0, #0
 80098b2:	e7db      	b.n	800986c <__ssputs_r+0x58>
 80098b4:	462a      	mov	r2, r5
 80098b6:	f000 fd39 	bl	800a32c <_realloc_r>
 80098ba:	4606      	mov	r6, r0
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1e1      	bne.n	8009884 <__ssputs_r+0x70>
 80098c0:	6921      	ldr	r1, [r4, #16]
 80098c2:	4650      	mov	r0, sl
 80098c4:	f7ff fefc 	bl	80096c0 <_free_r>
 80098c8:	e7c7      	b.n	800985a <__ssputs_r+0x46>
	...

080098cc <_svfiprintf_r>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	4698      	mov	r8, r3
 80098d2:	898b      	ldrh	r3, [r1, #12]
 80098d4:	061b      	lsls	r3, r3, #24
 80098d6:	b09d      	sub	sp, #116	; 0x74
 80098d8:	4607      	mov	r7, r0
 80098da:	460d      	mov	r5, r1
 80098dc:	4614      	mov	r4, r2
 80098de:	d50e      	bpl.n	80098fe <_svfiprintf_r+0x32>
 80098e0:	690b      	ldr	r3, [r1, #16]
 80098e2:	b963      	cbnz	r3, 80098fe <_svfiprintf_r+0x32>
 80098e4:	2140      	movs	r1, #64	; 0x40
 80098e6:	f7ff ff3b 	bl	8009760 <_malloc_r>
 80098ea:	6028      	str	r0, [r5, #0]
 80098ec:	6128      	str	r0, [r5, #16]
 80098ee:	b920      	cbnz	r0, 80098fa <_svfiprintf_r+0x2e>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e0d1      	b.n	8009a9e <_svfiprintf_r+0x1d2>
 80098fa:	2340      	movs	r3, #64	; 0x40
 80098fc:	616b      	str	r3, [r5, #20]
 80098fe:	2300      	movs	r3, #0
 8009900:	9309      	str	r3, [sp, #36]	; 0x24
 8009902:	2320      	movs	r3, #32
 8009904:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009908:	f8cd 800c 	str.w	r8, [sp, #12]
 800990c:	2330      	movs	r3, #48	; 0x30
 800990e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ab8 <_svfiprintf_r+0x1ec>
 8009912:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009916:	f04f 0901 	mov.w	r9, #1
 800991a:	4623      	mov	r3, r4
 800991c:	469a      	mov	sl, r3
 800991e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009922:	b10a      	cbz	r2, 8009928 <_svfiprintf_r+0x5c>
 8009924:	2a25      	cmp	r2, #37	; 0x25
 8009926:	d1f9      	bne.n	800991c <_svfiprintf_r+0x50>
 8009928:	ebba 0b04 	subs.w	fp, sl, r4
 800992c:	d00b      	beq.n	8009946 <_svfiprintf_r+0x7a>
 800992e:	465b      	mov	r3, fp
 8009930:	4622      	mov	r2, r4
 8009932:	4629      	mov	r1, r5
 8009934:	4638      	mov	r0, r7
 8009936:	f7ff ff6d 	bl	8009814 <__ssputs_r>
 800993a:	3001      	adds	r0, #1
 800993c:	f000 80aa 	beq.w	8009a94 <_svfiprintf_r+0x1c8>
 8009940:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009942:	445a      	add	r2, fp
 8009944:	9209      	str	r2, [sp, #36]	; 0x24
 8009946:	f89a 3000 	ldrb.w	r3, [sl]
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 80a2 	beq.w	8009a94 <_svfiprintf_r+0x1c8>
 8009950:	2300      	movs	r3, #0
 8009952:	f04f 32ff 	mov.w	r2, #4294967295
 8009956:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800995a:	f10a 0a01 	add.w	sl, sl, #1
 800995e:	9304      	str	r3, [sp, #16]
 8009960:	9307      	str	r3, [sp, #28]
 8009962:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009966:	931a      	str	r3, [sp, #104]	; 0x68
 8009968:	4654      	mov	r4, sl
 800996a:	2205      	movs	r2, #5
 800996c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009970:	4851      	ldr	r0, [pc, #324]	; (8009ab8 <_svfiprintf_r+0x1ec>)
 8009972:	f7f6 fc35 	bl	80001e0 <memchr>
 8009976:	9a04      	ldr	r2, [sp, #16]
 8009978:	b9d8      	cbnz	r0, 80099b2 <_svfiprintf_r+0xe6>
 800997a:	06d0      	lsls	r0, r2, #27
 800997c:	bf44      	itt	mi
 800997e:	2320      	movmi	r3, #32
 8009980:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009984:	0711      	lsls	r1, r2, #28
 8009986:	bf44      	itt	mi
 8009988:	232b      	movmi	r3, #43	; 0x2b
 800998a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800998e:	f89a 3000 	ldrb.w	r3, [sl]
 8009992:	2b2a      	cmp	r3, #42	; 0x2a
 8009994:	d015      	beq.n	80099c2 <_svfiprintf_r+0xf6>
 8009996:	9a07      	ldr	r2, [sp, #28]
 8009998:	4654      	mov	r4, sl
 800999a:	2000      	movs	r0, #0
 800999c:	f04f 0c0a 	mov.w	ip, #10
 80099a0:	4621      	mov	r1, r4
 80099a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099a6:	3b30      	subs	r3, #48	; 0x30
 80099a8:	2b09      	cmp	r3, #9
 80099aa:	d94e      	bls.n	8009a4a <_svfiprintf_r+0x17e>
 80099ac:	b1b0      	cbz	r0, 80099dc <_svfiprintf_r+0x110>
 80099ae:	9207      	str	r2, [sp, #28]
 80099b0:	e014      	b.n	80099dc <_svfiprintf_r+0x110>
 80099b2:	eba0 0308 	sub.w	r3, r0, r8
 80099b6:	fa09 f303 	lsl.w	r3, r9, r3
 80099ba:	4313      	orrs	r3, r2
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	46a2      	mov	sl, r4
 80099c0:	e7d2      	b.n	8009968 <_svfiprintf_r+0x9c>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	1d19      	adds	r1, r3, #4
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	9103      	str	r1, [sp, #12]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	bfbb      	ittet	lt
 80099ce:	425b      	neglt	r3, r3
 80099d0:	f042 0202 	orrlt.w	r2, r2, #2
 80099d4:	9307      	strge	r3, [sp, #28]
 80099d6:	9307      	strlt	r3, [sp, #28]
 80099d8:	bfb8      	it	lt
 80099da:	9204      	strlt	r2, [sp, #16]
 80099dc:	7823      	ldrb	r3, [r4, #0]
 80099de:	2b2e      	cmp	r3, #46	; 0x2e
 80099e0:	d10c      	bne.n	80099fc <_svfiprintf_r+0x130>
 80099e2:	7863      	ldrb	r3, [r4, #1]
 80099e4:	2b2a      	cmp	r3, #42	; 0x2a
 80099e6:	d135      	bne.n	8009a54 <_svfiprintf_r+0x188>
 80099e8:	9b03      	ldr	r3, [sp, #12]
 80099ea:	1d1a      	adds	r2, r3, #4
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	9203      	str	r2, [sp, #12]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	bfb8      	it	lt
 80099f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80099f8:	3402      	adds	r4, #2
 80099fa:	9305      	str	r3, [sp, #20]
 80099fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ac8 <_svfiprintf_r+0x1fc>
 8009a00:	7821      	ldrb	r1, [r4, #0]
 8009a02:	2203      	movs	r2, #3
 8009a04:	4650      	mov	r0, sl
 8009a06:	f7f6 fbeb 	bl	80001e0 <memchr>
 8009a0a:	b140      	cbz	r0, 8009a1e <_svfiprintf_r+0x152>
 8009a0c:	2340      	movs	r3, #64	; 0x40
 8009a0e:	eba0 000a 	sub.w	r0, r0, sl
 8009a12:	fa03 f000 	lsl.w	r0, r3, r0
 8009a16:	9b04      	ldr	r3, [sp, #16]
 8009a18:	4303      	orrs	r3, r0
 8009a1a:	3401      	adds	r4, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a22:	4826      	ldr	r0, [pc, #152]	; (8009abc <_svfiprintf_r+0x1f0>)
 8009a24:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a28:	2206      	movs	r2, #6
 8009a2a:	f7f6 fbd9 	bl	80001e0 <memchr>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d038      	beq.n	8009aa4 <_svfiprintf_r+0x1d8>
 8009a32:	4b23      	ldr	r3, [pc, #140]	; (8009ac0 <_svfiprintf_r+0x1f4>)
 8009a34:	bb1b      	cbnz	r3, 8009a7e <_svfiprintf_r+0x1b2>
 8009a36:	9b03      	ldr	r3, [sp, #12]
 8009a38:	3307      	adds	r3, #7
 8009a3a:	f023 0307 	bic.w	r3, r3, #7
 8009a3e:	3308      	adds	r3, #8
 8009a40:	9303      	str	r3, [sp, #12]
 8009a42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a44:	4433      	add	r3, r6
 8009a46:	9309      	str	r3, [sp, #36]	; 0x24
 8009a48:	e767      	b.n	800991a <_svfiprintf_r+0x4e>
 8009a4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a4e:	460c      	mov	r4, r1
 8009a50:	2001      	movs	r0, #1
 8009a52:	e7a5      	b.n	80099a0 <_svfiprintf_r+0xd4>
 8009a54:	2300      	movs	r3, #0
 8009a56:	3401      	adds	r4, #1
 8009a58:	9305      	str	r3, [sp, #20]
 8009a5a:	4619      	mov	r1, r3
 8009a5c:	f04f 0c0a 	mov.w	ip, #10
 8009a60:	4620      	mov	r0, r4
 8009a62:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a66:	3a30      	subs	r2, #48	; 0x30
 8009a68:	2a09      	cmp	r2, #9
 8009a6a:	d903      	bls.n	8009a74 <_svfiprintf_r+0x1a8>
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d0c5      	beq.n	80099fc <_svfiprintf_r+0x130>
 8009a70:	9105      	str	r1, [sp, #20]
 8009a72:	e7c3      	b.n	80099fc <_svfiprintf_r+0x130>
 8009a74:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a78:	4604      	mov	r4, r0
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e7f0      	b.n	8009a60 <_svfiprintf_r+0x194>
 8009a7e:	ab03      	add	r3, sp, #12
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	462a      	mov	r2, r5
 8009a84:	4b0f      	ldr	r3, [pc, #60]	; (8009ac4 <_svfiprintf_r+0x1f8>)
 8009a86:	a904      	add	r1, sp, #16
 8009a88:	4638      	mov	r0, r7
 8009a8a:	f7fd fef7 	bl	800787c <_printf_float>
 8009a8e:	1c42      	adds	r2, r0, #1
 8009a90:	4606      	mov	r6, r0
 8009a92:	d1d6      	bne.n	8009a42 <_svfiprintf_r+0x176>
 8009a94:	89ab      	ldrh	r3, [r5, #12]
 8009a96:	065b      	lsls	r3, r3, #25
 8009a98:	f53f af2c 	bmi.w	80098f4 <_svfiprintf_r+0x28>
 8009a9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a9e:	b01d      	add	sp, #116	; 0x74
 8009aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009aa4:	ab03      	add	r3, sp, #12
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	462a      	mov	r2, r5
 8009aaa:	4b06      	ldr	r3, [pc, #24]	; (8009ac4 <_svfiprintf_r+0x1f8>)
 8009aac:	a904      	add	r1, sp, #16
 8009aae:	4638      	mov	r0, r7
 8009ab0:	f7fe f988 	bl	8007dc4 <_printf_i>
 8009ab4:	e7eb      	b.n	8009a8e <_svfiprintf_r+0x1c2>
 8009ab6:	bf00      	nop
 8009ab8:	0800a8b4 	.word	0x0800a8b4
 8009abc:	0800a8be 	.word	0x0800a8be
 8009ac0:	0800787d 	.word	0x0800787d
 8009ac4:	08009815 	.word	0x08009815
 8009ac8:	0800a8ba 	.word	0x0800a8ba

08009acc <__sfputc_r>:
 8009acc:	6893      	ldr	r3, [r2, #8]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	b410      	push	{r4}
 8009ad4:	6093      	str	r3, [r2, #8]
 8009ad6:	da08      	bge.n	8009aea <__sfputc_r+0x1e>
 8009ad8:	6994      	ldr	r4, [r2, #24]
 8009ada:	42a3      	cmp	r3, r4
 8009adc:	db01      	blt.n	8009ae2 <__sfputc_r+0x16>
 8009ade:	290a      	cmp	r1, #10
 8009ae0:	d103      	bne.n	8009aea <__sfputc_r+0x1e>
 8009ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ae6:	f000 b99f 	b.w	8009e28 <__swbuf_r>
 8009aea:	6813      	ldr	r3, [r2, #0]
 8009aec:	1c58      	adds	r0, r3, #1
 8009aee:	6010      	str	r0, [r2, #0]
 8009af0:	7019      	strb	r1, [r3, #0]
 8009af2:	4608      	mov	r0, r1
 8009af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009af8:	4770      	bx	lr

08009afa <__sfputs_r>:
 8009afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009afc:	4606      	mov	r6, r0
 8009afe:	460f      	mov	r7, r1
 8009b00:	4614      	mov	r4, r2
 8009b02:	18d5      	adds	r5, r2, r3
 8009b04:	42ac      	cmp	r4, r5
 8009b06:	d101      	bne.n	8009b0c <__sfputs_r+0x12>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e007      	b.n	8009b1c <__sfputs_r+0x22>
 8009b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b10:	463a      	mov	r2, r7
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7ff ffda 	bl	8009acc <__sfputc_r>
 8009b18:	1c43      	adds	r3, r0, #1
 8009b1a:	d1f3      	bne.n	8009b04 <__sfputs_r+0xa>
 8009b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b20 <_vfiprintf_r>:
 8009b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b24:	460d      	mov	r5, r1
 8009b26:	b09d      	sub	sp, #116	; 0x74
 8009b28:	4614      	mov	r4, r2
 8009b2a:	4698      	mov	r8, r3
 8009b2c:	4606      	mov	r6, r0
 8009b2e:	b118      	cbz	r0, 8009b38 <_vfiprintf_r+0x18>
 8009b30:	6983      	ldr	r3, [r0, #24]
 8009b32:	b90b      	cbnz	r3, 8009b38 <_vfiprintf_r+0x18>
 8009b34:	f7ff f988 	bl	8008e48 <__sinit>
 8009b38:	4b89      	ldr	r3, [pc, #548]	; (8009d60 <_vfiprintf_r+0x240>)
 8009b3a:	429d      	cmp	r5, r3
 8009b3c:	d11b      	bne.n	8009b76 <_vfiprintf_r+0x56>
 8009b3e:	6875      	ldr	r5, [r6, #4]
 8009b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b42:	07d9      	lsls	r1, r3, #31
 8009b44:	d405      	bmi.n	8009b52 <_vfiprintf_r+0x32>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	059a      	lsls	r2, r3, #22
 8009b4a:	d402      	bmi.n	8009b52 <_vfiprintf_r+0x32>
 8009b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b4e:	f7ff fa1e 	bl	8008f8e <__retarget_lock_acquire_recursive>
 8009b52:	89ab      	ldrh	r3, [r5, #12]
 8009b54:	071b      	lsls	r3, r3, #28
 8009b56:	d501      	bpl.n	8009b5c <_vfiprintf_r+0x3c>
 8009b58:	692b      	ldr	r3, [r5, #16]
 8009b5a:	b9eb      	cbnz	r3, 8009b98 <_vfiprintf_r+0x78>
 8009b5c:	4629      	mov	r1, r5
 8009b5e:	4630      	mov	r0, r6
 8009b60:	f000 f9c6 	bl	8009ef0 <__swsetup_r>
 8009b64:	b1c0      	cbz	r0, 8009b98 <_vfiprintf_r+0x78>
 8009b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b68:	07dc      	lsls	r4, r3, #31
 8009b6a:	d50e      	bpl.n	8009b8a <_vfiprintf_r+0x6a>
 8009b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8009b70:	b01d      	add	sp, #116	; 0x74
 8009b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b76:	4b7b      	ldr	r3, [pc, #492]	; (8009d64 <_vfiprintf_r+0x244>)
 8009b78:	429d      	cmp	r5, r3
 8009b7a:	d101      	bne.n	8009b80 <_vfiprintf_r+0x60>
 8009b7c:	68b5      	ldr	r5, [r6, #8]
 8009b7e:	e7df      	b.n	8009b40 <_vfiprintf_r+0x20>
 8009b80:	4b79      	ldr	r3, [pc, #484]	; (8009d68 <_vfiprintf_r+0x248>)
 8009b82:	429d      	cmp	r5, r3
 8009b84:	bf08      	it	eq
 8009b86:	68f5      	ldreq	r5, [r6, #12]
 8009b88:	e7da      	b.n	8009b40 <_vfiprintf_r+0x20>
 8009b8a:	89ab      	ldrh	r3, [r5, #12]
 8009b8c:	0598      	lsls	r0, r3, #22
 8009b8e:	d4ed      	bmi.n	8009b6c <_vfiprintf_r+0x4c>
 8009b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b92:	f7ff f9fd 	bl	8008f90 <__retarget_lock_release_recursive>
 8009b96:	e7e9      	b.n	8009b6c <_vfiprintf_r+0x4c>
 8009b98:	2300      	movs	r3, #0
 8009b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8009b9c:	2320      	movs	r3, #32
 8009b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ba6:	2330      	movs	r3, #48	; 0x30
 8009ba8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d6c <_vfiprintf_r+0x24c>
 8009bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009bb0:	f04f 0901 	mov.w	r9, #1
 8009bb4:	4623      	mov	r3, r4
 8009bb6:	469a      	mov	sl, r3
 8009bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bbc:	b10a      	cbz	r2, 8009bc2 <_vfiprintf_r+0xa2>
 8009bbe:	2a25      	cmp	r2, #37	; 0x25
 8009bc0:	d1f9      	bne.n	8009bb6 <_vfiprintf_r+0x96>
 8009bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8009bc6:	d00b      	beq.n	8009be0 <_vfiprintf_r+0xc0>
 8009bc8:	465b      	mov	r3, fp
 8009bca:	4622      	mov	r2, r4
 8009bcc:	4629      	mov	r1, r5
 8009bce:	4630      	mov	r0, r6
 8009bd0:	f7ff ff93 	bl	8009afa <__sfputs_r>
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	f000 80aa 	beq.w	8009d2e <_vfiprintf_r+0x20e>
 8009bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bdc:	445a      	add	r2, fp
 8009bde:	9209      	str	r2, [sp, #36]	; 0x24
 8009be0:	f89a 3000 	ldrb.w	r3, [sl]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 80a2 	beq.w	8009d2e <_vfiprintf_r+0x20e>
 8009bea:	2300      	movs	r3, #0
 8009bec:	f04f 32ff 	mov.w	r2, #4294967295
 8009bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009bf4:	f10a 0a01 	add.w	sl, sl, #1
 8009bf8:	9304      	str	r3, [sp, #16]
 8009bfa:	9307      	str	r3, [sp, #28]
 8009bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c00:	931a      	str	r3, [sp, #104]	; 0x68
 8009c02:	4654      	mov	r4, sl
 8009c04:	2205      	movs	r2, #5
 8009c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c0a:	4858      	ldr	r0, [pc, #352]	; (8009d6c <_vfiprintf_r+0x24c>)
 8009c0c:	f7f6 fae8 	bl	80001e0 <memchr>
 8009c10:	9a04      	ldr	r2, [sp, #16]
 8009c12:	b9d8      	cbnz	r0, 8009c4c <_vfiprintf_r+0x12c>
 8009c14:	06d1      	lsls	r1, r2, #27
 8009c16:	bf44      	itt	mi
 8009c18:	2320      	movmi	r3, #32
 8009c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1e:	0713      	lsls	r3, r2, #28
 8009c20:	bf44      	itt	mi
 8009c22:	232b      	movmi	r3, #43	; 0x2b
 8009c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c28:	f89a 3000 	ldrb.w	r3, [sl]
 8009c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8009c2e:	d015      	beq.n	8009c5c <_vfiprintf_r+0x13c>
 8009c30:	9a07      	ldr	r2, [sp, #28]
 8009c32:	4654      	mov	r4, sl
 8009c34:	2000      	movs	r0, #0
 8009c36:	f04f 0c0a 	mov.w	ip, #10
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c40:	3b30      	subs	r3, #48	; 0x30
 8009c42:	2b09      	cmp	r3, #9
 8009c44:	d94e      	bls.n	8009ce4 <_vfiprintf_r+0x1c4>
 8009c46:	b1b0      	cbz	r0, 8009c76 <_vfiprintf_r+0x156>
 8009c48:	9207      	str	r2, [sp, #28]
 8009c4a:	e014      	b.n	8009c76 <_vfiprintf_r+0x156>
 8009c4c:	eba0 0308 	sub.w	r3, r0, r8
 8009c50:	fa09 f303 	lsl.w	r3, r9, r3
 8009c54:	4313      	orrs	r3, r2
 8009c56:	9304      	str	r3, [sp, #16]
 8009c58:	46a2      	mov	sl, r4
 8009c5a:	e7d2      	b.n	8009c02 <_vfiprintf_r+0xe2>
 8009c5c:	9b03      	ldr	r3, [sp, #12]
 8009c5e:	1d19      	adds	r1, r3, #4
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	9103      	str	r1, [sp, #12]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	bfbb      	ittet	lt
 8009c68:	425b      	neglt	r3, r3
 8009c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8009c6e:	9307      	strge	r3, [sp, #28]
 8009c70:	9307      	strlt	r3, [sp, #28]
 8009c72:	bfb8      	it	lt
 8009c74:	9204      	strlt	r2, [sp, #16]
 8009c76:	7823      	ldrb	r3, [r4, #0]
 8009c78:	2b2e      	cmp	r3, #46	; 0x2e
 8009c7a:	d10c      	bne.n	8009c96 <_vfiprintf_r+0x176>
 8009c7c:	7863      	ldrb	r3, [r4, #1]
 8009c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8009c80:	d135      	bne.n	8009cee <_vfiprintf_r+0x1ce>
 8009c82:	9b03      	ldr	r3, [sp, #12]
 8009c84:	1d1a      	adds	r2, r3, #4
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	9203      	str	r2, [sp, #12]
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	bfb8      	it	lt
 8009c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009c92:	3402      	adds	r4, #2
 8009c94:	9305      	str	r3, [sp, #20]
 8009c96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d7c <_vfiprintf_r+0x25c>
 8009c9a:	7821      	ldrb	r1, [r4, #0]
 8009c9c:	2203      	movs	r2, #3
 8009c9e:	4650      	mov	r0, sl
 8009ca0:	f7f6 fa9e 	bl	80001e0 <memchr>
 8009ca4:	b140      	cbz	r0, 8009cb8 <_vfiprintf_r+0x198>
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	eba0 000a 	sub.w	r0, r0, sl
 8009cac:	fa03 f000 	lsl.w	r0, r3, r0
 8009cb0:	9b04      	ldr	r3, [sp, #16]
 8009cb2:	4303      	orrs	r3, r0
 8009cb4:	3401      	adds	r4, #1
 8009cb6:	9304      	str	r3, [sp, #16]
 8009cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cbc:	482c      	ldr	r0, [pc, #176]	; (8009d70 <_vfiprintf_r+0x250>)
 8009cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cc2:	2206      	movs	r2, #6
 8009cc4:	f7f6 fa8c 	bl	80001e0 <memchr>
 8009cc8:	2800      	cmp	r0, #0
 8009cca:	d03f      	beq.n	8009d4c <_vfiprintf_r+0x22c>
 8009ccc:	4b29      	ldr	r3, [pc, #164]	; (8009d74 <_vfiprintf_r+0x254>)
 8009cce:	bb1b      	cbnz	r3, 8009d18 <_vfiprintf_r+0x1f8>
 8009cd0:	9b03      	ldr	r3, [sp, #12]
 8009cd2:	3307      	adds	r3, #7
 8009cd4:	f023 0307 	bic.w	r3, r3, #7
 8009cd8:	3308      	adds	r3, #8
 8009cda:	9303      	str	r3, [sp, #12]
 8009cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cde:	443b      	add	r3, r7
 8009ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ce2:	e767      	b.n	8009bb4 <_vfiprintf_r+0x94>
 8009ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ce8:	460c      	mov	r4, r1
 8009cea:	2001      	movs	r0, #1
 8009cec:	e7a5      	b.n	8009c3a <_vfiprintf_r+0x11a>
 8009cee:	2300      	movs	r3, #0
 8009cf0:	3401      	adds	r4, #1
 8009cf2:	9305      	str	r3, [sp, #20]
 8009cf4:	4619      	mov	r1, r3
 8009cf6:	f04f 0c0a 	mov.w	ip, #10
 8009cfa:	4620      	mov	r0, r4
 8009cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d00:	3a30      	subs	r2, #48	; 0x30
 8009d02:	2a09      	cmp	r2, #9
 8009d04:	d903      	bls.n	8009d0e <_vfiprintf_r+0x1ee>
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d0c5      	beq.n	8009c96 <_vfiprintf_r+0x176>
 8009d0a:	9105      	str	r1, [sp, #20]
 8009d0c:	e7c3      	b.n	8009c96 <_vfiprintf_r+0x176>
 8009d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d12:	4604      	mov	r4, r0
 8009d14:	2301      	movs	r3, #1
 8009d16:	e7f0      	b.n	8009cfa <_vfiprintf_r+0x1da>
 8009d18:	ab03      	add	r3, sp, #12
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	462a      	mov	r2, r5
 8009d1e:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <_vfiprintf_r+0x258>)
 8009d20:	a904      	add	r1, sp, #16
 8009d22:	4630      	mov	r0, r6
 8009d24:	f7fd fdaa 	bl	800787c <_printf_float>
 8009d28:	4607      	mov	r7, r0
 8009d2a:	1c78      	adds	r0, r7, #1
 8009d2c:	d1d6      	bne.n	8009cdc <_vfiprintf_r+0x1bc>
 8009d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d30:	07d9      	lsls	r1, r3, #31
 8009d32:	d405      	bmi.n	8009d40 <_vfiprintf_r+0x220>
 8009d34:	89ab      	ldrh	r3, [r5, #12]
 8009d36:	059a      	lsls	r2, r3, #22
 8009d38:	d402      	bmi.n	8009d40 <_vfiprintf_r+0x220>
 8009d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d3c:	f7ff f928 	bl	8008f90 <__retarget_lock_release_recursive>
 8009d40:	89ab      	ldrh	r3, [r5, #12]
 8009d42:	065b      	lsls	r3, r3, #25
 8009d44:	f53f af12 	bmi.w	8009b6c <_vfiprintf_r+0x4c>
 8009d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d4a:	e711      	b.n	8009b70 <_vfiprintf_r+0x50>
 8009d4c:	ab03      	add	r3, sp, #12
 8009d4e:	9300      	str	r3, [sp, #0]
 8009d50:	462a      	mov	r2, r5
 8009d52:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <_vfiprintf_r+0x258>)
 8009d54:	a904      	add	r1, sp, #16
 8009d56:	4630      	mov	r0, r6
 8009d58:	f7fe f834 	bl	8007dc4 <_printf_i>
 8009d5c:	e7e4      	b.n	8009d28 <_vfiprintf_r+0x208>
 8009d5e:	bf00      	nop
 8009d60:	0800a718 	.word	0x0800a718
 8009d64:	0800a738 	.word	0x0800a738
 8009d68:	0800a6f8 	.word	0x0800a6f8
 8009d6c:	0800a8b4 	.word	0x0800a8b4
 8009d70:	0800a8be 	.word	0x0800a8be
 8009d74:	0800787d 	.word	0x0800787d
 8009d78:	08009afb 	.word	0x08009afb
 8009d7c:	0800a8ba 	.word	0x0800a8ba

08009d80 <_sbrk_r>:
 8009d80:	b538      	push	{r3, r4, r5, lr}
 8009d82:	4d06      	ldr	r5, [pc, #24]	; (8009d9c <_sbrk_r+0x1c>)
 8009d84:	2300      	movs	r3, #0
 8009d86:	4604      	mov	r4, r0
 8009d88:	4608      	mov	r0, r1
 8009d8a:	602b      	str	r3, [r5, #0]
 8009d8c:	f7f8 f924 	bl	8001fd8 <_sbrk>
 8009d90:	1c43      	adds	r3, r0, #1
 8009d92:	d102      	bne.n	8009d9a <_sbrk_r+0x1a>
 8009d94:	682b      	ldr	r3, [r5, #0]
 8009d96:	b103      	cbz	r3, 8009d9a <_sbrk_r+0x1a>
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	bd38      	pop	{r3, r4, r5, pc}
 8009d9c:	200007a0 	.word	0x200007a0

08009da0 <__sread>:
 8009da0:	b510      	push	{r4, lr}
 8009da2:	460c      	mov	r4, r1
 8009da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009da8:	f000 fae6 	bl	800a378 <_read_r>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	bfab      	itete	ge
 8009db0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009db2:	89a3      	ldrhlt	r3, [r4, #12]
 8009db4:	181b      	addge	r3, r3, r0
 8009db6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dba:	bfac      	ite	ge
 8009dbc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dbe:	81a3      	strhlt	r3, [r4, #12]
 8009dc0:	bd10      	pop	{r4, pc}

08009dc2 <__swrite>:
 8009dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dc6:	461f      	mov	r7, r3
 8009dc8:	898b      	ldrh	r3, [r1, #12]
 8009dca:	05db      	lsls	r3, r3, #23
 8009dcc:	4605      	mov	r5, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	d505      	bpl.n	8009de0 <__swrite+0x1e>
 8009dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009dd8:	2302      	movs	r3, #2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	f000 f9f8 	bl	800a1d0 <_lseek_r>
 8009de0:	89a3      	ldrh	r3, [r4, #12]
 8009de2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009de6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dea:	81a3      	strh	r3, [r4, #12]
 8009dec:	4632      	mov	r2, r6
 8009dee:	463b      	mov	r3, r7
 8009df0:	4628      	mov	r0, r5
 8009df2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009df6:	f000 b869 	b.w	8009ecc <_write_r>

08009dfa <__sseek>:
 8009dfa:	b510      	push	{r4, lr}
 8009dfc:	460c      	mov	r4, r1
 8009dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e02:	f000 f9e5 	bl	800a1d0 <_lseek_r>
 8009e06:	1c43      	adds	r3, r0, #1
 8009e08:	89a3      	ldrh	r3, [r4, #12]
 8009e0a:	bf15      	itete	ne
 8009e0c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e0e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e12:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e16:	81a3      	strheq	r3, [r4, #12]
 8009e18:	bf18      	it	ne
 8009e1a:	81a3      	strhne	r3, [r4, #12]
 8009e1c:	bd10      	pop	{r4, pc}

08009e1e <__sclose>:
 8009e1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e22:	f000 b8f1 	b.w	800a008 <_close_r>
	...

08009e28 <__swbuf_r>:
 8009e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2a:	460e      	mov	r6, r1
 8009e2c:	4614      	mov	r4, r2
 8009e2e:	4605      	mov	r5, r0
 8009e30:	b118      	cbz	r0, 8009e3a <__swbuf_r+0x12>
 8009e32:	6983      	ldr	r3, [r0, #24]
 8009e34:	b90b      	cbnz	r3, 8009e3a <__swbuf_r+0x12>
 8009e36:	f7ff f807 	bl	8008e48 <__sinit>
 8009e3a:	4b21      	ldr	r3, [pc, #132]	; (8009ec0 <__swbuf_r+0x98>)
 8009e3c:	429c      	cmp	r4, r3
 8009e3e:	d12b      	bne.n	8009e98 <__swbuf_r+0x70>
 8009e40:	686c      	ldr	r4, [r5, #4]
 8009e42:	69a3      	ldr	r3, [r4, #24]
 8009e44:	60a3      	str	r3, [r4, #8]
 8009e46:	89a3      	ldrh	r3, [r4, #12]
 8009e48:	071a      	lsls	r2, r3, #28
 8009e4a:	d52f      	bpl.n	8009eac <__swbuf_r+0x84>
 8009e4c:	6923      	ldr	r3, [r4, #16]
 8009e4e:	b36b      	cbz	r3, 8009eac <__swbuf_r+0x84>
 8009e50:	6923      	ldr	r3, [r4, #16]
 8009e52:	6820      	ldr	r0, [r4, #0]
 8009e54:	1ac0      	subs	r0, r0, r3
 8009e56:	6963      	ldr	r3, [r4, #20]
 8009e58:	b2f6      	uxtb	r6, r6
 8009e5a:	4283      	cmp	r3, r0
 8009e5c:	4637      	mov	r7, r6
 8009e5e:	dc04      	bgt.n	8009e6a <__swbuf_r+0x42>
 8009e60:	4621      	mov	r1, r4
 8009e62:	4628      	mov	r0, r5
 8009e64:	f000 f966 	bl	800a134 <_fflush_r>
 8009e68:	bb30      	cbnz	r0, 8009eb8 <__swbuf_r+0x90>
 8009e6a:	68a3      	ldr	r3, [r4, #8]
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	60a3      	str	r3, [r4, #8]
 8009e70:	6823      	ldr	r3, [r4, #0]
 8009e72:	1c5a      	adds	r2, r3, #1
 8009e74:	6022      	str	r2, [r4, #0]
 8009e76:	701e      	strb	r6, [r3, #0]
 8009e78:	6963      	ldr	r3, [r4, #20]
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	4283      	cmp	r3, r0
 8009e7e:	d004      	beq.n	8009e8a <__swbuf_r+0x62>
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	07db      	lsls	r3, r3, #31
 8009e84:	d506      	bpl.n	8009e94 <__swbuf_r+0x6c>
 8009e86:	2e0a      	cmp	r6, #10
 8009e88:	d104      	bne.n	8009e94 <__swbuf_r+0x6c>
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4628      	mov	r0, r5
 8009e8e:	f000 f951 	bl	800a134 <_fflush_r>
 8009e92:	b988      	cbnz	r0, 8009eb8 <__swbuf_r+0x90>
 8009e94:	4638      	mov	r0, r7
 8009e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e98:	4b0a      	ldr	r3, [pc, #40]	; (8009ec4 <__swbuf_r+0x9c>)
 8009e9a:	429c      	cmp	r4, r3
 8009e9c:	d101      	bne.n	8009ea2 <__swbuf_r+0x7a>
 8009e9e:	68ac      	ldr	r4, [r5, #8]
 8009ea0:	e7cf      	b.n	8009e42 <__swbuf_r+0x1a>
 8009ea2:	4b09      	ldr	r3, [pc, #36]	; (8009ec8 <__swbuf_r+0xa0>)
 8009ea4:	429c      	cmp	r4, r3
 8009ea6:	bf08      	it	eq
 8009ea8:	68ec      	ldreq	r4, [r5, #12]
 8009eaa:	e7ca      	b.n	8009e42 <__swbuf_r+0x1a>
 8009eac:	4621      	mov	r1, r4
 8009eae:	4628      	mov	r0, r5
 8009eb0:	f000 f81e 	bl	8009ef0 <__swsetup_r>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d0cb      	beq.n	8009e50 <__swbuf_r+0x28>
 8009eb8:	f04f 37ff 	mov.w	r7, #4294967295
 8009ebc:	e7ea      	b.n	8009e94 <__swbuf_r+0x6c>
 8009ebe:	bf00      	nop
 8009ec0:	0800a718 	.word	0x0800a718
 8009ec4:	0800a738 	.word	0x0800a738
 8009ec8:	0800a6f8 	.word	0x0800a6f8

08009ecc <_write_r>:
 8009ecc:	b538      	push	{r3, r4, r5, lr}
 8009ece:	4d07      	ldr	r5, [pc, #28]	; (8009eec <_write_r+0x20>)
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	4608      	mov	r0, r1
 8009ed4:	4611      	mov	r1, r2
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	602a      	str	r2, [r5, #0]
 8009eda:	461a      	mov	r2, r3
 8009edc:	f7f8 f82b 	bl	8001f36 <_write>
 8009ee0:	1c43      	adds	r3, r0, #1
 8009ee2:	d102      	bne.n	8009eea <_write_r+0x1e>
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	b103      	cbz	r3, 8009eea <_write_r+0x1e>
 8009ee8:	6023      	str	r3, [r4, #0]
 8009eea:	bd38      	pop	{r3, r4, r5, pc}
 8009eec:	200007a0 	.word	0x200007a0

08009ef0 <__swsetup_r>:
 8009ef0:	4b32      	ldr	r3, [pc, #200]	; (8009fbc <__swsetup_r+0xcc>)
 8009ef2:	b570      	push	{r4, r5, r6, lr}
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	b125      	cbz	r5, 8009f06 <__swsetup_r+0x16>
 8009efc:	69ab      	ldr	r3, [r5, #24]
 8009efe:	b913      	cbnz	r3, 8009f06 <__swsetup_r+0x16>
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7fe ffa1 	bl	8008e48 <__sinit>
 8009f06:	4b2e      	ldr	r3, [pc, #184]	; (8009fc0 <__swsetup_r+0xd0>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d10f      	bne.n	8009f2c <__swsetup_r+0x3c>
 8009f0c:	686c      	ldr	r4, [r5, #4]
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f14:	0719      	lsls	r1, r3, #28
 8009f16:	d42c      	bmi.n	8009f72 <__swsetup_r+0x82>
 8009f18:	06dd      	lsls	r5, r3, #27
 8009f1a:	d411      	bmi.n	8009f40 <__swsetup_r+0x50>
 8009f1c:	2309      	movs	r3, #9
 8009f1e:	6033      	str	r3, [r6, #0]
 8009f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2a:	e03e      	b.n	8009faa <__swsetup_r+0xba>
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <__swsetup_r+0xd4>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <__swsetup_r+0x46>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7eb      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f36:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <__swsetup_r+0xd8>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7e6      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f40:	0758      	lsls	r0, r3, #29
 8009f42:	d512      	bpl.n	8009f6a <__swsetup_r+0x7a>
 8009f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f46:	b141      	cbz	r1, 8009f5a <__swsetup_r+0x6a>
 8009f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d002      	beq.n	8009f56 <__swsetup_r+0x66>
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7ff fbb5 	bl	80096c0 <_free_r>
 8009f56:	2300      	movs	r3, #0
 8009f58:	6363      	str	r3, [r4, #52]	; 0x34
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	2300      	movs	r3, #0
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b94b      	cbnz	r3, 8009f8a <__swsetup_r+0x9a>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f80:	d003      	beq.n	8009f8a <__swsetup_r+0x9a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f959 	bl	800a23c <__smakebuf_r>
 8009f8a:	89a0      	ldrh	r0, [r4, #12]
 8009f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f90:	f010 0301 	ands.w	r3, r0, #1
 8009f94:	d00a      	beq.n	8009fac <__swsetup_r+0xbc>
 8009f96:	2300      	movs	r3, #0
 8009f98:	60a3      	str	r3, [r4, #8]
 8009f9a:	6963      	ldr	r3, [r4, #20]
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	61a3      	str	r3, [r4, #24]
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	b943      	cbnz	r3, 8009fb6 <__swsetup_r+0xc6>
 8009fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fa8:	d1ba      	bne.n	8009f20 <__swsetup_r+0x30>
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	0781      	lsls	r1, r0, #30
 8009fae:	bf58      	it	pl
 8009fb0:	6963      	ldrpl	r3, [r4, #20]
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	e7f4      	b.n	8009fa0 <__swsetup_r+0xb0>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e7f7      	b.n	8009faa <__swsetup_r+0xba>
 8009fba:	bf00      	nop
 8009fbc:	20000154 	.word	0x20000154
 8009fc0:	0800a718 	.word	0x0800a718
 8009fc4:	0800a738 	.word	0x0800a738
 8009fc8:	0800a6f8 	.word	0x0800a6f8

08009fcc <__assert_func>:
 8009fcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009fce:	4614      	mov	r4, r2
 8009fd0:	461a      	mov	r2, r3
 8009fd2:	4b09      	ldr	r3, [pc, #36]	; (8009ff8 <__assert_func+0x2c>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4605      	mov	r5, r0
 8009fd8:	68d8      	ldr	r0, [r3, #12]
 8009fda:	b14c      	cbz	r4, 8009ff0 <__assert_func+0x24>
 8009fdc:	4b07      	ldr	r3, [pc, #28]	; (8009ffc <__assert_func+0x30>)
 8009fde:	9100      	str	r1, [sp, #0]
 8009fe0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009fe4:	4906      	ldr	r1, [pc, #24]	; (800a000 <__assert_func+0x34>)
 8009fe6:	462b      	mov	r3, r5
 8009fe8:	f000 f8e0 	bl	800a1ac <fiprintf>
 8009fec:	f000 f9e3 	bl	800a3b6 <abort>
 8009ff0:	4b04      	ldr	r3, [pc, #16]	; (800a004 <__assert_func+0x38>)
 8009ff2:	461c      	mov	r4, r3
 8009ff4:	e7f3      	b.n	8009fde <__assert_func+0x12>
 8009ff6:	bf00      	nop
 8009ff8:	20000154 	.word	0x20000154
 8009ffc:	0800a8c5 	.word	0x0800a8c5
 800a000:	0800a8d2 	.word	0x0800a8d2
 800a004:	0800a900 	.word	0x0800a900

0800a008 <_close_r>:
 800a008:	b538      	push	{r3, r4, r5, lr}
 800a00a:	4d06      	ldr	r5, [pc, #24]	; (800a024 <_close_r+0x1c>)
 800a00c:	2300      	movs	r3, #0
 800a00e:	4604      	mov	r4, r0
 800a010:	4608      	mov	r0, r1
 800a012:	602b      	str	r3, [r5, #0]
 800a014:	f7f7 ffab 	bl	8001f6e <_close>
 800a018:	1c43      	adds	r3, r0, #1
 800a01a:	d102      	bne.n	800a022 <_close_r+0x1a>
 800a01c:	682b      	ldr	r3, [r5, #0]
 800a01e:	b103      	cbz	r3, 800a022 <_close_r+0x1a>
 800a020:	6023      	str	r3, [r4, #0]
 800a022:	bd38      	pop	{r3, r4, r5, pc}
 800a024:	200007a0 	.word	0x200007a0

0800a028 <__sflush_r>:
 800a028:	898a      	ldrh	r2, [r1, #12]
 800a02a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a02e:	4605      	mov	r5, r0
 800a030:	0710      	lsls	r0, r2, #28
 800a032:	460c      	mov	r4, r1
 800a034:	d458      	bmi.n	800a0e8 <__sflush_r+0xc0>
 800a036:	684b      	ldr	r3, [r1, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dc05      	bgt.n	800a048 <__sflush_r+0x20>
 800a03c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a03e:	2b00      	cmp	r3, #0
 800a040:	dc02      	bgt.n	800a048 <__sflush_r+0x20>
 800a042:	2000      	movs	r0, #0
 800a044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a04a:	2e00      	cmp	r6, #0
 800a04c:	d0f9      	beq.n	800a042 <__sflush_r+0x1a>
 800a04e:	2300      	movs	r3, #0
 800a050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a054:	682f      	ldr	r7, [r5, #0]
 800a056:	602b      	str	r3, [r5, #0]
 800a058:	d032      	beq.n	800a0c0 <__sflush_r+0x98>
 800a05a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a05c:	89a3      	ldrh	r3, [r4, #12]
 800a05e:	075a      	lsls	r2, r3, #29
 800a060:	d505      	bpl.n	800a06e <__sflush_r+0x46>
 800a062:	6863      	ldr	r3, [r4, #4]
 800a064:	1ac0      	subs	r0, r0, r3
 800a066:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a068:	b10b      	cbz	r3, 800a06e <__sflush_r+0x46>
 800a06a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a06c:	1ac0      	subs	r0, r0, r3
 800a06e:	2300      	movs	r3, #0
 800a070:	4602      	mov	r2, r0
 800a072:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a074:	6a21      	ldr	r1, [r4, #32]
 800a076:	4628      	mov	r0, r5
 800a078:	47b0      	blx	r6
 800a07a:	1c43      	adds	r3, r0, #1
 800a07c:	89a3      	ldrh	r3, [r4, #12]
 800a07e:	d106      	bne.n	800a08e <__sflush_r+0x66>
 800a080:	6829      	ldr	r1, [r5, #0]
 800a082:	291d      	cmp	r1, #29
 800a084:	d82c      	bhi.n	800a0e0 <__sflush_r+0xb8>
 800a086:	4a2a      	ldr	r2, [pc, #168]	; (800a130 <__sflush_r+0x108>)
 800a088:	40ca      	lsrs	r2, r1
 800a08a:	07d6      	lsls	r6, r2, #31
 800a08c:	d528      	bpl.n	800a0e0 <__sflush_r+0xb8>
 800a08e:	2200      	movs	r2, #0
 800a090:	6062      	str	r2, [r4, #4]
 800a092:	04d9      	lsls	r1, r3, #19
 800a094:	6922      	ldr	r2, [r4, #16]
 800a096:	6022      	str	r2, [r4, #0]
 800a098:	d504      	bpl.n	800a0a4 <__sflush_r+0x7c>
 800a09a:	1c42      	adds	r2, r0, #1
 800a09c:	d101      	bne.n	800a0a2 <__sflush_r+0x7a>
 800a09e:	682b      	ldr	r3, [r5, #0]
 800a0a0:	b903      	cbnz	r3, 800a0a4 <__sflush_r+0x7c>
 800a0a2:	6560      	str	r0, [r4, #84]	; 0x54
 800a0a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0a6:	602f      	str	r7, [r5, #0]
 800a0a8:	2900      	cmp	r1, #0
 800a0aa:	d0ca      	beq.n	800a042 <__sflush_r+0x1a>
 800a0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a0b0:	4299      	cmp	r1, r3
 800a0b2:	d002      	beq.n	800a0ba <__sflush_r+0x92>
 800a0b4:	4628      	mov	r0, r5
 800a0b6:	f7ff fb03 	bl	80096c0 <_free_r>
 800a0ba:	2000      	movs	r0, #0
 800a0bc:	6360      	str	r0, [r4, #52]	; 0x34
 800a0be:	e7c1      	b.n	800a044 <__sflush_r+0x1c>
 800a0c0:	6a21      	ldr	r1, [r4, #32]
 800a0c2:	2301      	movs	r3, #1
 800a0c4:	4628      	mov	r0, r5
 800a0c6:	47b0      	blx	r6
 800a0c8:	1c41      	adds	r1, r0, #1
 800a0ca:	d1c7      	bne.n	800a05c <__sflush_r+0x34>
 800a0cc:	682b      	ldr	r3, [r5, #0]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d0c4      	beq.n	800a05c <__sflush_r+0x34>
 800a0d2:	2b1d      	cmp	r3, #29
 800a0d4:	d001      	beq.n	800a0da <__sflush_r+0xb2>
 800a0d6:	2b16      	cmp	r3, #22
 800a0d8:	d101      	bne.n	800a0de <__sflush_r+0xb6>
 800a0da:	602f      	str	r7, [r5, #0]
 800a0dc:	e7b1      	b.n	800a042 <__sflush_r+0x1a>
 800a0de:	89a3      	ldrh	r3, [r4, #12]
 800a0e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a0e4:	81a3      	strh	r3, [r4, #12]
 800a0e6:	e7ad      	b.n	800a044 <__sflush_r+0x1c>
 800a0e8:	690f      	ldr	r7, [r1, #16]
 800a0ea:	2f00      	cmp	r7, #0
 800a0ec:	d0a9      	beq.n	800a042 <__sflush_r+0x1a>
 800a0ee:	0793      	lsls	r3, r2, #30
 800a0f0:	680e      	ldr	r6, [r1, #0]
 800a0f2:	bf08      	it	eq
 800a0f4:	694b      	ldreq	r3, [r1, #20]
 800a0f6:	600f      	str	r7, [r1, #0]
 800a0f8:	bf18      	it	ne
 800a0fa:	2300      	movne	r3, #0
 800a0fc:	eba6 0807 	sub.w	r8, r6, r7
 800a100:	608b      	str	r3, [r1, #8]
 800a102:	f1b8 0f00 	cmp.w	r8, #0
 800a106:	dd9c      	ble.n	800a042 <__sflush_r+0x1a>
 800a108:	6a21      	ldr	r1, [r4, #32]
 800a10a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a10c:	4643      	mov	r3, r8
 800a10e:	463a      	mov	r2, r7
 800a110:	4628      	mov	r0, r5
 800a112:	47b0      	blx	r6
 800a114:	2800      	cmp	r0, #0
 800a116:	dc06      	bgt.n	800a126 <__sflush_r+0xfe>
 800a118:	89a3      	ldrh	r3, [r4, #12]
 800a11a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a11e:	81a3      	strh	r3, [r4, #12]
 800a120:	f04f 30ff 	mov.w	r0, #4294967295
 800a124:	e78e      	b.n	800a044 <__sflush_r+0x1c>
 800a126:	4407      	add	r7, r0
 800a128:	eba8 0800 	sub.w	r8, r8, r0
 800a12c:	e7e9      	b.n	800a102 <__sflush_r+0xda>
 800a12e:	bf00      	nop
 800a130:	20400001 	.word	0x20400001

0800a134 <_fflush_r>:
 800a134:	b538      	push	{r3, r4, r5, lr}
 800a136:	690b      	ldr	r3, [r1, #16]
 800a138:	4605      	mov	r5, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	b913      	cbnz	r3, 800a144 <_fflush_r+0x10>
 800a13e:	2500      	movs	r5, #0
 800a140:	4628      	mov	r0, r5
 800a142:	bd38      	pop	{r3, r4, r5, pc}
 800a144:	b118      	cbz	r0, 800a14e <_fflush_r+0x1a>
 800a146:	6983      	ldr	r3, [r0, #24]
 800a148:	b90b      	cbnz	r3, 800a14e <_fflush_r+0x1a>
 800a14a:	f7fe fe7d 	bl	8008e48 <__sinit>
 800a14e:	4b14      	ldr	r3, [pc, #80]	; (800a1a0 <_fflush_r+0x6c>)
 800a150:	429c      	cmp	r4, r3
 800a152:	d11b      	bne.n	800a18c <_fflush_r+0x58>
 800a154:	686c      	ldr	r4, [r5, #4]
 800a156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0ef      	beq.n	800a13e <_fflush_r+0xa>
 800a15e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a160:	07d0      	lsls	r0, r2, #31
 800a162:	d404      	bmi.n	800a16e <_fflush_r+0x3a>
 800a164:	0599      	lsls	r1, r3, #22
 800a166:	d402      	bmi.n	800a16e <_fflush_r+0x3a>
 800a168:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a16a:	f7fe ff10 	bl	8008f8e <__retarget_lock_acquire_recursive>
 800a16e:	4628      	mov	r0, r5
 800a170:	4621      	mov	r1, r4
 800a172:	f7ff ff59 	bl	800a028 <__sflush_r>
 800a176:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a178:	07da      	lsls	r2, r3, #31
 800a17a:	4605      	mov	r5, r0
 800a17c:	d4e0      	bmi.n	800a140 <_fflush_r+0xc>
 800a17e:	89a3      	ldrh	r3, [r4, #12]
 800a180:	059b      	lsls	r3, r3, #22
 800a182:	d4dd      	bmi.n	800a140 <_fflush_r+0xc>
 800a184:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a186:	f7fe ff03 	bl	8008f90 <__retarget_lock_release_recursive>
 800a18a:	e7d9      	b.n	800a140 <_fflush_r+0xc>
 800a18c:	4b05      	ldr	r3, [pc, #20]	; (800a1a4 <_fflush_r+0x70>)
 800a18e:	429c      	cmp	r4, r3
 800a190:	d101      	bne.n	800a196 <_fflush_r+0x62>
 800a192:	68ac      	ldr	r4, [r5, #8]
 800a194:	e7df      	b.n	800a156 <_fflush_r+0x22>
 800a196:	4b04      	ldr	r3, [pc, #16]	; (800a1a8 <_fflush_r+0x74>)
 800a198:	429c      	cmp	r4, r3
 800a19a:	bf08      	it	eq
 800a19c:	68ec      	ldreq	r4, [r5, #12]
 800a19e:	e7da      	b.n	800a156 <_fflush_r+0x22>
 800a1a0:	0800a718 	.word	0x0800a718
 800a1a4:	0800a738 	.word	0x0800a738
 800a1a8:	0800a6f8 	.word	0x0800a6f8

0800a1ac <fiprintf>:
 800a1ac:	b40e      	push	{r1, r2, r3}
 800a1ae:	b503      	push	{r0, r1, lr}
 800a1b0:	4601      	mov	r1, r0
 800a1b2:	ab03      	add	r3, sp, #12
 800a1b4:	4805      	ldr	r0, [pc, #20]	; (800a1cc <fiprintf+0x20>)
 800a1b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ba:	6800      	ldr	r0, [r0, #0]
 800a1bc:	9301      	str	r3, [sp, #4]
 800a1be:	f7ff fcaf 	bl	8009b20 <_vfiprintf_r>
 800a1c2:	b002      	add	sp, #8
 800a1c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1c8:	b003      	add	sp, #12
 800a1ca:	4770      	bx	lr
 800a1cc:	20000154 	.word	0x20000154

0800a1d0 <_lseek_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d07      	ldr	r5, [pc, #28]	; (800a1f0 <_lseek_r+0x20>)
 800a1d4:	4604      	mov	r4, r0
 800a1d6:	4608      	mov	r0, r1
 800a1d8:	4611      	mov	r1, r2
 800a1da:	2200      	movs	r2, #0
 800a1dc:	602a      	str	r2, [r5, #0]
 800a1de:	461a      	mov	r2, r3
 800a1e0:	f7f7 feec 	bl	8001fbc <_lseek>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d102      	bne.n	800a1ee <_lseek_r+0x1e>
 800a1e8:	682b      	ldr	r3, [r5, #0]
 800a1ea:	b103      	cbz	r3, 800a1ee <_lseek_r+0x1e>
 800a1ec:	6023      	str	r3, [r4, #0]
 800a1ee:	bd38      	pop	{r3, r4, r5, pc}
 800a1f0:	200007a0 	.word	0x200007a0

0800a1f4 <__swhatbuf_r>:
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	460e      	mov	r6, r1
 800a1f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1fc:	2900      	cmp	r1, #0
 800a1fe:	b096      	sub	sp, #88	; 0x58
 800a200:	4614      	mov	r4, r2
 800a202:	461d      	mov	r5, r3
 800a204:	da07      	bge.n	800a216 <__swhatbuf_r+0x22>
 800a206:	2300      	movs	r3, #0
 800a208:	602b      	str	r3, [r5, #0]
 800a20a:	89b3      	ldrh	r3, [r6, #12]
 800a20c:	061a      	lsls	r2, r3, #24
 800a20e:	d410      	bmi.n	800a232 <__swhatbuf_r+0x3e>
 800a210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a214:	e00e      	b.n	800a234 <__swhatbuf_r+0x40>
 800a216:	466a      	mov	r2, sp
 800a218:	f000 f8d4 	bl	800a3c4 <_fstat_r>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	dbf2      	blt.n	800a206 <__swhatbuf_r+0x12>
 800a220:	9a01      	ldr	r2, [sp, #4]
 800a222:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a226:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a22a:	425a      	negs	r2, r3
 800a22c:	415a      	adcs	r2, r3
 800a22e:	602a      	str	r2, [r5, #0]
 800a230:	e7ee      	b.n	800a210 <__swhatbuf_r+0x1c>
 800a232:	2340      	movs	r3, #64	; 0x40
 800a234:	2000      	movs	r0, #0
 800a236:	6023      	str	r3, [r4, #0]
 800a238:	b016      	add	sp, #88	; 0x58
 800a23a:	bd70      	pop	{r4, r5, r6, pc}

0800a23c <__smakebuf_r>:
 800a23c:	898b      	ldrh	r3, [r1, #12]
 800a23e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a240:	079d      	lsls	r5, r3, #30
 800a242:	4606      	mov	r6, r0
 800a244:	460c      	mov	r4, r1
 800a246:	d507      	bpl.n	800a258 <__smakebuf_r+0x1c>
 800a248:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a24c:	6023      	str	r3, [r4, #0]
 800a24e:	6123      	str	r3, [r4, #16]
 800a250:	2301      	movs	r3, #1
 800a252:	6163      	str	r3, [r4, #20]
 800a254:	b002      	add	sp, #8
 800a256:	bd70      	pop	{r4, r5, r6, pc}
 800a258:	ab01      	add	r3, sp, #4
 800a25a:	466a      	mov	r2, sp
 800a25c:	f7ff ffca 	bl	800a1f4 <__swhatbuf_r>
 800a260:	9900      	ldr	r1, [sp, #0]
 800a262:	4605      	mov	r5, r0
 800a264:	4630      	mov	r0, r6
 800a266:	f7ff fa7b 	bl	8009760 <_malloc_r>
 800a26a:	b948      	cbnz	r0, 800a280 <__smakebuf_r+0x44>
 800a26c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a270:	059a      	lsls	r2, r3, #22
 800a272:	d4ef      	bmi.n	800a254 <__smakebuf_r+0x18>
 800a274:	f023 0303 	bic.w	r3, r3, #3
 800a278:	f043 0302 	orr.w	r3, r3, #2
 800a27c:	81a3      	strh	r3, [r4, #12]
 800a27e:	e7e3      	b.n	800a248 <__smakebuf_r+0xc>
 800a280:	4b0d      	ldr	r3, [pc, #52]	; (800a2b8 <__smakebuf_r+0x7c>)
 800a282:	62b3      	str	r3, [r6, #40]	; 0x28
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	6020      	str	r0, [r4, #0]
 800a288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a28c:	81a3      	strh	r3, [r4, #12]
 800a28e:	9b00      	ldr	r3, [sp, #0]
 800a290:	6163      	str	r3, [r4, #20]
 800a292:	9b01      	ldr	r3, [sp, #4]
 800a294:	6120      	str	r0, [r4, #16]
 800a296:	b15b      	cbz	r3, 800a2b0 <__smakebuf_r+0x74>
 800a298:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a29c:	4630      	mov	r0, r6
 800a29e:	f000 f8a3 	bl	800a3e8 <_isatty_r>
 800a2a2:	b128      	cbz	r0, 800a2b0 <__smakebuf_r+0x74>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f023 0303 	bic.w	r3, r3, #3
 800a2aa:	f043 0301 	orr.w	r3, r3, #1
 800a2ae:	81a3      	strh	r3, [r4, #12]
 800a2b0:	89a0      	ldrh	r0, [r4, #12]
 800a2b2:	4305      	orrs	r5, r0
 800a2b4:	81a5      	strh	r5, [r4, #12]
 800a2b6:	e7cd      	b.n	800a254 <__smakebuf_r+0x18>
 800a2b8:	08008de1 	.word	0x08008de1

0800a2bc <__ascii_mbtowc>:
 800a2bc:	b082      	sub	sp, #8
 800a2be:	b901      	cbnz	r1, 800a2c2 <__ascii_mbtowc+0x6>
 800a2c0:	a901      	add	r1, sp, #4
 800a2c2:	b142      	cbz	r2, 800a2d6 <__ascii_mbtowc+0x1a>
 800a2c4:	b14b      	cbz	r3, 800a2da <__ascii_mbtowc+0x1e>
 800a2c6:	7813      	ldrb	r3, [r2, #0]
 800a2c8:	600b      	str	r3, [r1, #0]
 800a2ca:	7812      	ldrb	r2, [r2, #0]
 800a2cc:	1e10      	subs	r0, r2, #0
 800a2ce:	bf18      	it	ne
 800a2d0:	2001      	movne	r0, #1
 800a2d2:	b002      	add	sp, #8
 800a2d4:	4770      	bx	lr
 800a2d6:	4610      	mov	r0, r2
 800a2d8:	e7fb      	b.n	800a2d2 <__ascii_mbtowc+0x16>
 800a2da:	f06f 0001 	mvn.w	r0, #1
 800a2de:	e7f8      	b.n	800a2d2 <__ascii_mbtowc+0x16>

0800a2e0 <memmove>:
 800a2e0:	4288      	cmp	r0, r1
 800a2e2:	b510      	push	{r4, lr}
 800a2e4:	eb01 0402 	add.w	r4, r1, r2
 800a2e8:	d902      	bls.n	800a2f0 <memmove+0x10>
 800a2ea:	4284      	cmp	r4, r0
 800a2ec:	4623      	mov	r3, r4
 800a2ee:	d807      	bhi.n	800a300 <memmove+0x20>
 800a2f0:	1e43      	subs	r3, r0, #1
 800a2f2:	42a1      	cmp	r1, r4
 800a2f4:	d008      	beq.n	800a308 <memmove+0x28>
 800a2f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2fe:	e7f8      	b.n	800a2f2 <memmove+0x12>
 800a300:	4402      	add	r2, r0
 800a302:	4601      	mov	r1, r0
 800a304:	428a      	cmp	r2, r1
 800a306:	d100      	bne.n	800a30a <memmove+0x2a>
 800a308:	bd10      	pop	{r4, pc}
 800a30a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a30e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a312:	e7f7      	b.n	800a304 <memmove+0x24>

0800a314 <__malloc_lock>:
 800a314:	4801      	ldr	r0, [pc, #4]	; (800a31c <__malloc_lock+0x8>)
 800a316:	f7fe be3a 	b.w	8008f8e <__retarget_lock_acquire_recursive>
 800a31a:	bf00      	nop
 800a31c:	20000798 	.word	0x20000798

0800a320 <__malloc_unlock>:
 800a320:	4801      	ldr	r0, [pc, #4]	; (800a328 <__malloc_unlock+0x8>)
 800a322:	f7fe be35 	b.w	8008f90 <__retarget_lock_release_recursive>
 800a326:	bf00      	nop
 800a328:	20000798 	.word	0x20000798

0800a32c <_realloc_r>:
 800a32c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a32e:	4607      	mov	r7, r0
 800a330:	4614      	mov	r4, r2
 800a332:	460e      	mov	r6, r1
 800a334:	b921      	cbnz	r1, 800a340 <_realloc_r+0x14>
 800a336:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a33a:	4611      	mov	r1, r2
 800a33c:	f7ff ba10 	b.w	8009760 <_malloc_r>
 800a340:	b922      	cbnz	r2, 800a34c <_realloc_r+0x20>
 800a342:	f7ff f9bd 	bl	80096c0 <_free_r>
 800a346:	4625      	mov	r5, r4
 800a348:	4628      	mov	r0, r5
 800a34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a34c:	f000 f85c 	bl	800a408 <_malloc_usable_size_r>
 800a350:	42a0      	cmp	r0, r4
 800a352:	d20f      	bcs.n	800a374 <_realloc_r+0x48>
 800a354:	4621      	mov	r1, r4
 800a356:	4638      	mov	r0, r7
 800a358:	f7ff fa02 	bl	8009760 <_malloc_r>
 800a35c:	4605      	mov	r5, r0
 800a35e:	2800      	cmp	r0, #0
 800a360:	d0f2      	beq.n	800a348 <_realloc_r+0x1c>
 800a362:	4631      	mov	r1, r6
 800a364:	4622      	mov	r2, r4
 800a366:	f7fd f9d3 	bl	8007710 <memcpy>
 800a36a:	4631      	mov	r1, r6
 800a36c:	4638      	mov	r0, r7
 800a36e:	f7ff f9a7 	bl	80096c0 <_free_r>
 800a372:	e7e9      	b.n	800a348 <_realloc_r+0x1c>
 800a374:	4635      	mov	r5, r6
 800a376:	e7e7      	b.n	800a348 <_realloc_r+0x1c>

0800a378 <_read_r>:
 800a378:	b538      	push	{r3, r4, r5, lr}
 800a37a:	4d07      	ldr	r5, [pc, #28]	; (800a398 <_read_r+0x20>)
 800a37c:	4604      	mov	r4, r0
 800a37e:	4608      	mov	r0, r1
 800a380:	4611      	mov	r1, r2
 800a382:	2200      	movs	r2, #0
 800a384:	602a      	str	r2, [r5, #0]
 800a386:	461a      	mov	r2, r3
 800a388:	f7f7 fdb8 	bl	8001efc <_read>
 800a38c:	1c43      	adds	r3, r0, #1
 800a38e:	d102      	bne.n	800a396 <_read_r+0x1e>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	b103      	cbz	r3, 800a396 <_read_r+0x1e>
 800a394:	6023      	str	r3, [r4, #0]
 800a396:	bd38      	pop	{r3, r4, r5, pc}
 800a398:	200007a0 	.word	0x200007a0

0800a39c <__ascii_wctomb>:
 800a39c:	b149      	cbz	r1, 800a3b2 <__ascii_wctomb+0x16>
 800a39e:	2aff      	cmp	r2, #255	; 0xff
 800a3a0:	bf85      	ittet	hi
 800a3a2:	238a      	movhi	r3, #138	; 0x8a
 800a3a4:	6003      	strhi	r3, [r0, #0]
 800a3a6:	700a      	strbls	r2, [r1, #0]
 800a3a8:	f04f 30ff 	movhi.w	r0, #4294967295
 800a3ac:	bf98      	it	ls
 800a3ae:	2001      	movls	r0, #1
 800a3b0:	4770      	bx	lr
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4770      	bx	lr

0800a3b6 <abort>:
 800a3b6:	b508      	push	{r3, lr}
 800a3b8:	2006      	movs	r0, #6
 800a3ba:	f000 f855 	bl	800a468 <raise>
 800a3be:	2001      	movs	r0, #1
 800a3c0:	f7f7 fd92 	bl	8001ee8 <_exit>

0800a3c4 <_fstat_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	; (800a3e4 <_fstat_r+0x20>)
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4604      	mov	r4, r0
 800a3cc:	4608      	mov	r0, r1
 800a3ce:	4611      	mov	r1, r2
 800a3d0:	602b      	str	r3, [r5, #0]
 800a3d2:	f7f7 fdd8 	bl	8001f86 <_fstat>
 800a3d6:	1c43      	adds	r3, r0, #1
 800a3d8:	d102      	bne.n	800a3e0 <_fstat_r+0x1c>
 800a3da:	682b      	ldr	r3, [r5, #0]
 800a3dc:	b103      	cbz	r3, 800a3e0 <_fstat_r+0x1c>
 800a3de:	6023      	str	r3, [r4, #0]
 800a3e0:	bd38      	pop	{r3, r4, r5, pc}
 800a3e2:	bf00      	nop
 800a3e4:	200007a0 	.word	0x200007a0

0800a3e8 <_isatty_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d06      	ldr	r5, [pc, #24]	; (800a404 <_isatty_r+0x1c>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	f7f7 fdd7 	bl	8001fa6 <_isatty>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_isatty_r+0x1a>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_isatty_r+0x1a>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	200007a0 	.word	0x200007a0

0800a408 <_malloc_usable_size_r>:
 800a408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a40c:	1f18      	subs	r0, r3, #4
 800a40e:	2b00      	cmp	r3, #0
 800a410:	bfbc      	itt	lt
 800a412:	580b      	ldrlt	r3, [r1, r0]
 800a414:	18c0      	addlt	r0, r0, r3
 800a416:	4770      	bx	lr

0800a418 <_raise_r>:
 800a418:	291f      	cmp	r1, #31
 800a41a:	b538      	push	{r3, r4, r5, lr}
 800a41c:	4604      	mov	r4, r0
 800a41e:	460d      	mov	r5, r1
 800a420:	d904      	bls.n	800a42c <_raise_r+0x14>
 800a422:	2316      	movs	r3, #22
 800a424:	6003      	str	r3, [r0, #0]
 800a426:	f04f 30ff 	mov.w	r0, #4294967295
 800a42a:	bd38      	pop	{r3, r4, r5, pc}
 800a42c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a42e:	b112      	cbz	r2, 800a436 <_raise_r+0x1e>
 800a430:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a434:	b94b      	cbnz	r3, 800a44a <_raise_r+0x32>
 800a436:	4620      	mov	r0, r4
 800a438:	f000 f830 	bl	800a49c <_getpid_r>
 800a43c:	462a      	mov	r2, r5
 800a43e:	4601      	mov	r1, r0
 800a440:	4620      	mov	r0, r4
 800a442:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a446:	f000 b817 	b.w	800a478 <_kill_r>
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d00a      	beq.n	800a464 <_raise_r+0x4c>
 800a44e:	1c59      	adds	r1, r3, #1
 800a450:	d103      	bne.n	800a45a <_raise_r+0x42>
 800a452:	2316      	movs	r3, #22
 800a454:	6003      	str	r3, [r0, #0]
 800a456:	2001      	movs	r0, #1
 800a458:	e7e7      	b.n	800a42a <_raise_r+0x12>
 800a45a:	2400      	movs	r4, #0
 800a45c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a460:	4628      	mov	r0, r5
 800a462:	4798      	blx	r3
 800a464:	2000      	movs	r0, #0
 800a466:	e7e0      	b.n	800a42a <_raise_r+0x12>

0800a468 <raise>:
 800a468:	4b02      	ldr	r3, [pc, #8]	; (800a474 <raise+0xc>)
 800a46a:	4601      	mov	r1, r0
 800a46c:	6818      	ldr	r0, [r3, #0]
 800a46e:	f7ff bfd3 	b.w	800a418 <_raise_r>
 800a472:	bf00      	nop
 800a474:	20000154 	.word	0x20000154

0800a478 <_kill_r>:
 800a478:	b538      	push	{r3, r4, r5, lr}
 800a47a:	4d07      	ldr	r5, [pc, #28]	; (800a498 <_kill_r+0x20>)
 800a47c:	2300      	movs	r3, #0
 800a47e:	4604      	mov	r4, r0
 800a480:	4608      	mov	r0, r1
 800a482:	4611      	mov	r1, r2
 800a484:	602b      	str	r3, [r5, #0]
 800a486:	f7f7 fd1f 	bl	8001ec8 <_kill>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d102      	bne.n	800a494 <_kill_r+0x1c>
 800a48e:	682b      	ldr	r3, [r5, #0]
 800a490:	b103      	cbz	r3, 800a494 <_kill_r+0x1c>
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	bd38      	pop	{r3, r4, r5, pc}
 800a496:	bf00      	nop
 800a498:	200007a0 	.word	0x200007a0

0800a49c <_getpid_r>:
 800a49c:	f7f7 bd0c 	b.w	8001eb8 <_getpid>

0800a4a0 <_init>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	bf00      	nop
 800a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a6:	bc08      	pop	{r3}
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	4770      	bx	lr

0800a4ac <_fini>:
 800a4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ae:	bf00      	nop
 800a4b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4b2:	bc08      	pop	{r3}
 800a4b4:	469e      	mov	lr, r3
 800a4b6:	4770      	bx	lr
