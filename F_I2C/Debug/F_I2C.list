
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08007050  08007050  00017050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007150  08007150  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  08007150  08007150  00017150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007158  08007158  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007158  08007158  00017158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800715c  0800715c  0001715c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08007160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  2000018c  080072ec  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  080072ec  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016d71  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f16  00000000  00000000  00036f2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  00039e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  0003ae28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002810b  00000000  00000000  0003bcb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000144ae  00000000  00000000  00063dbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efe56  00000000  00000000  00078269  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001680bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000440c  00000000  00000000  00168114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000018c 	.word	0x2000018c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007038 	.word	0x08007038

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000190 	.word	0x20000190
 80001cc:	08007038 	.word	0x08007038

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <f_Temperature.10413>:
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	void f_Temperature()
	{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af02      	add	r7, sp, #8
 8000946:	f8c7 c004 	str.w	ip, [r7, #4]
		// Temperature
		temp_value = BSP_TSENSOR_ReadTemp();
 800094a:	f001 f9df 	bl	8001d0c <BSP_TSENSOR_ReadTemp>
 800094e:	eef0 7a40 	vmov.f32	s15, s0
 8000952:	4b23      	ldr	r3, [pc, #140]	; (80009e0 <f_Temperature.10413+0xa0>)
 8000954:	edc3 7a00 	vstr	s15, [r3]
		int tmpInt1 = temp_value;
 8000958:	4b21      	ldr	r3, [pc, #132]	; (80009e0 <f_Temperature.10413+0xa0>)
 800095a:	edd3 7a00 	vldr	s15, [r3]
 800095e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000962:	ee17 3a90 	vmov	r3, s15
 8000966:	617b      	str	r3, [r7, #20]
		float tmpFrac = temp_value - tmpInt1;
 8000968:	4b1d      	ldr	r3, [pc, #116]	; (80009e0 <f_Temperature.10413+0xa0>)
 800096a:	ed93 7a00 	vldr	s14, [r3]
 800096e:	697b      	ldr	r3, [r7, #20]
 8000970:	ee07 3a90 	vmov	s15, r3
 8000974:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800097c:	edc7 7a04 	vstr	s15, [r7, #16]
		int tmpInt2 = trunc(tmpFrac * 100);
 8000980:	edd7 7a04 	vldr	s15, [r7, #16]
 8000984:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80009e4 <f_Temperature.10413+0xa4>
 8000988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800098c:	ee17 0a90 	vmov	r0, s15
 8000990:	f7ff fdda 	bl	8000548 <__aeabi_f2d>
 8000994:	4602      	mov	r2, r0
 8000996:	460b      	mov	r3, r1
 8000998:	ec43 2b10 	vmov	d0, r2, r3
 800099c:	f006 fb1a 	bl	8006fd4 <trunc>
 80009a0:	ec53 2b10 	vmov	r2, r3, d0
 80009a4:	4610      	mov	r0, r2
 80009a6:	4619      	mov	r1, r3
 80009a8:	f7ff fe26 	bl	80005f8 <__aeabi_d2iz>
 80009ac:	4603      	mov	r3, r0
 80009ae:	60fb      	str	r3, [r7, #12]
		snprintf(str_tmp,100," TEMPERATURE = %d.%02d \r", tmpInt1, tmpInt2);
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	9300      	str	r3, [sp, #0]
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <f_Temperature.10413+0xa8>)
 80009b8:	2164      	movs	r1, #100	; 0x64
 80009ba:	480c      	ldr	r0, [pc, #48]	; (80009ec <f_Temperature.10413+0xac>)
 80009bc:	f005 fed6 	bl	800676c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),500);
 80009c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009c4:	2264      	movs	r2, #100	; 0x64
 80009c6:	4909      	ldr	r1, [pc, #36]	; (80009ec <f_Temperature.10413+0xac>)
 80009c8:	4809      	ldr	r0, [pc, #36]	; (80009f0 <f_Temperature.10413+0xb0>)
 80009ca:	f004 fb91 	bl	80050f0 <HAL_UART_Transmit>
		memset(str_tmp, 0, sizeof(str_tmp));
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	2100      	movs	r1, #0
 80009d2:	4806      	ldr	r0, [pc, #24]	; (80009ec <f_Temperature.10413+0xac>)
 80009d4:	f005 fec2 	bl	800675c <memset>
	}
 80009d8:	bf00      	nop
 80009da:	3718      	adds	r7, #24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200001a8 	.word	0x200001a8
 80009e4:	42c80000 	.word	0x42c80000
 80009e8:	08007050 	.word	0x08007050
 80009ec:	200001b4 	.word	0x200001b4
 80009f0:	2000048c 	.word	0x2000048c

080009f4 <main>:
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
int main(void)
 80009fa:	f107 0310 	add.w	r3, r7, #16
 80009fe:	603b      	str	r3, [r7, #0]

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000a00:	f001 fd02 	bl	8002408 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

	SystemClock_Config();
 8000a04:	f000 f9fa 	bl	8000dfc <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

	MX_GPIO_Init();
 8000a08:	f000 faea 	bl	8000fe0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8000a0c:	f000 fab8 	bl	8000f80 <MX_USART1_UART_Init>
	MX_UART4_Init();
 8000a10:	f000 fa86 	bl	8000f20 <MX_UART4_Init>
	MX_I2C2_Init();
 8000a14:	f000 fa44 	bl	8000ea0 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */

	BSP_TSENSOR_Init();
 8000a18:	f001 f95c 	bl	8001cd4 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8000a1c:	f001 f8fe 	bl	8001c1c <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8000a20:	f001 f92a 	bl	8001c78 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 8000a24:	f001 f8a4 	bl	8001b70 <BSP_ACCELERO_Init>

	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	222c      	movs	r2, #44	; 0x2c
 8000a2e:	4953      	ldr	r1, [pc, #332]	; (8000b7c <main+0x188>)
 8000a30:	4853      	ldr	r0, [pc, #332]	; (8000b80 <main+0x18c>)
 8000a32:	f004 fb5d 	bl	80050f0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	2219      	movs	r2, #25
 8000a3c:	4951      	ldr	r1, [pc, #324]	; (8000b84 <main+0x190>)
 8000a3e:	4850      	ldr	r0, [pc, #320]	; (8000b80 <main+0x18c>)
 8000a40:	f004 fb56 	bl	80050f0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000a44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a48:	2257      	movs	r2, #87	; 0x57
 8000a4a:	494f      	ldr	r1, [pc, #316]	; (8000b88 <main+0x194>)
 8000a4c:	484c      	ldr	r0, [pc, #304]	; (8000b80 <main+0x18c>)
 8000a4e:	f004 fb4f 	bl	80050f0 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart1,rxData,1);
 8000a52:	2201      	movs	r2, #1
 8000a54:	494d      	ldr	r1, [pc, #308]	; (8000b8c <main+0x198>)
 8000a56:	484a      	ldr	r0, [pc, #296]	; (8000b80 <main+0x18c>)
 8000a58:	f004 fbde 	bl	8005218 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		if(newMsg)
 8000a5c:	4b4c      	ldr	r3, [pc, #304]	; (8000b90 <main+0x19c>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d026      	beq.n	8000ab2 <main+0xbe>
		{
			size = sizeof(rxBuffer);
 8000a64:	4b4b      	ldr	r3, [pc, #300]	; (8000b94 <main+0x1a0>)
 8000a66:	22c8      	movs	r2, #200	; 0xc8
 8000a68:	701a      	strb	r2, [r3, #0]

			rxBuffer[size]='\r';
 8000a6a:	4b4a      	ldr	r3, [pc, #296]	; (8000b94 <main+0x1a0>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4b49      	ldr	r3, [pc, #292]	; (8000b98 <main+0x1a4>)
 8000a72:	220d      	movs	r2, #13
 8000a74:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			rxBuffer[size+1]='\n';
 8000a78:	4b46      	ldr	r3, [pc, #280]	; (8000b94 <main+0x1a0>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	4a46      	ldr	r2, [pc, #280]	; (8000b98 <main+0x1a4>)
 8000a80:	210a      	movs	r1, #10
 8000a82:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			s_case= rxBuffer[0];
 8000a86:	4b44      	ldr	r3, [pc, #272]	; (8000b98 <main+0x1a4>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	4b43      	ldr	r3, [pc, #268]	; (8000b9c <main+0x1a8>)
 8000a8e:	701a      	strb	r2, [r3, #0]

			for(int i=0;i< BUFFERRX ;i++)
 8000a90:	2300      	movs	r3, #0
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	e007      	b.n	8000aa6 <main+0xb2>
			{
				rxBuffer[i]=0;
 8000a96:	4a40      	ldr	r2, [pc, #256]	; (8000b98 <main+0x1a4>)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i=0;i< BUFFERRX ;i++)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	2b31      	cmp	r3, #49	; 0x31
 8000aaa:	ddf4      	ble.n	8000a96 <main+0xa2>
			}

			newMsg=0;
 8000aac:	4b38      	ldr	r3, [pc, #224]	; (8000b90 <main+0x19c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
		}

		//printf("switch case value : %d \n",s_case);

		switch(s_case)
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <main+0x1a8>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d05e      	beq.n	8000b78 <main+0x184>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db57      	blt.n	8000b6e <main+0x17a>
 8000abe:	2b34      	cmp	r3, #52	; 0x34
 8000ac0:	dc55      	bgt.n	8000b6e <main+0x17a>
 8000ac2:	2b1b      	cmp	r3, #27
 8000ac4:	db53      	blt.n	8000b6e <main+0x17a>
 8000ac6:	3b1b      	subs	r3, #27
 8000ac8:	2b19      	cmp	r3, #25
 8000aca:	d850      	bhi.n	8000b6e <main+0x17a>
 8000acc:	a201      	add	r2, pc, #4	; (adr r2, 8000ad4 <main+0xe0>)
 8000ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ad2:	bf00      	nop
 8000ad4:	08000b65 	.word	0x08000b65
 8000ad8:	08000b6f 	.word	0x08000b6f
 8000adc:	08000b6f 	.word	0x08000b6f
 8000ae0:	08000b6f 	.word	0x08000b6f
 8000ae4:	08000b6f 	.word	0x08000b6f
 8000ae8:	08000b6f 	.word	0x08000b6f
 8000aec:	08000b6f 	.word	0x08000b6f
 8000af0:	08000b6f 	.word	0x08000b6f
 8000af4:	08000b6f 	.word	0x08000b6f
 8000af8:	08000b6f 	.word	0x08000b6f
 8000afc:	08000b6f 	.word	0x08000b6f
 8000b00:	08000b6f 	.word	0x08000b6f
 8000b04:	08000b6f 	.word	0x08000b6f
 8000b08:	08000b6f 	.word	0x08000b6f
 8000b0c:	08000b6f 	.word	0x08000b6f
 8000b10:	08000b6f 	.word	0x08000b6f
 8000b14:	08000b6f 	.word	0x08000b6f
 8000b18:	08000b6f 	.word	0x08000b6f
 8000b1c:	08000b6f 	.word	0x08000b6f
 8000b20:	08000b6f 	.word	0x08000b6f
 8000b24:	08000b6f 	.word	0x08000b6f
 8000b28:	08000b6f 	.word	0x08000b6f
 8000b2c:	08000b3d 	.word	0x08000b3d
 8000b30:	08000b47 	.word	0x08000b47
 8000b34:	08000b51 	.word	0x08000b51
 8000b38:	08000b5b 	.word	0x08000b5b
				break;
			}

			case 49:
			{
				f_Temperature();
 8000b3c:	463b      	mov	r3, r7
 8000b3e:	469c      	mov	ip, r3
 8000b40:	f7ff fefe 	bl	8000940 <f_Temperature.10413>
				break;
 8000b44:	e019      	b.n	8000b7a <main+0x186>
			}
			case 50:
			{
				f_Humidity();
 8000b46:	463b      	mov	r3, r7
 8000b48:	469c      	mov	ip, r3
 8000b4a:	f000 f829 	bl	8000ba0 <f_Humidity.10418>
				break;
 8000b4e:	e014      	b.n	8000b7a <main+0x186>
			}
			case 51:
			{
				f_Pressure();
 8000b50:	463b      	mov	r3, r7
 8000b52:	469c      	mov	ip, r3
 8000b54:	f000 f87a 	bl	8000c4c <f_Pressure.10423>
				break;
 8000b58:	e00f      	b.n	8000b7a <main+0x186>
			}
			case 52:
			{
				f_ACCELEROMETER();
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	469c      	mov	ip, r3
 8000b5e:	f000 f8cb 	bl	8000cf8 <f_ACCELEROMETER.10428>
				break;
 8000b62:	e00a      	b.n	8000b7a <main+0x186>
			}
			case 27:
			{
				f_Menu();
 8000b64:	463b      	mov	r3, r7
 8000b66:	469c      	mov	ip, r3
 8000b68:	f000 f910 	bl	8000d8c <f_Menu.10430>
				break;
 8000b6c:	e005      	b.n	8000b7a <main+0x186>
			}

			default :
			{
				f_Invalid();
 8000b6e:	463b      	mov	r3, r7
 8000b70:	469c      	mov	ip, r3
 8000b72:	f000 f925 	bl	8000dc0 <f_Invalid.10432>
 8000b76:	e771      	b.n	8000a5c <main+0x68>
				break;
 8000b78:	bf00      	nop
		if(newMsg)
 8000b7a:	e76f      	b.n	8000a5c <main+0x68>
 8000b7c:	20000000 	.word	0x20000000
 8000b80:	2000048c 	.word	0x2000048c
 8000b84:	2000002c 	.word	0x2000002c
 8000b88:	20000048 	.word	0x20000048
 8000b8c:	20000434 	.word	0x20000434
 8000b90:	20000415 	.word	0x20000415
 8000b94:	20000417 	.word	0x20000417
 8000b98:	20000510 	.word	0x20000510
 8000b9c:	20000414 	.word	0x20000414

08000ba0 <f_Humidity.10418>:
	{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b088      	sub	sp, #32
 8000ba4:	af02      	add	r7, sp, #8
 8000ba6:	f8c7 c004 	str.w	ip, [r7, #4]
		humi_value = BSP_HSENSOR_ReadHumidity();
 8000baa:	f001 f857 	bl	8001c5c <BSP_HSENSOR_ReadHumidity>
 8000bae:	eef0 7a40 	vmov.f32	s15, s0
 8000bb2:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <f_Humidity.10418+0x98>)
 8000bb4:	edc3 7a00 	vstr	s15, [r3]
		int humiInt1 = humi_value;
 8000bb8:	4b1f      	ldr	r3, [pc, #124]	; (8000c38 <f_Humidity.10418+0x98>)
 8000bba:	edd3 7a00 	vldr	s15, [r3]
 8000bbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bc2:	ee17 3a90 	vmov	r3, s15
 8000bc6:	617b      	str	r3, [r7, #20]
		float humiFrac = humi_value - humiInt1;
 8000bc8:	4b1b      	ldr	r3, [pc, #108]	; (8000c38 <f_Humidity.10418+0x98>)
 8000bca:	ed93 7a00 	vldr	s14, [r3]
 8000bce:	697b      	ldr	r3, [r7, #20]
 8000bd0:	ee07 3a90 	vmov	s15, r3
 8000bd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bdc:	edc7 7a04 	vstr	s15, [r7, #16]
		int humiInt2 = trunc(humiFrac * 100);
 8000be0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000be4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000c3c <f_Humidity.10418+0x9c>
 8000be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bec:	ee17 0a90 	vmov	r0, s15
 8000bf0:	f7ff fcaa 	bl	8000548 <__aeabi_f2d>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	460b      	mov	r3, r1
 8000bf8:	ec43 2b10 	vmov	d0, r2, r3
 8000bfc:	f006 f9ea 	bl	8006fd4 <trunc>
 8000c00:	ec53 2b10 	vmov	r2, r3, d0
 8000c04:	4610      	mov	r0, r2
 8000c06:	4619      	mov	r1, r3
 8000c08:	f7ff fcf6 	bl	80005f8 <__aeabi_d2iz>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	60fb      	str	r3, [r7, #12]
		snprintf(str_humi,100," HUMIDITY = %d.%02d \r", humiInt1, humiInt2);
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	4a0a      	ldr	r2, [pc, #40]	; (8000c40 <f_Humidity.10418+0xa0>)
 8000c18:	2164      	movs	r1, #100	; 0x64
 8000c1a:	480a      	ldr	r0, [pc, #40]	; (8000c44 <f_Humidity.10418+0xa4>)
 8000c1c:	f005 fda6 	bl	800676c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),500);
 8000c20:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c24:	2264      	movs	r2, #100	; 0x64
 8000c26:	4907      	ldr	r1, [pc, #28]	; (8000c44 <f_Humidity.10418+0xa4>)
 8000c28:	4807      	ldr	r0, [pc, #28]	; (8000c48 <f_Humidity.10418+0xa8>)
 8000c2a:	f004 fa61 	bl	80050f0 <HAL_UART_Transmit>
	}
 8000c2e:	bf00      	nop
 8000c30:	3718      	adds	r7, #24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	200001ac 	.word	0x200001ac
 8000c3c:	42c80000 	.word	0x42c80000
 8000c40:	0800706c 	.word	0x0800706c
 8000c44:	20000218 	.word	0x20000218
 8000c48:	2000048c 	.word	0x2000048c

08000c4c <f_Pressure.10423>:
	{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af02      	add	r7, sp, #8
 8000c52:	f8c7 c004 	str.w	ip, [r7, #4]
		pre_value = BSP_PSENSOR_ReadPressure();
 8000c56:	f001 f82f 	bl	8001cb8 <BSP_PSENSOR_ReadPressure>
 8000c5a:	eef0 7a40 	vmov.f32	s15, s0
 8000c5e:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <f_Pressure.10423+0x98>)
 8000c60:	edc3 7a00 	vstr	s15, [r3]
		int preInt1 = pre_value;
 8000c64:	4b1f      	ldr	r3, [pc, #124]	; (8000ce4 <f_Pressure.10423+0x98>)
 8000c66:	edd3 7a00 	vldr	s15, [r3]
 8000c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000c6e:	ee17 3a90 	vmov	r3, s15
 8000c72:	617b      	str	r3, [r7, #20]
		float preFrac = pre_value - preInt1;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <f_Pressure.10423+0x98>)
 8000c76:	ed93 7a00 	vldr	s14, [r3]
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	ee07 3a90 	vmov	s15, r3
 8000c80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c88:	edc7 7a04 	vstr	s15, [r7, #16]
		int preInt2 = trunc(preFrac * 100);
 8000c8c:	edd7 7a04 	vldr	s15, [r7, #16]
 8000c90:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000ce8 <f_Pressure.10423+0x9c>
 8000c94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c98:	ee17 0a90 	vmov	r0, s15
 8000c9c:	f7ff fc54 	bl	8000548 <__aeabi_f2d>
 8000ca0:	4602      	mov	r2, r0
 8000ca2:	460b      	mov	r3, r1
 8000ca4:	ec43 2b10 	vmov	d0, r2, r3
 8000ca8:	f006 f994 	bl	8006fd4 <trunc>
 8000cac:	ec53 2b10 	vmov	r2, r3, d0
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_d2iz>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	60fb      	str	r3, [r7, #12]
		snprintf(str_pre,100," PRESSURE = %d.%02d \r", preInt1, preInt2);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <f_Pressure.10423+0xa0>)
 8000cc4:	2164      	movs	r1, #100	; 0x64
 8000cc6:	480a      	ldr	r0, [pc, #40]	; (8000cf0 <f_Pressure.10423+0xa4>)
 8000cc8:	f005 fd50 	bl	800676c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),500);
 8000ccc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cd0:	2264      	movs	r2, #100	; 0x64
 8000cd2:	4907      	ldr	r1, [pc, #28]	; (8000cf0 <f_Pressure.10423+0xa4>)
 8000cd4:	4807      	ldr	r0, [pc, #28]	; (8000cf4 <f_Pressure.10423+0xa8>)
 8000cd6:	f004 fa0b 	bl	80050f0 <HAL_UART_Transmit>
	}
 8000cda:	bf00      	nop
 8000cdc:	3718      	adds	r7, #24
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200001b0 	.word	0x200001b0
 8000ce8:	42c80000 	.word	0x42c80000
 8000cec:	08007084 	.word	0x08007084
 8000cf0:	2000027c 	.word	0x2000027c
 8000cf4:	2000048c 	.word	0x2000048c

08000cf8 <f_ACCELEROMETER.10428>:
	{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	f8c7 c004 	str.w	ip, [r7, #4]
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000d02:	481a      	ldr	r0, [pc, #104]	; (8000d6c <f_ACCELEROMETER.10428+0x74>)
 8000d04:	f000 ff72 	bl	8001bec <BSP_ACCELERO_AccGetXYZ>
		snprintf(str_acc1,100," X-axis = %d      ", pDataXYZ[0]);
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <f_ACCELEROMETER.10428+0x74>)
 8000d0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0e:	4a18      	ldr	r2, [pc, #96]	; (8000d70 <f_ACCELEROMETER.10428+0x78>)
 8000d10:	2164      	movs	r1, #100	; 0x64
 8000d12:	4818      	ldr	r0, [pc, #96]	; (8000d74 <f_ACCELEROMETER.10428+0x7c>)
 8000d14:	f005 fd2a 	bl	800676c <sniprintf>
		snprintf(str_acc2,100," Y-axis = %d      ", pDataXYZ[1]);
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <f_ACCELEROMETER.10428+0x74>)
 8000d1a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d1e:	4a16      	ldr	r2, [pc, #88]	; (8000d78 <f_ACCELEROMETER.10428+0x80>)
 8000d20:	2164      	movs	r1, #100	; 0x64
 8000d22:	4816      	ldr	r0, [pc, #88]	; (8000d7c <f_ACCELEROMETER.10428+0x84>)
 8000d24:	f005 fd22 	bl	800676c <sniprintf>
		snprintf(str_acc3,100," Z-axis = %d \r", pDataXYZ[2]);
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <f_ACCELEROMETER.10428+0x74>)
 8000d2a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d2e:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <f_ACCELEROMETER.10428+0x88>)
 8000d30:	2164      	movs	r1, #100	; 0x64
 8000d32:	4814      	ldr	r0, [pc, #80]	; (8000d84 <f_ACCELEROMETER.10428+0x8c>)
 8000d34:	f005 fd1a 	bl	800676c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 8000d38:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d3c:	2264      	movs	r2, #100	; 0x64
 8000d3e:	490d      	ldr	r1, [pc, #52]	; (8000d74 <f_ACCELEROMETER.10428+0x7c>)
 8000d40:	4811      	ldr	r0, [pc, #68]	; (8000d88 <f_ACCELEROMETER.10428+0x90>)
 8000d42:	f004 f9d5 	bl	80050f0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc2,sizeof(str_acc2),500);
 8000d46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d4a:	2264      	movs	r2, #100	; 0x64
 8000d4c:	490b      	ldr	r1, [pc, #44]	; (8000d7c <f_ACCELEROMETER.10428+0x84>)
 8000d4e:	480e      	ldr	r0, [pc, #56]	; (8000d88 <f_ACCELEROMETER.10428+0x90>)
 8000d50:	f004 f9ce 	bl	80050f0 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc3,sizeof(str_acc2),500);
 8000d54:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000d58:	2264      	movs	r2, #100	; 0x64
 8000d5a:	490a      	ldr	r1, [pc, #40]	; (8000d84 <f_ACCELEROMETER.10428+0x8c>)
 8000d5c:	480a      	ldr	r0, [pc, #40]	; (8000d88 <f_ACCELEROMETER.10428+0x90>)
 8000d5e:	f004 f9c7 	bl	80050f0 <HAL_UART_Transmit>
	}
 8000d62:	bf00      	nop
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200002e0 	.word	0x200002e0
 8000d70:	0800709c 	.word	0x0800709c
 8000d74:	200002e8 	.word	0x200002e8
 8000d78:	080070b0 	.word	0x080070b0
 8000d7c:	2000034c 	.word	0x2000034c
 8000d80:	080070c4 	.word	0x080070c4
 8000d84:	200003b0 	.word	0x200003b0
 8000d88:	2000048c 	.word	0x2000048c

08000d8c <f_Menu.10430>:
	{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d9a:	2257      	movs	r2, #87	; 0x57
 8000d9c:	4905      	ldr	r1, [pc, #20]	; (8000db4 <f_Menu.10430+0x28>)
 8000d9e:	4806      	ldr	r0, [pc, #24]	; (8000db8 <f_Menu.10430+0x2c>)
 8000da0:	f004 f9a6 	bl	80050f0 <HAL_UART_Transmit>
		s_case=0;
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <f_Menu.10430+0x30>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000048 	.word	0x20000048
 8000db8:	2000048c 	.word	0x2000048c
 8000dbc:	20000414 	.word	0x20000414

08000dc0 <f_Invalid.10432>:
	{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	f8c7 c004 	str.w	ip, [r7, #4]
		HAL_UART_Transmit(&huart1,(uint8_t*)Invalid,strlen(Invalid),500);
 8000dca:	4809      	ldr	r0, [pc, #36]	; (8000df0 <f_Invalid.10432+0x30>)
 8000dcc:	f7ff fa00 	bl	80001d0 <strlen>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	b29a      	uxth	r2, r3
 8000dd4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000dd8:	4905      	ldr	r1, [pc, #20]	; (8000df0 <f_Invalid.10432+0x30>)
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <f_Invalid.10432+0x34>)
 8000ddc:	f004 f988 	bl	80050f0 <HAL_UART_Transmit>
		s_case=0;
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <f_Invalid.10432+0x38>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	701a      	strb	r2, [r3, #0]
	}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	200000a0 	.word	0x200000a0
 8000df4:	2000048c 	.word	0x2000048c
 8000df8:	20000414 	.word	0x20000414

08000dfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b096      	sub	sp, #88	; 0x58
 8000e00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e02:	f107 0314 	add.w	r3, r7, #20
 8000e06:	2244      	movs	r2, #68	; 0x44
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f005 fca6 	bl	800675c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e10:	463b      	mov	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000e1e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000e22:	f002 fe07 	bl	8003a34 <HAL_PWREx_ControlVoltageScaling>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000e2c:	f000 fb18 	bl	8001460 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e30:	2310      	movs	r3, #16
 8000e32:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e3c:	2360      	movs	r3, #96	; 0x60
 8000e3e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e40:	2302      	movs	r3, #2
 8000e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e44:	2301      	movs	r3, #1
 8000e46:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000e4c:	2328      	movs	r3, #40	; 0x28
 8000e4e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000e50:	2307      	movs	r3, #7
 8000e52:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e54:	2302      	movs	r3, #2
 8000e56:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4618      	mov	r0, r3
 8000e62:	f002 fe3d 	bl	8003ae0 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000e6c:	f000 faf8 	bl	8001460 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2303      	movs	r3, #3
 8000e76:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e80:	2300      	movs	r3, #0
 8000e82:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e84:	463b      	mov	r3, r7
 8000e86:	2104      	movs	r1, #4
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f003 fa03 	bl	8004294 <HAL_RCC_ClockConfig>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d001      	beq.n	8000e98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000e94:	f000 fae4 	bl	8001460 <Error_Handler>
  }
}
 8000e98:	bf00      	nop
 8000e9a:	3758      	adds	r7, #88	; 0x58
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000ea6:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <MX_I2C2_Init+0x78>)
 8000ea8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000eaa:	4b1a      	ldr	r3, [pc, #104]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000eac:	4a1b      	ldr	r2, [pc, #108]	; (8000f1c <MX_I2C2_Init+0x7c>)
 8000eae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000eb0:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ebc:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ec2:	4b14      	ldr	r3, [pc, #80]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ed4:	4b0f      	ldr	r3, [pc, #60]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000eda:	480e      	ldr	r0, [pc, #56]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000edc:	f001 ff71 	bl	8002dc2 <HAL_I2C_Init>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000ee6:	f000 fabb 	bl	8001460 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eea:	2100      	movs	r1, #0
 8000eec:	4809      	ldr	r0, [pc, #36]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000eee:	f002 fcfb 	bl	80038e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ef8:	f000 fab2 	bl	8001460 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000efc:	2100      	movs	r1, #0
 8000efe:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_I2C2_Init+0x74>)
 8000f00:	f002 fd3d 	bl	800397e <HAL_I2CEx_ConfigDigitalFilter>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000f0a:	f000 faa9 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000438 	.word	0x20000438
 8000f18:	40005800 	.word	0x40005800
 8000f1c:	10909cec 	.word	0x10909cec

08000f20 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f26:	4a15      	ldr	r2, [pc, #84]	; (8000f7c <MX_UART4_Init+0x5c>)
 8000f28:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000f2a:	4b13      	ldr	r3, [pc, #76]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f30:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f46:	220c      	movs	r2, #12
 8000f48:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_UART4_Init+0x58>)
 8000f64:	f004 f876 	bl	8005054 <HAL_UART_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000f6e:	f000 fa77 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200005d8 	.word	0x200005d8
 8000f7c:	40004c00 	.word	0x40004c00

08000f80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <MX_USART1_UART_Init+0x5c>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART1_UART_Init+0x58>)
 8000fc4:	f004 f846 	bl	8005054 <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000fce:	f000 fa47 	bl	8001460 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	2000048c 	.word	0x2000048c
 8000fdc:	40013800 	.word	0x40013800

08000fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe6:	f107 0314 	add.w	r3, r7, #20
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ff6:	4bbd      	ldr	r3, [pc, #756]	; (80012ec <MX_GPIO_Init+0x30c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4abc      	ldr	r2, [pc, #752]	; (80012ec <MX_GPIO_Init+0x30c>)
 8000ffc:	f043 0310 	orr.w	r3, r3, #16
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4bba      	ldr	r3, [pc, #744]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0310 	and.w	r3, r3, #16
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	4bb7      	ldr	r3, [pc, #732]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001012:	4ab6      	ldr	r2, [pc, #728]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001014:	f043 0304 	orr.w	r3, r3, #4
 8001018:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101a:	4bb4      	ldr	r3, [pc, #720]	; (80012ec <MX_GPIO_Init+0x30c>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	f003 0304 	and.w	r3, r3, #4
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001026:	4bb1      	ldr	r3, [pc, #708]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	4ab0      	ldr	r2, [pc, #704]	; (80012ec <MX_GPIO_Init+0x30c>)
 800102c:	f043 0301 	orr.w	r3, r3, #1
 8001030:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001032:	4bae      	ldr	r3, [pc, #696]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103e:	4bab      	ldr	r3, [pc, #684]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	4aaa      	ldr	r2, [pc, #680]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104a:	4ba8      	ldr	r3, [pc, #672]	; (80012ec <MX_GPIO_Init+0x30c>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4ba5      	ldr	r3, [pc, #660]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4aa4      	ldr	r2, [pc, #656]	; (80012ec <MX_GPIO_Init+0x30c>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4ba2      	ldr	r3, [pc, #648]	; (80012ec <MX_GPIO_Init+0x30c>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800106e:	2200      	movs	r2, #0
 8001070:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001074:	489e      	ldr	r0, [pc, #632]	; (80012f0 <MX_GPIO_Init+0x310>)
 8001076:	f001 fe69 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f248 1104 	movw	r1, #33028	; 0x8104
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 fe62 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001088:	2200      	movs	r2, #0
 800108a:	f24f 0114 	movw	r1, #61460	; 0xf014
 800108e:	4899      	ldr	r0, [pc, #612]	; (80012f4 <MX_GPIO_Init+0x314>)
 8001090:	f001 fe5c 	bl	8002d4c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001094:	2200      	movs	r2, #0
 8001096:	f241 0181 	movw	r1, #4225	; 0x1081
 800109a:	4897      	ldr	r0, [pc, #604]	; (80012f8 <MX_GPIO_Init+0x318>)
 800109c:	f001 fe56 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010a0:	2201      	movs	r2, #1
 80010a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010a6:	4894      	ldr	r0, [pc, #592]	; (80012f8 <MX_GPIO_Init+0x318>)
 80010a8:	f001 fe50 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80010ac:	2200      	movs	r2, #0
 80010ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 80010b2:	4892      	ldr	r0, [pc, #584]	; (80012fc <MX_GPIO_Init+0x31c>)
 80010b4:	f001 fe4a 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010b8:	2201      	movs	r2, #1
 80010ba:	2120      	movs	r1, #32
 80010bc:	488d      	ldr	r0, [pc, #564]	; (80012f4 <MX_GPIO_Init+0x314>)
 80010be:	f001 fe45 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80010c2:	2201      	movs	r2, #1
 80010c4:	2101      	movs	r1, #1
 80010c6:	488a      	ldr	r0, [pc, #552]	; (80012f0 <MX_GPIO_Init+0x310>)
 80010c8:	f001 fe40 	bl	8002d4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80010cc:	f240 1315 	movw	r3, #277	; 0x115
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4882      	ldr	r0, [pc, #520]	; (80012f0 <MX_GPIO_Init+0x310>)
 80010e6:	f001 fb93 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80010ea:	236a      	movs	r3, #106	; 0x6a
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	487c      	ldr	r0, [pc, #496]	; (80012f0 <MX_GPIO_Init+0x310>)
 8001100:	f001 fb86 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001104:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800110a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4878      	ldr	r0, [pc, #480]	; (80012fc <MX_GPIO_Init+0x31c>)
 800111c:	f001 fb78 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001120:	233f      	movs	r3, #63	; 0x3f
 8001122:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001124:	230b      	movs	r3, #11
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	4872      	ldr	r0, [pc, #456]	; (80012fc <MX_GPIO_Init+0x31c>)
 8001134:	f001 fb6c 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001138:	f248 1304 	movw	r3, #33028	; 0x8104
 800113c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800113e:	2301      	movs	r3, #1
 8001140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f001 fb5c 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001158:	2308      	movs	r3, #8
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001168:	2301      	movs	r3, #1
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	4619      	mov	r1, r3
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f001 fb4b 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800117a:	2310      	movs	r3, #16
 800117c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800117e:	230b      	movs	r3, #11
 8001180:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f001 fb3e 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001194:	23e0      	movs	r3, #224	; 0xe0
 8001196:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	2303      	movs	r3, #3
 80011a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011a4:	2305      	movs	r3, #5
 80011a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4619      	mov	r1, r3
 80011ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b2:	f001 fb2d 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 80011b6:	2301      	movs	r3, #1
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	484a      	ldr	r0, [pc, #296]	; (80012f4 <MX_GPIO_Init+0x314>)
 80011cc:	f001 fb20 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80011d0:	2302      	movs	r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011d4:	230b      	movs	r3, #11
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	4619      	mov	r1, r3
 80011e2:	4844      	ldr	r0, [pc, #272]	; (80012f4 <MX_GPIO_Init+0x314>)
 80011e4:	f001 fb14 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80011e8:	f24f 0334 	movw	r3, #61492	; 0xf034
 80011ec:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	483c      	ldr	r0, [pc, #240]	; (80012f4 <MX_GPIO_Init+0x314>)
 8001202:	f001 fb05 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001206:	f44f 7320 	mov.w	r3, #640	; 0x280
 800120a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120c:	2302      	movs	r3, #2
 800120e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001214:	2300      	movs	r3, #0
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001218:	2306      	movs	r3, #6
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800121c:	f107 0314 	add.w	r3, r7, #20
 8001220:	4619      	mov	r1, r3
 8001222:	4833      	ldr	r0, [pc, #204]	; (80012f0 <MX_GPIO_Init+0x310>)
 8001224:	f001 faf4 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001228:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800122c:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122e:	2302      	movs	r3, #2
 8001230:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001236:	2303      	movs	r3, #3
 8001238:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800123a:	230a      	movs	r3, #10
 800123c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800123e:	f107 0314 	add.w	r3, r7, #20
 8001242:	4619      	mov	r1, r3
 8001244:	482a      	ldr	r0, [pc, #168]	; (80012f0 <MX_GPIO_Init+0x310>)
 8001246:	f001 fae3 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800124a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800125c:	2307      	movs	r3, #7
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4824      	ldr	r0, [pc, #144]	; (80012f8 <MX_GPIO_Init+0x318>)
 8001268:	f001 fad2 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800126c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001270:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001272:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001276:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	481d      	ldr	r0, [pc, #116]	; (80012f8 <MX_GPIO_Init+0x318>)
 8001284:	f001 fac4 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001288:	f243 0381 	movw	r3, #12417	; 0x3081
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	4815      	ldr	r0, [pc, #84]	; (80012f8 <MX_GPIO_Init+0x318>)
 80012a2:	f001 fab5 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 80012a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80012aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4619      	mov	r1, r3
 80012be:	480f      	ldr	r0, [pc, #60]	; (80012fc <MX_GPIO_Init+0x31c>)
 80012c0:	f001 faa6 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80012c4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	4808      	ldr	r0, [pc, #32]	; (80012fc <MX_GPIO_Init+0x31c>)
 80012dc:	f001 fa98 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80012e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e6:	2300      	movs	r3, #0
 80012e8:	e00a      	b.n	8001300 <MX_GPIO_Init+0x320>
 80012ea:	bf00      	nop
 80012ec:	40021000 	.word	0x40021000
 80012f0:	48001000 	.word	0x48001000
 80012f4:	48000400 	.word	0x48000400
 80012f8:	48000c00 	.word	0x48000c00
 80012fc:	48000800 	.word	0x48000800
 8001300:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001310:	f001 fa7e 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001314:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001318:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001322:	2303      	movs	r3, #3
 8001324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001326:	230a      	movs	r3, #10
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001334:	f001 fa6c 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001338:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800133c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800133e:	2302      	movs	r3, #2
 8001340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001346:	2303      	movs	r3, #3
 8001348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800134a:	2306      	movs	r3, #6
 800134c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800134e:	f107 0314 	add.w	r3, r7, #20
 8001352:	4619      	mov	r1, r3
 8001354:	4823      	ldr	r0, [pc, #140]	; (80013e4 <MX_GPIO_Init+0x404>)
 8001356:	f001 fa5b 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800135a:	2302      	movs	r3, #2
 800135c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800136a:	2305      	movs	r3, #5
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	481c      	ldr	r0, [pc, #112]	; (80013e8 <MX_GPIO_Init+0x408>)
 8001376:	f001 fa4b 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800137a:	2378      	movs	r3, #120	; 0x78
 800137c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137e:	2302      	movs	r3, #2
 8001380:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001386:	2303      	movs	r3, #3
 8001388:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800138a:	2307      	movs	r3, #7
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800138e:	f107 0314 	add.w	r3, r7, #20
 8001392:	4619      	mov	r1, r3
 8001394:	4814      	ldr	r0, [pc, #80]	; (80013e8 <MX_GPIO_Init+0x408>)
 8001396:	f001 fa3b 	bl	8002810 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800139a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800139e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a0:	2312      	movs	r3, #18
 80013a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ac:	2304      	movs	r3, #4
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	480d      	ldr	r0, [pc, #52]	; (80013ec <MX_GPIO_Init+0x40c>)
 80013b8:	f001 fa2a 	bl	8002810 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013bc:	2200      	movs	r2, #0
 80013be:	2100      	movs	r1, #0
 80013c0:	2017      	movs	r0, #23
 80013c2:	f001 f970 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013c6:	2017      	movs	r0, #23
 80013c8:	f001 f989 	bl	80026de <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2100      	movs	r1, #0
 80013d0:	2028      	movs	r0, #40	; 0x28
 80013d2:	f001 f968 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d6:	2028      	movs	r0, #40	; 0x28
 80013d8:	f001 f981 	bl	80026de <HAL_NVIC_EnableIRQ>

}
 80013dc:	bf00      	nop
 80013de:	3728      	adds	r7, #40	; 0x28
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	48000800 	.word	0x48000800
 80013e8:	48000c00 	.word	0x48000c00
 80013ec:	48000400 	.word	0x48000400

080013f0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a12      	ldr	r2, [pc, #72]	; (8001448 <HAL_UART_RxCpltCallback+0x58>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d11d      	bne.n	800143e <HAL_UART_RxCpltCallback+0x4e>
    {
    	if(rxData[0]!='\r')
 8001402:	4b12      	ldr	r3, [pc, #72]	; (800144c <HAL_UART_RxCpltCallback+0x5c>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	2b0d      	cmp	r3, #13
 8001408:	d00e      	beq.n	8001428 <HAL_UART_RxCpltCallback+0x38>
        {
            rxBuffer[rxIndex]=rxData[0];
 800140a:	4b10      	ldr	r3, [pc, #64]	; (800144c <HAL_UART_RxCpltCallback+0x5c>)
 800140c:	7819      	ldrb	r1, [r3, #0]
 800140e:	4b10      	ldr	r3, [pc, #64]	; (8001450 <HAL_UART_RxCpltCallback+0x60>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	461a      	mov	r2, r3
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <HAL_UART_RxCpltCallback+0x64>)
 8001416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            rxIndex++;
 800141a:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <HAL_UART_RxCpltCallback+0x60>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b0b      	ldr	r3, [pc, #44]	; (8001450 <HAL_UART_RxCpltCallback+0x60>)
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e005      	b.n	8001434 <HAL_UART_RxCpltCallback+0x44>
        }
        else
        {
            newMsg=1;
 8001428:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <HAL_UART_RxCpltCallback+0x68>)
 800142a:	2201      	movs	r2, #1
 800142c:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <HAL_UART_RxCpltCallback+0x60>)
 8001430:	2200      	movs	r2, #0
 8001432:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8001434:	2201      	movs	r2, #1
 8001436:	4905      	ldr	r1, [pc, #20]	; (800144c <HAL_UART_RxCpltCallback+0x5c>)
 8001438:	4808      	ldr	r0, [pc, #32]	; (800145c <HAL_UART_RxCpltCallback+0x6c>)
 800143a:	f003 feed 	bl	8005218 <HAL_UART_Receive_IT>
					rxIndex1=0;
				}
				HAL_UART_Receive_IT(&huart4 ,rxData1,1);
			}
     */
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40013800 	.word	0x40013800
 800144c:	20000434 	.word	0x20000434
 8001450:	20000416 	.word	0x20000416
 8001454:	20000510 	.word	0x20000510
 8001458:	20000415 	.word	0x20000415
 800145c:	2000048c 	.word	0x2000048c

08001460 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001464:	b672      	cpsid	i
}
 8001466:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001468:	e7fe      	b.n	8001468 <Error_Handler+0x8>
	...

0800146c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001472:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <HAL_MspInit+0x44>)
 8001474:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001476:	4a0e      	ldr	r2, [pc, #56]	; (80014b0 <HAL_MspInit+0x44>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6613      	str	r3, [r2, #96]	; 0x60
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_MspInit+0x44>)
 8001480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	607b      	str	r3, [r7, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_MspInit+0x44>)
 800148c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800148e:	4a08      	ldr	r2, [pc, #32]	; (80014b0 <HAL_MspInit+0x44>)
 8001490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001494:	6593      	str	r3, [r2, #88]	; 0x58
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <HAL_MspInit+0x44>)
 8001498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800149a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149e:	603b      	str	r3, [r7, #0]
 80014a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0ac      	sub	sp, #176	; 0xb0
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	2288      	movs	r2, #136	; 0x88
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f005 f941 	bl	800675c <memset>
  if(hi2c->Instance==I2C2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a21      	ldr	r2, [pc, #132]	; (8001564 <HAL_I2C_MspInit+0xb0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d13b      	bne.n	800155c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0314 	add.w	r3, r7, #20
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 f8f3 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014fc:	f7ff ffb0 	bl	8001460 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a18      	ldr	r2, [pc, #96]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001518:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800151c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001520:	2312      	movs	r3, #18
 8001522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001532:	2304      	movs	r3, #4
 8001534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800153c:	4619      	mov	r1, r3
 800153e:	480b      	ldr	r0, [pc, #44]	; (800156c <HAL_I2C_MspInit+0xb8>)
 8001540:	f001 f966 	bl	8002810 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001544:	4b08      	ldr	r3, [pc, #32]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001548:	4a07      	ldr	r2, [pc, #28]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 800154a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800154e:	6593      	str	r3, [r2, #88]	; 0x58
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <HAL_I2C_MspInit+0xb4>)
 8001552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001554:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800155c:	bf00      	nop
 800155e:	37b0      	adds	r7, #176	; 0xb0
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40005800 	.word	0x40005800
 8001568:	40021000 	.word	0x40021000
 800156c:	48000400 	.word	0x48000400

08001570 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_I2C_MspDeInit+0x3c>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d10f      	bne.n	80015a2 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_I2C_MspDeInit+0x40>)
 8001584:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001586:	4a0a      	ldr	r2, [pc, #40]	; (80015b0 <HAL_I2C_MspDeInit+0x40>)
 8001588:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800158c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800158e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001592:	4808      	ldr	r0, [pc, #32]	; (80015b4 <HAL_I2C_MspDeInit+0x44>)
 8001594:	f001 fae6 	bl	8002b64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001598:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800159c:	4805      	ldr	r0, [pc, #20]	; (80015b4 <HAL_I2C_MspDeInit+0x44>)
 800159e:	f001 fae1 	bl	8002b64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40005800 	.word	0x40005800
 80015b0:	40021000 	.word	0x40021000
 80015b4:	48000400 	.word	0x48000400

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b0ae      	sub	sp, #184	; 0xb8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
 80015ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015d0:	f107 031c 	add.w	r3, r7, #28
 80015d4:	2288      	movs	r2, #136	; 0x88
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f005 f8bf 	bl	800675c <memset>
  if(huart->Instance==UART4)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a4a      	ldr	r2, [pc, #296]	; (800170c <HAL_UART_MspInit+0x154>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d144      	bne.n	8001672 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80015e8:	2308      	movs	r3, #8
 80015ea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 f871 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001600:	f7ff ff2e 	bl	8001460 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001604:	4b42      	ldr	r3, [pc, #264]	; (8001710 <HAL_UART_MspInit+0x158>)
 8001606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001608:	4a41      	ldr	r2, [pc, #260]	; (8001710 <HAL_UART_MspInit+0x158>)
 800160a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800160e:	6593      	str	r3, [r2, #88]	; 0x58
 8001610:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_UART_MspInit+0x158>)
 8001612:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001614:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001618:	61bb      	str	r3, [r7, #24]
 800161a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161c:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <HAL_UART_MspInit+0x158>)
 800161e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001620:	4a3b      	ldr	r2, [pc, #236]	; (8001710 <HAL_UART_MspInit+0x158>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001628:	4b39      	ldr	r3, [pc, #228]	; (8001710 <HAL_UART_MspInit+0x158>)
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001634:	2303      	movs	r3, #3
 8001636:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800164c:	2308      	movs	r3, #8
 800164e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001652:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001656:	4619      	mov	r1, r3
 8001658:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165c:	f001 f8d8 	bl	8002810 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2100      	movs	r1, #0
 8001664:	2034      	movs	r0, #52	; 0x34
 8001666:	f001 f81e 	bl	80026a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800166a:	2034      	movs	r0, #52	; 0x34
 800166c:	f001 f837 	bl	80026de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001670:	e047      	b.n	8001702 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a27      	ldr	r2, [pc, #156]	; (8001714 <HAL_UART_MspInit+0x15c>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d142      	bne.n	8001702 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800167c:	2301      	movs	r3, #1
 800167e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001680:	2300      	movs	r3, #0
 8001682:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001684:	f107 031c 	add.w	r3, r7, #28
 8001688:	4618      	mov	r0, r3
 800168a:	f003 f827 	bl	80046dc <HAL_RCCEx_PeriphCLKConfig>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001694:	f7ff fee4 	bl	8001460 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001698:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_UART_MspInit+0x158>)
 800169a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_UART_MspInit+0x158>)
 800169e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a2:	6613      	str	r3, [r2, #96]	; 0x60
 80016a4:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <HAL_UART_MspInit+0x158>)
 80016a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016b0:	4b17      	ldr	r3, [pc, #92]	; (8001710 <HAL_UART_MspInit+0x158>)
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	4a16      	ldr	r2, [pc, #88]	; (8001710 <HAL_UART_MspInit+0x158>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <HAL_UART_MspInit+0x158>)
 80016be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	60fb      	str	r3, [r7, #12]
 80016c6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80016c8:	23c0      	movs	r3, #192	; 0xc0
 80016ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	2302      	movs	r3, #2
 80016d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016da:	2303      	movs	r3, #3
 80016dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016e0:	2307      	movs	r3, #7
 80016e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80016ea:	4619      	mov	r1, r3
 80016ec:	480a      	ldr	r0, [pc, #40]	; (8001718 <HAL_UART_MspInit+0x160>)
 80016ee:	f001 f88f 	bl	8002810 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016f2:	2200      	movs	r2, #0
 80016f4:	2100      	movs	r1, #0
 80016f6:	2025      	movs	r0, #37	; 0x25
 80016f8:	f000 ffd5 	bl	80026a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016fc:	2025      	movs	r0, #37	; 0x25
 80016fe:	f000 ffee 	bl	80026de <HAL_NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	37b8      	adds	r7, #184	; 0xb8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	40004c00 	.word	0x40004c00
 8001710:	40021000 	.word	0x40021000
 8001714:	40013800 	.word	0x40013800
 8001718:	48000400 	.word	0x48000400

0800171c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001720:	e7fe      	b.n	8001720 <NMI_Handler+0x4>

08001722 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001722:	b480      	push	{r7}
 8001724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001726:	e7fe      	b.n	8001726 <HardFault_Handler+0x4>

08001728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800172c:	e7fe      	b.n	800172c <MemManage_Handler+0x4>

0800172e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172e:	b480      	push	{r7}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001732:	e7fe      	b.n	8001732 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	e7fe      	b.n	8001738 <UsageFault_Handler+0x4>

0800173a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173a:	b480      	push	{r7}
 800173c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800173e:	bf00      	nop
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr

08001748 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001768:	f000 fea2 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001774:	2020      	movs	r0, #32
 8001776:	f001 fb01 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800177a:	2040      	movs	r0, #64	; 0x40
 800177c:	f001 fafe 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001780:	2080      	movs	r0, #128	; 0x80
 8001782:	f001 fafb 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001786:	f44f 7080 	mov.w	r0, #256	; 0x100
 800178a:	f001 faf7 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800178e:	bf00      	nop
 8001790:	bd80      	pop	{r7, pc}
	...

08001794 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001798:	4802      	ldr	r0, [pc, #8]	; (80017a4 <USART1_IRQHandler+0x10>)
 800179a:	f003 fd93 	bl	80052c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	2000048c 	.word	0x2000048c

080017a8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80017ac:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017b0:	f001 fae4 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80017b4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017b8:	f001 fae0 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80017bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017c0:	f001 fadc 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80017c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017c8:	f001 fad8 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80017cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017d0:	f001 fad4 	bl	8002d7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80017dc:	4802      	ldr	r0, [pc, #8]	; (80017e8 <UART4_IRQHandler+0x10>)
 80017de:	f003 fd71 	bl	80052c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	200005d8 	.word	0x200005d8

080017ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017f4:	4a14      	ldr	r2, [pc, #80]	; (8001848 <_sbrk+0x5c>)
 80017f6:	4b15      	ldr	r3, [pc, #84]	; (800184c <_sbrk+0x60>)
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001800:	4b13      	ldr	r3, [pc, #76]	; (8001850 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d102      	bne.n	800180e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <_sbrk+0x64>)
 800180a:	4a12      	ldr	r2, [pc, #72]	; (8001854 <_sbrk+0x68>)
 800180c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800180e:	4b10      	ldr	r3, [pc, #64]	; (8001850 <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	d207      	bcs.n	800182c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800181c:	f004 ff66 	bl	80066ec <__errno>
 8001820:	4603      	mov	r3, r0
 8001822:	220c      	movs	r2, #12
 8001824:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001826:	f04f 33ff 	mov.w	r3, #4294967295
 800182a:	e009      	b.n	8001840 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800182c:	4b08      	ldr	r3, [pc, #32]	; (8001850 <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <_sbrk+0x64>)
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	4a05      	ldr	r2, [pc, #20]	; (8001850 <_sbrk+0x64>)
 800183c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800183e:	68fb      	ldr	r3, [r7, #12]
}
 8001840:	4618      	mov	r0, r3
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20018000 	.word	0x20018000
 800184c:	00000400 	.word	0x00000400
 8001850:	20000418 	.word	0x20000418
 8001854:	20000748 	.word	0x20000748

08001858 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800185c:	4b06      	ldr	r3, [pc, #24]	; (8001878 <SystemInit+0x20>)
 800185e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <SystemInit+0x20>)
 8001864:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001868:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800187c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001880:	f7ff ffea 	bl	8001858 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001886:	490d      	ldr	r1, [pc, #52]	; (80018bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <LoopForever+0xe>)
  movs r3, #0
 800188a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800188c:	e002      	b.n	8001894 <LoopCopyDataInit>

0800188e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800188e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001892:	3304      	adds	r3, #4

08001894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001898:	d3f9      	bcc.n	800188e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800189c:	4c0a      	ldr	r4, [pc, #40]	; (80018c8 <LoopForever+0x16>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a0:	e001      	b.n	80018a6 <LoopFillZerobss>

080018a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018a4:	3204      	adds	r2, #4

080018a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a8:	d3fb      	bcc.n	80018a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018aa:	f004 ff25 	bl	80066f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ae:	f7ff f8a1 	bl	80009f4 <main>

080018b2 <LoopForever>:

LoopForever:
    b LoopForever
 80018b2:	e7fe      	b.n	80018b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018bc:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 80018c0:	08007160 	.word	0x08007160
  ldr r2, =_sbss
 80018c4:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 80018c8:	20000748 	.word	0x20000748

080018cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018cc:	e7fe      	b.n	80018cc <ADC1_2_IRQHandler>
	...

080018d0 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <I2Cx_MspInit+0xa8>)
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	4a26      	ldr	r2, [pc, #152]	; (8001978 <I2Cx_MspInit+0xa8>)
 80018de:	f043 0302 	orr.w	r3, r3, #2
 80018e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e4:	4b24      	ldr	r3, [pc, #144]	; (8001978 <I2Cx_MspInit+0xa8>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80018f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018f6:	2312      	movs	r3, #18
 80018f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018fe:	2303      	movs	r3, #3
 8001900:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001902:	2304      	movs	r3, #4
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	481b      	ldr	r0, [pc, #108]	; (800197c <I2Cx_MspInit+0xac>)
 800190e:	f000 ff7f 	bl	8002810 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4818      	ldr	r0, [pc, #96]	; (800197c <I2Cx_MspInit+0xac>)
 800191a:	f000 ff79 	bl	8002810 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <I2Cx_MspInit+0xa8>)
 8001920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001922:	4a15      	ldr	r2, [pc, #84]	; (8001978 <I2Cx_MspInit+0xa8>)
 8001924:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001928:	6593      	str	r3, [r2, #88]	; 0x58
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <I2Cx_MspInit+0xa8>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <I2Cx_MspInit+0xa8>)
 8001938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <I2Cx_MspInit+0xa8>)
 800193c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001940:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <I2Cx_MspInit+0xa8>)
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <I2Cx_MspInit+0xa8>)
 8001948:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800194c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800194e:	2200      	movs	r2, #0
 8001950:	210f      	movs	r1, #15
 8001952:	2021      	movs	r0, #33	; 0x21
 8001954:	f000 fea7 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001958:	2021      	movs	r0, #33	; 0x21
 800195a:	f000 fec0 	bl	80026de <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	210f      	movs	r1, #15
 8001962:	2022      	movs	r0, #34	; 0x22
 8001964:	f000 fe9f 	bl	80026a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001968:	2022      	movs	r0, #34	; 0x22
 800196a:	f000 feb8 	bl	80026de <HAL_NVIC_EnableIRQ>
}
 800196e:	bf00      	nop
 8001970:	3728      	adds	r7, #40	; 0x28
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	48000400 	.word	0x48000400

08001980 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	4a12      	ldr	r2, [pc, #72]	; (80019d4 <I2Cx_Init+0x54>)
 800198c:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a11      	ldr	r2, [pc, #68]	; (80019d8 <I2Cx_Init+0x58>)
 8001992:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f7ff ff89 	bl	80018d0 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f001 f9ff 	bl	8002dc2 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80019c4:	2100      	movs	r1, #0
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f001 ff8e 	bl	80038e8 <HAL_I2CEx_ConfigAnalogFilter>
}
 80019cc:	bf00      	nop
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	40005800 	.word	0x40005800
 80019d8:	00702681 	.word	0x00702681

080019dc <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af04      	add	r7, sp, #16
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	4608      	mov	r0, r1
 80019e6:	4611      	mov	r1, r2
 80019e8:	461a      	mov	r2, r3
 80019ea:	4603      	mov	r3, r0
 80019ec:	72fb      	strb	r3, [r7, #11]
 80019ee:	460b      	mov	r3, r1
 80019f0:	813b      	strh	r3, [r7, #8]
 80019f2:	4613      	mov	r3, r2
 80019f4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019fa:	7afb      	ldrb	r3, [r7, #11]
 80019fc:	b299      	uxth	r1, r3
 80019fe:	88f8      	ldrh	r0, [r7, #6]
 8001a00:	893a      	ldrh	r2, [r7, #8]
 8001a02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	6a3b      	ldr	r3, [r7, #32]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4603      	mov	r3, r0
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f001 fba8 	bl	8003168 <HAL_I2C_Mem_Read>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a1c:	7dfb      	ldrb	r3, [r7, #23]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d004      	beq.n	8001a2c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	4619      	mov	r1, r3
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f832 	bl	8001a90 <I2Cx_Error>
  }
  return status;
 8001a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3718      	adds	r7, #24
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b08a      	sub	sp, #40	; 0x28
 8001a3a:	af04      	add	r7, sp, #16
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	4608      	mov	r0, r1
 8001a40:	4611      	mov	r1, r2
 8001a42:	461a      	mov	r2, r3
 8001a44:	4603      	mov	r3, r0
 8001a46:	72fb      	strb	r3, [r7, #11]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	813b      	strh	r3, [r7, #8]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a54:	7afb      	ldrb	r3, [r7, #11]
 8001a56:	b299      	uxth	r1, r3
 8001a58:	88f8      	ldrh	r0, [r7, #6]
 8001a5a:	893a      	ldrh	r2, [r7, #8]
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	9302      	str	r3, [sp, #8]
 8001a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	6a3b      	ldr	r3, [r7, #32]
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f001 fa67 	bl	8002f40 <HAL_I2C_Mem_Write>
 8001a72:	4603      	mov	r3, r0
 8001a74:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d004      	beq.n	8001a86 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001a7c:	7afb      	ldrb	r3, [r7, #11]
 8001a7e:	4619      	mov	r1, r3
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f000 f805 	bl	8001a90 <I2Cx_Error>
  }
  return status;
 8001a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f001 fa1f 	bl	8002ee0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff6c 	bl	8001980 <I2Cx_Init>
}
 8001aa8:	bf00      	nop
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001ab4:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <SENSOR_IO_Init+0x10>)
 8001ab6:	f7ff ff63 	bl	8001980 <I2Cx_Init>
}
 8001aba:	bf00      	nop
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	200006e0 	.word	0x200006e0

08001ac4 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af02      	add	r7, sp, #8
 8001aca:	4603      	mov	r3, r0
 8001acc:	71fb      	strb	r3, [r7, #7]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	71bb      	strb	r3, [r7, #6]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001ad6:	79bb      	ldrb	r3, [r7, #6]
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	79f9      	ldrb	r1, [r7, #7]
 8001adc:	2301      	movs	r3, #1
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	1d7b      	adds	r3, r7, #5
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	4803      	ldr	r0, [pc, #12]	; (8001af4 <SENSOR_IO_Write+0x30>)
 8001ae8:	f7ff ffa5 	bl	8001a36 <I2Cx_WriteMultiple>
}
 8001aec:	bf00      	nop
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	200006e0 	.word	0x200006e0

08001af8 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af02      	add	r7, sp, #8
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	71fb      	strb	r3, [r7, #7]
 8001b04:	4613      	mov	r3, r2
 8001b06:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b0c:	79bb      	ldrb	r3, [r7, #6]
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	79f9      	ldrb	r1, [r7, #7]
 8001b12:	2301      	movs	r3, #1
 8001b14:	9301      	str	r3, [sp, #4]
 8001b16:	f107 030f 	add.w	r3, r7, #15
 8001b1a:	9300      	str	r3, [sp, #0]
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	4804      	ldr	r0, [pc, #16]	; (8001b30 <SENSOR_IO_Read+0x38>)
 8001b20:	f7ff ff5c 	bl	80019dc <I2Cx_ReadMultiple>

  return read_value;
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200006e0 	.word	0x200006e0

08001b34 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af02      	add	r7, sp, #8
 8001b3a:	603a      	str	r2, [r7, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	460b      	mov	r3, r1
 8001b44:	71bb      	strb	r3, [r7, #6]
 8001b46:	4613      	mov	r3, r2
 8001b48:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001b4a:	79bb      	ldrb	r3, [r7, #6]
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	79f9      	ldrb	r1, [r7, #7]
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2301      	movs	r3, #1
 8001b5a:	4804      	ldr	r0, [pc, #16]	; (8001b6c <SENSOR_IO_ReadMultiple+0x38>)
 8001b5c:	f7ff ff3e 	bl	80019dc <I2Cx_ReadMultiple>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b29b      	uxth	r3, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200006e0 	.word	0x200006e0

08001b70 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001b76:	2300      	movs	r3, #0
 8001b78:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <BSP_ACCELERO_Init+0x74>)
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	4798      	blx	r3
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b6a      	cmp	r3, #106	; 0x6a
 8001b88:	d002      	beq.n	8001b90 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	73fb      	strb	r3, [r7, #15]
 8001b8e:	e024      	b.n	8001bda <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001b90:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <BSP_ACCELERO_Init+0x78>)
 8001b92:	4a14      	ldr	r2, [pc, #80]	; (8001be4 <BSP_ACCELERO_Init+0x74>)
 8001b94:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001b96:	2330      	movs	r3, #48	; 0x30
 8001b98:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001ba2:	2340      	movs	r3, #64	; 0x40
 8001ba4:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001bae:	797a      	ldrb	r2, [r7, #5]
 8001bb0:	7abb      	ldrb	r3, [r7, #10]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001bb8:	7a3b      	ldrb	r3, [r7, #8]
 8001bba:	f043 0304 	orr.w	r3, r3, #4
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	021b      	lsls	r3, r3, #8
 8001bc2:	b21a      	sxth	r2, r3
 8001bc4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	b21b      	sxth	r3, r3
 8001bcc:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001bce:	4b06      	ldr	r3, [pc, #24]	; (8001be8 <BSP_ACCELERO_Init+0x78>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	89ba      	ldrh	r2, [r7, #12]
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4798      	blx	r3
  }  

  return ret;
 8001bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	200000ec 	.word	0x200000ec
 8001be8:	2000041c 	.word	0x2000041c

08001bec <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d009      	beq.n	8001c10 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001bfc:	4b06      	ldr	r3, [pc, #24]	; (8001c18 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001c06:	4b04      	ldr	r3, [pc, #16]	; (8001c18 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	4798      	blx	r3
    }
  }
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	2000041c 	.word	0x2000041c

08001c1c <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b082      	sub	sp, #8
 8001c20:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001c22:	4b0c      	ldr	r3, [pc, #48]	; (8001c54 <BSP_HSENSOR_Init+0x38>)
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	20be      	movs	r0, #190	; 0xbe
 8001c28:	4798      	blx	r3
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2bbc      	cmp	r3, #188	; 0xbc
 8001c2e:	d002      	beq.n	8001c36 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	e009      	b.n	8001c4a <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001c36:	4b08      	ldr	r3, [pc, #32]	; (8001c58 <BSP_HSENSOR_Init+0x3c>)
 8001c38:	4a06      	ldr	r2, [pc, #24]	; (8001c54 <BSP_HSENSOR_Init+0x38>)
 8001c3a:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001c3c:	4b06      	ldr	r3, [pc, #24]	; (8001c58 <BSP_HSENSOR_Init+0x3c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	20be      	movs	r0, #190	; 0xbe
 8001c44:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001c4a:	687b      	ldr	r3, [r7, #4]
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3708      	adds	r7, #8
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	200000c4 	.word	0x200000c4
 8001c58:	20000420 	.word	0x20000420

08001c5c <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	20be      	movs	r0, #190	; 0xbe
 8001c68:	4798      	blx	r3
 8001c6a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000420 	.word	0x20000420

08001c78 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <BSP_PSENSOR_Init+0x38>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	20ba      	movs	r0, #186	; 0xba
 8001c84:	4798      	blx	r3
 8001c86:	4603      	mov	r3, r0
 8001c88:	2bb1      	cmp	r3, #177	; 0xb1
 8001c8a:	d002      	beq.n	8001c92 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	e009      	b.n	8001ca6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <BSP_PSENSOR_Init+0x3c>)
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <BSP_PSENSOR_Init+0x38>)
 8001c96:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <BSP_PSENSOR_Init+0x3c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	20ba      	movs	r0, #186	; 0xba
 8001ca0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001ca6:	687b      	ldr	r3, [r7, #4]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200000e0 	.word	0x200000e0
 8001cb4:	20000424 	.word	0x20000424

08001cb8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001cbc:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <BSP_PSENSOR_ReadPressure+0x18>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	20ba      	movs	r0, #186	; 0xba
 8001cc4:	4798      	blx	r3
 8001cc6:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cca:	eeb0 0a67 	vmov.f32	s0, s15
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	20000424 	.word	0x20000424

08001cd4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <BSP_TSENSOR_Init+0x30>)
 8001ce0:	4a09      	ldr	r2, [pc, #36]	; (8001d08 <BSP_TSENSOR_Init+0x34>)
 8001ce2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001ce4:	f7ff fee4 	bl	8001ab0 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <BSP_TSENSOR_Init+0x30>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2100      	movs	r1, #0
 8001cf0:	20be      	movs	r0, #190	; 0xbe
 8001cf2:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001cf8:	79fb      	ldrb	r3, [r7, #7]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000428 	.word	0x20000428
 8001d08:	200000d0 	.word	0x200000d0

08001d0c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001d10:	4b04      	ldr	r3, [pc, #16]	; (8001d24 <BSP_TSENSOR_ReadTemp+0x18>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	20be      	movs	r0, #190	; 0xbe
 8001d18:	4798      	blx	r3
 8001d1a:	eef0 7a40 	vmov.f32	s15, s0
}
 8001d1e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000428 	.word	0x20000428

08001d28 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	4603      	mov	r3, r0
 8001d30:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001d32:	88fb      	ldrh	r3, [r7, #6]
 8001d34:	b2db      	uxtb	r3, r3
 8001d36:	2120      	movs	r1, #32
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fedd 	bl	8001af8 <SENSOR_IO_Read>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	f023 0304 	bic.w	r3, r3, #4
 8001d48:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	f043 0304 	orr.w	r3, r3, #4
 8001d50:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	f023 0303 	bic.w	r3, r3, #3
 8001d58:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001d5a:	7bfb      	ldrb	r3, [r7, #15]
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001d62:	7bfb      	ldrb	r3, [r7, #15]
 8001d64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d68:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	7bfa      	ldrb	r2, [r7, #15]
 8001d70:	2120      	movs	r1, #32
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fea6 	bl	8001ac4 <SENSOR_IO_Write>
}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001d8e:	f7ff fe8f 	bl	8001ab0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001d92:	88fb      	ldrh	r3, [r7, #6]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	210f      	movs	r1, #15
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7ff fead 	bl	8001af8 <SENSOR_IO_Read>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001db6:	88fb      	ldrh	r3, [r7, #6]
 8001db8:	b2d8      	uxtb	r0, r3
 8001dba:	f107 020c 	add.w	r2, r7, #12
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	21b0      	movs	r1, #176	; 0xb0
 8001dc2:	f7ff feb7 	bl	8001b34 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001dc6:	7b3b      	ldrb	r3, [r7, #12]
 8001dc8:	085b      	lsrs	r3, r3, #1
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001dce:	7b7b      	ldrb	r3, [r7, #13]
 8001dd0:	085b      	lsrs	r3, r3, #1
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	b2d8      	uxtb	r0, r3
 8001dda:	f107 020c 	add.w	r2, r7, #12
 8001dde:	2302      	movs	r3, #2
 8001de0:	21b6      	movs	r1, #182	; 0xb6
 8001de2:	f7ff fea7 	bl	8001b34 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001de6:	7b7b      	ldrb	r3, [r7, #13]
 8001de8:	021b      	lsls	r3, r3, #8
 8001dea:	b21a      	sxth	r2, r3
 8001dec:	7b3b      	ldrb	r3, [r7, #12]
 8001dee:	b21b      	sxth	r3, r3
 8001df0:	4313      	orrs	r3, r2
 8001df2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001df4:	88fb      	ldrh	r3, [r7, #6]
 8001df6:	b2d8      	uxtb	r0, r3
 8001df8:	f107 020c 	add.w	r2, r7, #12
 8001dfc:	2302      	movs	r3, #2
 8001dfe:	21ba      	movs	r1, #186	; 0xba
 8001e00:	f7ff fe98 	bl	8001b34 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e04:	7b7b      	ldrb	r3, [r7, #13]
 8001e06:	021b      	lsls	r3, r3, #8
 8001e08:	b21a      	sxth	r2, r3
 8001e0a:	7b3b      	ldrb	r3, [r7, #12]
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001e12:	88fb      	ldrh	r3, [r7, #6]
 8001e14:	b2d8      	uxtb	r0, r3
 8001e16:	f107 020c 	add.w	r2, r7, #12
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	21a8      	movs	r1, #168	; 0xa8
 8001e1e:	f7ff fe89 	bl	8001b34 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e22:	7b7b      	ldrb	r3, [r7, #13]
 8001e24:	021b      	lsls	r3, r3, #8
 8001e26:	b21a      	sxth	r2, r3
 8001e28:	7b3b      	ldrb	r3, [r7, #12]
 8001e2a:	b21b      	sxth	r3, r3
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001e30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	ee07 3a90 	vmov	s15, r3
 8001e3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e42:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e4a:	1ad3      	subs	r3, r2, r3
 8001e4c:	ee07 3a90 	vmov	s15, r3
 8001e50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e58:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	ee07 3a90 	vmov	s15, r3
 8001e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e72:	ee07 3a90 	vmov	s15, r3
 8001e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001e82:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001e92:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e96:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001edc <HTS221_H_ReadHumidity+0x130>
 8001e9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea2:	dd01      	ble.n	8001ea8 <HTS221_H_ReadHumidity+0xfc>
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HTS221_H_ReadHumidity+0x134>)
 8001ea6:	e00a      	b.n	8001ebe <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	d502      	bpl.n	8001ebc <HTS221_H_ReadHumidity+0x110>
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	e000      	b.n	8001ebe <HTS221_H_ReadHumidity+0x112>
 8001ebc:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001ebe:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001ec0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ec4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ec8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ecc:	eef0 7a66 	vmov.f32	s15, s13
}
 8001ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed4:	3720      	adds	r7, #32
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	447a0000 	.word	0x447a0000
 8001ee0:	447a0000 	.word	0x447a0000

08001ee4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	6039      	str	r1, [r7, #0]
 8001eee:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	2120      	movs	r1, #32
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fdfe 	bl	8001af8 <SENSOR_IO_Read>
 8001efc:	4603      	mov	r3, r0
 8001efe:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f00:	7bfb      	ldrb	r3, [r7, #15]
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	f043 0304 	orr.w	r3, r3, #4
 8001f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	f023 0303 	bic.w	r3, r3, #3
 8001f16:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
 8001f1a:	f043 0301 	orr.w	r3, r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001f20:	7bfb      	ldrb	r3, [r7, #15]
 8001f22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f26:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001f28:	88fb      	ldrh	r3, [r7, #6]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	7bfa      	ldrb	r2, [r7, #15]
 8001f2e:	2120      	movs	r1, #32
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7ff fdc7 	bl	8001ac4 <SENSOR_IO_Write>
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b088      	sub	sp, #32
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	b2d8      	uxtb	r0, r3
 8001f4c:	f107 0208 	add.w	r2, r7, #8
 8001f50:	2302      	movs	r3, #2
 8001f52:	21b2      	movs	r1, #178	; 0xb2
 8001f54:	f7ff fdee 	bl	8001b34 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f58:	88fb      	ldrh	r3, [r7, #6]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2135      	movs	r1, #53	; 0x35
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fdca 	bl	8001af8 <SENSOR_IO_Read>
 8001f64:	4603      	mov	r3, r0
 8001f66:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f68:	7ffb      	ldrb	r3, [r7, #31]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f72:	b21a      	sxth	r2, r3
 8001f74:	7a3b      	ldrb	r3, [r7, #8]
 8001f76:	b21b      	sxth	r3, r3
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f7c:	7ffb      	ldrb	r3, [r7, #31]
 8001f7e:	019b      	lsls	r3, r3, #6
 8001f80:	b21b      	sxth	r3, r3
 8001f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	7a7b      	ldrb	r3, [r7, #9]
 8001f8a:	b21b      	sxth	r3, r3
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f94:	10db      	asrs	r3, r3, #3
 8001f96:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001f98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001f9c:	10db      	asrs	r3, r3, #3
 8001f9e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001fa0:	88fb      	ldrh	r3, [r7, #6]
 8001fa2:	b2d8      	uxtb	r0, r3
 8001fa4:	f107 0208 	add.w	r2, r7, #8
 8001fa8:	2304      	movs	r3, #4
 8001faa:	21bc      	movs	r1, #188	; 0xbc
 8001fac:	f7ff fdc2 	bl	8001b34 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fb0:	7a7b      	ldrb	r3, [r7, #9]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	7a3b      	ldrb	r3, [r7, #8]
 8001fb8:	b21b      	sxth	r3, r3
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fbe:	7afb      	ldrb	r3, [r7, #11]
 8001fc0:	021b      	lsls	r3, r3, #8
 8001fc2:	b21a      	sxth	r2, r3
 8001fc4:	7abb      	ldrb	r3, [r7, #10]
 8001fc6:	b21b      	sxth	r3, r3
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	b2d8      	uxtb	r0, r3
 8001fd0:	f107 0208 	add.w	r2, r7, #8
 8001fd4:	2302      	movs	r3, #2
 8001fd6:	21aa      	movs	r1, #170	; 0xaa
 8001fd8:	f7ff fdac 	bl	8001b34 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fdc:	7a7b      	ldrb	r3, [r7, #9]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	b21a      	sxth	r2, r3
 8001fe2:	7a3b      	ldrb	r3, [r7, #8]
 8001fe4:	b21b      	sxth	r3, r3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001fea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001fee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	ee07 3a90 	vmov	s15, r3
 8001ff8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ffc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002000:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	ee07 3a90 	vmov	s15, r3
 800200a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800200e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002012:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002016:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	ee07 3a90 	vmov	s15, r3
 8002020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002024:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002028:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800202c:	ee07 3a90 	vmov	s15, r3
 8002030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	ee07 3a90 	vmov	s15, r3
}
 8002042:	eeb0 0a67 	vmov.f32	s0, s15
 8002046:	3720      	adds	r7, #32
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	4618      	mov	r0, r3
 800205a:	f000 f87b 	bl	8002154 <LPS22HB_Init>
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002066:	b580      	push	{r7, lr}
 8002068:	b084      	sub	sp, #16
 800206a:	af00      	add	r7, sp, #0
 800206c:	4603      	mov	r3, r0
 800206e:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002074:	f7ff fd1c 	bl	8001ab0 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002078:	88fb      	ldrh	r3, [r7, #6]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	210f      	movs	r1, #15
 800207e:	4618      	mov	r0, r3
 8002080:	f7ff fd3a 	bl	8001af8 <SENSOR_IO_Read>
 8002084:	4603      	mov	r3, r0
 8002086:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b087      	sub	sp, #28
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800209e:	2300      	movs	r3, #0
 80020a0:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	74fb      	strb	r3, [r7, #19]
 80020a6:	e013      	b.n	80020d0 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80020a8:	88fb      	ldrh	r3, [r7, #6]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	3328      	adds	r3, #40	; 0x28
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	7cfc      	ldrb	r4, [r7, #19]
 80020b4:	4619      	mov	r1, r3
 80020b6:	4610      	mov	r0, r2
 80020b8:	f7ff fd1e 	bl	8001af8 <SENSOR_IO_Read>
 80020bc:	4603      	mov	r3, r0
 80020be:	461a      	mov	r2, r3
 80020c0:	f107 0318 	add.w	r3, r7, #24
 80020c4:	4423      	add	r3, r4
 80020c6:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80020ca:	7cfb      	ldrb	r3, [r7, #19]
 80020cc:	3301      	adds	r3, #1
 80020ce:	74fb      	strb	r3, [r7, #19]
 80020d0:	7cfb      	ldrb	r3, [r7, #19]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d9e8      	bls.n	80020a8 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80020d6:	2300      	movs	r3, #0
 80020d8:	74fb      	strb	r3, [r7, #19]
 80020da:	e010      	b.n	80020fe <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	f107 0218 	add.w	r2, r7, #24
 80020e2:	4413      	add	r3, r2
 80020e4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020e8:	461a      	mov	r2, r3
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80020f8:	7cfb      	ldrb	r3, [r7, #19]
 80020fa:	3301      	adds	r3, #1
 80020fc:	74fb      	strb	r3, [r7, #19]
 80020fe:	7cfb      	ldrb	r3, [r7, #19]
 8002100:	2b02      	cmp	r3, #2
 8002102:	d9eb      	bls.n	80020dc <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002114:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2264      	movs	r2, #100	; 0x64
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	2b00      	cmp	r3, #0
 8002124:	da01      	bge.n	800212a <LPS22HB_P_ReadPressure+0x96>
 8002126:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800212a:	131b      	asrs	r3, r3, #12
 800212c:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	ee07 3a90 	vmov	s15, r3
 8002134:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002138:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8002150 <LPS22HB_P_ReadPressure+0xbc>
 800213c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002140:	eef0 7a66 	vmov.f32	s15, s13
}
 8002144:	eeb0 0a67 	vmov.f32	s0, s15
 8002148:	371c      	adds	r7, #28
 800214a:	46bd      	mov	sp, r7
 800214c:	bd90      	pop	{r4, r7, pc}
 800214e:	bf00      	nop
 8002150:	42c80000 	.word	0x42c80000

08002154 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800215e:	88fb      	ldrh	r3, [r7, #6]
 8002160:	b2db      	uxtb	r3, r3
 8002162:	211a      	movs	r1, #26
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff fcc7 	bl	8001af8 <SENSOR_IO_Read>
 800216a:	4603      	mov	r3, r0
 800216c:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
 8002170:	f023 0301 	bic.w	r3, r3, #1
 8002174:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002176:	7bfb      	ldrb	r3, [r7, #15]
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800217e:	88fb      	ldrh	r3, [r7, #6]
 8002180:	b2db      	uxtb	r3, r3
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	211a      	movs	r1, #26
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fc9c 	bl	8001ac4 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800218c:	88fb      	ldrh	r3, [r7, #6]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2110      	movs	r1, #16
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fcb0 	bl	8001af8 <SENSOR_IO_Read>
 8002198:	4603      	mov	r3, r0
 800219a:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800219c:	7bfb      	ldrb	r3, [r7, #15]
 800219e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021a2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021aa:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	f023 0302 	bic.w	r3, r3, #2
 80021b2:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	b2db      	uxtb	r3, r3
 80021c0:	7bfa      	ldrb	r2, [r7, #15]
 80021c2:	2110      	movs	r1, #16
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fc7d 	bl	8001ac4 <SENSOR_IO_Write>
}  
 80021ca:	bf00      	nop
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b084      	sub	sp, #16
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	4603      	mov	r3, r0
 80021da:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021dc:	2300      	movs	r3, #0
 80021de:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80021e0:	2110      	movs	r1, #16
 80021e2:	20d4      	movs	r0, #212	; 0xd4
 80021e4:	f7ff fc88 	bl	8001af8 <SENSOR_IO_Read>
 80021e8:	4603      	mov	r3, r0
 80021ea:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80021f0:	7bbb      	ldrb	r3, [r7, #14]
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80021f8:	7bba      	ldrb	r2, [r7, #14]
 80021fa:	7bfb      	ldrb	r3, [r7, #15]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8002200:	7bbb      	ldrb	r3, [r7, #14]
 8002202:	461a      	mov	r2, r3
 8002204:	2110      	movs	r1, #16
 8002206:	20d4      	movs	r0, #212	; 0xd4
 8002208:	f7ff fc5c 	bl	8001ac4 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800220c:	2112      	movs	r1, #18
 800220e:	20d4      	movs	r0, #212	; 0xd4
 8002210:	f7ff fc72 	bl	8001af8 <SENSOR_IO_Read>
 8002214:	4603      	mov	r3, r0
 8002216:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002218:	88fb      	ldrh	r3, [r7, #6]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	b29b      	uxth	r3, r3
 800221e:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002226:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002228:	7bba      	ldrb	r2, [r7, #14]
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	4313      	orrs	r3, r2
 800222e:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8002230:	7bbb      	ldrb	r3, [r7, #14]
 8002232:	461a      	mov	r2, r3
 8002234:	2112      	movs	r1, #18
 8002236:	20d4      	movs	r0, #212	; 0xd4
 8002238:	f7ff fc44 	bl	8001ac4 <SENSOR_IO_Write>
}
 800223c:	bf00      	nop
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800224a:	2300      	movs	r3, #0
 800224c:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800224e:	2110      	movs	r1, #16
 8002250:	20d4      	movs	r0, #212	; 0xd4
 8002252:	f7ff fc51 	bl	8001af8 <SENSOR_IO_Read>
 8002256:	4603      	mov	r3, r0
 8002258:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800225a:	79fb      	ldrb	r3, [r7, #7]
 800225c:	f003 030f 	and.w	r3, r3, #15
 8002260:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8002262:	79fb      	ldrb	r3, [r7, #7]
 8002264:	461a      	mov	r2, r3
 8002266:	2110      	movs	r1, #16
 8002268:	20d4      	movs	r0, #212	; 0xd4
 800226a:	f7ff fc2b 	bl	8001ac4 <SENSOR_IO_Write>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002276:	b580      	push	{r7, lr}
 8002278:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800227a:	f7ff fc19 	bl	8001ab0 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800227e:	210f      	movs	r1, #15
 8002280:	20d4      	movs	r0, #212	; 0xd4
 8002282:	f7ff fc39 	bl	8001af8 <SENSOR_IO_Read>
 8002286:	4603      	mov	r3, r0
}
 8002288:	4618      	mov	r0, r3
 800228a:	bd80      	pop	{r7, pc}

0800228c <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	4603      	mov	r3, r0
 8002294:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002296:	2300      	movs	r3, #0
 8002298:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800229a:	2115      	movs	r1, #21
 800229c:	20d4      	movs	r0, #212	; 0xd4
 800229e:	f7ff fc2b 	bl	8001af8 <SENSOR_IO_Read>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	f023 0310 	bic.w	r3, r3, #16
 80022ac:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	f043 0310 	orr.w	r3, r3, #16
 80022ba:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	461a      	mov	r2, r3
 80022c0:	2115      	movs	r1, #21
 80022c2:	20d4      	movs	r0, #212	; 0xd4
 80022c4:	f7ff fbfe 	bl	8001ac4 <SENSOR_IO_Write>
}
 80022c8:	bf00      	nop
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b088      	sub	sp, #32
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80022e0:	f04f 0300 	mov.w	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80022e6:	2110      	movs	r1, #16
 80022e8:	20d4      	movs	r0, #212	; 0xd4
 80022ea:	f7ff fc05 	bl	8001af8 <SENSOR_IO_Read>
 80022ee:	4603      	mov	r3, r0
 80022f0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80022f2:	f107 0208 	add.w	r2, r7, #8
 80022f6:	2306      	movs	r3, #6
 80022f8:	2128      	movs	r1, #40	; 0x28
 80022fa:	20d4      	movs	r0, #212	; 0xd4
 80022fc:	f7ff fc1a 	bl	8001b34 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002300:	2300      	movs	r3, #0
 8002302:	77fb      	strb	r3, [r7, #31]
 8002304:	e01f      	b.n	8002346 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002306:	7ffb      	ldrb	r3, [r7, #31]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	3301      	adds	r3, #1
 800230c:	f107 0220 	add.w	r2, r7, #32
 8002310:	4413      	add	r3, r2
 8002312:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002316:	b29b      	uxth	r3, r3
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	b29a      	uxth	r2, r3
 800231c:	7ffb      	ldrb	r3, [r7, #31]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	f107 0120 	add.w	r1, r7, #32
 8002324:	440b      	add	r3, r1
 8002326:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800232a:	b29b      	uxth	r3, r3
 800232c:	4413      	add	r3, r2
 800232e:	b29a      	uxth	r2, r3
 8002330:	7ffb      	ldrb	r3, [r7, #31]
 8002332:	b212      	sxth	r2, r2
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	f107 0120 	add.w	r1, r7, #32
 800233a:	440b      	add	r3, r1
 800233c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002340:	7ffb      	ldrb	r3, [r7, #31]
 8002342:	3301      	adds	r3, #1
 8002344:	77fb      	strb	r3, [r7, #31]
 8002346:	7ffb      	ldrb	r3, [r7, #31]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d9dc      	bls.n	8002306 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800234c:	7dfb      	ldrb	r3, [r7, #23]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d828      	bhi.n	80023a8 <LSM6DSL_AccReadXYZ+0xd8>
 8002356:	a201      	add	r2, pc, #4	; (adr r2, 800235c <LSM6DSL_AccReadXYZ+0x8c>)
 8002358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235c:	08002391 	.word	0x08002391
 8002360:	080023a9 	.word	0x080023a9
 8002364:	080023a9 	.word	0x080023a9
 8002368:	080023a9 	.word	0x080023a9
 800236c:	080023a3 	.word	0x080023a3
 8002370:	080023a9 	.word	0x080023a9
 8002374:	080023a9 	.word	0x080023a9
 8002378:	080023a9 	.word	0x080023a9
 800237c:	08002397 	.word	0x08002397
 8002380:	080023a9 	.word	0x080023a9
 8002384:	080023a9 	.word	0x080023a9
 8002388:	080023a9 	.word	0x080023a9
 800238c:	0800239d 	.word	0x0800239d
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <LSM6DSL_AccReadXYZ+0x128>)
 8002392:	61bb      	str	r3, [r7, #24]
    break;
 8002394:	e008      	b.n	80023a8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002396:	4b19      	ldr	r3, [pc, #100]	; (80023fc <LSM6DSL_AccReadXYZ+0x12c>)
 8002398:	61bb      	str	r3, [r7, #24]
    break;
 800239a:	e005      	b.n	80023a8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800239c:	4b18      	ldr	r3, [pc, #96]	; (8002400 <LSM6DSL_AccReadXYZ+0x130>)
 800239e:	61bb      	str	r3, [r7, #24]
    break;
 80023a0:	e002      	b.n	80023a8 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <LSM6DSL_AccReadXYZ+0x134>)
 80023a4:	61bb      	str	r3, [r7, #24]
    break;    
 80023a6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80023a8:	2300      	movs	r3, #0
 80023aa:	77fb      	strb	r3, [r7, #31]
 80023ac:	e01b      	b.n	80023e6 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	f107 0220 	add.w	r2, r7, #32
 80023b6:	4413      	add	r3, r2
 80023b8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023cc:	7ffb      	ldrb	r3, [r7, #31]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	4413      	add	r3, r2
 80023d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023d8:	ee17 2a90 	vmov	r2, s15
 80023dc:	b212      	sxth	r2, r2
 80023de:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80023e0:	7ffb      	ldrb	r3, [r7, #31]
 80023e2:	3301      	adds	r3, #1
 80023e4:	77fb      	strb	r3, [r7, #31]
 80023e6:	7ffb      	ldrb	r3, [r7, #31]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d9e0      	bls.n	80023ae <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80023ec:	bf00      	nop
 80023ee:	bf00      	nop
 80023f0:	3720      	adds	r7, #32
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	3d79db23 	.word	0x3d79db23
 80023fc:	3df9db23 	.word	0x3df9db23
 8002400:	3e79db23 	.word	0x3e79db23
 8002404:	3ef9db23 	.word	0x3ef9db23

08002408 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800240e:	2300      	movs	r3, #0
 8002410:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002412:	2003      	movs	r0, #3
 8002414:	f000 f93c 	bl	8002690 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002418:	2000      	movs	r0, #0
 800241a:	f000 f80d 	bl	8002438 <HAL_InitTick>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	71fb      	strb	r3, [r7, #7]
 8002428:	e001      	b.n	800242e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800242a:	f7ff f81f 	bl	800146c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800242e:	79fb      	ldrb	r3, [r7, #7]
}
 8002430:	4618      	mov	r0, r3
 8002432:	3708      	adds	r7, #8
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_InitTick+0x6c>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d023      	beq.n	8002494 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800244c:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_InitTick+0x70>)
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	4b14      	ldr	r3, [pc, #80]	; (80024a4 <HAL_InitTick+0x6c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4619      	mov	r1, r3
 8002456:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800245a:	fbb3 f3f1 	udiv	r3, r3, r1
 800245e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002462:	4618      	mov	r0, r3
 8002464:	f000 f949 	bl	80026fa <HAL_SYSTICK_Config>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10f      	bne.n	800248e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2b0f      	cmp	r3, #15
 8002472:	d809      	bhi.n	8002488 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002474:	2200      	movs	r2, #0
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f000 f913 	bl	80026a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <HAL_InitTick+0x74>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	e007      	b.n	8002498 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	73fb      	strb	r3, [r7, #15]
 800248c:	e004      	b.n	8002498 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	73fb      	strb	r3, [r7, #15]
 8002492:	e001      	b.n	8002498 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002498:	7bfb      	ldrb	r3, [r7, #15]
}
 800249a:	4618      	mov	r0, r3
 800249c:	3710      	adds	r7, #16
 800249e:	46bd      	mov	sp, r7
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000124 	.word	0x20000124
 80024a8:	200000c0 	.word	0x200000c0
 80024ac:	20000120 	.word	0x20000120

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000124 	.word	0x20000124
 80024d4:	20000734 	.word	0x20000734

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000734 	.word	0x20000734

080024f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b085      	sub	sp, #20
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f003 0307 	and.w	r3, r3, #7
 80024fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800250c:	4013      	ands	r3, r2
 800250e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002518:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800251c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002520:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002522:	4a04      	ldr	r2, [pc, #16]	; (8002534 <__NVIC_SetPriorityGrouping+0x44>)
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	60d3      	str	r3, [r2, #12]
}
 8002528:	bf00      	nop
 800252a:	3714      	adds	r7, #20
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr
 8002534:	e000ed00 	.word	0xe000ed00

08002538 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <__NVIC_EnableIRQ+0x38>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	; (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	; (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3b01      	subs	r3, #1
 8002658:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800265c:	d301      	bcc.n	8002662 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800265e:	2301      	movs	r3, #1
 8002660:	e00f      	b.n	8002682 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002662:	4a0a      	ldr	r2, [pc, #40]	; (800268c <SysTick_Config+0x40>)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3b01      	subs	r3, #1
 8002668:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800266a:	210f      	movs	r1, #15
 800266c:	f04f 30ff 	mov.w	r0, #4294967295
 8002670:	f7ff ff8e 	bl	8002590 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002674:	4b05      	ldr	r3, [pc, #20]	; (800268c <SysTick_Config+0x40>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800267a:	4b04      	ldr	r3, [pc, #16]	; (800268c <SysTick_Config+0x40>)
 800267c:	2207      	movs	r2, #7
 800267e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3708      	adds	r7, #8
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}
 800268a:	bf00      	nop
 800268c:	e000e010 	.word	0xe000e010

08002690 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f7ff ff29 	bl	80024f0 <__NVIC_SetPriorityGrouping>
}
 800269e:	bf00      	nop
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}

080026a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026a6:	b580      	push	{r7, lr}
 80026a8:	b086      	sub	sp, #24
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	4603      	mov	r3, r0
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026b4:	2300      	movs	r3, #0
 80026b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80026b8:	f7ff ff3e 	bl	8002538 <__NVIC_GetPriorityGrouping>
 80026bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	6978      	ldr	r0, [r7, #20]
 80026c4:	f7ff ff8e 	bl	80025e4 <NVIC_EncodePriority>
 80026c8:	4602      	mov	r2, r0
 80026ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff5d 	bl	8002590 <__NVIC_SetPriority>
}
 80026d6:	bf00      	nop
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b082      	sub	sp, #8
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	4603      	mov	r3, r0
 80026e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff31 	bl	8002554 <__NVIC_EnableIRQ>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7ff ffa2 	bl	800264c <SysTick_Config>
 8002708:	4603      	mov	r3, r0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d008      	beq.n	800273c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e022      	b.n	8002782 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f022 020e 	bic.w	r2, r2, #14
 800274a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	f003 021c 	and.w	r2, r3, #28
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002768:	2101      	movs	r1, #1
 800276a:	fa01 f202 	lsl.w	r2, r1, r2
 800276e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2200      	movs	r2, #0
 800277c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002780:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002782:	4618      	mov	r0, r3
 8002784:	3714      	adds	r7, #20
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b084      	sub	sp, #16
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002796:	2300      	movs	r3, #0
 8002798:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d005      	beq.n	80027b2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2204      	movs	r2, #4
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
 80027b0:	e029      	b.n	8002806 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f022 020e 	bic.w	r2, r2, #14
 80027c0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f022 0201 	bic.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d6:	f003 021c 	and.w	r2, r3, #28
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	2101      	movs	r1, #1
 80027e0:	fa01 f202 	lsl.w	r2, r1, r2
 80027e4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2201      	movs	r2, #1
 80027ea:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	4798      	blx	r3
    }
  }
  return status;
 8002806:	7bfb      	ldrb	r3, [r7, #15]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002810:	b480      	push	{r7}
 8002812:	b087      	sub	sp, #28
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800281a:	2300      	movs	r3, #0
 800281c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800281e:	e17f      	b.n	8002b20 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	2101      	movs	r1, #1
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	4013      	ands	r3, r2
 800282e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2b00      	cmp	r3, #0
 8002834:	f000 8171 	beq.w	8002b1a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	f003 0303 	and.w	r3, r3, #3
 8002840:	2b01      	cmp	r3, #1
 8002842:	d005      	beq.n	8002850 <HAL_GPIO_Init+0x40>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d130      	bne.n	80028b2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	693a      	ldr	r2, [r7, #16]
 8002864:	4013      	ands	r3, r2
 8002866:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68da      	ldr	r2, [r3, #12]
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	693a      	ldr	r2, [r7, #16]
 8002876:	4313      	orrs	r3, r2
 8002878:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	693a      	ldr	r2, [r7, #16]
 800287e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002886:	2201      	movs	r2, #1
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4013      	ands	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	091b      	lsrs	r3, r3, #4
 800289c:	f003 0201 	and.w	r2, r3, #1
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	f003 0303 	and.w	r3, r3, #3
 80028ba:	2b03      	cmp	r3, #3
 80028bc:	d118      	bne.n	80028f0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80028c4:	2201      	movs	r2, #1
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	43db      	mvns	r3, r3
 80028ce:	693a      	ldr	r2, [r7, #16]
 80028d0:	4013      	ands	r3, r2
 80028d2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	08db      	lsrs	r3, r3, #3
 80028da:	f003 0201 	and.w	r2, r3, #1
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0303 	and.w	r3, r3, #3
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d017      	beq.n	800292c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	693a      	ldr	r2, [r7, #16]
 8002910:	4013      	ands	r3, r2
 8002912:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	693a      	ldr	r2, [r7, #16]
 800292a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 0303 	and.w	r3, r3, #3
 8002934:	2b02      	cmp	r3, #2
 8002936:	d123      	bne.n	8002980 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	08da      	lsrs	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3208      	adds	r2, #8
 8002940:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002944:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f003 0307 	and.w	r3, r3, #7
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	220f      	movs	r2, #15
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	43db      	mvns	r3, r3
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	4013      	ands	r3, r2
 800295a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	693a      	ldr	r2, [r7, #16]
 800296e:	4313      	orrs	r3, r2
 8002970:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	08da      	lsrs	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3208      	adds	r2, #8
 800297a:	6939      	ldr	r1, [r7, #16]
 800297c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	005b      	lsls	r3, r3, #1
 800298a:	2203      	movs	r2, #3
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	43db      	mvns	r3, r3
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4013      	ands	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f003 0203 	and.w	r2, r3, #3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80ac 	beq.w	8002b1a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c2:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <HAL_GPIO_Init+0x330>)
 80029c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029c6:	4a5e      	ldr	r2, [pc, #376]	; (8002b40 <HAL_GPIO_Init+0x330>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6613      	str	r3, [r2, #96]	; 0x60
 80029ce:	4b5c      	ldr	r3, [pc, #368]	; (8002b40 <HAL_GPIO_Init+0x330>)
 80029d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80029da:	4a5a      	ldr	r2, [pc, #360]	; (8002b44 <HAL_GPIO_Init+0x334>)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f003 0303 	and.w	r3, r3, #3
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	220f      	movs	r2, #15
 80029f2:	fa02 f303 	lsl.w	r3, r2, r3
 80029f6:	43db      	mvns	r3, r3
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	4013      	ands	r3, r2
 80029fc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a04:	d025      	beq.n	8002a52 <HAL_GPIO_Init+0x242>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4f      	ldr	r2, [pc, #316]	; (8002b48 <HAL_GPIO_Init+0x338>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d01f      	beq.n	8002a4e <HAL_GPIO_Init+0x23e>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4e      	ldr	r2, [pc, #312]	; (8002b4c <HAL_GPIO_Init+0x33c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d019      	beq.n	8002a4a <HAL_GPIO_Init+0x23a>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4d      	ldr	r2, [pc, #308]	; (8002b50 <HAL_GPIO_Init+0x340>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d013      	beq.n	8002a46 <HAL_GPIO_Init+0x236>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4c      	ldr	r2, [pc, #304]	; (8002b54 <HAL_GPIO_Init+0x344>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00d      	beq.n	8002a42 <HAL_GPIO_Init+0x232>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4b      	ldr	r2, [pc, #300]	; (8002b58 <HAL_GPIO_Init+0x348>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d007      	beq.n	8002a3e <HAL_GPIO_Init+0x22e>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a4a      	ldr	r2, [pc, #296]	; (8002b5c <HAL_GPIO_Init+0x34c>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d101      	bne.n	8002a3a <HAL_GPIO_Init+0x22a>
 8002a36:	2306      	movs	r3, #6
 8002a38:	e00c      	b.n	8002a54 <HAL_GPIO_Init+0x244>
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	e00a      	b.n	8002a54 <HAL_GPIO_Init+0x244>
 8002a3e:	2305      	movs	r3, #5
 8002a40:	e008      	b.n	8002a54 <HAL_GPIO_Init+0x244>
 8002a42:	2304      	movs	r3, #4
 8002a44:	e006      	b.n	8002a54 <HAL_GPIO_Init+0x244>
 8002a46:	2303      	movs	r3, #3
 8002a48:	e004      	b.n	8002a54 <HAL_GPIO_Init+0x244>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e002      	b.n	8002a54 <HAL_GPIO_Init+0x244>
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e000      	b.n	8002a54 <HAL_GPIO_Init+0x244>
 8002a52:	2300      	movs	r3, #0
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	f002 0203 	and.w	r2, r2, #3
 8002a5a:	0092      	lsls	r2, r2, #2
 8002a5c:	4093      	lsls	r3, r2
 8002a5e:	693a      	ldr	r2, [r7, #16]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002a64:	4937      	ldr	r1, [pc, #220]	; (8002b44 <HAL_GPIO_Init+0x334>)
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	089b      	lsrs	r3, r3, #2
 8002a6a:	3302      	adds	r3, #2
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a72:	4b3b      	ldr	r3, [pc, #236]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d003      	beq.n	8002a96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002a96:	4a32      	ldr	r2, [pc, #200]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002a9c:	4b30      	ldr	r3, [pc, #192]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	43db      	mvns	r3, r3
 8002aa6:	693a      	ldr	r2, [r7, #16]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d003      	beq.n	8002ac0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002ab8:	693a      	ldr	r2, [r7, #16]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002ac0:	4a27      	ldr	r2, [pc, #156]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002ac6:	4b26      	ldr	r3, [pc, #152]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002aea:	4a1d      	ldr	r2, [pc, #116]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002af0:	4b1b      	ldr	r3, [pc, #108]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b14:	4a12      	ldr	r2, [pc, #72]	; (8002b60 <HAL_GPIO_Init+0x350>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa22 f303 	lsr.w	r3, r2, r3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f47f ae78 	bne.w	8002820 <HAL_GPIO_Init+0x10>
  }
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	371c      	adds	r7, #28
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	40021000 	.word	0x40021000
 8002b44:	40010000 	.word	0x40010000
 8002b48:	48000400 	.word	0x48000400
 8002b4c:	48000800 	.word	0x48000800
 8002b50:	48000c00 	.word	0x48000c00
 8002b54:	48001000 	.word	0x48001000
 8002b58:	48001400 	.word	0x48001400
 8002b5c:	48001800 	.word	0x48001800
 8002b60:	40010400 	.word	0x40010400

08002b64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002b72:	e0cd      	b.n	8002d10 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002b74:	2201      	movs	r2, #1
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7c:	683a      	ldr	r2, [r7, #0]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f000 80c0 	beq.w	8002d0a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002b8a:	4a68      	ldr	r2, [pc, #416]	; (8002d2c <HAL_GPIO_DeInit+0x1c8>)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4013      	ands	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002bb2:	d025      	beq.n	8002c00 <HAL_GPIO_DeInit+0x9c>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	4a5e      	ldr	r2, [pc, #376]	; (8002d30 <HAL_GPIO_DeInit+0x1cc>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d01f      	beq.n	8002bfc <HAL_GPIO_DeInit+0x98>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	4a5d      	ldr	r2, [pc, #372]	; (8002d34 <HAL_GPIO_DeInit+0x1d0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d019      	beq.n	8002bf8 <HAL_GPIO_DeInit+0x94>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a5c      	ldr	r2, [pc, #368]	; (8002d38 <HAL_GPIO_DeInit+0x1d4>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d013      	beq.n	8002bf4 <HAL_GPIO_DeInit+0x90>
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a5b      	ldr	r2, [pc, #364]	; (8002d3c <HAL_GPIO_DeInit+0x1d8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00d      	beq.n	8002bf0 <HAL_GPIO_DeInit+0x8c>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a5a      	ldr	r2, [pc, #360]	; (8002d40 <HAL_GPIO_DeInit+0x1dc>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d007      	beq.n	8002bec <HAL_GPIO_DeInit+0x88>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a59      	ldr	r2, [pc, #356]	; (8002d44 <HAL_GPIO_DeInit+0x1e0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d101      	bne.n	8002be8 <HAL_GPIO_DeInit+0x84>
 8002be4:	2306      	movs	r3, #6
 8002be6:	e00c      	b.n	8002c02 <HAL_GPIO_DeInit+0x9e>
 8002be8:	2307      	movs	r3, #7
 8002bea:	e00a      	b.n	8002c02 <HAL_GPIO_DeInit+0x9e>
 8002bec:	2305      	movs	r3, #5
 8002bee:	e008      	b.n	8002c02 <HAL_GPIO_DeInit+0x9e>
 8002bf0:	2304      	movs	r3, #4
 8002bf2:	e006      	b.n	8002c02 <HAL_GPIO_DeInit+0x9e>
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e004      	b.n	8002c02 <HAL_GPIO_DeInit+0x9e>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	e002      	b.n	8002c02 <HAL_GPIO_DeInit+0x9e>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	e000      	b.n	8002c02 <HAL_GPIO_DeInit+0x9e>
 8002c00:	2300      	movs	r3, #0
 8002c02:	697a      	ldr	r2, [r7, #20]
 8002c04:	f002 0203 	and.w	r2, r2, #3
 8002c08:	0092      	lsls	r2, r2, #2
 8002c0a:	4093      	lsls	r3, r2
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d132      	bne.n	8002c78 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002c12:	4b4d      	ldr	r3, [pc, #308]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	494b      	ldr	r1, [pc, #300]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002c20:	4b49      	ldr	r3, [pc, #292]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c22:	685a      	ldr	r2, [r3, #4]
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	4947      	ldr	r1, [pc, #284]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002c2e:	4b46      	ldr	r3, [pc, #280]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	43db      	mvns	r3, r3
 8002c36:	4944      	ldr	r1, [pc, #272]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c38:	4013      	ands	r3, r2
 8002c3a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002c3c:	4b42      	ldr	r3, [pc, #264]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c3e:	689a      	ldr	r2, [r3, #8]
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	4940      	ldr	r1, [pc, #256]	; (8002d48 <HAL_GPIO_DeInit+0x1e4>)
 8002c46:	4013      	ands	r3, r2
 8002c48:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	f003 0303 	and.w	r3, r3, #3
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	220f      	movs	r2, #15
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002c5a:	4a34      	ldr	r2, [pc, #208]	; (8002d2c <HAL_GPIO_DeInit+0x1c8>)
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	089b      	lsrs	r3, r3, #2
 8002c60:	3302      	adds	r3, #2
 8002c62:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	43da      	mvns	r2, r3
 8002c6a:	4830      	ldr	r0, [pc, #192]	; (8002d2c <HAL_GPIO_DeInit+0x1c8>)
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	089b      	lsrs	r3, r3, #2
 8002c70:	400a      	ands	r2, r1
 8002c72:	3302      	adds	r3, #2
 8002c74:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	2103      	movs	r1, #3
 8002c82:	fa01 f303 	lsl.w	r3, r1, r3
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	220f      	movs	r2, #15
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	43db      	mvns	r3, r3
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	08d2      	lsrs	r2, r2, #3
 8002cac:	4019      	ands	r1, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3208      	adds	r2, #8
 8002cb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689a      	ldr	r2, [r3, #8]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2103      	movs	r1, #3
 8002cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685a      	ldr	r2, [r3, #4]
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	68da      	ldr	r2, [r3, #12]
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	2103      	movs	r1, #3
 8002cea:	fa01 f303 	lsl.w	r3, r1, r3
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	401a      	ands	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002d02:	43db      	mvns	r3, r3
 8002d04:	401a      	ands	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d10:	683a      	ldr	r2, [r7, #0]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f47f af2b 	bne.w	8002b74 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d1e:	bf00      	nop
 8002d20:	bf00      	nop
 8002d22:	371c      	adds	r7, #28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2a:	4770      	bx	lr
 8002d2c:	40010000 	.word	0x40010000
 8002d30:	48000400 	.word	0x48000400
 8002d34:	48000800 	.word	0x48000800
 8002d38:	48000c00 	.word	0x48000c00
 8002d3c:	48001000 	.word	0x48001000
 8002d40:	48001400 	.word	0x48001400
 8002d44:	48001800 	.word	0x48001800
 8002d48:	40010400 	.word	0x40010400

08002d4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	460b      	mov	r3, r1
 8002d56:	807b      	strh	r3, [r7, #2]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d5c:	787b      	ldrb	r3, [r7, #1]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d003      	beq.n	8002d6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d62:	887a      	ldrh	r2, [r7, #2]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d68:	e002      	b.n	8002d70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	4603      	mov	r3, r0
 8002d84:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002d86:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d88:	695a      	ldr	r2, [r3, #20]
 8002d8a:	88fb      	ldrh	r3, [r7, #6]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d006      	beq.n	8002da0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d94:	88fb      	ldrh	r3, [r7, #6]
 8002d96:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f000 f806 	bl	8002dac <HAL_GPIO_EXTI_Callback>
  }
}
 8002da0:	bf00      	nop
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	40010400 	.word	0x40010400

08002dac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	4603      	mov	r3, r0
 8002db4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr

08002dc2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002dc2:	b580      	push	{r7, lr}
 8002dc4:	b082      	sub	sp, #8
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d101      	bne.n	8002dd4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	e081      	b.n	8002ed8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d106      	bne.n	8002dee <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f7fe fb63 	bl	80014b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2224      	movs	r2, #36	; 0x24
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f022 0201 	bic.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e12:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689a      	ldr	r2, [r3, #8]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e22:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d107      	bne.n	8002e3c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	689a      	ldr	r2, [r3, #8]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	e006      	b.n	8002e4a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e48:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d104      	bne.n	8002e5c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e5a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e6e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68da      	ldr	r2, [r3, #12]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e7e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	691a      	ldr	r2, [r3, #16]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	695b      	ldr	r3, [r3, #20]
 8002e88:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	69d9      	ldr	r1, [r3, #28]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a1a      	ldr	r2, [r3, #32]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f042 0201 	orr.w	r2, r2, #1
 8002eb8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e021      	b.n	8002f36 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2224      	movs	r2, #36	; 0x24
 8002ef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f022 0201 	bic.w	r2, r2, #1
 8002f08:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7fe fb30 	bl	8001570 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b088      	sub	sp, #32
 8002f44:	af02      	add	r7, sp, #8
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	817b      	strh	r3, [r7, #10]
 8002f52:	460b      	mov	r3, r1
 8002f54:	813b      	strh	r3, [r7, #8]
 8002f56:	4613      	mov	r3, r2
 8002f58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b20      	cmp	r3, #32
 8002f64:	f040 80f9 	bne.w	800315a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_I2C_Mem_Write+0x34>
 8002f6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d105      	bne.n	8002f80 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0ed      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_I2C_Mem_Write+0x4e>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e0e6      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f96:	f7ff fa9f 	bl	80024d8 <HAL_GetTick>
 8002f9a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	2319      	movs	r3, #25
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f000 fac3 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e0d1      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2221      	movs	r2, #33	; 0x21
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2240      	movs	r2, #64	; 0x40
 8002fc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6a3a      	ldr	r2, [r7, #32]
 8002fd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002fe0:	88f8      	ldrh	r0, [r7, #6]
 8002fe2:	893a      	ldrh	r2, [r7, #8]
 8002fe4:	8979      	ldrh	r1, [r7, #10]
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	9301      	str	r3, [sp, #4]
 8002fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	4603      	mov	r3, r0
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 f9d3 	bl	800339c <I2C_RequestMemoryWrite>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0a9      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300c:	b29b      	uxth	r3, r3
 800300e:	2bff      	cmp	r3, #255	; 0xff
 8003010:	d90e      	bls.n	8003030 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	22ff      	movs	r2, #255	; 0xff
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	2300      	movs	r3, #0
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 fc2b 	bl	8003884 <I2C_TransferConfig>
 800302e:	e00f      	b.n	8003050 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800303e:	b2da      	uxtb	r2, r3
 8003040:	8979      	ldrh	r1, [r7, #10]
 8003042:	2300      	movs	r3, #0
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800304a:	68f8      	ldr	r0, [r7, #12]
 800304c:	f000 fc1a 	bl	8003884 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003050:	697a      	ldr	r2, [r7, #20]
 8003052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 faad 	bl	80035b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e07b      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	781a      	ldrb	r2, [r3, #0]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	3b01      	subs	r3, #1
 800308e:	b29a      	uxth	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003098:	b29b      	uxth	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d034      	beq.n	8003108 <HAL_I2C_Mem_Write+0x1c8>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d130      	bne.n	8003108 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	2200      	movs	r2, #0
 80030ae:	2180      	movs	r1, #128	; 0x80
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 fa3f 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d001      	beq.n	80030c0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e04d      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c4:	b29b      	uxth	r3, r3
 80030c6:	2bff      	cmp	r3, #255	; 0xff
 80030c8:	d90e      	bls.n	80030e8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	22ff      	movs	r2, #255	; 0xff
 80030ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d4:	b2da      	uxtb	r2, r3
 80030d6:	8979      	ldrh	r1, [r7, #10]
 80030d8:	2300      	movs	r3, #0
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fbcf 	bl	8003884 <I2C_TransferConfig>
 80030e6:	e00f      	b.n	8003108 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	8979      	ldrh	r1, [r7, #10]
 80030fa:	2300      	movs	r3, #0
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 fbbe 	bl	8003884 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d19e      	bne.n	8003050 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 fa8c 	bl	8003634 <I2C_WaitOnSTOPFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e01a      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2220      	movs	r2, #32
 800312c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	6859      	ldr	r1, [r3, #4]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_I2C_Mem_Write+0x224>)
 800313a:	400b      	ands	r3, r1
 800313c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2220      	movs	r2, #32
 8003142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	e000      	b.n	800315c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800315a:	2302      	movs	r3, #2
  }
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	fe00e800 	.word	0xfe00e800

08003168 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	4608      	mov	r0, r1
 8003172:	4611      	mov	r1, r2
 8003174:	461a      	mov	r2, r3
 8003176:	4603      	mov	r3, r0
 8003178:	817b      	strh	r3, [r7, #10]
 800317a:	460b      	mov	r3, r1
 800317c:	813b      	strh	r3, [r7, #8]
 800317e:	4613      	mov	r3, r2
 8003180:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b20      	cmp	r3, #32
 800318c:	f040 80fd 	bne.w	800338a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d002      	beq.n	800319c <HAL_I2C_Mem_Read+0x34>
 8003196:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e0f1      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_I2C_Mem_Read+0x4e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ea      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80031be:	f7ff f98b 	bl	80024d8 <HAL_GetTick>
 80031c2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	9300      	str	r3, [sp, #0]
 80031c8:	2319      	movs	r3, #25
 80031ca:	2201      	movs	r2, #1
 80031cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 f9af 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d001      	beq.n	80031e0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e0d5      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2222      	movs	r2, #34	; 0x22
 80031e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2240      	movs	r2, #64	; 0x40
 80031ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6a3a      	ldr	r2, [r7, #32]
 80031fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003200:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003208:	88f8      	ldrh	r0, [r7, #6]
 800320a:	893a      	ldrh	r2, [r7, #8]
 800320c:	8979      	ldrh	r1, [r7, #10]
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	9301      	str	r3, [sp, #4]
 8003212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	4603      	mov	r3, r0
 8003218:	68f8      	ldr	r0, [r7, #12]
 800321a:	f000 f913 	bl	8003444 <I2C_RequestMemoryRead>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e0ad      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003234:	b29b      	uxth	r3, r3
 8003236:	2bff      	cmp	r3, #255	; 0xff
 8003238:	d90e      	bls.n	8003258 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	22ff      	movs	r2, #255	; 0xff
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003244:	b2da      	uxtb	r2, r3
 8003246:	8979      	ldrh	r1, [r7, #10]
 8003248:	4b52      	ldr	r3, [pc, #328]	; (8003394 <HAL_I2C_Mem_Read+0x22c>)
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fb17 	bl	8003884 <I2C_TransferConfig>
 8003256:	e00f      	b.n	8003278 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800325c:	b29a      	uxth	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003266:	b2da      	uxtb	r2, r3
 8003268:	8979      	ldrh	r1, [r7, #10]
 800326a:	4b4a      	ldr	r3, [pc, #296]	; (8003394 <HAL_I2C_Mem_Read+0x22c>)
 800326c:	9300      	str	r3, [sp, #0]
 800326e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fb06 	bl	8003884 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327e:	2200      	movs	r2, #0
 8003280:	2104      	movs	r1, #4
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 f956 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e07c      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	3b01      	subs	r3, #1
 80032be:	b29a      	uxth	r2, r3
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d034      	beq.n	8003338 <HAL_I2C_Mem_Read+0x1d0>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d130      	bne.n	8003338 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032dc:	2200      	movs	r2, #0
 80032de:	2180      	movs	r1, #128	; 0x80
 80032e0:	68f8      	ldr	r0, [r7, #12]
 80032e2:	f000 f927 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d001      	beq.n	80032f0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e04d      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	2bff      	cmp	r3, #255	; 0xff
 80032f8:	d90e      	bls.n	8003318 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	22ff      	movs	r2, #255	; 0xff
 80032fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003304:	b2da      	uxtb	r2, r3
 8003306:	8979      	ldrh	r1, [r7, #10]
 8003308:	2300      	movs	r3, #0
 800330a:	9300      	str	r3, [sp, #0]
 800330c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fab7 	bl	8003884 <I2C_TransferConfig>
 8003316:	e00f      	b.n	8003338 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29a      	uxth	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	b2da      	uxtb	r2, r3
 8003328:	8979      	ldrh	r1, [r7, #10]
 800332a:	2300      	movs	r3, #0
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 faa6 	bl	8003884 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800333c:	b29b      	uxth	r3, r3
 800333e:	2b00      	cmp	r3, #0
 8003340:	d19a      	bne.n	8003278 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003342:	697a      	ldr	r2, [r7, #20]
 8003344:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f974 	bl	8003634 <I2C_WaitOnSTOPFlagUntilTimeout>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e01a      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2220      	movs	r2, #32
 800335c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6859      	ldr	r1, [r3, #4]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_I2C_Mem_Read+0x230>)
 800336a:	400b      	ands	r3, r1
 800336c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	80002400 	.word	0x80002400
 8003398:	fe00e800 	.word	0xfe00e800

0800339c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af02      	add	r7, sp, #8
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	4608      	mov	r0, r1
 80033a6:	4611      	mov	r1, r2
 80033a8:	461a      	mov	r2, r3
 80033aa:	4603      	mov	r3, r0
 80033ac:	817b      	strh	r3, [r7, #10]
 80033ae:	460b      	mov	r3, r1
 80033b0:	813b      	strh	r3, [r7, #8]
 80033b2:	4613      	mov	r3, r2
 80033b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80033b6:	88fb      	ldrh	r3, [r7, #6]
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <I2C_RequestMemoryWrite+0xa4>)
 80033be:	9300      	str	r3, [sp, #0]
 80033c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f000 fa5d 	bl	8003884 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ca:	69fa      	ldr	r2, [r7, #28]
 80033cc:	69b9      	ldr	r1, [r7, #24]
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f000 f8f0 	bl	80035b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e02c      	b.n	8003438 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033de:	88fb      	ldrh	r3, [r7, #6]
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d105      	bne.n	80033f0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033e4:	893b      	ldrh	r3, [r7, #8]
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	629a      	str	r2, [r3, #40]	; 0x28
 80033ee:	e015      	b.n	800341c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033f0:	893b      	ldrh	r3, [r7, #8]
 80033f2:	0a1b      	lsrs	r3, r3, #8
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	b2da      	uxtb	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033fe:	69fa      	ldr	r2, [r7, #28]
 8003400:	69b9      	ldr	r1, [r7, #24]
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 f8d6 	bl	80035b4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e012      	b.n	8003438 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003412:	893b      	ldrh	r3, [r7, #8]
 8003414:	b2da      	uxtb	r2, r3
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	9300      	str	r3, [sp, #0]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	2200      	movs	r2, #0
 8003424:	2180      	movs	r1, #128	; 0x80
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 f884 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 800342c:	4603      	mov	r3, r0
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e000      	b.n	8003438 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3710      	adds	r7, #16
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}
 8003440:	80002000 	.word	0x80002000

08003444 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af02      	add	r7, sp, #8
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	4608      	mov	r0, r1
 800344e:	4611      	mov	r1, r2
 8003450:	461a      	mov	r2, r3
 8003452:	4603      	mov	r3, r0
 8003454:	817b      	strh	r3, [r7, #10]
 8003456:	460b      	mov	r3, r1
 8003458:	813b      	strh	r3, [r7, #8]
 800345a:	4613      	mov	r3, r2
 800345c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800345e:	88fb      	ldrh	r3, [r7, #6]
 8003460:	b2da      	uxtb	r2, r3
 8003462:	8979      	ldrh	r1, [r7, #10]
 8003464:	4b20      	ldr	r3, [pc, #128]	; (80034e8 <I2C_RequestMemoryRead+0xa4>)
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	2300      	movs	r3, #0
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa0a 	bl	8003884 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	69b9      	ldr	r1, [r7, #24]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 f89d 	bl	80035b4 <I2C_WaitOnTXISFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e02c      	b.n	80034de <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003484:	88fb      	ldrh	r3, [r7, #6]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800348a:	893b      	ldrh	r3, [r7, #8]
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
 8003494:	e015      	b.n	80034c2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003496:	893b      	ldrh	r3, [r7, #8]
 8003498:	0a1b      	lsrs	r3, r3, #8
 800349a:	b29b      	uxth	r3, r3
 800349c:	b2da      	uxtb	r2, r3
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034a4:	69fa      	ldr	r2, [r7, #28]
 80034a6:	69b9      	ldr	r1, [r7, #24]
 80034a8:	68f8      	ldr	r0, [r7, #12]
 80034aa:	f000 f883 	bl	80035b4 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ae:	4603      	mov	r3, r0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e012      	b.n	80034de <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034b8:	893b      	ldrh	r3, [r7, #8]
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2140      	movs	r1, #64	; 0x40
 80034cc:	68f8      	ldr	r0, [r7, #12]
 80034ce:	f000 f831 	bl	8003534 <I2C_WaitOnFlagUntilTimeout>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	80002000 	.word	0x80002000

080034ec <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	f003 0302 	and.w	r3, r3, #2
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d103      	bne.n	800350a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2200      	movs	r2, #0
 8003508:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	699b      	ldr	r3, [r3, #24]
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b01      	cmp	r3, #1
 8003516:	d007      	beq.n	8003528 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	699a      	ldr	r2, [r3, #24]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	619a      	str	r2, [r3, #24]
  }
}
 8003528:	bf00      	nop
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	60f8      	str	r0, [r7, #12]
 800353c:	60b9      	str	r1, [r7, #8]
 800353e:	603b      	str	r3, [r7, #0]
 8003540:	4613      	mov	r3, r2
 8003542:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003544:	e022      	b.n	800358c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800354c:	d01e      	beq.n	800358c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800354e:	f7fe ffc3 	bl	80024d8 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <I2C_WaitOnFlagUntilTimeout+0x30>
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d113      	bne.n	800358c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003568:	f043 0220 	orr.w	r2, r3, #32
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2200      	movs	r2, #0
 8003584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e00f      	b.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	699a      	ldr	r2, [r3, #24]
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	4013      	ands	r3, r2
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	429a      	cmp	r2, r3
 800359a:	bf0c      	ite	eq
 800359c:	2301      	moveq	r3, #1
 800359e:	2300      	movne	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	461a      	mov	r2, r3
 80035a4:	79fb      	ldrb	r3, [r7, #7]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d0cd      	beq.n	8003546 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}

080035b4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80035c0:	e02c      	b.n	800361c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	68b9      	ldr	r1, [r7, #8]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f870 	bl	80036ac <I2C_IsErrorOccurred>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e02a      	b.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035dc:	d01e      	beq.n	800361c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035de:	f7fe ff7b 	bl	80024d8 <HAL_GetTick>
 80035e2:	4602      	mov	r2, r0
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	68ba      	ldr	r2, [r7, #8]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d302      	bcc.n	80035f4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d113      	bne.n	800361c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f8:	f043 0220 	orr.w	r2, r3, #32
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e007      	b.n	800362c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	2b02      	cmp	r3, #2
 8003628:	d1cb      	bne.n	80035c2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3710      	adds	r7, #16
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003640:	e028      	b.n	8003694 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f830 	bl	80036ac <I2C_IsErrorOccurred>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e026      	b.n	80036a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fe ff3f 	bl	80024d8 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d113      	bne.n	8003694 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2220      	movs	r2, #32
 800367c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e007      	b.n	80036a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	699b      	ldr	r3, [r3, #24]
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d1cf      	bne.n	8003642 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b08a      	sub	sp, #40	; 0x28
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b8:	2300      	movs	r3, #0
 80036ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d075      	beq.n	80037c4 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	2210      	movs	r2, #16
 80036de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036e0:	e056      	b.n	8003790 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e8:	d052      	beq.n	8003790 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80036ea:	f7fe fef5 	bl	80024d8 <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d302      	bcc.n	8003700 <I2C_IsErrorOccurred+0x54>
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d147      	bne.n	8003790 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800370a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003712:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	699b      	ldr	r3, [r3, #24]
 800371a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800371e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003722:	d12e      	bne.n	8003782 <I2C_IsErrorOccurred+0xd6>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800372a:	d02a      	beq.n	8003782 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800372c:	7cfb      	ldrb	r3, [r7, #19]
 800372e:	2b20      	cmp	r3, #32
 8003730:	d027      	beq.n	8003782 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003740:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003742:	f7fe fec9 	bl	80024d8 <HAL_GetTick>
 8003746:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003748:	e01b      	b.n	8003782 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800374a:	f7fe fec5 	bl	80024d8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b19      	cmp	r3, #25
 8003756:	d914      	bls.n	8003782 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2220      	movs	r2, #32
 8003768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f003 0320 	and.w	r3, r3, #32
 800378c:	2b20      	cmp	r3, #32
 800378e:	d1dc      	bne.n	800374a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b20      	cmp	r3, #32
 800379c:	d003      	beq.n	80037a6 <I2C_IsErrorOccurred+0xfa>
 800379e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d09d      	beq.n	80036e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d103      	bne.n	80037b6 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2220      	movs	r2, #32
 80037b4:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	f043 0301 	orr.w	r3, r3, #1
 80037dc:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037e6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00b      	beq.n	8003810 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	f043 0308 	orr.w	r3, r3, #8
 80037fe:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003808:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	f043 0302 	orr.w	r3, r3, #2
 8003820:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800382a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003836:	2b00      	cmp	r3, #0
 8003838:	d01c      	beq.n	8003874 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f7ff fe56 	bl	80034ec <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	4b0d      	ldr	r3, [pc, #52]	; (8003880 <I2C_IsErrorOccurred+0x1d4>)
 800384c:	400b      	ands	r3, r1
 800384e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003854:	6a3b      	ldr	r3, [r7, #32]
 8003856:	431a      	orrs	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	2220      	movs	r2, #32
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003878:	4618      	mov	r0, r3
 800387a:	3728      	adds	r7, #40	; 0x28
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}
 8003880:	fe00e800 	.word	0xfe00e800

08003884 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	607b      	str	r3, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	817b      	strh	r3, [r7, #10]
 8003892:	4613      	mov	r3, r2
 8003894:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003896:	897b      	ldrh	r3, [r7, #10]
 8003898:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800389c:	7a7b      	ldrb	r3, [r7, #9]
 800389e:	041b      	lsls	r3, r3, #16
 80038a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038aa:	6a3b      	ldr	r3, [r7, #32]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	6a3b      	ldr	r3, [r7, #32]
 80038bc:	0d5b      	lsrs	r3, r3, #21
 80038be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <I2C_TransferConfig+0x60>)
 80038c4:	430b      	orrs	r3, r1
 80038c6:	43db      	mvns	r3, r3
 80038c8:	ea02 0103 	and.w	r1, r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	697a      	ldr	r2, [r7, #20]
 80038d2:	430a      	orrs	r2, r1
 80038d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80038d6:	bf00      	nop
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
 80038e2:	bf00      	nop
 80038e4:	03ff63ff 	.word	0x03ff63ff

080038e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b20      	cmp	r3, #32
 80038fc:	d138      	bne.n	8003970 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003908:	2302      	movs	r3, #2
 800390a:	e032      	b.n	8003972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2224      	movs	r2, #36	; 0x24
 8003918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f022 0201 	bic.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800393a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f042 0201 	orr.w	r2, r2, #1
 800395a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	e000      	b.n	8003972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003970:	2302      	movs	r3, #2
  }
}
 8003972:	4618      	mov	r0, r3
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
 8003986:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b20      	cmp	r3, #32
 8003992:	d139      	bne.n	8003a08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800399e:	2302      	movs	r3, #2
 80039a0:	e033      	b.n	8003a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2224      	movs	r2, #36	; 0x24
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f022 0201 	bic.w	r2, r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	021b      	lsls	r3, r3, #8
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f042 0201 	orr.w	r2, r2, #1
 80039f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2220      	movs	r2, #32
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a1c:	4b04      	ldr	r3, [pc, #16]	; (8003a30 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40007000 	.word	0x40007000

08003a34 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a42:	d130      	bne.n	8003aa6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a44:	4b23      	ldr	r3, [pc, #140]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a50:	d038      	beq.n	8003ac4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a5a:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a5c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003a60:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003a62:	4b1d      	ldr	r3, [pc, #116]	; (8003ad8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	2232      	movs	r2, #50	; 0x32
 8003a68:	fb02 f303 	mul.w	r3, r2, r3
 8003a6c:	4a1b      	ldr	r2, [pc, #108]	; (8003adc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a72:	0c9b      	lsrs	r3, r3, #18
 8003a74:	3301      	adds	r3, #1
 8003a76:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a78:	e002      	b.n	8003a80 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3b01      	subs	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a80:	4b14      	ldr	r3, [pc, #80]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a82:	695b      	ldr	r3, [r3, #20]
 8003a84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a8c:	d102      	bne.n	8003a94 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1f2      	bne.n	8003a7a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a94:	4b0f      	ldr	r3, [pc, #60]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aa0:	d110      	bne.n	8003ac4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e00f      	b.n	8003ac6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003aa6:	4b0b      	ldr	r3, [pc, #44]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d007      	beq.n	8003ac4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ab4:	4b07      	ldr	r3, [pc, #28]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003abc:	4a05      	ldr	r2, [pc, #20]	; (8003ad4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003abe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ac2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3714      	adds	r7, #20
 8003aca:	46bd      	mov	sp, r7
 8003acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad0:	4770      	bx	lr
 8003ad2:	bf00      	nop
 8003ad4:	40007000 	.word	0x40007000
 8003ad8:	200000c0 	.word	0x200000c0
 8003adc:	431bde83 	.word	0x431bde83

08003ae0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b088      	sub	sp, #32
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e3c6      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003af2:	4ba1      	ldr	r3, [pc, #644]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	f003 030c 	and.w	r3, r3, #12
 8003afa:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003afc:	4b9e      	ldr	r3, [pc, #632]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003afe:	68db      	ldr	r3, [r3, #12]
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0310 	and.w	r3, r3, #16
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	f000 80e4 	beq.w	8003cdc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b14:	69bb      	ldr	r3, [r7, #24]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d007      	beq.n	8003b2a <HAL_RCC_OscConfig+0x4a>
 8003b1a:	69bb      	ldr	r3, [r7, #24]
 8003b1c:	2b0c      	cmp	r3, #12
 8003b1e:	f040 808b 	bne.w	8003c38 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	f040 8087 	bne.w	8003c38 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b2a:	4b93      	ldr	r3, [pc, #588]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_RCC_OscConfig+0x62>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	699b      	ldr	r3, [r3, #24]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d101      	bne.n	8003b42 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e39e      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1a      	ldr	r2, [r3, #32]
 8003b46:	4b8c      	ldr	r3, [pc, #560]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_RCC_OscConfig+0x7c>
 8003b52:	4b89      	ldr	r3, [pc, #548]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b5a:	e005      	b.n	8003b68 <HAL_RCC_OscConfig+0x88>
 8003b5c:	4b86      	ldr	r3, [pc, #536]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d223      	bcs.n	8003bb4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fd53 	bl	800461c <RCC_SetFlashLatencyFromMSIRange>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e37f      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b80:	4b7d      	ldr	r3, [pc, #500]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a7c      	ldr	r2, [pc, #496]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b86:	f043 0308 	orr.w	r3, r3, #8
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b7a      	ldr	r3, [pc, #488]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	4977      	ldr	r1, [pc, #476]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69db      	ldr	r3, [r3, #28]
 8003baa:	021b      	lsls	r3, r3, #8
 8003bac:	4972      	ldr	r1, [pc, #456]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	604b      	str	r3, [r1, #4]
 8003bb2:	e025      	b.n	8003c00 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bb4:	4b70      	ldr	r3, [pc, #448]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6f      	ldr	r2, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003bba:	f043 0308 	orr.w	r3, r3, #8
 8003bbe:	6013      	str	r3, [r2, #0]
 8003bc0:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a1b      	ldr	r3, [r3, #32]
 8003bcc:	496a      	ldr	r1, [pc, #424]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bd2:	4b69      	ldr	r3, [pc, #420]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	4965      	ldr	r1, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d109      	bne.n	8003c00 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a1b      	ldr	r3, [r3, #32]
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f000 fd13 	bl	800461c <RCC_SetFlashLatencyFromMSIRange>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e33f      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c00:	f000 fc48 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8003c04:	4602      	mov	r2, r0
 8003c06:	4b5c      	ldr	r3, [pc, #368]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	091b      	lsrs	r3, r3, #4
 8003c0c:	f003 030f 	and.w	r3, r3, #15
 8003c10:	495a      	ldr	r1, [pc, #360]	; (8003d7c <HAL_RCC_OscConfig+0x29c>)
 8003c12:	5ccb      	ldrb	r3, [r1, r3]
 8003c14:	f003 031f 	and.w	r3, r3, #31
 8003c18:	fa22 f303 	lsr.w	r3, r2, r3
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_OscConfig+0x2a0>)
 8003c1e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c20:	4b58      	ldr	r3, [pc, #352]	; (8003d84 <HAL_RCC_OscConfig+0x2a4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4618      	mov	r0, r3
 8003c26:	f7fe fc07 	bl	8002438 <HAL_InitTick>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d052      	beq.n	8003cda <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	e323      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d032      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c40:	4b4d      	ldr	r3, [pc, #308]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a4c      	ldr	r2, [pc, #304]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c46:	f043 0301 	orr.w	r3, r3, #1
 8003c4a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c4c:	f7fe fc44 	bl	80024d8 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c52:	e008      	b.n	8003c66 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c54:	f7fe fc40 	bl	80024d8 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d901      	bls.n	8003c66 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e30c      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c66:	4b44      	ldr	r3, [pc, #272]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0302 	and.w	r3, r3, #2
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d0f0      	beq.n	8003c54 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c72:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a40      	ldr	r2, [pc, #256]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c78:	f043 0308 	orr.w	r3, r3, #8
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	4b3e      	ldr	r3, [pc, #248]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	493b      	ldr	r1, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c90:	4b39      	ldr	r3, [pc, #228]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	4936      	ldr	r1, [pc, #216]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	604b      	str	r3, [r1, #4]
 8003ca4:	e01a      	b.n	8003cdc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003ca6:	4b34      	ldr	r3, [pc, #208]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a33      	ldr	r2, [pc, #204]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003cac:	f023 0301 	bic.w	r3, r3, #1
 8003cb0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cb2:	f7fe fc11 	bl	80024d8 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cba:	f7fe fc0d 	bl	80024d8 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e2d9      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003ccc:	4b2a      	ldr	r3, [pc, #168]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1f0      	bne.n	8003cba <HAL_RCC_OscConfig+0x1da>
 8003cd8:	e000      	b.n	8003cdc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003cda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d074      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003ce8:	69bb      	ldr	r3, [r7, #24]
 8003cea:	2b08      	cmp	r3, #8
 8003cec:	d005      	beq.n	8003cfa <HAL_RCC_OscConfig+0x21a>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d10e      	bne.n	8003d12 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	d10b      	bne.n	8003d12 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cfa:	4b1f      	ldr	r3, [pc, #124]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d064      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x2f0>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d160      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e2b6      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d1a:	d106      	bne.n	8003d2a <HAL_RCC_OscConfig+0x24a>
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d26:	6013      	str	r3, [r2, #0]
 8003d28:	e01d      	b.n	8003d66 <HAL_RCC_OscConfig+0x286>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d32:	d10c      	bne.n	8003d4e <HAL_RCC_OscConfig+0x26e>
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a0f      	ldr	r2, [pc, #60]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d3e:	6013      	str	r3, [r2, #0]
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0c      	ldr	r2, [pc, #48]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e00b      	b.n	8003d66 <HAL_RCC_OscConfig+0x286>
 8003d4e:	4b0a      	ldr	r3, [pc, #40]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a09      	ldr	r2, [pc, #36]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	4b07      	ldr	r3, [pc, #28]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a06      	ldr	r2, [pc, #24]	; (8003d78 <HAL_RCC_OscConfig+0x298>)
 8003d60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d01c      	beq.n	8003da8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6e:	f7fe fbb3 	bl	80024d8 <HAL_GetTick>
 8003d72:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d74:	e011      	b.n	8003d9a <HAL_RCC_OscConfig+0x2ba>
 8003d76:	bf00      	nop
 8003d78:	40021000 	.word	0x40021000
 8003d7c:	080070d4 	.word	0x080070d4
 8003d80:	200000c0 	.word	0x200000c0
 8003d84:	20000120 	.word	0x20000120
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d88:	f7fe fba6 	bl	80024d8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b64      	cmp	r3, #100	; 0x64
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e272      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	4baf      	ldr	r3, [pc, #700]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d0f0      	beq.n	8003d88 <HAL_RCC_OscConfig+0x2a8>
 8003da6:	e014      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7fe fb96 	bl	80024d8 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003db0:	f7fe fb92 	bl	80024d8 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b64      	cmp	r3, #100	; 0x64
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e25e      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	4ba5      	ldr	r3, [pc, #660]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x2d0>
 8003dce:	e000      	b.n	8003dd2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0302 	and.w	r3, r3, #2
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d060      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	2b04      	cmp	r3, #4
 8003de2:	d005      	beq.n	8003df0 <HAL_RCC_OscConfig+0x310>
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2b0c      	cmp	r3, #12
 8003de8:	d119      	bne.n	8003e1e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d116      	bne.n	8003e1e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003df0:	4b99      	ldr	r3, [pc, #612]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d005      	beq.n	8003e08 <HAL_RCC_OscConfig+0x328>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e23b      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e08:	4b93      	ldr	r3, [pc, #588]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	061b      	lsls	r3, r3, #24
 8003e16:	4990      	ldr	r1, [pc, #576]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e1c:	e040      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d023      	beq.n	8003e6e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e26:	4b8c      	ldr	r3, [pc, #560]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a8b      	ldr	r2, [pc, #556]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fe fb51 	bl	80024d8 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fe fb4d 	bl	80024d8 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e219      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e4c:	4b82      	ldr	r3, [pc, #520]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d0f0      	beq.n	8003e3a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e58:	4b7f      	ldr	r3, [pc, #508]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	061b      	lsls	r3, r3, #24
 8003e66:	497c      	ldr	r1, [pc, #496]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	604b      	str	r3, [r1, #4]
 8003e6c:	e018      	b.n	8003ea0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e6e:	4b7a      	ldr	r3, [pc, #488]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a79      	ldr	r2, [pc, #484]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7a:	f7fe fb2d 	bl	80024d8 <HAL_GetTick>
 8003e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e80:	e008      	b.n	8003e94 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e82:	f7fe fb29 	bl	80024d8 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d901      	bls.n	8003e94 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e1f5      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e94:	4b70      	ldr	r3, [pc, #448]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d1f0      	bne.n	8003e82 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d03c      	beq.n	8003f26 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d01c      	beq.n	8003eee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb4:	4b68      	ldr	r3, [pc, #416]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003eb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eba:	4a67      	ldr	r2, [pc, #412]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003ebc:	f043 0301 	orr.w	r3, r3, #1
 8003ec0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec4:	f7fe fb08 	bl	80024d8 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ecc:	f7fe fb04 	bl	80024d8 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b02      	cmp	r3, #2
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e1d0      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ede:	4b5e      	ldr	r3, [pc, #376]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ee4:	f003 0302 	and.w	r3, r3, #2
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d0ef      	beq.n	8003ecc <HAL_RCC_OscConfig+0x3ec>
 8003eec:	e01b      	b.n	8003f26 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003eee:	4b5a      	ldr	r3, [pc, #360]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef4:	4a58      	ldr	r2, [pc, #352]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003ef6:	f023 0301 	bic.w	r3, r3, #1
 8003efa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003efe:	f7fe faeb 	bl	80024d8 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f06:	f7fe fae7 	bl	80024d8 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e1b3      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f18:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1ef      	bne.n	8003f06 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80a6 	beq.w	8004080 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f34:	2300      	movs	r3, #0
 8003f36:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f38:	4b47      	ldr	r3, [pc, #284]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003f3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f44:	4b44      	ldr	r3, [pc, #272]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f48:	4a43      	ldr	r2, [pc, #268]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003f4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	6593      	str	r3, [r2, #88]	; 0x58
 8003f50:	4b41      	ldr	r3, [pc, #260]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	60bb      	str	r3, [r7, #8]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f60:	4b3e      	ldr	r3, [pc, #248]	; (800405c <HAL_RCC_OscConfig+0x57c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d118      	bne.n	8003f9e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f6c:	4b3b      	ldr	r3, [pc, #236]	; (800405c <HAL_RCC_OscConfig+0x57c>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a3a      	ldr	r2, [pc, #232]	; (800405c <HAL_RCC_OscConfig+0x57c>)
 8003f72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f76:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f78:	f7fe faae 	bl	80024d8 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f80:	f7fe faaa 	bl	80024d8 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e176      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f92:	4b32      	ldr	r3, [pc, #200]	; (800405c <HAL_RCC_OscConfig+0x57c>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d0f0      	beq.n	8003f80 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d108      	bne.n	8003fb8 <HAL_RCC_OscConfig+0x4d8>
 8003fa6:	4b2c      	ldr	r3, [pc, #176]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fac:	4a2a      	ldr	r2, [pc, #168]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fae:	f043 0301 	orr.w	r3, r3, #1
 8003fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fb6:	e024      	b.n	8004002 <HAL_RCC_OscConfig+0x522>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b05      	cmp	r3, #5
 8003fbe:	d110      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x502>
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc6:	4a24      	ldr	r2, [pc, #144]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fc8:	f043 0304 	orr.w	r3, r3, #4
 8003fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fd6:	4a20      	ldr	r2, [pc, #128]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fe0:	e00f      	b.n	8004002 <HAL_RCC_OscConfig+0x522>
 8003fe2:	4b1d      	ldr	r3, [pc, #116]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	4a1b      	ldr	r2, [pc, #108]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff2:	4b19      	ldr	r3, [pc, #100]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	4a17      	ldr	r2, [pc, #92]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 8003ffa:	f023 0304 	bic.w	r3, r3, #4
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d016      	beq.n	8004038 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400a:	f7fe fa65 	bl	80024d8 <HAL_GetTick>
 800400e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004010:	e00a      	b.n	8004028 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004012:	f7fe fa61 	bl	80024d8 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	693b      	ldr	r3, [r7, #16]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004020:	4293      	cmp	r3, r2
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e12b      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004028:	4b0b      	ldr	r3, [pc, #44]	; (8004058 <HAL_RCC_OscConfig+0x578>)
 800402a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d0ed      	beq.n	8004012 <HAL_RCC_OscConfig+0x532>
 8004036:	e01a      	b.n	800406e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004038:	f7fe fa4e 	bl	80024d8 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800403e:	e00f      	b.n	8004060 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004040:	f7fe fa4a 	bl	80024d8 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	f241 3288 	movw	r2, #5000	; 0x1388
 800404e:	4293      	cmp	r3, r2
 8004050:	d906      	bls.n	8004060 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004052:	2303      	movs	r3, #3
 8004054:	e114      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
 8004056:	bf00      	nop
 8004058:	40021000 	.word	0x40021000
 800405c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004060:	4b89      	ldr	r3, [pc, #548]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e8      	bne.n	8004040 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800406e:	7ffb      	ldrb	r3, [r7, #31]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004074:	4b84      	ldr	r3, [pc, #528]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004078:	4a83      	ldr	r2, [pc, #524]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 800407a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800407e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 80fa 	beq.w	800427e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	2b02      	cmp	r3, #2
 8004090:	f040 80d0 	bne.w	8004234 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004094:	4b7c      	ldr	r3, [pc, #496]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	f003 0203 	and.w	r2, r3, #3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d130      	bne.n	800410a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	3b01      	subs	r3, #1
 80040b4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d127      	bne.n	800410a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d11f      	bne.n	800410a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040d4:	2a07      	cmp	r2, #7
 80040d6:	bf14      	ite	ne
 80040d8:	2201      	movne	r2, #1
 80040da:	2200      	moveq	r2, #0
 80040dc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040de:	4293      	cmp	r3, r2
 80040e0:	d113      	bne.n	800410a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ec:	085b      	lsrs	r3, r3, #1
 80040ee:	3b01      	subs	r3, #1
 80040f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d109      	bne.n	800410a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	085b      	lsrs	r3, r3, #1
 8004102:	3b01      	subs	r3, #1
 8004104:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004106:	429a      	cmp	r2, r3
 8004108:	d06e      	beq.n	80041e8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d069      	beq.n	80041e4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004110:	4b5d      	ldr	r3, [pc, #372]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004118:	2b00      	cmp	r3, #0
 800411a:	d105      	bne.n	8004128 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800411c:	4b5a      	ldr	r3, [pc, #360]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e0a9      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800412c:	4b56      	ldr	r3, [pc, #344]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a55      	ldr	r2, [pc, #340]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004136:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004138:	f7fe f9ce 	bl	80024d8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe f9ca 	bl	80024d8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e096      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004152:	4b4d      	ldr	r3, [pc, #308]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415e:	4b4a      	ldr	r3, [pc, #296]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004160:	68da      	ldr	r2, [r3, #12]
 8004162:	4b4a      	ldr	r3, [pc, #296]	; (800428c <HAL_RCC_OscConfig+0x7ac>)
 8004164:	4013      	ands	r3, r2
 8004166:	687a      	ldr	r2, [r7, #4]
 8004168:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800416e:	3a01      	subs	r2, #1
 8004170:	0112      	lsls	r2, r2, #4
 8004172:	4311      	orrs	r1, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004178:	0212      	lsls	r2, r2, #8
 800417a:	4311      	orrs	r1, r2
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004180:	0852      	lsrs	r2, r2, #1
 8004182:	3a01      	subs	r2, #1
 8004184:	0552      	lsls	r2, r2, #21
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800418c:	0852      	lsrs	r2, r2, #1
 800418e:	3a01      	subs	r2, #1
 8004190:	0652      	lsls	r2, r2, #25
 8004192:	4311      	orrs	r1, r2
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004198:	0912      	lsrs	r2, r2, #4
 800419a:	0452      	lsls	r2, r2, #17
 800419c:	430a      	orrs	r2, r1
 800419e:	493a      	ldr	r1, [pc, #232]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041a4:	4b38      	ldr	r3, [pc, #224]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a37      	ldr	r2, [pc, #220]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041b0:	4b35      	ldr	r3, [pc, #212]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041b2:	68db      	ldr	r3, [r3, #12]
 80041b4:	4a34      	ldr	r2, [pc, #208]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80041bc:	f7fe f98c 	bl	80024d8 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c4:	f7fe f988 	bl	80024d8 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e054      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041d6:	4b2c      	ldr	r3, [pc, #176]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d0f0      	beq.n	80041c4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041e2:	e04c      	b.n	800427e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	e04b      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041e8:	4b27      	ldr	r3, [pc, #156]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d144      	bne.n	800427e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041f4:	4b24      	ldr	r3, [pc, #144]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a23      	ldr	r2, [pc, #140]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 80041fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004200:	4b21      	ldr	r3, [pc, #132]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4a20      	ldr	r2, [pc, #128]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800420c:	f7fe f964 	bl	80024d8 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004214:	f7fe f960 	bl	80024d8 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e02c      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	4b18      	ldr	r3, [pc, #96]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x734>
 8004232:	e024      	b.n	800427e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	2b0c      	cmp	r3, #12
 8004238:	d01f      	beq.n	800427a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800423a:	4b13      	ldr	r3, [pc, #76]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a12      	ldr	r2, [pc, #72]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004240:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004244:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004246:	f7fe f947 	bl	80024d8 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800424e:	f7fe f943 	bl	80024d8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e00f      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004260:	4b09      	ldr	r3, [pc, #36]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 800426e:	68da      	ldr	r2, [r3, #12]
 8004270:	4905      	ldr	r1, [pc, #20]	; (8004288 <HAL_RCC_OscConfig+0x7a8>)
 8004272:	4b07      	ldr	r3, [pc, #28]	; (8004290 <HAL_RCC_OscConfig+0x7b0>)
 8004274:	4013      	ands	r3, r2
 8004276:	60cb      	str	r3, [r1, #12]
 8004278:	e001      	b.n	800427e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
 800427c:	e000      	b.n	8004280 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40021000 	.word	0x40021000
 800428c:	f99d808c 	.word	0xf99d808c
 8004290:	feeefffc 	.word	0xfeeefffc

08004294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d101      	bne.n	80042a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e0e7      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042a8:	4b75      	ldr	r3, [pc, #468]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f003 0307 	and.w	r3, r3, #7
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d910      	bls.n	80042d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042b6:	4b72      	ldr	r3, [pc, #456]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 0207 	bic.w	r2, r3, #7
 80042be:	4970      	ldr	r1, [pc, #448]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	4313      	orrs	r3, r2
 80042c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042c6:	4b6e      	ldr	r3, [pc, #440]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	683a      	ldr	r2, [r7, #0]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d001      	beq.n	80042d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e0cf      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d010      	beq.n	8004306 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689a      	ldr	r2, [r3, #8]
 80042e8:	4b66      	ldr	r3, [pc, #408]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d908      	bls.n	8004306 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042f4:	4b63      	ldr	r3, [pc, #396]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	4960      	ldr	r1, [pc, #384]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004302:	4313      	orrs	r3, r2
 8004304:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	2b00      	cmp	r3, #0
 8004310:	d04c      	beq.n	80043ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	2b03      	cmp	r3, #3
 8004318:	d107      	bne.n	800432a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800431a:	4b5a      	ldr	r3, [pc, #360]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d121      	bne.n	800436a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0a6      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d107      	bne.n	8004342 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004332:	4b54      	ldr	r3, [pc, #336]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800433a:	2b00      	cmp	r3, #0
 800433c:	d115      	bne.n	800436a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800433e:	2301      	movs	r3, #1
 8004340:	e09a      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d107      	bne.n	800435a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800434a:	4b4e      	ldr	r3, [pc, #312]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e08e      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800435a:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e086      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800436a:	4b46      	ldr	r3, [pc, #280]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 0203 	bic.w	r2, r3, #3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	4943      	ldr	r1, [pc, #268]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004378:	4313      	orrs	r3, r2
 800437a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800437c:	f7fe f8ac 	bl	80024d8 <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004382:	e00a      	b.n	800439a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004384:	f7fe f8a8 	bl	80024d8 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e06e      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800439a:	4b3a      	ldr	r3, [pc, #232]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 020c 	and.w	r2, r3, #12
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	009b      	lsls	r3, r3, #2
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d1eb      	bne.n	8004384 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d010      	beq.n	80043da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	4b31      	ldr	r3, [pc, #196]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d208      	bcs.n	80043da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043c8:	4b2e      	ldr	r3, [pc, #184]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	492b      	ldr	r1, [pc, #172]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043da:	4b29      	ldr	r3, [pc, #164]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d210      	bcs.n	800440a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e8:	4b25      	ldr	r3, [pc, #148]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f023 0207 	bic.w	r2, r3, #7
 80043f0:	4923      	ldr	r1, [pc, #140]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f8:	4b21      	ldr	r3, [pc, #132]	; (8004480 <HAL_RCC_ClockConfig+0x1ec>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	683a      	ldr	r2, [r7, #0]
 8004402:	429a      	cmp	r2, r3
 8004404:	d001      	beq.n	800440a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	e036      	b.n	8004478 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0304 	and.w	r3, r3, #4
 8004412:	2b00      	cmp	r3, #0
 8004414:	d008      	beq.n	8004428 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004416:	4b1b      	ldr	r3, [pc, #108]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4918      	ldr	r1, [pc, #96]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004424:	4313      	orrs	r3, r2
 8004426:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0308 	and.w	r3, r3, #8
 8004430:	2b00      	cmp	r3, #0
 8004432:	d009      	beq.n	8004448 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004434:	4b13      	ldr	r3, [pc, #76]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	4910      	ldr	r1, [pc, #64]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004444:	4313      	orrs	r3, r2
 8004446:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004448:	f000 f824 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 800444c:	4602      	mov	r2, r0
 800444e:	4b0d      	ldr	r3, [pc, #52]	; (8004484 <HAL_RCC_ClockConfig+0x1f0>)
 8004450:	689b      	ldr	r3, [r3, #8]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	490b      	ldr	r1, [pc, #44]	; (8004488 <HAL_RCC_ClockConfig+0x1f4>)
 800445a:	5ccb      	ldrb	r3, [r1, r3]
 800445c:	f003 031f 	and.w	r3, r3, #31
 8004460:	fa22 f303 	lsr.w	r3, r2, r3
 8004464:	4a09      	ldr	r2, [pc, #36]	; (800448c <HAL_RCC_ClockConfig+0x1f8>)
 8004466:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004468:	4b09      	ldr	r3, [pc, #36]	; (8004490 <HAL_RCC_ClockConfig+0x1fc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd ffe3 	bl	8002438 <HAL_InitTick>
 8004472:	4603      	mov	r3, r0
 8004474:	72fb      	strb	r3, [r7, #11]

  return status;
 8004476:	7afb      	ldrb	r3, [r7, #11]
}
 8004478:	4618      	mov	r0, r3
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40022000 	.word	0x40022000
 8004484:	40021000 	.word	0x40021000
 8004488:	080070d4 	.word	0x080070d4
 800448c:	200000c0 	.word	0x200000c0
 8004490:	20000120 	.word	0x20000120

08004494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004494:	b480      	push	{r7}
 8004496:	b089      	sub	sp, #36	; 0x24
 8004498:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800449a:	2300      	movs	r3, #0
 800449c:	61fb      	str	r3, [r7, #28]
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044a2:	4b3e      	ldr	r3, [pc, #248]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f003 030c 	and.w	r3, r3, #12
 80044aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80044ac:	4b3b      	ldr	r3, [pc, #236]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	f003 0303 	and.w	r3, r3, #3
 80044b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d005      	beq.n	80044c8 <HAL_RCC_GetSysClockFreq+0x34>
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b0c      	cmp	r3, #12
 80044c0:	d121      	bne.n	8004506 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d11e      	bne.n	8004506 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80044c8:	4b34      	ldr	r3, [pc, #208]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f003 0308 	and.w	r3, r3, #8
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d107      	bne.n	80044e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80044d4:	4b31      	ldr	r3, [pc, #196]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 80044d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044da:	0a1b      	lsrs	r3, r3, #8
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	61fb      	str	r3, [r7, #28]
 80044e2:	e005      	b.n	80044f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80044e4:	4b2d      	ldr	r3, [pc, #180]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80044f0:	4a2b      	ldr	r2, [pc, #172]	; (80045a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80044f2:	69fb      	ldr	r3, [r7, #28]
 80044f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10d      	bne.n	800451c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004504:	e00a      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d102      	bne.n	8004512 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800450c:	4b25      	ldr	r3, [pc, #148]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800450e:	61bb      	str	r3, [r7, #24]
 8004510:	e004      	b.n	800451c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d101      	bne.n	800451c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004518:	4b23      	ldr	r3, [pc, #140]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800451a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	2b0c      	cmp	r3, #12
 8004520:	d134      	bne.n	800458c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004522:	4b1e      	ldr	r3, [pc, #120]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	2b02      	cmp	r3, #2
 8004530:	d003      	beq.n	800453a <HAL_RCC_GetSysClockFreq+0xa6>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b03      	cmp	r3, #3
 8004536:	d003      	beq.n	8004540 <HAL_RCC_GetSysClockFreq+0xac>
 8004538:	e005      	b.n	8004546 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800453a:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800453c:	617b      	str	r3, [r7, #20]
      break;
 800453e:	e005      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004540:	4b19      	ldr	r3, [pc, #100]	; (80045a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004542:	617b      	str	r3, [r7, #20]
      break;
 8004544:	e002      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	617b      	str	r3, [r7, #20]
      break;
 800454a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800454c:	4b13      	ldr	r3, [pc, #76]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 800454e:	68db      	ldr	r3, [r3, #12]
 8004550:	091b      	lsrs	r3, r3, #4
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	3301      	adds	r3, #1
 8004558:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800455a:	4b10      	ldr	r3, [pc, #64]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 800455c:	68db      	ldr	r3, [r3, #12]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	fb02 f203 	mul.w	r2, r2, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004570:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004572:	4b0a      	ldr	r3, [pc, #40]	; (800459c <HAL_RCC_GetSysClockFreq+0x108>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	0e5b      	lsrs	r3, r3, #25
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	3301      	adds	r3, #1
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004582:	697a      	ldr	r2, [r7, #20]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	fbb2 f3f3 	udiv	r3, r2, r3
 800458a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800458c:	69bb      	ldr	r3, [r7, #24]
}
 800458e:	4618      	mov	r0, r3
 8004590:	3724      	adds	r7, #36	; 0x24
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	080070ec 	.word	0x080070ec
 80045a4:	00f42400 	.word	0x00f42400
 80045a8:	007a1200 	.word	0x007a1200

080045ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b0:	4b03      	ldr	r3, [pc, #12]	; (80045c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80045b2:	681b      	ldr	r3, [r3, #0]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr
 80045be:	bf00      	nop
 80045c0:	200000c0 	.word	0x200000c0

080045c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80045c8:	f7ff fff0 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	0a1b      	lsrs	r3, r3, #8
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4904      	ldr	r1, [pc, #16]	; (80045ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	f003 031f 	and.w	r3, r3, #31
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	40021000 	.word	0x40021000
 80045ec:	080070e4 	.word	0x080070e4

080045f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80045f4:	f7ff ffda 	bl	80045ac <HAL_RCC_GetHCLKFreq>
 80045f8:	4602      	mov	r2, r0
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	0adb      	lsrs	r3, r3, #11
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	4904      	ldr	r1, [pc, #16]	; (8004618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004606:	5ccb      	ldrb	r3, [r1, r3]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004610:	4618      	mov	r0, r3
 8004612:	bd80      	pop	{r7, pc}
 8004614:	40021000 	.word	0x40021000
 8004618:	080070e4 	.word	0x080070e4

0800461c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004624:	2300      	movs	r3, #0
 8004626:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004628:	4b2a      	ldr	r3, [pc, #168]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800462a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800462c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004634:	f7ff f9f0 	bl	8003a18 <HAL_PWREx_GetVoltageRange>
 8004638:	6178      	str	r0, [r7, #20]
 800463a:	e014      	b.n	8004666 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800463c:	4b25      	ldr	r3, [pc, #148]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800463e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004640:	4a24      	ldr	r2, [pc, #144]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004646:	6593      	str	r3, [r2, #88]	; 0x58
 8004648:	4b22      	ldr	r3, [pc, #136]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800464a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004654:	f7ff f9e0 	bl	8003a18 <HAL_PWREx_GetVoltageRange>
 8004658:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800465a:	4b1e      	ldr	r3, [pc, #120]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800465c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004660:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004664:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800466c:	d10b      	bne.n	8004686 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2b80      	cmp	r3, #128	; 0x80
 8004672:	d919      	bls.n	80046a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2ba0      	cmp	r3, #160	; 0xa0
 8004678:	d902      	bls.n	8004680 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800467a:	2302      	movs	r3, #2
 800467c:	613b      	str	r3, [r7, #16]
 800467e:	e013      	b.n	80046a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004680:	2301      	movs	r3, #1
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	e010      	b.n	80046a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d902      	bls.n	8004692 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800468c:	2303      	movs	r3, #3
 800468e:	613b      	str	r3, [r7, #16]
 8004690:	e00a      	b.n	80046a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2b80      	cmp	r3, #128	; 0x80
 8004696:	d102      	bne.n	800469e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004698:	2302      	movs	r3, #2
 800469a:	613b      	str	r3, [r7, #16]
 800469c:	e004      	b.n	80046a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2b70      	cmp	r3, #112	; 0x70
 80046a2:	d101      	bne.n	80046a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046a4:	2301      	movs	r3, #1
 80046a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046a8:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 0207 	bic.w	r2, r3, #7
 80046b0:	4909      	ldr	r1, [pc, #36]	; (80046d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80046b8:	4b07      	ldr	r3, [pc, #28]	; (80046d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0307 	and.w	r3, r3, #7
 80046c0:	693a      	ldr	r2, [r7, #16]
 80046c2:	429a      	cmp	r2, r3
 80046c4:	d001      	beq.n	80046ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80046ca:	2300      	movs	r3, #0
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	40021000 	.word	0x40021000
 80046d8:	40022000 	.word	0x40022000

080046dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046e4:	2300      	movs	r3, #0
 80046e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046e8:	2300      	movs	r3, #0
 80046ea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d041      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004700:	d02a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004702:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004706:	d824      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004708:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800470c:	d008      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800470e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004712:	d81e      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004718:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800471c:	d010      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800471e:	e018      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004720:	4b86      	ldr	r3, [pc, #536]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	4a85      	ldr	r2, [pc, #532]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800472a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800472c:	e015      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	3304      	adds	r3, #4
 8004732:	2100      	movs	r1, #0
 8004734:	4618      	mov	r0, r3
 8004736:	f000 fabb 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 800473a:	4603      	mov	r3, r0
 800473c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800473e:	e00c      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	3320      	adds	r3, #32
 8004744:	2100      	movs	r1, #0
 8004746:	4618      	mov	r0, r3
 8004748:	f000 fba6 	bl	8004e98 <RCCEx_PLLSAI2_Config>
 800474c:	4603      	mov	r3, r0
 800474e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004750:	e003      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	74fb      	strb	r3, [r7, #19]
      break;
 8004756:	e000      	b.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004758:	bf00      	nop
    }

    if(ret == HAL_OK)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004760:	4b76      	ldr	r3, [pc, #472]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004766:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800476e:	4973      	ldr	r1, [pc, #460]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004770:	4313      	orrs	r3, r2
 8004772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004776:	e001      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004778:	7cfb      	ldrb	r3, [r7, #19]
 800477a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d041      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800478c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004790:	d02a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004792:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004796:	d824      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004798:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800479c:	d008      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800479e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047a2:	d81e      	bhi.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d00a      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80047a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047ac:	d010      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80047ae:	e018      	b.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047b0:	4b62      	ldr	r3, [pc, #392]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	4a61      	ldr	r2, [pc, #388]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047ba:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047bc:	e015      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	3304      	adds	r3, #4
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa73 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 80047ca:	4603      	mov	r3, r0
 80047cc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047ce:	e00c      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3320      	adds	r3, #32
 80047d4:	2100      	movs	r1, #0
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fb5e 	bl	8004e98 <RCCEx_PLLSAI2_Config>
 80047dc:	4603      	mov	r3, r0
 80047de:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80047e0:	e003      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	74fb      	strb	r3, [r7, #19]
      break;
 80047e6:	e000      	b.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80047e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10b      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80047f0:	4b52      	ldr	r3, [pc, #328]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047fe:	494f      	ldr	r1, [pc, #316]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004800:	4313      	orrs	r3, r2
 8004802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004806:	e001      	b.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004808:	7cfb      	ldrb	r3, [r7, #19]
 800480a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80a0 	beq.w	800495a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800481a:	2300      	movs	r3, #0
 800481c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800481e:	4b47      	ldr	r3, [pc, #284]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d00d      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004834:	4b41      	ldr	r3, [pc, #260]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004838:	4a40      	ldr	r2, [pc, #256]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800483e:	6593      	str	r3, [r2, #88]	; 0x58
 8004840:	4b3e      	ldr	r3, [pc, #248]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004842:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	60bb      	str	r3, [r7, #8]
 800484a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800484c:	2301      	movs	r3, #1
 800484e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004850:	4b3b      	ldr	r3, [pc, #236]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a3a      	ldr	r2, [pc, #232]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004856:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800485a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800485c:	f7fd fe3c 	bl	80024d8 <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004862:	e009      	b.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004864:	f7fd fe38 	bl	80024d8 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d902      	bls.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	74fb      	strb	r3, [r7, #19]
        break;
 8004876:	e005      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004878:	4b31      	ldr	r3, [pc, #196]	; (8004940 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004880:	2b00      	cmp	r3, #0
 8004882:	d0ef      	beq.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d15c      	bne.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800488a:	4b2c      	ldr	r3, [pc, #176]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004894:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d01f      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d019      	beq.n	80048dc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048a8:	4b24      	ldr	r3, [pc, #144]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048b4:	4b21      	ldr	r3, [pc, #132]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ba:	4a20      	ldr	r2, [pc, #128]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048c4:	4b1d      	ldr	r3, [pc, #116]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ca:	4a1c      	ldr	r2, [pc, #112]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80048d4:	4a19      	ldr	r2, [pc, #100]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d016      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fd fdf7 	bl	80024d8 <HAL_GetTick>
 80048ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80048ec:	e00b      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ee:	f7fd fdf3 	bl	80024d8 <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d902      	bls.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004900:	2303      	movs	r3, #3
 8004902:	74fb      	strb	r3, [r7, #19]
            break;
 8004904:	e006      	b.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004906:	4b0d      	ldr	r3, [pc, #52]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490c:	f003 0302 	and.w	r3, r3, #2
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0ec      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004914:	7cfb      	ldrb	r3, [r7, #19]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10c      	bne.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800491a:	4b08      	ldr	r3, [pc, #32]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004920:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800492a:	4904      	ldr	r1, [pc, #16]	; (800493c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004932:	e009      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004934:	7cfb      	ldrb	r3, [r7, #19]
 8004936:	74bb      	strb	r3, [r7, #18]
 8004938:	e006      	b.n	8004948 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800493a:	bf00      	nop
 800493c:	40021000 	.word	0x40021000
 8004940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004944:	7cfb      	ldrb	r3, [r7, #19]
 8004946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004948:	7c7b      	ldrb	r3, [r7, #17]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d105      	bne.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800494e:	4b9e      	ldr	r3, [pc, #632]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	4a9d      	ldr	r2, [pc, #628]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004958:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00a      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004966:	4b98      	ldr	r3, [pc, #608]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800496c:	f023 0203 	bic.w	r2, r3, #3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004974:	4994      	ldr	r1, [pc, #592]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	4313      	orrs	r3, r2
 8004978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0302 	and.w	r3, r3, #2
 8004984:	2b00      	cmp	r3, #0
 8004986:	d00a      	beq.n	800499e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004988:	4b8f      	ldr	r3, [pc, #572]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800498a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498e:	f023 020c 	bic.w	r2, r3, #12
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	498c      	ldr	r1, [pc, #560]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	4313      	orrs	r3, r2
 800499a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00a      	beq.n	80049c0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049aa:	4b87      	ldr	r3, [pc, #540]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	4983      	ldr	r1, [pc, #524]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	4313      	orrs	r3, r2
 80049bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0308 	and.w	r3, r3, #8
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d00a      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80049cc:	4b7e      	ldr	r3, [pc, #504]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049da:	497b      	ldr	r1, [pc, #492]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	4313      	orrs	r3, r2
 80049de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d00a      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80049ee:	4b76      	ldr	r3, [pc, #472]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fc:	4972      	ldr	r1, [pc, #456]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0320 	and.w	r3, r3, #32
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00a      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a10:	4b6d      	ldr	r3, [pc, #436]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a1e:	496a      	ldr	r1, [pc, #424]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00a      	beq.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a32:	4b65      	ldr	r3, [pc, #404]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a40:	4961      	ldr	r1, [pc, #388]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004a54:	4b5c      	ldr	r3, [pc, #368]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a62:	4959      	ldr	r1, [pc, #356]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a64:	4313      	orrs	r3, r2
 8004a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a76:	4b54      	ldr	r3, [pc, #336]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a84:	4950      	ldr	r1, [pc, #320]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a98:	4b4b      	ldr	r3, [pc, #300]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa6:	4948      	ldr	r1, [pc, #288]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004aba:	4b43      	ldr	r3, [pc, #268]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac8:	493f      	ldr	r1, [pc, #252]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	4313      	orrs	r3, r2
 8004acc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d028      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004adc:	4b3a      	ldr	r3, [pc, #232]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aea:	4937      	ldr	r1, [pc, #220]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aec:	4313      	orrs	r3, r2
 8004aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004af6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004afa:	d106      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004afc:	4b32      	ldr	r3, [pc, #200]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	4a31      	ldr	r2, [pc, #196]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b06:	60d3      	str	r3, [r2, #12]
 8004b08:	e011      	b.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b0e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b12:	d10c      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	3304      	adds	r3, #4
 8004b18:	2101      	movs	r1, #1
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f8c8 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004b20:	4603      	mov	r3, r0
 8004b22:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b24:	7cfb      	ldrb	r3, [r7, #19]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b2a:	7cfb      	ldrb	r3, [r7, #19]
 8004b2c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d028      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b3a:	4b23      	ldr	r3, [pc, #140]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	491f      	ldr	r1, [pc, #124]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b58:	d106      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b5a:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4a1a      	ldr	r2, [pc, #104]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b64:	60d3      	str	r3, [r2, #12]
 8004b66:	e011      	b.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b70:	d10c      	bne.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2101      	movs	r1, #1
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 f899 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b82:	7cfb      	ldrb	r3, [r7, #19]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004b88:	7cfb      	ldrb	r3, [r7, #19]
 8004b8a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d02b      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004b98:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ba6:	4908      	ldr	r1, [pc, #32]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb6:	d109      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bb8:	4b03      	ldr	r3, [pc, #12]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4a02      	ldr	r2, [pc, #8]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bc2:	60d3      	str	r3, [r2, #12]
 8004bc4:	e014      	b.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004bc6:	bf00      	nop
 8004bc8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	3304      	adds	r3, #4
 8004bda:	2101      	movs	r1, #1
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f867 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004be2:	4603      	mov	r3, r0
 8004be4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004be6:	7cfb      	ldrb	r3, [r7, #19]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d001      	beq.n	8004bf0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004bec:	7cfb      	ldrb	r3, [r7, #19]
 8004bee:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d02f      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004bfc:	4b2b      	ldr	r3, [pc, #172]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c0a:	4928      	ldr	r1, [pc, #160]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c1a:	d10d      	bne.n	8004c38 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	3304      	adds	r3, #4
 8004c20:	2102      	movs	r1, #2
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 f844 	bl	8004cb0 <RCCEx_PLLSAI1_Config>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c2c:	7cfb      	ldrb	r3, [r7, #19]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d014      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c32:	7cfb      	ldrb	r3, [r7, #19]
 8004c34:	74bb      	strb	r3, [r7, #18]
 8004c36:	e011      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c40:	d10c      	bne.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3320      	adds	r3, #32
 8004c46:	2102      	movs	r1, #2
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f000 f925 	bl	8004e98 <RCCEx_PLLSAI2_Config>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c52:	7cfb      	ldrb	r3, [r7, #19]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d001      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c58:	7cfb      	ldrb	r3, [r7, #19]
 8004c5a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d00a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c68:	4b10      	ldr	r3, [pc, #64]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c6e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c76:	490d      	ldr	r1, [pc, #52]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00b      	beq.n	8004ca2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c90:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c9a:	4904      	ldr	r1, [pc, #16]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ca2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3718      	adds	r7, #24
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000

08004cb0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004cbe:	4b75      	ldr	r3, [pc, #468]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f003 0303 	and.w	r3, r3, #3
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d018      	beq.n	8004cfc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004cca:	4b72      	ldr	r3, [pc, #456]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0203 	and.w	r2, r3, #3
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d10d      	bne.n	8004cf6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
       ||
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d009      	beq.n	8004cf6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	091b      	lsrs	r3, r3, #4
 8004ce8:	f003 0307 	and.w	r3, r3, #7
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
       ||
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d047      	beq.n	8004d86 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
 8004cfa:	e044      	b.n	8004d86 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d018      	beq.n	8004d36 <RCCEx_PLLSAI1_Config+0x86>
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d825      	bhi.n	8004d54 <RCCEx_PLLSAI1_Config+0xa4>
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d002      	beq.n	8004d12 <RCCEx_PLLSAI1_Config+0x62>
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d009      	beq.n	8004d24 <RCCEx_PLLSAI1_Config+0x74>
 8004d10:	e020      	b.n	8004d54 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d12:	4b60      	ldr	r3, [pc, #384]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d11d      	bne.n	8004d5a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d22:	e01a      	b.n	8004d5a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d24:	4b5b      	ldr	r3, [pc, #364]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d116      	bne.n	8004d5e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d34:	e013      	b.n	8004d5e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d36:	4b57      	ldr	r3, [pc, #348]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10f      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d42:	4b54      	ldr	r3, [pc, #336]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d52:	e006      	b.n	8004d62 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	73fb      	strb	r3, [r7, #15]
      break;
 8004d58:	e004      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004d62:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d64:	7bfb      	ldrb	r3, [r7, #15]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10d      	bne.n	8004d86 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	3b01      	subs	r3, #1
 8004d7c:	011b      	lsls	r3, r3, #4
 8004d7e:	430b      	orrs	r3, r1
 8004d80:	4944      	ldr	r1, [pc, #272]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004d86:	7bfb      	ldrb	r3, [r7, #15]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d17d      	bne.n	8004e88 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004d8c:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a40      	ldr	r2, [pc, #256]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d92:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d98:	f7fd fb9e 	bl	80024d8 <HAL_GetTick>
 8004d9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004d9e:	e009      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004da0:	f7fd fb9a 	bl	80024d8 <HAL_GetTick>
 8004da4:	4602      	mov	r2, r0
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	1ad3      	subs	r3, r2, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d902      	bls.n	8004db4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	73fb      	strb	r3, [r7, #15]
        break;
 8004db2:	e005      	b.n	8004dc0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004db4:	4b37      	ldr	r3, [pc, #220]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d1ef      	bne.n	8004da0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d160      	bne.n	8004e88 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d111      	bne.n	8004df0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004dcc:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6892      	ldr	r2, [r2, #8]
 8004ddc:	0211      	lsls	r1, r2, #8
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	68d2      	ldr	r2, [r2, #12]
 8004de2:	0912      	lsrs	r2, r2, #4
 8004de4:	0452      	lsls	r2, r2, #17
 8004de6:	430a      	orrs	r2, r1
 8004de8:	492a      	ldr	r1, [pc, #168]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	610b      	str	r3, [r1, #16]
 8004dee:	e027      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2b01      	cmp	r3, #1
 8004df4:	d112      	bne.n	8004e1c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004df6:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df8:	691b      	ldr	r3, [r3, #16]
 8004dfa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004dfe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6892      	ldr	r2, [r2, #8]
 8004e06:	0211      	lsls	r1, r2, #8
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6912      	ldr	r2, [r2, #16]
 8004e0c:	0852      	lsrs	r2, r2, #1
 8004e0e:	3a01      	subs	r2, #1
 8004e10:	0552      	lsls	r2, r2, #21
 8004e12:	430a      	orrs	r2, r1
 8004e14:	491f      	ldr	r1, [pc, #124]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	610b      	str	r3, [r1, #16]
 8004e1a:	e011      	b.n	8004e40 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e1c:	4b1d      	ldr	r3, [pc, #116]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e24:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6892      	ldr	r2, [r2, #8]
 8004e2c:	0211      	lsls	r1, r2, #8
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	6952      	ldr	r2, [r2, #20]
 8004e32:	0852      	lsrs	r2, r2, #1
 8004e34:	3a01      	subs	r2, #1
 8004e36:	0652      	lsls	r2, r2, #25
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	4916      	ldr	r1, [pc, #88]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e40:	4b14      	ldr	r3, [pc, #80]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e46:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e4a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4c:	f7fd fb44 	bl	80024d8 <HAL_GetTick>
 8004e50:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e52:	e009      	b.n	8004e68 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e54:	f7fd fb40 	bl	80024d8 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d902      	bls.n	8004e68 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004e62:	2303      	movs	r3, #3
 8004e64:	73fb      	strb	r3, [r7, #15]
          break;
 8004e66:	e005      	b.n	8004e74 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e68:	4b0a      	ldr	r3, [pc, #40]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d0ef      	beq.n	8004e54 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d106      	bne.n	8004e88 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004e7a:	4b06      	ldr	r3, [pc, #24]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e7c:	691a      	ldr	r2, [r3, #16]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	699b      	ldr	r3, [r3, #24]
 8004e82:	4904      	ldr	r1, [pc, #16]	; (8004e94 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e84:	4313      	orrs	r3, r2
 8004e86:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3710      	adds	r7, #16
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	40021000 	.word	0x40021000

08004e98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ea6:	4b6a      	ldr	r3, [pc, #424]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d018      	beq.n	8004ee4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004eb2:	4b67      	ldr	r3, [pc, #412]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f003 0203 	and.w	r2, r3, #3
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d10d      	bne.n	8004ede <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004eca:	4b61      	ldr	r3, [pc, #388]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	091b      	lsrs	r3, r3, #4
 8004ed0:	f003 0307 	and.w	r3, r3, #7
 8004ed4:	1c5a      	adds	r2, r3, #1
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
       ||
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d047      	beq.n	8004f6e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	e044      	b.n	8004f6e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b03      	cmp	r3, #3
 8004eea:	d018      	beq.n	8004f1e <RCCEx_PLLSAI2_Config+0x86>
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d825      	bhi.n	8004f3c <RCCEx_PLLSAI2_Config+0xa4>
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d002      	beq.n	8004efa <RCCEx_PLLSAI2_Config+0x62>
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d009      	beq.n	8004f0c <RCCEx_PLLSAI2_Config+0x74>
 8004ef8:	e020      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004efa:	4b55      	ldr	r3, [pc, #340]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d11d      	bne.n	8004f42 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f0a:	e01a      	b.n	8004f42 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f0c:	4b50      	ldr	r3, [pc, #320]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d116      	bne.n	8004f46 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f1c:	e013      	b.n	8004f46 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f1e:	4b4c      	ldr	r3, [pc, #304]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10f      	bne.n	8004f4a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f2a:	4b49      	ldr	r3, [pc, #292]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d109      	bne.n	8004f4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f3a:	e006      	b.n	8004f4a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f40:	e004      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f42:	bf00      	nop
 8004f44:	e002      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f46:	bf00      	nop
 8004f48:	e000      	b.n	8004f4c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f4a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004f4c:	7bfb      	ldrb	r3, [r7, #15]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10d      	bne.n	8004f6e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004f52:	4b3f      	ldr	r3, [pc, #252]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6819      	ldr	r1, [r3, #0]
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	011b      	lsls	r3, r3, #4
 8004f66:	430b      	orrs	r3, r1
 8004f68:	4939      	ldr	r1, [pc, #228]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d167      	bne.n	8005044 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004f74:	4b36      	ldr	r3, [pc, #216]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a35      	ldr	r2, [pc, #212]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f80:	f7fd faaa 	bl	80024d8 <HAL_GetTick>
 8004f84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f86:	e009      	b.n	8004f9c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f88:	f7fd faa6 	bl	80024d8 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d902      	bls.n	8004f9c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	73fb      	strb	r3, [r7, #15]
        break;
 8004f9a:	e005      	b.n	8004fa8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004f9c:	4b2c      	ldr	r3, [pc, #176]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1ef      	bne.n	8004f88 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d14a      	bne.n	8005044 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d111      	bne.n	8004fd8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fb4:	4b26      	ldr	r3, [pc, #152]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fc0:	687a      	ldr	r2, [r7, #4]
 8004fc2:	6892      	ldr	r2, [r2, #8]
 8004fc4:	0211      	lsls	r1, r2, #8
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	68d2      	ldr	r2, [r2, #12]
 8004fca:	0912      	lsrs	r2, r2, #4
 8004fcc:	0452      	lsls	r2, r2, #17
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	491f      	ldr	r1, [pc, #124]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	614b      	str	r3, [r1, #20]
 8004fd6:	e011      	b.n	8004ffc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004fd8:	4b1d      	ldr	r3, [pc, #116]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004fe0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	6892      	ldr	r2, [r2, #8]
 8004fe8:	0211      	lsls	r1, r2, #8
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	6912      	ldr	r2, [r2, #16]
 8004fee:	0852      	lsrs	r2, r2, #1
 8004ff0:	3a01      	subs	r2, #1
 8004ff2:	0652      	lsls	r2, r2, #25
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	4916      	ldr	r1, [pc, #88]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004ffc:	4b14      	ldr	r3, [pc, #80]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005006:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005008:	f7fd fa66 	bl	80024d8 <HAL_GetTick>
 800500c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800500e:	e009      	b.n	8005024 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005010:	f7fd fa62 	bl	80024d8 <HAL_GetTick>
 8005014:	4602      	mov	r2, r0
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	2b02      	cmp	r3, #2
 800501c:	d902      	bls.n	8005024 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	73fb      	strb	r3, [r7, #15]
          break;
 8005022:	e005      	b.n	8005030 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005024:	4b0a      	ldr	r3, [pc, #40]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d0ef      	beq.n	8005010 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005030:	7bfb      	ldrb	r3, [r7, #15]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d106      	bne.n	8005044 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005036:	4b06      	ldr	r3, [pc, #24]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005038:	695a      	ldr	r2, [r3, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	4904      	ldr	r1, [pc, #16]	; (8005050 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005040:	4313      	orrs	r3, r2
 8005042:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	40021000 	.word	0x40021000

08005054 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d101      	bne.n	8005066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e040      	b.n	80050e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7fc fa9e 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2224      	movs	r2, #36	; 0x24
 8005080:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fc18 	bl	80058c8 <UART_SetConfig>
 8005098:	4603      	mov	r3, r0
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e022      	b.n	80050e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d002      	beq.n	80050b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 fe96 	bl	8005ddc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685a      	ldr	r2, [r3, #4]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80050be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80050ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 ff1d 	bl	8005f20 <UART_CheckIdleState>
 80050e6:	4603      	mov	r3, r0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	603b      	str	r3, [r7, #0]
 80050fc:	4613      	mov	r3, r2
 80050fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005104:	2b20      	cmp	r3, #32
 8005106:	f040 8082 	bne.w	800520e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <HAL_UART_Transmit+0x26>
 8005110:	88fb      	ldrh	r3, [r7, #6]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	e07a      	b.n	8005210 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005120:	2b01      	cmp	r3, #1
 8005122:	d101      	bne.n	8005128 <HAL_UART_Transmit+0x38>
 8005124:	2302      	movs	r3, #2
 8005126:	e073      	b.n	8005210 <HAL_UART_Transmit+0x120>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2200      	movs	r2, #0
 8005134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	2221      	movs	r2, #33	; 0x21
 800513c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800513e:	f7fd f9cb 	bl	80024d8 <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	88fa      	ldrh	r2, [r7, #6]
 8005148:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	88fa      	ldrh	r2, [r7, #6]
 8005150:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800515c:	d108      	bne.n	8005170 <HAL_UART_Transmit+0x80>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d104      	bne.n	8005170 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005166:	2300      	movs	r3, #0
 8005168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	e003      	b.n	8005178 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005180:	e02d      	b.n	80051de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	2200      	movs	r2, #0
 800518a:	2180      	movs	r1, #128	; 0x80
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f000 ff10 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	e039      	b.n	8005210 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10b      	bne.n	80051ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051ae:	b292      	uxth	r2, r2
 80051b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80051b2:	69bb      	ldr	r3, [r7, #24]
 80051b4:	3302      	adds	r3, #2
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e008      	b.n	80051cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	781a      	ldrb	r2, [r3, #0]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	b292      	uxth	r2, r2
 80051c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	3301      	adds	r3, #1
 80051ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	3b01      	subs	r3, #1
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80051e4:	b29b      	uxth	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1cb      	bne.n	8005182 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2200      	movs	r2, #0
 80051f2:	2140      	movs	r1, #64	; 0x40
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f000 fedc 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 80051fa:	4603      	mov	r3, r0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d001      	beq.n	8005204 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005200:	2303      	movs	r3, #3
 8005202:	e005      	b.n	8005210 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	e000      	b.n	8005210 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800520e:	2302      	movs	r3, #2
  }
}
 8005210:	4618      	mov	r0, r3
 8005212:	3720      	adds	r7, #32
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800522a:	2b20      	cmp	r3, #32
 800522c:	d142      	bne.n	80052b4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800522e:	68bb      	ldr	r3, [r7, #8]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <HAL_UART_Receive_IT+0x22>
 8005234:	88fb      	ldrh	r3, [r7, #6]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e03b      	b.n	80052b6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005244:	2b01      	cmp	r3, #1
 8005246:	d101      	bne.n	800524c <HAL_UART_Receive_IT+0x34>
 8005248:	2302      	movs	r3, #2
 800524a:	e034      	b.n	80052b6 <HAL_UART_Receive_IT+0x9e>
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2201      	movs	r2, #1
 8005250:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a18      	ldr	r2, [pc, #96]	; (80052c0 <HAL_UART_Receive_IT+0xa8>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d01f      	beq.n	80052a4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d018      	beq.n	80052a4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	e853 3f00 	ldrex	r3, [r3]
 800527e:	613b      	str	r3, [r7, #16]
   return(result);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005290:	623b      	str	r3, [r7, #32]
 8005292:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005294:	69f9      	ldr	r1, [r7, #28]
 8005296:	6a3a      	ldr	r2, [r7, #32]
 8005298:	e841 2300 	strex	r3, r2, [r1]
 800529c:	61bb      	str	r3, [r7, #24]
   return(result);
 800529e:	69bb      	ldr	r3, [r7, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1e6      	bne.n	8005272 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052a4:	88fb      	ldrh	r3, [r7, #6]
 80052a6:	461a      	mov	r2, r3
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 ff46 	bl	800613c <UART_Start_Receive_IT>
 80052b0:	4603      	mov	r3, r0
 80052b2:	e000      	b.n	80052b6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3728      	adds	r7, #40	; 0x28
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	40008000 	.word	0x40008000

080052c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b0ba      	sub	sp, #232	; 0xe8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80052ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80052ee:	f640 030f 	movw	r3, #2063	; 0x80f
 80052f2:	4013      	ands	r3, r2
 80052f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80052f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d115      	bne.n	800532c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005304:	f003 0320 	and.w	r3, r3, #32
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00f      	beq.n	800532c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800530c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005310:	f003 0320 	and.w	r3, r3, #32
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 82a6 	beq.w	800586e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	4798      	blx	r3
      }
      return;
 800532a:	e2a0      	b.n	800586e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800532c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005330:	2b00      	cmp	r3, #0
 8005332:	f000 8117 	beq.w	8005564 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b00      	cmp	r3, #0
 8005340:	d106      	bne.n	8005350 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005342:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005346:	4b85      	ldr	r3, [pc, #532]	; (800555c <HAL_UART_IRQHandler+0x298>)
 8005348:	4013      	ands	r3, r2
 800534a:	2b00      	cmp	r3, #0
 800534c:	f000 810a 	beq.w	8005564 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005354:	f003 0301 	and.w	r3, r3, #1
 8005358:	2b00      	cmp	r3, #0
 800535a:	d011      	beq.n	8005380 <HAL_UART_IRQHandler+0xbc>
 800535c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2201      	movs	r2, #1
 800536e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005384:	f003 0302 	and.w	r3, r3, #2
 8005388:	2b00      	cmp	r3, #0
 800538a:	d011      	beq.n	80053b0 <HAL_UART_IRQHandler+0xec>
 800538c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2202      	movs	r2, #2
 800539e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053a6:	f043 0204 	orr.w	r2, r3, #4
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b4:	f003 0304 	and.w	r3, r3, #4
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d011      	beq.n	80053e0 <HAL_UART_IRQHandler+0x11c>
 80053bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00b      	beq.n	80053e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2204      	movs	r2, #4
 80053ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053d6:	f043 0202 	orr.w	r2, r3, #2
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80053e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053e4:	f003 0308 	and.w	r3, r3, #8
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d017      	beq.n	800541c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80053ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f0:	f003 0320 	and.w	r3, r3, #32
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d105      	bne.n	8005404 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80053f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005400:	2b00      	cmp	r3, #0
 8005402:	d00b      	beq.n	800541c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2208      	movs	r2, #8
 800540a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005412:	f043 0208 	orr.w	r2, r3, #8
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800541c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005424:	2b00      	cmp	r3, #0
 8005426:	d012      	beq.n	800544e <HAL_UART_IRQHandler+0x18a>
 8005428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800542c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00c      	beq.n	800544e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800543c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005444:	f043 0220 	orr.w	r2, r3, #32
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 820c 	beq.w	8005872 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d00d      	beq.n	8005482 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546a:	f003 0320 	and.w	r3, r3, #32
 800546e:	2b00      	cmp	r3, #0
 8005470:	d007      	beq.n	8005482 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005476:	2b00      	cmp	r3, #0
 8005478:	d003      	beq.n	8005482 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800547e:	6878      	ldr	r0, [r7, #4]
 8005480:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005488:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d005      	beq.n	80054a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800549a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800549e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d04f      	beq.n	8005546 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f000 ff12 	bl	80062d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b6:	2b40      	cmp	r3, #64	; 0x40
 80054b8:	d141      	bne.n	800553e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3308      	adds	r3, #8
 80054c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054c8:	e853 3f00 	ldrex	r3, [r3]
 80054cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3308      	adds	r3, #8
 80054e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054f6:	e841 2300 	strex	r3, r2, [r1]
 80054fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1d9      	bne.n	80054ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800550a:	2b00      	cmp	r3, #0
 800550c:	d013      	beq.n	8005536 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005512:	4a13      	ldr	r2, [pc, #76]	; (8005560 <HAL_UART_IRQHandler+0x29c>)
 8005514:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551a:	4618      	mov	r0, r3
 800551c:	f7fd f937 	bl	800278e <HAL_DMA_Abort_IT>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d017      	beq.n	8005556 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800552a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005530:	4610      	mov	r0, r2
 8005532:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005534:	e00f      	b.n	8005556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 f9b0 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800553c:	e00b      	b.n	8005556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f9ac 	bl	800589c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005544:	e007      	b.n	8005556 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f9a8 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005554:	e18d      	b.n	8005872 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005556:	bf00      	nop
    return;
 8005558:	e18b      	b.n	8005872 <HAL_UART_IRQHandler+0x5ae>
 800555a:	bf00      	nop
 800555c:	04000120 	.word	0x04000120
 8005560:	08006397 	.word	0x08006397

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005568:	2b01      	cmp	r3, #1
 800556a:	f040 8146 	bne.w	80057fa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800556e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005572:	f003 0310 	and.w	r3, r3, #16
 8005576:	2b00      	cmp	r3, #0
 8005578:	f000 813f 	beq.w	80057fa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800557c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8138 	beq.w	80057fa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2210      	movs	r2, #16
 8005590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	f040 80b4 	bne.w	800570a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 815f 	beq.w	8005876 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80055be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c2:	429a      	cmp	r2, r3
 80055c4:	f080 8157 	bcs.w	8005876 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 8085 	bne.w	80056ee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055f0:	e853 3f00 	ldrex	r3, [r3]
 80055f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	461a      	mov	r2, r3
 800560a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800560e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005612:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800561a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1da      	bne.n	80055e4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3308      	adds	r3, #8
 8005634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005638:	e853 3f00 	ldrex	r3, [r3]
 800563c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800563e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005640:	f023 0301 	bic.w	r3, r3, #1
 8005644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3308      	adds	r3, #8
 800564e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800565a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800565e:	e841 2300 	strex	r3, r2, [r1]
 8005662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005666:	2b00      	cmp	r3, #0
 8005668:	d1e1      	bne.n	800562e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3308      	adds	r3, #8
 8005670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800567a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800567c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	3308      	adds	r3, #8
 800568a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800568e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800569c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e3      	bne.n	800566a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2220      	movs	r2, #32
 80056a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2200      	movs	r2, #0
 80056ac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056be:	f023 0310 	bic.w	r3, r3, #16
 80056c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	461a      	mov	r2, r3
 80056cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80056d0:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056d6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056d8:	e841 2300 	strex	r3, r2, [r1]
 80056dc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1e4      	bne.n	80056ae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4618      	mov	r0, r3
 80056ea:	f7fd f812 	bl	8002712 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	b29b      	uxth	r3, r3
 8005700:	4619      	mov	r1, r3
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f8d4 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005708:	e0b5      	b.n	8005876 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005716:	b29b      	uxth	r3, r3
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 80a7 	beq.w	800587a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800572c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 80a2 	beq.w	800587a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573e:	e853 3f00 	ldrex	r3, [r3]
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005744:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800574a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	461a      	mov	r2, r3
 8005754:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005758:	647b      	str	r3, [r7, #68]	; 0x44
 800575a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800575e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005760:	e841 2300 	strex	r3, r2, [r1]
 8005764:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1e4      	bne.n	8005736 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3308      	adds	r3, #8
 8005772:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	e853 3f00 	ldrex	r3, [r3]
 800577a:	623b      	str	r3, [r7, #32]
   return(result);
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	f023 0301 	bic.w	r3, r3, #1
 8005782:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005790:	633a      	str	r2, [r7, #48]	; 0x30
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005796:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e3      	bne.n	800576c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057bc:	693b      	ldr	r3, [r7, #16]
 80057be:	e853 3f00 	ldrex	r3, [r3]
 80057c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	f023 0310 	bic.w	r3, r3, #16
 80057ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80057d8:	61fb      	str	r3, [r7, #28]
 80057da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057dc:	69b9      	ldr	r1, [r7, #24]
 80057de:	69fa      	ldr	r2, [r7, #28]
 80057e0:	e841 2300 	strex	r3, r2, [r1]
 80057e4:	617b      	str	r3, [r7, #20]
   return(result);
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e4      	bne.n	80057b6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057f0:	4619      	mov	r1, r3
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f000 f85c 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80057f8:	e03f      	b.n	800587a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00e      	beq.n	8005824 <HAL_UART_IRQHandler+0x560>
 8005806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d008      	beq.n	8005824 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800581a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 ff5a 	bl	80066d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005822:	e02d      	b.n	8005880 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00e      	beq.n	800584e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005830:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005838:	2b00      	cmp	r3, #0
 800583a:	d008      	beq.n	800584e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005840:	2b00      	cmp	r3, #0
 8005842:	d01c      	beq.n	800587e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	4798      	blx	r3
    }
    return;
 800584c:	e017      	b.n	800587e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <HAL_UART_IRQHandler+0x5bc>
 800585a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800585e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00c      	beq.n	8005880 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fdab 	bl	80063c2 <UART_EndTransmit_IT>
    return;
 800586c:	e008      	b.n	8005880 <HAL_UART_IRQHandler+0x5bc>
      return;
 800586e:	bf00      	nop
 8005870:	e006      	b.n	8005880 <HAL_UART_IRQHandler+0x5bc>
    return;
 8005872:	bf00      	nop
 8005874:	e004      	b.n	8005880 <HAL_UART_IRQHandler+0x5bc>
      return;
 8005876:	bf00      	nop
 8005878:	e002      	b.n	8005880 <HAL_UART_IRQHandler+0x5bc>
      return;
 800587a:	bf00      	nop
 800587c:	e000      	b.n	8005880 <HAL_UART_IRQHandler+0x5bc>
    return;
 800587e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005880:	37e8      	adds	r7, #232	; 0xe8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop

08005888 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058c8:	b5b0      	push	{r4, r5, r7, lr}
 80058ca:	b088      	sub	sp, #32
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	431a      	orrs	r2, r3
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	695b      	ldr	r3, [r3, #20]
 80058e2:	431a      	orrs	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	69db      	ldr	r3, [r3, #28]
 80058e8:	4313      	orrs	r3, r2
 80058ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681a      	ldr	r2, [r3, #0]
 80058f2:	4bad      	ldr	r3, [pc, #692]	; (8005ba8 <UART_SetConfig+0x2e0>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	69f9      	ldr	r1, [r7, #28]
 80058fc:	430b      	orrs	r3, r1
 80058fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68da      	ldr	r2, [r3, #12]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4aa2      	ldr	r2, [pc, #648]	; (8005bac <UART_SetConfig+0x2e4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d004      	beq.n	8005930 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a1b      	ldr	r3, [r3, #32]
 800592a:	69fa      	ldr	r2, [r7, #28]
 800592c:	4313      	orrs	r3, r2
 800592e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	430a      	orrs	r2, r1
 8005942:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a99      	ldr	r2, [pc, #612]	; (8005bb0 <UART_SetConfig+0x2e8>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d121      	bne.n	8005992 <UART_SetConfig+0xca>
 800594e:	4b99      	ldr	r3, [pc, #612]	; (8005bb4 <UART_SetConfig+0x2ec>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005954:	f003 0303 	and.w	r3, r3, #3
 8005958:	2b03      	cmp	r3, #3
 800595a:	d817      	bhi.n	800598c <UART_SetConfig+0xc4>
 800595c:	a201      	add	r2, pc, #4	; (adr r2, 8005964 <UART_SetConfig+0x9c>)
 800595e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005962:	bf00      	nop
 8005964:	08005975 	.word	0x08005975
 8005968:	08005981 	.word	0x08005981
 800596c:	0800597b 	.word	0x0800597b
 8005970:	08005987 	.word	0x08005987
 8005974:	2301      	movs	r3, #1
 8005976:	76fb      	strb	r3, [r7, #27]
 8005978:	e0e7      	b.n	8005b4a <UART_SetConfig+0x282>
 800597a:	2302      	movs	r3, #2
 800597c:	76fb      	strb	r3, [r7, #27]
 800597e:	e0e4      	b.n	8005b4a <UART_SetConfig+0x282>
 8005980:	2304      	movs	r3, #4
 8005982:	76fb      	strb	r3, [r7, #27]
 8005984:	e0e1      	b.n	8005b4a <UART_SetConfig+0x282>
 8005986:	2308      	movs	r3, #8
 8005988:	76fb      	strb	r3, [r7, #27]
 800598a:	e0de      	b.n	8005b4a <UART_SetConfig+0x282>
 800598c:	2310      	movs	r3, #16
 800598e:	76fb      	strb	r3, [r7, #27]
 8005990:	e0db      	b.n	8005b4a <UART_SetConfig+0x282>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a88      	ldr	r2, [pc, #544]	; (8005bb8 <UART_SetConfig+0x2f0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d132      	bne.n	8005a02 <UART_SetConfig+0x13a>
 800599c:	4b85      	ldr	r3, [pc, #532]	; (8005bb4 <UART_SetConfig+0x2ec>)
 800599e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a2:	f003 030c 	and.w	r3, r3, #12
 80059a6:	2b0c      	cmp	r3, #12
 80059a8:	d828      	bhi.n	80059fc <UART_SetConfig+0x134>
 80059aa:	a201      	add	r2, pc, #4	; (adr r2, 80059b0 <UART_SetConfig+0xe8>)
 80059ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b0:	080059e5 	.word	0x080059e5
 80059b4:	080059fd 	.word	0x080059fd
 80059b8:	080059fd 	.word	0x080059fd
 80059bc:	080059fd 	.word	0x080059fd
 80059c0:	080059f1 	.word	0x080059f1
 80059c4:	080059fd 	.word	0x080059fd
 80059c8:	080059fd 	.word	0x080059fd
 80059cc:	080059fd 	.word	0x080059fd
 80059d0:	080059eb 	.word	0x080059eb
 80059d4:	080059fd 	.word	0x080059fd
 80059d8:	080059fd 	.word	0x080059fd
 80059dc:	080059fd 	.word	0x080059fd
 80059e0:	080059f7 	.word	0x080059f7
 80059e4:	2300      	movs	r3, #0
 80059e6:	76fb      	strb	r3, [r7, #27]
 80059e8:	e0af      	b.n	8005b4a <UART_SetConfig+0x282>
 80059ea:	2302      	movs	r3, #2
 80059ec:	76fb      	strb	r3, [r7, #27]
 80059ee:	e0ac      	b.n	8005b4a <UART_SetConfig+0x282>
 80059f0:	2304      	movs	r3, #4
 80059f2:	76fb      	strb	r3, [r7, #27]
 80059f4:	e0a9      	b.n	8005b4a <UART_SetConfig+0x282>
 80059f6:	2308      	movs	r3, #8
 80059f8:	76fb      	strb	r3, [r7, #27]
 80059fa:	e0a6      	b.n	8005b4a <UART_SetConfig+0x282>
 80059fc:	2310      	movs	r3, #16
 80059fe:	76fb      	strb	r3, [r7, #27]
 8005a00:	e0a3      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4a6d      	ldr	r2, [pc, #436]	; (8005bbc <UART_SetConfig+0x2f4>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d120      	bne.n	8005a4e <UART_SetConfig+0x186>
 8005a0c:	4b69      	ldr	r3, [pc, #420]	; (8005bb4 <UART_SetConfig+0x2ec>)
 8005a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a16:	2b30      	cmp	r3, #48	; 0x30
 8005a18:	d013      	beq.n	8005a42 <UART_SetConfig+0x17a>
 8005a1a:	2b30      	cmp	r3, #48	; 0x30
 8005a1c:	d814      	bhi.n	8005a48 <UART_SetConfig+0x180>
 8005a1e:	2b20      	cmp	r3, #32
 8005a20:	d009      	beq.n	8005a36 <UART_SetConfig+0x16e>
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d810      	bhi.n	8005a48 <UART_SetConfig+0x180>
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d002      	beq.n	8005a30 <UART_SetConfig+0x168>
 8005a2a:	2b10      	cmp	r3, #16
 8005a2c:	d006      	beq.n	8005a3c <UART_SetConfig+0x174>
 8005a2e:	e00b      	b.n	8005a48 <UART_SetConfig+0x180>
 8005a30:	2300      	movs	r3, #0
 8005a32:	76fb      	strb	r3, [r7, #27]
 8005a34:	e089      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a36:	2302      	movs	r3, #2
 8005a38:	76fb      	strb	r3, [r7, #27]
 8005a3a:	e086      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a3c:	2304      	movs	r3, #4
 8005a3e:	76fb      	strb	r3, [r7, #27]
 8005a40:	e083      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a42:	2308      	movs	r3, #8
 8005a44:	76fb      	strb	r3, [r7, #27]
 8005a46:	e080      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a48:	2310      	movs	r3, #16
 8005a4a:	76fb      	strb	r3, [r7, #27]
 8005a4c:	e07d      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a5b      	ldr	r2, [pc, #364]	; (8005bc0 <UART_SetConfig+0x2f8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d120      	bne.n	8005a9a <UART_SetConfig+0x1d2>
 8005a58:	4b56      	ldr	r3, [pc, #344]	; (8005bb4 <UART_SetConfig+0x2ec>)
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a62:	2bc0      	cmp	r3, #192	; 0xc0
 8005a64:	d013      	beq.n	8005a8e <UART_SetConfig+0x1c6>
 8005a66:	2bc0      	cmp	r3, #192	; 0xc0
 8005a68:	d814      	bhi.n	8005a94 <UART_SetConfig+0x1cc>
 8005a6a:	2b80      	cmp	r3, #128	; 0x80
 8005a6c:	d009      	beq.n	8005a82 <UART_SetConfig+0x1ba>
 8005a6e:	2b80      	cmp	r3, #128	; 0x80
 8005a70:	d810      	bhi.n	8005a94 <UART_SetConfig+0x1cc>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <UART_SetConfig+0x1b4>
 8005a76:	2b40      	cmp	r3, #64	; 0x40
 8005a78:	d006      	beq.n	8005a88 <UART_SetConfig+0x1c0>
 8005a7a:	e00b      	b.n	8005a94 <UART_SetConfig+0x1cc>
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	76fb      	strb	r3, [r7, #27]
 8005a80:	e063      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a82:	2302      	movs	r3, #2
 8005a84:	76fb      	strb	r3, [r7, #27]
 8005a86:	e060      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a88:	2304      	movs	r3, #4
 8005a8a:	76fb      	strb	r3, [r7, #27]
 8005a8c:	e05d      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a8e:	2308      	movs	r3, #8
 8005a90:	76fb      	strb	r3, [r7, #27]
 8005a92:	e05a      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a94:	2310      	movs	r3, #16
 8005a96:	76fb      	strb	r3, [r7, #27]
 8005a98:	e057      	b.n	8005b4a <UART_SetConfig+0x282>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a49      	ldr	r2, [pc, #292]	; (8005bc4 <UART_SetConfig+0x2fc>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d125      	bne.n	8005af0 <UART_SetConfig+0x228>
 8005aa4:	4b43      	ldr	r3, [pc, #268]	; (8005bb4 <UART_SetConfig+0x2ec>)
 8005aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab2:	d017      	beq.n	8005ae4 <UART_SetConfig+0x21c>
 8005ab4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ab8:	d817      	bhi.n	8005aea <UART_SetConfig+0x222>
 8005aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005abe:	d00b      	beq.n	8005ad8 <UART_SetConfig+0x210>
 8005ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac4:	d811      	bhi.n	8005aea <UART_SetConfig+0x222>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d003      	beq.n	8005ad2 <UART_SetConfig+0x20a>
 8005aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ace:	d006      	beq.n	8005ade <UART_SetConfig+0x216>
 8005ad0:	e00b      	b.n	8005aea <UART_SetConfig+0x222>
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	76fb      	strb	r3, [r7, #27]
 8005ad6:	e038      	b.n	8005b4a <UART_SetConfig+0x282>
 8005ad8:	2302      	movs	r3, #2
 8005ada:	76fb      	strb	r3, [r7, #27]
 8005adc:	e035      	b.n	8005b4a <UART_SetConfig+0x282>
 8005ade:	2304      	movs	r3, #4
 8005ae0:	76fb      	strb	r3, [r7, #27]
 8005ae2:	e032      	b.n	8005b4a <UART_SetConfig+0x282>
 8005ae4:	2308      	movs	r3, #8
 8005ae6:	76fb      	strb	r3, [r7, #27]
 8005ae8:	e02f      	b.n	8005b4a <UART_SetConfig+0x282>
 8005aea:	2310      	movs	r3, #16
 8005aec:	76fb      	strb	r3, [r7, #27]
 8005aee:	e02c      	b.n	8005b4a <UART_SetConfig+0x282>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a2d      	ldr	r2, [pc, #180]	; (8005bac <UART_SetConfig+0x2e4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d125      	bne.n	8005b46 <UART_SetConfig+0x27e>
 8005afa:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <UART_SetConfig+0x2ec>)
 8005afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b08:	d017      	beq.n	8005b3a <UART_SetConfig+0x272>
 8005b0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b0e:	d817      	bhi.n	8005b40 <UART_SetConfig+0x278>
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b14:	d00b      	beq.n	8005b2e <UART_SetConfig+0x266>
 8005b16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b1a:	d811      	bhi.n	8005b40 <UART_SetConfig+0x278>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d003      	beq.n	8005b28 <UART_SetConfig+0x260>
 8005b20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b24:	d006      	beq.n	8005b34 <UART_SetConfig+0x26c>
 8005b26:	e00b      	b.n	8005b40 <UART_SetConfig+0x278>
 8005b28:	2300      	movs	r3, #0
 8005b2a:	76fb      	strb	r3, [r7, #27]
 8005b2c:	e00d      	b.n	8005b4a <UART_SetConfig+0x282>
 8005b2e:	2302      	movs	r3, #2
 8005b30:	76fb      	strb	r3, [r7, #27]
 8005b32:	e00a      	b.n	8005b4a <UART_SetConfig+0x282>
 8005b34:	2304      	movs	r3, #4
 8005b36:	76fb      	strb	r3, [r7, #27]
 8005b38:	e007      	b.n	8005b4a <UART_SetConfig+0x282>
 8005b3a:	2308      	movs	r3, #8
 8005b3c:	76fb      	strb	r3, [r7, #27]
 8005b3e:	e004      	b.n	8005b4a <UART_SetConfig+0x282>
 8005b40:	2310      	movs	r3, #16
 8005b42:	76fb      	strb	r3, [r7, #27]
 8005b44:	e001      	b.n	8005b4a <UART_SetConfig+0x282>
 8005b46:	2310      	movs	r3, #16
 8005b48:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a17      	ldr	r2, [pc, #92]	; (8005bac <UART_SetConfig+0x2e4>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	f040 8087 	bne.w	8005c64 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005b56:	7efb      	ldrb	r3, [r7, #27]
 8005b58:	2b08      	cmp	r3, #8
 8005b5a:	d837      	bhi.n	8005bcc <UART_SetConfig+0x304>
 8005b5c:	a201      	add	r2, pc, #4	; (adr r2, 8005b64 <UART_SetConfig+0x29c>)
 8005b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b62:	bf00      	nop
 8005b64:	08005b89 	.word	0x08005b89
 8005b68:	08005bcd 	.word	0x08005bcd
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005bcd 	.word	0x08005bcd
 8005b74:	08005b97 	.word	0x08005b97
 8005b78:	08005bcd 	.word	0x08005bcd
 8005b7c:	08005bcd 	.word	0x08005bcd
 8005b80:	08005bcd 	.word	0x08005bcd
 8005b84:	08005b9f 	.word	0x08005b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005b88:	f7fe fd1c 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8005b8c:	6178      	str	r0, [r7, #20]
        break;
 8005b8e:	e022      	b.n	8005bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005b90:	4b0d      	ldr	r3, [pc, #52]	; (8005bc8 <UART_SetConfig+0x300>)
 8005b92:	617b      	str	r3, [r7, #20]
        break;
 8005b94:	e01f      	b.n	8005bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005b96:	f7fe fc7d 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8005b9a:	6178      	str	r0, [r7, #20]
        break;
 8005b9c:	e01b      	b.n	8005bd6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ba2:	617b      	str	r3, [r7, #20]
        break;
 8005ba4:	e017      	b.n	8005bd6 <UART_SetConfig+0x30e>
 8005ba6:	bf00      	nop
 8005ba8:	efff69f3 	.word	0xefff69f3
 8005bac:	40008000 	.word	0x40008000
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	40004400 	.word	0x40004400
 8005bbc:	40004800 	.word	0x40004800
 8005bc0:	40004c00 	.word	0x40004c00
 8005bc4:	40005000 	.word	0x40005000
 8005bc8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	76bb      	strb	r3, [r7, #26]
        break;
 8005bd4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	f000 80f1 	beq.w	8005dc0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d305      	bcc.n	8005bfa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	685b      	ldr	r3, [r3, #4]
 8005bf2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d902      	bls.n	8005c00 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	76bb      	strb	r3, [r7, #26]
 8005bfe:	e0df      	b.n	8005dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f04f 0100 	mov.w	r1, #0
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	020b      	lsls	r3, r1, #8
 8005c12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c16:	0202      	lsls	r2, r0, #8
 8005c18:	6879      	ldr	r1, [r7, #4]
 8005c1a:	6849      	ldr	r1, [r1, #4]
 8005c1c:	0849      	lsrs	r1, r1, #1
 8005c1e:	4608      	mov	r0, r1
 8005c20:	f04f 0100 	mov.w	r1, #0
 8005c24:	1814      	adds	r4, r2, r0
 8005c26:	eb43 0501 	adc.w	r5, r3, r1
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	461a      	mov	r2, r3
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa fd06 	bl	8000648 <__aeabi_uldivmod>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
 8005c40:	4613      	mov	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c4a:	d308      	bcc.n	8005c5e <UART_SetConfig+0x396>
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c52:	d204      	bcs.n	8005c5e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	60da      	str	r2, [r3, #12]
 8005c5c:	e0b0      	b.n	8005dc0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	76bb      	strb	r3, [r7, #26]
 8005c62:	e0ad      	b.n	8005dc0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	69db      	ldr	r3, [r3, #28]
 8005c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c6c:	d15b      	bne.n	8005d26 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005c6e:	7efb      	ldrb	r3, [r7, #27]
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d828      	bhi.n	8005cc6 <UART_SetConfig+0x3fe>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x3b4>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	08005cc7 	.word	0x08005cc7
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fe fc90 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	6178      	str	r0, [r7, #20]
        break;
 8005ca6:	e013      	b.n	8005cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe fca2 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 8005cac:	6178      	str	r0, [r7, #20]
        break;
 8005cae:	e00f      	b.n	8005cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b49      	ldr	r3, [pc, #292]	; (8005dd8 <UART_SetConfig+0x510>)
 8005cb2:	617b      	str	r3, [r7, #20]
        break;
 8005cb4:	e00c      	b.n	8005cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fe fbed 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8005cba:	6178      	str	r0, [r7, #20]
        break;
 8005cbc:	e008      	b.n	8005cd0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	617b      	str	r3, [r7, #20]
        break;
 8005cc4:	e004      	b.n	8005cd0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	76bb      	strb	r3, [r7, #26]
        break;
 8005cce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d074      	beq.n	8005dc0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	005a      	lsls	r2, r3, #1
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	085b      	lsrs	r3, r3, #1
 8005ce0:	441a      	add	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d916      	bls.n	8005d20 <UART_SetConfig+0x458>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d212      	bcs.n	8005d20 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	f023 030f 	bic.w	r3, r3, #15
 8005d02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	085b      	lsrs	r3, r3, #1
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	f003 0307 	and.w	r3, r3, #7
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	89fb      	ldrh	r3, [r7, #14]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	89fa      	ldrh	r2, [r7, #14]
 8005d1c:	60da      	str	r2, [r3, #12]
 8005d1e:	e04f      	b.n	8005dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	76bb      	strb	r3, [r7, #26]
 8005d24:	e04c      	b.n	8005dc0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d26:	7efb      	ldrb	r3, [r7, #27]
 8005d28:	2b08      	cmp	r3, #8
 8005d2a:	d828      	bhi.n	8005d7e <UART_SetConfig+0x4b6>
 8005d2c:	a201      	add	r2, pc, #4	; (adr r2, 8005d34 <UART_SetConfig+0x46c>)
 8005d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d32:	bf00      	nop
 8005d34:	08005d59 	.word	0x08005d59
 8005d38:	08005d61 	.word	0x08005d61
 8005d3c:	08005d69 	.word	0x08005d69
 8005d40:	08005d7f 	.word	0x08005d7f
 8005d44:	08005d6f 	.word	0x08005d6f
 8005d48:	08005d7f 	.word	0x08005d7f
 8005d4c:	08005d7f 	.word	0x08005d7f
 8005d50:	08005d7f 	.word	0x08005d7f
 8005d54:	08005d77 	.word	0x08005d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d58:	f7fe fc34 	bl	80045c4 <HAL_RCC_GetPCLK1Freq>
 8005d5c:	6178      	str	r0, [r7, #20]
        break;
 8005d5e:	e013      	b.n	8005d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d60:	f7fe fc46 	bl	80045f0 <HAL_RCC_GetPCLK2Freq>
 8005d64:	6178      	str	r0, [r7, #20]
        break;
 8005d66:	e00f      	b.n	8005d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d68:	4b1b      	ldr	r3, [pc, #108]	; (8005dd8 <UART_SetConfig+0x510>)
 8005d6a:	617b      	str	r3, [r7, #20]
        break;
 8005d6c:	e00c      	b.n	8005d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6e:	f7fe fb91 	bl	8004494 <HAL_RCC_GetSysClockFreq>
 8005d72:	6178      	str	r0, [r7, #20]
        break;
 8005d74:	e008      	b.n	8005d88 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d7a:	617b      	str	r3, [r7, #20]
        break;
 8005d7c:	e004      	b.n	8005d88 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d82:	2301      	movs	r3, #1
 8005d84:	76bb      	strb	r3, [r7, #26]
        break;
 8005d86:	bf00      	nop
    }

    if (pclk != 0U)
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	085a      	lsrs	r2, r3, #1
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	441a      	add	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	685b      	ldr	r3, [r3, #4]
 8005d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005da0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	2b0f      	cmp	r3, #15
 8005da6:	d909      	bls.n	8005dbc <UART_SetConfig+0x4f4>
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dae:	d205      	bcs.n	8005dbc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005db0:	693b      	ldr	r3, [r7, #16]
 8005db2:	b29a      	uxth	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60da      	str	r2, [r3, #12]
 8005dba:	e001      	b.n	8005dc0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005dcc:	7ebb      	ldrb	r3, [r7, #26]
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3720      	adds	r7, #32
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bdb0      	pop	{r4, r5, r7, pc}
 8005dd6:	bf00      	nop
 8005dd8:	00f42400 	.word	0x00f42400

08005ddc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de8:	f003 0301 	and.w	r3, r3, #1
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d00a      	beq.n	8005e06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	430a      	orrs	r2, r1
 8005e04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00a      	beq.n	8005e4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d00a      	beq.n	8005e6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	430a      	orrs	r2, r1
 8005e6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e70:	f003 0310 	and.w	r3, r3, #16
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	f003 0320 	and.w	r3, r3, #32
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00a      	beq.n	8005eb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	430a      	orrs	r2, r1
 8005eae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d01a      	beq.n	8005ef2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005eda:	d10a      	bne.n	8005ef2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	430a      	orrs	r2, r1
 8005ef0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00a      	beq.n	8005f14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	430a      	orrs	r2, r1
 8005f12:	605a      	str	r2, [r3, #4]
  }
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b086      	sub	sp, #24
 8005f24:	af02      	add	r7, sp, #8
 8005f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f30:	f7fc fad2 	bl	80024d8 <HAL_GetTick>
 8005f34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f003 0308 	and.w	r3, r3, #8
 8005f40:	2b08      	cmp	r3, #8
 8005f42:	d10e      	bne.n	8005f62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f82d 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d001      	beq.n	8005f62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f5e:	2303      	movs	r3, #3
 8005f60:	e023      	b.n	8005faa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0304 	and.w	r3, r3, #4
 8005f6c:	2b04      	cmp	r3, #4
 8005f6e:	d10e      	bne.n	8005f8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f74:	9300      	str	r3, [sp, #0]
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f817 	bl	8005fb2 <UART_WaitOnFlagUntilTimeout>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e00d      	b.n	8005faa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2220      	movs	r2, #32
 8005f92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2220      	movs	r2, #32
 8005f98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005fa8:	2300      	movs	r3, #0
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b09c      	sub	sp, #112	; 0x70
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fc2:	e0a5      	b.n	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fca:	f000 80a1 	beq.w	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fce:	f7fc fa83 	bl	80024d8 <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x32>
 8005fde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d13e      	bne.n	8006062 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fec:	e853 3f00 	ldrex	r3, [r3]
 8005ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ff4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006004:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006006:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006008:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800600a:	e841 2300 	strex	r3, r2, [r1]
 800600e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006010:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006012:	2b00      	cmp	r3, #0
 8006014:	d1e6      	bne.n	8005fe4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	3308      	adds	r3, #8
 800601c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800601e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006020:	e853 3f00 	ldrex	r3, [r3]
 8006024:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006028:	f023 0301 	bic.w	r3, r3, #1
 800602c:	663b      	str	r3, [r7, #96]	; 0x60
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3308      	adds	r3, #8
 8006034:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006036:	64ba      	str	r2, [r7, #72]	; 0x48
 8006038:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800603c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800603e:	e841 2300 	strex	r3, r2, [r1]
 8006042:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006044:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006046:	2b00      	cmp	r3, #0
 8006048:	d1e5      	bne.n	8006016 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2220      	movs	r2, #32
 800604e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800605e:	2303      	movs	r3, #3
 8006060:	e067      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d04f      	beq.n	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	69db      	ldr	r3, [r3, #28]
 8006076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800607a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800607e:	d147      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006088:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006092:	e853 3f00 	ldrex	r3, [r3]
 8006096:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800609a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800609e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a8:	637b      	str	r3, [r7, #52]	; 0x34
 80060aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80060ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80060b0:	e841 2300 	strex	r3, r2, [r1]
 80060b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80060b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1e6      	bne.n	800608a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	3308      	adds	r3, #8
 80060c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	e853 3f00 	ldrex	r3, [r3]
 80060ca:	613b      	str	r3, [r7, #16]
   return(result);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	f023 0301 	bic.w	r3, r3, #1
 80060d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	3308      	adds	r3, #8
 80060da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80060dc:	623a      	str	r2, [r7, #32]
 80060de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e0:	69f9      	ldr	r1, [r7, #28]
 80060e2:	6a3a      	ldr	r2, [r7, #32]
 80060e4:	e841 2300 	strex	r3, r2, [r1]
 80060e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e5      	bne.n	80060bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2220      	movs	r2, #32
 80060f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2220      	movs	r2, #32
 8006100:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	e010      	b.n	8006132 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	69da      	ldr	r2, [r3, #28]
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	4013      	ands	r3, r2
 800611a:	68ba      	ldr	r2, [r7, #8]
 800611c:	429a      	cmp	r2, r3
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	461a      	mov	r2, r3
 8006128:	79fb      	ldrb	r3, [r7, #7]
 800612a:	429a      	cmp	r2, r3
 800612c:	f43f af4a 	beq.w	8005fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006130:	2300      	movs	r3, #0
}
 8006132:	4618      	mov	r0, r3
 8006134:	3770      	adds	r7, #112	; 0x70
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
	...

0800613c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800613c:	b480      	push	{r7}
 800613e:	b097      	sub	sp, #92	; 0x5c
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	4613      	mov	r3, r2
 8006148:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	68ba      	ldr	r2, [r7, #8]
 800614e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	88fa      	ldrh	r2, [r7, #6]
 8006154:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	88fa      	ldrh	r2, [r7, #6]
 800615c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	689b      	ldr	r3, [r3, #8]
 800616a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800616e:	d10e      	bne.n	800618e <UART_Start_Receive_IT+0x52>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	691b      	ldr	r3, [r3, #16]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d105      	bne.n	8006184 <UART_Start_Receive_IT+0x48>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800617e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006182:	e02d      	b.n	80061e0 <UART_Start_Receive_IT+0xa4>
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	22ff      	movs	r2, #255	; 0xff
 8006188:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800618c:	e028      	b.n	80061e0 <UART_Start_Receive_IT+0xa4>
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10d      	bne.n	80061b2 <UART_Start_Receive_IT+0x76>
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d104      	bne.n	80061a8 <UART_Start_Receive_IT+0x6c>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	22ff      	movs	r2, #255	; 0xff
 80061a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061a6:	e01b      	b.n	80061e0 <UART_Start_Receive_IT+0xa4>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	227f      	movs	r2, #127	; 0x7f
 80061ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061b0:	e016      	b.n	80061e0 <UART_Start_Receive_IT+0xa4>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80061ba:	d10d      	bne.n	80061d8 <UART_Start_Receive_IT+0x9c>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d104      	bne.n	80061ce <UART_Start_Receive_IT+0x92>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	227f      	movs	r2, #127	; 0x7f
 80061c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061cc:	e008      	b.n	80061e0 <UART_Start_Receive_IT+0xa4>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	223f      	movs	r2, #63	; 0x3f
 80061d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061d6:	e003      	b.n	80061e0 <UART_Start_Receive_IT+0xa4>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2200      	movs	r2, #0
 80061dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2200      	movs	r2, #0
 80061e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2222      	movs	r2, #34	; 0x22
 80061ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	3308      	adds	r3, #8
 80061f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f8:	e853 3f00 	ldrex	r3, [r3]
 80061fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006200:	f043 0301 	orr.w	r3, r3, #1
 8006204:	657b      	str	r3, [r7, #84]	; 0x54
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800620e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006216:	e841 2300 	strex	r3, r2, [r1]
 800621a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800621c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1e5      	bne.n	80061ee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800622a:	d107      	bne.n	800623c <UART_Start_Receive_IT+0x100>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d103      	bne.n	800623c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	4a24      	ldr	r2, [pc, #144]	; (80062c8 <UART_Start_Receive_IT+0x18c>)
 8006238:	665a      	str	r2, [r3, #100]	; 0x64
 800623a:	e002      	b.n	8006242 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	4a23      	ldr	r2, [pc, #140]	; (80062cc <UART_Start_Receive_IT+0x190>)
 8006240:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d019      	beq.n	8006286 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800625a:	e853 3f00 	ldrex	r3, [r3]
 800625e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006262:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006266:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
 8006272:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006274:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006278:	e841 2300 	strex	r3, r2, [r1]
 800627c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800627e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006280:	2b00      	cmp	r3, #0
 8006282:	d1e6      	bne.n	8006252 <UART_Start_Receive_IT+0x116>
 8006284:	e018      	b.n	80062b8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	e853 3f00 	ldrex	r3, [r3]
 8006292:	613b      	str	r3, [r7, #16]
   return(result);
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	f043 0320 	orr.w	r3, r3, #32
 800629a:	653b      	str	r3, [r7, #80]	; 0x50
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	461a      	mov	r2, r3
 80062a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062a4:	623b      	str	r3, [r7, #32]
 80062a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a8:	69f9      	ldr	r1, [r7, #28]
 80062aa:	6a3a      	ldr	r2, [r7, #32]
 80062ac:	e841 2300 	strex	r3, r2, [r1]
 80062b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d1e6      	bne.n	8006286 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	375c      	adds	r7, #92	; 0x5c
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr
 80062c6:	bf00      	nop
 80062c8:	08006577 	.word	0x08006577
 80062cc:	08006417 	.word	0x08006417

080062d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b095      	sub	sp, #84	; 0x54
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062e0:	e853 3f00 	ldrex	r3, [r3]
 80062e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80062e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	461a      	mov	r2, r3
 80062f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062f6:	643b      	str	r3, [r7, #64]	; 0x40
 80062f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80062fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062fe:	e841 2300 	strex	r3, r2, [r1]
 8006302:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006306:	2b00      	cmp	r3, #0
 8006308:	d1e6      	bne.n	80062d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	3308      	adds	r3, #8
 8006310:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	e853 3f00 	ldrex	r3, [r3]
 8006318:	61fb      	str	r3, [r7, #28]
   return(result);
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	f023 0301 	bic.w	r3, r3, #1
 8006320:	64bb      	str	r3, [r7, #72]	; 0x48
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3308      	adds	r3, #8
 8006328:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800632a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800632c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006330:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006332:	e841 2300 	strex	r3, r2, [r1]
 8006336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633a:	2b00      	cmp	r3, #0
 800633c:	d1e5      	bne.n	800630a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006342:	2b01      	cmp	r3, #1
 8006344:	d118      	bne.n	8006378 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	60bb      	str	r3, [r7, #8]
   return(result);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f023 0310 	bic.w	r3, r3, #16
 800635a:	647b      	str	r3, [r7, #68]	; 0x44
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	461a      	mov	r2, r3
 8006362:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006364:	61bb      	str	r3, [r7, #24]
 8006366:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006368:	6979      	ldr	r1, [r7, #20]
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	e841 2300 	strex	r3, r2, [r1]
 8006370:	613b      	str	r3, [r7, #16]
   return(result);
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1e6      	bne.n	8006346 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	665a      	str	r2, [r3, #100]	; 0x64
}
 800638a:	bf00      	nop
 800638c:	3754      	adds	r7, #84	; 0x54
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006396:	b580      	push	{r7, lr}
 8006398:	b084      	sub	sp, #16
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063b4:	68f8      	ldr	r0, [r7, #12]
 80063b6:	f7ff fa71 	bl	800589c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063ba:	bf00      	nop
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063c2:	b580      	push	{r7, lr}
 80063c4:	b088      	sub	sp, #32
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80063de:	61fb      	str	r3, [r7, #28]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	61bb      	str	r3, [r7, #24]
 80063ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6979      	ldr	r1, [r7, #20]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	613b      	str	r3, [r7, #16]
   return(result);
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2220      	movs	r2, #32
 8006400:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f7ff fa3d 	bl	8005888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640e:	bf00      	nop
 8006410:	3720      	adds	r7, #32
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b096      	sub	sp, #88	; 0x58
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006424:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800642c:	2b22      	cmp	r3, #34	; 0x22
 800642e:	f040 8094 	bne.w	800655a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006438:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800643c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006440:	b2d9      	uxtb	r1, r3
 8006442:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006446:	b2da      	uxtb	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644c:	400a      	ands	r2, r1
 800644e:	b2d2      	uxtb	r2, r2
 8006450:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006462:	b29b      	uxth	r3, r3
 8006464:	3b01      	subs	r3, #1
 8006466:	b29a      	uxth	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d179      	bne.n	800656e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006482:	e853 3f00 	ldrex	r3, [r3]
 8006486:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800648e:	653b      	str	r3, [r7, #80]	; 0x50
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	461a      	mov	r2, r3
 8006496:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006498:	647b      	str	r3, [r7, #68]	; 0x44
 800649a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800649e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064a0:	e841 2300 	strex	r3, r2, [r1]
 80064a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d1e6      	bne.n	800647a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3308      	adds	r3, #8
 80064b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	623b      	str	r3, [r7, #32]
   return(result);
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	f023 0301 	bic.w	r3, r3, #1
 80064c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	3308      	adds	r3, #8
 80064ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80064cc:	633a      	str	r2, [r7, #48]	; 0x30
 80064ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80064d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064d4:	e841 2300 	strex	r3, r2, [r1]
 80064d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80064da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d1e5      	bne.n	80064ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d12e      	bne.n	8006552 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2200      	movs	r2, #0
 80064f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	e853 3f00 	ldrex	r3, [r3]
 8006506:	60fb      	str	r3, [r7, #12]
   return(result);
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	f023 0310 	bic.w	r3, r3, #16
 800650e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	461a      	mov	r2, r3
 8006516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651c:	69b9      	ldr	r1, [r7, #24]
 800651e:	69fa      	ldr	r2, [r7, #28]
 8006520:	e841 2300 	strex	r3, r2, [r1]
 8006524:	617b      	str	r3, [r7, #20]
   return(result);
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1e6      	bne.n	80064fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69db      	ldr	r3, [r3, #28]
 8006532:	f003 0310 	and.w	r3, r3, #16
 8006536:	2b10      	cmp	r3, #16
 8006538:	d103      	bne.n	8006542 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	2210      	movs	r2, #16
 8006540:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006548:	4619      	mov	r1, r3
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7ff f9b0 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006550:	e00d      	b.n	800656e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7fa ff4c 	bl	80013f0 <HAL_UART_RxCpltCallback>
}
 8006558:	e009      	b.n	800656e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	8b1b      	ldrh	r3, [r3, #24]
 8006560:	b29a      	uxth	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f042 0208 	orr.w	r2, r2, #8
 800656a:	b292      	uxth	r2, r2
 800656c:	831a      	strh	r2, [r3, #24]
}
 800656e:	bf00      	nop
 8006570:	3758      	adds	r7, #88	; 0x58
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006576:	b580      	push	{r7, lr}
 8006578:	b096      	sub	sp, #88	; 0x58
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006584:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800658c:	2b22      	cmp	r3, #34	; 0x22
 800658e:	f040 8094 	bne.w	80066ba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006598:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80065a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80065a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065aa:	4013      	ands	r3, r2
 80065ac:	b29a      	uxth	r2, r3
 80065ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065b6:	1c9a      	adds	r2, r3, #2
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065c2:	b29b      	uxth	r3, r3
 80065c4:	3b01      	subs	r3, #1
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80065d4:	b29b      	uxth	r3, r3
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d179      	bne.n	80066ce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e2:	e853 3f00 	ldrex	r3, [r3]
 80065e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	461a      	mov	r2, r3
 80065f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065f8:	643b      	str	r3, [r7, #64]	; 0x40
 80065fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006600:	e841 2300 	strex	r3, r2, [r1]
 8006604:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1e6      	bne.n	80065da <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	3308      	adds	r3, #8
 8006612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	e853 3f00 	ldrex	r3, [r3]
 800661a:	61fb      	str	r3, [r7, #28]
   return(result);
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	64bb      	str	r3, [r7, #72]	; 0x48
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800662c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800662e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006634:	e841 2300 	strex	r3, r2, [r1]
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e5      	bne.n	800660c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2220      	movs	r2, #32
 8006644:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006650:	2b01      	cmp	r3, #1
 8006652:	d12e      	bne.n	80066b2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	60bb      	str	r3, [r7, #8]
   return(result);
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	f023 0310 	bic.w	r3, r3, #16
 800666e:	647b      	str	r3, [r7, #68]	; 0x44
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	461a      	mov	r2, r3
 8006676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006678:	61bb      	str	r3, [r7, #24]
 800667a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6979      	ldr	r1, [r7, #20]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	613b      	str	r3, [r7, #16]
   return(result);
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e6      	bne.n	800665a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b10      	cmp	r3, #16
 8006698:	d103      	bne.n	80066a2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2210      	movs	r2, #16
 80066a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066a8:	4619      	mov	r1, r3
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f7ff f900 	bl	80058b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80066b0:	e00d      	b.n	80066ce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fa fe9c 	bl	80013f0 <HAL_UART_RxCpltCallback>
}
 80066b8:	e009      	b.n	80066ce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	8b1b      	ldrh	r3, [r3, #24]
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f042 0208 	orr.w	r2, r2, #8
 80066ca:	b292      	uxth	r2, r2
 80066cc:	831a      	strh	r2, [r3, #24]
}
 80066ce:	bf00      	nop
 80066d0:	3758      	adds	r7, #88	; 0x58
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
	...

080066ec <__errno>:
 80066ec:	4b01      	ldr	r3, [pc, #4]	; (80066f4 <__errno+0x8>)
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	4770      	bx	lr
 80066f2:	bf00      	nop
 80066f4:	20000128 	.word	0x20000128

080066f8 <__libc_init_array>:
 80066f8:	b570      	push	{r4, r5, r6, lr}
 80066fa:	4d0d      	ldr	r5, [pc, #52]	; (8006730 <__libc_init_array+0x38>)
 80066fc:	4c0d      	ldr	r4, [pc, #52]	; (8006734 <__libc_init_array+0x3c>)
 80066fe:	1b64      	subs	r4, r4, r5
 8006700:	10a4      	asrs	r4, r4, #2
 8006702:	2600      	movs	r6, #0
 8006704:	42a6      	cmp	r6, r4
 8006706:	d109      	bne.n	800671c <__libc_init_array+0x24>
 8006708:	4d0b      	ldr	r5, [pc, #44]	; (8006738 <__libc_init_array+0x40>)
 800670a:	4c0c      	ldr	r4, [pc, #48]	; (800673c <__libc_init_array+0x44>)
 800670c:	f000 fc94 	bl	8007038 <_init>
 8006710:	1b64      	subs	r4, r4, r5
 8006712:	10a4      	asrs	r4, r4, #2
 8006714:	2600      	movs	r6, #0
 8006716:	42a6      	cmp	r6, r4
 8006718:	d105      	bne.n	8006726 <__libc_init_array+0x2e>
 800671a:	bd70      	pop	{r4, r5, r6, pc}
 800671c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006720:	4798      	blx	r3
 8006722:	3601      	adds	r6, #1
 8006724:	e7ee      	b.n	8006704 <__libc_init_array+0xc>
 8006726:	f855 3b04 	ldr.w	r3, [r5], #4
 800672a:	4798      	blx	r3
 800672c:	3601      	adds	r6, #1
 800672e:	e7f2      	b.n	8006716 <__libc_init_array+0x1e>
 8006730:	08007158 	.word	0x08007158
 8006734:	08007158 	.word	0x08007158
 8006738:	08007158 	.word	0x08007158
 800673c:	0800715c 	.word	0x0800715c

08006740 <memcpy>:
 8006740:	440a      	add	r2, r1
 8006742:	4291      	cmp	r1, r2
 8006744:	f100 33ff 	add.w	r3, r0, #4294967295
 8006748:	d100      	bne.n	800674c <memcpy+0xc>
 800674a:	4770      	bx	lr
 800674c:	b510      	push	{r4, lr}
 800674e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006752:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006756:	4291      	cmp	r1, r2
 8006758:	d1f9      	bne.n	800674e <memcpy+0xe>
 800675a:	bd10      	pop	{r4, pc}

0800675c <memset>:
 800675c:	4402      	add	r2, r0
 800675e:	4603      	mov	r3, r0
 8006760:	4293      	cmp	r3, r2
 8006762:	d100      	bne.n	8006766 <memset+0xa>
 8006764:	4770      	bx	lr
 8006766:	f803 1b01 	strb.w	r1, [r3], #1
 800676a:	e7f9      	b.n	8006760 <memset+0x4>

0800676c <sniprintf>:
 800676c:	b40c      	push	{r2, r3}
 800676e:	b530      	push	{r4, r5, lr}
 8006770:	4b17      	ldr	r3, [pc, #92]	; (80067d0 <sniprintf+0x64>)
 8006772:	1e0c      	subs	r4, r1, #0
 8006774:	681d      	ldr	r5, [r3, #0]
 8006776:	b09d      	sub	sp, #116	; 0x74
 8006778:	da08      	bge.n	800678c <sniprintf+0x20>
 800677a:	238b      	movs	r3, #139	; 0x8b
 800677c:	602b      	str	r3, [r5, #0]
 800677e:	f04f 30ff 	mov.w	r0, #4294967295
 8006782:	b01d      	add	sp, #116	; 0x74
 8006784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006788:	b002      	add	sp, #8
 800678a:	4770      	bx	lr
 800678c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006790:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006794:	bf14      	ite	ne
 8006796:	f104 33ff 	addne.w	r3, r4, #4294967295
 800679a:	4623      	moveq	r3, r4
 800679c:	9304      	str	r3, [sp, #16]
 800679e:	9307      	str	r3, [sp, #28]
 80067a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067a4:	9002      	str	r0, [sp, #8]
 80067a6:	9006      	str	r0, [sp, #24]
 80067a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80067ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80067ae:	ab21      	add	r3, sp, #132	; 0x84
 80067b0:	a902      	add	r1, sp, #8
 80067b2:	4628      	mov	r0, r5
 80067b4:	9301      	str	r3, [sp, #4]
 80067b6:	f000 f869 	bl	800688c <_svfiprintf_r>
 80067ba:	1c43      	adds	r3, r0, #1
 80067bc:	bfbc      	itt	lt
 80067be:	238b      	movlt	r3, #139	; 0x8b
 80067c0:	602b      	strlt	r3, [r5, #0]
 80067c2:	2c00      	cmp	r4, #0
 80067c4:	d0dd      	beq.n	8006782 <sniprintf+0x16>
 80067c6:	9b02      	ldr	r3, [sp, #8]
 80067c8:	2200      	movs	r2, #0
 80067ca:	701a      	strb	r2, [r3, #0]
 80067cc:	e7d9      	b.n	8006782 <sniprintf+0x16>
 80067ce:	bf00      	nop
 80067d0:	20000128 	.word	0x20000128

080067d4 <__ssputs_r>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	688e      	ldr	r6, [r1, #8]
 80067da:	429e      	cmp	r6, r3
 80067dc:	4682      	mov	sl, r0
 80067de:	460c      	mov	r4, r1
 80067e0:	4690      	mov	r8, r2
 80067e2:	461f      	mov	r7, r3
 80067e4:	d838      	bhi.n	8006858 <__ssputs_r+0x84>
 80067e6:	898a      	ldrh	r2, [r1, #12]
 80067e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067ec:	d032      	beq.n	8006854 <__ssputs_r+0x80>
 80067ee:	6825      	ldr	r5, [r4, #0]
 80067f0:	6909      	ldr	r1, [r1, #16]
 80067f2:	eba5 0901 	sub.w	r9, r5, r1
 80067f6:	6965      	ldr	r5, [r4, #20]
 80067f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006800:	3301      	adds	r3, #1
 8006802:	444b      	add	r3, r9
 8006804:	106d      	asrs	r5, r5, #1
 8006806:	429d      	cmp	r5, r3
 8006808:	bf38      	it	cc
 800680a:	461d      	movcc	r5, r3
 800680c:	0553      	lsls	r3, r2, #21
 800680e:	d531      	bpl.n	8006874 <__ssputs_r+0xa0>
 8006810:	4629      	mov	r1, r5
 8006812:	f000 fb39 	bl	8006e88 <_malloc_r>
 8006816:	4606      	mov	r6, r0
 8006818:	b950      	cbnz	r0, 8006830 <__ssputs_r+0x5c>
 800681a:	230c      	movs	r3, #12
 800681c:	f8ca 3000 	str.w	r3, [sl]
 8006820:	89a3      	ldrh	r3, [r4, #12]
 8006822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	f04f 30ff 	mov.w	r0, #4294967295
 800682c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006830:	6921      	ldr	r1, [r4, #16]
 8006832:	464a      	mov	r2, r9
 8006834:	f7ff ff84 	bl	8006740 <memcpy>
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800683e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006842:	81a3      	strh	r3, [r4, #12]
 8006844:	6126      	str	r6, [r4, #16]
 8006846:	6165      	str	r5, [r4, #20]
 8006848:	444e      	add	r6, r9
 800684a:	eba5 0509 	sub.w	r5, r5, r9
 800684e:	6026      	str	r6, [r4, #0]
 8006850:	60a5      	str	r5, [r4, #8]
 8006852:	463e      	mov	r6, r7
 8006854:	42be      	cmp	r6, r7
 8006856:	d900      	bls.n	800685a <__ssputs_r+0x86>
 8006858:	463e      	mov	r6, r7
 800685a:	4632      	mov	r2, r6
 800685c:	6820      	ldr	r0, [r4, #0]
 800685e:	4641      	mov	r1, r8
 8006860:	f000 faa8 	bl	8006db4 <memmove>
 8006864:	68a3      	ldr	r3, [r4, #8]
 8006866:	6822      	ldr	r2, [r4, #0]
 8006868:	1b9b      	subs	r3, r3, r6
 800686a:	4432      	add	r2, r6
 800686c:	60a3      	str	r3, [r4, #8]
 800686e:	6022      	str	r2, [r4, #0]
 8006870:	2000      	movs	r0, #0
 8006872:	e7db      	b.n	800682c <__ssputs_r+0x58>
 8006874:	462a      	mov	r2, r5
 8006876:	f000 fb61 	bl	8006f3c <_realloc_r>
 800687a:	4606      	mov	r6, r0
 800687c:	2800      	cmp	r0, #0
 800687e:	d1e1      	bne.n	8006844 <__ssputs_r+0x70>
 8006880:	6921      	ldr	r1, [r4, #16]
 8006882:	4650      	mov	r0, sl
 8006884:	f000 fab0 	bl	8006de8 <_free_r>
 8006888:	e7c7      	b.n	800681a <__ssputs_r+0x46>
	...

0800688c <_svfiprintf_r>:
 800688c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006890:	4698      	mov	r8, r3
 8006892:	898b      	ldrh	r3, [r1, #12]
 8006894:	061b      	lsls	r3, r3, #24
 8006896:	b09d      	sub	sp, #116	; 0x74
 8006898:	4607      	mov	r7, r0
 800689a:	460d      	mov	r5, r1
 800689c:	4614      	mov	r4, r2
 800689e:	d50e      	bpl.n	80068be <_svfiprintf_r+0x32>
 80068a0:	690b      	ldr	r3, [r1, #16]
 80068a2:	b963      	cbnz	r3, 80068be <_svfiprintf_r+0x32>
 80068a4:	2140      	movs	r1, #64	; 0x40
 80068a6:	f000 faef 	bl	8006e88 <_malloc_r>
 80068aa:	6028      	str	r0, [r5, #0]
 80068ac:	6128      	str	r0, [r5, #16]
 80068ae:	b920      	cbnz	r0, 80068ba <_svfiprintf_r+0x2e>
 80068b0:	230c      	movs	r3, #12
 80068b2:	603b      	str	r3, [r7, #0]
 80068b4:	f04f 30ff 	mov.w	r0, #4294967295
 80068b8:	e0d1      	b.n	8006a5e <_svfiprintf_r+0x1d2>
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	616b      	str	r3, [r5, #20]
 80068be:	2300      	movs	r3, #0
 80068c0:	9309      	str	r3, [sp, #36]	; 0x24
 80068c2:	2320      	movs	r3, #32
 80068c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80068cc:	2330      	movs	r3, #48	; 0x30
 80068ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a78 <_svfiprintf_r+0x1ec>
 80068d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068d6:	f04f 0901 	mov.w	r9, #1
 80068da:	4623      	mov	r3, r4
 80068dc:	469a      	mov	sl, r3
 80068de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068e2:	b10a      	cbz	r2, 80068e8 <_svfiprintf_r+0x5c>
 80068e4:	2a25      	cmp	r2, #37	; 0x25
 80068e6:	d1f9      	bne.n	80068dc <_svfiprintf_r+0x50>
 80068e8:	ebba 0b04 	subs.w	fp, sl, r4
 80068ec:	d00b      	beq.n	8006906 <_svfiprintf_r+0x7a>
 80068ee:	465b      	mov	r3, fp
 80068f0:	4622      	mov	r2, r4
 80068f2:	4629      	mov	r1, r5
 80068f4:	4638      	mov	r0, r7
 80068f6:	f7ff ff6d 	bl	80067d4 <__ssputs_r>
 80068fa:	3001      	adds	r0, #1
 80068fc:	f000 80aa 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006900:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006902:	445a      	add	r2, fp
 8006904:	9209      	str	r2, [sp, #36]	; 0x24
 8006906:	f89a 3000 	ldrb.w	r3, [sl]
 800690a:	2b00      	cmp	r3, #0
 800690c:	f000 80a2 	beq.w	8006a54 <_svfiprintf_r+0x1c8>
 8006910:	2300      	movs	r3, #0
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800691a:	f10a 0a01 	add.w	sl, sl, #1
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	9307      	str	r3, [sp, #28]
 8006922:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006926:	931a      	str	r3, [sp, #104]	; 0x68
 8006928:	4654      	mov	r4, sl
 800692a:	2205      	movs	r2, #5
 800692c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006930:	4851      	ldr	r0, [pc, #324]	; (8006a78 <_svfiprintf_r+0x1ec>)
 8006932:	f7f9 fc55 	bl	80001e0 <memchr>
 8006936:	9a04      	ldr	r2, [sp, #16]
 8006938:	b9d8      	cbnz	r0, 8006972 <_svfiprintf_r+0xe6>
 800693a:	06d0      	lsls	r0, r2, #27
 800693c:	bf44      	itt	mi
 800693e:	2320      	movmi	r3, #32
 8006940:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006944:	0711      	lsls	r1, r2, #28
 8006946:	bf44      	itt	mi
 8006948:	232b      	movmi	r3, #43	; 0x2b
 800694a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800694e:	f89a 3000 	ldrb.w	r3, [sl]
 8006952:	2b2a      	cmp	r3, #42	; 0x2a
 8006954:	d015      	beq.n	8006982 <_svfiprintf_r+0xf6>
 8006956:	9a07      	ldr	r2, [sp, #28]
 8006958:	4654      	mov	r4, sl
 800695a:	2000      	movs	r0, #0
 800695c:	f04f 0c0a 	mov.w	ip, #10
 8006960:	4621      	mov	r1, r4
 8006962:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006966:	3b30      	subs	r3, #48	; 0x30
 8006968:	2b09      	cmp	r3, #9
 800696a:	d94e      	bls.n	8006a0a <_svfiprintf_r+0x17e>
 800696c:	b1b0      	cbz	r0, 800699c <_svfiprintf_r+0x110>
 800696e:	9207      	str	r2, [sp, #28]
 8006970:	e014      	b.n	800699c <_svfiprintf_r+0x110>
 8006972:	eba0 0308 	sub.w	r3, r0, r8
 8006976:	fa09 f303 	lsl.w	r3, r9, r3
 800697a:	4313      	orrs	r3, r2
 800697c:	9304      	str	r3, [sp, #16]
 800697e:	46a2      	mov	sl, r4
 8006980:	e7d2      	b.n	8006928 <_svfiprintf_r+0x9c>
 8006982:	9b03      	ldr	r3, [sp, #12]
 8006984:	1d19      	adds	r1, r3, #4
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	9103      	str	r1, [sp, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	bfbb      	ittet	lt
 800698e:	425b      	neglt	r3, r3
 8006990:	f042 0202 	orrlt.w	r2, r2, #2
 8006994:	9307      	strge	r3, [sp, #28]
 8006996:	9307      	strlt	r3, [sp, #28]
 8006998:	bfb8      	it	lt
 800699a:	9204      	strlt	r2, [sp, #16]
 800699c:	7823      	ldrb	r3, [r4, #0]
 800699e:	2b2e      	cmp	r3, #46	; 0x2e
 80069a0:	d10c      	bne.n	80069bc <_svfiprintf_r+0x130>
 80069a2:	7863      	ldrb	r3, [r4, #1]
 80069a4:	2b2a      	cmp	r3, #42	; 0x2a
 80069a6:	d135      	bne.n	8006a14 <_svfiprintf_r+0x188>
 80069a8:	9b03      	ldr	r3, [sp, #12]
 80069aa:	1d1a      	adds	r2, r3, #4
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	9203      	str	r2, [sp, #12]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	bfb8      	it	lt
 80069b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069b8:	3402      	adds	r4, #2
 80069ba:	9305      	str	r3, [sp, #20]
 80069bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a88 <_svfiprintf_r+0x1fc>
 80069c0:	7821      	ldrb	r1, [r4, #0]
 80069c2:	2203      	movs	r2, #3
 80069c4:	4650      	mov	r0, sl
 80069c6:	f7f9 fc0b 	bl	80001e0 <memchr>
 80069ca:	b140      	cbz	r0, 80069de <_svfiprintf_r+0x152>
 80069cc:	2340      	movs	r3, #64	; 0x40
 80069ce:	eba0 000a 	sub.w	r0, r0, sl
 80069d2:	fa03 f000 	lsl.w	r0, r3, r0
 80069d6:	9b04      	ldr	r3, [sp, #16]
 80069d8:	4303      	orrs	r3, r0
 80069da:	3401      	adds	r4, #1
 80069dc:	9304      	str	r3, [sp, #16]
 80069de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069e2:	4826      	ldr	r0, [pc, #152]	; (8006a7c <_svfiprintf_r+0x1f0>)
 80069e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069e8:	2206      	movs	r2, #6
 80069ea:	f7f9 fbf9 	bl	80001e0 <memchr>
 80069ee:	2800      	cmp	r0, #0
 80069f0:	d038      	beq.n	8006a64 <_svfiprintf_r+0x1d8>
 80069f2:	4b23      	ldr	r3, [pc, #140]	; (8006a80 <_svfiprintf_r+0x1f4>)
 80069f4:	bb1b      	cbnz	r3, 8006a3e <_svfiprintf_r+0x1b2>
 80069f6:	9b03      	ldr	r3, [sp, #12]
 80069f8:	3307      	adds	r3, #7
 80069fa:	f023 0307 	bic.w	r3, r3, #7
 80069fe:	3308      	adds	r3, #8
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a04:	4433      	add	r3, r6
 8006a06:	9309      	str	r3, [sp, #36]	; 0x24
 8006a08:	e767      	b.n	80068da <_svfiprintf_r+0x4e>
 8006a0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a0e:	460c      	mov	r4, r1
 8006a10:	2001      	movs	r0, #1
 8006a12:	e7a5      	b.n	8006960 <_svfiprintf_r+0xd4>
 8006a14:	2300      	movs	r3, #0
 8006a16:	3401      	adds	r4, #1
 8006a18:	9305      	str	r3, [sp, #20]
 8006a1a:	4619      	mov	r1, r3
 8006a1c:	f04f 0c0a 	mov.w	ip, #10
 8006a20:	4620      	mov	r0, r4
 8006a22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a26:	3a30      	subs	r2, #48	; 0x30
 8006a28:	2a09      	cmp	r2, #9
 8006a2a:	d903      	bls.n	8006a34 <_svfiprintf_r+0x1a8>
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0c5      	beq.n	80069bc <_svfiprintf_r+0x130>
 8006a30:	9105      	str	r1, [sp, #20]
 8006a32:	e7c3      	b.n	80069bc <_svfiprintf_r+0x130>
 8006a34:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a38:	4604      	mov	r4, r0
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e7f0      	b.n	8006a20 <_svfiprintf_r+0x194>
 8006a3e:	ab03      	add	r3, sp, #12
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	462a      	mov	r2, r5
 8006a44:	4b0f      	ldr	r3, [pc, #60]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a46:	a904      	add	r1, sp, #16
 8006a48:	4638      	mov	r0, r7
 8006a4a:	f3af 8000 	nop.w
 8006a4e:	1c42      	adds	r2, r0, #1
 8006a50:	4606      	mov	r6, r0
 8006a52:	d1d6      	bne.n	8006a02 <_svfiprintf_r+0x176>
 8006a54:	89ab      	ldrh	r3, [r5, #12]
 8006a56:	065b      	lsls	r3, r3, #25
 8006a58:	f53f af2c 	bmi.w	80068b4 <_svfiprintf_r+0x28>
 8006a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a5e:	b01d      	add	sp, #116	; 0x74
 8006a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a64:	ab03      	add	r3, sp, #12
 8006a66:	9300      	str	r3, [sp, #0]
 8006a68:	462a      	mov	r2, r5
 8006a6a:	4b06      	ldr	r3, [pc, #24]	; (8006a84 <_svfiprintf_r+0x1f8>)
 8006a6c:	a904      	add	r1, sp, #16
 8006a6e:	4638      	mov	r0, r7
 8006a70:	f000 f87a 	bl	8006b68 <_printf_i>
 8006a74:	e7eb      	b.n	8006a4e <_svfiprintf_r+0x1c2>
 8006a76:	bf00      	nop
 8006a78:	0800711c 	.word	0x0800711c
 8006a7c:	08007126 	.word	0x08007126
 8006a80:	00000000 	.word	0x00000000
 8006a84:	080067d5 	.word	0x080067d5
 8006a88:	08007122 	.word	0x08007122

08006a8c <_printf_common>:
 8006a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a90:	4616      	mov	r6, r2
 8006a92:	4699      	mov	r9, r3
 8006a94:	688a      	ldr	r2, [r1, #8]
 8006a96:	690b      	ldr	r3, [r1, #16]
 8006a98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	bfb8      	it	lt
 8006aa0:	4613      	movlt	r3, r2
 8006aa2:	6033      	str	r3, [r6, #0]
 8006aa4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aa8:	4607      	mov	r7, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b10a      	cbz	r2, 8006ab2 <_printf_common+0x26>
 8006aae:	3301      	adds	r3, #1
 8006ab0:	6033      	str	r3, [r6, #0]
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	0699      	lsls	r1, r3, #26
 8006ab6:	bf42      	ittt	mi
 8006ab8:	6833      	ldrmi	r3, [r6, #0]
 8006aba:	3302      	addmi	r3, #2
 8006abc:	6033      	strmi	r3, [r6, #0]
 8006abe:	6825      	ldr	r5, [r4, #0]
 8006ac0:	f015 0506 	ands.w	r5, r5, #6
 8006ac4:	d106      	bne.n	8006ad4 <_printf_common+0x48>
 8006ac6:	f104 0a19 	add.w	sl, r4, #25
 8006aca:	68e3      	ldr	r3, [r4, #12]
 8006acc:	6832      	ldr	r2, [r6, #0]
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	42ab      	cmp	r3, r5
 8006ad2:	dc26      	bgt.n	8006b22 <_printf_common+0x96>
 8006ad4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ad8:	1e13      	subs	r3, r2, #0
 8006ada:	6822      	ldr	r2, [r4, #0]
 8006adc:	bf18      	it	ne
 8006ade:	2301      	movne	r3, #1
 8006ae0:	0692      	lsls	r2, r2, #26
 8006ae2:	d42b      	bmi.n	8006b3c <_printf_common+0xb0>
 8006ae4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ae8:	4649      	mov	r1, r9
 8006aea:	4638      	mov	r0, r7
 8006aec:	47c0      	blx	r8
 8006aee:	3001      	adds	r0, #1
 8006af0:	d01e      	beq.n	8006b30 <_printf_common+0xa4>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	68e5      	ldr	r5, [r4, #12]
 8006af6:	6832      	ldr	r2, [r6, #0]
 8006af8:	f003 0306 	and.w	r3, r3, #6
 8006afc:	2b04      	cmp	r3, #4
 8006afe:	bf08      	it	eq
 8006b00:	1aad      	subeq	r5, r5, r2
 8006b02:	68a3      	ldr	r3, [r4, #8]
 8006b04:	6922      	ldr	r2, [r4, #16]
 8006b06:	bf0c      	ite	eq
 8006b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b0c:	2500      	movne	r5, #0
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	bfc4      	itt	gt
 8006b12:	1a9b      	subgt	r3, r3, r2
 8006b14:	18ed      	addgt	r5, r5, r3
 8006b16:	2600      	movs	r6, #0
 8006b18:	341a      	adds	r4, #26
 8006b1a:	42b5      	cmp	r5, r6
 8006b1c:	d11a      	bne.n	8006b54 <_printf_common+0xc8>
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e008      	b.n	8006b34 <_printf_common+0xa8>
 8006b22:	2301      	movs	r3, #1
 8006b24:	4652      	mov	r2, sl
 8006b26:	4649      	mov	r1, r9
 8006b28:	4638      	mov	r0, r7
 8006b2a:	47c0      	blx	r8
 8006b2c:	3001      	adds	r0, #1
 8006b2e:	d103      	bne.n	8006b38 <_printf_common+0xac>
 8006b30:	f04f 30ff 	mov.w	r0, #4294967295
 8006b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b38:	3501      	adds	r5, #1
 8006b3a:	e7c6      	b.n	8006aca <_printf_common+0x3e>
 8006b3c:	18e1      	adds	r1, r4, r3
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	2030      	movs	r0, #48	; 0x30
 8006b42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b46:	4422      	add	r2, r4
 8006b48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b50:	3302      	adds	r3, #2
 8006b52:	e7c7      	b.n	8006ae4 <_printf_common+0x58>
 8006b54:	2301      	movs	r3, #1
 8006b56:	4622      	mov	r2, r4
 8006b58:	4649      	mov	r1, r9
 8006b5a:	4638      	mov	r0, r7
 8006b5c:	47c0      	blx	r8
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d0e6      	beq.n	8006b30 <_printf_common+0xa4>
 8006b62:	3601      	adds	r6, #1
 8006b64:	e7d9      	b.n	8006b1a <_printf_common+0x8e>
	...

08006b68 <_printf_i>:
 8006b68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b6c:	460c      	mov	r4, r1
 8006b6e:	4691      	mov	r9, r2
 8006b70:	7e27      	ldrb	r7, [r4, #24]
 8006b72:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b74:	2f78      	cmp	r7, #120	; 0x78
 8006b76:	4680      	mov	r8, r0
 8006b78:	469a      	mov	sl, r3
 8006b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b7e:	d807      	bhi.n	8006b90 <_printf_i+0x28>
 8006b80:	2f62      	cmp	r7, #98	; 0x62
 8006b82:	d80a      	bhi.n	8006b9a <_printf_i+0x32>
 8006b84:	2f00      	cmp	r7, #0
 8006b86:	f000 80d8 	beq.w	8006d3a <_printf_i+0x1d2>
 8006b8a:	2f58      	cmp	r7, #88	; 0x58
 8006b8c:	f000 80a3 	beq.w	8006cd6 <_printf_i+0x16e>
 8006b90:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b98:	e03a      	b.n	8006c10 <_printf_i+0xa8>
 8006b9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b9e:	2b15      	cmp	r3, #21
 8006ba0:	d8f6      	bhi.n	8006b90 <_printf_i+0x28>
 8006ba2:	a001      	add	r0, pc, #4	; (adr r0, 8006ba8 <_printf_i+0x40>)
 8006ba4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006ba8:	08006c01 	.word	0x08006c01
 8006bac:	08006c15 	.word	0x08006c15
 8006bb0:	08006b91 	.word	0x08006b91
 8006bb4:	08006b91 	.word	0x08006b91
 8006bb8:	08006b91 	.word	0x08006b91
 8006bbc:	08006b91 	.word	0x08006b91
 8006bc0:	08006c15 	.word	0x08006c15
 8006bc4:	08006b91 	.word	0x08006b91
 8006bc8:	08006b91 	.word	0x08006b91
 8006bcc:	08006b91 	.word	0x08006b91
 8006bd0:	08006b91 	.word	0x08006b91
 8006bd4:	08006d21 	.word	0x08006d21
 8006bd8:	08006c45 	.word	0x08006c45
 8006bdc:	08006d03 	.word	0x08006d03
 8006be0:	08006b91 	.word	0x08006b91
 8006be4:	08006b91 	.word	0x08006b91
 8006be8:	08006d43 	.word	0x08006d43
 8006bec:	08006b91 	.word	0x08006b91
 8006bf0:	08006c45 	.word	0x08006c45
 8006bf4:	08006b91 	.word	0x08006b91
 8006bf8:	08006b91 	.word	0x08006b91
 8006bfc:	08006d0b 	.word	0x08006d0b
 8006c00:	680b      	ldr	r3, [r1, #0]
 8006c02:	1d1a      	adds	r2, r3, #4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	600a      	str	r2, [r1, #0]
 8006c08:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c10:	2301      	movs	r3, #1
 8006c12:	e0a3      	b.n	8006d5c <_printf_i+0x1f4>
 8006c14:	6825      	ldr	r5, [r4, #0]
 8006c16:	6808      	ldr	r0, [r1, #0]
 8006c18:	062e      	lsls	r6, r5, #24
 8006c1a:	f100 0304 	add.w	r3, r0, #4
 8006c1e:	d50a      	bpl.n	8006c36 <_printf_i+0xce>
 8006c20:	6805      	ldr	r5, [r0, #0]
 8006c22:	600b      	str	r3, [r1, #0]
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	da03      	bge.n	8006c30 <_printf_i+0xc8>
 8006c28:	232d      	movs	r3, #45	; 0x2d
 8006c2a:	426d      	negs	r5, r5
 8006c2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c30:	485e      	ldr	r0, [pc, #376]	; (8006dac <_printf_i+0x244>)
 8006c32:	230a      	movs	r3, #10
 8006c34:	e019      	b.n	8006c6a <_printf_i+0x102>
 8006c36:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c3a:	6805      	ldr	r5, [r0, #0]
 8006c3c:	600b      	str	r3, [r1, #0]
 8006c3e:	bf18      	it	ne
 8006c40:	b22d      	sxthne	r5, r5
 8006c42:	e7ef      	b.n	8006c24 <_printf_i+0xbc>
 8006c44:	680b      	ldr	r3, [r1, #0]
 8006c46:	6825      	ldr	r5, [r4, #0]
 8006c48:	1d18      	adds	r0, r3, #4
 8006c4a:	6008      	str	r0, [r1, #0]
 8006c4c:	0628      	lsls	r0, r5, #24
 8006c4e:	d501      	bpl.n	8006c54 <_printf_i+0xec>
 8006c50:	681d      	ldr	r5, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <_printf_i+0xf2>
 8006c54:	0669      	lsls	r1, r5, #25
 8006c56:	d5fb      	bpl.n	8006c50 <_printf_i+0xe8>
 8006c58:	881d      	ldrh	r5, [r3, #0]
 8006c5a:	4854      	ldr	r0, [pc, #336]	; (8006dac <_printf_i+0x244>)
 8006c5c:	2f6f      	cmp	r7, #111	; 0x6f
 8006c5e:	bf0c      	ite	eq
 8006c60:	2308      	moveq	r3, #8
 8006c62:	230a      	movne	r3, #10
 8006c64:	2100      	movs	r1, #0
 8006c66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c6a:	6866      	ldr	r6, [r4, #4]
 8006c6c:	60a6      	str	r6, [r4, #8]
 8006c6e:	2e00      	cmp	r6, #0
 8006c70:	bfa2      	ittt	ge
 8006c72:	6821      	ldrge	r1, [r4, #0]
 8006c74:	f021 0104 	bicge.w	r1, r1, #4
 8006c78:	6021      	strge	r1, [r4, #0]
 8006c7a:	b90d      	cbnz	r5, 8006c80 <_printf_i+0x118>
 8006c7c:	2e00      	cmp	r6, #0
 8006c7e:	d04d      	beq.n	8006d1c <_printf_i+0x1b4>
 8006c80:	4616      	mov	r6, r2
 8006c82:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c86:	fb03 5711 	mls	r7, r3, r1, r5
 8006c8a:	5dc7      	ldrb	r7, [r0, r7]
 8006c8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c90:	462f      	mov	r7, r5
 8006c92:	42bb      	cmp	r3, r7
 8006c94:	460d      	mov	r5, r1
 8006c96:	d9f4      	bls.n	8006c82 <_printf_i+0x11a>
 8006c98:	2b08      	cmp	r3, #8
 8006c9a:	d10b      	bne.n	8006cb4 <_printf_i+0x14c>
 8006c9c:	6823      	ldr	r3, [r4, #0]
 8006c9e:	07df      	lsls	r7, r3, #31
 8006ca0:	d508      	bpl.n	8006cb4 <_printf_i+0x14c>
 8006ca2:	6923      	ldr	r3, [r4, #16]
 8006ca4:	6861      	ldr	r1, [r4, #4]
 8006ca6:	4299      	cmp	r1, r3
 8006ca8:	bfde      	ittt	le
 8006caa:	2330      	movle	r3, #48	; 0x30
 8006cac:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cb4:	1b92      	subs	r2, r2, r6
 8006cb6:	6122      	str	r2, [r4, #16]
 8006cb8:	f8cd a000 	str.w	sl, [sp]
 8006cbc:	464b      	mov	r3, r9
 8006cbe:	aa03      	add	r2, sp, #12
 8006cc0:	4621      	mov	r1, r4
 8006cc2:	4640      	mov	r0, r8
 8006cc4:	f7ff fee2 	bl	8006a8c <_printf_common>
 8006cc8:	3001      	adds	r0, #1
 8006cca:	d14c      	bne.n	8006d66 <_printf_i+0x1fe>
 8006ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd0:	b004      	add	sp, #16
 8006cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd6:	4835      	ldr	r0, [pc, #212]	; (8006dac <_printf_i+0x244>)
 8006cd8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	680e      	ldr	r6, [r1, #0]
 8006ce0:	061f      	lsls	r7, r3, #24
 8006ce2:	f856 5b04 	ldr.w	r5, [r6], #4
 8006ce6:	600e      	str	r6, [r1, #0]
 8006ce8:	d514      	bpl.n	8006d14 <_printf_i+0x1ac>
 8006cea:	07d9      	lsls	r1, r3, #31
 8006cec:	bf44      	itt	mi
 8006cee:	f043 0320 	orrmi.w	r3, r3, #32
 8006cf2:	6023      	strmi	r3, [r4, #0]
 8006cf4:	b91d      	cbnz	r5, 8006cfe <_printf_i+0x196>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	f023 0320 	bic.w	r3, r3, #32
 8006cfc:	6023      	str	r3, [r4, #0]
 8006cfe:	2310      	movs	r3, #16
 8006d00:	e7b0      	b.n	8006c64 <_printf_i+0xfc>
 8006d02:	6823      	ldr	r3, [r4, #0]
 8006d04:	f043 0320 	orr.w	r3, r3, #32
 8006d08:	6023      	str	r3, [r4, #0]
 8006d0a:	2378      	movs	r3, #120	; 0x78
 8006d0c:	4828      	ldr	r0, [pc, #160]	; (8006db0 <_printf_i+0x248>)
 8006d0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d12:	e7e3      	b.n	8006cdc <_printf_i+0x174>
 8006d14:	065e      	lsls	r6, r3, #25
 8006d16:	bf48      	it	mi
 8006d18:	b2ad      	uxthmi	r5, r5
 8006d1a:	e7e6      	b.n	8006cea <_printf_i+0x182>
 8006d1c:	4616      	mov	r6, r2
 8006d1e:	e7bb      	b.n	8006c98 <_printf_i+0x130>
 8006d20:	680b      	ldr	r3, [r1, #0]
 8006d22:	6826      	ldr	r6, [r4, #0]
 8006d24:	6960      	ldr	r0, [r4, #20]
 8006d26:	1d1d      	adds	r5, r3, #4
 8006d28:	600d      	str	r5, [r1, #0]
 8006d2a:	0635      	lsls	r5, r6, #24
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	d501      	bpl.n	8006d34 <_printf_i+0x1cc>
 8006d30:	6018      	str	r0, [r3, #0]
 8006d32:	e002      	b.n	8006d3a <_printf_i+0x1d2>
 8006d34:	0671      	lsls	r1, r6, #25
 8006d36:	d5fb      	bpl.n	8006d30 <_printf_i+0x1c8>
 8006d38:	8018      	strh	r0, [r3, #0]
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	6123      	str	r3, [r4, #16]
 8006d3e:	4616      	mov	r6, r2
 8006d40:	e7ba      	b.n	8006cb8 <_printf_i+0x150>
 8006d42:	680b      	ldr	r3, [r1, #0]
 8006d44:	1d1a      	adds	r2, r3, #4
 8006d46:	600a      	str	r2, [r1, #0]
 8006d48:	681e      	ldr	r6, [r3, #0]
 8006d4a:	6862      	ldr	r2, [r4, #4]
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	4630      	mov	r0, r6
 8006d50:	f7f9 fa46 	bl	80001e0 <memchr>
 8006d54:	b108      	cbz	r0, 8006d5a <_printf_i+0x1f2>
 8006d56:	1b80      	subs	r0, r0, r6
 8006d58:	6060      	str	r0, [r4, #4]
 8006d5a:	6863      	ldr	r3, [r4, #4]
 8006d5c:	6123      	str	r3, [r4, #16]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d64:	e7a8      	b.n	8006cb8 <_printf_i+0x150>
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	4632      	mov	r2, r6
 8006d6a:	4649      	mov	r1, r9
 8006d6c:	4640      	mov	r0, r8
 8006d6e:	47d0      	blx	sl
 8006d70:	3001      	adds	r0, #1
 8006d72:	d0ab      	beq.n	8006ccc <_printf_i+0x164>
 8006d74:	6823      	ldr	r3, [r4, #0]
 8006d76:	079b      	lsls	r3, r3, #30
 8006d78:	d413      	bmi.n	8006da2 <_printf_i+0x23a>
 8006d7a:	68e0      	ldr	r0, [r4, #12]
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	4298      	cmp	r0, r3
 8006d80:	bfb8      	it	lt
 8006d82:	4618      	movlt	r0, r3
 8006d84:	e7a4      	b.n	8006cd0 <_printf_i+0x168>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4632      	mov	r2, r6
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4640      	mov	r0, r8
 8006d8e:	47d0      	blx	sl
 8006d90:	3001      	adds	r0, #1
 8006d92:	d09b      	beq.n	8006ccc <_printf_i+0x164>
 8006d94:	3501      	adds	r5, #1
 8006d96:	68e3      	ldr	r3, [r4, #12]
 8006d98:	9903      	ldr	r1, [sp, #12]
 8006d9a:	1a5b      	subs	r3, r3, r1
 8006d9c:	42ab      	cmp	r3, r5
 8006d9e:	dcf2      	bgt.n	8006d86 <_printf_i+0x21e>
 8006da0:	e7eb      	b.n	8006d7a <_printf_i+0x212>
 8006da2:	2500      	movs	r5, #0
 8006da4:	f104 0619 	add.w	r6, r4, #25
 8006da8:	e7f5      	b.n	8006d96 <_printf_i+0x22e>
 8006daa:	bf00      	nop
 8006dac:	0800712d 	.word	0x0800712d
 8006db0:	0800713e 	.word	0x0800713e

08006db4 <memmove>:
 8006db4:	4288      	cmp	r0, r1
 8006db6:	b510      	push	{r4, lr}
 8006db8:	eb01 0402 	add.w	r4, r1, r2
 8006dbc:	d902      	bls.n	8006dc4 <memmove+0x10>
 8006dbe:	4284      	cmp	r4, r0
 8006dc0:	4623      	mov	r3, r4
 8006dc2:	d807      	bhi.n	8006dd4 <memmove+0x20>
 8006dc4:	1e43      	subs	r3, r0, #1
 8006dc6:	42a1      	cmp	r1, r4
 8006dc8:	d008      	beq.n	8006ddc <memmove+0x28>
 8006dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006dd2:	e7f8      	b.n	8006dc6 <memmove+0x12>
 8006dd4:	4402      	add	r2, r0
 8006dd6:	4601      	mov	r1, r0
 8006dd8:	428a      	cmp	r2, r1
 8006dda:	d100      	bne.n	8006dde <memmove+0x2a>
 8006ddc:	bd10      	pop	{r4, pc}
 8006dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006de6:	e7f7      	b.n	8006dd8 <memmove+0x24>

08006de8 <_free_r>:
 8006de8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dea:	2900      	cmp	r1, #0
 8006dec:	d048      	beq.n	8006e80 <_free_r+0x98>
 8006dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006df2:	9001      	str	r0, [sp, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dfa:	bfb8      	it	lt
 8006dfc:	18e4      	addlt	r4, r4, r3
 8006dfe:	f000 f8d3 	bl	8006fa8 <__malloc_lock>
 8006e02:	4a20      	ldr	r2, [pc, #128]	; (8006e84 <_free_r+0x9c>)
 8006e04:	9801      	ldr	r0, [sp, #4]
 8006e06:	6813      	ldr	r3, [r2, #0]
 8006e08:	4615      	mov	r5, r2
 8006e0a:	b933      	cbnz	r3, 8006e1a <_free_r+0x32>
 8006e0c:	6063      	str	r3, [r4, #4]
 8006e0e:	6014      	str	r4, [r2, #0]
 8006e10:	b003      	add	sp, #12
 8006e12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e16:	f000 b8cd 	b.w	8006fb4 <__malloc_unlock>
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	d90b      	bls.n	8006e36 <_free_r+0x4e>
 8006e1e:	6821      	ldr	r1, [r4, #0]
 8006e20:	1862      	adds	r2, r4, r1
 8006e22:	4293      	cmp	r3, r2
 8006e24:	bf04      	itt	eq
 8006e26:	681a      	ldreq	r2, [r3, #0]
 8006e28:	685b      	ldreq	r3, [r3, #4]
 8006e2a:	6063      	str	r3, [r4, #4]
 8006e2c:	bf04      	itt	eq
 8006e2e:	1852      	addeq	r2, r2, r1
 8006e30:	6022      	streq	r2, [r4, #0]
 8006e32:	602c      	str	r4, [r5, #0]
 8006e34:	e7ec      	b.n	8006e10 <_free_r+0x28>
 8006e36:	461a      	mov	r2, r3
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	b10b      	cbz	r3, 8006e40 <_free_r+0x58>
 8006e3c:	42a3      	cmp	r3, r4
 8006e3e:	d9fa      	bls.n	8006e36 <_free_r+0x4e>
 8006e40:	6811      	ldr	r1, [r2, #0]
 8006e42:	1855      	adds	r5, r2, r1
 8006e44:	42a5      	cmp	r5, r4
 8006e46:	d10b      	bne.n	8006e60 <_free_r+0x78>
 8006e48:	6824      	ldr	r4, [r4, #0]
 8006e4a:	4421      	add	r1, r4
 8006e4c:	1854      	adds	r4, r2, r1
 8006e4e:	42a3      	cmp	r3, r4
 8006e50:	6011      	str	r1, [r2, #0]
 8006e52:	d1dd      	bne.n	8006e10 <_free_r+0x28>
 8006e54:	681c      	ldr	r4, [r3, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	6053      	str	r3, [r2, #4]
 8006e5a:	4421      	add	r1, r4
 8006e5c:	6011      	str	r1, [r2, #0]
 8006e5e:	e7d7      	b.n	8006e10 <_free_r+0x28>
 8006e60:	d902      	bls.n	8006e68 <_free_r+0x80>
 8006e62:	230c      	movs	r3, #12
 8006e64:	6003      	str	r3, [r0, #0]
 8006e66:	e7d3      	b.n	8006e10 <_free_r+0x28>
 8006e68:	6825      	ldr	r5, [r4, #0]
 8006e6a:	1961      	adds	r1, r4, r5
 8006e6c:	428b      	cmp	r3, r1
 8006e6e:	bf04      	itt	eq
 8006e70:	6819      	ldreq	r1, [r3, #0]
 8006e72:	685b      	ldreq	r3, [r3, #4]
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	bf04      	itt	eq
 8006e78:	1949      	addeq	r1, r1, r5
 8006e7a:	6021      	streq	r1, [r4, #0]
 8006e7c:	6054      	str	r4, [r2, #4]
 8006e7e:	e7c7      	b.n	8006e10 <_free_r+0x28>
 8006e80:	b003      	add	sp, #12
 8006e82:	bd30      	pop	{r4, r5, pc}
 8006e84:	2000042c 	.word	0x2000042c

08006e88 <_malloc_r>:
 8006e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e8a:	1ccd      	adds	r5, r1, #3
 8006e8c:	f025 0503 	bic.w	r5, r5, #3
 8006e90:	3508      	adds	r5, #8
 8006e92:	2d0c      	cmp	r5, #12
 8006e94:	bf38      	it	cc
 8006e96:	250c      	movcc	r5, #12
 8006e98:	2d00      	cmp	r5, #0
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	db01      	blt.n	8006ea2 <_malloc_r+0x1a>
 8006e9e:	42a9      	cmp	r1, r5
 8006ea0:	d903      	bls.n	8006eaa <_malloc_r+0x22>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6033      	str	r3, [r6, #0]
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eaa:	f000 f87d 	bl	8006fa8 <__malloc_lock>
 8006eae:	4921      	ldr	r1, [pc, #132]	; (8006f34 <_malloc_r+0xac>)
 8006eb0:	680a      	ldr	r2, [r1, #0]
 8006eb2:	4614      	mov	r4, r2
 8006eb4:	b99c      	cbnz	r4, 8006ede <_malloc_r+0x56>
 8006eb6:	4f20      	ldr	r7, [pc, #128]	; (8006f38 <_malloc_r+0xb0>)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	b923      	cbnz	r3, 8006ec6 <_malloc_r+0x3e>
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4630      	mov	r0, r6
 8006ec0:	f000 f862 	bl	8006f88 <_sbrk_r>
 8006ec4:	6038      	str	r0, [r7, #0]
 8006ec6:	4629      	mov	r1, r5
 8006ec8:	4630      	mov	r0, r6
 8006eca:	f000 f85d 	bl	8006f88 <_sbrk_r>
 8006ece:	1c43      	adds	r3, r0, #1
 8006ed0:	d123      	bne.n	8006f1a <_malloc_r+0x92>
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	6033      	str	r3, [r6, #0]
 8006ed6:	4630      	mov	r0, r6
 8006ed8:	f000 f86c 	bl	8006fb4 <__malloc_unlock>
 8006edc:	e7e3      	b.n	8006ea6 <_malloc_r+0x1e>
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	1b5b      	subs	r3, r3, r5
 8006ee2:	d417      	bmi.n	8006f14 <_malloc_r+0x8c>
 8006ee4:	2b0b      	cmp	r3, #11
 8006ee6:	d903      	bls.n	8006ef0 <_malloc_r+0x68>
 8006ee8:	6023      	str	r3, [r4, #0]
 8006eea:	441c      	add	r4, r3
 8006eec:	6025      	str	r5, [r4, #0]
 8006eee:	e004      	b.n	8006efa <_malloc_r+0x72>
 8006ef0:	6863      	ldr	r3, [r4, #4]
 8006ef2:	42a2      	cmp	r2, r4
 8006ef4:	bf0c      	ite	eq
 8006ef6:	600b      	streq	r3, [r1, #0]
 8006ef8:	6053      	strne	r3, [r2, #4]
 8006efa:	4630      	mov	r0, r6
 8006efc:	f000 f85a 	bl	8006fb4 <__malloc_unlock>
 8006f00:	f104 000b 	add.w	r0, r4, #11
 8006f04:	1d23      	adds	r3, r4, #4
 8006f06:	f020 0007 	bic.w	r0, r0, #7
 8006f0a:	1ac2      	subs	r2, r0, r3
 8006f0c:	d0cc      	beq.n	8006ea8 <_malloc_r+0x20>
 8006f0e:	1a1b      	subs	r3, r3, r0
 8006f10:	50a3      	str	r3, [r4, r2]
 8006f12:	e7c9      	b.n	8006ea8 <_malloc_r+0x20>
 8006f14:	4622      	mov	r2, r4
 8006f16:	6864      	ldr	r4, [r4, #4]
 8006f18:	e7cc      	b.n	8006eb4 <_malloc_r+0x2c>
 8006f1a:	1cc4      	adds	r4, r0, #3
 8006f1c:	f024 0403 	bic.w	r4, r4, #3
 8006f20:	42a0      	cmp	r0, r4
 8006f22:	d0e3      	beq.n	8006eec <_malloc_r+0x64>
 8006f24:	1a21      	subs	r1, r4, r0
 8006f26:	4630      	mov	r0, r6
 8006f28:	f000 f82e 	bl	8006f88 <_sbrk_r>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d1dd      	bne.n	8006eec <_malloc_r+0x64>
 8006f30:	e7cf      	b.n	8006ed2 <_malloc_r+0x4a>
 8006f32:	bf00      	nop
 8006f34:	2000042c 	.word	0x2000042c
 8006f38:	20000430 	.word	0x20000430

08006f3c <_realloc_r>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	4607      	mov	r7, r0
 8006f40:	4614      	mov	r4, r2
 8006f42:	460e      	mov	r6, r1
 8006f44:	b921      	cbnz	r1, 8006f50 <_realloc_r+0x14>
 8006f46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f4a:	4611      	mov	r1, r2
 8006f4c:	f7ff bf9c 	b.w	8006e88 <_malloc_r>
 8006f50:	b922      	cbnz	r2, 8006f5c <_realloc_r+0x20>
 8006f52:	f7ff ff49 	bl	8006de8 <_free_r>
 8006f56:	4625      	mov	r5, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f5c:	f000 f830 	bl	8006fc0 <_malloc_usable_size_r>
 8006f60:	42a0      	cmp	r0, r4
 8006f62:	d20f      	bcs.n	8006f84 <_realloc_r+0x48>
 8006f64:	4621      	mov	r1, r4
 8006f66:	4638      	mov	r0, r7
 8006f68:	f7ff ff8e 	bl	8006e88 <_malloc_r>
 8006f6c:	4605      	mov	r5, r0
 8006f6e:	2800      	cmp	r0, #0
 8006f70:	d0f2      	beq.n	8006f58 <_realloc_r+0x1c>
 8006f72:	4631      	mov	r1, r6
 8006f74:	4622      	mov	r2, r4
 8006f76:	f7ff fbe3 	bl	8006740 <memcpy>
 8006f7a:	4631      	mov	r1, r6
 8006f7c:	4638      	mov	r0, r7
 8006f7e:	f7ff ff33 	bl	8006de8 <_free_r>
 8006f82:	e7e9      	b.n	8006f58 <_realloc_r+0x1c>
 8006f84:	4635      	mov	r5, r6
 8006f86:	e7e7      	b.n	8006f58 <_realloc_r+0x1c>

08006f88 <_sbrk_r>:
 8006f88:	b538      	push	{r3, r4, r5, lr}
 8006f8a:	4d06      	ldr	r5, [pc, #24]	; (8006fa4 <_sbrk_r+0x1c>)
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	4604      	mov	r4, r0
 8006f90:	4608      	mov	r0, r1
 8006f92:	602b      	str	r3, [r5, #0]
 8006f94:	f7fa fc2a 	bl	80017ec <_sbrk>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_sbrk_r+0x1a>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_sbrk_r+0x1a>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	20000738 	.word	0x20000738

08006fa8 <__malloc_lock>:
 8006fa8:	4801      	ldr	r0, [pc, #4]	; (8006fb0 <__malloc_lock+0x8>)
 8006faa:	f000 b811 	b.w	8006fd0 <__retarget_lock_acquire_recursive>
 8006fae:	bf00      	nop
 8006fb0:	20000740 	.word	0x20000740

08006fb4 <__malloc_unlock>:
 8006fb4:	4801      	ldr	r0, [pc, #4]	; (8006fbc <__malloc_unlock+0x8>)
 8006fb6:	f000 b80c 	b.w	8006fd2 <__retarget_lock_release_recursive>
 8006fba:	bf00      	nop
 8006fbc:	20000740 	.word	0x20000740

08006fc0 <_malloc_usable_size_r>:
 8006fc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fc4:	1f18      	subs	r0, r3, #4
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	bfbc      	itt	lt
 8006fca:	580b      	ldrlt	r3, [r1, r0]
 8006fcc:	18c0      	addlt	r0, r0, r3
 8006fce:	4770      	bx	lr

08006fd0 <__retarget_lock_acquire_recursive>:
 8006fd0:	4770      	bx	lr

08006fd2 <__retarget_lock_release_recursive>:
 8006fd2:	4770      	bx	lr

08006fd4 <trunc>:
 8006fd4:	ec51 0b10 	vmov	r0, r1, d0
 8006fd8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006fdc:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8006fe0:	2b13      	cmp	r3, #19
 8006fe2:	b5d0      	push	{r4, r6, r7, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	dc10      	bgt.n	800700a <trunc+0x36>
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	bfa5      	ittet	ge
 8006fec:	4a11      	ldrge	r2, [pc, #68]	; (8007034 <trunc+0x60>)
 8006fee:	fa42 f303 	asrge.w	r3, r2, r3
 8006ff2:	2100      	movlt	r1, #0
 8006ff4:	2100      	movge	r1, #0
 8006ff6:	bfb9      	ittee	lt
 8006ff8:	2000      	movlt	r0, #0
 8006ffa:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8006ffe:	2000      	movge	r0, #0
 8007000:	ea24 0103 	bicge.w	r1, r4, r3
 8007004:	ec41 0b10 	vmov	d0, r0, r1
 8007008:	bdd0      	pop	{r4, r6, r7, pc}
 800700a:	2b33      	cmp	r3, #51	; 0x33
 800700c:	dd08      	ble.n	8007020 <trunc+0x4c>
 800700e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007012:	d1f7      	bne.n	8007004 <trunc+0x30>
 8007014:	ee10 2a10 	vmov	r2, s0
 8007018:	460b      	mov	r3, r1
 800701a:	f7f9 f937 	bl	800028c <__adddf3>
 800701e:	e7f1      	b.n	8007004 <trunc+0x30>
 8007020:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007024:	f04f 33ff 	mov.w	r3, #4294967295
 8007028:	fa23 f202 	lsr.w	r2, r3, r2
 800702c:	ea20 0602 	bic.w	r6, r0, r2
 8007030:	4630      	mov	r0, r6
 8007032:	e7e7      	b.n	8007004 <trunc+0x30>
 8007034:	000fffff 	.word	0x000fffff

08007038 <_init>:
 8007038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800703a:	bf00      	nop
 800703c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800703e:	bc08      	pop	{r3}
 8007040:	469e      	mov	lr, r3
 8007042:	4770      	bx	lr

08007044 <_fini>:
 8007044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007046:	bf00      	nop
 8007048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800704a:	bc08      	pop	{r3}
 800704c:	469e      	mov	lr, r3
 800704e:	4770      	bx	lr
