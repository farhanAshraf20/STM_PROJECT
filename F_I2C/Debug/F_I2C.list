
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af50  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  0800b0e0  0800b0e0  0001b0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b67c  0800b67c  000203cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b67c  0800b67c  0001b67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b684  0800b684  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b684  0800b684  0001b684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b688  0800b688  0001b688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800b68c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000558  200003cc  0800ba58  000203cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000924  0800ba58  00020924  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2d8  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b4d  00000000  00000000  0003e6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016f8  00000000  00000000  00042228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001540  00000000  00000000  00043920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a73c  00000000  00000000  00044e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c389  00000000  00000000  0006f59c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcbd2  00000000  00000000  0008b925  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001884f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000704c  00000000  00000000  0018854c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003cc 	.word	0x200003cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b0c8 	.word	0x0800b0c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d0 	.word	0x200003d0
 80001cc:	0800b0c8 	.word	0x0800b0c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <f_Temperature>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/************************************** This function use for extracting Temperature data **********************************************/
void f_Temperature(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af02      	add	r7, sp, #8
	//printf("Flag state  :%d\n",flag);
	if(flag_temp)
 8000ea6:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <f_Temperature+0x88>)
 8000ea8:	781b      	ldrb	r3, [r3, #0]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d038      	beq.n	8000f20 <f_Temperature+0x80>
	{

		if(BSP_TSENSOR_Init())
 8000eae:	f001 fe11 	bl	8002ad4 <BSP_TSENSOR_Init>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d010      	beq.n	8000eda <f_Temperature+0x3a>
		{
			snprintf(str_tmp,100,"\033\143 Not Taking TEMPERATURE Data\r");
 8000eb8:	4a1c      	ldr	r2, [pc, #112]	; (8000f2c <f_Temperature+0x8c>)
 8000eba:	2164      	movs	r1, #100	; 0x64
 8000ebc:	481c      	ldr	r0, [pc, #112]	; (8000f30 <f_Temperature+0x90>)
 8000ebe:	f007 fed3 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8000ec2:	230a      	movs	r3, #10
 8000ec4:	2264      	movs	r2, #100	; 0x64
 8000ec6:	491a      	ldr	r1, [pc, #104]	; (8000f30 <f_Temperature+0x90>)
 8000ec8:	481a      	ldr	r0, [pc, #104]	; (8000f34 <f_Temperature+0x94>)
 8000eca:	f005 fd6d 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 8000ece:	2264      	movs	r2, #100	; 0x64
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	4817      	ldr	r0, [pc, #92]	; (8000f30 <f_Temperature+0x90>)
 8000ed4:	f007 f9c8 	bl	8008268 <memset>
		}


	}

}
 8000ed8:	e022      	b.n	8000f20 <f_Temperature+0x80>
			temp_value = BSP_TSENSOR_ReadTemp();
 8000eda:	f001 fe17 	bl	8002b0c <BSP_TSENSOR_ReadTemp>
 8000ede:	eef0 7a40 	vmov.f32	s15, s0
 8000ee2:	4b15      	ldr	r3, [pc, #84]	; (8000f38 <f_Temperature+0x98>)
 8000ee4:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_tmp,100," \033\143 TEMPERATURE = %.2f \r", temp_value);
 8000ee8:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <f_Temperature+0x98>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fb2b 	bl	8000548 <__aeabi_f2d>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	e9cd 2300 	strd	r2, r3, [sp]
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <f_Temperature+0x9c>)
 8000efc:	2164      	movs	r1, #100	; 0x64
 8000efe:	480c      	ldr	r0, [pc, #48]	; (8000f30 <f_Temperature+0x90>)
 8000f00:	f007 feb2 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8000f04:	230a      	movs	r3, #10
 8000f06:	2264      	movs	r2, #100	; 0x64
 8000f08:	4909      	ldr	r1, [pc, #36]	; (8000f30 <f_Temperature+0x90>)
 8000f0a:	480a      	ldr	r0, [pc, #40]	; (8000f34 <f_Temperature+0x94>)
 8000f0c:	f005 fd4c 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 8000f10:	2264      	movs	r2, #100	; 0x64
 8000f12:	2100      	movs	r1, #0
 8000f14:	4806      	ldr	r0, [pc, #24]	; (8000f30 <f_Temperature+0x90>)
 8000f16:	f007 f9a7 	bl	8008268 <memset>
			flag_temp=0;
 8000f1a:	4b03      	ldr	r3, [pc, #12]	; (8000f28 <f_Temperature+0x88>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000122 	.word	0x20000122
 8000f2c:	0800b0e0 	.word	0x0800b0e0
 8000f30:	200003f4 	.word	0x200003f4
 8000f34:	200006d8 	.word	0x200006d8
 8000f38:	200003e8 	.word	0x200003e8
 8000f3c:	0800b100 	.word	0x0800b100

08000f40 <f_Humidity>:
/*********************************************************** END **************************************************************************/

/*This function use for extracting Humidity data */
void f_Humidity(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af02      	add	r7, sp, #8
	if(flag_humi)
 8000f46:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <f_Humidity+0x88>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d038      	beq.n	8000fc0 <f_Humidity+0x80>
	{
		if(BSP_HSENSOR_Init())
 8000f4e:	f001 fd21 	bl	8002994 <BSP_HSENSOR_Init>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d010      	beq.n	8000f7a <f_Humidity+0x3a>
		{
			snprintf(str_humi,100,"\033\143 Not Taking HUMIDITY Data \r");
 8000f58:	4a1c      	ldr	r2, [pc, #112]	; (8000fcc <f_Humidity+0x8c>)
 8000f5a:	2164      	movs	r1, #100	; 0x64
 8000f5c:	481c      	ldr	r0, [pc, #112]	; (8000fd0 <f_Humidity+0x90>)
 8000f5e:	f007 fe83 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 8000f62:	230a      	movs	r3, #10
 8000f64:	2264      	movs	r2, #100	; 0x64
 8000f66:	491a      	ldr	r1, [pc, #104]	; (8000fd0 <f_Humidity+0x90>)
 8000f68:	481a      	ldr	r0, [pc, #104]	; (8000fd4 <f_Humidity+0x94>)
 8000f6a:	f005 fd1d 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 8000f6e:	2264      	movs	r2, #100	; 0x64
 8000f70:	2100      	movs	r1, #0
 8000f72:	4817      	ldr	r0, [pc, #92]	; (8000fd0 <f_Humidity+0x90>)
 8000f74:	f007 f978 	bl	8008268 <memset>
			memset(str_humi, 0, sizeof(str_humi));
			flag_humi=0;
		}

	}
}
 8000f78:	e022      	b.n	8000fc0 <f_Humidity+0x80>
			humi_value = BSP_HSENSOR_ReadHumidity();
 8000f7a:	f001 fd2b 	bl	80029d4 <BSP_HSENSOR_ReadHumidity>
 8000f7e:	eef0 7a40 	vmov.f32	s15, s0
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <f_Humidity+0x98>)
 8000f84:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_humi,100,"\033\143 HUMIDITY = %.2f \r", humi_value);
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <f_Humidity+0x98>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fadb 	bl	8000548 <__aeabi_f2d>
 8000f92:	4602      	mov	r2, r0
 8000f94:	460b      	mov	r3, r1
 8000f96:	e9cd 2300 	strd	r2, r3, [sp]
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <f_Humidity+0x9c>)
 8000f9c:	2164      	movs	r1, #100	; 0x64
 8000f9e:	480c      	ldr	r0, [pc, #48]	; (8000fd0 <f_Humidity+0x90>)
 8000fa0:	f007 fe62 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 8000fa4:	230a      	movs	r3, #10
 8000fa6:	2264      	movs	r2, #100	; 0x64
 8000fa8:	4909      	ldr	r1, [pc, #36]	; (8000fd0 <f_Humidity+0x90>)
 8000faa:	480a      	ldr	r0, [pc, #40]	; (8000fd4 <f_Humidity+0x94>)
 8000fac:	f005 fcfc 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 8000fb0:	2264      	movs	r2, #100	; 0x64
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <f_Humidity+0x90>)
 8000fb6:	f007 f957 	bl	8008268 <memset>
			flag_humi=0;
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <f_Humidity+0x88>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	701a      	strb	r2, [r3, #0]
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000123 	.word	0x20000123
 8000fcc:	0800b11c 	.word	0x0800b11c
 8000fd0:	20000458 	.word	0x20000458
 8000fd4:	200006d8 	.word	0x200006d8
 8000fd8:	200003ec 	.word	0x200003ec
 8000fdc:	0800b13c 	.word	0x0800b13c

08000fe0 <f_Pressure>:
/*********************************************************** END **************************************************************************/

/************************************* This function use for extracting Pressure data *****************************************************/
void f_Pressure(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af02      	add	r7, sp, #8
	if(flag_pre)
 8000fe6:	4b20      	ldr	r3, [pc, #128]	; (8001068 <f_Pressure+0x88>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d038      	beq.n	8001060 <f_Pressure+0x80>
	{
		if(BSP_PSENSOR_Init())
 8000fee:	f001 fd43 	bl	8002a78 <BSP_PSENSOR_Init>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d010      	beq.n	800101a <f_Pressure+0x3a>
		{
			snprintf(str_pre,100,"\033\143 Not Taking PRESSURE Data \r");
 8000ff8:	4a1c      	ldr	r2, [pc, #112]	; (800106c <f_Pressure+0x8c>)
 8000ffa:	2164      	movs	r1, #100	; 0x64
 8000ffc:	481c      	ldr	r0, [pc, #112]	; (8001070 <f_Pressure+0x90>)
 8000ffe:	f007 fe33 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8001002:	230a      	movs	r3, #10
 8001004:	2264      	movs	r2, #100	; 0x64
 8001006:	491a      	ldr	r1, [pc, #104]	; (8001070 <f_Pressure+0x90>)
 8001008:	481a      	ldr	r0, [pc, #104]	; (8001074 <f_Pressure+0x94>)
 800100a:	f005 fccd 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 800100e:	2264      	movs	r2, #100	; 0x64
 8001010:	2100      	movs	r1, #0
 8001012:	4817      	ldr	r0, [pc, #92]	; (8001070 <f_Pressure+0x90>)
 8001014:	f007 f928 	bl	8008268 <memset>
			flag_pre=0;
		}

	}

}
 8001018:	e022      	b.n	8001060 <f_Pressure+0x80>
			pre_value = BSP_PSENSOR_ReadPressure();
 800101a:	f001 fd4d 	bl	8002ab8 <BSP_PSENSOR_ReadPressure>
 800101e:	eef0 7a40 	vmov.f32	s15, s0
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <f_Pressure+0x98>)
 8001024:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_pre,100,"\033\143 PRESSURE = %.2f \r", pre_value);
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <f_Pressure+0x98>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa8b 	bl	8000548 <__aeabi_f2d>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	e9cd 2300 	strd	r2, r3, [sp]
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <f_Pressure+0x9c>)
 800103c:	2164      	movs	r1, #100	; 0x64
 800103e:	480c      	ldr	r0, [pc, #48]	; (8001070 <f_Pressure+0x90>)
 8001040:	f007 fe12 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8001044:	230a      	movs	r3, #10
 8001046:	2264      	movs	r2, #100	; 0x64
 8001048:	4909      	ldr	r1, [pc, #36]	; (8001070 <f_Pressure+0x90>)
 800104a:	480a      	ldr	r0, [pc, #40]	; (8001074 <f_Pressure+0x94>)
 800104c:	f005 fcac 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 8001050:	2264      	movs	r2, #100	; 0x64
 8001052:	2100      	movs	r1, #0
 8001054:	4806      	ldr	r0, [pc, #24]	; (8001070 <f_Pressure+0x90>)
 8001056:	f007 f907 	bl	8008268 <memset>
			flag_pre=0;
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <f_Pressure+0x88>)
 800105c:	2200      	movs	r2, #0
 800105e:	701a      	strb	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000124 	.word	0x20000124
 800106c:	0800b154 	.word	0x0800b154
 8001070:	200004bc 	.word	0x200004bc
 8001074:	200006d8 	.word	0x200006d8
 8001078:	200003f0 	.word	0x200003f0
 800107c:	0800b174 	.word	0x0800b174

08001080 <f_ACCELEROMETER>:
/*********************************************************** END **************************************************************************/

/********************************************** This function use for extracting ACCELEROMETER data ***************************************/
void f_ACCELEROMETER(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af02      	add	r7, sp, #8
	if(flag_acce)
 8001086:	4b22      	ldr	r3, [pc, #136]	; (8001110 <f_ACCELEROMETER+0x90>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d03c      	beq.n	8001108 <f_ACCELEROMETER+0x88>
	{
		if(BSP_ACCELERO_Init())
 800108e:	f001 fbd1 	bl	8002834 <BSP_ACCELERO_Init>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d013      	beq.n	80010c0 <f_ACCELEROMETER+0x40>
		{
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8001098:	481e      	ldr	r0, [pc, #120]	; (8001114 <f_ACCELEROMETER+0x94>)
 800109a:	f001 fc09 	bl	80028b0 <BSP_ACCELERO_AccGetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 800109e:	4a1e      	ldr	r2, [pc, #120]	; (8001118 <f_ACCELEROMETER+0x98>)
 80010a0:	2164      	movs	r1, #100	; 0x64
 80010a2:	481e      	ldr	r0, [pc, #120]	; (800111c <f_ACCELEROMETER+0x9c>)
 80010a4:	f007 fde0 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 80010a8:	230a      	movs	r3, #10
 80010aa:	2264      	movs	r2, #100	; 0x64
 80010ac:	491b      	ldr	r1, [pc, #108]	; (800111c <f_ACCELEROMETER+0x9c>)
 80010ae:	481c      	ldr	r0, [pc, #112]	; (8001120 <f_ACCELEROMETER+0xa0>)
 80010b0:	f005 fc7a 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 80010b4:	2264      	movs	r2, #100	; 0x64
 80010b6:	2100      	movs	r1, #0
 80010b8:	4818      	ldr	r0, [pc, #96]	; (800111c <f_ACCELEROMETER+0x9c>)
 80010ba:	f007 f8d5 	bl	8008268 <memset>
			flag_acce = 0;
		}

	}

}
 80010be:	e023      	b.n	8001108 <f_ACCELEROMETER+0x88>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80010c0:	4814      	ldr	r0, [pc, #80]	; (8001114 <f_ACCELEROMETER+0x94>)
 80010c2:	f001 fbf5 	bl	80028b0 <BSP_ACCELERO_AccGetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 80010c6:	4b13      	ldr	r3, [pc, #76]	; (8001114 <f_ACCELEROMETER+0x94>)
 80010c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010cc:	4619      	mov	r1, r3
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <f_ACCELEROMETER+0x94>)
 80010d0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010d4:	461a      	mov	r2, r3
 80010d6:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <f_ACCELEROMETER+0x94>)
 80010d8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	9200      	str	r2, [sp, #0]
 80010e0:	460b      	mov	r3, r1
 80010e2:	4a10      	ldr	r2, [pc, #64]	; (8001124 <f_ACCELEROMETER+0xa4>)
 80010e4:	2164      	movs	r1, #100	; 0x64
 80010e6:	480d      	ldr	r0, [pc, #52]	; (800111c <f_ACCELEROMETER+0x9c>)
 80010e8:	f007 fdbe 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 80010ec:	230a      	movs	r3, #10
 80010ee:	2264      	movs	r2, #100	; 0x64
 80010f0:	490a      	ldr	r1, [pc, #40]	; (800111c <f_ACCELEROMETER+0x9c>)
 80010f2:	480b      	ldr	r0, [pc, #44]	; (8001120 <f_ACCELEROMETER+0xa0>)
 80010f4:	f005 fc58 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 80010f8:	2264      	movs	r2, #100	; 0x64
 80010fa:	2100      	movs	r1, #0
 80010fc:	4807      	ldr	r0, [pc, #28]	; (800111c <f_ACCELEROMETER+0x9c>)
 80010fe:	f007 f8b3 	bl	8008268 <memset>
			flag_acce = 0;
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <f_ACCELEROMETER+0x90>)
 8001104:	2200      	movs	r2, #0
 8001106:	701a      	strb	r2, [r3, #0]
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000125 	.word	0x20000125
 8001114:	200005e8 	.word	0x200005e8
 8001118:	0800b18c 	.word	0x0800b18c
 800111c:	20000584 	.word	0x20000584
 8001120:	200006d8 	.word	0x200006d8
 8001124:	0800b1b8 	.word	0x0800b1b8

08001128 <f_GYRO>:
/*********************************************************** END **************************************************************************/

/************************************************* This function use for extracting GYRO data *********************************************/
void f_GYRO(void)
{
 8001128:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800112c:	b086      	sub	sp, #24
 800112e:	af06      	add	r7, sp, #24
	if(flag_gyro)
 8001130:	4b28      	ldr	r3, [pc, #160]	; (80011d4 <f_GYRO+0xac>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d049      	beq.n	80011cc <f_GYRO+0xa4>
	{
		if(BSP_GYRO_Init())
 8001138:	f001 fbd2 	bl	80028e0 <BSP_GYRO_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d013      	beq.n	800116a <f_GYRO+0x42>
		{
			BSP_GYRO_GetXYZ(pfData);
 8001142:	4825      	ldr	r0, [pc, #148]	; (80011d8 <f_GYRO+0xb0>)
 8001144:	f001 fc0e 	bl	8002964 <BSP_GYRO_GetXYZ>

			snprintf(str_gyro,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8001148:	4a24      	ldr	r2, [pc, #144]	; (80011dc <f_GYRO+0xb4>)
 800114a:	2164      	movs	r1, #100	; 0x64
 800114c:	4824      	ldr	r0, [pc, #144]	; (80011e0 <f_GYRO+0xb8>)
 800114e:	f007 fd8b 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 8001152:	230a      	movs	r3, #10
 8001154:	2264      	movs	r2, #100	; 0x64
 8001156:	4922      	ldr	r1, [pc, #136]	; (80011e0 <f_GYRO+0xb8>)
 8001158:	4822      	ldr	r0, [pc, #136]	; (80011e4 <f_GYRO+0xbc>)
 800115a:	f005 fc25 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 800115e:	2264      	movs	r2, #100	; 0x64
 8001160:	2100      	movs	r1, #0
 8001162:	481f      	ldr	r0, [pc, #124]	; (80011e0 <f_GYRO+0xb8>)
 8001164:	f007 f880 	bl	8008268 <memset>
			memset(str_gyro, 0, sizeof(str_gyro));
			flag_gyro = 0;
		}
	}

}
 8001168:	e030      	b.n	80011cc <f_GYRO+0xa4>
			BSP_GYRO_GetXYZ(pfData);
 800116a:	481b      	ldr	r0, [pc, #108]	; (80011d8 <f_GYRO+0xb0>)
 800116c:	f001 fbfa 	bl	8002964 <BSP_GYRO_GetXYZ>
			snprintf(str_gyro,100,"\033\143 X-axis = %.2f      Y-axis = %.2f      Z-axis = %.2f \r", pfData[0],pfData[1],pfData[2]);
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <f_GYRO+0xb0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9e7 	bl	8000548 <__aeabi_f2d>
 800117a:	4604      	mov	r4, r0
 800117c:	460d      	mov	r5, r1
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <f_GYRO+0xb0>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f9e0 	bl	8000548 <__aeabi_f2d>
 8001188:	4680      	mov	r8, r0
 800118a:	4689      	mov	r9, r1
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <f_GYRO+0xb0>)
 800118e:	689b      	ldr	r3, [r3, #8]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f9d9 	bl	8000548 <__aeabi_f2d>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800119e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80011a2:	e9cd 4500 	strd	r4, r5, [sp]
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <f_GYRO+0xc0>)
 80011a8:	2164      	movs	r1, #100	; 0x64
 80011aa:	480d      	ldr	r0, [pc, #52]	; (80011e0 <f_GYRO+0xb8>)
 80011ac:	f007 fd5c 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 80011b0:	230a      	movs	r3, #10
 80011b2:	2264      	movs	r2, #100	; 0x64
 80011b4:	490a      	ldr	r1, [pc, #40]	; (80011e0 <f_GYRO+0xb8>)
 80011b6:	480b      	ldr	r0, [pc, #44]	; (80011e4 <f_GYRO+0xbc>)
 80011b8:	f005 fbf6 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 80011bc:	2264      	movs	r2, #100	; 0x64
 80011be:	2100      	movs	r1, #0
 80011c0:	4807      	ldr	r0, [pc, #28]	; (80011e0 <f_GYRO+0xb8>)
 80011c2:	f007 f851 	bl	8008268 <memset>
			flag_gyro = 0;
 80011c6:	4b03      	ldr	r3, [pc, #12]	; (80011d4 <f_GYRO+0xac>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80011d4:	20000126 	.word	0x20000126
 80011d8:	200005f0 	.word	0x200005f0
 80011dc:	0800b18c 	.word	0x0800b18c
 80011e0:	20000520 	.word	0x20000520
 80011e4:	200006d8 	.word	0x200006d8
 80011e8:	0800b1ec 	.word	0x0800b1ec

080011ec <f_MAGNETOMETERR>:
/*********************************************************** END **************************************************************************/

/******************************************This function use for extracting MAGNETOMETER data *********************************************/
void f_MAGNETOMETERR(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af02      	add	r7, sp, #8
	if(flag_mag)
 80011f2:	4b22      	ldr	r3, [pc, #136]	; (800127c <f_MAGNETOMETERR+0x90>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d03c      	beq.n	8001274 <f_MAGNETOMETERR+0x88>
	{
		if(BSP_MAGNETO_Init())
 80011fa:	f001 fbf9 	bl	80029f0 <BSP_MAGNETO_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d013      	beq.n	800122c <f_MAGNETOMETERR+0x40>
		{
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 8001204:	481e      	ldr	r0, [pc, #120]	; (8001280 <f_MAGNETOMETERR+0x94>)
 8001206:	f001 fc1f 	bl	8002a48 <BSP_MAGNETO_GetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 800120a:	4a1e      	ldr	r2, [pc, #120]	; (8001284 <f_MAGNETOMETERR+0x98>)
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	481e      	ldr	r0, [pc, #120]	; (8001288 <f_MAGNETOMETERR+0x9c>)
 8001210:	f007 fd2a 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8001214:	230a      	movs	r3, #10
 8001216:	2264      	movs	r2, #100	; 0x64
 8001218:	491b      	ldr	r1, [pc, #108]	; (8001288 <f_MAGNETOMETERR+0x9c>)
 800121a:	481c      	ldr	r0, [pc, #112]	; (800128c <f_MAGNETOMETERR+0xa0>)
 800121c:	f005 fbc4 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8001220:	2264      	movs	r2, #100	; 0x64
 8001222:	2100      	movs	r1, #0
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <f_MAGNETOMETERR+0x9c>)
 8001226:	f007 f81f 	bl	8008268 <memset>
			flag_mag = 0;
		}

	}

}
 800122a:	e023      	b.n	8001274 <f_MAGNETOMETERR+0x88>
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 800122c:	4814      	ldr	r0, [pc, #80]	; (8001280 <f_MAGNETOMETERR+0x94>)
 800122e:	f001 fc0b 	bl	8002a48 <BSP_MAGNETO_GetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <f_MAGNETOMETERR+0x94>)
 8001234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001238:	4619      	mov	r1, r3
 800123a:	4b11      	ldr	r3, [pc, #68]	; (8001280 <f_MAGNETOMETERR+0x94>)
 800123c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001240:	461a      	mov	r2, r3
 8001242:	4b0f      	ldr	r3, [pc, #60]	; (8001280 <f_MAGNETOMETERR+0x94>)
 8001244:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	9200      	str	r2, [sp, #0]
 800124c:	460b      	mov	r3, r1
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <f_MAGNETOMETERR+0xa4>)
 8001250:	2164      	movs	r1, #100	; 0x64
 8001252:	480d      	ldr	r0, [pc, #52]	; (8001288 <f_MAGNETOMETERR+0x9c>)
 8001254:	f007 fd08 	bl	8008c68 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8001258:	230a      	movs	r3, #10
 800125a:	2264      	movs	r2, #100	; 0x64
 800125c:	490a      	ldr	r1, [pc, #40]	; (8001288 <f_MAGNETOMETERR+0x9c>)
 800125e:	480b      	ldr	r0, [pc, #44]	; (800128c <f_MAGNETOMETERR+0xa0>)
 8001260:	f005 fba2 	bl	80069a8 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8001264:	2264      	movs	r2, #100	; 0x64
 8001266:	2100      	movs	r1, #0
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <f_MAGNETOMETERR+0x9c>)
 800126a:	f006 fffd 	bl	8008268 <memset>
			flag_mag = 0;
 800126e:	4b03      	ldr	r3, [pc, #12]	; (800127c <f_MAGNETOMETERR+0x90>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]
}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000127 	.word	0x20000127
 8001280:	200005e8 	.word	0x200005e8
 8001284:	0800b18c 	.word	0x0800b18c
 8001288:	20000584 	.word	0x20000584
 800128c:	200006d8 	.word	0x200006d8
 8001290:	0800b1b8 	.word	0x0800b1b8

08001294 <f_cur_mov>:
/*********************************************************** END **************************************************************************/


/*********************************************************** This function use for Cursor Move ********************************************/
void f_cur_mov(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0
	f_INT_count++;
 8001298:	4b0d      	ldr	r3, [pc, #52]	; (80012d0 <f_cur_mov+0x3c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	b2da      	uxtb	r2, r3
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <f_cur_mov+0x3c>)
 80012a2:	701a      	strb	r2, [r3, #0]

	if(f_INT_count <= 6)
 80012a4:	4b0a      	ldr	r3, [pc, #40]	; (80012d0 <f_cur_mov+0x3c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b06      	cmp	r3, #6
 80012aa:	d806      	bhi.n	80012ba <f_cur_mov+0x26>
	{
		HAL_UART_Transmit(&huart1,com_dn,sizeof(com_dn),10);
 80012ac:	230a      	movs	r3, #10
 80012ae:	2204      	movs	r2, #4
 80012b0:	4908      	ldr	r1, [pc, #32]	; (80012d4 <f_cur_mov+0x40>)
 80012b2:	4809      	ldr	r0, [pc, #36]	; (80012d8 <f_cur_mov+0x44>)
 80012b4:	f005 fb78 	bl	80069a8 <HAL_UART_Transmit>
	{
		HAL_UART_Transmit(&huart1,com_up,sizeof(com_up),10);
		f_INT_count=1;
	}

}
 80012b8:	e008      	b.n	80012cc <f_cur_mov+0x38>
		HAL_UART_Transmit(&huart1,com_up,sizeof(com_up),10);
 80012ba:	230a      	movs	r3, #10
 80012bc:	2205      	movs	r2, #5
 80012be:	4907      	ldr	r1, [pc, #28]	; (80012dc <f_cur_mov+0x48>)
 80012c0:	4805      	ldr	r0, [pc, #20]	; (80012d8 <f_cur_mov+0x44>)
 80012c2:	f005 fb71 	bl	80069a8 <HAL_UART_Transmit>
		f_INT_count=1;
 80012c6:	4b02      	ldr	r3, [pc, #8]	; (80012d0 <f_cur_mov+0x3c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
}
 80012cc:	bf00      	nop
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000121 	.word	0x20000121
 80012d4:	200000f8 	.word	0x200000f8
 80012d8:	200006d8 	.word	0x200006d8
 80012dc:	200000f0 	.word	0x200000f0

080012e0 <f_cur_sel>:
/*********************************************************** END **************************************************************************/

/*********************************************** This function use for Cursor Select ******************************************************/
void f_cur_sel(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	switch(f_INT_count)
 80012e4:	4b18      	ldr	r3, [pc, #96]	; (8001348 <f_cur_sel+0x68>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	3b01      	subs	r3, #1
 80012ea:	2b05      	cmp	r3, #5
 80012ec:	d826      	bhi.n	800133c <f_cur_sel+0x5c>
 80012ee:	a201      	add	r2, pc, #4	; (adr r2, 80012f4 <f_cur_sel+0x14>)
 80012f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f4:	0800130d 	.word	0x0800130d
 80012f8:	08001315 	.word	0x08001315
 80012fc:	0800131d 	.word	0x0800131d
 8001300:	08001325 	.word	0x08001325
 8001304:	0800132d 	.word	0x0800132d
 8001308:	08001335 	.word	0x08001335
	{
		case 1:
		{
			s_case = f_One;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <f_cur_sel+0x6c>)
 800130e:	2231      	movs	r2, #49	; 0x31
 8001310:	701a      	strb	r2, [r3, #0]
			break;
 8001312:	e013      	b.n	800133c <f_cur_sel+0x5c>
		}
		case 2:
		{
			s_case =  f_Two;
 8001314:	4b0d      	ldr	r3, [pc, #52]	; (800134c <f_cur_sel+0x6c>)
 8001316:	2232      	movs	r2, #50	; 0x32
 8001318:	701a      	strb	r2, [r3, #0]
			break;
 800131a:	e00f      	b.n	800133c <f_cur_sel+0x5c>
		}
		case 3:
		{
			s_case = f_Three;
 800131c:	4b0b      	ldr	r3, [pc, #44]	; (800134c <f_cur_sel+0x6c>)
 800131e:	2233      	movs	r2, #51	; 0x33
 8001320:	701a      	strb	r2, [r3, #0]
			break;
 8001322:	e00b      	b.n	800133c <f_cur_sel+0x5c>
		}
		case 4:
		{
			s_case = f_Four;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <f_cur_sel+0x6c>)
 8001326:	2234      	movs	r2, #52	; 0x34
 8001328:	701a      	strb	r2, [r3, #0]
			break;
 800132a:	e007      	b.n	800133c <f_cur_sel+0x5c>
		}
		case 5:
		{
			s_case = f_Five;
 800132c:	4b07      	ldr	r3, [pc, #28]	; (800134c <f_cur_sel+0x6c>)
 800132e:	2235      	movs	r2, #53	; 0x35
 8001330:	701a      	strb	r2, [r3, #0]
			break;
 8001332:	e003      	b.n	800133c <f_cur_sel+0x5c>
		}
		case 6:
		{
			s_case = f_Six;
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <f_cur_sel+0x6c>)
 8001336:	2236      	movs	r2, #54	; 0x36
 8001338:	701a      	strb	r2, [r3, #0]
		}

	}
}
 800133a:	e7ff      	b.n	800133c <f_cur_sel+0x5c>
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000121 	.word	0x20000121
 800134c:	20000603 	.word	0x20000603

08001350 <f_Switch>:
/*********************************************************** END **************************************************************************/

/************************************************ This function use for Switch  ***********************************************************/
int f_Switch(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	af00      	add	r7, sp, #0

	f_reading = HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin);
 8001354:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001358:	485d      	ldr	r0, [pc, #372]	; (80014d0 <f_Switch+0x180>)
 800135a:	f002 fe0b 	bl	8003f74 <HAL_GPIO_ReadPin>
 800135e:	4603      	mov	r3, r0
 8001360:	b29a      	uxth	r2, r3
 8001362:	4b5c      	ldr	r3, [pc, #368]	; (80014d4 <f_Switch+0x184>)
 8001364:	801a      	strh	r2, [r3, #0]

	if (f_reading != f_lastButtonState)
 8001366:	4b5b      	ldr	r3, [pc, #364]	; (80014d4 <f_Switch+0x184>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	461a      	mov	r2, r3
 800136c:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <f_Switch+0x188>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	429a      	cmp	r2, r3
 8001372:	d009      	beq.n	8001388 <f_Switch+0x38>
	{
		// reset the debouncing timer
		f_lastDebounceTime = (__HAL_TIM_GET_COUNTER(&htim17)/10);//millis
 8001374:	4b59      	ldr	r3, [pc, #356]	; (80014dc <f_Switch+0x18c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	4a59      	ldr	r2, [pc, #356]	; (80014e0 <f_Switch+0x190>)
 800137c:	fba2 2303 	umull	r2, r3, r2, r3
 8001380:	08db      	lsrs	r3, r3, #3
 8001382:	b29a      	uxth	r2, r3
 8001384:	4b57      	ldr	r3, [pc, #348]	; (80014e4 <f_Switch+0x194>)
 8001386:	801a      	strh	r2, [r3, #0]
	}
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10) - f_lastDebounceTime) > f_debounceDelay)
 8001388:	4b54      	ldr	r3, [pc, #336]	; (80014dc <f_Switch+0x18c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800138e:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <f_Switch+0x190>)
 8001390:	fba2 2303 	umull	r2, r3, r2, r3
 8001394:	08db      	lsrs	r3, r3, #3
 8001396:	4a53      	ldr	r2, [pc, #332]	; (80014e4 <f_Switch+0x194>)
 8001398:	8812      	ldrh	r2, [r2, #0]
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	4a52      	ldr	r2, [pc, #328]	; (80014e8 <f_Switch+0x198>)
 800139e:	8812      	ldrh	r2, [r2, #0]
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d90f      	bls.n	80013c4 <f_Switch+0x74>
	{
	  // if the button state has changed:
	  if (f_reading != f_buttonState)
 80013a4:	4b51      	ldr	r3, [pc, #324]	; (80014ec <f_Switch+0x19c>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b29a      	uxth	r2, r3
 80013aa:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <f_Switch+0x184>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d008      	beq.n	80013c4 <f_Switch+0x74>
	  {
		f_buttonState = f_reading;
 80013b2:	4b48      	ldr	r3, [pc, #288]	; (80014d4 <f_Switch+0x184>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	bf14      	ite	ne
 80013ba:	2301      	movne	r3, #1
 80013bc:	2300      	moveq	r3, #0
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b4a      	ldr	r3, [pc, #296]	; (80014ec <f_Switch+0x19c>)
 80013c2:	701a      	strb	r2, [r3, #0]
	  }
	}
	//printf("button stage : %d\n",f_buttonState)  //when switch is pressed


	if ((f_buttonState == 0) && (f_flag2 == 0))
 80013c4:	4b49      	ldr	r3, [pc, #292]	; (80014ec <f_Switch+0x19c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	f083 0301 	eor.w	r3, r3, #1
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d01c      	beq.n	800140c <f_Switch+0xbc>
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <f_Switch+0x1a0>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	f083 0301 	eor.w	r3, r3, #1
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d015      	beq.n	800140c <f_Switch+0xbc>
	{
	  f_presstime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //press time in millis
 80013e0:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <f_Switch+0x18c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e6:	4a3e      	ldr	r2, [pc, #248]	; (80014e0 <f_Switch+0x190>)
 80013e8:	fba2 2303 	umull	r2, r3, r2, r3
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <f_Switch+0x1a4>)
 80013f2:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 0;
 80013f4:	4b40      	ldr	r3, [pc, #256]	; (80014f8 <f_Switch+0x1a8>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 1;
 80013fa:	4b3d      	ldr	r3, [pc, #244]	; (80014f0 <f_Switch+0x1a0>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	701a      	strb	r2, [r3, #0]
	  f_tapCounter++; //tap counter will increase by 1
 8001400:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <f_Switch+0x1ac>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	3301      	adds	r3, #1
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b3c      	ldr	r3, [pc, #240]	; (80014fc <f_Switch+0x1ac>)
 800140a:	701a      	strb	r2, [r3, #0]
	  //printf("Button Press : %d\n",f_tapCounter);
	}


	//when button is released
	if ((f_buttonState == 1) && (f_flag1 == 0))
 800140c:	4b37      	ldr	r3, [pc, #220]	; (80014ec <f_Switch+0x19c>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01e      	beq.n	8001452 <f_Switch+0x102>
 8001414:	4b38      	ldr	r3, [pc, #224]	; (80014f8 <f_Switch+0x1a8>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d017      	beq.n	8001452 <f_Switch+0x102>
	{
	  f_releasetime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //release time in millis
 8001422:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <f_Switch+0x18c>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001428:	4a2d      	ldr	r2, [pc, #180]	; (80014e0 <f_Switch+0x190>)
 800142a:	fba2 2303 	umull	r2, r3, r2, r3
 800142e:	08db      	lsrs	r3, r3, #3
 8001430:	b29a      	uxth	r2, r3
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <f_Switch+0x1b0>)
 8001434:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 1;
 8001436:	4b30      	ldr	r3, [pc, #192]	; (80014f8 <f_Switch+0x1a8>)
 8001438:	2201      	movs	r2, #1
 800143a:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 0;
 800143c:	4b2c      	ldr	r3, [pc, #176]	; (80014f0 <f_Switch+0x1a0>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
	  f_timediff = f_releasetime - f_presstime; //the time gap between press and release
 8001442:	4b2f      	ldr	r3, [pc, #188]	; (8001500 <f_Switch+0x1b0>)
 8001444:	881a      	ldrh	r2, [r3, #0]
 8001446:	4b2b      	ldr	r3, [pc, #172]	; (80014f4 <f_Switch+0x1a4>)
 8001448:	881b      	ldrh	r3, [r3, #0]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b2d      	ldr	r3, [pc, #180]	; (8001504 <f_Switch+0x1b4>)
 8001450:	801a      	strh	r2, [r3, #0]
	  //printf(" Time gap between Button press and release : %d\n",f_timediff);
	}


  //wait for some time and if sw is in release position
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10)- f_presstime) > 400 && f_buttonState == 1)
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <f_Switch+0x18c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	4a21      	ldr	r2, [pc, #132]	; (80014e0 <f_Switch+0x190>)
 800145a:	fba2 2303 	umull	r2, r3, r2, r3
 800145e:	08db      	lsrs	r3, r3, #3
 8001460:	4a24      	ldr	r2, [pc, #144]	; (80014f4 <f_Switch+0x1a4>)
 8001462:	8812      	ldrh	r2, [r2, #0]
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800146a:	d929      	bls.n	80014c0 <f_Switch+0x170>
 800146c:	4b1f      	ldr	r3, [pc, #124]	; (80014ec <f_Switch+0x19c>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d025      	beq.n	80014c0 <f_Switch+0x170>
	{
		  if (f_tapCounter == 1) //if tap counter is 1
 8001474:	4b21      	ldr	r3, [pc, #132]	; (80014fc <f_Switch+0x1ac>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d114      	bne.n	80014a6 <f_Switch+0x156>
		  {
			if (f_timediff >= 400) //if time diff is larger than 400 then its a hold
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <f_Switch+0x1b4>)
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001484:	d305      	bcc.n	8001492 <f_Switch+0x142>
			{
				printf("Long press\n");
 8001486:	4820      	ldr	r0, [pc, #128]	; (8001508 <f_Switch+0x1b8>)
 8001488:	f007 fbe6 	bl	8008c58 <puts>
				f_cur_sel();
 800148c:	f7ff ff28 	bl	80012e0 <f_cur_sel>
 8001490:	e013      	b.n	80014ba <f_Switch+0x16a>
			}
			else //if timediff is less than 400 then its a single tap
			{
				printf("single tap\n");
 8001492:	481e      	ldr	r0, [pc, #120]	; (800150c <f_Switch+0x1bc>)
 8001494:	f007 fbe0 	bl	8008c58 <puts>
				if(sw_flag)
 8001498:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <f_Switch+0x1c0>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00c      	beq.n	80014ba <f_Switch+0x16a>
				{
					f_cur_mov();
 80014a0:	f7ff fef8 	bl	8001294 <f_cur_mov>
 80014a4:	e009      	b.n	80014ba <f_Switch+0x16a>
				}
			}
		  }
		  else if (f_tapCounter == 2 ) //if tapcounter is 2
 80014a6:	4b15      	ldr	r3, [pc, #84]	; (80014fc <f_Switch+0x1ac>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d105      	bne.n	80014ba <f_Switch+0x16a>
		  {
				printf("double tap\n");
 80014ae:	4819      	ldr	r0, [pc, #100]	; (8001514 <f_Switch+0x1c4>)
 80014b0:	f007 fbd2 	bl	8008c58 <puts>
				s_case = f_escape;
 80014b4:	4b18      	ldr	r3, [pc, #96]	; (8001518 <f_Switch+0x1c8>)
 80014b6:	221b      	movs	r2, #27
 80014b8:	701a      	strb	r2, [r3, #0]

		  }

	  f_tapCounter = 0;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <f_Switch+0x1ac>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
	}

	f_lastButtonState = f_reading;
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <f_Switch+0x184>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	461a      	mov	r2, r3
 80014c6:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <f_Switch+0x188>)
 80014c8:	601a      	str	r2, [r3, #0]

	return 0;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	48000800 	.word	0x48000800
 80014d4:	20000600 	.word	0x20000600
 80014d8:	2000011c 	.word	0x2000011c
 80014dc:	20000688 	.word	0x20000688
 80014e0:	cccccccd 	.word	0xcccccccd
 80014e4:	200005fc 	.word	0x200005fc
 80014e8:	2000011a 	.word	0x2000011a
 80014ec:	20000120 	.word	0x20000120
 80014f0:	20000630 	.word	0x20000630
 80014f4:	200006d4 	.word	0x200006d4
 80014f8:	20000761 	.word	0x20000761
 80014fc:	200005fe 	.word	0x200005fe
 8001500:	20000834 	.word	0x20000834
 8001504:	2000062e 	.word	0x2000062e
 8001508:	0800b228 	.word	0x0800b228
 800150c:	0800b234 	.word	0x0800b234
 8001510:	20000602 	.word	0x20000602
 8001514:	0800b240 	.word	0x0800b240
 8001518:	20000603 	.word	0x20000603

0800151c <f_Menu>:
/*********************************************************** END **************************************************************************/

/****************************************** This function use for Printing MENU ***********************************************************/
int f_Menu(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),100);
 8001520:	2364      	movs	r3, #100	; 0x64
 8001522:	22a3      	movs	r2, #163	; 0xa3
 8001524:	4907      	ldr	r1, [pc, #28]	; (8001544 <f_Menu+0x28>)
 8001526:	4808      	ldr	r0, [pc, #32]	; (8001548 <f_Menu+0x2c>)
 8001528:	f005 fa3e 	bl	80069a8 <HAL_UART_Transmit>
	f_INT_count=1;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <f_Menu+0x30>)
 800152e:	2201      	movs	r2, #1
 8001530:	701a      	strb	r2, [r3, #0]
	sw_flag = 1;
 8001532:	4b07      	ldr	r3, [pc, #28]	; (8001550 <f_Menu+0x34>)
 8001534:	2201      	movs	r2, #1
 8001536:	701a      	strb	r2, [r3, #0]
	s_case = 0;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <f_Menu+0x38>)
 800153a:	2200      	movs	r2, #0
 800153c:	701a      	strb	r2, [r3, #0]

	return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	bd80      	pop	{r7, pc}
 8001544:	2000004c 	.word	0x2000004c
 8001548:	200006d8 	.word	0x200006d8
 800154c:	20000121 	.word	0x20000121
 8001550:	20000602 	.word	0x20000602
 8001554:	20000603 	.word	0x20000603

08001558 <f_Invalid>:
/*********************************************************** END **************************************************************************/

/******************************************** This function use for Printing Invalid ******************************************************/
int f_Invalid(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0

	if(flag_error)
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <f_Invalid+0x2c>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00c      	beq.n	800157e <f_Invalid+0x26>
	{
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)Invalid,strlen(Invalid));
 8001564:	4808      	ldr	r0, [pc, #32]	; (8001588 <f_Invalid+0x30>)
 8001566:	f7fe fe33 	bl	80001d0 <strlen>
 800156a:	4603      	mov	r3, r0
 800156c:	b29b      	uxth	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	4905      	ldr	r1, [pc, #20]	; (8001588 <f_Invalid+0x30>)
 8001572:	4806      	ldr	r0, [pc, #24]	; (800158c <f_Invalid+0x34>)
 8001574:	f005 faac 	bl	8006ad0 <HAL_UART_Transmit_IT>
		flag_error = 0;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <f_Invalid+0x2c>)
 800157a:	2200      	movs	r2, #0
 800157c:	701a      	strb	r2, [r3, #0]
	}

return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	bd80      	pop	{r7, pc}
 8001584:	20000128 	.word	0x20000128
 8001588:	200000fc 	.word	0x200000fc
 800158c:	200006d8 	.word	0x200006d8

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001594:	f002 f84c 	bl	8003630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001598:	f000 f91a 	bl	80017d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159c:	f000 fa5a 	bl	8001a54 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80015a0:	f000 fa28 	bl	80019f4 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80015a4:	f000 f9f6 	bl	8001994 <MX_UART4_Init>
  MX_I2C2_Init();
 80015a8:	f000 f964 	bl	8001874 <MX_I2C2_Init>
  MX_TIM16_Init();
 80015ac:	f000 f9a2 	bl	80018f4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80015b0:	f000 f9c8 	bl	8001944 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	// Start timer
	HAL_TIM_Base_Start_IT(&htim16);
 80015b4:	487a      	ldr	r0, [pc, #488]	; (80017a0 <main+0x210>)
 80015b6:	f004 ff39 	bl	800642c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim17);
 80015ba:	487a      	ldr	r0, [pc, #488]	; (80017a4 <main+0x214>)
 80015bc:	f004 fece 	bl	800635c <HAL_TIM_Base_Start>

	BSP_TSENSOR_Init();
 80015c0:	f001 fa88 	bl	8002ad4 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 80015c4:	f001 f9e6 	bl	8002994 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 80015c8:	f001 fa56 	bl	8002a78 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 80015cc:	f001 f932 	bl	8002834 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 80015d0:	f001 f986 	bl	80028e0 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 80015d4:	f001 fa0c 	bl	80029f0 <BSP_MAGNETO_Init>


	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 80015d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015dc:	222e      	movs	r2, #46	; 0x2e
 80015de:	4972      	ldr	r1, [pc, #456]	; (80017a8 <main+0x218>)
 80015e0:	4872      	ldr	r0, [pc, #456]	; (80017ac <main+0x21c>)
 80015e2:	f005 f9e1 	bl	80069a8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80015e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015ea:	2219      	movs	r2, #25
 80015ec:	4970      	ldr	r1, [pc, #448]	; (80017b0 <main+0x220>)
 80015ee:	486f      	ldr	r0, [pc, #444]	; (80017ac <main+0x21c>)
 80015f0:	f005 f9da 	bl	80069a8 <HAL_UART_Transmit>

	s_case = f_escape;
 80015f4:	4b6f      	ldr	r3, [pc, #444]	; (80017b4 <main+0x224>)
 80015f6:	221b      	movs	r2, #27
 80015f8:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1,rxData,1);
 80015fa:	2201      	movs	r2, #1
 80015fc:	496e      	ldr	r1, [pc, #440]	; (80017b8 <main+0x228>)
 80015fe:	486b      	ldr	r0, [pc, #428]	; (80017ac <main+0x21c>)
 8001600:	f005 fad4 	bl	8006bac <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  f_Switch();
 8001604:	f7ff fea4 	bl	8001350 <f_Switch>

	  /*  This if condition is use for UART1 (Interrupt based) */
		if(newMsg)
 8001608:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <main+0x22c>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d020      	beq.n	8001652 <main+0xc2>
		{

			size = strlen(rxBuffer);
 8001610:	486b      	ldr	r0, [pc, #428]	; (80017c0 <main+0x230>)
 8001612:	f7fe fddd 	bl	80001d0 <strlen>
 8001616:	4603      	mov	r3, r0
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b6a      	ldr	r3, [pc, #424]	; (80017c4 <main+0x234>)
 800161c:	701a      	strb	r2, [r3, #0]

			if(size == f_size)
 800161e:	4b69      	ldr	r3, [pc, #420]	; (80017c4 <main+0x234>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b01      	cmp	r3, #1
 8001624:	d10a      	bne.n	800163c <main+0xac>
			{
				s_case= rxBuffer[0];
 8001626:	4b66      	ldr	r3, [pc, #408]	; (80017c0 <main+0x230>)
 8001628:	781a      	ldrb	r2, [r3, #0]
 800162a:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <main+0x224>)
 800162c:	701a      	strb	r2, [r3, #0]
				printf("%d\n",s_case);
 800162e:	4b61      	ldr	r3, [pc, #388]	; (80017b4 <main+0x224>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4619      	mov	r1, r3
 8001634:	4864      	ldr	r0, [pc, #400]	; (80017c8 <main+0x238>)
 8001636:	f007 fa89 	bl	8008b4c <iprintf>
 800163a:	e002      	b.n	8001642 <main+0xb2>
			}
			else
			{
				s_case = f_error;
 800163c:	4b5d      	ldr	r3, [pc, #372]	; (80017b4 <main+0x224>)
 800163e:	2237      	movs	r2, #55	; 0x37
 8001640:	701a      	strb	r2, [r3, #0]
			}

			memset(rxBuffer, 0, sizeof(rxBuffer));
 8001642:	2205      	movs	r2, #5
 8001644:	2100      	movs	r1, #0
 8001646:	485e      	ldr	r0, [pc, #376]	; (80017c0 <main+0x230>)
 8001648:	f006 fe0e 	bl	8008268 <memset>
			newMsg=0;
 800164c:	4b5b      	ldr	r3, [pc, #364]	; (80017bc <main+0x22c>)
 800164e:	2200      	movs	r2, #0
 8001650:	701a      	strb	r2, [r3, #0]
		}



		/* This switch case is using for calling Sensor functions */
		switch(s_case)
 8001652:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <main+0x224>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b36      	cmp	r3, #54	; 0x36
 8001658:	f200 809c 	bhi.w	8001794 <main+0x204>
 800165c:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <main+0xd4>)
 800165e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001662:	bf00      	nop
 8001664:	0800179b 	.word	0x0800179b
 8001668:	08001795 	.word	0x08001795
 800166c:	08001795 	.word	0x08001795
 8001670:	08001795 	.word	0x08001795
 8001674:	08001795 	.word	0x08001795
 8001678:	08001795 	.word	0x08001795
 800167c:	08001795 	.word	0x08001795
 8001680:	08001795 	.word	0x08001795
 8001684:	08001795 	.word	0x08001795
 8001688:	08001795 	.word	0x08001795
 800168c:	08001795 	.word	0x08001795
 8001690:	08001795 	.word	0x08001795
 8001694:	08001795 	.word	0x08001795
 8001698:	08001795 	.word	0x08001795
 800169c:	08001795 	.word	0x08001795
 80016a0:	08001795 	.word	0x08001795
 80016a4:	08001795 	.word	0x08001795
 80016a8:	08001795 	.word	0x08001795
 80016ac:	08001795 	.word	0x08001795
 80016b0:	08001795 	.word	0x08001795
 80016b4:	08001795 	.word	0x08001795
 80016b8:	08001795 	.word	0x08001795
 80016bc:	08001795 	.word	0x08001795
 80016c0:	08001795 	.word	0x08001795
 80016c4:	08001795 	.word	0x08001795
 80016c8:	08001795 	.word	0x08001795
 80016cc:	08001795 	.word	0x08001795
 80016d0:	08001789 	.word	0x08001789
 80016d4:	08001795 	.word	0x08001795
 80016d8:	08001795 	.word	0x08001795
 80016dc:	08001795 	.word	0x08001795
 80016e0:	08001795 	.word	0x08001795
 80016e4:	08001795 	.word	0x08001795
 80016e8:	08001795 	.word	0x08001795
 80016ec:	08001795 	.word	0x08001795
 80016f0:	08001795 	.word	0x08001795
 80016f4:	08001795 	.word	0x08001795
 80016f8:	08001795 	.word	0x08001795
 80016fc:	08001795 	.word	0x08001795
 8001700:	08001795 	.word	0x08001795
 8001704:	08001795 	.word	0x08001795
 8001708:	08001795 	.word	0x08001795
 800170c:	08001795 	.word	0x08001795
 8001710:	08001795 	.word	0x08001795
 8001714:	08001795 	.word	0x08001795
 8001718:	08001795 	.word	0x08001795
 800171c:	08001795 	.word	0x08001795
 8001720:	08001795 	.word	0x08001795
 8001724:	08001795 	.word	0x08001795
 8001728:	08001741 	.word	0x08001741
 800172c:	0800174d 	.word	0x0800174d
 8001730:	08001759 	.word	0x08001759
 8001734:	08001765 	.word	0x08001765
 8001738:	08001771 	.word	0x08001771
 800173c:	0800177d 	.word	0x0800177d
			{
				break;
			}
			case f_One:
			{
				sw_flag=0;
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <main+0x23c>)
 8001742:	2200      	movs	r2, #0
 8001744:	701a      	strb	r2, [r3, #0]
				f_Temperature();
 8001746:	f7ff fbab 	bl	8000ea0 <f_Temperature>
				break;
 800174a:	e027      	b.n	800179c <main+0x20c>
			}
			case f_Two:
			{
				sw_flag=0;
 800174c:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <main+0x23c>)
 800174e:	2200      	movs	r2, #0
 8001750:	701a      	strb	r2, [r3, #0]
				f_Humidity();
 8001752:	f7ff fbf5 	bl	8000f40 <f_Humidity>
				break;
 8001756:	e021      	b.n	800179c <main+0x20c>
			}
			case f_Three:
			{

				sw_flag=0;
 8001758:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <main+0x23c>)
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
				f_Pressure();
 800175e:	f7ff fc3f 	bl	8000fe0 <f_Pressure>
				break;
 8001762:	e01b      	b.n	800179c <main+0x20c>
			}
			case f_Four:
			{
				sw_flag=0;
 8001764:	4b19      	ldr	r3, [pc, #100]	; (80017cc <main+0x23c>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
				f_ACCELEROMETER();
 800176a:	f7ff fc89 	bl	8001080 <f_ACCELEROMETER>
				break;
 800176e:	e015      	b.n	800179c <main+0x20c>
			}
			case f_Five:
			{
				sw_flag=0;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <main+0x23c>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
				f_GYRO();
 8001776:	f7ff fcd7 	bl	8001128 <f_GYRO>
				break;
 800177a:	e00f      	b.n	800179c <main+0x20c>
			}
			case f_Six:
			{
				sw_flag=0;
 800177c:	4b13      	ldr	r3, [pc, #76]	; (80017cc <main+0x23c>)
 800177e:	2200      	movs	r2, #0
 8001780:	701a      	strb	r2, [r3, #0]
				f_MAGNETOMETERR();
 8001782:	f7ff fd33 	bl	80011ec <f_MAGNETOMETERR>
				break;
 8001786:	e009      	b.n	800179c <main+0x20c>
			}
			case f_escape:
			{
				sw_flag=0;
 8001788:	4b10      	ldr	r3, [pc, #64]	; (80017cc <main+0x23c>)
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
				f_Menu();
 800178e:	f7ff fec5 	bl	800151c <f_Menu>
				break;
 8001792:	e003      	b.n	800179c <main+0x20c>
			}
			default :
			{
				f_Invalid();
 8001794:	f7ff fee0 	bl	8001558 <f_Invalid>
 8001798:	e734      	b.n	8001604 <main+0x74>
				break;
 800179a:	bf00      	nop
	  f_Switch();
 800179c:	e732      	b.n	8001604 <main+0x74>
 800179e:	bf00      	nop
 80017a0:	200007e8 	.word	0x200007e8
 80017a4:	20000688 	.word	0x20000688
 80017a8:	20000000 	.word	0x20000000
 80017ac:	200006d8 	.word	0x200006d8
 80017b0:	20000030 	.word	0x20000030
 80017b4:	20000603 	.word	0x20000603
 80017b8:	2000062c 	.word	0x2000062c
 80017bc:	20000604 	.word	0x20000604
 80017c0:	2000075c 	.word	0x2000075c
 80017c4:	20000606 	.word	0x20000606
 80017c8:	0800b24c 	.word	0x0800b24c
 80017cc:	20000602 	.word	0x20000602

080017d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017d6:	f107 0314 	add.w	r3, r7, #20
 80017da:	2244      	movs	r2, #68	; 0x44
 80017dc:	2100      	movs	r1, #0
 80017de:	4618      	mov	r0, r3
 80017e0:	f006 fd42 	bl	8008268 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e4:	463b      	mov	r3, r7
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80017f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80017f6:	f003 fa49 	bl	8004c8c <HAL_PWREx_ControlVoltageScaling>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d001      	beq.n	8001804 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001800:	f000 fb98 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001804:	2310      	movs	r3, #16
 8001806:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001808:	2301      	movs	r3, #1
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800180c:	2300      	movs	r3, #0
 800180e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001810:	2360      	movs	r3, #96	; 0x60
 8001812:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2302      	movs	r3, #2
 8001816:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001818:	2301      	movs	r3, #1
 800181a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800181c:	2301      	movs	r3, #1
 800181e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001820:	2328      	movs	r3, #40	; 0x28
 8001822:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001824:	2307      	movs	r3, #7
 8001826:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001828:	2302      	movs	r3, #2
 800182a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800182c:	2302      	movs	r3, #2
 800182e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fa7f 	bl	8004d38 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001840:	f000 fb78 	bl	8001f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2303      	movs	r3, #3
 800184a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001850:	2300      	movs	r3, #0
 8001852:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001854:	2300      	movs	r3, #0
 8001856:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001858:	463b      	mov	r3, r7
 800185a:	2104      	movs	r1, #4
 800185c:	4618      	mov	r0, r3
 800185e:	f003 fe45 	bl	80054ec <HAL_RCC_ClockConfig>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001868:	f000 fb64 	bl	8001f34 <Error_Handler>
  }
}
 800186c:	bf00      	nop
 800186e:	3758      	adds	r7, #88	; 0x58
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_I2C2_Init+0x74>)
 800187a:	4a1c      	ldr	r2, [pc, #112]	; (80018ec <MX_I2C2_Init+0x78>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001880:	4a1b      	ldr	r2, [pc, #108]	; (80018f0 <MX_I2C2_Init+0x7c>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_I2C2_Init+0x74>)
 800188c:	2201      	movs	r2, #1
 800188e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_I2C2_Init+0x74>)
 8001898:	2200      	movs	r2, #0
 800189a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_I2C2_Init+0x74>)
 800189e:	2200      	movs	r2, #0
 80018a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018ae:	480e      	ldr	r0, [pc, #56]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018b0:	f002 fbb3 	bl	800401a <HAL_I2C_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80018ba:	f000 fb3b 	bl	8001f34 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80018be:	2100      	movs	r1, #0
 80018c0:	4809      	ldr	r0, [pc, #36]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018c2:	f003 f93d 	bl	8004b40 <HAL_I2CEx_ConfigAnalogFilter>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80018cc:	f000 fb32 	bl	8001f34 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80018d0:	2100      	movs	r1, #0
 80018d2:	4805      	ldr	r0, [pc, #20]	; (80018e8 <MX_I2C2_Init+0x74>)
 80018d4:	f003 f97f 	bl	8004bd6 <HAL_I2CEx_ConfigDigitalFilter>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80018de:	f000 fb29 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20000634 	.word	0x20000634
 80018ec:	40005800 	.word	0x40005800
 80018f0:	10909cec 	.word	0x10909cec

080018f4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_TIM16_Init+0x48>)
 80018fa:	4a11      	ldr	r2, [pc, #68]	; (8001940 <MX_TIM16_Init+0x4c>)
 80018fc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 80018fe:	4b0f      	ldr	r3, [pc, #60]	; (800193c <MX_TIM16_Init+0x48>)
 8001900:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001904:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <MX_TIM16_Init+0x48>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = f_count;
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_TIM16_Init+0x48>)
 800190e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001912:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b09      	ldr	r3, [pc, #36]	; (800193c <MX_TIM16_Init+0x48>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800191a:	4b08      	ldr	r3, [pc, #32]	; (800193c <MX_TIM16_Init+0x48>)
 800191c:	2200      	movs	r2, #0
 800191e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <MX_TIM16_Init+0x48>)
 8001922:	2200      	movs	r2, #0
 8001924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001926:	4805      	ldr	r0, [pc, #20]	; (800193c <MX_TIM16_Init+0x48>)
 8001928:	f004 fcc0 	bl	80062ac <HAL_TIM_Base_Init>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001932:	f000 faff 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	200007e8 	.word	0x200007e8
 8001940:	40014400 	.word	0x40014400

08001944 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001948:	4b10      	ldr	r3, [pc, #64]	; (800198c <MX_TIM17_Init+0x48>)
 800194a:	4a11      	ldr	r2, [pc, #68]	; (8001990 <MX_TIM17_Init+0x4c>)
 800194c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <MX_TIM17_Init+0x48>)
 8001950:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001954:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <MX_TIM17_Init+0x48>)
 8001958:	2200      	movs	r2, #0
 800195a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800195c:	4b0b      	ldr	r3, [pc, #44]	; (800198c <MX_TIM17_Init+0x48>)
 800195e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001962:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001964:	4b09      	ldr	r3, [pc, #36]	; (800198c <MX_TIM17_Init+0x48>)
 8001966:	2200      	movs	r2, #0
 8001968:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800196a:	4b08      	ldr	r3, [pc, #32]	; (800198c <MX_TIM17_Init+0x48>)
 800196c:	2200      	movs	r2, #0
 800196e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001970:	4b06      	ldr	r3, [pc, #24]	; (800198c <MX_TIM17_Init+0x48>)
 8001972:	2200      	movs	r2, #0
 8001974:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <MX_TIM17_Init+0x48>)
 8001978:	f004 fc98 	bl	80062ac <HAL_TIM_Base_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001982:	f000 fad7 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001986:	bf00      	nop
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000688 	.word	0x20000688
 8001990:	40014800 	.word	0x40014800

08001994 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001998:	4b14      	ldr	r3, [pc, #80]	; (80019ec <MX_UART4_Init+0x58>)
 800199a:	4a15      	ldr	r2, [pc, #84]	; (80019f0 <MX_UART4_Init+0x5c>)
 800199c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800199e:	4b13      	ldr	r3, [pc, #76]	; (80019ec <MX_UART4_Init+0x58>)
 80019a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <MX_UART4_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019ac:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <MX_UART4_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019b2:	4b0e      	ldr	r3, [pc, #56]	; (80019ec <MX_UART4_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <MX_UART4_Init+0x58>)
 80019ba:	220c      	movs	r2, #12
 80019bc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019be:	4b0b      	ldr	r3, [pc, #44]	; (80019ec <MX_UART4_Init+0x58>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c4:	4b09      	ldr	r3, [pc, #36]	; (80019ec <MX_UART4_Init+0x58>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ca:	4b08      	ldr	r3, [pc, #32]	; (80019ec <MX_UART4_Init+0x58>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019d0:	4b06      	ldr	r3, [pc, #24]	; (80019ec <MX_UART4_Init+0x58>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019d6:	4805      	ldr	r0, [pc, #20]	; (80019ec <MX_UART4_Init+0x58>)
 80019d8:	f004 ff98 	bl	800690c <HAL_UART_Init>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80019e2:	f000 faa7 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	20000764 	.word	0x20000764
 80019f0:	40004c00 	.word	0x40004c00

080019f4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 80019fa:	4a15      	ldr	r2, [pc, #84]	; (8001a50 <MX_USART1_UART_Init+0x5c>)
 80019fc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80019fe:	4b13      	ldr	r3, [pc, #76]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a06:	4b11      	ldr	r3, [pc, #68]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001a18:	4b0c      	ldr	r3, [pc, #48]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a1a:	220c      	movs	r2, #12
 8001a1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a1e:	4b0b      	ldr	r3, [pc, #44]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a24:	4b09      	ldr	r3, [pc, #36]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a2a:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001a36:	4805      	ldr	r0, [pc, #20]	; (8001a4c <MX_USART1_UART_Init+0x58>)
 8001a38:	f004 ff68 	bl	800690c <HAL_UART_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001a42:	f000 fa77 	bl	8001f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001a46:	bf00      	nop
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	200006d8 	.word	0x200006d8
 8001a50:	40013800 	.word	0x40013800

08001a54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08a      	sub	sp, #40	; 0x28
 8001a58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a5a:	f107 0314 	add.w	r3, r7, #20
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
 8001a68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a6a:	4bbc      	ldr	r3, [pc, #752]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a6e:	4abb      	ldr	r2, [pc, #748]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001a70:	f043 0310 	orr.w	r3, r3, #16
 8001a74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a76:	4bb9      	ldr	r3, [pc, #740]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7a:	f003 0310 	and.w	r3, r3, #16
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a82:	4bb6      	ldr	r3, [pc, #728]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a86:	4ab5      	ldr	r2, [pc, #724]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a8e:	4bb3      	ldr	r3, [pc, #716]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4bb0      	ldr	r3, [pc, #704]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a9e:	4aaf      	ldr	r2, [pc, #700]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001aa6:	4bad      	ldr	r3, [pc, #692]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60bb      	str	r3, [r7, #8]
 8001ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4baa      	ldr	r3, [pc, #680]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab6:	4aa9      	ldr	r2, [pc, #676]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001abe:	4ba7      	ldr	r3, [pc, #668]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	607b      	str	r3, [r7, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aca:	4ba4      	ldr	r3, [pc, #656]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ace:	4aa3      	ldr	r2, [pc, #652]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001ad0:	f043 0308 	orr.w	r3, r3, #8
 8001ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad6:	4ba1      	ldr	r3, [pc, #644]	; (8001d5c <MX_GPIO_Init+0x308>)
 8001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	603b      	str	r3, [r7, #0]
 8001ae0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001ae8:	489d      	ldr	r0, [pc, #628]	; (8001d60 <MX_GPIO_Init+0x30c>)
 8001aea:	f002 fa5b 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001aee:	2200      	movs	r2, #0
 8001af0:	f248 1104 	movw	r1, #33028	; 0x8104
 8001af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001af8:	f002 fa54 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001afc:	2200      	movs	r2, #0
 8001afe:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001b02:	4898      	ldr	r0, [pc, #608]	; (8001d64 <MX_GPIO_Init+0x310>)
 8001b04:	f002 fa4e 	bl	8003fa4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f241 0181 	movw	r1, #4225	; 0x1081
 8001b0e:	4896      	ldr	r0, [pc, #600]	; (8001d68 <MX_GPIO_Init+0x314>)
 8001b10:	f002 fa48 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b14:	2201      	movs	r2, #1
 8001b16:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b1a:	4893      	ldr	r0, [pc, #588]	; (8001d68 <MX_GPIO_Init+0x314>)
 8001b1c:	f002 fa42 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001b20:	2200      	movs	r2, #0
 8001b22:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001b26:	4891      	ldr	r0, [pc, #580]	; (8001d6c <MX_GPIO_Init+0x318>)
 8001b28:	f002 fa3c 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	2120      	movs	r1, #32
 8001b30:	488c      	ldr	r0, [pc, #560]	; (8001d64 <MX_GPIO_Init+0x310>)
 8001b32:	f002 fa37 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001b36:	2201      	movs	r2, #1
 8001b38:	2101      	movs	r1, #1
 8001b3a:	4889      	ldr	r0, [pc, #548]	; (8001d60 <MX_GPIO_Init+0x30c>)
 8001b3c:	f002 fa32 	bl	8003fa4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001b40:	f240 1315 	movw	r3, #277	; 0x115
 8001b44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b46:	2301      	movs	r3, #1
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b52:	f107 0314 	add.w	r3, r7, #20
 8001b56:	4619      	mov	r1, r3
 8001b58:	4881      	ldr	r0, [pc, #516]	; (8001d60 <MX_GPIO_Init+0x30c>)
 8001b5a:	f001 ff6d 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001b5e:	236a      	movs	r3, #106	; 0x6a
 8001b60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b62:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001b66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	487b      	ldr	r0, [pc, #492]	; (8001d60 <MX_GPIO_Init+0x30c>)
 8001b74:	f001 ff60 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : f_sw13_Pin */
  GPIO_InitStruct.Pin = f_sw13_Pin;
 8001b78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(f_sw13_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4877      	ldr	r0, [pc, #476]	; (8001d6c <MX_GPIO_Init+0x318>)
 8001b8e:	f001 ff53 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001b92:	233f      	movs	r3, #63	; 0x3f
 8001b94:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001b96:	230b      	movs	r3, #11
 8001b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 0314 	add.w	r3, r7, #20
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4871      	ldr	r0, [pc, #452]	; (8001d6c <MX_GPIO_Init+0x318>)
 8001ba6:	f001 ff47 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001baa:	f248 1304 	movw	r3, #33028	; 0x8104
 8001bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbc:	f107 0314 	add.w	r3, r7, #20
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc6:	f001 ff37 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001bca:	2308      	movs	r3, #8
 8001bcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bce:	2302      	movs	r3, #2
 8001bd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 0314 	add.w	r3, r7, #20
 8001be2:	4619      	mov	r1, r3
 8001be4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be8:	f001 ff26 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001bec:	2310      	movs	r3, #16
 8001bee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001bf0:	230b      	movs	r3, #11
 8001bf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 0314 	add.w	r3, r7, #20
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c02:	f001 ff19 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001c06:	23e0      	movs	r3, #224	; 0xe0
 8001c08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c16:	2305      	movs	r3, #5
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1a:	f107 0314 	add.w	r3, r7, #20
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c24:	f001 ff08 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001c36:	f107 0314 	add.w	r3, r7, #20
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4849      	ldr	r0, [pc, #292]	; (8001d64 <MX_GPIO_Init+0x310>)
 8001c3e:	f001 fefb 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001c42:	2302      	movs	r3, #2
 8001c44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c46:	230b      	movs	r3, #11
 8001c48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001c4e:	f107 0314 	add.w	r3, r7, #20
 8001c52:	4619      	mov	r1, r3
 8001c54:	4843      	ldr	r0, [pc, #268]	; (8001d64 <MX_GPIO_Init+0x310>)
 8001c56:	f001 feef 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001c5a:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001c5e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c60:	2301      	movs	r3, #1
 8001c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	4619      	mov	r1, r3
 8001c72:	483c      	ldr	r0, [pc, #240]	; (8001d64 <MX_GPIO_Init+0x310>)
 8001c74:	f001 fee0 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001c78:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c86:	2300      	movs	r3, #0
 8001c88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001c8a:	2306      	movs	r3, #6
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c8e:	f107 0314 	add.w	r3, r7, #20
 8001c92:	4619      	mov	r1, r3
 8001c94:	4832      	ldr	r0, [pc, #200]	; (8001d60 <MX_GPIO_Init+0x30c>)
 8001c96:	f001 fecf 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001c9a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001c9e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001cac:	230a      	movs	r3, #10
 8001cae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	482a      	ldr	r0, [pc, #168]	; (8001d60 <MX_GPIO_Init+0x30c>)
 8001cb8:	f001 febe 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001cbc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cce:	2307      	movs	r3, #7
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4823      	ldr	r0, [pc, #140]	; (8001d68 <MX_GPIO_Init+0x314>)
 8001cda:	f001 fead 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001cde:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001ce2:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	481c      	ldr	r0, [pc, #112]	; (8001d68 <MX_GPIO_Init+0x314>)
 8001cf6:	f001 fe9f 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001cfa:	f243 0381 	movw	r3, #12417	; 0x3081
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d00:	2301      	movs	r3, #1
 8001d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d0c:	f107 0314 	add.w	r3, r7, #20
 8001d10:	4619      	mov	r1, r3
 8001d12:	4815      	ldr	r0, [pc, #84]	; (8001d68 <MX_GPIO_Init+0x314>)
 8001d14:	f001 fe90 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001d18:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001d1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d2a:	f107 0314 	add.w	r3, r7, #20
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480e      	ldr	r0, [pc, #56]	; (8001d6c <MX_GPIO_Init+0x318>)
 8001d32:	f001 fe81 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001d36:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4807      	ldr	r0, [pc, #28]	; (8001d6c <MX_GPIO_Init+0x318>)
 8001d4e:	f001 fe73 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001d52:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	e009      	b.n	8001d70 <MX_GPIO_Init+0x31c>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	48001000 	.word	0x48001000
 8001d64:	48000400 	.word	0x48000400
 8001d68:	48000c00 	.word	0x48000c00
 8001d6c:	48000800 	.word	0x48000800
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001d76:	f107 0314 	add.w	r3, r7, #20
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d80:	f001 fe5a 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001d84:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d92:	2303      	movs	r3, #3
 8001d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d96:	230a      	movs	r3, #10
 8001d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9a:	f107 0314 	add.w	r3, r7, #20
 8001d9e:	4619      	mov	r1, r3
 8001da0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001da4:	f001 fe48 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001da8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dae:	2302      	movs	r3, #2
 8001db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db6:	2303      	movs	r3, #3
 8001db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001dba:	2306      	movs	r3, #6
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4823      	ldr	r0, [pc, #140]	; (8001e54 <MX_GPIO_Init+0x400>)
 8001dc6:	f001 fe37 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001dca:	2302      	movs	r3, #2
 8001dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dda:	2305      	movs	r3, #5
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	481c      	ldr	r0, [pc, #112]	; (8001e58 <MX_GPIO_Init+0x404>)
 8001de6:	f001 fe27 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001dea:	2378      	movs	r3, #120	; 0x78
 8001dec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dee:	2302      	movs	r3, #2
 8001df0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dfa:	2307      	movs	r3, #7
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dfe:	f107 0314 	add.w	r3, r7, #20
 8001e02:	4619      	mov	r1, r3
 8001e04:	4814      	ldr	r0, [pc, #80]	; (8001e58 <MX_GPIO_Init+0x404>)
 8001e06:	f001 fe17 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001e0a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e10:	2312      	movs	r3, #18
 8001e12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e14:	2300      	movs	r3, #0
 8001e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e1c:	2304      	movs	r3, #4
 8001e1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	4619      	mov	r1, r3
 8001e26:	480d      	ldr	r0, [pc, #52]	; (8001e5c <MX_GPIO_Init+0x408>)
 8001e28:	f001 fe06 	bl	8003a38 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2100      	movs	r1, #0
 8001e30:	2017      	movs	r0, #23
 8001e32:	f001 fd4c 	bl	80038ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e36:	2017      	movs	r0, #23
 8001e38:	f001 fd65 	bl	8003906 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	2100      	movs	r1, #0
 8001e40:	2028      	movs	r0, #40	; 0x28
 8001e42:	f001 fd44 	bl	80038ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e46:	2028      	movs	r0, #40	; 0x28
 8001e48:	f001 fd5d 	bl	8003906 <HAL_NVIC_EnableIRQ>

}
 8001e4c:	bf00      	nop
 8001e4e:	3728      	adds	r7, #40	; 0x28
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	48000800 	.word	0x48000800
 8001e58:	48000c00 	.word	0x48000c00
 8001e5c:	48000400 	.word	0x48000400

08001e60 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_UART_RxCpltCallback+0x54>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d11c      	bne.n	8001eac <HAL_UART_RxCpltCallback+0x4c>
    {
    	if(rxData[0]!='\r')
 8001e72:	4b11      	ldr	r3, [pc, #68]	; (8001eb8 <HAL_UART_RxCpltCallback+0x58>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b0d      	cmp	r3, #13
 8001e78:	d00d      	beq.n	8001e96 <HAL_UART_RxCpltCallback+0x36>
        {
            rxBuffer[rxIndex]=rxData[0];
 8001e7a:	4b10      	ldr	r3, [pc, #64]	; (8001ebc <HAL_UART_RxCpltCallback+0x5c>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	461a      	mov	r2, r3
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <HAL_UART_RxCpltCallback+0x58>)
 8001e82:	7819      	ldrb	r1, [r3, #0]
 8001e84:	4b0e      	ldr	r3, [pc, #56]	; (8001ec0 <HAL_UART_RxCpltCallback+0x60>)
 8001e86:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8001e88:	4b0c      	ldr	r3, [pc, #48]	; (8001ebc <HAL_UART_RxCpltCallback+0x5c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_UART_RxCpltCallback+0x5c>)
 8001e92:	701a      	strb	r2, [r3, #0]
 8001e94:	e005      	b.n	8001ea2 <HAL_UART_RxCpltCallback+0x42>
        }
        else
        {
            newMsg=1;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_UART_RxCpltCallback+0x64>)
 8001e98:	2201      	movs	r2, #1
 8001e9a:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_UART_RxCpltCallback+0x5c>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <HAL_UART_RxCpltCallback+0x58>)
 8001ea6:	4808      	ldr	r0, [pc, #32]	; (8001ec8 <HAL_UART_RxCpltCallback+0x68>)
 8001ea8:	f004 fe80 	bl	8006bac <HAL_UART_Receive_IT>
    }

}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40013800 	.word	0x40013800
 8001eb8:	2000062c 	.word	0x2000062c
 8001ebc:	20000605 	.word	0x20000605
 8001ec0:	2000075c 	.word	0x2000075c
 8001ec4:	20000604 	.word	0x20000604
 8001ec8:	200006d8 	.word	0x200006d8

08001ecc <HAL_TIM_PeriodElapsedCallback>:
/*This Callback function use for generating Timer(timer 16) delay  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  // Check the timer triggered this callback
	if(htim -> Instance == TIM16)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a0e      	ldr	r2, [pc, #56]	; (8001f14 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d114      	bne.n	8001f08 <HAL_TIM_PeriodElapsedCallback+0x3c>
	{
		flag_temp  = 1;							//checking the timer callback
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
		flag_humi  = 1;
 8001ee4:	4b0d      	ldr	r3, [pc, #52]	; (8001f1c <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
		flag_pre   = 1;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
		flag_acce  = 1;
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	701a      	strb	r2, [r3, #0]
		flag_gyro  = 1;
 8001ef6:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
		flag_mag   = 1;
 8001efc:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001efe:	2201      	movs	r2, #1
 8001f00:	701a      	strb	r2, [r3, #0]
		flag_error = 1;
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
	}
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	40014400 	.word	0x40014400
 8001f18:	20000122 	.word	0x20000122
 8001f1c:	20000123 	.word	0x20000123
 8001f20:	20000124 	.word	0x20000124
 8001f24:	20000125 	.word	0x20000125
 8001f28:	20000126 	.word	0x20000126
 8001f2c:	20000127 	.word	0x20000127
 8001f30:	20000128 	.word	0x20000128

08001f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f38:	b672      	cpsid	i
}
 8001f3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <Error_Handler+0x8>
	...

08001f40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f46:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_MspInit+0x44>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <HAL_MspInit+0x44>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6613      	str	r3, [r2, #96]	; 0x60
 8001f52:	4b0c      	ldr	r3, [pc, #48]	; (8001f84 <HAL_MspInit+0x44>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_MspInit+0x44>)
 8001f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <HAL_MspInit+0x44>)
 8001f64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f68:	6593      	str	r3, [r2, #88]	; 0x58
 8001f6a:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_MspInit+0x44>)
 8001f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f72:	603b      	str	r3, [r7, #0]
 8001f74:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000

08001f88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b0ac      	sub	sp, #176	; 0xb0
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f90:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
 8001f98:	605a      	str	r2, [r3, #4]
 8001f9a:	609a      	str	r2, [r3, #8]
 8001f9c:	60da      	str	r2, [r3, #12]
 8001f9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2288      	movs	r2, #136	; 0x88
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f006 f95d 	bl	8008268 <memset>
  if(hi2c->Instance==I2C2)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a21      	ldr	r2, [pc, #132]	; (8002038 <HAL_I2C_MspInit+0xb0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d13b      	bne.n	8002030 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001fb8:	2380      	movs	r3, #128	; 0x80
 8001fba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fc0:	f107 0314 	add.w	r3, r7, #20
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fcb5 	bl	8005934 <HAL_RCCEx_PeriphCLKConfig>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d001      	beq.n	8001fd4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001fd0:	f7ff ffb0 	bl	8001f34 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8001fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd8:	4a18      	ldr	r2, [pc, #96]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8001fda:	f043 0302 	orr.w	r3, r3, #2
 8001fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	f003 0302 	and.w	r3, r3, #2
 8001fe8:	613b      	str	r3, [r7, #16]
 8001fea:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001fec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ff0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ff4:	2312      	movs	r3, #18
 8001ff6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002006:	2304      	movs	r3, #4
 8002008:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800200c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002010:	4619      	mov	r1, r3
 8002012:	480b      	ldr	r0, [pc, #44]	; (8002040 <HAL_I2C_MspInit+0xb8>)
 8002014:	f001 fd10 	bl	8003a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002018:	4b08      	ldr	r3, [pc, #32]	; (800203c <HAL_I2C_MspInit+0xb4>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a07      	ldr	r2, [pc, #28]	; (800203c <HAL_I2C_MspInit+0xb4>)
 800201e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b05      	ldr	r3, [pc, #20]	; (800203c <HAL_I2C_MspInit+0xb4>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002030:	bf00      	nop
 8002032:	37b0      	adds	r7, #176	; 0xb0
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40005800 	.word	0x40005800
 800203c:	40021000 	.word	0x40021000
 8002040:	48000400 	.word	0x48000400

08002044 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <HAL_I2C_MspDeInit+0x3c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d10f      	bne.n	8002076 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <HAL_I2C_MspDeInit+0x40>)
 8002058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205a:	4a0a      	ldr	r2, [pc, #40]	; (8002084 <HAL_I2C_MspDeInit+0x40>)
 800205c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002060:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8002062:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002066:	4808      	ldr	r0, [pc, #32]	; (8002088 <HAL_I2C_MspDeInit+0x44>)
 8002068:	f001 fe90 	bl	8003d8c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 800206c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002070:	4805      	ldr	r0, [pc, #20]	; (8002088 <HAL_I2C_MspDeInit+0x44>)
 8002072:	f001 fe8b 	bl	8003d8c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005800 	.word	0x40005800
 8002084:	40021000 	.word	0x40021000
 8002088:	48000400 	.word	0x48000400

0800208c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a16      	ldr	r2, [pc, #88]	; (80020f4 <HAL_TIM_Base_MspInit+0x68>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d114      	bne.n	80020c8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800209e:	4b16      	ldr	r3, [pc, #88]	; (80020f8 <HAL_TIM_Base_MspInit+0x6c>)
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	4a15      	ldr	r2, [pc, #84]	; (80020f8 <HAL_TIM_Base_MspInit+0x6c>)
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	6613      	str	r3, [r2, #96]	; 0x60
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_TIM_Base_MspInit+0x6c>)
 80020ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80020b6:	2200      	movs	r2, #0
 80020b8:	2100      	movs	r1, #0
 80020ba:	2019      	movs	r0, #25
 80020bc:	f001 fc07 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80020c0:	2019      	movs	r0, #25
 80020c2:	f001 fc20 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80020c6:	e010      	b.n	80020ea <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <HAL_TIM_Base_MspInit+0x70>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d10b      	bne.n	80020ea <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_TIM_Base_MspInit+0x6c>)
 80020d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020d6:	4a08      	ldr	r2, [pc, #32]	; (80020f8 <HAL_TIM_Base_MspInit+0x6c>)
 80020d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020dc:	6613      	str	r3, [r2, #96]	; 0x60
 80020de:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <HAL_TIM_Base_MspInit+0x6c>)
 80020e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
}
 80020ea:	bf00      	nop
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40014400 	.word	0x40014400
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40014800 	.word	0x40014800

08002100 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0ae      	sub	sp, #184	; 0xb8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002118:	f107 031c 	add.w	r3, r7, #28
 800211c:	2288      	movs	r2, #136	; 0x88
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f006 f8a1 	bl	8008268 <memset>
  if(huart->Instance==UART4)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a4a      	ldr	r2, [pc, #296]	; (8002254 <HAL_UART_MspInit+0x154>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d144      	bne.n	80021ba <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002130:	2308      	movs	r3, #8
 8002132:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002134:	2300      	movs	r3, #0
 8002136:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002138:	f107 031c 	add.w	r3, r7, #28
 800213c:	4618      	mov	r0, r3
 800213e:	f003 fbf9 	bl	8005934 <HAL_RCCEx_PeriphCLKConfig>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002148:	f7ff fef4 	bl	8001f34 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800214c:	4b42      	ldr	r3, [pc, #264]	; (8002258 <HAL_UART_MspInit+0x158>)
 800214e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002150:	4a41      	ldr	r2, [pc, #260]	; (8002258 <HAL_UART_MspInit+0x158>)
 8002152:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002156:	6593      	str	r3, [r2, #88]	; 0x58
 8002158:	4b3f      	ldr	r3, [pc, #252]	; (8002258 <HAL_UART_MspInit+0x158>)
 800215a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800215c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002164:	4b3c      	ldr	r3, [pc, #240]	; (8002258 <HAL_UART_MspInit+0x158>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	4a3b      	ldr	r2, [pc, #236]	; (8002258 <HAL_UART_MspInit+0x158>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002170:	4b39      	ldr	r3, [pc, #228]	; (8002258 <HAL_UART_MspInit+0x158>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	617b      	str	r3, [r7, #20]
 800217a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800217c:	2303      	movs	r3, #3
 800217e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002188:	2300      	movs	r3, #0
 800218a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218e:	2303      	movs	r3, #3
 8002190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002194:	2308      	movs	r3, #8
 8002196:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800219a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800219e:	4619      	mov	r1, r3
 80021a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80021a4:	f001 fc48 	bl	8003a38 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80021a8:	2200      	movs	r2, #0
 80021aa:	2100      	movs	r1, #0
 80021ac:	2034      	movs	r0, #52	; 0x34
 80021ae:	f001 fb8e 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80021b2:	2034      	movs	r0, #52	; 0x34
 80021b4:	f001 fba7 	bl	8003906 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80021b8:	e047      	b.n	800224a <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a27      	ldr	r2, [pc, #156]	; (800225c <HAL_UART_MspInit+0x15c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d142      	bne.n	800224a <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80021c8:	2300      	movs	r3, #0
 80021ca:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021cc:	f107 031c 	add.w	r3, r7, #28
 80021d0:	4618      	mov	r0, r3
 80021d2:	f003 fbaf 	bl	8005934 <HAL_RCCEx_PeriphCLKConfig>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80021dc:	f7ff feaa 	bl	8001f34 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e0:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_UART_MspInit+0x158>)
 80021e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021e4:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_UART_MspInit+0x158>)
 80021e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021ea:	6613      	str	r3, [r2, #96]	; 0x60
 80021ec:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_UART_MspInit+0x158>)
 80021ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021f4:	613b      	str	r3, [r7, #16]
 80021f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021f8:	4b17      	ldr	r3, [pc, #92]	; (8002258 <HAL_UART_MspInit+0x158>)
 80021fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021fc:	4a16      	ldr	r2, [pc, #88]	; (8002258 <HAL_UART_MspInit+0x158>)
 80021fe:	f043 0302 	orr.w	r3, r3, #2
 8002202:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002204:	4b14      	ldr	r3, [pc, #80]	; (8002258 <HAL_UART_MspInit+0x158>)
 8002206:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8002210:	23c0      	movs	r3, #192	; 0xc0
 8002212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221c:	2300      	movs	r3, #0
 800221e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002228:	2307      	movs	r3, #7
 800222a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002232:	4619      	mov	r1, r3
 8002234:	480a      	ldr	r0, [pc, #40]	; (8002260 <HAL_UART_MspInit+0x160>)
 8002236:	f001 fbff 	bl	8003a38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2025      	movs	r0, #37	; 0x25
 8002240:	f001 fb45 	bl	80038ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002244:	2025      	movs	r0, #37	; 0x25
 8002246:	f001 fb5e 	bl	8003906 <HAL_NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	37b8      	adds	r7, #184	; 0xb8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40004c00 	.word	0x40004c00
 8002258:	40021000 	.word	0x40021000
 800225c:	40013800 	.word	0x40013800
 8002260:	48000400 	.word	0x48000400

08002264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002268:	e7fe      	b.n	8002268 <NMI_Handler+0x4>

0800226a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800226a:	b480      	push	{r7}
 800226c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800226e:	e7fe      	b.n	800226e <HardFault_Handler+0x4>

08002270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <MemManage_Handler+0x4>

08002276 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <BusFault_Handler+0x4>

0800227c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <UsageFault_Handler+0x4>

08002282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002286:	bf00      	nop
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr

08002290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b0:	f001 fa12 	bl	80036d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022b4:	bf00      	nop
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80022bc:	2020      	movs	r0, #32
 80022be:	f001 fe89 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80022c2:	2040      	movs	r0, #64	; 0x40
 80022c4:	f001 fe86 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80022c8:	2080      	movs	r0, #128	; 0x80
 80022ca:	f001 fe83 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80022ce:	f44f 7080 	mov.w	r0, #256	; 0x100
 80022d2:	f001 fe7f 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
	...

080022dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80022e2:	f004 f913 	bl	800650c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	200007e8 	.word	0x200007e8

080022f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <USART1_IRQHandler+0x10>)
 80022f6:	f004 fcaf 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200006d8 	.word	0x200006d8

08002304 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002308:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800230c:	f001 fe62 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002310:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002314:	f001 fe5e 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8002318:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800231c:	f001 fe5a 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8002320:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002324:	f001 fe56 	bl	8003fd4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}

0800232c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002330:	4802      	ldr	r0, [pc, #8]	; (800233c <UART4_IRQHandler+0x10>)
 8002332:	f004 fc91 	bl	8006c58 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000764 	.word	0x20000764

08002340 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	4603      	mov	r3, r0
 8002348:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 800234a:	4b0f      	ldr	r3, [pc, #60]	; (8002388 <ITM_SendChar+0x48>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a0e      	ldr	r2, [pc, #56]	; (8002388 <ITM_SendChar+0x48>)
 8002350:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002354:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8002356:	4b0d      	ldr	r3, [pc, #52]	; (800238c <ITM_SendChar+0x4c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a0c      	ldr	r2, [pc, #48]	; (800238c <ITM_SendChar+0x4c>)
 800235c:	f043 0301 	orr.w	r3, r3, #1
 8002360:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8002362:	bf00      	nop
 8002364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f8      	beq.n	8002364 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002372:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	6013      	str	r3, [r2, #0]
}
 800237a:	bf00      	nop
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
 8002386:	bf00      	nop
 8002388:	e000edfc 	.word	0xe000edfc
 800238c:	e0000e00 	.word	0xe0000e00

08002390 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
	return 1;
 8002394:	2301      	movs	r3, #1
}
 8002396:	4618      	mov	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <_kill>:

int _kill(int pid, int sig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80023aa:	f005 ff25 	bl	80081f8 <__errno>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2216      	movs	r2, #22
 80023b2:	601a      	str	r2, [r3, #0]
	return -1;
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_exit>:

void _exit (int status)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023c8:	f04f 31ff 	mov.w	r1, #4294967295
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f7ff ffe7 	bl	80023a0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023d2:	e7fe      	b.n	80023d2 <_exit+0x12>

080023d4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	2300      	movs	r3, #0
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	e00a      	b.n	80023fc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023e6:	f3af 8000 	nop.w
 80023ea:	4601      	mov	r1, r0
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	60ba      	str	r2, [r7, #8]
 80023f2:	b2ca      	uxtb	r2, r1
 80023f4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
 80023fc:	697a      	ldr	r2, [r7, #20]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	429a      	cmp	r2, r3
 8002402:	dbf0      	blt.n	80023e6 <_read+0x12>
	}

return len;
 8002404:	687b      	ldr	r3, [r7, #4]
}
 8002406:	4618      	mov	r0, r3
 8002408:	3718      	adds	r7, #24
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}

0800240e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b086      	sub	sp, #24
 8002412:	af00      	add	r7, sp, #0
 8002414:	60f8      	str	r0, [r7, #12]
 8002416:	60b9      	str	r1, [r7, #8]
 8002418:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241a:	2300      	movs	r3, #0
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	e009      	b.n	8002434 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	1c5a      	adds	r2, r3, #1
 8002424:	60ba      	str	r2, [r7, #8]
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ff89 	bl	8002340 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	3301      	adds	r3, #1
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	697a      	ldr	r2, [r7, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	429a      	cmp	r2, r3
 800243a:	dbf1      	blt.n	8002420 <_write+0x12>
	}
	return len;
 800243c:	687b      	ldr	r3, [r7, #4]
}
 800243e:	4618      	mov	r0, r3
 8002440:	3718      	adds	r7, #24
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}

08002446 <_close>:

int _close(int file)
{
 8002446:	b480      	push	{r7}
 8002448:	b083      	sub	sp, #12
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
	return -1;
 800244e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800246e:	605a      	str	r2, [r3, #4]
	return 0;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	370c      	adds	r7, #12
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr

0800247e <_isatty>:

int _isatty(int file)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
	return 1;
 8002486:	2301      	movs	r3, #1
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002494:	b480      	push	{r7}
 8002496:	b085      	sub	sp, #20
 8002498:	af00      	add	r7, sp, #0
 800249a:	60f8      	str	r0, [r7, #12]
 800249c:	60b9      	str	r1, [r7, #8]
 800249e:	607a      	str	r2, [r7, #4]
	return 0;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024b8:	4a14      	ldr	r2, [pc, #80]	; (800250c <_sbrk+0x5c>)
 80024ba:	4b15      	ldr	r3, [pc, #84]	; (8002510 <_sbrk+0x60>)
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024c4:	4b13      	ldr	r3, [pc, #76]	; (8002514 <_sbrk+0x64>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d102      	bne.n	80024d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024cc:	4b11      	ldr	r3, [pc, #68]	; (8002514 <_sbrk+0x64>)
 80024ce:	4a12      	ldr	r2, [pc, #72]	; (8002518 <_sbrk+0x68>)
 80024d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024d2:	4b10      	ldr	r3, [pc, #64]	; (8002514 <_sbrk+0x64>)
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4413      	add	r3, r2
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	429a      	cmp	r2, r3
 80024de:	d207      	bcs.n	80024f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024e0:	f005 fe8a 	bl	80081f8 <__errno>
 80024e4:	4603      	mov	r3, r0
 80024e6:	220c      	movs	r2, #12
 80024e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024ea:	f04f 33ff 	mov.w	r3, #4294967295
 80024ee:	e009      	b.n	8002504 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024f0:	4b08      	ldr	r3, [pc, #32]	; (8002514 <_sbrk+0x64>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024f6:	4b07      	ldr	r3, [pc, #28]	; (8002514 <_sbrk+0x64>)
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4413      	add	r3, r2
 80024fe:	4a05      	ldr	r2, [pc, #20]	; (8002514 <_sbrk+0x64>)
 8002500:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002502:	68fb      	ldr	r3, [r7, #12]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	20018000 	.word	0x20018000
 8002510:	00000400 	.word	0x00000400
 8002514:	20000608 	.word	0x20000608
 8002518:	20000928 	.word	0x20000928

0800251c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002520:	4b06      	ldr	r3, [pc, #24]	; (800253c <SystemInit+0x20>)
 8002522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <SystemInit+0x20>)
 8002528:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800252c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002530:	bf00      	nop
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	e000ed00 	.word	0xe000ed00

08002540 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002540:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002578 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002544:	f7ff ffea 	bl	800251c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002548:	480c      	ldr	r0, [pc, #48]	; (800257c <LoopForever+0x6>)
  ldr r1, =_edata
 800254a:	490d      	ldr	r1, [pc, #52]	; (8002580 <LoopForever+0xa>)
  ldr r2, =_sidata
 800254c:	4a0d      	ldr	r2, [pc, #52]	; (8002584 <LoopForever+0xe>)
  movs r3, #0
 800254e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002550:	e002      	b.n	8002558 <LoopCopyDataInit>

08002552 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002552:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002554:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002556:	3304      	adds	r3, #4

08002558 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002558:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800255a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800255c:	d3f9      	bcc.n	8002552 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800255e:	4a0a      	ldr	r2, [pc, #40]	; (8002588 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002560:	4c0a      	ldr	r4, [pc, #40]	; (800258c <LoopForever+0x16>)
  movs r3, #0
 8002562:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002564:	e001      	b.n	800256a <LoopFillZerobss>

08002566 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002566:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002568:	3204      	adds	r2, #4

0800256a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800256a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800256c:	d3fb      	bcc.n	8002566 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800256e:	f005 fe49 	bl	8008204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002572:	f7ff f80d 	bl	8001590 <main>

08002576 <LoopForever>:

LoopForever:
    b LoopForever
 8002576:	e7fe      	b.n	8002576 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002578:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800257c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002580:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 8002584:	0800b68c 	.word	0x0800b68c
  ldr r2, =_sbss
 8002588:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 800258c:	20000924 	.word	0x20000924

08002590 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002590:	e7fe      	b.n	8002590 <ADC1_2_IRQHandler>
	...

08002594 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800259c:	4b27      	ldr	r3, [pc, #156]	; (800263c <I2Cx_MspInit+0xa8>)
 800259e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025a0:	4a26      	ldr	r2, [pc, #152]	; (800263c <I2Cx_MspInit+0xa8>)
 80025a2:	f043 0302 	orr.w	r3, r3, #2
 80025a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80025a8:	4b24      	ldr	r3, [pc, #144]	; (800263c <I2Cx_MspInit+0xa8>)
 80025aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80025b4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80025b8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025ba:	2312      	movs	r3, #18
 80025bc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80025be:	2301      	movs	r3, #1
 80025c0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c2:	2303      	movs	r3, #3
 80025c4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80025c6:	2304      	movs	r3, #4
 80025c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025ca:	f107 0314 	add.w	r3, r7, #20
 80025ce:	4619      	mov	r1, r3
 80025d0:	481b      	ldr	r0, [pc, #108]	; (8002640 <I2Cx_MspInit+0xac>)
 80025d2:	f001 fa31 	bl	8003a38 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025d6:	f107 0314 	add.w	r3, r7, #20
 80025da:	4619      	mov	r1, r3
 80025dc:	4818      	ldr	r0, [pc, #96]	; (8002640 <I2Cx_MspInit+0xac>)
 80025de:	f001 fa2b 	bl	8003a38 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80025e2:	4b16      	ldr	r3, [pc, #88]	; (800263c <I2Cx_MspInit+0xa8>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a15      	ldr	r2, [pc, #84]	; (800263c <I2Cx_MspInit+0xa8>)
 80025e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <I2Cx_MspInit+0xa8>)
 80025f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80025fa:	4b10      	ldr	r3, [pc, #64]	; (800263c <I2Cx_MspInit+0xa8>)
 80025fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025fe:	4a0f      	ldr	r2, [pc, #60]	; (800263c <I2Cx_MspInit+0xa8>)
 8002600:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002604:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002606:	4b0d      	ldr	r3, [pc, #52]	; (800263c <I2Cx_MspInit+0xa8>)
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	4a0c      	ldr	r2, [pc, #48]	; (800263c <I2Cx_MspInit+0xa8>)
 800260c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002610:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8002612:	2200      	movs	r2, #0
 8002614:	210f      	movs	r1, #15
 8002616:	2021      	movs	r0, #33	; 0x21
 8002618:	f001 f959 	bl	80038ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800261c:	2021      	movs	r0, #33	; 0x21
 800261e:	f001 f972 	bl	8003906 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8002622:	2200      	movs	r2, #0
 8002624:	210f      	movs	r1, #15
 8002626:	2022      	movs	r0, #34	; 0x22
 8002628:	f001 f951 	bl	80038ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800262c:	2022      	movs	r0, #34	; 0x22
 800262e:	f001 f96a 	bl	8003906 <HAL_NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3728      	adds	r7, #40	; 0x28
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	40021000 	.word	0x40021000
 8002640:	48000400 	.word	0x48000400

08002644 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	4a12      	ldr	r2, [pc, #72]	; (8002698 <I2Cx_Init+0x54>)
 8002650:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a11      	ldr	r2, [pc, #68]	; (800269c <I2Cx_Init+0x58>)
 8002656:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff ff89 	bl	8002594 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002682:	6878      	ldr	r0, [r7, #4]
 8002684:	f001 fcc9 	bl	800401a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002688:	2100      	movs	r1, #0
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f002 fa58 	bl	8004b40 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	40005800 	.word	0x40005800
 800269c:	00702681 	.word	0x00702681

080026a0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08a      	sub	sp, #40	; 0x28
 80026a4:	af04      	add	r7, sp, #16
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	4608      	mov	r0, r1
 80026aa:	4611      	mov	r1, r2
 80026ac:	461a      	mov	r2, r3
 80026ae:	4603      	mov	r3, r0
 80026b0:	72fb      	strb	r3, [r7, #11]
 80026b2:	460b      	mov	r3, r1
 80026b4:	813b      	strh	r3, [r7, #8]
 80026b6:	4613      	mov	r3, r2
 80026b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026ba:	2300      	movs	r3, #0
 80026bc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026be:	7afb      	ldrb	r3, [r7, #11]
 80026c0:	b299      	uxth	r1, r3
 80026c2:	88f8      	ldrh	r0, [r7, #6]
 80026c4:	893a      	ldrh	r2, [r7, #8]
 80026c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026ca:	9302      	str	r3, [sp, #8]
 80026cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	6a3b      	ldr	r3, [r7, #32]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	4603      	mov	r3, r0
 80026d6:	68f8      	ldr	r0, [r7, #12]
 80026d8:	f001 fe72 	bl	80043c0 <HAL_I2C_Mem_Read>
 80026dc:	4603      	mov	r3, r0
 80026de:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d004      	beq.n	80026f0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80026e6:	7afb      	ldrb	r3, [r7, #11]
 80026e8:	4619      	mov	r1, r3
 80026ea:	68f8      	ldr	r0, [r7, #12]
 80026ec:	f000 f832 	bl	8002754 <I2Cx_Error>
  }
  return status;
 80026f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b08a      	sub	sp, #40	; 0x28
 80026fe:	af04      	add	r7, sp, #16
 8002700:	60f8      	str	r0, [r7, #12]
 8002702:	4608      	mov	r0, r1
 8002704:	4611      	mov	r1, r2
 8002706:	461a      	mov	r2, r3
 8002708:	4603      	mov	r3, r0
 800270a:	72fb      	strb	r3, [r7, #11]
 800270c:	460b      	mov	r3, r1
 800270e:	813b      	strh	r3, [r7, #8]
 8002710:	4613      	mov	r3, r2
 8002712:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002718:	7afb      	ldrb	r3, [r7, #11]
 800271a:	b299      	uxth	r1, r3
 800271c:	88f8      	ldrh	r0, [r7, #6]
 800271e:	893a      	ldrh	r2, [r7, #8]
 8002720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002724:	9302      	str	r3, [sp, #8]
 8002726:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002728:	9301      	str	r3, [sp, #4]
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	9300      	str	r3, [sp, #0]
 800272e:	4603      	mov	r3, r0
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f001 fd31 	bl	8004198 <HAL_I2C_Mem_Write>
 8002736:	4603      	mov	r3, r0
 8002738:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800273a:	7dfb      	ldrb	r3, [r7, #23]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d004      	beq.n	800274a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	4619      	mov	r1, r3
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f805 	bl	8002754 <I2Cx_Error>
  }
  return status;
 800274a:	7dfb      	ldrb	r3, [r7, #23]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f001 fce9 	bl	8004138 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff6c 	bl	8002644 <I2Cx_Init>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002778:	4802      	ldr	r0, [pc, #8]	; (8002784 <SENSOR_IO_Init+0x10>)
 800277a:	f7ff ff63 	bl	8002644 <I2Cx_Init>
}
 800277e:	bf00      	nop
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	200008bc 	.word	0x200008bc

08002788 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af02      	add	r7, sp, #8
 800278e:	4603      	mov	r3, r0
 8002790:	71fb      	strb	r3, [r7, #7]
 8002792:	460b      	mov	r3, r1
 8002794:	71bb      	strb	r3, [r7, #6]
 8002796:	4613      	mov	r3, r2
 8002798:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800279a:	79bb      	ldrb	r3, [r7, #6]
 800279c:	b29a      	uxth	r2, r3
 800279e:	79f9      	ldrb	r1, [r7, #7]
 80027a0:	2301      	movs	r3, #1
 80027a2:	9301      	str	r3, [sp, #4]
 80027a4:	1d7b      	adds	r3, r7, #5
 80027a6:	9300      	str	r3, [sp, #0]
 80027a8:	2301      	movs	r3, #1
 80027aa:	4803      	ldr	r0, [pc, #12]	; (80027b8 <SENSOR_IO_Write+0x30>)
 80027ac:	f7ff ffa5 	bl	80026fa <I2Cx_WriteMultiple>
}
 80027b0:	bf00      	nop
 80027b2:	3708      	adds	r7, #8
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	200008bc 	.word	0x200008bc

080027bc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	4603      	mov	r3, r0
 80027c4:	460a      	mov	r2, r1
 80027c6:	71fb      	strb	r3, [r7, #7]
 80027c8:	4613      	mov	r3, r2
 80027ca:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027d0:	79bb      	ldrb	r3, [r7, #6]
 80027d2:	b29a      	uxth	r2, r3
 80027d4:	79f9      	ldrb	r1, [r7, #7]
 80027d6:	2301      	movs	r3, #1
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f107 030f 	add.w	r3, r7, #15
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	2301      	movs	r3, #1
 80027e2:	4804      	ldr	r0, [pc, #16]	; (80027f4 <SENSOR_IO_Read+0x38>)
 80027e4:	f7ff ff5c 	bl	80026a0 <I2Cx_ReadMultiple>

  return read_value;
 80027e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	3710      	adds	r7, #16
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}
 80027f2:	bf00      	nop
 80027f4:	200008bc 	.word	0x200008bc

080027f8 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	603a      	str	r2, [r7, #0]
 8002800:	461a      	mov	r2, r3
 8002802:	4603      	mov	r3, r0
 8002804:	71fb      	strb	r3, [r7, #7]
 8002806:	460b      	mov	r3, r1
 8002808:	71bb      	strb	r3, [r7, #6]
 800280a:	4613      	mov	r3, r2
 800280c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	b29a      	uxth	r2, r3
 8002812:	79f9      	ldrb	r1, [r7, #7]
 8002814:	88bb      	ldrh	r3, [r7, #4]
 8002816:	9301      	str	r3, [sp, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2301      	movs	r3, #1
 800281e:	4804      	ldr	r0, [pc, #16]	; (8002830 <SENSOR_IO_ReadMultiple+0x38>)
 8002820:	f7ff ff3e 	bl	80026a0 <I2Cx_ReadMultiple>
 8002824:	4603      	mov	r3, r0
 8002826:	b29b      	uxth	r3, r3
}
 8002828:	4618      	mov	r0, r3
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	200008bc 	.word	0x200008bc

08002834 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800283e:	2300      	movs	r3, #0
 8002840:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <BSP_ACCELERO_Init+0x74>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	4798      	blx	r3
 8002848:	4603      	mov	r3, r0
 800284a:	2b6a      	cmp	r3, #106	; 0x6a
 800284c:	d002      	beq.n	8002854 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
 8002852:	e024      	b.n	800289e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <BSP_ACCELERO_Init+0x78>)
 8002856:	4a14      	ldr	r2, [pc, #80]	; (80028a8 <BSP_ACCELERO_Init+0x74>)
 8002858:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800285a:	2330      	movs	r3, #48	; 0x30
 800285c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800285e:	2300      	movs	r3, #0
 8002860:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8002862:	2300      	movs	r3, #0
 8002864:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002866:	2340      	movs	r3, #64	; 0x40
 8002868:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800286e:	2300      	movs	r3, #0
 8002870:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002872:	797a      	ldrb	r2, [r7, #5]
 8002874:	7abb      	ldrb	r3, [r7, #10]
 8002876:	4313      	orrs	r3, r2
 8002878:	b2db      	uxtb	r3, r3
 800287a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800287c:	7a3b      	ldrb	r3, [r7, #8]
 800287e:	f043 0304 	orr.w	r3, r3, #4
 8002882:	b2db      	uxtb	r3, r3
 8002884:	021b      	lsls	r3, r3, #8
 8002886:	b21a      	sxth	r2, r3
 8002888:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800288c:	4313      	orrs	r3, r2
 800288e:	b21b      	sxth	r3, r3
 8002890:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002892:	4b06      	ldr	r3, [pc, #24]	; (80028ac <BSP_ACCELERO_Init+0x78>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	89ba      	ldrh	r2, [r7, #12]
 800289a:	4610      	mov	r0, r2
 800289c:	4798      	blx	r3
  }  

  return ret;
 800289e:	7bfb      	ldrb	r3, [r7, #15]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	2000018c 	.word	0x2000018c
 80028ac:	2000060c 	.word	0x2000060c

080028b0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80028b8:	4b08      	ldr	r3, [pc, #32]	; (80028dc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80028ca:	4b04      	ldr	r3, [pc, #16]	; (80028dc <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
    }
  }
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	2000060c 	.word	0x2000060c

080028e0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80028ea:	2300      	movs	r3, #0
 80028ec:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80028ee:	4b1b      	ldr	r3, [pc, #108]	; (800295c <BSP_GYRO_Init+0x7c>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	4798      	blx	r3
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b6a      	cmp	r3, #106	; 0x6a
 80028f8:	d002      	beq.n	8002900 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	73fb      	strb	r3, [r7, #15]
 80028fe:	e028      	b.n	8002952 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002900:	4b17      	ldr	r3, [pc, #92]	; (8002960 <BSP_GYRO_Init+0x80>)
 8002902:	4a16      	ldr	r2, [pc, #88]	; (800295c <BSP_GYRO_Init+0x7c>)
 8002904:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002906:	2300      	movs	r3, #0
 8002908:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 800290a:	2330      	movs	r3, #48	; 0x30
 800290c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800290e:	2300      	movs	r3, #0
 8002910:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002912:	2300      	movs	r3, #0
 8002914:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 800291e:	230c      	movs	r3, #12
 8002920:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002922:	7aba      	ldrb	r2, [r7, #10]
 8002924:	797b      	ldrb	r3, [r7, #5]
 8002926:	4313      	orrs	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800292c:	7a3b      	ldrb	r3, [r7, #8]
 800292e:	f043 0304 	orr.w	r3, r3, #4
 8002932:	b2db      	uxtb	r3, r3
 8002934:	021b      	lsls	r3, r3, #8
 8002936:	b21a      	sxth	r2, r3
 8002938:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800293c:	4313      	orrs	r3, r2
 800293e:	b21b      	sxth	r3, r3
 8002940:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <BSP_GYRO_Init+0x80>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	89ba      	ldrh	r2, [r7, #12]
 800294a:	4610      	mov	r0, r2
 800294c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002952:	7bfb      	ldrb	r3, [r7, #15]
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}
 800295c:	200001c0 	.word	0x200001c0
 8002960:	20000610 	.word	0x20000610

08002964 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <BSP_GYRO_GetXYZ+0x2c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <BSP_GYRO_GetXYZ+0x2c>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800297e:	4b04      	ldr	r3, [pc, #16]	; (8002990 <BSP_GYRO_GetXYZ+0x2c>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	4798      	blx	r3
    }
  }
}
 8002988:	bf00      	nop
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}
 8002990:	20000610 	.word	0x20000610

08002994 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800299a:	4b0c      	ldr	r3, [pc, #48]	; (80029cc <BSP_HSENSOR_Init+0x38>)
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	20be      	movs	r0, #190	; 0xbe
 80029a0:	4798      	blx	r3
 80029a2:	4603      	mov	r3, r0
 80029a4:	2bbc      	cmp	r3, #188	; 0xbc
 80029a6:	d002      	beq.n	80029ae <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	e009      	b.n	80029c2 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 80029ae:	4b08      	ldr	r3, [pc, #32]	; (80029d0 <BSP_HSENSOR_Init+0x3c>)
 80029b0:	4a06      	ldr	r2, [pc, #24]	; (80029cc <BSP_HSENSOR_Init+0x38>)
 80029b2:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <BSP_HSENSOR_Init+0x3c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	20be      	movs	r0, #190	; 0xbe
 80029bc:	4798      	blx	r3
    ret = HSENSOR_OK;
 80029be:	2300      	movs	r3, #0
 80029c0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 80029c2:	687b      	ldr	r3, [r7, #4]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3708      	adds	r7, #8
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	20000130 	.word	0x20000130
 80029d0:	20000614 	.word	0x20000614

080029d4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80029d4:	b580      	push	{r7, lr}
 80029d6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80029d8:	4b04      	ldr	r3, [pc, #16]	; (80029ec <BSP_HSENSOR_ReadHumidity+0x18>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	20be      	movs	r0, #190	; 0xbe
 80029e0:	4798      	blx	r3
 80029e2:	eef0 7a40 	vmov.f32	s15, s0
}
 80029e6:	eeb0 0a67 	vmov.f32	s0, s15
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	20000614 	.word	0x20000614

080029f0 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b082      	sub	sp, #8
 80029f4:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80029f6:	2300      	movs	r3, #0
 80029f8:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80029fa:	4b11      	ldr	r3, [pc, #68]	; (8002a40 <BSP_MAGNETO_Init+0x50>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	4798      	blx	r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b3d      	cmp	r3, #61	; 0x3d
 8002a04:	d002      	beq.n	8002a0c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	71fb      	strb	r3, [r7, #7]
 8002a0a:	e013      	b.n	8002a34 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002a0c:	4b0d      	ldr	r3, [pc, #52]	; (8002a44 <BSP_MAGNETO_Init+0x54>)
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	; (8002a40 <BSP_MAGNETO_Init+0x50>)
 8002a10:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002a12:	2358      	movs	r3, #88	; 0x58
 8002a14:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002a16:	2300      	movs	r3, #0
 8002a18:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002a1e:	2308      	movs	r3, #8
 8002a20:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002a22:	2340      	movs	r3, #64	; 0x40
 8002a24:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002a26:	4b07      	ldr	r3, [pc, #28]	; (8002a44 <BSP_MAGNETO_Init+0x54>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	463a      	mov	r2, r7
 8002a2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002a32:	4798      	blx	r3
  } 

  return ret;  
 8002a34:	79fb      	ldrb	r3, [r7, #7]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000014c 	.word	0x2000014c
 8002a44:	20000618 	.word	0x20000618

08002a48 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d009      	beq.n	8002a6c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d004      	beq.n	8002a6c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002a62:	4b04      	ldr	r3, [pc, #16]	; (8002a74 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
    }
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000618 	.word	0x20000618

08002a78 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002a7e:	4b0c      	ldr	r3, [pc, #48]	; (8002ab0 <BSP_PSENSOR_Init+0x38>)
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	20ba      	movs	r0, #186	; 0xba
 8002a84:	4798      	blx	r3
 8002a86:	4603      	mov	r3, r0
 8002a88:	2bb1      	cmp	r3, #177	; 0xb1
 8002a8a:	d002      	beq.n	8002a92 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002a8c:	2301      	movs	r3, #1
 8002a8e:	607b      	str	r3, [r7, #4]
 8002a90:	e009      	b.n	8002aa6 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002a92:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <BSP_PSENSOR_Init+0x3c>)
 8002a94:	4a06      	ldr	r2, [pc, #24]	; (8002ab0 <BSP_PSENSOR_Init+0x38>)
 8002a96:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002a98:	4b06      	ldr	r3, [pc, #24]	; (8002ab4 <BSP_PSENSOR_Init+0x3c>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	20ba      	movs	r0, #186	; 0xba
 8002aa0:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002aa6:	687b      	ldr	r3, [r7, #4]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000180 	.word	0x20000180
 8002ab4:	2000061c 	.word	0x2000061c

08002ab8 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002abc:	4b04      	ldr	r3, [pc, #16]	; (8002ad0 <BSP_PSENSOR_ReadPressure+0x18>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	20ba      	movs	r0, #186	; 0xba
 8002ac4:	4798      	blx	r3
 8002ac6:	eef0 7a40 	vmov.f32	s15, s0
}
 8002aca:	eeb0 0a67 	vmov.f32	s0, s15
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	2000061c 	.word	0x2000061c

08002ad4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b082      	sub	sp, #8
 8002ad8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002ade:	4b09      	ldr	r3, [pc, #36]	; (8002b04 <BSP_TSENSOR_Init+0x30>)
 8002ae0:	4a09      	ldr	r2, [pc, #36]	; (8002b08 <BSP_TSENSOR_Init+0x34>)
 8002ae2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002ae4:	f7ff fe46 	bl	8002774 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002ae8:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <BSP_TSENSOR_Init+0x30>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2100      	movs	r1, #0
 8002af0:	20be      	movs	r0, #190	; 0xbe
 8002af2:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002af4:	2300      	movs	r3, #0
 8002af6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002af8:	79fb      	ldrb	r3, [r7, #7]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000620 	.word	0x20000620
 8002b08:	2000013c 	.word	0x2000013c

08002b0c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002b10:	4b04      	ldr	r3, [pc, #16]	; (8002b24 <BSP_TSENSOR_ReadTemp+0x18>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68db      	ldr	r3, [r3, #12]
 8002b16:	20be      	movs	r0, #190	; 0xbe
 8002b18:	4798      	blx	r3
 8002b1a:	eef0 7a40 	vmov.f32	s15, s0
}
 8002b1e:	eeb0 0a67 	vmov.f32	s0, s15
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	20000620 	.word	0x20000620

08002b28 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	2120      	movs	r1, #32
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fe3f 	bl	80027bc <SENSOR_IO_Read>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
 8002b44:	f023 0304 	bic.w	r3, r3, #4
 8002b48:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	f043 0304 	orr.w	r3, r3, #4
 8002b50:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002b52:	7bfb      	ldrb	r3, [r7, #15]
 8002b54:	f023 0303 	bic.w	r3, r3, #3
 8002b58:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002b5a:	7bfb      	ldrb	r3, [r7, #15]
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b68:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002b6a:	88fb      	ldrh	r3, [r7, #6]
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	7bfa      	ldrb	r2, [r7, #15]
 8002b70:	2120      	movs	r1, #32
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff fe08 	bl	8002788 <SENSOR_IO_Write>
}
 8002b78:	bf00      	nop
 8002b7a:	3710      	adds	r7, #16
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	4603      	mov	r3, r0
 8002b88:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8002b8e:	f7ff fdf1 	bl	8002774 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	210f      	movs	r1, #15
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f7ff fe0f 	bl	80027bc <SENSOR_IO_Read>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3710      	adds	r7, #16
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	b2d8      	uxtb	r0, r3
 8002bba:	f107 020c 	add.w	r2, r7, #12
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	21b0      	movs	r1, #176	; 0xb0
 8002bc2:	f7ff fe19 	bl	80027f8 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8002bc6:	7b3b      	ldrb	r3, [r7, #12]
 8002bc8:	085b      	lsrs	r3, r3, #1
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8002bce:	7b7b      	ldrb	r3, [r7, #13]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8002bd6:	88fb      	ldrh	r3, [r7, #6]
 8002bd8:	b2d8      	uxtb	r0, r3
 8002bda:	f107 020c 	add.w	r2, r7, #12
 8002bde:	2302      	movs	r3, #2
 8002be0:	21b6      	movs	r1, #182	; 0xb6
 8002be2:	f7ff fe09 	bl	80027f8 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002be6:	7b7b      	ldrb	r3, [r7, #13]
 8002be8:	021b      	lsls	r3, r3, #8
 8002bea:	b21a      	sxth	r2, r3
 8002bec:	7b3b      	ldrb	r3, [r7, #12]
 8002bee:	b21b      	sxth	r3, r3
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8002bf4:	88fb      	ldrh	r3, [r7, #6]
 8002bf6:	b2d8      	uxtb	r0, r3
 8002bf8:	f107 020c 	add.w	r2, r7, #12
 8002bfc:	2302      	movs	r3, #2
 8002bfe:	21ba      	movs	r1, #186	; 0xba
 8002c00:	f7ff fdfa 	bl	80027f8 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c04:	7b7b      	ldrb	r3, [r7, #13]
 8002c06:	021b      	lsls	r3, r3, #8
 8002c08:	b21a      	sxth	r2, r3
 8002c0a:	7b3b      	ldrb	r3, [r7, #12]
 8002c0c:	b21b      	sxth	r3, r3
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8002c12:	88fb      	ldrh	r3, [r7, #6]
 8002c14:	b2d8      	uxtb	r0, r3
 8002c16:	f107 020c 	add.w	r2, r7, #12
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	21a8      	movs	r1, #168	; 0xa8
 8002c1e:	f7ff fdeb 	bl	80027f8 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002c22:	7b7b      	ldrb	r3, [r7, #13]
 8002c24:	021b      	lsls	r3, r3, #8
 8002c26:	b21a      	sxth	r2, r3
 8002c28:	7b3b      	ldrb	r3, [r7, #12]
 8002c2a:	b21b      	sxth	r3, r3
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8002c30:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002c34:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c42:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002c46:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	ee07 3a90 	vmov	s15, r3
 8002c50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c54:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002c58:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c5c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	ee07 3a90 	vmov	s15, r3
 8002c66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c72:	ee07 3a90 	vmov	s15, r3
 8002c76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c7e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8002c82:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c8e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8002c92:	edd7 7a04 	vldr	s15, [r7, #16]
 8002c96:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8002cdc <HTS221_H_ReadHumidity+0x130>
 8002c9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ca2:	dd01      	ble.n	8002ca8 <HTS221_H_ReadHumidity+0xfc>
 8002ca4:	4b0e      	ldr	r3, [pc, #56]	; (8002ce0 <HTS221_H_ReadHumidity+0x134>)
 8002ca6:	e00a      	b.n	8002cbe <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002ca8:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb4:	d502      	bpl.n	8002cbc <HTS221_H_ReadHumidity+0x110>
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e000      	b.n	8002cbe <HTS221_H_ReadHumidity+0x112>
 8002cbc:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8002cbe:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8002cc0:	edd7 7a04 	vldr	s15, [r7, #16]
 8002cc4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002cc8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ccc:	eef0 7a66 	vmov.f32	s15, s13
}
 8002cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	447a0000 	.word	0x447a0000
 8002ce0:	447a0000 	.word	0x447a0000

08002ce4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	4603      	mov	r3, r0
 8002cec:	6039      	str	r1, [r7, #0]
 8002cee:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2120      	movs	r1, #32
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7ff fd60 	bl	80027bc <SENSOR_IO_Read>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	f023 0304 	bic.w	r3, r3, #4
 8002d06:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8002d10:	7bfb      	ldrb	r3, [r7, #15]
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002d18:	7bfb      	ldrb	r3, [r7, #15]
 8002d1a:	f043 0301 	orr.w	r3, r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
 8002d22:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002d26:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	7bfa      	ldrb	r2, [r7, #15]
 8002d2e:	2120      	movs	r1, #32
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff fd29 	bl	8002788 <SENSOR_IO_Write>
}
 8002d36:	bf00      	nop
 8002d38:	3710      	adds	r7, #16
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b088      	sub	sp, #32
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	4603      	mov	r3, r0
 8002d46:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	b2d8      	uxtb	r0, r3
 8002d4c:	f107 0208 	add.w	r2, r7, #8
 8002d50:	2302      	movs	r3, #2
 8002d52:	21b2      	movs	r1, #178	; 0xb2
 8002d54:	f7ff fd50 	bl	80027f8 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	2135      	movs	r1, #53	; 0x35
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fd2c 	bl	80027bc <SENSOR_IO_Read>
 8002d64:	4603      	mov	r3, r0
 8002d66:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002d68:	7ffb      	ldrb	r3, [r7, #31]
 8002d6a:	021b      	lsls	r3, r3, #8
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d72:	b21a      	sxth	r2, r3
 8002d74:	7a3b      	ldrb	r3, [r7, #8]
 8002d76:	b21b      	sxth	r3, r3
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002d7c:	7ffb      	ldrb	r3, [r7, #31]
 8002d7e:	019b      	lsls	r3, r3, #6
 8002d80:	b21b      	sxth	r3, r3
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	b21a      	sxth	r2, r3
 8002d88:	7a7b      	ldrb	r3, [r7, #9]
 8002d8a:	b21b      	sxth	r3, r3
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8002d90:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002d94:	10db      	asrs	r3, r3, #3
 8002d96:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002d98:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002d9c:	10db      	asrs	r3, r3, #3
 8002d9e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8002da0:	88fb      	ldrh	r3, [r7, #6]
 8002da2:	b2d8      	uxtb	r0, r3
 8002da4:	f107 0208 	add.w	r2, r7, #8
 8002da8:	2304      	movs	r3, #4
 8002daa:	21bc      	movs	r1, #188	; 0xbc
 8002dac:	f7ff fd24 	bl	80027f8 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002db0:	7a7b      	ldrb	r3, [r7, #9]
 8002db2:	021b      	lsls	r3, r3, #8
 8002db4:	b21a      	sxth	r2, r3
 8002db6:	7a3b      	ldrb	r3, [r7, #8]
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8002dbe:	7afb      	ldrb	r3, [r7, #11]
 8002dc0:	021b      	lsls	r3, r3, #8
 8002dc2:	b21a      	sxth	r2, r3
 8002dc4:	7abb      	ldrb	r3, [r7, #10]
 8002dc6:	b21b      	sxth	r3, r3
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	b2d8      	uxtb	r0, r3
 8002dd0:	f107 0208 	add.w	r2, r7, #8
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	21aa      	movs	r1, #170	; 0xaa
 8002dd8:	f7ff fd0e 	bl	80027f8 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8002ddc:	7a7b      	ldrb	r3, [r7, #9]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	7a3b      	ldrb	r3, [r7, #8]
 8002de4:	b21b      	sxth	r3, r3
 8002de6:	4313      	orrs	r3, r2
 8002de8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8002dea:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002dee:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	ee07 3a90 	vmov	s15, r3
 8002df8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dfc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002e00:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e0e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002e12:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	ee07 3a90 	vmov	s15, r3
 8002e20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e28:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e38:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	ee07 3a90 	vmov	s15, r3
}
 8002e42:	eeb0 0a67 	vmov.f32	s0, s15
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	463b      	mov	r3, r7
 8002e54:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8002e58:	783b      	ldrb	r3, [r7, #0]
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	2120      	movs	r1, #32
 8002e5e:	203c      	movs	r0, #60	; 0x3c
 8002e60:	f7ff fc92 	bl	8002788 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8002e64:	787b      	ldrb	r3, [r7, #1]
 8002e66:	461a      	mov	r2, r3
 8002e68:	2121      	movs	r1, #33	; 0x21
 8002e6a:	203c      	movs	r0, #60	; 0x3c
 8002e6c:	f7ff fc8c 	bl	8002788 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8002e70:	78bb      	ldrb	r3, [r7, #2]
 8002e72:	461a      	mov	r2, r3
 8002e74:	2122      	movs	r1, #34	; 0x22
 8002e76:	203c      	movs	r0, #60	; 0x3c
 8002e78:	f7ff fc86 	bl	8002788 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	2123      	movs	r1, #35	; 0x23
 8002e82:	203c      	movs	r0, #60	; 0x3c
 8002e84:	f7ff fc80 	bl	8002788 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8002e88:	793b      	ldrb	r3, [r7, #4]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2124      	movs	r1, #36	; 0x24
 8002e8e:	203c      	movs	r0, #60	; 0x3c
 8002e90:	f7ff fc7a 	bl	8002788 <SENSOR_IO_Write>
}
 8002e94:	bf00      	nop
 8002e96:	3708      	adds	r7, #8
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002ea6:	2122      	movs	r1, #34	; 0x22
 8002ea8:	203c      	movs	r0, #60	; 0x3c
 8002eaa:	f7ff fc87 	bl	80027bc <SENSOR_IO_Read>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8002eb2:	79fb      	ldrb	r3, [r7, #7]
 8002eb4:	f023 0303 	bic.w	r3, r3, #3
 8002eb8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f043 0303 	orr.w	r3, r3, #3
 8002ec0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002ec2:	79fb      	ldrb	r3, [r7, #7]
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	2122      	movs	r1, #34	; 0x22
 8002ec8:	203c      	movs	r0, #60	; 0x3c
 8002eca:	f7ff fc5d 	bl	8002788 <SENSOR_IO_Write>
}
 8002ece:	bf00      	nop
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002eda:	f7ff fc4b 	bl	8002774 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 8002ede:	210f      	movs	r1, #15
 8002ee0:	203c      	movs	r0, #60	; 0x3c
 8002ee2:	f7ff fc6b 	bl	80027bc <SENSOR_IO_Read>
 8002ee6:	4603      	mov	r3, r0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}

08002eec <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8002efa:	2122      	movs	r1, #34	; 0x22
 8002efc:	203c      	movs	r0, #60	; 0x3c
 8002efe:	f7ff fc5d 	bl	80027bc <SENSOR_IO_Read>
 8002f02:	4603      	mov	r3, r0
 8002f04:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 8002f06:	7bfb      	ldrb	r3, [r7, #15]
 8002f08:	f023 0320 	bic.w	r3, r3, #32
 8002f0c:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 8002f14:	7bfb      	ldrb	r3, [r7, #15]
 8002f16:	f043 0320 	orr.w	r3, r3, #32
 8002f1a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	461a      	mov	r2, r3
 8002f20:	2122      	movs	r1, #34	; 0x22
 8002f22:	203c      	movs	r0, #60	; 0x3c
 8002f24:	f7ff fc30 	bl	8002788 <SENSOR_IO_Write>
}
 8002f28:	bf00      	nop
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}

08002f30 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b088      	sub	sp, #32
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8002f40:	f04f 0300 	mov.w	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 8002f46:	2121      	movs	r1, #33	; 0x21
 8002f48:	203c      	movs	r0, #60	; 0x3c
 8002f4a:	f7ff fc37 	bl	80027bc <SENSOR_IO_Read>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8002f52:	f107 0208 	add.w	r2, r7, #8
 8002f56:	2306      	movs	r3, #6
 8002f58:	21a8      	movs	r1, #168	; 0xa8
 8002f5a:	203c      	movs	r0, #60	; 0x3c
 8002f5c:	f7ff fc4c 	bl	80027f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	77fb      	strb	r3, [r7, #31]
 8002f64:	e01f      	b.n	8002fa6 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002f66:	7ffb      	ldrb	r3, [r7, #31]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	f107 0220 	add.w	r2, r7, #32
 8002f70:	4413      	add	r3, r2
 8002f72:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	7ffb      	ldrb	r3, [r7, #31]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	f107 0120 	add.w	r1, r7, #32
 8002f84:	440b      	add	r3, r1
 8002f86:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	7ffb      	ldrb	r3, [r7, #31]
 8002f92:	b212      	sxth	r2, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	f107 0120 	add.w	r1, r7, #32
 8002f9a:	440b      	add	r3, r1
 8002f9c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002fa0:	7ffb      	ldrb	r3, [r7, #31]
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	7ffb      	ldrb	r3, [r7, #31]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d9dc      	bls.n	8002f66 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 8002fac:	7dfb      	ldrb	r3, [r7, #23]
 8002fae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8002fb2:	2b60      	cmp	r3, #96	; 0x60
 8002fb4:	d013      	beq.n	8002fde <LIS3MDL_MagReadXYZ+0xae>
 8002fb6:	2b60      	cmp	r3, #96	; 0x60
 8002fb8:	dc14      	bgt.n	8002fe4 <LIS3MDL_MagReadXYZ+0xb4>
 8002fba:	2b40      	cmp	r3, #64	; 0x40
 8002fbc:	d00c      	beq.n	8002fd8 <LIS3MDL_MagReadXYZ+0xa8>
 8002fbe:	2b40      	cmp	r3, #64	; 0x40
 8002fc0:	dc10      	bgt.n	8002fe4 <LIS3MDL_MagReadXYZ+0xb4>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d002      	beq.n	8002fcc <LIS3MDL_MagReadXYZ+0x9c>
 8002fc6:	2b20      	cmp	r3, #32
 8002fc8:	d003      	beq.n	8002fd2 <LIS3MDL_MagReadXYZ+0xa2>
 8002fca:	e00b      	b.n	8002fe4 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 8002fcc:	4b19      	ldr	r3, [pc, #100]	; (8003034 <LIS3MDL_MagReadXYZ+0x104>)
 8002fce:	61bb      	str	r3, [r7, #24]
    break;
 8002fd0:	e008      	b.n	8002fe4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8002fd2:	4b19      	ldr	r3, [pc, #100]	; (8003038 <LIS3MDL_MagReadXYZ+0x108>)
 8002fd4:	61bb      	str	r3, [r7, #24]
    break;
 8002fd6:	e005      	b.n	8002fe4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8002fd8:	4b18      	ldr	r3, [pc, #96]	; (800303c <LIS3MDL_MagReadXYZ+0x10c>)
 8002fda:	61bb      	str	r3, [r7, #24]
    break;
 8002fdc:	e002      	b.n	8002fe4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 8002fde:	4b18      	ldr	r3, [pc, #96]	; (8003040 <LIS3MDL_MagReadXYZ+0x110>)
 8002fe0:	61bb      	str	r3, [r7, #24]
    break;    
 8002fe2:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e01b      	b.n	8003022 <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002fea:	7ffb      	ldrb	r3, [r7, #31]
 8002fec:	005b      	lsls	r3, r3, #1
 8002fee:	f107 0220 	add.w	r2, r7, #32
 8002ff2:	4413      	add	r3, r2
 8002ff4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002ff8:	ee07 3a90 	vmov	s15, r3
 8002ffc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003000:	edd7 7a06 	vldr	s15, [r7, #24]
 8003004:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003008:	7ffb      	ldrb	r3, [r7, #31]
 800300a:	005b      	lsls	r3, r3, #1
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	4413      	add	r3, r2
 8003010:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003014:	ee17 2a90 	vmov	r2, s15
 8003018:	b212      	sxth	r2, r2
 800301a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800301c:	7ffb      	ldrb	r3, [r7, #31]
 800301e:	3301      	adds	r3, #1
 8003020:	77fb      	strb	r3, [r7, #31]
 8003022:	7ffb      	ldrb	r3, [r7, #31]
 8003024:	2b02      	cmp	r3, #2
 8003026:	d9e0      	bls.n	8002fea <LIS3MDL_MagReadXYZ+0xba>
  }
}
 8003028:	bf00      	nop
 800302a:	bf00      	nop
 800302c:	3720      	adds	r7, #32
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	3e0f5c29 	.word	0x3e0f5c29
 8003038:	3e947ae1 	.word	0x3e947ae1
 800303c:	3edc28f6 	.word	0x3edc28f6
 8003040:	3f147ae1 	.word	0x3f147ae1

08003044 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	4603      	mov	r3, r0
 800304c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f87b 	bl	800314c <LPS22HB_Init>
}
 8003056:	bf00      	nop
 8003058:	3708      	adds	r7, #8
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af00      	add	r7, sp, #0
 8003064:	4603      	mov	r3, r0
 8003066:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8003068:	2300      	movs	r3, #0
 800306a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800306c:	f7ff fb82 	bl	8002774 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8003070:	88fb      	ldrh	r3, [r7, #6]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	210f      	movs	r1, #15
 8003076:	4618      	mov	r0, r3
 8003078:	f7ff fba0 	bl	80027bc <SENSOR_IO_Read>
 800307c:	4603      	mov	r3, r0
 800307e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8003080:	7bfb      	ldrb	r3, [r7, #15]
}
 8003082:	4618      	mov	r0, r3
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
	...

0800308c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800308c:	b590      	push	{r4, r7, lr}
 800308e:	b087      	sub	sp, #28
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8003096:	2300      	movs	r3, #0
 8003098:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800309a:	2300      	movs	r3, #0
 800309c:	74fb      	strb	r3, [r7, #19]
 800309e:	e013      	b.n	80030c8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	b2da      	uxtb	r2, r3
 80030a4:	7cfb      	ldrb	r3, [r7, #19]
 80030a6:	3328      	adds	r3, #40	; 0x28
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	7cfc      	ldrb	r4, [r7, #19]
 80030ac:	4619      	mov	r1, r3
 80030ae:	4610      	mov	r0, r2
 80030b0:	f7ff fb84 	bl	80027bc <SENSOR_IO_Read>
 80030b4:	4603      	mov	r3, r0
 80030b6:	461a      	mov	r2, r3
 80030b8:	f107 0318 	add.w	r3, r7, #24
 80030bc:	4423      	add	r3, r4
 80030be:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	3301      	adds	r3, #1
 80030c6:	74fb      	strb	r3, [r7, #19]
 80030c8:	7cfb      	ldrb	r3, [r7, #19]
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d9e8      	bls.n	80030a0 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80030ce:	2300      	movs	r3, #0
 80030d0:	74fb      	strb	r3, [r7, #19]
 80030d2:	e010      	b.n	80030f6 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80030d4:	7cfb      	ldrb	r3, [r7, #19]
 80030d6:	f107 0218 	add.w	r2, r7, #24
 80030da:	4413      	add	r3, r2
 80030dc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80030e0:	461a      	mov	r2, r3
 80030e2:	7cfb      	ldrb	r3, [r7, #19]
 80030e4:	00db      	lsls	r3, r3, #3
 80030e6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ea:	697a      	ldr	r2, [r7, #20]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	3301      	adds	r3, #1
 80030f4:	74fb      	strb	r3, [r7, #19]
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d9eb      	bls.n	80030d4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800310c:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	2264      	movs	r2, #100	; 0x64
 8003116:	fb02 f303 	mul.w	r3, r2, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	da01      	bge.n	8003122 <LPS22HB_P_ReadPressure+0x96>
 800311e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8003122:	131b      	asrs	r3, r3, #12
 8003124:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003130:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003148 <LPS22HB_P_ReadPressure+0xbc>
 8003134:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003138:	eef0 7a66 	vmov.f32	s15, s13
}
 800313c:	eeb0 0a67 	vmov.f32	s0, s15
 8003140:	371c      	adds	r7, #28
 8003142:	46bd      	mov	sp, r7
 8003144:	bd90      	pop	{r4, r7, pc}
 8003146:	bf00      	nop
 8003148:	42c80000 	.word	0x42c80000

0800314c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	211a      	movs	r1, #26
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff fb2d 	bl	80027bc <SENSOR_IO_Read>
 8003162:	4603      	mov	r3, r0
 8003164:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8003166:	7bfb      	ldrb	r3, [r7, #15]
 8003168:	f023 0301 	bic.w	r3, r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800316e:	7bfb      	ldrb	r3, [r7, #15]
 8003170:	f043 0301 	orr.w	r3, r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	b2db      	uxtb	r3, r3
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	211a      	movs	r1, #26
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fb02 	bl	8002788 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8003184:	88fb      	ldrh	r3, [r7, #6]
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2110      	movs	r1, #16
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff fb16 	bl	80027bc <SENSOR_IO_Read>
 8003190:	4603      	mov	r3, r0
 8003192:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8003194:	7bfb      	ldrb	r3, [r7, #15]
 8003196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800319c:	7bfb      	ldrb	r3, [r7, #15]
 800319e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80031a2:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80031a4:	7bfb      	ldrb	r3, [r7, #15]
 80031a6:	f023 0302 	bic.w	r3, r3, #2
 80031aa:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	f043 0302 	orr.w	r3, r3, #2
 80031b2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80031b4:	88fb      	ldrh	r3, [r7, #6]
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	2110      	movs	r1, #16
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fae3 	bl	8002788 <SENSOR_IO_Write>
}  
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	4603      	mov	r3, r0
 80031d2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80031d4:	2300      	movs	r3, #0
 80031d6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80031d8:	2110      	movs	r1, #16
 80031da:	20d4      	movs	r0, #212	; 0xd4
 80031dc:	f7ff faee 	bl	80027bc <SENSOR_IO_Read>
 80031e0:	4603      	mov	r3, r0
 80031e2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80031e4:	88fb      	ldrh	r3, [r7, #6]
 80031e6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80031e8:	7bbb      	ldrb	r3, [r7, #14]
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80031f0:	7bba      	ldrb	r2, [r7, #14]
 80031f2:	7bfb      	ldrb	r3, [r7, #15]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80031f8:	7bbb      	ldrb	r3, [r7, #14]
 80031fa:	461a      	mov	r2, r3
 80031fc:	2110      	movs	r1, #16
 80031fe:	20d4      	movs	r0, #212	; 0xd4
 8003200:	f7ff fac2 	bl	8002788 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8003204:	2112      	movs	r1, #18
 8003206:	20d4      	movs	r0, #212	; 0xd4
 8003208:	f7ff fad8 	bl	80027bc <SENSOR_IO_Read>
 800320c:	4603      	mov	r3, r0
 800320e:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003210:	88fb      	ldrh	r3, [r7, #6]
 8003212:	0a1b      	lsrs	r3, r3, #8
 8003214:	b29b      	uxth	r3, r3
 8003216:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8003218:	7bbb      	ldrb	r3, [r7, #14]
 800321a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800321e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003220:	7bba      	ldrb	r2, [r7, #14]
 8003222:	7bfb      	ldrb	r3, [r7, #15]
 8003224:	4313      	orrs	r3, r2
 8003226:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8003228:	7bbb      	ldrb	r3, [r7, #14]
 800322a:	461a      	mov	r2, r3
 800322c:	2112      	movs	r1, #18
 800322e:	20d4      	movs	r0, #212	; 0xd4
 8003230:	f7ff faaa 	bl	8002788 <SENSOR_IO_Write>
}
 8003234:	bf00      	nop
 8003236:	3710      	adds	r7, #16
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003242:	2300      	movs	r3, #0
 8003244:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8003246:	2110      	movs	r1, #16
 8003248:	20d4      	movs	r0, #212	; 0xd4
 800324a:	f7ff fab7 	bl	80027bc <SENSOR_IO_Read>
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	461a      	mov	r2, r3
 800325e:	2110      	movs	r1, #16
 8003260:	20d4      	movs	r0, #212	; 0xd4
 8003262:	f7ff fa91 	bl	8002788 <SENSOR_IO_Write>
}
 8003266:	bf00      	nop
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800326e:	b580      	push	{r7, lr}
 8003270:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8003272:	f7ff fa7f 	bl	8002774 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8003276:	210f      	movs	r1, #15
 8003278:	20d4      	movs	r0, #212	; 0xd4
 800327a:	f7ff fa9f 	bl	80027bc <SENSOR_IO_Read>
 800327e:	4603      	mov	r3, r0
}
 8003280:	4618      	mov	r0, r3
 8003282:	bd80      	pop	{r7, pc}

08003284 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b084      	sub	sp, #16
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8003292:	2115      	movs	r1, #21
 8003294:	20d4      	movs	r0, #212	; 0xd4
 8003296:	f7ff fa91 	bl	80027bc <SENSOR_IO_Read>
 800329a:	4603      	mov	r3, r0
 800329c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800329e:	7bfb      	ldrb	r3, [r7, #15]
 80032a0:	f023 0310 	bic.w	r3, r3, #16
 80032a4:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80032a6:	88fb      	ldrh	r3, [r7, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d003      	beq.n	80032b4 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80032ac:	7bfb      	ldrb	r3, [r7, #15]
 80032ae:	f043 0310 	orr.w	r3, r3, #16
 80032b2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80032b4:	7bfb      	ldrb	r3, [r7, #15]
 80032b6:	461a      	mov	r2, r3
 80032b8:	2115      	movs	r1, #21
 80032ba:	20d4      	movs	r0, #212	; 0xd4
 80032bc:	f7ff fa64 	bl	8002788 <SENSOR_IO_Write>
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80032d0:	2300      	movs	r3, #0
 80032d2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80032de:	2110      	movs	r1, #16
 80032e0:	20d4      	movs	r0, #212	; 0xd4
 80032e2:	f7ff fa6b 	bl	80027bc <SENSOR_IO_Read>
 80032e6:	4603      	mov	r3, r0
 80032e8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80032ea:	f107 0208 	add.w	r2, r7, #8
 80032ee:	2306      	movs	r3, #6
 80032f0:	2128      	movs	r1, #40	; 0x28
 80032f2:	20d4      	movs	r0, #212	; 0xd4
 80032f4:	f7ff fa80 	bl	80027f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80032f8:	2300      	movs	r3, #0
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	e01f      	b.n	800333e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80032fe:	7ffb      	ldrb	r3, [r7, #31]
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	3301      	adds	r3, #1
 8003304:	f107 0220 	add.w	r2, r7, #32
 8003308:	4413      	add	r3, r2
 800330a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800330e:	b29b      	uxth	r3, r3
 8003310:	021b      	lsls	r3, r3, #8
 8003312:	b29a      	uxth	r2, r3
 8003314:	7ffb      	ldrb	r3, [r7, #31]
 8003316:	005b      	lsls	r3, r3, #1
 8003318:	f107 0120 	add.w	r1, r7, #32
 800331c:	440b      	add	r3, r1
 800331e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003322:	b29b      	uxth	r3, r3
 8003324:	4413      	add	r3, r2
 8003326:	b29a      	uxth	r2, r3
 8003328:	7ffb      	ldrb	r3, [r7, #31]
 800332a:	b212      	sxth	r2, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	f107 0120 	add.w	r1, r7, #32
 8003332:	440b      	add	r3, r1
 8003334:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003338:	7ffb      	ldrb	r3, [r7, #31]
 800333a:	3301      	adds	r3, #1
 800333c:	77fb      	strb	r3, [r7, #31]
 800333e:	7ffb      	ldrb	r3, [r7, #31]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d9dc      	bls.n	80032fe <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8003344:	7dfb      	ldrb	r3, [r7, #23]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b0c      	cmp	r3, #12
 800334c:	d828      	bhi.n	80033a0 <LSM6DSL_AccReadXYZ+0xd8>
 800334e:	a201      	add	r2, pc, #4	; (adr r2, 8003354 <LSM6DSL_AccReadXYZ+0x8c>)
 8003350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003354:	08003389 	.word	0x08003389
 8003358:	080033a1 	.word	0x080033a1
 800335c:	080033a1 	.word	0x080033a1
 8003360:	080033a1 	.word	0x080033a1
 8003364:	0800339b 	.word	0x0800339b
 8003368:	080033a1 	.word	0x080033a1
 800336c:	080033a1 	.word	0x080033a1
 8003370:	080033a1 	.word	0x080033a1
 8003374:	0800338f 	.word	0x0800338f
 8003378:	080033a1 	.word	0x080033a1
 800337c:	080033a1 	.word	0x080033a1
 8003380:	080033a1 	.word	0x080033a1
 8003384:	08003395 	.word	0x08003395
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8003388:	4b19      	ldr	r3, [pc, #100]	; (80033f0 <LSM6DSL_AccReadXYZ+0x128>)
 800338a:	61bb      	str	r3, [r7, #24]
    break;
 800338c:	e008      	b.n	80033a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800338e:	4b19      	ldr	r3, [pc, #100]	; (80033f4 <LSM6DSL_AccReadXYZ+0x12c>)
 8003390:	61bb      	str	r3, [r7, #24]
    break;
 8003392:	e005      	b.n	80033a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8003394:	4b18      	ldr	r3, [pc, #96]	; (80033f8 <LSM6DSL_AccReadXYZ+0x130>)
 8003396:	61bb      	str	r3, [r7, #24]
    break;
 8003398:	e002      	b.n	80033a0 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800339a:	4b18      	ldr	r3, [pc, #96]	; (80033fc <LSM6DSL_AccReadXYZ+0x134>)
 800339c:	61bb      	str	r3, [r7, #24]
    break;    
 800339e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80033a0:	2300      	movs	r3, #0
 80033a2:	77fb      	strb	r3, [r7, #31]
 80033a4:	e01b      	b.n	80033de <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80033a6:	7ffb      	ldrb	r3, [r7, #31]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	f107 0220 	add.w	r2, r7, #32
 80033ae:	4413      	add	r3, r2
 80033b0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80033b4:	ee07 3a90 	vmov	s15, r3
 80033b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033bc:	edd7 7a06 	vldr	s15, [r7, #24]
 80033c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033c4:	7ffb      	ldrb	r3, [r7, #31]
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	4413      	add	r3, r2
 80033cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80033d0:	ee17 2a90 	vmov	r2, s15
 80033d4:	b212      	sxth	r2, r2
 80033d6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80033d8:	7ffb      	ldrb	r3, [r7, #31]
 80033da:	3301      	adds	r3, #1
 80033dc:	77fb      	strb	r3, [r7, #31]
 80033de:	7ffb      	ldrb	r3, [r7, #31]
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d9e0      	bls.n	80033a6 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80033e4:	bf00      	nop
 80033e6:	bf00      	nop
 80033e8:	3720      	adds	r7, #32
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}
 80033ee:	bf00      	nop
 80033f0:	3d79db23 	.word	0x3d79db23
 80033f4:	3df9db23 	.word	0x3df9db23
 80033f8:	3e79db23 	.word	0x3e79db23
 80033fc:	3ef9db23 	.word	0x3ef9db23

08003400 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	4603      	mov	r3, r0
 8003408:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800340e:	2111      	movs	r1, #17
 8003410:	20d4      	movs	r0, #212	; 0xd4
 8003412:	f7ff f9d3 	bl	80027bc <SENSOR_IO_Read>
 8003416:	4603      	mov	r3, r0
 8003418:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800341a:	88fb      	ldrh	r3, [r7, #6]
 800341c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800341e:	7bbb      	ldrb	r3, [r7, #14]
 8003420:	f003 0303 	and.w	r3, r3, #3
 8003424:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8003426:	7bba      	ldrb	r2, [r7, #14]
 8003428:	7bfb      	ldrb	r3, [r7, #15]
 800342a:	4313      	orrs	r3, r2
 800342c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800342e:	7bbb      	ldrb	r3, [r7, #14]
 8003430:	461a      	mov	r2, r3
 8003432:	2111      	movs	r1, #17
 8003434:	20d4      	movs	r0, #212	; 0xd4
 8003436:	f7ff f9a7 	bl	8002788 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800343a:	2112      	movs	r1, #18
 800343c:	20d4      	movs	r0, #212	; 0xd4
 800343e:	f7ff f9bd 	bl	80027bc <SENSOR_IO_Read>
 8003442:	4603      	mov	r3, r0
 8003444:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	b29b      	uxth	r3, r3
 800344c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800344e:	7bbb      	ldrb	r3, [r7, #14]
 8003450:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8003454:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8003456:	7bba      	ldrb	r2, [r7, #14]
 8003458:	7bfb      	ldrb	r3, [r7, #15]
 800345a:	4313      	orrs	r3, r2
 800345c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800345e:	7bbb      	ldrb	r3, [r7, #14]
 8003460:	461a      	mov	r2, r3
 8003462:	2112      	movs	r1, #18
 8003464:	20d4      	movs	r0, #212	; 0xd4
 8003466:	f7ff f98f 	bl	8002788 <SENSOR_IO_Write>
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b082      	sub	sp, #8
 8003476:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8003478:	2300      	movs	r3, #0
 800347a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800347c:	2111      	movs	r1, #17
 800347e:	20d4      	movs	r0, #212	; 0xd4
 8003480:	f7ff f99c 	bl	80027bc <SENSOR_IO_Read>
 8003484:	4603      	mov	r3, r0
 8003486:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8003490:	79fb      	ldrb	r3, [r7, #7]
 8003492:	461a      	mov	r2, r3
 8003494:	2111      	movs	r1, #17
 8003496:	20d4      	movs	r0, #212	; 0xd4
 8003498:	f7ff f976 	bl	8002788 <SENSOR_IO_Write>
}
 800349c:	bf00      	nop
 800349e:	3708      	adds	r7, #8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 80034a8:	f7ff f964 	bl	8002774 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 80034ac:	210f      	movs	r1, #15
 80034ae:	20d4      	movs	r0, #212	; 0xd4
 80034b0:	f7ff f984 	bl	80027bc <SENSOR_IO_Read>
 80034b4:	4603      	mov	r3, r0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	bd80      	pop	{r7, pc}

080034ba <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 80034ba:	b580      	push	{r7, lr}
 80034bc:	b084      	sub	sp, #16
 80034be:	af00      	add	r7, sp, #0
 80034c0:	4603      	mov	r3, r0
 80034c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 80034c8:	2116      	movs	r1, #22
 80034ca:	20d4      	movs	r0, #212	; 0xd4
 80034cc:	f7ff f976 	bl	80027bc <SENSOR_IO_Read>
 80034d0:	4603      	mov	r3, r0
 80034d2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 80034d4:	7bfb      	ldrb	r3, [r7, #15]
 80034d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80034da:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80034dc:	88fb      	ldrh	r3, [r7, #6]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 80034e2:	7bfb      	ldrb	r3, [r7, #15]
 80034e4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034e8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 80034ea:	7bfb      	ldrb	r3, [r7, #15]
 80034ec:	461a      	mov	r2, r3
 80034ee:	2116      	movs	r1, #22
 80034f0:	20d4      	movs	r0, #212	; 0xd4
 80034f2:	f7ff f949 	bl	8002788 <SENSOR_IO_Write>
}
 80034f6:	bf00      	nop
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b088      	sub	sp, #32
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 8003508:	2300      	movs	r3, #0
 800350a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800350c:	2300      	movs	r3, #0
 800350e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8003510:	f04f 0300 	mov.w	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 8003516:	2111      	movs	r1, #17
 8003518:	20d4      	movs	r0, #212	; 0xd4
 800351a:	f7ff f94f 	bl	80027bc <SENSOR_IO_Read>
 800351e:	4603      	mov	r3, r0
 8003520:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 8003522:	f107 0208 	add.w	r2, r7, #8
 8003526:	2306      	movs	r3, #6
 8003528:	2122      	movs	r1, #34	; 0x22
 800352a:	20d4      	movs	r0, #212	; 0xd4
 800352c:	f7ff f964 	bl	80027f8 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8003530:	2300      	movs	r3, #0
 8003532:	77fb      	strb	r3, [r7, #31]
 8003534:	e01f      	b.n	8003576 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8003536:	7ffb      	ldrb	r3, [r7, #31]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	3301      	adds	r3, #1
 800353c:	f107 0220 	add.w	r2, r7, #32
 8003540:	4413      	add	r3, r2
 8003542:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8003546:	b29b      	uxth	r3, r3
 8003548:	021b      	lsls	r3, r3, #8
 800354a:	b29a      	uxth	r2, r3
 800354c:	7ffb      	ldrb	r3, [r7, #31]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	f107 0120 	add.w	r1, r7, #32
 8003554:	440b      	add	r3, r1
 8003556:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800355a:	b29b      	uxth	r3, r3
 800355c:	4413      	add	r3, r2
 800355e:	b29a      	uxth	r2, r3
 8003560:	7ffb      	ldrb	r3, [r7, #31]
 8003562:	b212      	sxth	r2, r2
 8003564:	005b      	lsls	r3, r3, #1
 8003566:	f107 0120 	add.w	r1, r7, #32
 800356a:	440b      	add	r3, r1
 800356c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8003570:	7ffb      	ldrb	r3, [r7, #31]
 8003572:	3301      	adds	r3, #1
 8003574:	77fb      	strb	r3, [r7, #31]
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	2b02      	cmp	r3, #2
 800357a:	d9dc      	bls.n	8003536 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800357c:	7dfb      	ldrb	r3, [r7, #23]
 800357e:	f003 030c 	and.w	r3, r3, #12
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d828      	bhi.n	80035d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8003586:	a201      	add	r2, pc, #4	; (adr r2, 800358c <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8003588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358c:	080035c1 	.word	0x080035c1
 8003590:	080035d9 	.word	0x080035d9
 8003594:	080035d9 	.word	0x080035d9
 8003598:	080035d9 	.word	0x080035d9
 800359c:	080035c7 	.word	0x080035c7
 80035a0:	080035d9 	.word	0x080035d9
 80035a4:	080035d9 	.word	0x080035d9
 80035a8:	080035d9 	.word	0x080035d9
 80035ac:	080035cd 	.word	0x080035cd
 80035b0:	080035d9 	.word	0x080035d9
 80035b4:	080035d9 	.word	0x080035d9
 80035b8:	080035d9 	.word	0x080035d9
 80035bc:	080035d3 	.word	0x080035d3
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 80035c0:	4b17      	ldr	r3, [pc, #92]	; (8003620 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 80035c2:	61bb      	str	r3, [r7, #24]
    break;
 80035c4:	e008      	b.n	80035d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 80035c6:	4b17      	ldr	r3, [pc, #92]	; (8003624 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 80035c8:	61bb      	str	r3, [r7, #24]
    break;
 80035ca:	e005      	b.n	80035d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 80035cc:	4b16      	ldr	r3, [pc, #88]	; (8003628 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 80035ce:	61bb      	str	r3, [r7, #24]
    break;
 80035d0:	e002      	b.n	80035d8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 80035d2:	4b16      	ldr	r3, [pc, #88]	; (800362c <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 80035d4:	61bb      	str	r3, [r7, #24]
    break;    
 80035d6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	77fb      	strb	r3, [r7, #31]
 80035dc:	e017      	b.n	800360e <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 80035de:	7ffb      	ldrb	r3, [r7, #31]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	f107 0220 	add.w	r2, r7, #32
 80035e6:	4413      	add	r3, r2
 80035e8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80035ec:	ee07 3a90 	vmov	s15, r3
 80035f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035f4:	7ffb      	ldrb	r3, [r7, #31]
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	4413      	add	r3, r2
 80035fc:	edd7 7a06 	vldr	s15, [r7, #24]
 8003600:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003604:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 8003608:	7ffb      	ldrb	r3, [r7, #31]
 800360a:	3301      	adds	r3, #1
 800360c:	77fb      	strb	r3, [r7, #31]
 800360e:	7ffb      	ldrb	r3, [r7, #31]
 8003610:	2b02      	cmp	r3, #2
 8003612:	d9e4      	bls.n	80035de <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 8003614:	bf00      	nop
 8003616:	bf00      	nop
 8003618:	3720      	adds	r7, #32
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	410c0000 	.word	0x410c0000
 8003624:	418c0000 	.word	0x418c0000
 8003628:	420c0000 	.word	0x420c0000
 800362c:	428c0000 	.word	0x428c0000

08003630 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003636:	2300      	movs	r3, #0
 8003638:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800363a:	2003      	movs	r0, #3
 800363c:	f000 f93c 	bl	80038b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003640:	2000      	movs	r0, #0
 8003642:	f000 f80d 	bl	8003660 <HAL_InitTick>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d002      	beq.n	8003652 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	71fb      	strb	r3, [r7, #7]
 8003650:	e001      	b.n	8003656 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003652:	f7fe fc75 	bl	8001f40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003656:	79fb      	ldrb	r3, [r7, #7]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3708      	adds	r7, #8
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003668:	2300      	movs	r3, #0
 800366a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800366c:	4b17      	ldr	r3, [pc, #92]	; (80036cc <HAL_InitTick+0x6c>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d023      	beq.n	80036bc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003674:	4b16      	ldr	r3, [pc, #88]	; (80036d0 <HAL_InitTick+0x70>)
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	4b14      	ldr	r3, [pc, #80]	; (80036cc <HAL_InitTick+0x6c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	4619      	mov	r1, r3
 800367e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003682:	fbb3 f3f1 	udiv	r3, r3, r1
 8003686:	fbb2 f3f3 	udiv	r3, r2, r3
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f949 	bl	8003922 <HAL_SYSTICK_Config>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d10f      	bne.n	80036b6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b0f      	cmp	r3, #15
 800369a:	d809      	bhi.n	80036b0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800369c:	2200      	movs	r2, #0
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	f04f 30ff 	mov.w	r0, #4294967295
 80036a4:	f000 f913 	bl	80038ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <HAL_InitTick+0x74>)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6013      	str	r3, [r2, #0]
 80036ae:	e007      	b.n	80036c0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
 80036b4:	e004      	b.n	80036c0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	73fb      	strb	r3, [r7, #15]
 80036ba:	e001      	b.n	80036c0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200001f8 	.word	0x200001f8
 80036d0:	2000012c 	.word	0x2000012c
 80036d4:	200001f4 	.word	0x200001f4

080036d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80036dc:	4b06      	ldr	r3, [pc, #24]	; (80036f8 <HAL_IncTick+0x20>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b06      	ldr	r3, [pc, #24]	; (80036fc <HAL_IncTick+0x24>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4413      	add	r3, r2
 80036e8:	4a04      	ldr	r2, [pc, #16]	; (80036fc <HAL_IncTick+0x24>)
 80036ea:	6013      	str	r3, [r2, #0]
}
 80036ec:	bf00      	nop
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	200001f8 	.word	0x200001f8
 80036fc:	20000910 	.word	0x20000910

08003700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003700:	b480      	push	{r7}
 8003702:	af00      	add	r7, sp, #0
  return uwTick;
 8003704:	4b03      	ldr	r3, [pc, #12]	; (8003714 <HAL_GetTick+0x14>)
 8003706:	681b      	ldr	r3, [r3, #0]
}
 8003708:	4618      	mov	r0, r3
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	20000910 	.word	0x20000910

08003718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003728:	4b0c      	ldr	r3, [pc, #48]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800372e:	68ba      	ldr	r2, [r7, #8]
 8003730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003734:	4013      	ands	r3, r2
 8003736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800374a:	4a04      	ldr	r2, [pc, #16]	; (800375c <__NVIC_SetPriorityGrouping+0x44>)
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	60d3      	str	r3, [r2, #12]
}
 8003750:	bf00      	nop
 8003752:	3714      	adds	r7, #20
 8003754:	46bd      	mov	sp, r7
 8003756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375a:	4770      	bx	lr
 800375c:	e000ed00 	.word	0xe000ed00

08003760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <__NVIC_GetPriorityGrouping+0x18>)
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	0a1b      	lsrs	r3, r3, #8
 800376a:	f003 0307 	and.w	r3, r3, #7
}
 800376e:	4618      	mov	r0, r3
 8003770:	46bd      	mov	sp, r7
 8003772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003776:	4770      	bx	lr
 8003778:	e000ed00 	.word	0xe000ed00

0800377c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378a:	2b00      	cmp	r3, #0
 800378c:	db0b      	blt.n	80037a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	f003 021f 	and.w	r2, r3, #31
 8003794:	4907      	ldr	r1, [pc, #28]	; (80037b4 <__NVIC_EnableIRQ+0x38>)
 8003796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800379a:	095b      	lsrs	r3, r3, #5
 800379c:	2001      	movs	r0, #1
 800379e:	fa00 f202 	lsl.w	r2, r0, r2
 80037a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	e000e100 	.word	0xe000e100

080037b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	4603      	mov	r3, r0
 80037c0:	6039      	str	r1, [r7, #0]
 80037c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	db0a      	blt.n	80037e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	490c      	ldr	r1, [pc, #48]	; (8003804 <__NVIC_SetPriority+0x4c>)
 80037d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d6:	0112      	lsls	r2, r2, #4
 80037d8:	b2d2      	uxtb	r2, r2
 80037da:	440b      	add	r3, r1
 80037dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037e0:	e00a      	b.n	80037f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	b2da      	uxtb	r2, r3
 80037e6:	4908      	ldr	r1, [pc, #32]	; (8003808 <__NVIC_SetPriority+0x50>)
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	3b04      	subs	r3, #4
 80037f0:	0112      	lsls	r2, r2, #4
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	440b      	add	r3, r1
 80037f6:	761a      	strb	r2, [r3, #24]
}
 80037f8:	bf00      	nop
 80037fa:	370c      	adds	r7, #12
 80037fc:	46bd      	mov	sp, r7
 80037fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003802:	4770      	bx	lr
 8003804:	e000e100 	.word	0xe000e100
 8003808:	e000ed00 	.word	0xe000ed00

0800380c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800380c:	b480      	push	{r7}
 800380e:	b089      	sub	sp, #36	; 0x24
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f003 0307 	and.w	r3, r3, #7
 800381e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	f1c3 0307 	rsb	r3, r3, #7
 8003826:	2b04      	cmp	r3, #4
 8003828:	bf28      	it	cs
 800382a:	2304      	movcs	r3, #4
 800382c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	3304      	adds	r3, #4
 8003832:	2b06      	cmp	r3, #6
 8003834:	d902      	bls.n	800383c <NVIC_EncodePriority+0x30>
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	3b03      	subs	r3, #3
 800383a:	e000      	b.n	800383e <NVIC_EncodePriority+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003840:	f04f 32ff 	mov.w	r2, #4294967295
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43da      	mvns	r2, r3
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	401a      	ands	r2, r3
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003854:	f04f 31ff 	mov.w	r1, #4294967295
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa01 f303 	lsl.w	r3, r1, r3
 800385e:	43d9      	mvns	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003864:	4313      	orrs	r3, r2
         );
}
 8003866:	4618      	mov	r0, r3
 8003868:	3724      	adds	r7, #36	; 0x24
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
	...

08003874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	3b01      	subs	r3, #1
 8003880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003884:	d301      	bcc.n	800388a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003886:	2301      	movs	r3, #1
 8003888:	e00f      	b.n	80038aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800388a:	4a0a      	ldr	r2, [pc, #40]	; (80038b4 <SysTick_Config+0x40>)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3b01      	subs	r3, #1
 8003890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003892:	210f      	movs	r1, #15
 8003894:	f04f 30ff 	mov.w	r0, #4294967295
 8003898:	f7ff ff8e 	bl	80037b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800389c:	4b05      	ldr	r3, [pc, #20]	; (80038b4 <SysTick_Config+0x40>)
 800389e:	2200      	movs	r2, #0
 80038a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038a2:	4b04      	ldr	r3, [pc, #16]	; (80038b4 <SysTick_Config+0x40>)
 80038a4:	2207      	movs	r2, #7
 80038a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	e000e010 	.word	0xe000e010

080038b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff29 	bl	8003718 <__NVIC_SetPriorityGrouping>
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	4603      	mov	r3, r0
 80038d6:	60b9      	str	r1, [r7, #8]
 80038d8:	607a      	str	r2, [r7, #4]
 80038da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80038e0:	f7ff ff3e 	bl	8003760 <__NVIC_GetPriorityGrouping>
 80038e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	6978      	ldr	r0, [r7, #20]
 80038ec:	f7ff ff8e 	bl	800380c <NVIC_EncodePriority>
 80038f0:	4602      	mov	r2, r0
 80038f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f7ff ff5d 	bl	80037b8 <__NVIC_SetPriority>
}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b082      	sub	sp, #8
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003914:	4618      	mov	r0, r3
 8003916:	f7ff ff31 	bl	800377c <__NVIC_EnableIRQ>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}

08003922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f7ff ffa2 	bl	8003874 <SysTick_Config>
 8003930:	4603      	mov	r3, r0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3708      	adds	r7, #8
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}

0800393a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d008      	beq.n	8003964 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2204      	movs	r2, #4
 8003956:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e022      	b.n	80039aa <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 020e 	bic.w	r2, r2, #14
 8003972:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0201 	bic.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003988:	f003 021c 	and.w	r2, r3, #28
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003990:	2101      	movs	r1, #1
 8003992:	fa01 f202 	lsl.w	r2, r1, r2
 8003996:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b6:	b580      	push	{r7, lr}
 80039b8:	b084      	sub	sp, #16
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d005      	beq.n	80039da <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2204      	movs	r2, #4
 80039d2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	73fb      	strb	r3, [r7, #15]
 80039d8:	e029      	b.n	8003a2e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 020e 	bic.w	r2, r2, #14
 80039e8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f003 021c 	and.w	r2, r3, #28
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	4798      	blx	r3
    }
  }
  return status;
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a46:	e17f      	b.n	8003d48 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	4013      	ands	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 8171 	beq.w	8003d42 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d005      	beq.n	8003a78 <HAL_GPIO_Init+0x40>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d130      	bne.n	8003ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aae:	2201      	movs	r2, #1
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0201 	and.w	r2, r3, #1
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d118      	bne.n	8003b18 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003aec:	2201      	movs	r2, #1
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	fa02 f303 	lsl.w	r3, r2, r3
 8003af4:	43db      	mvns	r3, r3
 8003af6:	693a      	ldr	r2, [r7, #16]
 8003af8:	4013      	ands	r3, r2
 8003afa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	08db      	lsrs	r3, r3, #3
 8003b02:	f003 0201 	and.w	r2, r3, #1
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b03      	cmp	r3, #3
 8003b22:	d017      	beq.n	8003b54 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	689a      	ldr	r2, [r3, #8]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0303 	and.w	r3, r3, #3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d123      	bne.n	8003ba8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	08da      	lsrs	r2, r3, #3
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	3208      	adds	r2, #8
 8003b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	220f      	movs	r2, #15
 8003b78:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7c:	43db      	mvns	r3, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4013      	ands	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	691a      	ldr	r2, [r3, #16]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	08da      	lsrs	r2, r3, #3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3208      	adds	r2, #8
 8003ba2:	6939      	ldr	r1, [r7, #16]
 8003ba4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	43db      	mvns	r3, r3
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f003 0203 	and.w	r2, r3, #3
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd0:	693a      	ldr	r2, [r7, #16]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80ac 	beq.w	8003d42 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bea:	4b5f      	ldr	r3, [pc, #380]	; (8003d68 <HAL_GPIO_Init+0x330>)
 8003bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bee:	4a5e      	ldr	r2, [pc, #376]	; (8003d68 <HAL_GPIO_Init+0x330>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8003bf6:	4b5c      	ldr	r3, [pc, #368]	; (8003d68 <HAL_GPIO_Init+0x330>)
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	60bb      	str	r3, [r7, #8]
 8003c00:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c02:	4a5a      	ldr	r2, [pc, #360]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	3302      	adds	r3, #2
 8003c0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	f003 0303 	and.w	r3, r3, #3
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	220f      	movs	r2, #15
 8003c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c2c:	d025      	beq.n	8003c7a <HAL_GPIO_Init+0x242>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	4a4f      	ldr	r2, [pc, #316]	; (8003d70 <HAL_GPIO_Init+0x338>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d01f      	beq.n	8003c76 <HAL_GPIO_Init+0x23e>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4a4e      	ldr	r2, [pc, #312]	; (8003d74 <HAL_GPIO_Init+0x33c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d019      	beq.n	8003c72 <HAL_GPIO_Init+0x23a>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	4a4d      	ldr	r2, [pc, #308]	; (8003d78 <HAL_GPIO_Init+0x340>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d013      	beq.n	8003c6e <HAL_GPIO_Init+0x236>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	4a4c      	ldr	r2, [pc, #304]	; (8003d7c <HAL_GPIO_Init+0x344>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d00d      	beq.n	8003c6a <HAL_GPIO_Init+0x232>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	4a4b      	ldr	r2, [pc, #300]	; (8003d80 <HAL_GPIO_Init+0x348>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d007      	beq.n	8003c66 <HAL_GPIO_Init+0x22e>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	4a4a      	ldr	r2, [pc, #296]	; (8003d84 <HAL_GPIO_Init+0x34c>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d101      	bne.n	8003c62 <HAL_GPIO_Init+0x22a>
 8003c5e:	2306      	movs	r3, #6
 8003c60:	e00c      	b.n	8003c7c <HAL_GPIO_Init+0x244>
 8003c62:	2307      	movs	r3, #7
 8003c64:	e00a      	b.n	8003c7c <HAL_GPIO_Init+0x244>
 8003c66:	2305      	movs	r3, #5
 8003c68:	e008      	b.n	8003c7c <HAL_GPIO_Init+0x244>
 8003c6a:	2304      	movs	r3, #4
 8003c6c:	e006      	b.n	8003c7c <HAL_GPIO_Init+0x244>
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e004      	b.n	8003c7c <HAL_GPIO_Init+0x244>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e002      	b.n	8003c7c <HAL_GPIO_Init+0x244>
 8003c76:	2301      	movs	r3, #1
 8003c78:	e000      	b.n	8003c7c <HAL_GPIO_Init+0x244>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	f002 0203 	and.w	r2, r2, #3
 8003c82:	0092      	lsls	r2, r2, #2
 8003c84:	4093      	lsls	r3, r2
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c8c:	4937      	ldr	r1, [pc, #220]	; (8003d6c <HAL_GPIO_Init+0x334>)
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	089b      	lsrs	r3, r3, #2
 8003c92:	3302      	adds	r3, #2
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c9a:	4b3b      	ldr	r3, [pc, #236]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	43db      	mvns	r3, r3
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d003      	beq.n	8003cbe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003cb6:	693a      	ldr	r2, [r7, #16]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003cbe:	4a32      	ldr	r2, [pc, #200]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003cc4:	4b30      	ldr	r3, [pc, #192]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	43db      	mvns	r3, r3
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d003      	beq.n	8003ce8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003ce8:	4a27      	ldr	r2, [pc, #156]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003cee:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	43db      	mvns	r3, r3
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d003      	beq.n	8003d12 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d12:	4a1d      	ldr	r2, [pc, #116]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	693a      	ldr	r2, [r7, #16]
 8003d24:	4013      	ands	r3, r2
 8003d26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d3c:	4a12      	ldr	r2, [pc, #72]	; (8003d88 <HAL_GPIO_Init+0x350>)
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	697b      	ldr	r3, [r7, #20]
 8003d4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f47f ae78 	bne.w	8003a48 <HAL_GPIO_Init+0x10>
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	371c      	adds	r7, #28
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	40021000 	.word	0x40021000
 8003d6c:	40010000 	.word	0x40010000
 8003d70:	48000400 	.word	0x48000400
 8003d74:	48000800 	.word	0x48000800
 8003d78:	48000c00 	.word	0x48000c00
 8003d7c:	48001000 	.word	0x48001000
 8003d80:	48001400 	.word	0x48001400
 8003d84:	48001800 	.word	0x48001800
 8003d88:	40010400 	.word	0x40010400

08003d8c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b087      	sub	sp, #28
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
 8003d94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003d96:	2300      	movs	r3, #0
 8003d98:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003d9a:	e0cd      	b.n	8003f38 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	697b      	ldr	r3, [r7, #20]
 8003da0:	fa02 f303 	lsl.w	r3, r2, r3
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	4013      	ands	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	f000 80c0 	beq.w	8003f32 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8003db2:	4a68      	ldr	r2, [pc, #416]	; (8003f54 <HAL_GPIO_DeInit+0x1c8>)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	089b      	lsrs	r3, r3, #2
 8003db8:	3302      	adds	r3, #2
 8003dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbe:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	220f      	movs	r2, #15
 8003dca:	fa02 f303 	lsl.w	r3, r2, r3
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003dda:	d025      	beq.n	8003e28 <HAL_GPIO_DeInit+0x9c>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a5e      	ldr	r2, [pc, #376]	; (8003f58 <HAL_GPIO_DeInit+0x1cc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d01f      	beq.n	8003e24 <HAL_GPIO_DeInit+0x98>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a5d      	ldr	r2, [pc, #372]	; (8003f5c <HAL_GPIO_DeInit+0x1d0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d019      	beq.n	8003e20 <HAL_GPIO_DeInit+0x94>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	4a5c      	ldr	r2, [pc, #368]	; (8003f60 <HAL_GPIO_DeInit+0x1d4>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d013      	beq.n	8003e1c <HAL_GPIO_DeInit+0x90>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	4a5b      	ldr	r2, [pc, #364]	; (8003f64 <HAL_GPIO_DeInit+0x1d8>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00d      	beq.n	8003e18 <HAL_GPIO_DeInit+0x8c>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	4a5a      	ldr	r2, [pc, #360]	; (8003f68 <HAL_GPIO_DeInit+0x1dc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d007      	beq.n	8003e14 <HAL_GPIO_DeInit+0x88>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	4a59      	ldr	r2, [pc, #356]	; (8003f6c <HAL_GPIO_DeInit+0x1e0>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d101      	bne.n	8003e10 <HAL_GPIO_DeInit+0x84>
 8003e0c:	2306      	movs	r3, #6
 8003e0e:	e00c      	b.n	8003e2a <HAL_GPIO_DeInit+0x9e>
 8003e10:	2307      	movs	r3, #7
 8003e12:	e00a      	b.n	8003e2a <HAL_GPIO_DeInit+0x9e>
 8003e14:	2305      	movs	r3, #5
 8003e16:	e008      	b.n	8003e2a <HAL_GPIO_DeInit+0x9e>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	e006      	b.n	8003e2a <HAL_GPIO_DeInit+0x9e>
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e004      	b.n	8003e2a <HAL_GPIO_DeInit+0x9e>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e002      	b.n	8003e2a <HAL_GPIO_DeInit+0x9e>
 8003e24:	2301      	movs	r3, #1
 8003e26:	e000      	b.n	8003e2a <HAL_GPIO_DeInit+0x9e>
 8003e28:	2300      	movs	r3, #0
 8003e2a:	697a      	ldr	r2, [r7, #20]
 8003e2c:	f002 0203 	and.w	r2, r2, #3
 8003e30:	0092      	lsls	r2, r2, #2
 8003e32:	4093      	lsls	r3, r2
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d132      	bne.n	8003ea0 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003e3a:	4b4d      	ldr	r3, [pc, #308]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	43db      	mvns	r3, r3
 8003e42:	494b      	ldr	r1, [pc, #300]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e44:	4013      	ands	r3, r2
 8003e46:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003e48:	4b49      	ldr	r3, [pc, #292]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e4a:	685a      	ldr	r2, [r3, #4]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	43db      	mvns	r3, r3
 8003e50:	4947      	ldr	r1, [pc, #284]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003e56:	4b46      	ldr	r3, [pc, #280]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	4944      	ldr	r1, [pc, #272]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003e64:	4b42      	ldr	r3, [pc, #264]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	43db      	mvns	r3, r3
 8003e6c:	4940      	ldr	r1, [pc, #256]	; (8003f70 <HAL_GPIO_DeInit+0x1e4>)
 8003e6e:	4013      	ands	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f003 0303 	and.w	r3, r3, #3
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	220f      	movs	r2, #15
 8003e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e80:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8003e82:	4a34      	ldr	r2, [pc, #208]	; (8003f54 <HAL_GPIO_DeInit+0x1c8>)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	089b      	lsrs	r3, r3, #2
 8003e88:	3302      	adds	r3, #2
 8003e8a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	4830      	ldr	r0, [pc, #192]	; (8003f54 <HAL_GPIO_DeInit+0x1c8>)
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	089b      	lsrs	r3, r3, #2
 8003e98:	400a      	ands	r2, r1
 8003e9a:	3302      	adds	r3, #2
 8003e9c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	2103      	movs	r1, #3
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	431a      	orrs	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	08da      	lsrs	r2, r3, #3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3208      	adds	r2, #8
 8003ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	f003 0307 	and.w	r3, r3, #7
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	220f      	movs	r2, #15
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	43db      	mvns	r3, r3
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	08d2      	lsrs	r2, r2, #3
 8003ed4:	4019      	ands	r1, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3208      	adds	r2, #8
 8003eda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689a      	ldr	r2, [r3, #8]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	2103      	movs	r1, #3
 8003ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8003eec:	43db      	mvns	r3, r3
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	2101      	movs	r1, #1
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	fa01 f303 	lsl.w	r3, r1, r3
 8003f00:	43db      	mvns	r3, r3
 8003f02:	401a      	ands	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68da      	ldr	r2, [r3, #12]
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2103      	movs	r1, #3
 8003f12:	fa01 f303 	lsl.w	r3, r1, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	401a      	ands	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f22:	2101      	movs	r1, #1
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	fa01 f303 	lsl.w	r3, r1, r3
 8003f2a:	43db      	mvns	r3, r3
 8003f2c:	401a      	ands	r2, r3
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	3301      	adds	r3, #1
 8003f36:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003f38:	683a      	ldr	r2, [r7, #0]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f47f af2b 	bne.w	8003d9c <HAL_GPIO_DeInit+0x10>
  }
}
 8003f46:	bf00      	nop
 8003f48:	bf00      	nop
 8003f4a:	371c      	adds	r7, #28
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr
 8003f54:	40010000 	.word	0x40010000
 8003f58:	48000400 	.word	0x48000400
 8003f5c:	48000800 	.word	0x48000800
 8003f60:	48000c00 	.word	0x48000c00
 8003f64:	48001000 	.word	0x48001000
 8003f68:	48001400 	.word	0x48001400
 8003f6c:	48001800 	.word	0x48001800
 8003f70:	40010400 	.word	0x40010400

08003f74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	691a      	ldr	r2, [r3, #16]
 8003f84:	887b      	ldrh	r3, [r7, #2]
 8003f86:	4013      	ands	r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
 8003f90:	e001      	b.n	8003f96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f92:	2300      	movs	r3, #0
 8003f94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3714      	adds	r7, #20
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fb4:	787b      	ldrb	r3, [r7, #1]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003fba:	887a      	ldrh	r2, [r7, #2]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003fc0:	e002      	b.n	8003fc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003fc2:	887a      	ldrh	r2, [r7, #2]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	4603      	mov	r3, r0
 8003fdc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d006      	beq.n	8003ff8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fea:	4a05      	ldr	r2, [pc, #20]	; (8004000 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fec:	88fb      	ldrh	r3, [r7, #6]
 8003fee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ff0:	88fb      	ldrh	r3, [r7, #6]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f000 f806 	bl	8004004 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40010400 	.word	0x40010400

08004004 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	4603      	mov	r3, r0
 800400c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800401a:	b580      	push	{r7, lr}
 800401c:	b082      	sub	sp, #8
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e081      	b.n	8004130 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	d106      	bne.n	8004046 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7fd ffa1 	bl	8001f88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2224      	movs	r2, #36	; 0x24
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	681a      	ldr	r2, [r3, #0]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f022 0201 	bic.w	r2, r2, #1
 800405c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800406a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689a      	ldr	r2, [r3, #8]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800407a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b01      	cmp	r3, #1
 8004082:	d107      	bne.n	8004094 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689a      	ldr	r2, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004090:	609a      	str	r2, [r3, #8]
 8004092:	e006      	b.n	80040a2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689a      	ldr	r2, [r3, #8]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d104      	bne.n	80040b4 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80040c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040c6:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	68da      	ldr	r2, [r3, #12]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040d6:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691a      	ldr	r2, [r3, #16]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	695b      	ldr	r3, [r3, #20]
 80040e0:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	69d9      	ldr	r1, [r3, #28]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681a      	ldr	r2, [r3, #0]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f042 0201 	orr.w	r2, r2, #1
 8004110:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e021      	b.n	800418e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2224      	movs	r2, #36	; 0x24
 800414e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f022 0201 	bic.w	r2, r2, #1
 8004160:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f7fd ff6e 	bl	8002044 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800418c:	2300      	movs	r3, #0
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
	...

08004198 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b088      	sub	sp, #32
 800419c:	af02      	add	r7, sp, #8
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	4608      	mov	r0, r1
 80041a2:	4611      	mov	r1, r2
 80041a4:	461a      	mov	r2, r3
 80041a6:	4603      	mov	r3, r0
 80041a8:	817b      	strh	r3, [r7, #10]
 80041aa:	460b      	mov	r3, r1
 80041ac:	813b      	strh	r3, [r7, #8]
 80041ae:	4613      	mov	r3, r2
 80041b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	f040 80f9 	bne.w	80043b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041c0:	6a3b      	ldr	r3, [r7, #32]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_I2C_Mem_Write+0x34>
 80041c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e0ed      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d101      	bne.n	80041e6 <HAL_I2C_Mem_Write+0x4e>
 80041e2:	2302      	movs	r3, #2
 80041e4:	e0e6      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80041ee:	f7ff fa87 	bl	8003700 <HAL_GetTick>
 80041f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	2319      	movs	r3, #25
 80041fa:	2201      	movs	r2, #1
 80041fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004200:	68f8      	ldr	r0, [r7, #12]
 8004202:	f000 fac3 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e0d1      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2221      	movs	r2, #33	; 0x21
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a3a      	ldr	r2, [r7, #32]
 800422a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004230:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004238:	88f8      	ldrh	r0, [r7, #6]
 800423a:	893a      	ldrh	r2, [r7, #8]
 800423c:	8979      	ldrh	r1, [r7, #10]
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	9301      	str	r3, [sp, #4]
 8004242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004244:	9300      	str	r3, [sp, #0]
 8004246:	4603      	mov	r3, r0
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f9d3 	bl	80045f4 <I2C_RequestMemoryWrite>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d005      	beq.n	8004260 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0a9      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2bff      	cmp	r3, #255	; 0xff
 8004268:	d90e      	bls.n	8004288 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	22ff      	movs	r2, #255	; 0xff
 800426e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004274:	b2da      	uxtb	r2, r3
 8004276:	8979      	ldrh	r1, [r7, #10]
 8004278:	2300      	movs	r3, #0
 800427a:	9300      	str	r3, [sp, #0]
 800427c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fc2b 	bl	8004adc <I2C_TransferConfig>
 8004286:	e00f      	b.n	80042a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428c:	b29a      	uxth	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004296:	b2da      	uxtb	r2, r3
 8004298:	8979      	ldrh	r1, [r7, #10]
 800429a:	2300      	movs	r3, #0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f000 fc1a 	bl	8004adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042a8:	697a      	ldr	r2, [r7, #20]
 80042aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f000 faad 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 80042b2:	4603      	mov	r3, r0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d001      	beq.n	80042bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e07b      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c0:	781a      	ldrb	r2, [r3, #0]
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	1c5a      	adds	r2, r3, #1
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	3b01      	subs	r3, #1
 80042da:	b29a      	uxth	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e4:	3b01      	subs	r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d034      	beq.n	8004360 <HAL_I2C_Mem_Write+0x1c8>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d130      	bne.n	8004360 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fa3f 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e04d      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800431c:	b29b      	uxth	r3, r3
 800431e:	2bff      	cmp	r3, #255	; 0xff
 8004320:	d90e      	bls.n	8004340 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800432c:	b2da      	uxtb	r2, r3
 800432e:	8979      	ldrh	r1, [r7, #10]
 8004330:	2300      	movs	r3, #0
 8004332:	9300      	str	r3, [sp, #0]
 8004334:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004338:	68f8      	ldr	r0, [r7, #12]
 800433a:	f000 fbcf 	bl	8004adc <I2C_TransferConfig>
 800433e:	e00f      	b.n	8004360 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800434e:	b2da      	uxtb	r2, r3
 8004350:	8979      	ldrh	r1, [r7, #10]
 8004352:	2300      	movs	r3, #0
 8004354:	9300      	str	r3, [sp, #0]
 8004356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f000 fbbe 	bl	8004adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d19e      	bne.n	80042a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fa8c 	bl	800488c <I2C_WaitOnSTOPFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e01a      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	2220      	movs	r2, #32
 8004384:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	6859      	ldr	r1, [r3, #4]
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	4b0a      	ldr	r3, [pc, #40]	; (80043bc <HAL_I2C_Mem_Write+0x224>)
 8004392:	400b      	ands	r3, r1
 8004394:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2220      	movs	r2, #32
 800439a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2200      	movs	r2, #0
 80043a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80043ae:	2300      	movs	r3, #0
 80043b0:	e000      	b.n	80043b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80043b2:	2302      	movs	r3, #2
  }
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	fe00e800 	.word	0xfe00e800

080043c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b088      	sub	sp, #32
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	4608      	mov	r0, r1
 80043ca:	4611      	mov	r1, r2
 80043cc:	461a      	mov	r2, r3
 80043ce:	4603      	mov	r3, r0
 80043d0:	817b      	strh	r3, [r7, #10]
 80043d2:	460b      	mov	r3, r1
 80043d4:	813b      	strh	r3, [r7, #8]
 80043d6:	4613      	mov	r3, r2
 80043d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b20      	cmp	r3, #32
 80043e4:	f040 80fd 	bne.w	80045e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d002      	beq.n	80043f4 <HAL_I2C_Mem_Read+0x34>
 80043ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d105      	bne.n	8004400 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e0f1      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004406:	2b01      	cmp	r3, #1
 8004408:	d101      	bne.n	800440e <HAL_I2C_Mem_Read+0x4e>
 800440a:	2302      	movs	r3, #2
 800440c:	e0ea      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004416:	f7ff f973 	bl	8003700 <HAL_GetTick>
 800441a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	2319      	movs	r3, #25
 8004422:	2201      	movs	r2, #1
 8004424:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004428:	68f8      	ldr	r0, [r7, #12]
 800442a:	f000 f9af 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0d5      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2222      	movs	r2, #34	; 0x22
 800443c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2240      	movs	r2, #64	; 0x40
 8004444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004458:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004460:	88f8      	ldrh	r0, [r7, #6]
 8004462:	893a      	ldrh	r2, [r7, #8]
 8004464:	8979      	ldrh	r1, [r7, #10]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	4603      	mov	r3, r0
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 f913 	bl	800469c <I2C_RequestMemoryRead>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d005      	beq.n	8004488 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0ad      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800448c:	b29b      	uxth	r3, r3
 800448e:	2bff      	cmp	r3, #255	; 0xff
 8004490:	d90e      	bls.n	80044b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	22ff      	movs	r2, #255	; 0xff
 8004496:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	b2da      	uxtb	r2, r3
 800449e:	8979      	ldrh	r1, [r7, #10]
 80044a0:	4b52      	ldr	r3, [pc, #328]	; (80045ec <HAL_I2C_Mem_Read+0x22c>)
 80044a2:	9300      	str	r3, [sp, #0]
 80044a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 fb17 	bl	8004adc <I2C_TransferConfig>
 80044ae:	e00f      	b.n	80044d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044be:	b2da      	uxtb	r2, r3
 80044c0:	8979      	ldrh	r1, [r7, #10]
 80044c2:	4b4a      	ldr	r3, [pc, #296]	; (80045ec <HAL_I2C_Mem_Read+0x22c>)
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fb06 	bl	8004adc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044d6:	2200      	movs	r2, #0
 80044d8:	2104      	movs	r1, #4
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f956 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e07c      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fc:	1c5a      	adds	r2, r3, #1
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004506:	3b01      	subs	r3, #1
 8004508:	b29a      	uxth	r2, r3
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d034      	beq.n	8004590 <HAL_I2C_Mem_Read+0x1d0>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	d130      	bne.n	8004590 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004534:	2200      	movs	r2, #0
 8004536:	2180      	movs	r1, #128	; 0x80
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 f927 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e04d      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454c:	b29b      	uxth	r3, r3
 800454e:	2bff      	cmp	r3, #255	; 0xff
 8004550:	d90e      	bls.n	8004570 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	22ff      	movs	r2, #255	; 0xff
 8004556:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800455c:	b2da      	uxtb	r2, r3
 800455e:	8979      	ldrh	r1, [r7, #10]
 8004560:	2300      	movs	r3, #0
 8004562:	9300      	str	r3, [sp, #0]
 8004564:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004568:	68f8      	ldr	r0, [r7, #12]
 800456a:	f000 fab7 	bl	8004adc <I2C_TransferConfig>
 800456e:	e00f      	b.n	8004590 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457e:	b2da      	uxtb	r2, r3
 8004580:	8979      	ldrh	r1, [r7, #10]
 8004582:	2300      	movs	r3, #0
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 faa6 	bl	8004adc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	2b00      	cmp	r3, #0
 8004598:	d19a      	bne.n	80044d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f974 	bl	800488c <I2C_WaitOnSTOPFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e01a      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2220      	movs	r2, #32
 80045b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6859      	ldr	r1, [r3, #4]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_I2C_Mem_Read+0x230>)
 80045c2:	400b      	ands	r3, r1
 80045c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2220      	movs	r2, #32
 80045ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045de:	2300      	movs	r3, #0
 80045e0:	e000      	b.n	80045e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80045e2:	2302      	movs	r3, #2
  }
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3718      	adds	r7, #24
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}
 80045ec:	80002400 	.word	0x80002400
 80045f0:	fe00e800 	.word	0xfe00e800

080045f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	60f8      	str	r0, [r7, #12]
 80045fc:	4608      	mov	r0, r1
 80045fe:	4611      	mov	r1, r2
 8004600:	461a      	mov	r2, r3
 8004602:	4603      	mov	r3, r0
 8004604:	817b      	strh	r3, [r7, #10]
 8004606:	460b      	mov	r3, r1
 8004608:	813b      	strh	r3, [r7, #8]
 800460a:	4613      	mov	r3, r2
 800460c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800460e:	88fb      	ldrh	r3, [r7, #6]
 8004610:	b2da      	uxtb	r2, r3
 8004612:	8979      	ldrh	r1, [r7, #10]
 8004614:	4b20      	ldr	r3, [pc, #128]	; (8004698 <I2C_RequestMemoryWrite+0xa4>)
 8004616:	9300      	str	r3, [sp, #0]
 8004618:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fa5d 	bl	8004adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004622:	69fa      	ldr	r2, [r7, #28]
 8004624:	69b9      	ldr	r1, [r7, #24]
 8004626:	68f8      	ldr	r0, [r7, #12]
 8004628:	f000 f8f0 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e02c      	b.n	8004690 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004636:	88fb      	ldrh	r3, [r7, #6]
 8004638:	2b01      	cmp	r3, #1
 800463a:	d105      	bne.n	8004648 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800463c:	893b      	ldrh	r3, [r7, #8]
 800463e:	b2da      	uxtb	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	629a      	str	r2, [r3, #40]	; 0x28
 8004646:	e015      	b.n	8004674 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004648:	893b      	ldrh	r3, [r7, #8]
 800464a:	0a1b      	lsrs	r3, r3, #8
 800464c:	b29b      	uxth	r3, r3
 800464e:	b2da      	uxtb	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	69b9      	ldr	r1, [r7, #24]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8d6 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e012      	b.n	8004690 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800466a:	893b      	ldrh	r3, [r7, #8]
 800466c:	b2da      	uxtb	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	69bb      	ldr	r3, [r7, #24]
 800467a:	2200      	movs	r2, #0
 800467c:	2180      	movs	r1, #128	; 0x80
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 f884 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e000      	b.n	8004690 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800468e:	2300      	movs	r3, #0
}
 8004690:	4618      	mov	r0, r3
 8004692:	3710      	adds	r7, #16
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	80002000 	.word	0x80002000

0800469c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af02      	add	r7, sp, #8
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	4608      	mov	r0, r1
 80046a6:	4611      	mov	r1, r2
 80046a8:	461a      	mov	r2, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	817b      	strh	r3, [r7, #10]
 80046ae:	460b      	mov	r3, r1
 80046b0:	813b      	strh	r3, [r7, #8]
 80046b2:	4613      	mov	r3, r2
 80046b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80046b6:	88fb      	ldrh	r3, [r7, #6]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	8979      	ldrh	r1, [r7, #10]
 80046bc:	4b20      	ldr	r3, [pc, #128]	; (8004740 <I2C_RequestMemoryRead+0xa4>)
 80046be:	9300      	str	r3, [sp, #0]
 80046c0:	2300      	movs	r3, #0
 80046c2:	68f8      	ldr	r0, [r7, #12]
 80046c4:	f000 fa0a 	bl	8004adc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046c8:	69fa      	ldr	r2, [r7, #28]
 80046ca:	69b9      	ldr	r1, [r7, #24]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f89d 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d001      	beq.n	80046dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e02c      	b.n	8004736 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80046dc:	88fb      	ldrh	r3, [r7, #6]
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d105      	bne.n	80046ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80046e2:	893b      	ldrh	r3, [r7, #8]
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	629a      	str	r2, [r3, #40]	; 0x28
 80046ec:	e015      	b.n	800471a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80046ee:	893b      	ldrh	r3, [r7, #8]
 80046f0:	0a1b      	lsrs	r3, r3, #8
 80046f2:	b29b      	uxth	r3, r3
 80046f4:	b2da      	uxtb	r2, r3
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80046fc:	69fa      	ldr	r2, [r7, #28]
 80046fe:	69b9      	ldr	r1, [r7, #24]
 8004700:	68f8      	ldr	r0, [r7, #12]
 8004702:	f000 f883 	bl	800480c <I2C_WaitOnTXISFlagUntilTimeout>
 8004706:	4603      	mov	r3, r0
 8004708:	2b00      	cmp	r3, #0
 800470a:	d001      	beq.n	8004710 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e012      	b.n	8004736 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004710:	893b      	ldrh	r3, [r7, #8]
 8004712:	b2da      	uxtb	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2200      	movs	r2, #0
 8004722:	2140      	movs	r1, #64	; 0x40
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 f831 	bl	800478c <I2C_WaitOnFlagUntilTimeout>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d001      	beq.n	8004734 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e000      	b.n	8004736 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3710      	adds	r7, #16
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}
 800473e:	bf00      	nop
 8004740:	80002000 	.word	0x80002000

08004744 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b02      	cmp	r3, #2
 8004758:	d103      	bne.n	8004762 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2200      	movs	r2, #0
 8004760:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0301 	and.w	r3, r3, #1
 800476c:	2b01      	cmp	r3, #1
 800476e:	d007      	beq.n	8004780 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699a      	ldr	r2, [r3, #24]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	619a      	str	r2, [r3, #24]
  }
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	4613      	mov	r3, r2
 800479a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800479c:	e022      	b.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047a4:	d01e      	beq.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047a6:	f7fe ffab 	bl	8003700 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	683a      	ldr	r2, [r7, #0]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d302      	bcc.n	80047bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d113      	bne.n	80047e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e00f      	b.n	8004804 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699a      	ldr	r2, [r3, #24]
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4013      	ands	r3, r2
 80047ee:	68ba      	ldr	r2, [r7, #8]
 80047f0:	429a      	cmp	r2, r3
 80047f2:	bf0c      	ite	eq
 80047f4:	2301      	moveq	r3, #1
 80047f6:	2300      	movne	r3, #0
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	461a      	mov	r2, r3
 80047fc:	79fb      	ldrb	r3, [r7, #7]
 80047fe:	429a      	cmp	r2, r3
 8004800:	d0cd      	beq.n	800479e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3710      	adds	r7, #16
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004818:	e02c      	b.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68b9      	ldr	r1, [r7, #8]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	f000 f870 	bl	8004904 <I2C_IsErrorOccurred>
 8004824:	4603      	mov	r3, r0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d001      	beq.n	800482e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e02a      	b.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004834:	d01e      	beq.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004836:	f7fe ff63 	bl	8003700 <HAL_GetTick>
 800483a:	4602      	mov	r2, r0
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	1ad3      	subs	r3, r2, r3
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	429a      	cmp	r2, r3
 8004844:	d302      	bcc.n	800484c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d113      	bne.n	8004874 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004850:	f043 0220 	orr.w	r2, r3, #32
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2200      	movs	r2, #0
 8004864:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e007      	b.n	8004884 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d1cb      	bne.n	800481a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	3710      	adds	r7, #16
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}

0800488c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004898:	e028      	b.n	80048ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68b9      	ldr	r1, [r7, #8]
 800489e:	68f8      	ldr	r0, [r7, #12]
 80048a0:	f000 f830 	bl	8004904 <I2C_IsErrorOccurred>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e026      	b.n	80048fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ae:	f7fe ff27 	bl	8003700 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	68ba      	ldr	r2, [r7, #8]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d302      	bcc.n	80048c4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d113      	bne.n	80048ec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048c8:	f043 0220 	orr.w	r2, r3, #32
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e007      	b.n	80048fc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699b      	ldr	r3, [r3, #24]
 80048f2:	f003 0320 	and.w	r3, r3, #32
 80048f6:	2b20      	cmp	r3, #32
 80048f8:	d1cf      	bne.n	800489a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3710      	adds	r7, #16
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	; 0x28
 8004908:	af00      	add	r7, sp, #0
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800491e:	2300      	movs	r3, #0
 8004920:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	f003 0310 	and.w	r3, r3, #16
 800492c:	2b00      	cmp	r3, #0
 800492e:	d075      	beq.n	8004a1c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2210      	movs	r2, #16
 8004936:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004938:	e056      	b.n	80049e8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004940:	d052      	beq.n	80049e8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004942:	f7fe fedd 	bl	8003700 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	429a      	cmp	r2, r3
 8004950:	d302      	bcc.n	8004958 <I2C_IsErrorOccurred+0x54>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d147      	bne.n	80049e8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004962:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800496a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004976:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800497a:	d12e      	bne.n	80049da <I2C_IsErrorOccurred+0xd6>
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004982:	d02a      	beq.n	80049da <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004984:	7cfb      	ldrb	r3, [r7, #19]
 8004986:	2b20      	cmp	r3, #32
 8004988:	d027      	beq.n	80049da <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	685a      	ldr	r2, [r3, #4]
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004998:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800499a:	f7fe feb1 	bl	8003700 <HAL_GetTick>
 800499e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049a0:	e01b      	b.n	80049da <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80049a2:	f7fe fead 	bl	8003700 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	2b19      	cmp	r3, #25
 80049ae:	d914      	bls.n	80049da <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	699b      	ldr	r3, [r3, #24]
 80049e0:	f003 0320 	and.w	r3, r3, #32
 80049e4:	2b20      	cmp	r3, #32
 80049e6:	d1dc      	bne.n	80049a2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b20      	cmp	r3, #32
 80049f4:	d003      	beq.n	80049fe <I2C_IsErrorOccurred+0xfa>
 80049f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d09d      	beq.n	800493a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80049fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d103      	bne.n	8004a0e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2220      	movs	r2, #32
 8004a0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004a0e:	6a3b      	ldr	r3, [r7, #32]
 8004a10:	f043 0304 	orr.w	r3, r3, #4
 8004a14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	699b      	ldr	r3, [r3, #24]
 8004a22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f043 0301 	orr.w	r3, r3, #1
 8004a34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f043 0302 	orr.w	r3, r3, #2
 8004a78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004a8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d01c      	beq.n	8004acc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f7ff fe56 	bl	8004744 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	4b0d      	ldr	r3, [pc, #52]	; (8004ad8 <I2C_IsErrorOccurred+0x1d4>)
 8004aa4:	400b      	ands	r3, r1
 8004aa6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004acc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3728      	adds	r7, #40	; 0x28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}
 8004ad8:	fe00e800 	.word	0xfe00e800

08004adc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b087      	sub	sp, #28
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	60f8      	str	r0, [r7, #12]
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	817b      	strh	r3, [r7, #10]
 8004aea:	4613      	mov	r3, r2
 8004aec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004aee:	897b      	ldrh	r3, [r7, #10]
 8004af0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004af4:	7a7b      	ldrb	r3, [r7, #9]
 8004af6:	041b      	lsls	r3, r3, #16
 8004af8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004afc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004b02:	6a3b      	ldr	r3, [r7, #32]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685a      	ldr	r2, [r3, #4]
 8004b12:	6a3b      	ldr	r3, [r7, #32]
 8004b14:	0d5b      	lsrs	r3, r3, #21
 8004b16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004b1a:	4b08      	ldr	r3, [pc, #32]	; (8004b3c <I2C_TransferConfig+0x60>)
 8004b1c:	430b      	orrs	r3, r1
 8004b1e:	43db      	mvns	r3, r3
 8004b20:	ea02 0103 	and.w	r1, r2, r3
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004b2e:	bf00      	nop
 8004b30:	371c      	adds	r7, #28
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	03ff63ff 	.word	0x03ff63ff

08004b40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d138      	bne.n	8004bc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d101      	bne.n	8004b64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004b60:	2302      	movs	r3, #2
 8004b62:	e032      	b.n	8004bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2224      	movs	r2, #36	; 0x24
 8004b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 0201 	bic.w	r2, r2, #1
 8004b82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681a      	ldr	r2, [r3, #0]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004b92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	430a      	orrs	r2, r1
 8004ba2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681a      	ldr	r2, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f042 0201 	orr.w	r2, r2, #1
 8004bb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	e000      	b.n	8004bca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004bc8:	2302      	movs	r3, #2
  }
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	370c      	adds	r7, #12
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr

08004bd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004bd6:	b480      	push	{r7}
 8004bd8:	b085      	sub	sp, #20
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
 8004bde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004be6:	b2db      	uxtb	r3, r3
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d139      	bne.n	8004c60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d101      	bne.n	8004bfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004bf6:	2302      	movs	r3, #2
 8004bf8:	e033      	b.n	8004c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2224      	movs	r2, #36	; 0x24
 8004c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f022 0201 	bic.w	r2, r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004c28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	021b      	lsls	r3, r3, #8
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	e000      	b.n	8004c62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
  }
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
	...

08004c70 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004c74:	4b04      	ldr	r3, [pc, #16]	; (8004c88 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40007000 	.word	0x40007000

08004c8c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b085      	sub	sp, #20
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c9a:	d130      	bne.n	8004cfe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c9c:	4b23      	ldr	r3, [pc, #140]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ca4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ca8:	d038      	beq.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004caa:	4b20      	ldr	r3, [pc, #128]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004cb2:	4a1e      	ldr	r2, [pc, #120]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cb8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cba:	4b1d      	ldr	r3, [pc, #116]	; (8004d30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	2232      	movs	r2, #50	; 0x32
 8004cc0:	fb02 f303 	mul.w	r3, r2, r3
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	0c9b      	lsrs	r3, r3, #18
 8004ccc:	3301      	adds	r3, #1
 8004cce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cd0:	e002      	b.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	3b01      	subs	r3, #1
 8004cd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cd8:	4b14      	ldr	r3, [pc, #80]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cda:	695b      	ldr	r3, [r3, #20]
 8004cdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ce0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ce4:	d102      	bne.n	8004cec <HAL_PWREx_ControlVoltageScaling+0x60>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f2      	bne.n	8004cd2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cec:	4b0f      	ldr	r3, [pc, #60]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004cee:	695b      	ldr	r3, [r3, #20]
 8004cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cf8:	d110      	bne.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004cfa:	2303      	movs	r3, #3
 8004cfc:	e00f      	b.n	8004d1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cfe:	4b0b      	ldr	r3, [pc, #44]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d0a:	d007      	beq.n	8004d1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004d0c:	4b07      	ldr	r3, [pc, #28]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d14:	4a05      	ldr	r2, [pc, #20]	; (8004d2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40007000 	.word	0x40007000
 8004d30:	2000012c 	.word	0x2000012c
 8004d34:	431bde83 	.word	0x431bde83

08004d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b088      	sub	sp, #32
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d101      	bne.n	8004d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d46:	2301      	movs	r3, #1
 8004d48:	e3c6      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4a:	4ba1      	ldr	r3, [pc, #644]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d54:	4b9e      	ldr	r3, [pc, #632]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0303 	and.w	r3, r3, #3
 8004d5c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0310 	and.w	r3, r3, #16
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 80e4 	beq.w	8004f34 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_RCC_OscConfig+0x4a>
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	2b0c      	cmp	r3, #12
 8004d76:	f040 808b 	bne.w	8004e90 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	f040 8087 	bne.w	8004e90 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d82:	4b93      	ldr	r3, [pc, #588]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d005      	beq.n	8004d9a <HAL_RCC_OscConfig+0x62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e39e      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a1a      	ldr	r2, [r3, #32]
 8004d9e:	4b8c      	ldr	r3, [pc, #560]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0308 	and.w	r3, r3, #8
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d004      	beq.n	8004db4 <HAL_RCC_OscConfig+0x7c>
 8004daa:	4b89      	ldr	r3, [pc, #548]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004db2:	e005      	b.n	8004dc0 <HAL_RCC_OscConfig+0x88>
 8004db4:	4b86      	ldr	r3, [pc, #536]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004db6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dba:	091b      	lsrs	r3, r3, #4
 8004dbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d223      	bcs.n	8004e0c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a1b      	ldr	r3, [r3, #32]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fd53 	bl	8005874 <RCC_SetFlashLatencyFromMSIRange>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e37f      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dd8:	4b7d      	ldr	r3, [pc, #500]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a7c      	ldr	r2, [pc, #496]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004dde:	f043 0308 	orr.w	r3, r3, #8
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	4b7a      	ldr	r3, [pc, #488]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6a1b      	ldr	r3, [r3, #32]
 8004df0:	4977      	ldr	r1, [pc, #476]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004df6:	4b76      	ldr	r3, [pc, #472]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	021b      	lsls	r3, r3, #8
 8004e04:	4972      	ldr	r1, [pc, #456]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e06:	4313      	orrs	r3, r2
 8004e08:	604b      	str	r3, [r1, #4]
 8004e0a:	e025      	b.n	8004e58 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e0c:	4b70      	ldr	r3, [pc, #448]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a6f      	ldr	r2, [pc, #444]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e12:	f043 0308 	orr.w	r3, r3, #8
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	4b6d      	ldr	r3, [pc, #436]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6a1b      	ldr	r3, [r3, #32]
 8004e24:	496a      	ldr	r1, [pc, #424]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e2a:	4b69      	ldr	r3, [pc, #420]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	021b      	lsls	r3, r3, #8
 8004e38:	4965      	ldr	r1, [pc, #404]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a1b      	ldr	r3, [r3, #32]
 8004e48:	4618      	mov	r0, r3
 8004e4a:	f000 fd13 	bl	8005874 <RCC_SetFlashLatencyFromMSIRange>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e33f      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004e58:	f000 fc48 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	4b5c      	ldr	r3, [pc, #368]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e60:	689b      	ldr	r3, [r3, #8]
 8004e62:	091b      	lsrs	r3, r3, #4
 8004e64:	f003 030f 	and.w	r3, r3, #15
 8004e68:	495a      	ldr	r1, [pc, #360]	; (8004fd4 <HAL_RCC_OscConfig+0x29c>)
 8004e6a:	5ccb      	ldrb	r3, [r1, r3]
 8004e6c:	f003 031f 	and.w	r3, r3, #31
 8004e70:	fa22 f303 	lsr.w	r3, r2, r3
 8004e74:	4a58      	ldr	r2, [pc, #352]	; (8004fd8 <HAL_RCC_OscConfig+0x2a0>)
 8004e76:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e78:	4b58      	ldr	r3, [pc, #352]	; (8004fdc <HAL_RCC_OscConfig+0x2a4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	f7fe fbef 	bl	8003660 <HAL_InitTick>
 8004e82:	4603      	mov	r3, r0
 8004e84:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004e86:	7bfb      	ldrb	r3, [r7, #15]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d052      	beq.n	8004f32 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	e323      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d032      	beq.n	8004efe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004e98:	4b4d      	ldr	r3, [pc, #308]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a4c      	ldr	r2, [pc, #304]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ea4:	f7fe fc2c 	bl	8003700 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004eac:	f7fe fc28 	bl	8003700 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e30c      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ebe:	4b44      	ldr	r3, [pc, #272]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eca:	4b41      	ldr	r3, [pc, #260]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4a40      	ldr	r2, [pc, #256]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004ed0:	f043 0308 	orr.w	r3, r3, #8
 8004ed4:	6013      	str	r3, [r2, #0]
 8004ed6:	4b3e      	ldr	r3, [pc, #248]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a1b      	ldr	r3, [r3, #32]
 8004ee2:	493b      	ldr	r1, [pc, #236]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ee8:	4b39      	ldr	r3, [pc, #228]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	021b      	lsls	r3, r3, #8
 8004ef6:	4936      	ldr	r1, [pc, #216]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	604b      	str	r3, [r1, #4]
 8004efc:	e01a      	b.n	8004f34 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004efe:	4b34      	ldr	r3, [pc, #208]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a33      	ldr	r2, [pc, #204]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f04:	f023 0301 	bic.w	r3, r3, #1
 8004f08:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f0a:	f7fe fbf9 	bl	8003700 <HAL_GetTick>
 8004f0e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f10:	e008      	b.n	8004f24 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f12:	f7fe fbf5 	bl	8003700 <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b02      	cmp	r3, #2
 8004f1e:	d901      	bls.n	8004f24 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004f20:	2303      	movs	r3, #3
 8004f22:	e2d9      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f24:	4b2a      	ldr	r3, [pc, #168]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f003 0302 	and.w	r3, r3, #2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f0      	bne.n	8004f12 <HAL_RCC_OscConfig+0x1da>
 8004f30:	e000      	b.n	8004f34 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f32:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0301 	and.w	r3, r3, #1
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d074      	beq.n	800502a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d005      	beq.n	8004f52 <HAL_RCC_OscConfig+0x21a>
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b0c      	cmp	r3, #12
 8004f4a:	d10e      	bne.n	8004f6a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	2b03      	cmp	r3, #3
 8004f50:	d10b      	bne.n	8004f6a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f52:	4b1f      	ldr	r3, [pc, #124]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d064      	beq.n	8005028 <HAL_RCC_OscConfig+0x2f0>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d160      	bne.n	8005028 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e2b6      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f72:	d106      	bne.n	8004f82 <HAL_RCC_OscConfig+0x24a>
 8004f74:	4b16      	ldr	r3, [pc, #88]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a15      	ldr	r2, [pc, #84]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	e01d      	b.n	8004fbe <HAL_RCC_OscConfig+0x286>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f8a:	d10c      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x26e>
 8004f8c:	4b10      	ldr	r3, [pc, #64]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	4b0d      	ldr	r3, [pc, #52]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a0c      	ldr	r2, [pc, #48]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004f9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	e00b      	b.n	8004fbe <HAL_RCC_OscConfig+0x286>
 8004fa6:	4b0a      	ldr	r3, [pc, #40]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004fac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb0:	6013      	str	r3, [r2, #0]
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a06      	ldr	r2, [pc, #24]	; (8004fd0 <HAL_RCC_OscConfig+0x298>)
 8004fb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fbc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d01c      	beq.n	8005000 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fc6:	f7fe fb9b 	bl	8003700 <HAL_GetTick>
 8004fca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fcc:	e011      	b.n	8004ff2 <HAL_RCC_OscConfig+0x2ba>
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800b250 	.word	0x0800b250
 8004fd8:	2000012c 	.word	0x2000012c
 8004fdc:	200001f4 	.word	0x200001f4
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fe0:	f7fe fb8e 	bl	8003700 <HAL_GetTick>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	2b64      	cmp	r3, #100	; 0x64
 8004fec:	d901      	bls.n	8004ff2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e272      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ff2:	4baf      	ldr	r3, [pc, #700]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d0f0      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x2a8>
 8004ffe:	e014      	b.n	800502a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fe fb7e 	bl	8003700 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005008:	f7fe fb7a 	bl	8003700 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e25e      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800501a:	4ba5      	ldr	r3, [pc, #660]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x2d0>
 8005026:	e000      	b.n	800502a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005028:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d060      	beq.n	80050f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b04      	cmp	r3, #4
 800503a:	d005      	beq.n	8005048 <HAL_RCC_OscConfig+0x310>
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	2b0c      	cmp	r3, #12
 8005040:	d119      	bne.n	8005076 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2b02      	cmp	r3, #2
 8005046:	d116      	bne.n	8005076 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005048:	4b99      	ldr	r3, [pc, #612]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005050:	2b00      	cmp	r3, #0
 8005052:	d005      	beq.n	8005060 <HAL_RCC_OscConfig+0x328>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800505c:	2301      	movs	r3, #1
 800505e:	e23b      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005060:	4b93      	ldr	r3, [pc, #588]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	691b      	ldr	r3, [r3, #16]
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	4990      	ldr	r1, [pc, #576]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005070:	4313      	orrs	r3, r2
 8005072:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005074:	e040      	b.n	80050f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d023      	beq.n	80050c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800507e:	4b8c      	ldr	r3, [pc, #560]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a8b      	ldr	r2, [pc, #556]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508a:	f7fe fb39 	bl	8003700 <HAL_GetTick>
 800508e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005090:	e008      	b.n	80050a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005092:	f7fe fb35 	bl	8003700 <HAL_GetTick>
 8005096:	4602      	mov	r2, r0
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	1ad3      	subs	r3, r2, r3
 800509c:	2b02      	cmp	r3, #2
 800509e:	d901      	bls.n	80050a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80050a0:	2303      	movs	r3, #3
 80050a2:	e219      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050a4:	4b82      	ldr	r3, [pc, #520]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d0f0      	beq.n	8005092 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050b0:	4b7f      	ldr	r3, [pc, #508]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	691b      	ldr	r3, [r3, #16]
 80050bc:	061b      	lsls	r3, r3, #24
 80050be:	497c      	ldr	r1, [pc, #496]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	604b      	str	r3, [r1, #4]
 80050c4:	e018      	b.n	80050f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050c6:	4b7a      	ldr	r3, [pc, #488]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a79      	ldr	r2, [pc, #484]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80050cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050d2:	f7fe fb15 	bl	8003700 <HAL_GetTick>
 80050d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050d8:	e008      	b.n	80050ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050da:	f7fe fb11 	bl	8003700 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e1f5      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ec:	4b70      	ldr	r3, [pc, #448]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f0      	bne.n	80050da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f003 0308 	and.w	r3, r3, #8
 8005100:	2b00      	cmp	r3, #0
 8005102:	d03c      	beq.n	800517e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d01c      	beq.n	8005146 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800510c:	4b68      	ldr	r3, [pc, #416]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800510e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005112:	4a67      	ldr	r2, [pc, #412]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005114:	f043 0301 	orr.w	r3, r3, #1
 8005118:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800511c:	f7fe faf0 	bl	8003700 <HAL_GetTick>
 8005120:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005122:	e008      	b.n	8005136 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005124:	f7fe faec 	bl	8003700 <HAL_GetTick>
 8005128:	4602      	mov	r2, r0
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	2b02      	cmp	r3, #2
 8005130:	d901      	bls.n	8005136 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e1d0      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005136:	4b5e      	ldr	r3, [pc, #376]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800513c:	f003 0302 	and.w	r3, r3, #2
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0ef      	beq.n	8005124 <HAL_RCC_OscConfig+0x3ec>
 8005144:	e01b      	b.n	800517e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005146:	4b5a      	ldr	r3, [pc, #360]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800514c:	4a58      	ldr	r2, [pc, #352]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800514e:	f023 0301 	bic.w	r3, r3, #1
 8005152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005156:	f7fe fad3 	bl	8003700 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800515e:	f7fe facf 	bl	8003700 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e1b3      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005170:	4b4f      	ldr	r3, [pc, #316]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1ef      	bne.n	800515e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	f000 80a6 	beq.w	80052d8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800518c:	2300      	movs	r3, #0
 800518e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005190:	4b47      	ldr	r3, [pc, #284]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005198:	2b00      	cmp	r3, #0
 800519a:	d10d      	bne.n	80051b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800519c:	4b44      	ldr	r3, [pc, #272]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	4a43      	ldr	r2, [pc, #268]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80051a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051a6:	6593      	str	r3, [r2, #88]	; 0x58
 80051a8:	4b41      	ldr	r3, [pc, #260]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 80051aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051b0:	60bb      	str	r3, [r7, #8]
 80051b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80051b4:	2301      	movs	r3, #1
 80051b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051b8:	4b3e      	ldr	r3, [pc, #248]	; (80052b4 <HAL_RCC_OscConfig+0x57c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d118      	bne.n	80051f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051c4:	4b3b      	ldr	r3, [pc, #236]	; (80052b4 <HAL_RCC_OscConfig+0x57c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a3a      	ldr	r2, [pc, #232]	; (80052b4 <HAL_RCC_OscConfig+0x57c>)
 80051ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051d0:	f7fe fa96 	bl	8003700 <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051d6:	e008      	b.n	80051ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051d8:	f7fe fa92 	bl	8003700 <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d901      	bls.n	80051ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	e176      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ea:	4b32      	ldr	r3, [pc, #200]	; (80052b4 <HAL_RCC_OscConfig+0x57c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d0f0      	beq.n	80051d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d108      	bne.n	8005210 <HAL_RCC_OscConfig+0x4d8>
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005206:	f043 0301 	orr.w	r3, r3, #1
 800520a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800520e:	e024      	b.n	800525a <HAL_RCC_OscConfig+0x522>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	2b05      	cmp	r3, #5
 8005216:	d110      	bne.n	800523a <HAL_RCC_OscConfig+0x502>
 8005218:	4b25      	ldr	r3, [pc, #148]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800521a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800521e:	4a24      	ldr	r2, [pc, #144]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005220:	f043 0304 	orr.w	r3, r3, #4
 8005224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005228:	4b21      	ldr	r3, [pc, #132]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800522a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800522e:	4a20      	ldr	r2, [pc, #128]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005238:	e00f      	b.n	800525a <HAL_RCC_OscConfig+0x522>
 800523a:	4b1d      	ldr	r3, [pc, #116]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800523c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005240:	4a1b      	ldr	r2, [pc, #108]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005242:	f023 0301 	bic.w	r3, r3, #1
 8005246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800524a:	4b19      	ldr	r3, [pc, #100]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 800524c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005250:	4a17      	ldr	r2, [pc, #92]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005252:	f023 0304 	bic.w	r3, r3, #4
 8005256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	689b      	ldr	r3, [r3, #8]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d016      	beq.n	8005290 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005262:	f7fe fa4d 	bl	8003700 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005268:	e00a      	b.n	8005280 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800526a:	f7fe fa49 	bl	8003700 <HAL_GetTick>
 800526e:	4602      	mov	r2, r0
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	1ad3      	subs	r3, r2, r3
 8005274:	f241 3288 	movw	r2, #5000	; 0x1388
 8005278:	4293      	cmp	r3, r2
 800527a:	d901      	bls.n	8005280 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800527c:	2303      	movs	r3, #3
 800527e:	e12b      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <HAL_RCC_OscConfig+0x578>)
 8005282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d0ed      	beq.n	800526a <HAL_RCC_OscConfig+0x532>
 800528e:	e01a      	b.n	80052c6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fe fa36 	bl	8003700 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005296:	e00f      	b.n	80052b8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005298:	f7fe fa32 	bl	8003700 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d906      	bls.n	80052b8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e114      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
 80052ae:	bf00      	nop
 80052b0:	40021000 	.word	0x40021000
 80052b4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052b8:	4b89      	ldr	r3, [pc, #548]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80052ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d1e8      	bne.n	8005298 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052c6:	7ffb      	ldrb	r3, [r7, #31]
 80052c8:	2b01      	cmp	r3, #1
 80052ca:	d105      	bne.n	80052d8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052cc:	4b84      	ldr	r3, [pc, #528]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80052ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80052d0:	4a83      	ldr	r2, [pc, #524]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80052d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052d6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052dc:	2b00      	cmp	r3, #0
 80052de:	f000 80fa 	beq.w	80054d6 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052e6:	2b02      	cmp	r3, #2
 80052e8:	f040 80d0 	bne.w	800548c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052ec:	4b7c      	ldr	r3, [pc, #496]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f003 0203 	and.w	r2, r3, #3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052fc:	429a      	cmp	r2, r3
 80052fe:	d130      	bne.n	8005362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530a:	3b01      	subs	r3, #1
 800530c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800530e:	429a      	cmp	r2, r3
 8005310:	d127      	bne.n	8005362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d11f      	bne.n	8005362 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800532c:	2a07      	cmp	r2, #7
 800532e:	bf14      	ite	ne
 8005330:	2201      	movne	r2, #1
 8005332:	2200      	moveq	r2, #0
 8005334:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005336:	4293      	cmp	r3, r2
 8005338:	d113      	bne.n	8005362 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005344:	085b      	lsrs	r3, r3, #1
 8005346:	3b01      	subs	r3, #1
 8005348:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d109      	bne.n	8005362 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005358:	085b      	lsrs	r3, r3, #1
 800535a:	3b01      	subs	r3, #1
 800535c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800535e:	429a      	cmp	r2, r3
 8005360:	d06e      	beq.n	8005440 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	2b0c      	cmp	r3, #12
 8005366:	d069      	beq.n	800543c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005368:	4b5d      	ldr	r3, [pc, #372]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d105      	bne.n	8005380 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005374:	4b5a      	ldr	r3, [pc, #360]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0a9      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005384:	4b56      	ldr	r3, [pc, #344]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a55      	ldr	r2, [pc, #340]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 800538a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800538e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005390:	f7fe f9b6 	bl	8003700 <HAL_GetTick>
 8005394:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005396:	e008      	b.n	80053aa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005398:	f7fe f9b2 	bl	8003700 <HAL_GetTick>
 800539c:	4602      	mov	r2, r0
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d901      	bls.n	80053aa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80053a6:	2303      	movs	r3, #3
 80053a8:	e096      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053aa:	4b4d      	ldr	r3, [pc, #308]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1f0      	bne.n	8005398 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053b6:	4b4a      	ldr	r3, [pc, #296]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80053b8:	68da      	ldr	r2, [r3, #12]
 80053ba:	4b4a      	ldr	r3, [pc, #296]	; (80054e4 <HAL_RCC_OscConfig+0x7ac>)
 80053bc:	4013      	ands	r3, r2
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80053c6:	3a01      	subs	r2, #1
 80053c8:	0112      	lsls	r2, r2, #4
 80053ca:	4311      	orrs	r1, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80053d0:	0212      	lsls	r2, r2, #8
 80053d2:	4311      	orrs	r1, r2
 80053d4:	687a      	ldr	r2, [r7, #4]
 80053d6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80053d8:	0852      	lsrs	r2, r2, #1
 80053da:	3a01      	subs	r2, #1
 80053dc:	0552      	lsls	r2, r2, #21
 80053de:	4311      	orrs	r1, r2
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053e4:	0852      	lsrs	r2, r2, #1
 80053e6:	3a01      	subs	r2, #1
 80053e8:	0652      	lsls	r2, r2, #25
 80053ea:	4311      	orrs	r1, r2
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053f0:	0912      	lsrs	r2, r2, #4
 80053f2:	0452      	lsls	r2, r2, #17
 80053f4:	430a      	orrs	r2, r1
 80053f6:	493a      	ldr	r1, [pc, #232]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053fc:	4b38      	ldr	r3, [pc, #224]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a37      	ldr	r2, [pc, #220]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005406:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005408:	4b35      	ldr	r3, [pc, #212]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	4a34      	ldr	r2, [pc, #208]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 800540e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005412:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005414:	f7fe f974 	bl	8003700 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800541c:	f7fe f970 	bl	8003700 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e054      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800542e:	4b2c      	ldr	r3, [pc, #176]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d0f0      	beq.n	800541c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800543a:	e04c      	b.n	80054d6 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e04b      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005440:	4b27      	ldr	r3, [pc, #156]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d144      	bne.n	80054d6 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800544c:	4b24      	ldr	r3, [pc, #144]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a23      	ldr	r2, [pc, #140]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005452:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005456:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005458:	4b21      	ldr	r3, [pc, #132]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a20      	ldr	r2, [pc, #128]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 800545e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005462:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005464:	f7fe f94c 	bl	8003700 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546c:	f7fe f948 	bl	8003700 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e02c      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800547e:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x734>
 800548a:	e024      	b.n	80054d6 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	2b0c      	cmp	r3, #12
 8005490:	d01f      	beq.n	80054d2 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005492:	4b13      	ldr	r3, [pc, #76]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a12      	ldr	r2, [pc, #72]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 8005498:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800549c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549e:	f7fe f92f 	bl	8003700 <HAL_GetTick>
 80054a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054a4:	e008      	b.n	80054b8 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054a6:	f7fe f92b 	bl	8003700 <HAL_GetTick>
 80054aa:	4602      	mov	r2, r0
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	1ad3      	subs	r3, r2, r3
 80054b0:	2b02      	cmp	r3, #2
 80054b2:	d901      	bls.n	80054b8 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80054b4:	2303      	movs	r3, #3
 80054b6:	e00f      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80054b8:	4b09      	ldr	r3, [pc, #36]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1f0      	bne.n	80054a6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	4905      	ldr	r1, [pc, #20]	; (80054e0 <HAL_RCC_OscConfig+0x7a8>)
 80054ca:	4b07      	ldr	r3, [pc, #28]	; (80054e8 <HAL_RCC_OscConfig+0x7b0>)
 80054cc:	4013      	ands	r3, r2
 80054ce:	60cb      	str	r3, [r1, #12]
 80054d0:	e001      	b.n	80054d6 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e000      	b.n	80054d8 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	3720      	adds	r7, #32
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd80      	pop	{r7, pc}
 80054e0:	40021000 	.word	0x40021000
 80054e4:	f99d808c 	.word	0xf99d808c
 80054e8:	feeefffc 	.word	0xfeeefffc

080054ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b084      	sub	sp, #16
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	e0e7      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005500:	4b75      	ldr	r3, [pc, #468]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 0307 	and.w	r3, r3, #7
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	429a      	cmp	r2, r3
 800550c:	d910      	bls.n	8005530 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800550e:	4b72      	ldr	r3, [pc, #456]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 0207 	bic.w	r2, r3, #7
 8005516:	4970      	ldr	r1, [pc, #448]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800551e:	4b6e      	ldr	r3, [pc, #440]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0307 	and.w	r3, r3, #7
 8005526:	683a      	ldr	r2, [r7, #0]
 8005528:	429a      	cmp	r2, r3
 800552a:	d001      	beq.n	8005530 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	e0cf      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 0302 	and.w	r3, r3, #2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d010      	beq.n	800555e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	689a      	ldr	r2, [r3, #8]
 8005540:	4b66      	ldr	r3, [pc, #408]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005548:	429a      	cmp	r2, r3
 800554a:	d908      	bls.n	800555e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800554c:	4b63      	ldr	r3, [pc, #396]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	4960      	ldr	r1, [pc, #384]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d04c      	beq.n	8005604 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b03      	cmp	r3, #3
 8005570:	d107      	bne.n	8005582 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005572:	4b5a      	ldr	r3, [pc, #360]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d121      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e0a6      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d107      	bne.n	800559a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800558a:	4b54      	ldr	r3, [pc, #336]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d115      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e09a      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d107      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80055a2:	4b4e      	ldr	r3, [pc, #312]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d109      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e08e      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055b2:	4b4a      	ldr	r3, [pc, #296]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e086      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055c2:	4b46      	ldr	r3, [pc, #280]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f023 0203 	bic.w	r2, r3, #3
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	4943      	ldr	r1, [pc, #268]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 80055d0:	4313      	orrs	r3, r2
 80055d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055d4:	f7fe f894 	bl	8003700 <HAL_GetTick>
 80055d8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055da:	e00a      	b.n	80055f2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055dc:	f7fe f890 	bl	8003700 <HAL_GetTick>
 80055e0:	4602      	mov	r2, r0
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	1ad3      	subs	r3, r2, r3
 80055e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e06e      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055f2:	4b3a      	ldr	r3, [pc, #232]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	f003 020c 	and.w	r2, r3, #12
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	429a      	cmp	r2, r3
 8005602:	d1eb      	bne.n	80055dc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800561c:	429a      	cmp	r2, r3
 800561e:	d208      	bcs.n	8005632 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b2e      	ldr	r3, [pc, #184]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	492b      	ldr	r1, [pc, #172]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005632:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d210      	bcs.n	8005662 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005640:	4b25      	ldr	r3, [pc, #148]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f023 0207 	bic.w	r2, r3, #7
 8005648:	4923      	ldr	r1, [pc, #140]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005650:	4b21      	ldr	r3, [pc, #132]	; (80056d8 <HAL_RCC_ClockConfig+0x1ec>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0307 	and.w	r3, r3, #7
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d001      	beq.n	8005662 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e036      	b.n	80056d0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800566e:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	4918      	ldr	r1, [pc, #96]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 800567c:	4313      	orrs	r3, r2
 800567e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800568c:	4b13      	ldr	r3, [pc, #76]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4910      	ldr	r1, [pc, #64]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056a0:	f000 f824 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b0d      	ldr	r3, [pc, #52]	; (80056dc <HAL_RCC_ClockConfig+0x1f0>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	490b      	ldr	r1, [pc, #44]	; (80056e0 <HAL_RCC_ClockConfig+0x1f4>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	4a09      	ldr	r2, [pc, #36]	; (80056e4 <HAL_RCC_ClockConfig+0x1f8>)
 80056be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <HAL_RCC_ClockConfig+0x1fc>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fd ffcb 	bl	8003660 <HAL_InitTick>
 80056ca:	4603      	mov	r3, r0
 80056cc:	72fb      	strb	r3, [r7, #11]

  return status;
 80056ce:	7afb      	ldrb	r3, [r7, #11]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3710      	adds	r7, #16
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40022000 	.word	0x40022000
 80056dc:	40021000 	.word	0x40021000
 80056e0:	0800b250 	.word	0x0800b250
 80056e4:	2000012c 	.word	0x2000012c
 80056e8:	200001f4 	.word	0x200001f4

080056ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b089      	sub	sp, #36	; 0x24
 80056f0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	2300      	movs	r3, #0
 80056f8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056fa:	4b3e      	ldr	r3, [pc, #248]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	f003 030c 	and.w	r3, r3, #12
 8005702:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005704:	4b3b      	ldr	r3, [pc, #236]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	f003 0303 	and.w	r3, r3, #3
 800570c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d005      	beq.n	8005720 <HAL_RCC_GetSysClockFreq+0x34>
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	2b0c      	cmp	r3, #12
 8005718:	d121      	bne.n	800575e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d11e      	bne.n	800575e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005720:	4b34      	ldr	r3, [pc, #208]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f003 0308 	and.w	r3, r3, #8
 8005728:	2b00      	cmp	r3, #0
 800572a:	d107      	bne.n	800573c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800572c:	4b31      	ldr	r3, [pc, #196]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800572e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005732:	0a1b      	lsrs	r3, r3, #8
 8005734:	f003 030f 	and.w	r3, r3, #15
 8005738:	61fb      	str	r3, [r7, #28]
 800573a:	e005      	b.n	8005748 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800573c:	4b2d      	ldr	r3, [pc, #180]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	091b      	lsrs	r3, r3, #4
 8005742:	f003 030f 	and.w	r3, r3, #15
 8005746:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005748:	4a2b      	ldr	r2, [pc, #172]	; (80057f8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800574a:	69fb      	ldr	r3, [r7, #28]
 800574c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005750:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d10d      	bne.n	8005774 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800575c:	e00a      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	2b04      	cmp	r3, #4
 8005762:	d102      	bne.n	800576a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005764:	4b25      	ldr	r3, [pc, #148]	; (80057fc <HAL_RCC_GetSysClockFreq+0x110>)
 8005766:	61bb      	str	r3, [r7, #24]
 8005768:	e004      	b.n	8005774 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d101      	bne.n	8005774 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005770:	4b23      	ldr	r3, [pc, #140]	; (8005800 <HAL_RCC_GetSysClockFreq+0x114>)
 8005772:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	2b0c      	cmp	r3, #12
 8005778:	d134      	bne.n	80057e4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800577a:	4b1e      	ldr	r3, [pc, #120]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2b02      	cmp	r3, #2
 8005788:	d003      	beq.n	8005792 <HAL_RCC_GetSysClockFreq+0xa6>
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d003      	beq.n	8005798 <HAL_RCC_GetSysClockFreq+0xac>
 8005790:	e005      	b.n	800579e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005792:	4b1a      	ldr	r3, [pc, #104]	; (80057fc <HAL_RCC_GetSysClockFreq+0x110>)
 8005794:	617b      	str	r3, [r7, #20]
      break;
 8005796:	e005      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005798:	4b19      	ldr	r3, [pc, #100]	; (8005800 <HAL_RCC_GetSysClockFreq+0x114>)
 800579a:	617b      	str	r3, [r7, #20]
      break;
 800579c:	e002      	b.n	80057a4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	617b      	str	r3, [r7, #20]
      break;
 80057a2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057a4:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80057a6:	68db      	ldr	r3, [r3, #12]
 80057a8:	091b      	lsrs	r3, r3, #4
 80057aa:	f003 0307 	and.w	r3, r3, #7
 80057ae:	3301      	adds	r3, #1
 80057b0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	0a1b      	lsrs	r3, r3, #8
 80057b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	fb02 f203 	mul.w	r2, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ca:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <HAL_RCC_GetSysClockFreq+0x108>)
 80057cc:	68db      	ldr	r3, [r3, #12]
 80057ce:	0e5b      	lsrs	r3, r3, #25
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	3301      	adds	r3, #1
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057da:	697a      	ldr	r2, [r7, #20]
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057e4:	69bb      	ldr	r3, [r7, #24]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3724      	adds	r7, #36	; 0x24
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	40021000 	.word	0x40021000
 80057f8:	0800b268 	.word	0x0800b268
 80057fc:	00f42400 	.word	0x00f42400
 8005800:	007a1200 	.word	0x007a1200

08005804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005808:	4b03      	ldr	r3, [pc, #12]	; (8005818 <HAL_RCC_GetHCLKFreq+0x14>)
 800580a:	681b      	ldr	r3, [r3, #0]
}
 800580c:	4618      	mov	r0, r3
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr
 8005816:	bf00      	nop
 8005818:	2000012c 	.word	0x2000012c

0800581c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005820:	f7ff fff0 	bl	8005804 <HAL_RCC_GetHCLKFreq>
 8005824:	4602      	mov	r2, r0
 8005826:	4b06      	ldr	r3, [pc, #24]	; (8005840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005828:	689b      	ldr	r3, [r3, #8]
 800582a:	0a1b      	lsrs	r3, r3, #8
 800582c:	f003 0307 	and.w	r3, r3, #7
 8005830:	4904      	ldr	r1, [pc, #16]	; (8005844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005832:	5ccb      	ldrb	r3, [r1, r3]
 8005834:	f003 031f 	and.w	r3, r3, #31
 8005838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800583c:	4618      	mov	r0, r3
 800583e:	bd80      	pop	{r7, pc}
 8005840:	40021000 	.word	0x40021000
 8005844:	0800b260 	.word	0x0800b260

08005848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800584c:	f7ff ffda 	bl	8005804 <HAL_RCC_GetHCLKFreq>
 8005850:	4602      	mov	r2, r0
 8005852:	4b06      	ldr	r3, [pc, #24]	; (800586c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	0adb      	lsrs	r3, r3, #11
 8005858:	f003 0307 	and.w	r3, r3, #7
 800585c:	4904      	ldr	r1, [pc, #16]	; (8005870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800585e:	5ccb      	ldrb	r3, [r1, r3]
 8005860:	f003 031f 	and.w	r3, r3, #31
 8005864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005868:	4618      	mov	r0, r3
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40021000 	.word	0x40021000
 8005870:	0800b260 	.word	0x0800b260

08005874 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005880:	4b2a      	ldr	r3, [pc, #168]	; (800592c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800588c:	f7ff f9f0 	bl	8004c70 <HAL_PWREx_GetVoltageRange>
 8005890:	6178      	str	r0, [r7, #20]
 8005892:	e014      	b.n	80058be <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005894:	4b25      	ldr	r3, [pc, #148]	; (800592c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005898:	4a24      	ldr	r2, [pc, #144]	; (800592c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800589a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800589e:	6593      	str	r3, [r2, #88]	; 0x58
 80058a0:	4b22      	ldr	r3, [pc, #136]	; (800592c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058ac:	f7ff f9e0 	bl	8004c70 <HAL_PWREx_GetVoltageRange>
 80058b0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058b2:	4b1e      	ldr	r3, [pc, #120]	; (800592c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80058b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058bc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058c4:	d10b      	bne.n	80058de <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b80      	cmp	r3, #128	; 0x80
 80058ca:	d919      	bls.n	8005900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2ba0      	cmp	r3, #160	; 0xa0
 80058d0:	d902      	bls.n	80058d8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058d2:	2302      	movs	r3, #2
 80058d4:	613b      	str	r3, [r7, #16]
 80058d6:	e013      	b.n	8005900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058d8:	2301      	movs	r3, #1
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	e010      	b.n	8005900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b80      	cmp	r3, #128	; 0x80
 80058e2:	d902      	bls.n	80058ea <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80058e4:	2303      	movs	r3, #3
 80058e6:	613b      	str	r3, [r7, #16]
 80058e8:	e00a      	b.n	8005900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b80      	cmp	r3, #128	; 0x80
 80058ee:	d102      	bne.n	80058f6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058f0:	2302      	movs	r3, #2
 80058f2:	613b      	str	r3, [r7, #16]
 80058f4:	e004      	b.n	8005900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b70      	cmp	r3, #112	; 0x70
 80058fa:	d101      	bne.n	8005900 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058fc:	2301      	movs	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005900:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f023 0207 	bic.w	r2, r3, #7
 8005908:	4909      	ldr	r1, [pc, #36]	; (8005930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4313      	orrs	r3, r2
 800590e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	429a      	cmp	r2, r3
 800591c:	d001      	beq.n	8005922 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e000      	b.n	8005924 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	40021000 	.word	0x40021000
 8005930:	40022000 	.word	0x40022000

08005934 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b086      	sub	sp, #24
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800593c:	2300      	movs	r3, #0
 800593e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005940:	2300      	movs	r3, #0
 8005942:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594c:	2b00      	cmp	r3, #0
 800594e:	d041      	beq.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005954:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005958:	d02a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800595a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800595e:	d824      	bhi.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005960:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005964:	d008      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005966:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800596a:	d81e      	bhi.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x76>
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005970:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005974:	d010      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005976:	e018      	b.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005978:	4b86      	ldr	r3, [pc, #536]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597a:	68db      	ldr	r3, [r3, #12]
 800597c:	4a85      	ldr	r2, [pc, #532]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800597e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005982:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005984:	e015      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	3304      	adds	r3, #4
 800598a:	2100      	movs	r1, #0
 800598c:	4618      	mov	r0, r3
 800598e:	f000 fabb 	bl	8005f08 <RCCEx_PLLSAI1_Config>
 8005992:	4603      	mov	r3, r0
 8005994:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005996:	e00c      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	3320      	adds	r3, #32
 800599c:	2100      	movs	r1, #0
 800599e:	4618      	mov	r0, r3
 80059a0:	f000 fba6 	bl	80060f0 <RCCEx_PLLSAI2_Config>
 80059a4:	4603      	mov	r3, r0
 80059a6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	74fb      	strb	r3, [r7, #19]
      break;
 80059ae:	e000      	b.n	80059b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80059b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80059b2:	7cfb      	ldrb	r3, [r7, #19]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d10b      	bne.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059b8:	4b76      	ldr	r3, [pc, #472]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059c6:	4973      	ldr	r1, [pc, #460]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80059ce:	e001      	b.n	80059d4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059d0:	7cfb      	ldrb	r3, [r7, #19]
 80059d2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d041      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80059e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059e8:	d02a      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80059ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80059ee:	d824      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059f4:	d008      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80059fa:	d81e      	bhi.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005a00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a04:	d010      	beq.n	8005a28 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a06:	e018      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a08:	4b62      	ldr	r3, [pc, #392]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	4a61      	ldr	r2, [pc, #388]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a12:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a14:	e015      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3304      	adds	r3, #4
 8005a1a:	2100      	movs	r1, #0
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f000 fa73 	bl	8005f08 <RCCEx_PLLSAI1_Config>
 8005a22:	4603      	mov	r3, r0
 8005a24:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a26:	e00c      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	3320      	adds	r3, #32
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f000 fb5e 	bl	80060f0 <RCCEx_PLLSAI2_Config>
 8005a34:	4603      	mov	r3, r0
 8005a36:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005a38:	e003      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	74fb      	strb	r3, [r7, #19]
      break;
 8005a3e:	e000      	b.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005a40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a42:	7cfb      	ldrb	r3, [r7, #19]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d10b      	bne.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005a48:	4b52      	ldr	r3, [pc, #328]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a56:	494f      	ldr	r1, [pc, #316]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005a5e:	e001      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 80a0 	beq.w	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a72:	2300      	movs	r3, #0
 8005a74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a76:	4b47      	ldr	r3, [pc, #284]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005a82:	2301      	movs	r3, #1
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005a86:	2300      	movs	r3, #0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00d      	beq.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a8c:	4b41      	ldr	r3, [pc, #260]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a90:	4a40      	ldr	r2, [pc, #256]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a96:	6593      	str	r3, [r2, #88]	; 0x58
 8005a98:	4b3e      	ldr	r3, [pc, #248]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa0:	60bb      	str	r3, [r7, #8]
 8005aa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005aa8:	4b3b      	ldr	r3, [pc, #236]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a3a      	ldr	r2, [pc, #232]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ab2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ab4:	f7fd fe24 	bl	8003700 <HAL_GetTick>
 8005ab8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005aba:	e009      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005abc:	f7fd fe20 	bl	8003700 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d902      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	74fb      	strb	r3, [r7, #19]
        break;
 8005ace:	e005      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005ad0:	4b31      	ldr	r3, [pc, #196]	; (8005b98 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0ef      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005adc:	7cfb      	ldrb	r3, [r7, #19]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d15c      	bne.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005ae2:	4b2c      	ldr	r3, [pc, #176]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ae8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d01f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005afa:	697a      	ldr	r2, [r7, #20]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d019      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005b00:	4b24      	ldr	r3, [pc, #144]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b0a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005b0c:	4b21      	ldr	r3, [pc, #132]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b12:	4a20      	ldr	r2, [pc, #128]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005b1c:	4b1d      	ldr	r3, [pc, #116]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b22:	4a1c      	ldr	r2, [pc, #112]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005b2c:	4a19      	ldr	r2, [pc, #100]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b2e:	697b      	ldr	r3, [r7, #20]
 8005b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	f003 0301 	and.w	r3, r3, #1
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d016      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b3e:	f7fd fddf 	bl	8003700 <HAL_GetTick>
 8005b42:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b44:	e00b      	b.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b46:	f7fd fddb 	bl	8003700 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d902      	bls.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	74fb      	strb	r3, [r7, #19]
            break;
 8005b5c:	e006      	b.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005b5e:	4b0d      	ldr	r3, [pc, #52]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d0ec      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005b6c:	7cfb      	ldrb	r3, [r7, #19]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10c      	bne.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b72:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b82:	4904      	ldr	r1, [pc, #16]	; (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005b8a:	e009      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005b8c:	7cfb      	ldrb	r3, [r7, #19]
 8005b8e:	74bb      	strb	r3, [r7, #18]
 8005b90:	e006      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005b92:	bf00      	nop
 8005b94:	40021000 	.word	0x40021000
 8005b98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b9c:	7cfb      	ldrb	r3, [r7, #19]
 8005b9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ba0:	7c7b      	ldrb	r3, [r7, #17]
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d105      	bne.n	8005bb2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ba6:	4b9e      	ldr	r3, [pc, #632]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005baa:	4a9d      	ldr	r2, [pc, #628]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 0301 	and.w	r3, r3, #1
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d00a      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005bbe:	4b98      	ldr	r3, [pc, #608]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc4:	f023 0203 	bic.w	r2, r3, #3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bcc:	4994      	ldr	r1, [pc, #592]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d00a      	beq.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005be0:	4b8f      	ldr	r3, [pc, #572]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f023 020c 	bic.w	r2, r3, #12
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bee:	498c      	ldr	r1, [pc, #560]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0304 	and.w	r3, r3, #4
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d00a      	beq.n	8005c18 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005c02:	4b87      	ldr	r3, [pc, #540]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c10:	4983      	ldr	r1, [pc, #524]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f003 0308 	and.w	r3, r3, #8
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00a      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005c24:	4b7e      	ldr	r3, [pc, #504]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c32:	497b      	ldr	r1, [pc, #492]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f003 0310 	and.w	r3, r3, #16
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005c46:	4b76      	ldr	r3, [pc, #472]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c54:	4972      	ldr	r1, [pc, #456]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c56:	4313      	orrs	r3, r2
 8005c58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d00a      	beq.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005c68:	4b6d      	ldr	r3, [pc, #436]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c76:	496a      	ldr	r1, [pc, #424]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c8a:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c98:	4961      	ldr	r1, [pc, #388]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005cac:	4b5c      	ldr	r3, [pc, #368]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cba:	4959      	ldr	r1, [pc, #356]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005cce:	4b54      	ldr	r3, [pc, #336]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cdc:	4950      	ldr	r1, [pc, #320]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005cf0:	4b4b      	ldr	r3, [pc, #300]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cf6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cfe:	4948      	ldr	r1, [pc, #288]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005d12:	4b43      	ldr	r3, [pc, #268]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d20:	493f      	ldr	r1, [pc, #252]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d028      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005d34:	4b3a      	ldr	r3, [pc, #232]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d42:	4937      	ldr	r1, [pc, #220]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d52:	d106      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d54:	4b32      	ldr	r3, [pc, #200]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	4a31      	ldr	r2, [pc, #196]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d5e:	60d3      	str	r3, [r2, #12]
 8005d60:	e011      	b.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d6a:	d10c      	bne.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	2101      	movs	r1, #1
 8005d72:	4618      	mov	r0, r3
 8005d74:	f000 f8c8 	bl	8005f08 <RCCEx_PLLSAI1_Config>
 8005d78:	4603      	mov	r3, r0
 8005d7a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005d7c:	7cfb      	ldrb	r3, [r7, #19]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005d82:	7cfb      	ldrb	r3, [r7, #19]
 8005d84:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d028      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005d92:	4b23      	ldr	r3, [pc, #140]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da0:	491f      	ldr	r1, [pc, #124]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005db0:	d106      	bne.n	8005dc0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005db2:	4b1b      	ldr	r3, [pc, #108]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	4a1a      	ldr	r2, [pc, #104]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005db8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dbc:	60d3      	str	r3, [r2, #12]
 8005dbe:	e011      	b.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005dc8:	d10c      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	3304      	adds	r3, #4
 8005dce:	2101      	movs	r1, #1
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	f000 f899 	bl	8005f08 <RCCEx_PLLSAI1_Config>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005dda:	7cfb      	ldrb	r3, [r7, #19]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005de0:	7cfb      	ldrb	r3, [r7, #19]
 8005de2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d02b      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005df0:	4b0b      	ldr	r3, [pc, #44]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005df2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005df6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005dfe:	4908      	ldr	r1, [pc, #32]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e00:	4313      	orrs	r3, r2
 8005e02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005e0e:	d109      	bne.n	8005e24 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e10:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	4a02      	ldr	r2, [pc, #8]	; (8005e20 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e1a:	60d3      	str	r3, [r2, #12]
 8005e1c:	e014      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005e1e:	bf00      	nop
 8005e20:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e28:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005e2c:	d10c      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	2101      	movs	r1, #1
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 f867 	bl	8005f08 <RCCEx_PLLSAI1_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e3e:	7cfb      	ldrb	r3, [r7, #19]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d001      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005e44:	7cfb      	ldrb	r3, [r7, #19]
 8005e46:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d02f      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005e54:	4b2b      	ldr	r3, [pc, #172]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e5a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e62:	4928      	ldr	r1, [pc, #160]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005e64:	4313      	orrs	r3, r2
 8005e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e72:	d10d      	bne.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	3304      	adds	r3, #4
 8005e78:	2102      	movs	r1, #2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f000 f844 	bl	8005f08 <RCCEx_PLLSAI1_Config>
 8005e80:	4603      	mov	r3, r0
 8005e82:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005e84:	7cfb      	ldrb	r3, [r7, #19]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d014      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005e8a:	7cfb      	ldrb	r3, [r7, #19]
 8005e8c:	74bb      	strb	r3, [r7, #18]
 8005e8e:	e011      	b.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e98:	d10c      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3320      	adds	r3, #32
 8005e9e:	2102      	movs	r1, #2
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 f925 	bl	80060f0 <RCCEx_PLLSAI2_Config>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005eaa:	7cfb      	ldrb	r3, [r7, #19]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d001      	beq.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005eb0:	7cfb      	ldrb	r3, [r7, #19]
 8005eb2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00a      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005ec0:	4b10      	ldr	r3, [pc, #64]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ece:	490d      	ldr	r1, [pc, #52]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00b      	beq.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ee2:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ef2:	4904      	ldr	r1, [pc, #16]	; (8005f04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005efa:	7cbb      	ldrb	r3, [r7, #18]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	40021000 	.word	0x40021000

08005f08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b084      	sub	sp, #16
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f16:	4b75      	ldr	r3, [pc, #468]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f18:	68db      	ldr	r3, [r3, #12]
 8005f1a:	f003 0303 	and.w	r3, r3, #3
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d018      	beq.n	8005f54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005f22:	4b72      	ldr	r3, [pc, #456]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	f003 0203 	and.w	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d10d      	bne.n	8005f4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
       ||
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d009      	beq.n	8005f4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005f3a:	4b6c      	ldr	r3, [pc, #432]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	091b      	lsrs	r3, r3, #4
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	1c5a      	adds	r2, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
       ||
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d047      	beq.n	8005fde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f4e:	2301      	movs	r3, #1
 8005f50:	73fb      	strb	r3, [r7, #15]
 8005f52:	e044      	b.n	8005fde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d018      	beq.n	8005f8e <RCCEx_PLLSAI1_Config+0x86>
 8005f5c:	2b03      	cmp	r3, #3
 8005f5e:	d825      	bhi.n	8005fac <RCCEx_PLLSAI1_Config+0xa4>
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d002      	beq.n	8005f6a <RCCEx_PLLSAI1_Config+0x62>
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d009      	beq.n	8005f7c <RCCEx_PLLSAI1_Config+0x74>
 8005f68:	e020      	b.n	8005fac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f6a:	4b60      	ldr	r3, [pc, #384]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f003 0302 	and.w	r3, r3, #2
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11d      	bne.n	8005fb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f7a:	e01a      	b.n	8005fb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f7c:	4b5b      	ldr	r3, [pc, #364]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d116      	bne.n	8005fb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f8c:	e013      	b.n	8005fb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f8e:	4b57      	ldr	r3, [pc, #348]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10f      	bne.n	8005fba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f9a:	4b54      	ldr	r3, [pc, #336]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d109      	bne.n	8005fba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fa6:	2301      	movs	r3, #1
 8005fa8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005faa:	e006      	b.n	8005fba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
      break;
 8005fb0:	e004      	b.n	8005fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e002      	b.n	8005fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fb6:	bf00      	nop
 8005fb8:	e000      	b.n	8005fbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005fba:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d10d      	bne.n	8005fde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fc2:	4b4a      	ldr	r3, [pc, #296]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6819      	ldr	r1, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	011b      	lsls	r3, r3, #4
 8005fd6:	430b      	orrs	r3, r1
 8005fd8:	4944      	ldr	r1, [pc, #272]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fde:	7bfb      	ldrb	r3, [r7, #15]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d17d      	bne.n	80060e0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005fe4:	4b41      	ldr	r3, [pc, #260]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a40      	ldr	r2, [pc, #256]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8005fea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005fee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ff0:	f7fd fb86 	bl	8003700 <HAL_GetTick>
 8005ff4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005ff6:	e009      	b.n	800600c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ff8:	f7fd fb82 	bl	8003700 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	2b02      	cmp	r3, #2
 8006004:	d902      	bls.n	800600c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006006:	2303      	movs	r3, #3
 8006008:	73fb      	strb	r3, [r7, #15]
        break;
 800600a:	e005      	b.n	8006018 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800600c:	4b37      	ldr	r3, [pc, #220]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1ef      	bne.n	8005ff8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d160      	bne.n	80060e0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d111      	bne.n	8006048 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006024:	4b31      	ldr	r3, [pc, #196]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800602c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	6892      	ldr	r2, [r2, #8]
 8006034:	0211      	lsls	r1, r2, #8
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	68d2      	ldr	r2, [r2, #12]
 800603a:	0912      	lsrs	r2, r2, #4
 800603c:	0452      	lsls	r2, r2, #17
 800603e:	430a      	orrs	r2, r1
 8006040:	492a      	ldr	r1, [pc, #168]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006042:	4313      	orrs	r3, r2
 8006044:	610b      	str	r3, [r1, #16]
 8006046:	e027      	b.n	8006098 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	2b01      	cmp	r3, #1
 800604c:	d112      	bne.n	8006074 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800604e:	4b27      	ldr	r3, [pc, #156]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006056:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	6892      	ldr	r2, [r2, #8]
 800605e:	0211      	lsls	r1, r2, #8
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	6912      	ldr	r2, [r2, #16]
 8006064:	0852      	lsrs	r2, r2, #1
 8006066:	3a01      	subs	r2, #1
 8006068:	0552      	lsls	r2, r2, #21
 800606a:	430a      	orrs	r2, r1
 800606c:	491f      	ldr	r1, [pc, #124]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
 8006072:	e011      	b.n	8006098 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006074:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800607c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6892      	ldr	r2, [r2, #8]
 8006084:	0211      	lsls	r1, r2, #8
 8006086:	687a      	ldr	r2, [r7, #4]
 8006088:	6952      	ldr	r2, [r2, #20]
 800608a:	0852      	lsrs	r2, r2, #1
 800608c:	3a01      	subs	r2, #1
 800608e:	0652      	lsls	r2, r2, #25
 8006090:	430a      	orrs	r2, r1
 8006092:	4916      	ldr	r1, [pc, #88]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 8006094:	4313      	orrs	r3, r2
 8006096:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006098:	4b14      	ldr	r3, [pc, #80]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a13      	ldr	r2, [pc, #76]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 800609e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80060a2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060a4:	f7fd fb2c 	bl	8003700 <HAL_GetTick>
 80060a8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060aa:	e009      	b.n	80060c0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80060ac:	f7fd fb28 	bl	8003700 <HAL_GetTick>
 80060b0:	4602      	mov	r2, r0
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	1ad3      	subs	r3, r2, r3
 80060b6:	2b02      	cmp	r3, #2
 80060b8:	d902      	bls.n	80060c0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80060ba:	2303      	movs	r3, #3
 80060bc:	73fb      	strb	r3, [r7, #15]
          break;
 80060be:	e005      	b.n	80060cc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80060c0:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0ef      	beq.n	80060ac <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d106      	bne.n	80060e0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80060d4:	691a      	ldr	r2, [r3, #16]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	4904      	ldr	r1, [pc, #16]	; (80060ec <RCCEx_PLLSAI1_Config+0x1e4>)
 80060dc:	4313      	orrs	r3, r2
 80060de:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	40021000 	.word	0x40021000

080060f0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060fa:	2300      	movs	r3, #0
 80060fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060fe:	4b6a      	ldr	r3, [pc, #424]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d018      	beq.n	800613c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800610a:	4b67      	ldr	r3, [pc, #412]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800610c:	68db      	ldr	r3, [r3, #12]
 800610e:	f003 0203 	and.w	r2, r3, #3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	429a      	cmp	r2, r3
 8006118:	d10d      	bne.n	8006136 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
       ||
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8006122:	4b61      	ldr	r3, [pc, #388]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	091b      	lsrs	r3, r3, #4
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
       ||
 8006132:	429a      	cmp	r2, r3
 8006134:	d047      	beq.n	80061c6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	73fb      	strb	r3, [r7, #15]
 800613a:	e044      	b.n	80061c6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b03      	cmp	r3, #3
 8006142:	d018      	beq.n	8006176 <RCCEx_PLLSAI2_Config+0x86>
 8006144:	2b03      	cmp	r3, #3
 8006146:	d825      	bhi.n	8006194 <RCCEx_PLLSAI2_Config+0xa4>
 8006148:	2b01      	cmp	r3, #1
 800614a:	d002      	beq.n	8006152 <RCCEx_PLLSAI2_Config+0x62>
 800614c:	2b02      	cmp	r3, #2
 800614e:	d009      	beq.n	8006164 <RCCEx_PLLSAI2_Config+0x74>
 8006150:	e020      	b.n	8006194 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006152:	4b55      	ldr	r3, [pc, #340]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f003 0302 	and.w	r3, r3, #2
 800615a:	2b00      	cmp	r3, #0
 800615c:	d11d      	bne.n	800619a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006162:	e01a      	b.n	800619a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006164:	4b50      	ldr	r3, [pc, #320]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800616c:	2b00      	cmp	r3, #0
 800616e:	d116      	bne.n	800619e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006174:	e013      	b.n	800619e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006176:	4b4c      	ldr	r3, [pc, #304]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10f      	bne.n	80061a2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006182:	4b49      	ldr	r3, [pc, #292]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006192:	e006      	b.n	80061a2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006194:	2301      	movs	r3, #1
 8006196:	73fb      	strb	r3, [r7, #15]
      break;
 8006198:	e004      	b.n	80061a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800619a:	bf00      	nop
 800619c:	e002      	b.n	80061a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800619e:	bf00      	nop
 80061a0:	e000      	b.n	80061a4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80061a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d10d      	bne.n	80061c6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80061aa:	4b3f      	ldr	r3, [pc, #252]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6819      	ldr	r1, [r3, #0]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	3b01      	subs	r3, #1
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	430b      	orrs	r3, r1
 80061c0:	4939      	ldr	r1, [pc, #228]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d167      	bne.n	800629c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80061cc:	4b36      	ldr	r3, [pc, #216]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	4a35      	ldr	r2, [pc, #212]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d8:	f7fd fa92 	bl	8003700 <HAL_GetTick>
 80061dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061de:	e009      	b.n	80061f4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80061e0:	f7fd fa8e 	bl	8003700 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68bb      	ldr	r3, [r7, #8]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d902      	bls.n	80061f4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	73fb      	strb	r3, [r7, #15]
        break;
 80061f2:	e005      	b.n	8006200 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80061f4:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ef      	bne.n	80061e0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006200:	7bfb      	ldrb	r3, [r7, #15]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d14a      	bne.n	800629c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d111      	bne.n	8006230 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800620c:	4b26      	ldr	r3, [pc, #152]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800620e:	695b      	ldr	r3, [r3, #20]
 8006210:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006214:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	6892      	ldr	r2, [r2, #8]
 800621c:	0211      	lsls	r1, r2, #8
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	68d2      	ldr	r2, [r2, #12]
 8006222:	0912      	lsrs	r2, r2, #4
 8006224:	0452      	lsls	r2, r2, #17
 8006226:	430a      	orrs	r2, r1
 8006228:	491f      	ldr	r1, [pc, #124]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800622a:	4313      	orrs	r3, r2
 800622c:	614b      	str	r3, [r1, #20]
 800622e:	e011      	b.n	8006254 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006230:	4b1d      	ldr	r3, [pc, #116]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006232:	695b      	ldr	r3, [r3, #20]
 8006234:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006238:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800623c:	687a      	ldr	r2, [r7, #4]
 800623e:	6892      	ldr	r2, [r2, #8]
 8006240:	0211      	lsls	r1, r2, #8
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6912      	ldr	r2, [r2, #16]
 8006246:	0852      	lsrs	r2, r2, #1
 8006248:	3a01      	subs	r2, #1
 800624a:	0652      	lsls	r2, r2, #25
 800624c:	430a      	orrs	r2, r1
 800624e:	4916      	ldr	r1, [pc, #88]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006250:	4313      	orrs	r3, r2
 8006252:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006254:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a13      	ldr	r2, [pc, #76]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800625a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800625e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006260:	f7fd fa4e 	bl	8003700 <HAL_GetTick>
 8006264:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006266:	e009      	b.n	800627c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006268:	f7fd fa4a 	bl	8003700 <HAL_GetTick>
 800626c:	4602      	mov	r2, r0
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	2b02      	cmp	r3, #2
 8006274:	d902      	bls.n	800627c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	73fb      	strb	r3, [r7, #15]
          break;
 800627a:	e005      	b.n	8006288 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0ef      	beq.n	8006268 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8006288:	7bfb      	ldrb	r3, [r7, #15]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d106      	bne.n	800629c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800628e:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006290:	695a      	ldr	r2, [r3, #20]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	4904      	ldr	r1, [pc, #16]	; (80062a8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8006298:	4313      	orrs	r3, r2
 800629a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800629c:	7bfb      	ldrb	r3, [r7, #15]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40021000 	.word	0x40021000

080062ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e049      	b.n	8006352 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d106      	bne.n	80062d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fb feda 	bl	800208c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2202      	movs	r2, #2
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	3304      	adds	r3, #4
 80062e8:	4619      	mov	r1, r3
 80062ea:	4610      	mov	r0, r2
 80062ec:	f000 fa56 	bl	800679c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006350:	2300      	movs	r3, #0
}
 8006352:	4618      	mov	r0, r3
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
	...

0800635c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800636a:	b2db      	uxtb	r3, r3
 800636c:	2b01      	cmp	r3, #1
 800636e:	d001      	beq.n	8006374 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e047      	b.n	8006404 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a23      	ldr	r2, [pc, #140]	; (8006410 <HAL_TIM_Base_Start+0xb4>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d01d      	beq.n	80063c2 <HAL_TIM_Base_Start+0x66>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800638e:	d018      	beq.n	80063c2 <HAL_TIM_Base_Start+0x66>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a1f      	ldr	r2, [pc, #124]	; (8006414 <HAL_TIM_Base_Start+0xb8>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d013      	beq.n	80063c2 <HAL_TIM_Base_Start+0x66>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a1e      	ldr	r2, [pc, #120]	; (8006418 <HAL_TIM_Base_Start+0xbc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d00e      	beq.n	80063c2 <HAL_TIM_Base_Start+0x66>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1c      	ldr	r2, [pc, #112]	; (800641c <HAL_TIM_Base_Start+0xc0>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d009      	beq.n	80063c2 <HAL_TIM_Base_Start+0x66>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1b      	ldr	r2, [pc, #108]	; (8006420 <HAL_TIM_Base_Start+0xc4>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d004      	beq.n	80063c2 <HAL_TIM_Base_Start+0x66>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a19      	ldr	r2, [pc, #100]	; (8006424 <HAL_TIM_Base_Start+0xc8>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d115      	bne.n	80063ee <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	4b17      	ldr	r3, [pc, #92]	; (8006428 <HAL_TIM_Base_Start+0xcc>)
 80063ca:	4013      	ands	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2b06      	cmp	r3, #6
 80063d2:	d015      	beq.n	8006400 <HAL_TIM_Base_Start+0xa4>
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063da:	d011      	beq.n	8006400 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f042 0201 	orr.w	r2, r2, #1
 80063ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ec:	e008      	b.n	8006400 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f042 0201 	orr.w	r2, r2, #1
 80063fc:	601a      	str	r2, [r3, #0]
 80063fe:	e000      	b.n	8006402 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006400:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006402:	2300      	movs	r3, #0
}
 8006404:	4618      	mov	r0, r3
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	40012c00 	.word	0x40012c00
 8006414:	40000400 	.word	0x40000400
 8006418:	40000800 	.word	0x40000800
 800641c:	40000c00 	.word	0x40000c00
 8006420:	40013400 	.word	0x40013400
 8006424:	40014000 	.word	0x40014000
 8006428:	00010007 	.word	0x00010007

0800642c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800642c:	b480      	push	{r7}
 800642e:	b085      	sub	sp, #20
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	d001      	beq.n	8006444 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006440:	2301      	movs	r3, #1
 8006442:	e04f      	b.n	80064e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2202      	movs	r2, #2
 8006448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68da      	ldr	r2, [r3, #12]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f042 0201 	orr.w	r2, r2, #1
 800645a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a23      	ldr	r2, [pc, #140]	; (80064f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d01d      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646e:	d018      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a1f      	ldr	r2, [pc, #124]	; (80064f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d013      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a1e      	ldr	r2, [pc, #120]	; (80064f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d00e      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a1c      	ldr	r2, [pc, #112]	; (80064fc <HAL_TIM_Base_Start_IT+0xd0>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d009      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1b      	ldr	r2, [pc, #108]	; (8006500 <HAL_TIM_Base_Start_IT+0xd4>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d004      	beq.n	80064a2 <HAL_TIM_Base_Start_IT+0x76>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	4a19      	ldr	r2, [pc, #100]	; (8006504 <HAL_TIM_Base_Start_IT+0xd8>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d115      	bne.n	80064ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	689a      	ldr	r2, [r3, #8]
 80064a8:	4b17      	ldr	r3, [pc, #92]	; (8006508 <HAL_TIM_Base_Start_IT+0xdc>)
 80064aa:	4013      	ands	r3, r2
 80064ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2b06      	cmp	r3, #6
 80064b2:	d015      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064ba:	d011      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	681a      	ldr	r2, [r3, #0]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f042 0201 	orr.w	r2, r2, #1
 80064ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064cc:	e008      	b.n	80064e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f042 0201 	orr.w	r2, r2, #1
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e000      	b.n	80064e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3714      	adds	r7, #20
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	40012c00 	.word	0x40012c00
 80064f4:	40000400 	.word	0x40000400
 80064f8:	40000800 	.word	0x40000800
 80064fc:	40000c00 	.word	0x40000c00
 8006500:	40013400 	.word	0x40013400
 8006504:	40014000 	.word	0x40014000
 8006508:	00010007 	.word	0x00010007

0800650c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0302 	and.w	r3, r3, #2
 800651e:	2b02      	cmp	r3, #2
 8006520:	d122      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0302 	and.w	r3, r3, #2
 800652c:	2b02      	cmp	r3, #2
 800652e:	d11b      	bne.n	8006568 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0202 	mvn.w	r2, #2
 8006538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2201      	movs	r2, #1
 800653e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d003      	beq.n	8006556 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 f905 	bl	800675e <HAL_TIM_IC_CaptureCallback>
 8006554:	e005      	b.n	8006562 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f000 f8f7 	bl	800674a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f908 	bl	8006772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	f003 0304 	and.w	r3, r3, #4
 8006572:	2b04      	cmp	r3, #4
 8006574:	d122      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	f003 0304 	and.w	r3, r3, #4
 8006580:	2b04      	cmp	r3, #4
 8006582:	d11b      	bne.n	80065bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f06f 0204 	mvn.w	r2, #4
 800658c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d003      	beq.n	80065aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 f8db 	bl	800675e <HAL_TIM_IC_CaptureCallback>
 80065a8:	e005      	b.n	80065b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f8cd 	bl	800674a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f8de 	bl	8006772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	691b      	ldr	r3, [r3, #16]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d122      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b08      	cmp	r3, #8
 80065d6:	d11b      	bne.n	8006610 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0208 	mvn.w	r2, #8
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f8b1 	bl	800675e <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f8a3 	bl	800674a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f8b4 	bl	8006772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	f003 0310 	and.w	r3, r3, #16
 800661a:	2b10      	cmp	r3, #16
 800661c:	d122      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	68db      	ldr	r3, [r3, #12]
 8006624:	f003 0310 	and.w	r3, r3, #16
 8006628:	2b10      	cmp	r3, #16
 800662a:	d11b      	bne.n	8006664 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f06f 0210 	mvn.w	r2, #16
 8006634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2208      	movs	r2, #8
 800663a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006646:	2b00      	cmp	r3, #0
 8006648:	d003      	beq.n	8006652 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f887 	bl	800675e <HAL_TIM_IC_CaptureCallback>
 8006650:	e005      	b.n	800665e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f000 f879 	bl	800674a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f88a 	bl	8006772 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2200      	movs	r2, #0
 8006662:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	691b      	ldr	r3, [r3, #16]
 800666a:	f003 0301 	and.w	r3, r3, #1
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10e      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b01      	cmp	r3, #1
 800667e:	d107      	bne.n	8006690 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f06f 0201 	mvn.w	r2, #1
 8006688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f7fb fc1e 	bl	8001ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800669a:	2b80      	cmp	r3, #128	; 0x80
 800669c:	d10e      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066a8:	2b80      	cmp	r3, #128	; 0x80
 80066aa:	d107      	bne.n	80066bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f914 	bl	80068e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066ca:	d10e      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b80      	cmp	r3, #128	; 0x80
 80066d8:	d107      	bne.n	80066ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80066e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 f907 	bl	80068f8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	691b      	ldr	r3, [r3, #16]
 80066f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f4:	2b40      	cmp	r3, #64	; 0x40
 80066f6:	d10e      	bne.n	8006716 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68db      	ldr	r3, [r3, #12]
 80066fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006702:	2b40      	cmp	r3, #64	; 0x40
 8006704:	d107      	bne.n	8006716 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800670e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f838 	bl	8006786 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	691b      	ldr	r3, [r3, #16]
 800671c:	f003 0320 	and.w	r3, r3, #32
 8006720:	2b20      	cmp	r3, #32
 8006722:	d10e      	bne.n	8006742 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b20      	cmp	r3, #32
 8006730:	d107      	bne.n	8006742 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f06f 0220 	mvn.w	r2, #32
 800673a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 f8c7 	bl	80068d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006742:	bf00      	nop
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800674a:	b480      	push	{r7}
 800674c:	b083      	sub	sp, #12
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006752:	bf00      	nop
 8006754:	370c      	adds	r7, #12
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr

0800675e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800675e:	b480      	push	{r7}
 8006760:	b083      	sub	sp, #12
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006766:	bf00      	nop
 8006768:	370c      	adds	r7, #12
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
	...

0800679c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800679c:	b480      	push	{r7}
 800679e:	b085      	sub	sp, #20
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a40      	ldr	r2, [pc, #256]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d013      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067ba:	d00f      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	4a3d      	ldr	r2, [pc, #244]	; (80068b4 <TIM_Base_SetConfig+0x118>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d00b      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a3c      	ldr	r2, [pc, #240]	; (80068b8 <TIM_Base_SetConfig+0x11c>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a3b      	ldr	r2, [pc, #236]	; (80068bc <TIM_Base_SetConfig+0x120>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_Base_SetConfig+0x40>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a3a      	ldr	r2, [pc, #232]	; (80068c0 <TIM_Base_SetConfig+0x124>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d108      	bne.n	80067ee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a2f      	ldr	r2, [pc, #188]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d01f      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067fc:	d01b      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	4a2c      	ldr	r2, [pc, #176]	; (80068b4 <TIM_Base_SetConfig+0x118>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d017      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	4a2b      	ldr	r2, [pc, #172]	; (80068b8 <TIM_Base_SetConfig+0x11c>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d013      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a2a      	ldr	r2, [pc, #168]	; (80068bc <TIM_Base_SetConfig+0x120>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d00f      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	4a29      	ldr	r2, [pc, #164]	; (80068c0 <TIM_Base_SetConfig+0x124>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00b      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a28      	ldr	r2, [pc, #160]	; (80068c4 <TIM_Base_SetConfig+0x128>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d007      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a27      	ldr	r2, [pc, #156]	; (80068c8 <TIM_Base_SetConfig+0x12c>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d003      	beq.n	8006836 <TIM_Base_SetConfig+0x9a>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a26      	ldr	r2, [pc, #152]	; (80068cc <TIM_Base_SetConfig+0x130>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d108      	bne.n	8006848 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800683c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
 8006842:	68fa      	ldr	r2, [r7, #12]
 8006844:	4313      	orrs	r3, r2
 8006846:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	689a      	ldr	r2, [r3, #8]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a10      	ldr	r2, [pc, #64]	; (80068b0 <TIM_Base_SetConfig+0x114>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00f      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a12      	ldr	r2, [pc, #72]	; (80068c0 <TIM_Base_SetConfig+0x124>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d00b      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a11      	ldr	r2, [pc, #68]	; (80068c4 <TIM_Base_SetConfig+0x128>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a10      	ldr	r2, [pc, #64]	; (80068c8 <TIM_Base_SetConfig+0x12c>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_Base_SetConfig+0xf8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a0f      	ldr	r2, [pc, #60]	; (80068cc <TIM_Base_SetConfig+0x130>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d103      	bne.n	800689c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	615a      	str	r2, [r3, #20]
}
 80068a2:	bf00      	nop
 80068a4:	3714      	adds	r7, #20
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40000400 	.word	0x40000400
 80068b8:	40000800 	.word	0x40000800
 80068bc:	40000c00 	.word	0x40000c00
 80068c0:	40013400 	.word	0x40013400
 80068c4:	40014000 	.word	0x40014000
 80068c8:	40014400 	.word	0x40014400
 80068cc:	40014800 	.word	0x40014800

080068d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068d8:	bf00      	nop
 80068da:	370c      	adds	r7, #12
 80068dc:	46bd      	mov	sp, r7
 80068de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e2:	4770      	bx	lr

080068e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d101      	bne.n	800691e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800691a:	2301      	movs	r3, #1
 800691c:	e040      	b.n	80069a0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006922:	2b00      	cmp	r3, #0
 8006924:	d106      	bne.n	8006934 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7fb fbe6 	bl	8002100 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2224      	movs	r2, #36	; 0x24
 8006938:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681a      	ldr	r2, [r3, #0]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f022 0201 	bic.w	r2, r2, #1
 8006948:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fc86 	bl	800725c <UART_SetConfig>
 8006950:	4603      	mov	r3, r0
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006956:	2301      	movs	r3, #1
 8006958:	e022      	b.n	80069a0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	d002      	beq.n	8006968 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006962:	6878      	ldr	r0, [r7, #4]
 8006964:	f000 ff04 	bl	8007770 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	685a      	ldr	r2, [r3, #4]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006976:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	689a      	ldr	r2, [r3, #8]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006986:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681a      	ldr	r2, [r3, #0]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f042 0201 	orr.w	r2, r2, #1
 8006996:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f000 ff8b 	bl	80078b4 <UART_CheckIdleState>
 800699e:	4603      	mov	r3, r0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b08a      	sub	sp, #40	; 0x28
 80069ac:	af02      	add	r7, sp, #8
 80069ae:	60f8      	str	r0, [r7, #12]
 80069b0:	60b9      	str	r1, [r7, #8]
 80069b2:	603b      	str	r3, [r7, #0]
 80069b4:	4613      	mov	r3, r2
 80069b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069bc:	2b20      	cmp	r3, #32
 80069be:	f040 8082 	bne.w	8006ac6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_UART_Transmit+0x26>
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e07a      	b.n	8006ac8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d101      	bne.n	80069e0 <HAL_UART_Transmit+0x38>
 80069dc:	2302      	movs	r3, #2
 80069de:	e073      	b.n	8006ac8 <HAL_UART_Transmit+0x120>
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2221      	movs	r2, #33	; 0x21
 80069f4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069f6:	f7fc fe83 	bl	8003700 <HAL_GetTick>
 80069fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	88fa      	ldrh	r2, [r7, #6]
 8006a00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a14:	d108      	bne.n	8006a28 <HAL_UART_Transmit+0x80>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	691b      	ldr	r3, [r3, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d104      	bne.n	8006a28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	61bb      	str	r3, [r7, #24]
 8006a26:	e003      	b.n	8006a30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006a38:	e02d      	b.n	8006a96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	9300      	str	r3, [sp, #0]
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2200      	movs	r2, #0
 8006a42:	2180      	movs	r1, #128	; 0x80
 8006a44:	68f8      	ldr	r0, [r7, #12]
 8006a46:	f000 ff7e 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006a50:	2303      	movs	r3, #3
 8006a52:	e039      	b.n	8006ac8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10b      	bne.n	8006a72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	881a      	ldrh	r2, [r3, #0]
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a66:	b292      	uxth	r2, r2
 8006a68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	3302      	adds	r3, #2
 8006a6e:	61bb      	str	r3, [r7, #24]
 8006a70:	e008      	b.n	8006a84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	781a      	ldrb	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	b292      	uxth	r2, r2
 8006a7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006a7e:	69fb      	ldr	r3, [r7, #28]
 8006a80:	3301      	adds	r3, #1
 8006a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1cb      	bne.n	8006a3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	9300      	str	r3, [sp, #0]
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	2140      	movs	r1, #64	; 0x40
 8006aac:	68f8      	ldr	r0, [r7, #12]
 8006aae:	f000 ff4a 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d001      	beq.n	8006abc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e005      	b.n	8006ac8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2220      	movs	r2, #32
 8006ac0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	e000      	b.n	8006ac8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006ac6:	2302      	movs	r3, #2
  }
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3720      	adds	r7, #32
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b08b      	sub	sp, #44	; 0x2c
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	4613      	mov	r3, r2
 8006adc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ae2:	2b20      	cmp	r3, #32
 8006ae4:	d156      	bne.n	8006b94 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d002      	beq.n	8006af2 <HAL_UART_Transmit_IT+0x22>
 8006aec:	88fb      	ldrh	r3, [r7, #6]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e04f      	b.n	8006b96 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d101      	bne.n	8006b04 <HAL_UART_Transmit_IT+0x34>
 8006b00:	2302      	movs	r3, #2
 8006b02:	e048      	b.n	8006b96 <HAL_UART_Transmit_IT+0xc6>
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	88fa      	ldrh	r2, [r7, #6]
 8006b16:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2200      	movs	r2, #0
 8006b26:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	2221      	movs	r2, #33	; 0x21
 8006b34:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b3e:	d107      	bne.n	8006b50 <HAL_UART_Transmit_IT+0x80>
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d103      	bne.n	8006b50 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4a16      	ldr	r2, [pc, #88]	; (8006ba4 <HAL_UART_Transmit_IT+0xd4>)
 8006b4c:	669a      	str	r2, [r3, #104]	; 0x68
 8006b4e:	e002      	b.n	8006b56 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4a15      	ldr	r2, [pc, #84]	; (8006ba8 <HAL_UART_Transmit_IT+0xd8>)
 8006b54:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	e853 3f00 	ldrex	r3, [r3]
 8006b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b72:	627b      	str	r3, [r7, #36]	; 0x24
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	623b      	str	r3, [r7, #32]
 8006b7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	69f9      	ldr	r1, [r7, #28]
 8006b82:	6a3a      	ldr	r2, [r7, #32]
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b8a:	69bb      	ldr	r3, [r7, #24]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e6      	bne.n	8006b5e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	372c      	adds	r7, #44	; 0x2c
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	08007e0f 	.word	0x08007e0f
 8006ba8:	08007d57 	.word	0x08007d57

08006bac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b08a      	sub	sp, #40	; 0x28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	4613      	mov	r3, r2
 8006bb8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bbe:	2b20      	cmp	r3, #32
 8006bc0:	d142      	bne.n	8006c48 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d002      	beq.n	8006bce <HAL_UART_Receive_IT+0x22>
 8006bc8:	88fb      	ldrh	r3, [r7, #6]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e03b      	b.n	8006c4a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_UART_Receive_IT+0x34>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e034      	b.n	8006c4a <HAL_UART_Receive_IT+0x9e>
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <HAL_UART_Receive_IT+0xa8>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d01f      	beq.n	8006c38 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d018      	beq.n	8006c38 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	e853 3f00 	ldrex	r3, [r3]
 8006c12:	613b      	str	r3, [r7, #16]
   return(result);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c24:	623b      	str	r3, [r7, #32]
 8006c26:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c28:	69f9      	ldr	r1, [r7, #28]
 8006c2a:	6a3a      	ldr	r2, [r7, #32]
 8006c2c:	e841 2300 	strex	r3, r2, [r1]
 8006c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d1e6      	bne.n	8006c06 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006c38:	88fb      	ldrh	r3, [r7, #6]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	68b9      	ldr	r1, [r7, #8]
 8006c3e:	68f8      	ldr	r0, [r7, #12]
 8006c40:	f000 ff46 	bl	8007ad0 <UART_Start_Receive_IT>
 8006c44:	4603      	mov	r3, r0
 8006c46:	e000      	b.n	8006c4a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3728      	adds	r7, #40	; 0x28
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
 8006c52:	bf00      	nop
 8006c54:	40008000 	.word	0x40008000

08006c58 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b0ba      	sub	sp, #232	; 0xe8
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	69db      	ldr	r3, [r3, #28]
 8006c66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006c7e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006c82:	f640 030f 	movw	r3, #2063	; 0x80f
 8006c86:	4013      	ands	r3, r2
 8006c88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d115      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c98:	f003 0320 	and.w	r3, r3, #32
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00f      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d009      	beq.n	8006cc0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	f000 82a6 	beq.w	8007202 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	4798      	blx	r3
      }
      return;
 8006cbe:	e2a0      	b.n	8007202 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8006cc0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 8117 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d106      	bne.n	8006ce4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006cd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006cda:	4b85      	ldr	r3, [pc, #532]	; (8006ef0 <HAL_UART_IRQHandler+0x298>)
 8006cdc:	4013      	ands	r3, r2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 810a 	beq.w	8006ef8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ce4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d011      	beq.n	8006d14 <HAL_UART_IRQHandler+0xbc>
 8006cf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d00b      	beq.n	8006d14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2201      	movs	r2, #1
 8006d02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d0a:	f043 0201 	orr.w	r2, r3, #1
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d011      	beq.n	8006d44 <HAL_UART_IRQHandler+0xec>
 8006d20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d24:	f003 0301 	and.w	r3, r3, #1
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d00b      	beq.n	8006d44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	2202      	movs	r2, #2
 8006d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d3a:	f043 0204 	orr.w	r2, r3, #4
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d48:	f003 0304 	and.w	r3, r3, #4
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d011      	beq.n	8006d74 <HAL_UART_IRQHandler+0x11c>
 8006d50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d54:	f003 0301 	and.w	r3, r3, #1
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00b      	beq.n	8006d74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2204      	movs	r2, #4
 8006d62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006d6a:	f043 0202 	orr.w	r2, r3, #2
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006d74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d78:	f003 0308 	and.w	r3, r3, #8
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d017      	beq.n	8006db0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d84:	f003 0320 	and.w	r3, r3, #32
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d105      	bne.n	8006d98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006d8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d00b      	beq.n	8006db0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	2208      	movs	r2, #8
 8006d9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006da6:	f043 0208 	orr.w	r2, r3, #8
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006db0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d012      	beq.n	8006de2 <HAL_UART_IRQHandler+0x18a>
 8006dbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d00c      	beq.n	8006de2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006dd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dd8:	f043 0220 	orr.w	r2, r3, #32
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	f000 820c 	beq.w	8007206 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df2:	f003 0320 	and.w	r3, r3, #32
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d00d      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dfe:	f003 0320 	and.w	r3, r3, #32
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d007      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d003      	beq.n	8006e16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d005      	beq.n	8006e3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e32:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04f      	beq.n	8006eda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f000 ff12 	bl	8007c64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d141      	bne.n	8006ed2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	3308      	adds	r3, #8
 8006e76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006e7a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006e7e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006e86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006e8a:	e841 2300 	strex	r3, r2, [r1]
 8006e8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006e92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1d9      	bne.n	8006e4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d013      	beq.n	8006eca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea6:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <HAL_UART_IRQHandler+0x29c>)
 8006ea8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fc fd81 	bl	80039b6 <HAL_DMA_Abort_IT>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d017      	beq.n	8006eea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006ec4:	4610      	mov	r0, r2
 8006ec6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ec8:	e00f      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f000 f9b0 	bl	8007230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed0:	e00b      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 f9ac 	bl	8007230 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ed8:	e007      	b.n	8006eea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f9a8 	bl	8007230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006ee8:	e18d      	b.n	8007206 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006eea:	bf00      	nop
    return;
 8006eec:	e18b      	b.n	8007206 <HAL_UART_IRQHandler+0x5ae>
 8006eee:	bf00      	nop
 8006ef0:	04000120 	.word	0x04000120
 8006ef4:	08007d2b 	.word	0x08007d2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	f040 8146 	bne.w	800718e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f06:	f003 0310 	and.w	r3, r3, #16
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 813f 	beq.w	800718e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f14:	f003 0310 	and.w	r3, r3, #16
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8138 	beq.w	800718e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2210      	movs	r2, #16
 8006f24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f30:	2b40      	cmp	r3, #64	; 0x40
 8006f32:	f040 80b4 	bne.w	800709e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	f000 815f 	beq.w	800720a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f080 8157 	bcs.w	800720a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 0320 	and.w	r3, r3, #32
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f040 8085 	bne.w	8007082 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fa6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fb2:	e841 2300 	strex	r3, r2, [r1]
 8006fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1da      	bne.n	8006f78 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3308      	adds	r3, #8
 8006fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fcc:	e853 3f00 	ldrex	r3, [r3]
 8006fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006fd4:	f023 0301 	bic.w	r3, r3, #1
 8006fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	3308      	adds	r3, #8
 8006fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006ff2:	e841 2300 	strex	r3, r2, [r1]
 8006ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1e1      	bne.n	8006fc2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800700e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e3      	bne.n	8006ffe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2220      	movs	r2, #32
 800703a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2200      	movs	r2, #0
 8007040:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007048:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800704a:	e853 3f00 	ldrex	r3, [r3]
 800704e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007052:	f023 0310 	bic.w	r3, r3, #16
 8007056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	461a      	mov	r2, r3
 8007060:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007064:	65bb      	str	r3, [r7, #88]	; 0x58
 8007066:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007068:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800706a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800706c:	e841 2300 	strex	r3, r2, [r1]
 8007070:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1e4      	bne.n	8007042 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800707c:	4618      	mov	r0, r3
 800707e:	f7fc fc5c 	bl	800393a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800708e:	b29b      	uxth	r3, r3
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	b29b      	uxth	r3, r3
 8007094:	4619      	mov	r1, r3
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8d4 	bl	8007244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800709c:	e0b5      	b.n	800720a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070aa:	b29b      	uxth	r3, r3
 80070ac:	1ad3      	subs	r3, r2, r3
 80070ae:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	f000 80a7 	beq.w	800720e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80070c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f000 80a2 	beq.w	800720e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070d2:	e853 3f00 	ldrex	r3, [r3]
 80070d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80070d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80070ec:	647b      	str	r3, [r7, #68]	; 0x44
 80070ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80070f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80070f4:	e841 2300 	strex	r3, r2, [r1]
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80070fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d1e4      	bne.n	80070ca <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3308      	adds	r3, #8
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	e853 3f00 	ldrex	r3, [r3]
 800710e:	623b      	str	r3, [r7, #32]
   return(result);
 8007110:	6a3b      	ldr	r3, [r7, #32]
 8007112:	f023 0301 	bic.w	r3, r3, #1
 8007116:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	3308      	adds	r3, #8
 8007120:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007124:	633a      	str	r2, [r7, #48]	; 0x30
 8007126:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007128:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800712a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800712c:	e841 2300 	strex	r3, r2, [r1]
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1e3      	bne.n	8007100 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	e853 3f00 	ldrex	r3, [r3]
 8007156:	60fb      	str	r3, [r7, #12]
   return(result);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0310 	bic.w	r3, r3, #16
 800715e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	461a      	mov	r2, r3
 8007168:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800716c:	61fb      	str	r3, [r7, #28]
 800716e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007170:	69b9      	ldr	r1, [r7, #24]
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	e841 2300 	strex	r3, r2, [r1]
 8007178:	617b      	str	r3, [r7, #20]
   return(result);
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d1e4      	bne.n	800714a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 f85c 	bl	8007244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800718c:	e03f      	b.n	800720e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800718e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00e      	beq.n	80071b8 <HAL_UART_IRQHandler+0x560>
 800719a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800719e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d008      	beq.n	80071b8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80071ae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f001 f816 	bl	80081e2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80071b6:	e02d      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00e      	beq.n	80071e2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d008      	beq.n	80071e2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d01c      	beq.n	8007212 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
    }
    return;
 80071e0:	e017      	b.n	8007212 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d012      	beq.n	8007214 <HAL_UART_IRQHandler+0x5bc>
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d00c      	beq.n	8007214 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fe67 	bl	8007ece <UART_EndTransmit_IT>
    return;
 8007200:	e008      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007202:	bf00      	nop
 8007204:	e006      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007206:	bf00      	nop
 8007208:	e004      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
      return;
 800720a:	bf00      	nop
 800720c:	e002      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
      return;
 800720e:	bf00      	nop
 8007210:	e000      	b.n	8007214 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007212:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007214:	37e8      	adds	r7, #232	; 0xe8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop

0800721c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007224:	bf00      	nop
 8007226:	370c      	adds	r7, #12
 8007228:	46bd      	mov	sp, r7
 800722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722e:	4770      	bx	lr

08007230 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007230:	b480      	push	{r7}
 8007232:	b083      	sub	sp, #12
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007238:	bf00      	nop
 800723a:	370c      	adds	r7, #12
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr

08007244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	460b      	mov	r3, r1
 800724e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800725c:	b5b0      	push	{r4, r5, r7, lr}
 800725e:	b088      	sub	sp, #32
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007264:	2300      	movs	r3, #0
 8007266:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	689a      	ldr	r2, [r3, #8]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	431a      	orrs	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	431a      	orrs	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	69db      	ldr	r3, [r3, #28]
 800727c:	4313      	orrs	r3, r2
 800727e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	681a      	ldr	r2, [r3, #0]
 8007286:	4bad      	ldr	r3, [pc, #692]	; (800753c <UART_SetConfig+0x2e0>)
 8007288:	4013      	ands	r3, r2
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	6812      	ldr	r2, [r2, #0]
 800728e:	69f9      	ldr	r1, [r7, #28]
 8007290:	430b      	orrs	r3, r1
 8007292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	685b      	ldr	r3, [r3, #4]
 800729a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	68da      	ldr	r2, [r3, #12]
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	430a      	orrs	r2, r1
 80072a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4aa2      	ldr	r2, [pc, #648]	; (8007540 <UART_SetConfig+0x2e4>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d004      	beq.n	80072c4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	4313      	orrs	r3, r2
 80072c2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	430a      	orrs	r2, r1
 80072d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a99      	ldr	r2, [pc, #612]	; (8007544 <UART_SetConfig+0x2e8>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d121      	bne.n	8007326 <UART_SetConfig+0xca>
 80072e2:	4b99      	ldr	r3, [pc, #612]	; (8007548 <UART_SetConfig+0x2ec>)
 80072e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	2b03      	cmp	r3, #3
 80072ee:	d817      	bhi.n	8007320 <UART_SetConfig+0xc4>
 80072f0:	a201      	add	r2, pc, #4	; (adr r2, 80072f8 <UART_SetConfig+0x9c>)
 80072f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f6:	bf00      	nop
 80072f8:	08007309 	.word	0x08007309
 80072fc:	08007315 	.word	0x08007315
 8007300:	0800730f 	.word	0x0800730f
 8007304:	0800731b 	.word	0x0800731b
 8007308:	2301      	movs	r3, #1
 800730a:	76fb      	strb	r3, [r7, #27]
 800730c:	e0e7      	b.n	80074de <UART_SetConfig+0x282>
 800730e:	2302      	movs	r3, #2
 8007310:	76fb      	strb	r3, [r7, #27]
 8007312:	e0e4      	b.n	80074de <UART_SetConfig+0x282>
 8007314:	2304      	movs	r3, #4
 8007316:	76fb      	strb	r3, [r7, #27]
 8007318:	e0e1      	b.n	80074de <UART_SetConfig+0x282>
 800731a:	2308      	movs	r3, #8
 800731c:	76fb      	strb	r3, [r7, #27]
 800731e:	e0de      	b.n	80074de <UART_SetConfig+0x282>
 8007320:	2310      	movs	r3, #16
 8007322:	76fb      	strb	r3, [r7, #27]
 8007324:	e0db      	b.n	80074de <UART_SetConfig+0x282>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a88      	ldr	r2, [pc, #544]	; (800754c <UART_SetConfig+0x2f0>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d132      	bne.n	8007396 <UART_SetConfig+0x13a>
 8007330:	4b85      	ldr	r3, [pc, #532]	; (8007548 <UART_SetConfig+0x2ec>)
 8007332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007336:	f003 030c 	and.w	r3, r3, #12
 800733a:	2b0c      	cmp	r3, #12
 800733c:	d828      	bhi.n	8007390 <UART_SetConfig+0x134>
 800733e:	a201      	add	r2, pc, #4	; (adr r2, 8007344 <UART_SetConfig+0xe8>)
 8007340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007344:	08007379 	.word	0x08007379
 8007348:	08007391 	.word	0x08007391
 800734c:	08007391 	.word	0x08007391
 8007350:	08007391 	.word	0x08007391
 8007354:	08007385 	.word	0x08007385
 8007358:	08007391 	.word	0x08007391
 800735c:	08007391 	.word	0x08007391
 8007360:	08007391 	.word	0x08007391
 8007364:	0800737f 	.word	0x0800737f
 8007368:	08007391 	.word	0x08007391
 800736c:	08007391 	.word	0x08007391
 8007370:	08007391 	.word	0x08007391
 8007374:	0800738b 	.word	0x0800738b
 8007378:	2300      	movs	r3, #0
 800737a:	76fb      	strb	r3, [r7, #27]
 800737c:	e0af      	b.n	80074de <UART_SetConfig+0x282>
 800737e:	2302      	movs	r3, #2
 8007380:	76fb      	strb	r3, [r7, #27]
 8007382:	e0ac      	b.n	80074de <UART_SetConfig+0x282>
 8007384:	2304      	movs	r3, #4
 8007386:	76fb      	strb	r3, [r7, #27]
 8007388:	e0a9      	b.n	80074de <UART_SetConfig+0x282>
 800738a:	2308      	movs	r3, #8
 800738c:	76fb      	strb	r3, [r7, #27]
 800738e:	e0a6      	b.n	80074de <UART_SetConfig+0x282>
 8007390:	2310      	movs	r3, #16
 8007392:	76fb      	strb	r3, [r7, #27]
 8007394:	e0a3      	b.n	80074de <UART_SetConfig+0x282>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a6d      	ldr	r2, [pc, #436]	; (8007550 <UART_SetConfig+0x2f4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d120      	bne.n	80073e2 <UART_SetConfig+0x186>
 80073a0:	4b69      	ldr	r3, [pc, #420]	; (8007548 <UART_SetConfig+0x2ec>)
 80073a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073aa:	2b30      	cmp	r3, #48	; 0x30
 80073ac:	d013      	beq.n	80073d6 <UART_SetConfig+0x17a>
 80073ae:	2b30      	cmp	r3, #48	; 0x30
 80073b0:	d814      	bhi.n	80073dc <UART_SetConfig+0x180>
 80073b2:	2b20      	cmp	r3, #32
 80073b4:	d009      	beq.n	80073ca <UART_SetConfig+0x16e>
 80073b6:	2b20      	cmp	r3, #32
 80073b8:	d810      	bhi.n	80073dc <UART_SetConfig+0x180>
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d002      	beq.n	80073c4 <UART_SetConfig+0x168>
 80073be:	2b10      	cmp	r3, #16
 80073c0:	d006      	beq.n	80073d0 <UART_SetConfig+0x174>
 80073c2:	e00b      	b.n	80073dc <UART_SetConfig+0x180>
 80073c4:	2300      	movs	r3, #0
 80073c6:	76fb      	strb	r3, [r7, #27]
 80073c8:	e089      	b.n	80074de <UART_SetConfig+0x282>
 80073ca:	2302      	movs	r3, #2
 80073cc:	76fb      	strb	r3, [r7, #27]
 80073ce:	e086      	b.n	80074de <UART_SetConfig+0x282>
 80073d0:	2304      	movs	r3, #4
 80073d2:	76fb      	strb	r3, [r7, #27]
 80073d4:	e083      	b.n	80074de <UART_SetConfig+0x282>
 80073d6:	2308      	movs	r3, #8
 80073d8:	76fb      	strb	r3, [r7, #27]
 80073da:	e080      	b.n	80074de <UART_SetConfig+0x282>
 80073dc:	2310      	movs	r3, #16
 80073de:	76fb      	strb	r3, [r7, #27]
 80073e0:	e07d      	b.n	80074de <UART_SetConfig+0x282>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a5b      	ldr	r2, [pc, #364]	; (8007554 <UART_SetConfig+0x2f8>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d120      	bne.n	800742e <UART_SetConfig+0x1d2>
 80073ec:	4b56      	ldr	r3, [pc, #344]	; (8007548 <UART_SetConfig+0x2ec>)
 80073ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80073f6:	2bc0      	cmp	r3, #192	; 0xc0
 80073f8:	d013      	beq.n	8007422 <UART_SetConfig+0x1c6>
 80073fa:	2bc0      	cmp	r3, #192	; 0xc0
 80073fc:	d814      	bhi.n	8007428 <UART_SetConfig+0x1cc>
 80073fe:	2b80      	cmp	r3, #128	; 0x80
 8007400:	d009      	beq.n	8007416 <UART_SetConfig+0x1ba>
 8007402:	2b80      	cmp	r3, #128	; 0x80
 8007404:	d810      	bhi.n	8007428 <UART_SetConfig+0x1cc>
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <UART_SetConfig+0x1b4>
 800740a:	2b40      	cmp	r3, #64	; 0x40
 800740c:	d006      	beq.n	800741c <UART_SetConfig+0x1c0>
 800740e:	e00b      	b.n	8007428 <UART_SetConfig+0x1cc>
 8007410:	2300      	movs	r3, #0
 8007412:	76fb      	strb	r3, [r7, #27]
 8007414:	e063      	b.n	80074de <UART_SetConfig+0x282>
 8007416:	2302      	movs	r3, #2
 8007418:	76fb      	strb	r3, [r7, #27]
 800741a:	e060      	b.n	80074de <UART_SetConfig+0x282>
 800741c:	2304      	movs	r3, #4
 800741e:	76fb      	strb	r3, [r7, #27]
 8007420:	e05d      	b.n	80074de <UART_SetConfig+0x282>
 8007422:	2308      	movs	r3, #8
 8007424:	76fb      	strb	r3, [r7, #27]
 8007426:	e05a      	b.n	80074de <UART_SetConfig+0x282>
 8007428:	2310      	movs	r3, #16
 800742a:	76fb      	strb	r3, [r7, #27]
 800742c:	e057      	b.n	80074de <UART_SetConfig+0x282>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	4a49      	ldr	r2, [pc, #292]	; (8007558 <UART_SetConfig+0x2fc>)
 8007434:	4293      	cmp	r3, r2
 8007436:	d125      	bne.n	8007484 <UART_SetConfig+0x228>
 8007438:	4b43      	ldr	r3, [pc, #268]	; (8007548 <UART_SetConfig+0x2ec>)
 800743a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800743e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007442:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007446:	d017      	beq.n	8007478 <UART_SetConfig+0x21c>
 8007448:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800744c:	d817      	bhi.n	800747e <UART_SetConfig+0x222>
 800744e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007452:	d00b      	beq.n	800746c <UART_SetConfig+0x210>
 8007454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007458:	d811      	bhi.n	800747e <UART_SetConfig+0x222>
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <UART_SetConfig+0x20a>
 800745e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007462:	d006      	beq.n	8007472 <UART_SetConfig+0x216>
 8007464:	e00b      	b.n	800747e <UART_SetConfig+0x222>
 8007466:	2300      	movs	r3, #0
 8007468:	76fb      	strb	r3, [r7, #27]
 800746a:	e038      	b.n	80074de <UART_SetConfig+0x282>
 800746c:	2302      	movs	r3, #2
 800746e:	76fb      	strb	r3, [r7, #27]
 8007470:	e035      	b.n	80074de <UART_SetConfig+0x282>
 8007472:	2304      	movs	r3, #4
 8007474:	76fb      	strb	r3, [r7, #27]
 8007476:	e032      	b.n	80074de <UART_SetConfig+0x282>
 8007478:	2308      	movs	r3, #8
 800747a:	76fb      	strb	r3, [r7, #27]
 800747c:	e02f      	b.n	80074de <UART_SetConfig+0x282>
 800747e:	2310      	movs	r3, #16
 8007480:	76fb      	strb	r3, [r7, #27]
 8007482:	e02c      	b.n	80074de <UART_SetConfig+0x282>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a2d      	ldr	r2, [pc, #180]	; (8007540 <UART_SetConfig+0x2e4>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d125      	bne.n	80074da <UART_SetConfig+0x27e>
 800748e:	4b2e      	ldr	r3, [pc, #184]	; (8007548 <UART_SetConfig+0x2ec>)
 8007490:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007494:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007498:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800749c:	d017      	beq.n	80074ce <UART_SetConfig+0x272>
 800749e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074a2:	d817      	bhi.n	80074d4 <UART_SetConfig+0x278>
 80074a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074a8:	d00b      	beq.n	80074c2 <UART_SetConfig+0x266>
 80074aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ae:	d811      	bhi.n	80074d4 <UART_SetConfig+0x278>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <UART_SetConfig+0x260>
 80074b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074b8:	d006      	beq.n	80074c8 <UART_SetConfig+0x26c>
 80074ba:	e00b      	b.n	80074d4 <UART_SetConfig+0x278>
 80074bc:	2300      	movs	r3, #0
 80074be:	76fb      	strb	r3, [r7, #27]
 80074c0:	e00d      	b.n	80074de <UART_SetConfig+0x282>
 80074c2:	2302      	movs	r3, #2
 80074c4:	76fb      	strb	r3, [r7, #27]
 80074c6:	e00a      	b.n	80074de <UART_SetConfig+0x282>
 80074c8:	2304      	movs	r3, #4
 80074ca:	76fb      	strb	r3, [r7, #27]
 80074cc:	e007      	b.n	80074de <UART_SetConfig+0x282>
 80074ce:	2308      	movs	r3, #8
 80074d0:	76fb      	strb	r3, [r7, #27]
 80074d2:	e004      	b.n	80074de <UART_SetConfig+0x282>
 80074d4:	2310      	movs	r3, #16
 80074d6:	76fb      	strb	r3, [r7, #27]
 80074d8:	e001      	b.n	80074de <UART_SetConfig+0x282>
 80074da:	2310      	movs	r3, #16
 80074dc:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a17      	ldr	r2, [pc, #92]	; (8007540 <UART_SetConfig+0x2e4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	f040 8087 	bne.w	80075f8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80074ea:	7efb      	ldrb	r3, [r7, #27]
 80074ec:	2b08      	cmp	r3, #8
 80074ee:	d837      	bhi.n	8007560 <UART_SetConfig+0x304>
 80074f0:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <UART_SetConfig+0x29c>)
 80074f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f6:	bf00      	nop
 80074f8:	0800751d 	.word	0x0800751d
 80074fc:	08007561 	.word	0x08007561
 8007500:	08007525 	.word	0x08007525
 8007504:	08007561 	.word	0x08007561
 8007508:	0800752b 	.word	0x0800752b
 800750c:	08007561 	.word	0x08007561
 8007510:	08007561 	.word	0x08007561
 8007514:	08007561 	.word	0x08007561
 8007518:	08007533 	.word	0x08007533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800751c:	f7fe f97e 	bl	800581c <HAL_RCC_GetPCLK1Freq>
 8007520:	6178      	str	r0, [r7, #20]
        break;
 8007522:	e022      	b.n	800756a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007524:	4b0d      	ldr	r3, [pc, #52]	; (800755c <UART_SetConfig+0x300>)
 8007526:	617b      	str	r3, [r7, #20]
        break;
 8007528:	e01f      	b.n	800756a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800752a:	f7fe f8df 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 800752e:	6178      	str	r0, [r7, #20]
        break;
 8007530:	e01b      	b.n	800756a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007536:	617b      	str	r3, [r7, #20]
        break;
 8007538:	e017      	b.n	800756a <UART_SetConfig+0x30e>
 800753a:	bf00      	nop
 800753c:	efff69f3 	.word	0xefff69f3
 8007540:	40008000 	.word	0x40008000
 8007544:	40013800 	.word	0x40013800
 8007548:	40021000 	.word	0x40021000
 800754c:	40004400 	.word	0x40004400
 8007550:	40004800 	.word	0x40004800
 8007554:	40004c00 	.word	0x40004c00
 8007558:	40005000 	.word	0x40005000
 800755c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007560:	2300      	movs	r3, #0
 8007562:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	76bb      	strb	r3, [r7, #26]
        break;
 8007568:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	2b00      	cmp	r3, #0
 800756e:	f000 80f1 	beq.w	8007754 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685a      	ldr	r2, [r3, #4]
 8007576:	4613      	mov	r3, r2
 8007578:	005b      	lsls	r3, r3, #1
 800757a:	4413      	add	r3, r2
 800757c:	697a      	ldr	r2, [r7, #20]
 800757e:	429a      	cmp	r2, r3
 8007580:	d305      	bcc.n	800758e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007588:	697a      	ldr	r2, [r7, #20]
 800758a:	429a      	cmp	r2, r3
 800758c:	d902      	bls.n	8007594 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	76bb      	strb	r3, [r7, #26]
 8007592:	e0df      	b.n	8007754 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	4618      	mov	r0, r3
 8007598:	f04f 0100 	mov.w	r1, #0
 800759c:	f04f 0200 	mov.w	r2, #0
 80075a0:	f04f 0300 	mov.w	r3, #0
 80075a4:	020b      	lsls	r3, r1, #8
 80075a6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80075aa:	0202      	lsls	r2, r0, #8
 80075ac:	6879      	ldr	r1, [r7, #4]
 80075ae:	6849      	ldr	r1, [r1, #4]
 80075b0:	0849      	lsrs	r1, r1, #1
 80075b2:	4608      	mov	r0, r1
 80075b4:	f04f 0100 	mov.w	r1, #0
 80075b8:	1814      	adds	r4, r2, r0
 80075ba:	eb43 0501 	adc.w	r5, r3, r1
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	461a      	mov	r2, r3
 80075c4:	f04f 0300 	mov.w	r3, #0
 80075c8:	4620      	mov	r0, r4
 80075ca:	4629      	mov	r1, r5
 80075cc:	f7f9 faec 	bl	8000ba8 <__aeabi_uldivmod>
 80075d0:	4602      	mov	r2, r0
 80075d2:	460b      	mov	r3, r1
 80075d4:	4613      	mov	r3, r2
 80075d6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80075de:	d308      	bcc.n	80075f2 <UART_SetConfig+0x396>
 80075e0:	693b      	ldr	r3, [r7, #16]
 80075e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80075e6:	d204      	bcs.n	80075f2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	693a      	ldr	r2, [r7, #16]
 80075ee:	60da      	str	r2, [r3, #12]
 80075f0:	e0b0      	b.n	8007754 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	76bb      	strb	r3, [r7, #26]
 80075f6:	e0ad      	b.n	8007754 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007600:	d15b      	bne.n	80076ba <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007602:	7efb      	ldrb	r3, [r7, #27]
 8007604:	2b08      	cmp	r3, #8
 8007606:	d828      	bhi.n	800765a <UART_SetConfig+0x3fe>
 8007608:	a201      	add	r2, pc, #4	; (adr r2, 8007610 <UART_SetConfig+0x3b4>)
 800760a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800760e:	bf00      	nop
 8007610:	08007635 	.word	0x08007635
 8007614:	0800763d 	.word	0x0800763d
 8007618:	08007645 	.word	0x08007645
 800761c:	0800765b 	.word	0x0800765b
 8007620:	0800764b 	.word	0x0800764b
 8007624:	0800765b 	.word	0x0800765b
 8007628:	0800765b 	.word	0x0800765b
 800762c:	0800765b 	.word	0x0800765b
 8007630:	08007653 	.word	0x08007653
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007634:	f7fe f8f2 	bl	800581c <HAL_RCC_GetPCLK1Freq>
 8007638:	6178      	str	r0, [r7, #20]
        break;
 800763a:	e013      	b.n	8007664 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800763c:	f7fe f904 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 8007640:	6178      	str	r0, [r7, #20]
        break;
 8007642:	e00f      	b.n	8007664 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007644:	4b49      	ldr	r3, [pc, #292]	; (800776c <UART_SetConfig+0x510>)
 8007646:	617b      	str	r3, [r7, #20]
        break;
 8007648:	e00c      	b.n	8007664 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800764a:	f7fe f84f 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 800764e:	6178      	str	r0, [r7, #20]
        break;
 8007650:	e008      	b.n	8007664 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007652:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007656:	617b      	str	r3, [r7, #20]
        break;
 8007658:	e004      	b.n	8007664 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800765e:	2301      	movs	r3, #1
 8007660:	76bb      	strb	r3, [r7, #26]
        break;
 8007662:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d074      	beq.n	8007754 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	005a      	lsls	r2, r3, #1
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	085b      	lsrs	r3, r3, #1
 8007674:	441a      	add	r2, r3
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	fbb2 f3f3 	udiv	r3, r2, r3
 800767e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	2b0f      	cmp	r3, #15
 8007684:	d916      	bls.n	80076b4 <UART_SetConfig+0x458>
 8007686:	693b      	ldr	r3, [r7, #16]
 8007688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800768c:	d212      	bcs.n	80076b4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	b29b      	uxth	r3, r3
 8007692:	f023 030f 	bic.w	r3, r3, #15
 8007696:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	085b      	lsrs	r3, r3, #1
 800769c:	b29b      	uxth	r3, r3
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	b29a      	uxth	r2, r3
 80076a4:	89fb      	ldrh	r3, [r7, #14]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	89fa      	ldrh	r2, [r7, #14]
 80076b0:	60da      	str	r2, [r3, #12]
 80076b2:	e04f      	b.n	8007754 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	76bb      	strb	r3, [r7, #26]
 80076b8:	e04c      	b.n	8007754 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80076ba:	7efb      	ldrb	r3, [r7, #27]
 80076bc:	2b08      	cmp	r3, #8
 80076be:	d828      	bhi.n	8007712 <UART_SetConfig+0x4b6>
 80076c0:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <UART_SetConfig+0x46c>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076ed 	.word	0x080076ed
 80076cc:	080076f5 	.word	0x080076f5
 80076d0:	080076fd 	.word	0x080076fd
 80076d4:	08007713 	.word	0x08007713
 80076d8:	08007703 	.word	0x08007703
 80076dc:	08007713 	.word	0x08007713
 80076e0:	08007713 	.word	0x08007713
 80076e4:	08007713 	.word	0x08007713
 80076e8:	0800770b 	.word	0x0800770b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076ec:	f7fe f896 	bl	800581c <HAL_RCC_GetPCLK1Freq>
 80076f0:	6178      	str	r0, [r7, #20]
        break;
 80076f2:	e013      	b.n	800771c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076f4:	f7fe f8a8 	bl	8005848 <HAL_RCC_GetPCLK2Freq>
 80076f8:	6178      	str	r0, [r7, #20]
        break;
 80076fa:	e00f      	b.n	800771c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076fc:	4b1b      	ldr	r3, [pc, #108]	; (800776c <UART_SetConfig+0x510>)
 80076fe:	617b      	str	r3, [r7, #20]
        break;
 8007700:	e00c      	b.n	800771c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007702:	f7fd fff3 	bl	80056ec <HAL_RCC_GetSysClockFreq>
 8007706:	6178      	str	r0, [r7, #20]
        break;
 8007708:	e008      	b.n	800771c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800770a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800770e:	617b      	str	r3, [r7, #20]
        break;
 8007710:	e004      	b.n	800771c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007712:	2300      	movs	r3, #0
 8007714:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	76bb      	strb	r3, [r7, #26]
        break;
 800771a:	bf00      	nop
    }

    if (pclk != 0U)
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d018      	beq.n	8007754 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	085a      	lsrs	r2, r3, #1
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	441a      	add	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	685b      	ldr	r3, [r3, #4]
 8007730:	fbb2 f3f3 	udiv	r3, r2, r3
 8007734:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	2b0f      	cmp	r3, #15
 800773a:	d909      	bls.n	8007750 <UART_SetConfig+0x4f4>
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007742:	d205      	bcs.n	8007750 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	b29a      	uxth	r2, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60da      	str	r2, [r3, #12]
 800774e:	e001      	b.n	8007754 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007760:	7ebb      	ldrb	r3, [r7, #26]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3720      	adds	r7, #32
 8007766:	46bd      	mov	sp, r7
 8007768:	bdb0      	pop	{r4, r5, r7, pc}
 800776a:	bf00      	nop
 800776c:	00f42400 	.word	0x00f42400

08007770 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007770:	b480      	push	{r7}
 8007772:	b083      	sub	sp, #12
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d00a      	beq.n	800779a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	430a      	orrs	r2, r1
 8007798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779e:	f003 0302 	and.w	r3, r3, #2
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d00a      	beq.n	80077bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	685b      	ldr	r3, [r3, #4]
 80077ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	430a      	orrs	r2, r1
 80077ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c0:	f003 0304 	and.w	r3, r3, #4
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00a      	beq.n	80077de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	430a      	orrs	r2, r1
 80077dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e2:	f003 0308 	and.w	r3, r3, #8
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d00a      	beq.n	8007800 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007804:	f003 0310 	and.w	r3, r3, #16
 8007808:	2b00      	cmp	r3, #0
 800780a:	d00a      	beq.n	8007822 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	430a      	orrs	r2, r1
 8007820:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007826:	f003 0320 	and.w	r3, r3, #32
 800782a:	2b00      	cmp	r3, #0
 800782c:	d00a      	beq.n	8007844 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	689b      	ldr	r3, [r3, #8]
 8007834:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	430a      	orrs	r2, r1
 8007842:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007848:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784c:	2b00      	cmp	r3, #0
 800784e:	d01a      	beq.n	8007886 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	685b      	ldr	r3, [r3, #4]
 8007856:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	430a      	orrs	r2, r1
 8007864:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800786e:	d10a      	bne.n	8007886 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	430a      	orrs	r2, r1
 8007884:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788e:	2b00      	cmp	r3, #0
 8007890:	d00a      	beq.n	80078a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	430a      	orrs	r2, r1
 80078a6:	605a      	str	r2, [r3, #4]
  }
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b086      	sub	sp, #24
 80078b8:	af02      	add	r7, sp, #8
 80078ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80078c4:	f7fb ff1c 	bl	8003700 <HAL_GetTick>
 80078c8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0308 	and.w	r3, r3, #8
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d10e      	bne.n	80078f6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078dc:	9300      	str	r3, [sp, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f82d 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 80078ec:	4603      	mov	r3, r0
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d001      	beq.n	80078f6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078f2:	2303      	movs	r3, #3
 80078f4:	e023      	b.n	800793e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b04      	cmp	r3, #4
 8007902:	d10e      	bne.n	8007922 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	2200      	movs	r2, #0
 800790e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 f817 	bl	8007946 <UART_WaitOnFlagUntilTimeout>
 8007918:	4603      	mov	r3, r0
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800791e:	2303      	movs	r3, #3
 8007920:	e00d      	b.n	800793e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2220      	movs	r2, #32
 8007926:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2220      	movs	r2, #32
 800792c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007946:	b580      	push	{r7, lr}
 8007948:	b09c      	sub	sp, #112	; 0x70
 800794a:	af00      	add	r7, sp, #0
 800794c:	60f8      	str	r0, [r7, #12]
 800794e:	60b9      	str	r1, [r7, #8]
 8007950:	603b      	str	r3, [r7, #0]
 8007952:	4613      	mov	r3, r2
 8007954:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007956:	e0a5      	b.n	8007aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007958:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800795a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800795e:	f000 80a1 	beq.w	8007aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007962:	f7fb fecd 	bl	8003700 <HAL_GetTick>
 8007966:	4602      	mov	r2, r0
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	1ad3      	subs	r3, r2, r3
 800796c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800796e:	429a      	cmp	r2, r3
 8007970:	d302      	bcc.n	8007978 <UART_WaitOnFlagUntilTimeout+0x32>
 8007972:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007974:	2b00      	cmp	r3, #0
 8007976:	d13e      	bne.n	80079f6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800797e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007980:	e853 3f00 	ldrex	r3, [r3]
 8007984:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007986:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007988:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800798c:	667b      	str	r3, [r7, #100]	; 0x64
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007996:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007998:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800799a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800799c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80079a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d1e6      	bne.n	8007978 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	3308      	adds	r3, #8
 80079b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079b4:	e853 3f00 	ldrex	r3, [r3]
 80079b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80079ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079bc:	f023 0301 	bic.w	r3, r3, #1
 80079c0:	663b      	str	r3, [r7, #96]	; 0x60
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80079ca:	64ba      	str	r2, [r7, #72]	; 0x48
 80079cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079d2:	e841 2300 	strex	r3, r2, [r1]
 80079d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e5      	bne.n	80079aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2220      	movs	r2, #32
 80079e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2220      	movs	r2, #32
 80079e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2200      	movs	r2, #0
 80079ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e067      	b.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d04f      	beq.n	8007aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007a12:	d147      	bne.n	8007aa4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a1c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a26:	e853 3f00 	ldrex	r3, [r3]
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	461a      	mov	r2, r3
 8007a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a3e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a40:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a42:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a44:	e841 2300 	strex	r3, r2, [r1]
 8007a48:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1e6      	bne.n	8007a1e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3308      	adds	r3, #8
 8007a56:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	e853 3f00 	ldrex	r3, [r3]
 8007a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a60:	693b      	ldr	r3, [r7, #16]
 8007a62:	f023 0301 	bic.w	r3, r3, #1
 8007a66:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3308      	adds	r3, #8
 8007a6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a70:	623a      	str	r2, [r7, #32]
 8007a72:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a74:	69f9      	ldr	r1, [r7, #28]
 8007a76:	6a3a      	ldr	r2, [r7, #32]
 8007a78:	e841 2300 	strex	r3, r2, [r1]
 8007a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a7e:	69bb      	ldr	r3, [r7, #24]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d1e5      	bne.n	8007a50 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	2220      	movs	r2, #32
 8007a8e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	2220      	movs	r2, #32
 8007a94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007aa0:	2303      	movs	r3, #3
 8007aa2:	e010      	b.n	8007ac6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	69da      	ldr	r2, [r3, #28]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	4013      	ands	r3, r2
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	bf0c      	ite	eq
 8007ab4:	2301      	moveq	r3, #1
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	461a      	mov	r2, r3
 8007abc:	79fb      	ldrb	r3, [r7, #7]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	f43f af4a 	beq.w	8007958 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3770      	adds	r7, #112	; 0x70
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b097      	sub	sp, #92	; 0x5c
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	4613      	mov	r3, r2
 8007adc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	88fa      	ldrh	r2, [r7, #6]
 8007ae8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	88fa      	ldrh	r2, [r7, #6]
 8007af0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	689b      	ldr	r3, [r3, #8]
 8007afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b02:	d10e      	bne.n	8007b22 <UART_Start_Receive_IT+0x52>
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	691b      	ldr	r3, [r3, #16]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d105      	bne.n	8007b18 <UART_Start_Receive_IT+0x48>
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007b12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b16:	e02d      	b.n	8007b74 <UART_Start_Receive_IT+0xa4>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	22ff      	movs	r2, #255	; 0xff
 8007b1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b20:	e028      	b.n	8007b74 <UART_Start_Receive_IT+0xa4>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10d      	bne.n	8007b46 <UART_Start_Receive_IT+0x76>
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d104      	bne.n	8007b3c <UART_Start_Receive_IT+0x6c>
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	22ff      	movs	r2, #255	; 0xff
 8007b36:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b3a:	e01b      	b.n	8007b74 <UART_Start_Receive_IT+0xa4>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	227f      	movs	r2, #127	; 0x7f
 8007b40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b44:	e016      	b.n	8007b74 <UART_Start_Receive_IT+0xa4>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b4e:	d10d      	bne.n	8007b6c <UART_Start_Receive_IT+0x9c>
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d104      	bne.n	8007b62 <UART_Start_Receive_IT+0x92>
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	227f      	movs	r2, #127	; 0x7f
 8007b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b60:	e008      	b.n	8007b74 <UART_Start_Receive_IT+0xa4>
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	223f      	movs	r2, #63	; 0x3f
 8007b66:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007b6a:	e003      	b.n	8007b74 <UART_Start_Receive_IT+0xa4>
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2222      	movs	r2, #34	; 0x22
 8007b80:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	3308      	adds	r3, #8
 8007b88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b8c:	e853 3f00 	ldrex	r3, [r3]
 8007b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b94:	f043 0301 	orr.w	r3, r3, #1
 8007b98:	657b      	str	r3, [r7, #84]	; 0x54
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ba2:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ba4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ba8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007bb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d1e5      	bne.n	8007b82 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	689b      	ldr	r3, [r3, #8]
 8007bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bbe:	d107      	bne.n	8007bd0 <UART_Start_Receive_IT+0x100>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	691b      	ldr	r3, [r3, #16]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d103      	bne.n	8007bd0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	4a24      	ldr	r2, [pc, #144]	; (8007c5c <UART_Start_Receive_IT+0x18c>)
 8007bcc:	665a      	str	r2, [r3, #100]	; 0x64
 8007bce:	e002      	b.n	8007bd6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	4a23      	ldr	r2, [pc, #140]	; (8007c60 <UART_Start_Receive_IT+0x190>)
 8007bd4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	2200      	movs	r2, #0
 8007bda:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d019      	beq.n	8007c1a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bee:	e853 3f00 	ldrex	r3, [r3]
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	461a      	mov	r2, r3
 8007c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c04:	637b      	str	r3, [r7, #52]	; 0x34
 8007c06:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c0c:	e841 2300 	strex	r3, r2, [r1]
 8007c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1e6      	bne.n	8007be6 <UART_Start_Receive_IT+0x116>
 8007c18:	e018      	b.n	8007c4c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	e853 3f00 	ldrex	r3, [r3]
 8007c26:	613b      	str	r3, [r7, #16]
   return(result);
 8007c28:	693b      	ldr	r3, [r7, #16]
 8007c2a:	f043 0320 	orr.w	r3, r3, #32
 8007c2e:	653b      	str	r3, [r7, #80]	; 0x50
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	461a      	mov	r2, r3
 8007c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c38:	623b      	str	r3, [r7, #32]
 8007c3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c3c:	69f9      	ldr	r1, [r7, #28]
 8007c3e:	6a3a      	ldr	r2, [r7, #32]
 8007c40:	e841 2300 	strex	r3, r2, [r1]
 8007c44:	61bb      	str	r3, [r7, #24]
   return(result);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d1e6      	bne.n	8007c1a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	375c      	adds	r7, #92	; 0x5c
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	08008083 	.word	0x08008083
 8007c60:	08007f23 	.word	0x08007f23

08007c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b095      	sub	sp, #84	; 0x54
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c74:	e853 3f00 	ldrex	r3, [r3]
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	461a      	mov	r2, r3
 8007c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c8a:	643b      	str	r3, [r7, #64]	; 0x40
 8007c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e6      	bne.n	8007c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	3308      	adds	r3, #8
 8007ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca6:	6a3b      	ldr	r3, [r7, #32]
 8007ca8:	e853 3f00 	ldrex	r3, [r3]
 8007cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8007cae:	69fb      	ldr	r3, [r7, #28]
 8007cb0:	f023 0301 	bic.w	r3, r3, #1
 8007cb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3308      	adds	r3, #8
 8007cbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cc6:	e841 2300 	strex	r3, r2, [r1]
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d1e5      	bne.n	8007c9e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d118      	bne.n	8007d0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	e853 3f00 	ldrex	r3, [r3]
 8007ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	f023 0310 	bic.w	r3, r3, #16
 8007cee:	647b      	str	r3, [r7, #68]	; 0x44
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	461a      	mov	r2, r3
 8007cf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cf8:	61bb      	str	r3, [r7, #24]
 8007cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cfc:	6979      	ldr	r1, [r7, #20]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	e841 2300 	strex	r3, r2, [r1]
 8007d04:	613b      	str	r3, [r7, #16]
   return(result);
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d1e6      	bne.n	8007cda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2220      	movs	r2, #32
 8007d10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2200      	movs	r2, #0
 8007d16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007d1e:	bf00      	nop
 8007d20:	3754      	adds	r7, #84	; 0x54
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr

08007d2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007d2a:	b580      	push	{r7, lr}
 8007d2c:	b084      	sub	sp, #16
 8007d2e:	af00      	add	r7, sp, #0
 8007d30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2200      	movs	r2, #0
 8007d44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007d48:	68f8      	ldr	r0, [r7, #12]
 8007d4a:	f7ff fa71 	bl	8007230 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007d4e:	bf00      	nop
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007d56:	b480      	push	{r7}
 8007d58:	b08f      	sub	sp, #60	; 0x3c
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d62:	2b21      	cmp	r3, #33	; 0x21
 8007d64:	d14d      	bne.n	8007e02 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d132      	bne.n	8007dd8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6a3b      	ldr	r3, [r7, #32]
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d80:	69fb      	ldr	r3, [r7, #28]
 8007d82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d86:	637b      	str	r3, [r7, #52]	; 0x34
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d92:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	e853 3f00 	ldrex	r3, [r3]
 8007db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db8:	633b      	str	r3, [r7, #48]	; 0x30
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc6:	6979      	ldr	r1, [r7, #20]
 8007dc8:	69ba      	ldr	r2, [r7, #24]
 8007dca:	e841 2300 	strex	r3, r2, [r1]
 8007dce:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1e6      	bne.n	8007da4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007dd6:	e014      	b.n	8007e02 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ddc:	781a      	ldrb	r2, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	b292      	uxth	r2, r2
 8007de4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dea:	1c5a      	adds	r2, r3, #1
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007df6:	b29b      	uxth	r3, r3
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007e02:	bf00      	nop
 8007e04:	373c      	adds	r7, #60	; 0x3c
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr

08007e0e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007e0e:	b480      	push	{r7}
 8007e10:	b091      	sub	sp, #68	; 0x44
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e1a:	2b21      	cmp	r3, #33	; 0x21
 8007e1c:	d151      	bne.n	8007ec2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d132      	bne.n	8007e90 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e32:	e853 3f00 	ldrex	r3, [r3]
 8007e36:	623b      	str	r3, [r7, #32]
   return(result);
 8007e38:	6a3b      	ldr	r3, [r7, #32]
 8007e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	461a      	mov	r2, r3
 8007e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e48:	633b      	str	r3, [r7, #48]	; 0x30
 8007e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e4c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e50:	e841 2300 	strex	r3, r2, [r1]
 8007e54:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d1e6      	bne.n	8007e2a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	e853 3f00 	ldrex	r3, [r3]
 8007e68:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e70:	637b      	str	r3, [r7, #52]	; 0x34
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	461a      	mov	r2, r3
 8007e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7e:	69b9      	ldr	r1, [r7, #24]
 8007e80:	69fa      	ldr	r2, [r7, #28]
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	617b      	str	r3, [r7, #20]
   return(result);
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e6      	bne.n	8007e5c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007e8e:	e018      	b.n	8007ec2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e94:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e98:	881a      	ldrh	r2, [r3, #0]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ea2:	b292      	uxth	r2, r2
 8007ea4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eaa:	1c9a      	adds	r2, r3, #2
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8007ec2:	bf00      	nop
 8007ec4:	3744      	adds	r7, #68	; 0x44
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b088      	sub	sp, #32
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eea:	61fb      	str	r3, [r7, #28]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	69fb      	ldr	r3, [r7, #28]
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6979      	ldr	r1, [r7, #20]
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	613b      	str	r3, [r7, #16]
   return(result);
 8007f02:	693b      	ldr	r3, [r7, #16]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e6      	bne.n	8007ed6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2220      	movs	r2, #32
 8007f0c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7ff f981 	bl	800721c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f1a:	bf00      	nop
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	bd80      	pop	{r7, pc}

08007f22 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b096      	sub	sp, #88	; 0x58
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007f30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007f38:	2b22      	cmp	r3, #34	; 0x22
 8007f3a:	f040 8094 	bne.w	8008066 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f44:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007f48:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007f4c:	b2d9      	uxtb	r1, r3
 8007f4e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f58:	400a      	ands	r2, r1
 8007f5a:	b2d2      	uxtb	r2, r2
 8007f5c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f62:	1c5a      	adds	r2, r3, #1
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	3b01      	subs	r3, #1
 8007f72:	b29a      	uxth	r2, r3
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f80:	b29b      	uxth	r3, r3
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d179      	bne.n	800807a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	e853 3f00 	ldrex	r3, [r3]
 8007f92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f9a:	653b      	str	r3, [r7, #80]	; 0x50
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	461a      	mov	r2, r3
 8007fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8007fa6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007faa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007fb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e6      	bne.n	8007f86 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8007fc8:	6a3b      	ldr	r3, [r7, #32]
 8007fca:	f023 0301 	bic.w	r3, r3, #1
 8007fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	3308      	adds	r3, #8
 8007fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fd8:	633a      	str	r2, [r7, #48]	; 0x30
 8007fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fe0:	e841 2300 	strex	r3, r2, [r1]
 8007fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1e5      	bne.n	8007fb8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2220      	movs	r2, #32
 8007ff0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ffc:	2b01      	cmp	r3, #1
 8007ffe:	d12e      	bne.n	800805e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	e853 3f00 	ldrex	r3, [r3]
 8008012:	60fb      	str	r3, [r7, #12]
   return(result);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f023 0310 	bic.w	r3, r3, #16
 800801a:	64bb      	str	r3, [r7, #72]	; 0x48
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	461a      	mov	r2, r3
 8008022:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008024:	61fb      	str	r3, [r7, #28]
 8008026:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008028:	69b9      	ldr	r1, [r7, #24]
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	e841 2300 	strex	r3, r2, [r1]
 8008030:	617b      	str	r3, [r7, #20]
   return(result);
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e6      	bne.n	8008006 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	69db      	ldr	r3, [r3, #28]
 800803e:	f003 0310 	and.w	r3, r3, #16
 8008042:	2b10      	cmp	r3, #16
 8008044:	d103      	bne.n	800804e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2210      	movs	r2, #16
 800804c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008054:	4619      	mov	r1, r3
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f7ff f8f4 	bl	8007244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800805c:	e00d      	b.n	800807a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f7f9 fefe 	bl	8001e60 <HAL_UART_RxCpltCallback>
}
 8008064:	e009      	b.n	800807a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	8b1b      	ldrh	r3, [r3, #24]
 800806c:	b29a      	uxth	r2, r3
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f042 0208 	orr.w	r2, r2, #8
 8008076:	b292      	uxth	r2, r2
 8008078:	831a      	strh	r2, [r3, #24]
}
 800807a:	bf00      	nop
 800807c:	3758      	adds	r7, #88	; 0x58
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}

08008082 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008082:	b580      	push	{r7, lr}
 8008084:	b096      	sub	sp, #88	; 0x58
 8008086:	af00      	add	r7, sp, #0
 8008088:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008090:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008098:	2b22      	cmp	r3, #34	; 0x22
 800809a:	f040 8094 	bne.w	80081c6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80080a4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ac:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80080ae:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80080b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80080b6:	4013      	ands	r3, r2
 80080b8:	b29a      	uxth	r2, r3
 80080ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080bc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080c2:	1c9a      	adds	r2, r3, #2
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	3b01      	subs	r3, #1
 80080d2:	b29a      	uxth	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80080e0:	b29b      	uxth	r3, r3
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d179      	bne.n	80081da <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80080f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80080fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	461a      	mov	r2, r3
 8008102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008104:	643b      	str	r3, [r7, #64]	; 0x40
 8008106:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800810a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e6      	bne.n	80080e6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	3308      	adds	r3, #8
 800811e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	6a3b      	ldr	r3, [r7, #32]
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	61fb      	str	r3, [r7, #28]
   return(result);
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	f023 0301 	bic.w	r3, r3, #1
 800812e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	3308      	adds	r3, #8
 8008136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008138:	62fa      	str	r2, [r7, #44]	; 0x2c
 800813a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800813e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2220      	movs	r2, #32
 8008150:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800815c:	2b01      	cmp	r3, #1
 800815e:	d12e      	bne.n	80081be <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	60bb      	str	r3, [r7, #8]
   return(result);
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f023 0310 	bic.w	r3, r3, #16
 800817a:	647b      	str	r3, [r7, #68]	; 0x44
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008184:	61bb      	str	r3, [r7, #24]
 8008186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6979      	ldr	r1, [r7, #20]
 800818a:	69ba      	ldr	r2, [r7, #24]
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	613b      	str	r3, [r7, #16]
   return(result);
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e6      	bne.n	8008166 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f003 0310 	and.w	r3, r3, #16
 80081a2:	2b10      	cmp	r3, #16
 80081a4:	d103      	bne.n	80081ae <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2210      	movs	r2, #16
 80081ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80081b4:	4619      	mov	r1, r3
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f7ff f844 	bl	8007244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081bc:	e00d      	b.n	80081da <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7f9 fe4e 	bl	8001e60 <HAL_UART_RxCpltCallback>
}
 80081c4:	e009      	b.n	80081da <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	8b1b      	ldrh	r3, [r3, #24]
 80081cc:	b29a      	uxth	r2, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f042 0208 	orr.w	r2, r2, #8
 80081d6:	b292      	uxth	r2, r2
 80081d8:	831a      	strh	r2, [r3, #24]
}
 80081da:	bf00      	nop
 80081dc:	3758      	adds	r7, #88	; 0x58
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80081ea:	bf00      	nop
 80081ec:	370c      	adds	r7, #12
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
	...

080081f8 <__errno>:
 80081f8:	4b01      	ldr	r3, [pc, #4]	; (8008200 <__errno+0x8>)
 80081fa:	6818      	ldr	r0, [r3, #0]
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	200001fc 	.word	0x200001fc

08008204 <__libc_init_array>:
 8008204:	b570      	push	{r4, r5, r6, lr}
 8008206:	4d0d      	ldr	r5, [pc, #52]	; (800823c <__libc_init_array+0x38>)
 8008208:	4c0d      	ldr	r4, [pc, #52]	; (8008240 <__libc_init_array+0x3c>)
 800820a:	1b64      	subs	r4, r4, r5
 800820c:	10a4      	asrs	r4, r4, #2
 800820e:	2600      	movs	r6, #0
 8008210:	42a6      	cmp	r6, r4
 8008212:	d109      	bne.n	8008228 <__libc_init_array+0x24>
 8008214:	4d0b      	ldr	r5, [pc, #44]	; (8008244 <__libc_init_array+0x40>)
 8008216:	4c0c      	ldr	r4, [pc, #48]	; (8008248 <__libc_init_array+0x44>)
 8008218:	f002 ff56 	bl	800b0c8 <_init>
 800821c:	1b64      	subs	r4, r4, r5
 800821e:	10a4      	asrs	r4, r4, #2
 8008220:	2600      	movs	r6, #0
 8008222:	42a6      	cmp	r6, r4
 8008224:	d105      	bne.n	8008232 <__libc_init_array+0x2e>
 8008226:	bd70      	pop	{r4, r5, r6, pc}
 8008228:	f855 3b04 	ldr.w	r3, [r5], #4
 800822c:	4798      	blx	r3
 800822e:	3601      	adds	r6, #1
 8008230:	e7ee      	b.n	8008210 <__libc_init_array+0xc>
 8008232:	f855 3b04 	ldr.w	r3, [r5], #4
 8008236:	4798      	blx	r3
 8008238:	3601      	adds	r6, #1
 800823a:	e7f2      	b.n	8008222 <__libc_init_array+0x1e>
 800823c:	0800b684 	.word	0x0800b684
 8008240:	0800b684 	.word	0x0800b684
 8008244:	0800b684 	.word	0x0800b684
 8008248:	0800b688 	.word	0x0800b688

0800824c <memcpy>:
 800824c:	440a      	add	r2, r1
 800824e:	4291      	cmp	r1, r2
 8008250:	f100 33ff 	add.w	r3, r0, #4294967295
 8008254:	d100      	bne.n	8008258 <memcpy+0xc>
 8008256:	4770      	bx	lr
 8008258:	b510      	push	{r4, lr}
 800825a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800825e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008262:	4291      	cmp	r1, r2
 8008264:	d1f9      	bne.n	800825a <memcpy+0xe>
 8008266:	bd10      	pop	{r4, pc}

08008268 <memset>:
 8008268:	4402      	add	r2, r0
 800826a:	4603      	mov	r3, r0
 800826c:	4293      	cmp	r3, r2
 800826e:	d100      	bne.n	8008272 <memset+0xa>
 8008270:	4770      	bx	lr
 8008272:	f803 1b01 	strb.w	r1, [r3], #1
 8008276:	e7f9      	b.n	800826c <memset+0x4>

08008278 <__cvt>:
 8008278:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800827c:	ec55 4b10 	vmov	r4, r5, d0
 8008280:	2d00      	cmp	r5, #0
 8008282:	460e      	mov	r6, r1
 8008284:	4619      	mov	r1, r3
 8008286:	462b      	mov	r3, r5
 8008288:	bfbb      	ittet	lt
 800828a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800828e:	461d      	movlt	r5, r3
 8008290:	2300      	movge	r3, #0
 8008292:	232d      	movlt	r3, #45	; 0x2d
 8008294:	700b      	strb	r3, [r1, #0]
 8008296:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008298:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800829c:	4691      	mov	r9, r2
 800829e:	f023 0820 	bic.w	r8, r3, #32
 80082a2:	bfbc      	itt	lt
 80082a4:	4622      	movlt	r2, r4
 80082a6:	4614      	movlt	r4, r2
 80082a8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082ac:	d005      	beq.n	80082ba <__cvt+0x42>
 80082ae:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80082b2:	d100      	bne.n	80082b6 <__cvt+0x3e>
 80082b4:	3601      	adds	r6, #1
 80082b6:	2102      	movs	r1, #2
 80082b8:	e000      	b.n	80082bc <__cvt+0x44>
 80082ba:	2103      	movs	r1, #3
 80082bc:	ab03      	add	r3, sp, #12
 80082be:	9301      	str	r3, [sp, #4]
 80082c0:	ab02      	add	r3, sp, #8
 80082c2:	9300      	str	r3, [sp, #0]
 80082c4:	ec45 4b10 	vmov	d0, r4, r5
 80082c8:	4653      	mov	r3, sl
 80082ca:	4632      	mov	r2, r6
 80082cc:	f000 fe4c 	bl	8008f68 <_dtoa_r>
 80082d0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80082d4:	4607      	mov	r7, r0
 80082d6:	d102      	bne.n	80082de <__cvt+0x66>
 80082d8:	f019 0f01 	tst.w	r9, #1
 80082dc:	d022      	beq.n	8008324 <__cvt+0xac>
 80082de:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80082e2:	eb07 0906 	add.w	r9, r7, r6
 80082e6:	d110      	bne.n	800830a <__cvt+0x92>
 80082e8:	783b      	ldrb	r3, [r7, #0]
 80082ea:	2b30      	cmp	r3, #48	; 0x30
 80082ec:	d10a      	bne.n	8008304 <__cvt+0x8c>
 80082ee:	2200      	movs	r2, #0
 80082f0:	2300      	movs	r3, #0
 80082f2:	4620      	mov	r0, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7f8 fbe7 	bl	8000ac8 <__aeabi_dcmpeq>
 80082fa:	b918      	cbnz	r0, 8008304 <__cvt+0x8c>
 80082fc:	f1c6 0601 	rsb	r6, r6, #1
 8008300:	f8ca 6000 	str.w	r6, [sl]
 8008304:	f8da 3000 	ldr.w	r3, [sl]
 8008308:	4499      	add	r9, r3
 800830a:	2200      	movs	r2, #0
 800830c:	2300      	movs	r3, #0
 800830e:	4620      	mov	r0, r4
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008316:	b108      	cbz	r0, 800831c <__cvt+0xa4>
 8008318:	f8cd 900c 	str.w	r9, [sp, #12]
 800831c:	2230      	movs	r2, #48	; 0x30
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	454b      	cmp	r3, r9
 8008322:	d307      	bcc.n	8008334 <__cvt+0xbc>
 8008324:	9b03      	ldr	r3, [sp, #12]
 8008326:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008328:	1bdb      	subs	r3, r3, r7
 800832a:	4638      	mov	r0, r7
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	b004      	add	sp, #16
 8008330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008334:	1c59      	adds	r1, r3, #1
 8008336:	9103      	str	r1, [sp, #12]
 8008338:	701a      	strb	r2, [r3, #0]
 800833a:	e7f0      	b.n	800831e <__cvt+0xa6>

0800833c <__exponent>:
 800833c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800833e:	4603      	mov	r3, r0
 8008340:	2900      	cmp	r1, #0
 8008342:	bfb8      	it	lt
 8008344:	4249      	neglt	r1, r1
 8008346:	f803 2b02 	strb.w	r2, [r3], #2
 800834a:	bfb4      	ite	lt
 800834c:	222d      	movlt	r2, #45	; 0x2d
 800834e:	222b      	movge	r2, #43	; 0x2b
 8008350:	2909      	cmp	r1, #9
 8008352:	7042      	strb	r2, [r0, #1]
 8008354:	dd2a      	ble.n	80083ac <__exponent+0x70>
 8008356:	f10d 0407 	add.w	r4, sp, #7
 800835a:	46a4      	mov	ip, r4
 800835c:	270a      	movs	r7, #10
 800835e:	46a6      	mov	lr, r4
 8008360:	460a      	mov	r2, r1
 8008362:	fb91 f6f7 	sdiv	r6, r1, r7
 8008366:	fb07 1516 	mls	r5, r7, r6, r1
 800836a:	3530      	adds	r5, #48	; 0x30
 800836c:	2a63      	cmp	r2, #99	; 0x63
 800836e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008376:	4631      	mov	r1, r6
 8008378:	dcf1      	bgt.n	800835e <__exponent+0x22>
 800837a:	3130      	adds	r1, #48	; 0x30
 800837c:	f1ae 0502 	sub.w	r5, lr, #2
 8008380:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008384:	1c44      	adds	r4, r0, #1
 8008386:	4629      	mov	r1, r5
 8008388:	4561      	cmp	r1, ip
 800838a:	d30a      	bcc.n	80083a2 <__exponent+0x66>
 800838c:	f10d 0209 	add.w	r2, sp, #9
 8008390:	eba2 020e 	sub.w	r2, r2, lr
 8008394:	4565      	cmp	r5, ip
 8008396:	bf88      	it	hi
 8008398:	2200      	movhi	r2, #0
 800839a:	4413      	add	r3, r2
 800839c:	1a18      	subs	r0, r3, r0
 800839e:	b003      	add	sp, #12
 80083a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80083a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80083aa:	e7ed      	b.n	8008388 <__exponent+0x4c>
 80083ac:	2330      	movs	r3, #48	; 0x30
 80083ae:	3130      	adds	r1, #48	; 0x30
 80083b0:	7083      	strb	r3, [r0, #2]
 80083b2:	70c1      	strb	r1, [r0, #3]
 80083b4:	1d03      	adds	r3, r0, #4
 80083b6:	e7f1      	b.n	800839c <__exponent+0x60>

080083b8 <_printf_float>:
 80083b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083bc:	ed2d 8b02 	vpush	{d8}
 80083c0:	b08d      	sub	sp, #52	; 0x34
 80083c2:	460c      	mov	r4, r1
 80083c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80083c8:	4616      	mov	r6, r2
 80083ca:	461f      	mov	r7, r3
 80083cc:	4605      	mov	r5, r0
 80083ce:	f001 fd6f 	bl	8009eb0 <_localeconv_r>
 80083d2:	f8d0 a000 	ldr.w	sl, [r0]
 80083d6:	4650      	mov	r0, sl
 80083d8:	f7f7 fefa 	bl	80001d0 <strlen>
 80083dc:	2300      	movs	r3, #0
 80083de:	930a      	str	r3, [sp, #40]	; 0x28
 80083e0:	6823      	ldr	r3, [r4, #0]
 80083e2:	9305      	str	r3, [sp, #20]
 80083e4:	f8d8 3000 	ldr.w	r3, [r8]
 80083e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80083ec:	3307      	adds	r3, #7
 80083ee:	f023 0307 	bic.w	r3, r3, #7
 80083f2:	f103 0208 	add.w	r2, r3, #8
 80083f6:	f8c8 2000 	str.w	r2, [r8]
 80083fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083fe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008402:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008406:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800840a:	9307      	str	r3, [sp, #28]
 800840c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008410:	ee08 0a10 	vmov	s16, r0
 8008414:	4b9f      	ldr	r3, [pc, #636]	; (8008694 <_printf_float+0x2dc>)
 8008416:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800841a:	f04f 32ff 	mov.w	r2, #4294967295
 800841e:	f7f8 fb85 	bl	8000b2c <__aeabi_dcmpun>
 8008422:	bb88      	cbnz	r0, 8008488 <_printf_float+0xd0>
 8008424:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008428:	4b9a      	ldr	r3, [pc, #616]	; (8008694 <_printf_float+0x2dc>)
 800842a:	f04f 32ff 	mov.w	r2, #4294967295
 800842e:	f7f8 fb5f 	bl	8000af0 <__aeabi_dcmple>
 8008432:	bb48      	cbnz	r0, 8008488 <_printf_float+0xd0>
 8008434:	2200      	movs	r2, #0
 8008436:	2300      	movs	r3, #0
 8008438:	4640      	mov	r0, r8
 800843a:	4649      	mov	r1, r9
 800843c:	f7f8 fb4e 	bl	8000adc <__aeabi_dcmplt>
 8008440:	b110      	cbz	r0, 8008448 <_printf_float+0x90>
 8008442:	232d      	movs	r3, #45	; 0x2d
 8008444:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008448:	4b93      	ldr	r3, [pc, #588]	; (8008698 <_printf_float+0x2e0>)
 800844a:	4894      	ldr	r0, [pc, #592]	; (800869c <_printf_float+0x2e4>)
 800844c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008450:	bf94      	ite	ls
 8008452:	4698      	movls	r8, r3
 8008454:	4680      	movhi	r8, r0
 8008456:	2303      	movs	r3, #3
 8008458:	6123      	str	r3, [r4, #16]
 800845a:	9b05      	ldr	r3, [sp, #20]
 800845c:	f023 0204 	bic.w	r2, r3, #4
 8008460:	6022      	str	r2, [r4, #0]
 8008462:	f04f 0900 	mov.w	r9, #0
 8008466:	9700      	str	r7, [sp, #0]
 8008468:	4633      	mov	r3, r6
 800846a:	aa0b      	add	r2, sp, #44	; 0x2c
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f000 f9d8 	bl	8008824 <_printf_common>
 8008474:	3001      	adds	r0, #1
 8008476:	f040 8090 	bne.w	800859a <_printf_float+0x1e2>
 800847a:	f04f 30ff 	mov.w	r0, #4294967295
 800847e:	b00d      	add	sp, #52	; 0x34
 8008480:	ecbd 8b02 	vpop	{d8}
 8008484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008488:	4642      	mov	r2, r8
 800848a:	464b      	mov	r3, r9
 800848c:	4640      	mov	r0, r8
 800848e:	4649      	mov	r1, r9
 8008490:	f7f8 fb4c 	bl	8000b2c <__aeabi_dcmpun>
 8008494:	b140      	cbz	r0, 80084a8 <_printf_float+0xf0>
 8008496:	464b      	mov	r3, r9
 8008498:	2b00      	cmp	r3, #0
 800849a:	bfbc      	itt	lt
 800849c:	232d      	movlt	r3, #45	; 0x2d
 800849e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80084a2:	487f      	ldr	r0, [pc, #508]	; (80086a0 <_printf_float+0x2e8>)
 80084a4:	4b7f      	ldr	r3, [pc, #508]	; (80086a4 <_printf_float+0x2ec>)
 80084a6:	e7d1      	b.n	800844c <_printf_float+0x94>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80084ae:	9206      	str	r2, [sp, #24]
 80084b0:	1c5a      	adds	r2, r3, #1
 80084b2:	d13f      	bne.n	8008534 <_printf_float+0x17c>
 80084b4:	2306      	movs	r3, #6
 80084b6:	6063      	str	r3, [r4, #4]
 80084b8:	9b05      	ldr	r3, [sp, #20]
 80084ba:	6861      	ldr	r1, [r4, #4]
 80084bc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80084c0:	2300      	movs	r3, #0
 80084c2:	9303      	str	r3, [sp, #12]
 80084c4:	ab0a      	add	r3, sp, #40	; 0x28
 80084c6:	e9cd b301 	strd	fp, r3, [sp, #4]
 80084ca:	ab09      	add	r3, sp, #36	; 0x24
 80084cc:	ec49 8b10 	vmov	d0, r8, r9
 80084d0:	9300      	str	r3, [sp, #0]
 80084d2:	6022      	str	r2, [r4, #0]
 80084d4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80084d8:	4628      	mov	r0, r5
 80084da:	f7ff fecd 	bl	8008278 <__cvt>
 80084de:	9b06      	ldr	r3, [sp, #24]
 80084e0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084e2:	2b47      	cmp	r3, #71	; 0x47
 80084e4:	4680      	mov	r8, r0
 80084e6:	d108      	bne.n	80084fa <_printf_float+0x142>
 80084e8:	1cc8      	adds	r0, r1, #3
 80084ea:	db02      	blt.n	80084f2 <_printf_float+0x13a>
 80084ec:	6863      	ldr	r3, [r4, #4]
 80084ee:	4299      	cmp	r1, r3
 80084f0:	dd41      	ble.n	8008576 <_printf_float+0x1be>
 80084f2:	f1ab 0b02 	sub.w	fp, fp, #2
 80084f6:	fa5f fb8b 	uxtb.w	fp, fp
 80084fa:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80084fe:	d820      	bhi.n	8008542 <_printf_float+0x18a>
 8008500:	3901      	subs	r1, #1
 8008502:	465a      	mov	r2, fp
 8008504:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008508:	9109      	str	r1, [sp, #36]	; 0x24
 800850a:	f7ff ff17 	bl	800833c <__exponent>
 800850e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008510:	1813      	adds	r3, r2, r0
 8008512:	2a01      	cmp	r2, #1
 8008514:	4681      	mov	r9, r0
 8008516:	6123      	str	r3, [r4, #16]
 8008518:	dc02      	bgt.n	8008520 <_printf_float+0x168>
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	07d2      	lsls	r2, r2, #31
 800851e:	d501      	bpl.n	8008524 <_printf_float+0x16c>
 8008520:	3301      	adds	r3, #1
 8008522:	6123      	str	r3, [r4, #16]
 8008524:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008528:	2b00      	cmp	r3, #0
 800852a:	d09c      	beq.n	8008466 <_printf_float+0xae>
 800852c:	232d      	movs	r3, #45	; 0x2d
 800852e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008532:	e798      	b.n	8008466 <_printf_float+0xae>
 8008534:	9a06      	ldr	r2, [sp, #24]
 8008536:	2a47      	cmp	r2, #71	; 0x47
 8008538:	d1be      	bne.n	80084b8 <_printf_float+0x100>
 800853a:	2b00      	cmp	r3, #0
 800853c:	d1bc      	bne.n	80084b8 <_printf_float+0x100>
 800853e:	2301      	movs	r3, #1
 8008540:	e7b9      	b.n	80084b6 <_printf_float+0xfe>
 8008542:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008546:	d118      	bne.n	800857a <_printf_float+0x1c2>
 8008548:	2900      	cmp	r1, #0
 800854a:	6863      	ldr	r3, [r4, #4]
 800854c:	dd0b      	ble.n	8008566 <_printf_float+0x1ae>
 800854e:	6121      	str	r1, [r4, #16]
 8008550:	b913      	cbnz	r3, 8008558 <_printf_float+0x1a0>
 8008552:	6822      	ldr	r2, [r4, #0]
 8008554:	07d0      	lsls	r0, r2, #31
 8008556:	d502      	bpl.n	800855e <_printf_float+0x1a6>
 8008558:	3301      	adds	r3, #1
 800855a:	440b      	add	r3, r1
 800855c:	6123      	str	r3, [r4, #16]
 800855e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008560:	f04f 0900 	mov.w	r9, #0
 8008564:	e7de      	b.n	8008524 <_printf_float+0x16c>
 8008566:	b913      	cbnz	r3, 800856e <_printf_float+0x1b6>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	07d2      	lsls	r2, r2, #31
 800856c:	d501      	bpl.n	8008572 <_printf_float+0x1ba>
 800856e:	3302      	adds	r3, #2
 8008570:	e7f4      	b.n	800855c <_printf_float+0x1a4>
 8008572:	2301      	movs	r3, #1
 8008574:	e7f2      	b.n	800855c <_printf_float+0x1a4>
 8008576:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800857a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800857c:	4299      	cmp	r1, r3
 800857e:	db05      	blt.n	800858c <_printf_float+0x1d4>
 8008580:	6823      	ldr	r3, [r4, #0]
 8008582:	6121      	str	r1, [r4, #16]
 8008584:	07d8      	lsls	r0, r3, #31
 8008586:	d5ea      	bpl.n	800855e <_printf_float+0x1a6>
 8008588:	1c4b      	adds	r3, r1, #1
 800858a:	e7e7      	b.n	800855c <_printf_float+0x1a4>
 800858c:	2900      	cmp	r1, #0
 800858e:	bfd4      	ite	le
 8008590:	f1c1 0202 	rsble	r2, r1, #2
 8008594:	2201      	movgt	r2, #1
 8008596:	4413      	add	r3, r2
 8008598:	e7e0      	b.n	800855c <_printf_float+0x1a4>
 800859a:	6823      	ldr	r3, [r4, #0]
 800859c:	055a      	lsls	r2, r3, #21
 800859e:	d407      	bmi.n	80085b0 <_printf_float+0x1f8>
 80085a0:	6923      	ldr	r3, [r4, #16]
 80085a2:	4642      	mov	r2, r8
 80085a4:	4631      	mov	r1, r6
 80085a6:	4628      	mov	r0, r5
 80085a8:	47b8      	blx	r7
 80085aa:	3001      	adds	r0, #1
 80085ac:	d12c      	bne.n	8008608 <_printf_float+0x250>
 80085ae:	e764      	b.n	800847a <_printf_float+0xc2>
 80085b0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085b4:	f240 80e0 	bls.w	8008778 <_printf_float+0x3c0>
 80085b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80085bc:	2200      	movs	r2, #0
 80085be:	2300      	movs	r3, #0
 80085c0:	f7f8 fa82 	bl	8000ac8 <__aeabi_dcmpeq>
 80085c4:	2800      	cmp	r0, #0
 80085c6:	d034      	beq.n	8008632 <_printf_float+0x27a>
 80085c8:	4a37      	ldr	r2, [pc, #220]	; (80086a8 <_printf_float+0x2f0>)
 80085ca:	2301      	movs	r3, #1
 80085cc:	4631      	mov	r1, r6
 80085ce:	4628      	mov	r0, r5
 80085d0:	47b8      	blx	r7
 80085d2:	3001      	adds	r0, #1
 80085d4:	f43f af51 	beq.w	800847a <_printf_float+0xc2>
 80085d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80085dc:	429a      	cmp	r2, r3
 80085de:	db02      	blt.n	80085e6 <_printf_float+0x22e>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	07d8      	lsls	r0, r3, #31
 80085e4:	d510      	bpl.n	8008608 <_printf_float+0x250>
 80085e6:	ee18 3a10 	vmov	r3, s16
 80085ea:	4652      	mov	r2, sl
 80085ec:	4631      	mov	r1, r6
 80085ee:	4628      	mov	r0, r5
 80085f0:	47b8      	blx	r7
 80085f2:	3001      	adds	r0, #1
 80085f4:	f43f af41 	beq.w	800847a <_printf_float+0xc2>
 80085f8:	f04f 0800 	mov.w	r8, #0
 80085fc:	f104 091a 	add.w	r9, r4, #26
 8008600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008602:	3b01      	subs	r3, #1
 8008604:	4543      	cmp	r3, r8
 8008606:	dc09      	bgt.n	800861c <_printf_float+0x264>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	079b      	lsls	r3, r3, #30
 800860c:	f100 8105 	bmi.w	800881a <_printf_float+0x462>
 8008610:	68e0      	ldr	r0, [r4, #12]
 8008612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008614:	4298      	cmp	r0, r3
 8008616:	bfb8      	it	lt
 8008618:	4618      	movlt	r0, r3
 800861a:	e730      	b.n	800847e <_printf_float+0xc6>
 800861c:	2301      	movs	r3, #1
 800861e:	464a      	mov	r2, r9
 8008620:	4631      	mov	r1, r6
 8008622:	4628      	mov	r0, r5
 8008624:	47b8      	blx	r7
 8008626:	3001      	adds	r0, #1
 8008628:	f43f af27 	beq.w	800847a <_printf_float+0xc2>
 800862c:	f108 0801 	add.w	r8, r8, #1
 8008630:	e7e6      	b.n	8008600 <_printf_float+0x248>
 8008632:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008634:	2b00      	cmp	r3, #0
 8008636:	dc39      	bgt.n	80086ac <_printf_float+0x2f4>
 8008638:	4a1b      	ldr	r2, [pc, #108]	; (80086a8 <_printf_float+0x2f0>)
 800863a:	2301      	movs	r3, #1
 800863c:	4631      	mov	r1, r6
 800863e:	4628      	mov	r0, r5
 8008640:	47b8      	blx	r7
 8008642:	3001      	adds	r0, #1
 8008644:	f43f af19 	beq.w	800847a <_printf_float+0xc2>
 8008648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800864c:	4313      	orrs	r3, r2
 800864e:	d102      	bne.n	8008656 <_printf_float+0x29e>
 8008650:	6823      	ldr	r3, [r4, #0]
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	d5d8      	bpl.n	8008608 <_printf_float+0x250>
 8008656:	ee18 3a10 	vmov	r3, s16
 800865a:	4652      	mov	r2, sl
 800865c:	4631      	mov	r1, r6
 800865e:	4628      	mov	r0, r5
 8008660:	47b8      	blx	r7
 8008662:	3001      	adds	r0, #1
 8008664:	f43f af09 	beq.w	800847a <_printf_float+0xc2>
 8008668:	f04f 0900 	mov.w	r9, #0
 800866c:	f104 0a1a 	add.w	sl, r4, #26
 8008670:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008672:	425b      	negs	r3, r3
 8008674:	454b      	cmp	r3, r9
 8008676:	dc01      	bgt.n	800867c <_printf_float+0x2c4>
 8008678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867a:	e792      	b.n	80085a2 <_printf_float+0x1ea>
 800867c:	2301      	movs	r3, #1
 800867e:	4652      	mov	r2, sl
 8008680:	4631      	mov	r1, r6
 8008682:	4628      	mov	r0, r5
 8008684:	47b8      	blx	r7
 8008686:	3001      	adds	r0, #1
 8008688:	f43f aef7 	beq.w	800847a <_printf_float+0xc2>
 800868c:	f109 0901 	add.w	r9, r9, #1
 8008690:	e7ee      	b.n	8008670 <_printf_float+0x2b8>
 8008692:	bf00      	nop
 8008694:	7fefffff 	.word	0x7fefffff
 8008698:	0800b29c 	.word	0x0800b29c
 800869c:	0800b2a0 	.word	0x0800b2a0
 80086a0:	0800b2a8 	.word	0x0800b2a8
 80086a4:	0800b2a4 	.word	0x0800b2a4
 80086a8:	0800b2ac 	.word	0x0800b2ac
 80086ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086b0:	429a      	cmp	r2, r3
 80086b2:	bfa8      	it	ge
 80086b4:	461a      	movge	r2, r3
 80086b6:	2a00      	cmp	r2, #0
 80086b8:	4691      	mov	r9, r2
 80086ba:	dc37      	bgt.n	800872c <_printf_float+0x374>
 80086bc:	f04f 0b00 	mov.w	fp, #0
 80086c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80086c4:	f104 021a 	add.w	r2, r4, #26
 80086c8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80086ca:	9305      	str	r3, [sp, #20]
 80086cc:	eba3 0309 	sub.w	r3, r3, r9
 80086d0:	455b      	cmp	r3, fp
 80086d2:	dc33      	bgt.n	800873c <_printf_float+0x384>
 80086d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086d8:	429a      	cmp	r2, r3
 80086da:	db3b      	blt.n	8008754 <_printf_float+0x39c>
 80086dc:	6823      	ldr	r3, [r4, #0]
 80086de:	07da      	lsls	r2, r3, #31
 80086e0:	d438      	bmi.n	8008754 <_printf_float+0x39c>
 80086e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80086e4:	9b05      	ldr	r3, [sp, #20]
 80086e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	eba2 0901 	sub.w	r9, r2, r1
 80086ee:	4599      	cmp	r9, r3
 80086f0:	bfa8      	it	ge
 80086f2:	4699      	movge	r9, r3
 80086f4:	f1b9 0f00 	cmp.w	r9, #0
 80086f8:	dc35      	bgt.n	8008766 <_printf_float+0x3ae>
 80086fa:	f04f 0800 	mov.w	r8, #0
 80086fe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008702:	f104 0a1a 	add.w	sl, r4, #26
 8008706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	eba3 0309 	sub.w	r3, r3, r9
 8008710:	4543      	cmp	r3, r8
 8008712:	f77f af79 	ble.w	8008608 <_printf_float+0x250>
 8008716:	2301      	movs	r3, #1
 8008718:	4652      	mov	r2, sl
 800871a:	4631      	mov	r1, r6
 800871c:	4628      	mov	r0, r5
 800871e:	47b8      	blx	r7
 8008720:	3001      	adds	r0, #1
 8008722:	f43f aeaa 	beq.w	800847a <_printf_float+0xc2>
 8008726:	f108 0801 	add.w	r8, r8, #1
 800872a:	e7ec      	b.n	8008706 <_printf_float+0x34e>
 800872c:	4613      	mov	r3, r2
 800872e:	4631      	mov	r1, r6
 8008730:	4642      	mov	r2, r8
 8008732:	4628      	mov	r0, r5
 8008734:	47b8      	blx	r7
 8008736:	3001      	adds	r0, #1
 8008738:	d1c0      	bne.n	80086bc <_printf_float+0x304>
 800873a:	e69e      	b.n	800847a <_printf_float+0xc2>
 800873c:	2301      	movs	r3, #1
 800873e:	4631      	mov	r1, r6
 8008740:	4628      	mov	r0, r5
 8008742:	9205      	str	r2, [sp, #20]
 8008744:	47b8      	blx	r7
 8008746:	3001      	adds	r0, #1
 8008748:	f43f ae97 	beq.w	800847a <_printf_float+0xc2>
 800874c:	9a05      	ldr	r2, [sp, #20]
 800874e:	f10b 0b01 	add.w	fp, fp, #1
 8008752:	e7b9      	b.n	80086c8 <_printf_float+0x310>
 8008754:	ee18 3a10 	vmov	r3, s16
 8008758:	4652      	mov	r2, sl
 800875a:	4631      	mov	r1, r6
 800875c:	4628      	mov	r0, r5
 800875e:	47b8      	blx	r7
 8008760:	3001      	adds	r0, #1
 8008762:	d1be      	bne.n	80086e2 <_printf_float+0x32a>
 8008764:	e689      	b.n	800847a <_printf_float+0xc2>
 8008766:	9a05      	ldr	r2, [sp, #20]
 8008768:	464b      	mov	r3, r9
 800876a:	4442      	add	r2, r8
 800876c:	4631      	mov	r1, r6
 800876e:	4628      	mov	r0, r5
 8008770:	47b8      	blx	r7
 8008772:	3001      	adds	r0, #1
 8008774:	d1c1      	bne.n	80086fa <_printf_float+0x342>
 8008776:	e680      	b.n	800847a <_printf_float+0xc2>
 8008778:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800877a:	2a01      	cmp	r2, #1
 800877c:	dc01      	bgt.n	8008782 <_printf_float+0x3ca>
 800877e:	07db      	lsls	r3, r3, #31
 8008780:	d538      	bpl.n	80087f4 <_printf_float+0x43c>
 8008782:	2301      	movs	r3, #1
 8008784:	4642      	mov	r2, r8
 8008786:	4631      	mov	r1, r6
 8008788:	4628      	mov	r0, r5
 800878a:	47b8      	blx	r7
 800878c:	3001      	adds	r0, #1
 800878e:	f43f ae74 	beq.w	800847a <_printf_float+0xc2>
 8008792:	ee18 3a10 	vmov	r3, s16
 8008796:	4652      	mov	r2, sl
 8008798:	4631      	mov	r1, r6
 800879a:	4628      	mov	r0, r5
 800879c:	47b8      	blx	r7
 800879e:	3001      	adds	r0, #1
 80087a0:	f43f ae6b 	beq.w	800847a <_printf_float+0xc2>
 80087a4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80087a8:	2200      	movs	r2, #0
 80087aa:	2300      	movs	r3, #0
 80087ac:	f7f8 f98c 	bl	8000ac8 <__aeabi_dcmpeq>
 80087b0:	b9d8      	cbnz	r0, 80087ea <_printf_float+0x432>
 80087b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087b4:	f108 0201 	add.w	r2, r8, #1
 80087b8:	3b01      	subs	r3, #1
 80087ba:	4631      	mov	r1, r6
 80087bc:	4628      	mov	r0, r5
 80087be:	47b8      	blx	r7
 80087c0:	3001      	adds	r0, #1
 80087c2:	d10e      	bne.n	80087e2 <_printf_float+0x42a>
 80087c4:	e659      	b.n	800847a <_printf_float+0xc2>
 80087c6:	2301      	movs	r3, #1
 80087c8:	4652      	mov	r2, sl
 80087ca:	4631      	mov	r1, r6
 80087cc:	4628      	mov	r0, r5
 80087ce:	47b8      	blx	r7
 80087d0:	3001      	adds	r0, #1
 80087d2:	f43f ae52 	beq.w	800847a <_printf_float+0xc2>
 80087d6:	f108 0801 	add.w	r8, r8, #1
 80087da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087dc:	3b01      	subs	r3, #1
 80087de:	4543      	cmp	r3, r8
 80087e0:	dcf1      	bgt.n	80087c6 <_printf_float+0x40e>
 80087e2:	464b      	mov	r3, r9
 80087e4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80087e8:	e6dc      	b.n	80085a4 <_printf_float+0x1ec>
 80087ea:	f04f 0800 	mov.w	r8, #0
 80087ee:	f104 0a1a 	add.w	sl, r4, #26
 80087f2:	e7f2      	b.n	80087da <_printf_float+0x422>
 80087f4:	2301      	movs	r3, #1
 80087f6:	4642      	mov	r2, r8
 80087f8:	e7df      	b.n	80087ba <_printf_float+0x402>
 80087fa:	2301      	movs	r3, #1
 80087fc:	464a      	mov	r2, r9
 80087fe:	4631      	mov	r1, r6
 8008800:	4628      	mov	r0, r5
 8008802:	47b8      	blx	r7
 8008804:	3001      	adds	r0, #1
 8008806:	f43f ae38 	beq.w	800847a <_printf_float+0xc2>
 800880a:	f108 0801 	add.w	r8, r8, #1
 800880e:	68e3      	ldr	r3, [r4, #12]
 8008810:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008812:	1a5b      	subs	r3, r3, r1
 8008814:	4543      	cmp	r3, r8
 8008816:	dcf0      	bgt.n	80087fa <_printf_float+0x442>
 8008818:	e6fa      	b.n	8008610 <_printf_float+0x258>
 800881a:	f04f 0800 	mov.w	r8, #0
 800881e:	f104 0919 	add.w	r9, r4, #25
 8008822:	e7f4      	b.n	800880e <_printf_float+0x456>

08008824 <_printf_common>:
 8008824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008828:	4616      	mov	r6, r2
 800882a:	4699      	mov	r9, r3
 800882c:	688a      	ldr	r2, [r1, #8]
 800882e:	690b      	ldr	r3, [r1, #16]
 8008830:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008834:	4293      	cmp	r3, r2
 8008836:	bfb8      	it	lt
 8008838:	4613      	movlt	r3, r2
 800883a:	6033      	str	r3, [r6, #0]
 800883c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008840:	4607      	mov	r7, r0
 8008842:	460c      	mov	r4, r1
 8008844:	b10a      	cbz	r2, 800884a <_printf_common+0x26>
 8008846:	3301      	adds	r3, #1
 8008848:	6033      	str	r3, [r6, #0]
 800884a:	6823      	ldr	r3, [r4, #0]
 800884c:	0699      	lsls	r1, r3, #26
 800884e:	bf42      	ittt	mi
 8008850:	6833      	ldrmi	r3, [r6, #0]
 8008852:	3302      	addmi	r3, #2
 8008854:	6033      	strmi	r3, [r6, #0]
 8008856:	6825      	ldr	r5, [r4, #0]
 8008858:	f015 0506 	ands.w	r5, r5, #6
 800885c:	d106      	bne.n	800886c <_printf_common+0x48>
 800885e:	f104 0a19 	add.w	sl, r4, #25
 8008862:	68e3      	ldr	r3, [r4, #12]
 8008864:	6832      	ldr	r2, [r6, #0]
 8008866:	1a9b      	subs	r3, r3, r2
 8008868:	42ab      	cmp	r3, r5
 800886a:	dc26      	bgt.n	80088ba <_printf_common+0x96>
 800886c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008870:	1e13      	subs	r3, r2, #0
 8008872:	6822      	ldr	r2, [r4, #0]
 8008874:	bf18      	it	ne
 8008876:	2301      	movne	r3, #1
 8008878:	0692      	lsls	r2, r2, #26
 800887a:	d42b      	bmi.n	80088d4 <_printf_common+0xb0>
 800887c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008880:	4649      	mov	r1, r9
 8008882:	4638      	mov	r0, r7
 8008884:	47c0      	blx	r8
 8008886:	3001      	adds	r0, #1
 8008888:	d01e      	beq.n	80088c8 <_printf_common+0xa4>
 800888a:	6823      	ldr	r3, [r4, #0]
 800888c:	68e5      	ldr	r5, [r4, #12]
 800888e:	6832      	ldr	r2, [r6, #0]
 8008890:	f003 0306 	and.w	r3, r3, #6
 8008894:	2b04      	cmp	r3, #4
 8008896:	bf08      	it	eq
 8008898:	1aad      	subeq	r5, r5, r2
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	6922      	ldr	r2, [r4, #16]
 800889e:	bf0c      	ite	eq
 80088a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088a4:	2500      	movne	r5, #0
 80088a6:	4293      	cmp	r3, r2
 80088a8:	bfc4      	itt	gt
 80088aa:	1a9b      	subgt	r3, r3, r2
 80088ac:	18ed      	addgt	r5, r5, r3
 80088ae:	2600      	movs	r6, #0
 80088b0:	341a      	adds	r4, #26
 80088b2:	42b5      	cmp	r5, r6
 80088b4:	d11a      	bne.n	80088ec <_printf_common+0xc8>
 80088b6:	2000      	movs	r0, #0
 80088b8:	e008      	b.n	80088cc <_printf_common+0xa8>
 80088ba:	2301      	movs	r3, #1
 80088bc:	4652      	mov	r2, sl
 80088be:	4649      	mov	r1, r9
 80088c0:	4638      	mov	r0, r7
 80088c2:	47c0      	blx	r8
 80088c4:	3001      	adds	r0, #1
 80088c6:	d103      	bne.n	80088d0 <_printf_common+0xac>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295
 80088cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d0:	3501      	adds	r5, #1
 80088d2:	e7c6      	b.n	8008862 <_printf_common+0x3e>
 80088d4:	18e1      	adds	r1, r4, r3
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	2030      	movs	r0, #48	; 0x30
 80088da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088de:	4422      	add	r2, r4
 80088e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088e8:	3302      	adds	r3, #2
 80088ea:	e7c7      	b.n	800887c <_printf_common+0x58>
 80088ec:	2301      	movs	r3, #1
 80088ee:	4622      	mov	r2, r4
 80088f0:	4649      	mov	r1, r9
 80088f2:	4638      	mov	r0, r7
 80088f4:	47c0      	blx	r8
 80088f6:	3001      	adds	r0, #1
 80088f8:	d0e6      	beq.n	80088c8 <_printf_common+0xa4>
 80088fa:	3601      	adds	r6, #1
 80088fc:	e7d9      	b.n	80088b2 <_printf_common+0x8e>
	...

08008900 <_printf_i>:
 8008900:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008904:	460c      	mov	r4, r1
 8008906:	4691      	mov	r9, r2
 8008908:	7e27      	ldrb	r7, [r4, #24]
 800890a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800890c:	2f78      	cmp	r7, #120	; 0x78
 800890e:	4680      	mov	r8, r0
 8008910:	469a      	mov	sl, r3
 8008912:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008916:	d807      	bhi.n	8008928 <_printf_i+0x28>
 8008918:	2f62      	cmp	r7, #98	; 0x62
 800891a:	d80a      	bhi.n	8008932 <_printf_i+0x32>
 800891c:	2f00      	cmp	r7, #0
 800891e:	f000 80d8 	beq.w	8008ad2 <_printf_i+0x1d2>
 8008922:	2f58      	cmp	r7, #88	; 0x58
 8008924:	f000 80a3 	beq.w	8008a6e <_printf_i+0x16e>
 8008928:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800892c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008930:	e03a      	b.n	80089a8 <_printf_i+0xa8>
 8008932:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008936:	2b15      	cmp	r3, #21
 8008938:	d8f6      	bhi.n	8008928 <_printf_i+0x28>
 800893a:	a001      	add	r0, pc, #4	; (adr r0, 8008940 <_printf_i+0x40>)
 800893c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008940:	08008999 	.word	0x08008999
 8008944:	080089ad 	.word	0x080089ad
 8008948:	08008929 	.word	0x08008929
 800894c:	08008929 	.word	0x08008929
 8008950:	08008929 	.word	0x08008929
 8008954:	08008929 	.word	0x08008929
 8008958:	080089ad 	.word	0x080089ad
 800895c:	08008929 	.word	0x08008929
 8008960:	08008929 	.word	0x08008929
 8008964:	08008929 	.word	0x08008929
 8008968:	08008929 	.word	0x08008929
 800896c:	08008ab9 	.word	0x08008ab9
 8008970:	080089dd 	.word	0x080089dd
 8008974:	08008a9b 	.word	0x08008a9b
 8008978:	08008929 	.word	0x08008929
 800897c:	08008929 	.word	0x08008929
 8008980:	08008adb 	.word	0x08008adb
 8008984:	08008929 	.word	0x08008929
 8008988:	080089dd 	.word	0x080089dd
 800898c:	08008929 	.word	0x08008929
 8008990:	08008929 	.word	0x08008929
 8008994:	08008aa3 	.word	0x08008aa3
 8008998:	680b      	ldr	r3, [r1, #0]
 800899a:	1d1a      	adds	r2, r3, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	600a      	str	r2, [r1, #0]
 80089a0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80089a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0a3      	b.n	8008af4 <_printf_i+0x1f4>
 80089ac:	6825      	ldr	r5, [r4, #0]
 80089ae:	6808      	ldr	r0, [r1, #0]
 80089b0:	062e      	lsls	r6, r5, #24
 80089b2:	f100 0304 	add.w	r3, r0, #4
 80089b6:	d50a      	bpl.n	80089ce <_printf_i+0xce>
 80089b8:	6805      	ldr	r5, [r0, #0]
 80089ba:	600b      	str	r3, [r1, #0]
 80089bc:	2d00      	cmp	r5, #0
 80089be:	da03      	bge.n	80089c8 <_printf_i+0xc8>
 80089c0:	232d      	movs	r3, #45	; 0x2d
 80089c2:	426d      	negs	r5, r5
 80089c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089c8:	485e      	ldr	r0, [pc, #376]	; (8008b44 <_printf_i+0x244>)
 80089ca:	230a      	movs	r3, #10
 80089cc:	e019      	b.n	8008a02 <_printf_i+0x102>
 80089ce:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089d2:	6805      	ldr	r5, [r0, #0]
 80089d4:	600b      	str	r3, [r1, #0]
 80089d6:	bf18      	it	ne
 80089d8:	b22d      	sxthne	r5, r5
 80089da:	e7ef      	b.n	80089bc <_printf_i+0xbc>
 80089dc:	680b      	ldr	r3, [r1, #0]
 80089de:	6825      	ldr	r5, [r4, #0]
 80089e0:	1d18      	adds	r0, r3, #4
 80089e2:	6008      	str	r0, [r1, #0]
 80089e4:	0628      	lsls	r0, r5, #24
 80089e6:	d501      	bpl.n	80089ec <_printf_i+0xec>
 80089e8:	681d      	ldr	r5, [r3, #0]
 80089ea:	e002      	b.n	80089f2 <_printf_i+0xf2>
 80089ec:	0669      	lsls	r1, r5, #25
 80089ee:	d5fb      	bpl.n	80089e8 <_printf_i+0xe8>
 80089f0:	881d      	ldrh	r5, [r3, #0]
 80089f2:	4854      	ldr	r0, [pc, #336]	; (8008b44 <_printf_i+0x244>)
 80089f4:	2f6f      	cmp	r7, #111	; 0x6f
 80089f6:	bf0c      	ite	eq
 80089f8:	2308      	moveq	r3, #8
 80089fa:	230a      	movne	r3, #10
 80089fc:	2100      	movs	r1, #0
 80089fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a02:	6866      	ldr	r6, [r4, #4]
 8008a04:	60a6      	str	r6, [r4, #8]
 8008a06:	2e00      	cmp	r6, #0
 8008a08:	bfa2      	ittt	ge
 8008a0a:	6821      	ldrge	r1, [r4, #0]
 8008a0c:	f021 0104 	bicge.w	r1, r1, #4
 8008a10:	6021      	strge	r1, [r4, #0]
 8008a12:	b90d      	cbnz	r5, 8008a18 <_printf_i+0x118>
 8008a14:	2e00      	cmp	r6, #0
 8008a16:	d04d      	beq.n	8008ab4 <_printf_i+0x1b4>
 8008a18:	4616      	mov	r6, r2
 8008a1a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008a1e:	fb03 5711 	mls	r7, r3, r1, r5
 8008a22:	5dc7      	ldrb	r7, [r0, r7]
 8008a24:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a28:	462f      	mov	r7, r5
 8008a2a:	42bb      	cmp	r3, r7
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	d9f4      	bls.n	8008a1a <_printf_i+0x11a>
 8008a30:	2b08      	cmp	r3, #8
 8008a32:	d10b      	bne.n	8008a4c <_printf_i+0x14c>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	07df      	lsls	r7, r3, #31
 8008a38:	d508      	bpl.n	8008a4c <_printf_i+0x14c>
 8008a3a:	6923      	ldr	r3, [r4, #16]
 8008a3c:	6861      	ldr	r1, [r4, #4]
 8008a3e:	4299      	cmp	r1, r3
 8008a40:	bfde      	ittt	le
 8008a42:	2330      	movle	r3, #48	; 0x30
 8008a44:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a48:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a4c:	1b92      	subs	r2, r2, r6
 8008a4e:	6122      	str	r2, [r4, #16]
 8008a50:	f8cd a000 	str.w	sl, [sp]
 8008a54:	464b      	mov	r3, r9
 8008a56:	aa03      	add	r2, sp, #12
 8008a58:	4621      	mov	r1, r4
 8008a5a:	4640      	mov	r0, r8
 8008a5c:	f7ff fee2 	bl	8008824 <_printf_common>
 8008a60:	3001      	adds	r0, #1
 8008a62:	d14c      	bne.n	8008afe <_printf_i+0x1fe>
 8008a64:	f04f 30ff 	mov.w	r0, #4294967295
 8008a68:	b004      	add	sp, #16
 8008a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a6e:	4835      	ldr	r0, [pc, #212]	; (8008b44 <_printf_i+0x244>)
 8008a70:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a74:	6823      	ldr	r3, [r4, #0]
 8008a76:	680e      	ldr	r6, [r1, #0]
 8008a78:	061f      	lsls	r7, r3, #24
 8008a7a:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a7e:	600e      	str	r6, [r1, #0]
 8008a80:	d514      	bpl.n	8008aac <_printf_i+0x1ac>
 8008a82:	07d9      	lsls	r1, r3, #31
 8008a84:	bf44      	itt	mi
 8008a86:	f043 0320 	orrmi.w	r3, r3, #32
 8008a8a:	6023      	strmi	r3, [r4, #0]
 8008a8c:	b91d      	cbnz	r5, 8008a96 <_printf_i+0x196>
 8008a8e:	6823      	ldr	r3, [r4, #0]
 8008a90:	f023 0320 	bic.w	r3, r3, #32
 8008a94:	6023      	str	r3, [r4, #0]
 8008a96:	2310      	movs	r3, #16
 8008a98:	e7b0      	b.n	80089fc <_printf_i+0xfc>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	f043 0320 	orr.w	r3, r3, #32
 8008aa0:	6023      	str	r3, [r4, #0]
 8008aa2:	2378      	movs	r3, #120	; 0x78
 8008aa4:	4828      	ldr	r0, [pc, #160]	; (8008b48 <_printf_i+0x248>)
 8008aa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008aaa:	e7e3      	b.n	8008a74 <_printf_i+0x174>
 8008aac:	065e      	lsls	r6, r3, #25
 8008aae:	bf48      	it	mi
 8008ab0:	b2ad      	uxthmi	r5, r5
 8008ab2:	e7e6      	b.n	8008a82 <_printf_i+0x182>
 8008ab4:	4616      	mov	r6, r2
 8008ab6:	e7bb      	b.n	8008a30 <_printf_i+0x130>
 8008ab8:	680b      	ldr	r3, [r1, #0]
 8008aba:	6826      	ldr	r6, [r4, #0]
 8008abc:	6960      	ldr	r0, [r4, #20]
 8008abe:	1d1d      	adds	r5, r3, #4
 8008ac0:	600d      	str	r5, [r1, #0]
 8008ac2:	0635      	lsls	r5, r6, #24
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	d501      	bpl.n	8008acc <_printf_i+0x1cc>
 8008ac8:	6018      	str	r0, [r3, #0]
 8008aca:	e002      	b.n	8008ad2 <_printf_i+0x1d2>
 8008acc:	0671      	lsls	r1, r6, #25
 8008ace:	d5fb      	bpl.n	8008ac8 <_printf_i+0x1c8>
 8008ad0:	8018      	strh	r0, [r3, #0]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	6123      	str	r3, [r4, #16]
 8008ad6:	4616      	mov	r6, r2
 8008ad8:	e7ba      	b.n	8008a50 <_printf_i+0x150>
 8008ada:	680b      	ldr	r3, [r1, #0]
 8008adc:	1d1a      	adds	r2, r3, #4
 8008ade:	600a      	str	r2, [r1, #0]
 8008ae0:	681e      	ldr	r6, [r3, #0]
 8008ae2:	6862      	ldr	r2, [r4, #4]
 8008ae4:	2100      	movs	r1, #0
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	f7f7 fb7a 	bl	80001e0 <memchr>
 8008aec:	b108      	cbz	r0, 8008af2 <_printf_i+0x1f2>
 8008aee:	1b80      	subs	r0, r0, r6
 8008af0:	6060      	str	r0, [r4, #4]
 8008af2:	6863      	ldr	r3, [r4, #4]
 8008af4:	6123      	str	r3, [r4, #16]
 8008af6:	2300      	movs	r3, #0
 8008af8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008afc:	e7a8      	b.n	8008a50 <_printf_i+0x150>
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	4632      	mov	r2, r6
 8008b02:	4649      	mov	r1, r9
 8008b04:	4640      	mov	r0, r8
 8008b06:	47d0      	blx	sl
 8008b08:	3001      	adds	r0, #1
 8008b0a:	d0ab      	beq.n	8008a64 <_printf_i+0x164>
 8008b0c:	6823      	ldr	r3, [r4, #0]
 8008b0e:	079b      	lsls	r3, r3, #30
 8008b10:	d413      	bmi.n	8008b3a <_printf_i+0x23a>
 8008b12:	68e0      	ldr	r0, [r4, #12]
 8008b14:	9b03      	ldr	r3, [sp, #12]
 8008b16:	4298      	cmp	r0, r3
 8008b18:	bfb8      	it	lt
 8008b1a:	4618      	movlt	r0, r3
 8008b1c:	e7a4      	b.n	8008a68 <_printf_i+0x168>
 8008b1e:	2301      	movs	r3, #1
 8008b20:	4632      	mov	r2, r6
 8008b22:	4649      	mov	r1, r9
 8008b24:	4640      	mov	r0, r8
 8008b26:	47d0      	blx	sl
 8008b28:	3001      	adds	r0, #1
 8008b2a:	d09b      	beq.n	8008a64 <_printf_i+0x164>
 8008b2c:	3501      	adds	r5, #1
 8008b2e:	68e3      	ldr	r3, [r4, #12]
 8008b30:	9903      	ldr	r1, [sp, #12]
 8008b32:	1a5b      	subs	r3, r3, r1
 8008b34:	42ab      	cmp	r3, r5
 8008b36:	dcf2      	bgt.n	8008b1e <_printf_i+0x21e>
 8008b38:	e7eb      	b.n	8008b12 <_printf_i+0x212>
 8008b3a:	2500      	movs	r5, #0
 8008b3c:	f104 0619 	add.w	r6, r4, #25
 8008b40:	e7f5      	b.n	8008b2e <_printf_i+0x22e>
 8008b42:	bf00      	nop
 8008b44:	0800b2ae 	.word	0x0800b2ae
 8008b48:	0800b2bf 	.word	0x0800b2bf

08008b4c <iprintf>:
 8008b4c:	b40f      	push	{r0, r1, r2, r3}
 8008b4e:	4b0a      	ldr	r3, [pc, #40]	; (8008b78 <iprintf+0x2c>)
 8008b50:	b513      	push	{r0, r1, r4, lr}
 8008b52:	681c      	ldr	r4, [r3, #0]
 8008b54:	b124      	cbz	r4, 8008b60 <iprintf+0x14>
 8008b56:	69a3      	ldr	r3, [r4, #24]
 8008b58:	b913      	cbnz	r3, 8008b60 <iprintf+0x14>
 8008b5a:	4620      	mov	r0, r4
 8008b5c:	f001 f90a 	bl	8009d74 <__sinit>
 8008b60:	ab05      	add	r3, sp, #20
 8008b62:	9a04      	ldr	r2, [sp, #16]
 8008b64:	68a1      	ldr	r1, [r4, #8]
 8008b66:	9301      	str	r3, [sp, #4]
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f001 ffd3 	bl	800ab14 <_vfiprintf_r>
 8008b6e:	b002      	add	sp, #8
 8008b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b74:	b004      	add	sp, #16
 8008b76:	4770      	bx	lr
 8008b78:	200001fc 	.word	0x200001fc

08008b7c <_puts_r>:
 8008b7c:	b570      	push	{r4, r5, r6, lr}
 8008b7e:	460e      	mov	r6, r1
 8008b80:	4605      	mov	r5, r0
 8008b82:	b118      	cbz	r0, 8008b8c <_puts_r+0x10>
 8008b84:	6983      	ldr	r3, [r0, #24]
 8008b86:	b90b      	cbnz	r3, 8008b8c <_puts_r+0x10>
 8008b88:	f001 f8f4 	bl	8009d74 <__sinit>
 8008b8c:	69ab      	ldr	r3, [r5, #24]
 8008b8e:	68ac      	ldr	r4, [r5, #8]
 8008b90:	b913      	cbnz	r3, 8008b98 <_puts_r+0x1c>
 8008b92:	4628      	mov	r0, r5
 8008b94:	f001 f8ee 	bl	8009d74 <__sinit>
 8008b98:	4b2c      	ldr	r3, [pc, #176]	; (8008c4c <_puts_r+0xd0>)
 8008b9a:	429c      	cmp	r4, r3
 8008b9c:	d120      	bne.n	8008be0 <_puts_r+0x64>
 8008b9e:	686c      	ldr	r4, [r5, #4]
 8008ba0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ba2:	07db      	lsls	r3, r3, #31
 8008ba4:	d405      	bmi.n	8008bb2 <_puts_r+0x36>
 8008ba6:	89a3      	ldrh	r3, [r4, #12]
 8008ba8:	0598      	lsls	r0, r3, #22
 8008baa:	d402      	bmi.n	8008bb2 <_puts_r+0x36>
 8008bac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bae:	f001 f984 	bl	8009eba <__retarget_lock_acquire_recursive>
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	0719      	lsls	r1, r3, #28
 8008bb6:	d51d      	bpl.n	8008bf4 <_puts_r+0x78>
 8008bb8:	6923      	ldr	r3, [r4, #16]
 8008bba:	b1db      	cbz	r3, 8008bf4 <_puts_r+0x78>
 8008bbc:	3e01      	subs	r6, #1
 8008bbe:	68a3      	ldr	r3, [r4, #8]
 8008bc0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	60a3      	str	r3, [r4, #8]
 8008bc8:	bb39      	cbnz	r1, 8008c1a <_puts_r+0x9e>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da38      	bge.n	8008c40 <_puts_r+0xc4>
 8008bce:	4622      	mov	r2, r4
 8008bd0:	210a      	movs	r1, #10
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f000 f87c 	bl	8008cd0 <__swbuf_r>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d011      	beq.n	8008c00 <_puts_r+0x84>
 8008bdc:	250a      	movs	r5, #10
 8008bde:	e011      	b.n	8008c04 <_puts_r+0x88>
 8008be0:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <_puts_r+0xd4>)
 8008be2:	429c      	cmp	r4, r3
 8008be4:	d101      	bne.n	8008bea <_puts_r+0x6e>
 8008be6:	68ac      	ldr	r4, [r5, #8]
 8008be8:	e7da      	b.n	8008ba0 <_puts_r+0x24>
 8008bea:	4b1a      	ldr	r3, [pc, #104]	; (8008c54 <_puts_r+0xd8>)
 8008bec:	429c      	cmp	r4, r3
 8008bee:	bf08      	it	eq
 8008bf0:	68ec      	ldreq	r4, [r5, #12]
 8008bf2:	e7d5      	b.n	8008ba0 <_puts_r+0x24>
 8008bf4:	4621      	mov	r1, r4
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	f000 f8bc 	bl	8008d74 <__swsetup_r>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	d0dd      	beq.n	8008bbc <_puts_r+0x40>
 8008c00:	f04f 35ff 	mov.w	r5, #4294967295
 8008c04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c06:	07da      	lsls	r2, r3, #31
 8008c08:	d405      	bmi.n	8008c16 <_puts_r+0x9a>
 8008c0a:	89a3      	ldrh	r3, [r4, #12]
 8008c0c:	059b      	lsls	r3, r3, #22
 8008c0e:	d402      	bmi.n	8008c16 <_puts_r+0x9a>
 8008c10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c12:	f001 f953 	bl	8009ebc <__retarget_lock_release_recursive>
 8008c16:	4628      	mov	r0, r5
 8008c18:	bd70      	pop	{r4, r5, r6, pc}
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	da04      	bge.n	8008c28 <_puts_r+0xac>
 8008c1e:	69a2      	ldr	r2, [r4, #24]
 8008c20:	429a      	cmp	r2, r3
 8008c22:	dc06      	bgt.n	8008c32 <_puts_r+0xb6>
 8008c24:	290a      	cmp	r1, #10
 8008c26:	d004      	beq.n	8008c32 <_puts_r+0xb6>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	1c5a      	adds	r2, r3, #1
 8008c2c:	6022      	str	r2, [r4, #0]
 8008c2e:	7019      	strb	r1, [r3, #0]
 8008c30:	e7c5      	b.n	8008bbe <_puts_r+0x42>
 8008c32:	4622      	mov	r2, r4
 8008c34:	4628      	mov	r0, r5
 8008c36:	f000 f84b 	bl	8008cd0 <__swbuf_r>
 8008c3a:	3001      	adds	r0, #1
 8008c3c:	d1bf      	bne.n	8008bbe <_puts_r+0x42>
 8008c3e:	e7df      	b.n	8008c00 <_puts_r+0x84>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	250a      	movs	r5, #10
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	6022      	str	r2, [r4, #0]
 8008c48:	701d      	strb	r5, [r3, #0]
 8008c4a:	e7db      	b.n	8008c04 <_puts_r+0x88>
 8008c4c:	0800b384 	.word	0x0800b384
 8008c50:	0800b3a4 	.word	0x0800b3a4
 8008c54:	0800b364 	.word	0x0800b364

08008c58 <puts>:
 8008c58:	4b02      	ldr	r3, [pc, #8]	; (8008c64 <puts+0xc>)
 8008c5a:	4601      	mov	r1, r0
 8008c5c:	6818      	ldr	r0, [r3, #0]
 8008c5e:	f7ff bf8d 	b.w	8008b7c <_puts_r>
 8008c62:	bf00      	nop
 8008c64:	200001fc 	.word	0x200001fc

08008c68 <sniprintf>:
 8008c68:	b40c      	push	{r2, r3}
 8008c6a:	b530      	push	{r4, r5, lr}
 8008c6c:	4b17      	ldr	r3, [pc, #92]	; (8008ccc <sniprintf+0x64>)
 8008c6e:	1e0c      	subs	r4, r1, #0
 8008c70:	681d      	ldr	r5, [r3, #0]
 8008c72:	b09d      	sub	sp, #116	; 0x74
 8008c74:	da08      	bge.n	8008c88 <sniprintf+0x20>
 8008c76:	238b      	movs	r3, #139	; 0x8b
 8008c78:	602b      	str	r3, [r5, #0]
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	b01d      	add	sp, #116	; 0x74
 8008c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c84:	b002      	add	sp, #8
 8008c86:	4770      	bx	lr
 8008c88:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008c8c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c90:	bf14      	ite	ne
 8008c92:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008c96:	4623      	moveq	r3, r4
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	9307      	str	r3, [sp, #28]
 8008c9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ca0:	9002      	str	r0, [sp, #8]
 8008ca2:	9006      	str	r0, [sp, #24]
 8008ca4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008ca8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008caa:	ab21      	add	r3, sp, #132	; 0x84
 8008cac:	a902      	add	r1, sp, #8
 8008cae:	4628      	mov	r0, r5
 8008cb0:	9301      	str	r3, [sp, #4]
 8008cb2:	f001 fe05 	bl	800a8c0 <_svfiprintf_r>
 8008cb6:	1c43      	adds	r3, r0, #1
 8008cb8:	bfbc      	itt	lt
 8008cba:	238b      	movlt	r3, #139	; 0x8b
 8008cbc:	602b      	strlt	r3, [r5, #0]
 8008cbe:	2c00      	cmp	r4, #0
 8008cc0:	d0dd      	beq.n	8008c7e <sniprintf+0x16>
 8008cc2:	9b02      	ldr	r3, [sp, #8]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	701a      	strb	r2, [r3, #0]
 8008cc8:	e7d9      	b.n	8008c7e <sniprintf+0x16>
 8008cca:	bf00      	nop
 8008ccc:	200001fc 	.word	0x200001fc

08008cd0 <__swbuf_r>:
 8008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd2:	460e      	mov	r6, r1
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	b118      	cbz	r0, 8008ce2 <__swbuf_r+0x12>
 8008cda:	6983      	ldr	r3, [r0, #24]
 8008cdc:	b90b      	cbnz	r3, 8008ce2 <__swbuf_r+0x12>
 8008cde:	f001 f849 	bl	8009d74 <__sinit>
 8008ce2:	4b21      	ldr	r3, [pc, #132]	; (8008d68 <__swbuf_r+0x98>)
 8008ce4:	429c      	cmp	r4, r3
 8008ce6:	d12b      	bne.n	8008d40 <__swbuf_r+0x70>
 8008ce8:	686c      	ldr	r4, [r5, #4]
 8008cea:	69a3      	ldr	r3, [r4, #24]
 8008cec:	60a3      	str	r3, [r4, #8]
 8008cee:	89a3      	ldrh	r3, [r4, #12]
 8008cf0:	071a      	lsls	r2, r3, #28
 8008cf2:	d52f      	bpl.n	8008d54 <__swbuf_r+0x84>
 8008cf4:	6923      	ldr	r3, [r4, #16]
 8008cf6:	b36b      	cbz	r3, 8008d54 <__swbuf_r+0x84>
 8008cf8:	6923      	ldr	r3, [r4, #16]
 8008cfa:	6820      	ldr	r0, [r4, #0]
 8008cfc:	1ac0      	subs	r0, r0, r3
 8008cfe:	6963      	ldr	r3, [r4, #20]
 8008d00:	b2f6      	uxtb	r6, r6
 8008d02:	4283      	cmp	r3, r0
 8008d04:	4637      	mov	r7, r6
 8008d06:	dc04      	bgt.n	8008d12 <__swbuf_r+0x42>
 8008d08:	4621      	mov	r1, r4
 8008d0a:	4628      	mov	r0, r5
 8008d0c:	f000 ff9e 	bl	8009c4c <_fflush_r>
 8008d10:	bb30      	cbnz	r0, 8008d60 <__swbuf_r+0x90>
 8008d12:	68a3      	ldr	r3, [r4, #8]
 8008d14:	3b01      	subs	r3, #1
 8008d16:	60a3      	str	r3, [r4, #8]
 8008d18:	6823      	ldr	r3, [r4, #0]
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	6022      	str	r2, [r4, #0]
 8008d1e:	701e      	strb	r6, [r3, #0]
 8008d20:	6963      	ldr	r3, [r4, #20]
 8008d22:	3001      	adds	r0, #1
 8008d24:	4283      	cmp	r3, r0
 8008d26:	d004      	beq.n	8008d32 <__swbuf_r+0x62>
 8008d28:	89a3      	ldrh	r3, [r4, #12]
 8008d2a:	07db      	lsls	r3, r3, #31
 8008d2c:	d506      	bpl.n	8008d3c <__swbuf_r+0x6c>
 8008d2e:	2e0a      	cmp	r6, #10
 8008d30:	d104      	bne.n	8008d3c <__swbuf_r+0x6c>
 8008d32:	4621      	mov	r1, r4
 8008d34:	4628      	mov	r0, r5
 8008d36:	f000 ff89 	bl	8009c4c <_fflush_r>
 8008d3a:	b988      	cbnz	r0, 8008d60 <__swbuf_r+0x90>
 8008d3c:	4638      	mov	r0, r7
 8008d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <__swbuf_r+0x9c>)
 8008d42:	429c      	cmp	r4, r3
 8008d44:	d101      	bne.n	8008d4a <__swbuf_r+0x7a>
 8008d46:	68ac      	ldr	r4, [r5, #8]
 8008d48:	e7cf      	b.n	8008cea <__swbuf_r+0x1a>
 8008d4a:	4b09      	ldr	r3, [pc, #36]	; (8008d70 <__swbuf_r+0xa0>)
 8008d4c:	429c      	cmp	r4, r3
 8008d4e:	bf08      	it	eq
 8008d50:	68ec      	ldreq	r4, [r5, #12]
 8008d52:	e7ca      	b.n	8008cea <__swbuf_r+0x1a>
 8008d54:	4621      	mov	r1, r4
 8008d56:	4628      	mov	r0, r5
 8008d58:	f000 f80c 	bl	8008d74 <__swsetup_r>
 8008d5c:	2800      	cmp	r0, #0
 8008d5e:	d0cb      	beq.n	8008cf8 <__swbuf_r+0x28>
 8008d60:	f04f 37ff 	mov.w	r7, #4294967295
 8008d64:	e7ea      	b.n	8008d3c <__swbuf_r+0x6c>
 8008d66:	bf00      	nop
 8008d68:	0800b384 	.word	0x0800b384
 8008d6c:	0800b3a4 	.word	0x0800b3a4
 8008d70:	0800b364 	.word	0x0800b364

08008d74 <__swsetup_r>:
 8008d74:	4b32      	ldr	r3, [pc, #200]	; (8008e40 <__swsetup_r+0xcc>)
 8008d76:	b570      	push	{r4, r5, r6, lr}
 8008d78:	681d      	ldr	r5, [r3, #0]
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	b125      	cbz	r5, 8008d8a <__swsetup_r+0x16>
 8008d80:	69ab      	ldr	r3, [r5, #24]
 8008d82:	b913      	cbnz	r3, 8008d8a <__swsetup_r+0x16>
 8008d84:	4628      	mov	r0, r5
 8008d86:	f000 fff5 	bl	8009d74 <__sinit>
 8008d8a:	4b2e      	ldr	r3, [pc, #184]	; (8008e44 <__swsetup_r+0xd0>)
 8008d8c:	429c      	cmp	r4, r3
 8008d8e:	d10f      	bne.n	8008db0 <__swsetup_r+0x3c>
 8008d90:	686c      	ldr	r4, [r5, #4]
 8008d92:	89a3      	ldrh	r3, [r4, #12]
 8008d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008d98:	0719      	lsls	r1, r3, #28
 8008d9a:	d42c      	bmi.n	8008df6 <__swsetup_r+0x82>
 8008d9c:	06dd      	lsls	r5, r3, #27
 8008d9e:	d411      	bmi.n	8008dc4 <__swsetup_r+0x50>
 8008da0:	2309      	movs	r3, #9
 8008da2:	6033      	str	r3, [r6, #0]
 8008da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008da8:	81a3      	strh	r3, [r4, #12]
 8008daa:	f04f 30ff 	mov.w	r0, #4294967295
 8008dae:	e03e      	b.n	8008e2e <__swsetup_r+0xba>
 8008db0:	4b25      	ldr	r3, [pc, #148]	; (8008e48 <__swsetup_r+0xd4>)
 8008db2:	429c      	cmp	r4, r3
 8008db4:	d101      	bne.n	8008dba <__swsetup_r+0x46>
 8008db6:	68ac      	ldr	r4, [r5, #8]
 8008db8:	e7eb      	b.n	8008d92 <__swsetup_r+0x1e>
 8008dba:	4b24      	ldr	r3, [pc, #144]	; (8008e4c <__swsetup_r+0xd8>)
 8008dbc:	429c      	cmp	r4, r3
 8008dbe:	bf08      	it	eq
 8008dc0:	68ec      	ldreq	r4, [r5, #12]
 8008dc2:	e7e6      	b.n	8008d92 <__swsetup_r+0x1e>
 8008dc4:	0758      	lsls	r0, r3, #29
 8008dc6:	d512      	bpl.n	8008dee <__swsetup_r+0x7a>
 8008dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dca:	b141      	cbz	r1, 8008dde <__swsetup_r+0x6a>
 8008dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008dd0:	4299      	cmp	r1, r3
 8008dd2:	d002      	beq.n	8008dda <__swsetup_r+0x66>
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f001 fc6d 	bl	800a6b4 <_free_r>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8008dde:	89a3      	ldrh	r3, [r4, #12]
 8008de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008de4:	81a3      	strh	r3, [r4, #12]
 8008de6:	2300      	movs	r3, #0
 8008de8:	6063      	str	r3, [r4, #4]
 8008dea:	6923      	ldr	r3, [r4, #16]
 8008dec:	6023      	str	r3, [r4, #0]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	81a3      	strh	r3, [r4, #12]
 8008df6:	6923      	ldr	r3, [r4, #16]
 8008df8:	b94b      	cbnz	r3, 8008e0e <__swsetup_r+0x9a>
 8008dfa:	89a3      	ldrh	r3, [r4, #12]
 8008dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e04:	d003      	beq.n	8008e0e <__swsetup_r+0x9a>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f001 f87d 	bl	8009f08 <__smakebuf_r>
 8008e0e:	89a0      	ldrh	r0, [r4, #12]
 8008e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e14:	f010 0301 	ands.w	r3, r0, #1
 8008e18:	d00a      	beq.n	8008e30 <__swsetup_r+0xbc>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	60a3      	str	r3, [r4, #8]
 8008e1e:	6963      	ldr	r3, [r4, #20]
 8008e20:	425b      	negs	r3, r3
 8008e22:	61a3      	str	r3, [r4, #24]
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	b943      	cbnz	r3, 8008e3a <__swsetup_r+0xc6>
 8008e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e2c:	d1ba      	bne.n	8008da4 <__swsetup_r+0x30>
 8008e2e:	bd70      	pop	{r4, r5, r6, pc}
 8008e30:	0781      	lsls	r1, r0, #30
 8008e32:	bf58      	it	pl
 8008e34:	6963      	ldrpl	r3, [r4, #20]
 8008e36:	60a3      	str	r3, [r4, #8]
 8008e38:	e7f4      	b.n	8008e24 <__swsetup_r+0xb0>
 8008e3a:	2000      	movs	r0, #0
 8008e3c:	e7f7      	b.n	8008e2e <__swsetup_r+0xba>
 8008e3e:	bf00      	nop
 8008e40:	200001fc 	.word	0x200001fc
 8008e44:	0800b384 	.word	0x0800b384
 8008e48:	0800b3a4 	.word	0x0800b3a4
 8008e4c:	0800b364 	.word	0x0800b364

08008e50 <quorem>:
 8008e50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e54:	6903      	ldr	r3, [r0, #16]
 8008e56:	690c      	ldr	r4, [r1, #16]
 8008e58:	42a3      	cmp	r3, r4
 8008e5a:	4607      	mov	r7, r0
 8008e5c:	f2c0 8081 	blt.w	8008f62 <quorem+0x112>
 8008e60:	3c01      	subs	r4, #1
 8008e62:	f101 0814 	add.w	r8, r1, #20
 8008e66:	f100 0514 	add.w	r5, r0, #20
 8008e6a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008e6e:	9301      	str	r3, [sp, #4]
 8008e70:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008e74:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	429a      	cmp	r2, r3
 8008e7c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008e80:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008e84:	fbb2 f6f3 	udiv	r6, r2, r3
 8008e88:	d331      	bcc.n	8008eee <quorem+0x9e>
 8008e8a:	f04f 0e00 	mov.w	lr, #0
 8008e8e:	4640      	mov	r0, r8
 8008e90:	46ac      	mov	ip, r5
 8008e92:	46f2      	mov	sl, lr
 8008e94:	f850 2b04 	ldr.w	r2, [r0], #4
 8008e98:	b293      	uxth	r3, r2
 8008e9a:	fb06 e303 	mla	r3, r6, r3, lr
 8008e9e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8008ea8:	0c12      	lsrs	r2, r2, #16
 8008eaa:	f8dc a000 	ldr.w	sl, [ip]
 8008eae:	fb06 e202 	mla	r2, r6, r2, lr
 8008eb2:	fa13 f38a 	uxtah	r3, r3, sl
 8008eb6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008eba:	fa1f fa82 	uxth.w	sl, r2
 8008ebe:	f8dc 2000 	ldr.w	r2, [ip]
 8008ec2:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008ec6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008eca:	b29b      	uxth	r3, r3
 8008ecc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ed0:	4581      	cmp	r9, r0
 8008ed2:	f84c 3b04 	str.w	r3, [ip], #4
 8008ed6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008eda:	d2db      	bcs.n	8008e94 <quorem+0x44>
 8008edc:	f855 300b 	ldr.w	r3, [r5, fp]
 8008ee0:	b92b      	cbnz	r3, 8008eee <quorem+0x9e>
 8008ee2:	9b01      	ldr	r3, [sp, #4]
 8008ee4:	3b04      	subs	r3, #4
 8008ee6:	429d      	cmp	r5, r3
 8008ee8:	461a      	mov	r2, r3
 8008eea:	d32e      	bcc.n	8008f4a <quorem+0xfa>
 8008eec:	613c      	str	r4, [r7, #16]
 8008eee:	4638      	mov	r0, r7
 8008ef0:	f001 fad0 	bl	800a494 <__mcmp>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	db24      	blt.n	8008f42 <quorem+0xf2>
 8008ef8:	3601      	adds	r6, #1
 8008efa:	4628      	mov	r0, r5
 8008efc:	f04f 0c00 	mov.w	ip, #0
 8008f00:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f04:	f8d0 e000 	ldr.w	lr, [r0]
 8008f08:	b293      	uxth	r3, r2
 8008f0a:	ebac 0303 	sub.w	r3, ip, r3
 8008f0e:	0c12      	lsrs	r2, r2, #16
 8008f10:	fa13 f38e 	uxtah	r3, r3, lr
 8008f14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f1c:	b29b      	uxth	r3, r3
 8008f1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f22:	45c1      	cmp	r9, r8
 8008f24:	f840 3b04 	str.w	r3, [r0], #4
 8008f28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f2c:	d2e8      	bcs.n	8008f00 <quorem+0xb0>
 8008f2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f36:	b922      	cbnz	r2, 8008f42 <quorem+0xf2>
 8008f38:	3b04      	subs	r3, #4
 8008f3a:	429d      	cmp	r5, r3
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	d30a      	bcc.n	8008f56 <quorem+0x106>
 8008f40:	613c      	str	r4, [r7, #16]
 8008f42:	4630      	mov	r0, r6
 8008f44:	b003      	add	sp, #12
 8008f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4a:	6812      	ldr	r2, [r2, #0]
 8008f4c:	3b04      	subs	r3, #4
 8008f4e:	2a00      	cmp	r2, #0
 8008f50:	d1cc      	bne.n	8008eec <quorem+0x9c>
 8008f52:	3c01      	subs	r4, #1
 8008f54:	e7c7      	b.n	8008ee6 <quorem+0x96>
 8008f56:	6812      	ldr	r2, [r2, #0]
 8008f58:	3b04      	subs	r3, #4
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	d1f0      	bne.n	8008f40 <quorem+0xf0>
 8008f5e:	3c01      	subs	r4, #1
 8008f60:	e7eb      	b.n	8008f3a <quorem+0xea>
 8008f62:	2000      	movs	r0, #0
 8008f64:	e7ee      	b.n	8008f44 <quorem+0xf4>
	...

08008f68 <_dtoa_r>:
 8008f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f6c:	ed2d 8b02 	vpush	{d8}
 8008f70:	ec57 6b10 	vmov	r6, r7, d0
 8008f74:	b095      	sub	sp, #84	; 0x54
 8008f76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008f78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008f7c:	9105      	str	r1, [sp, #20]
 8008f7e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008f82:	4604      	mov	r4, r0
 8008f84:	9209      	str	r2, [sp, #36]	; 0x24
 8008f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f88:	b975      	cbnz	r5, 8008fa8 <_dtoa_r+0x40>
 8008f8a:	2010      	movs	r0, #16
 8008f8c:	f000 fffc 	bl	8009f88 <malloc>
 8008f90:	4602      	mov	r2, r0
 8008f92:	6260      	str	r0, [r4, #36]	; 0x24
 8008f94:	b920      	cbnz	r0, 8008fa0 <_dtoa_r+0x38>
 8008f96:	4bb2      	ldr	r3, [pc, #712]	; (8009260 <_dtoa_r+0x2f8>)
 8008f98:	21ea      	movs	r1, #234	; 0xea
 8008f9a:	48b2      	ldr	r0, [pc, #712]	; (8009264 <_dtoa_r+0x2fc>)
 8008f9c:	f001 ff50 	bl	800ae40 <__assert_func>
 8008fa0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008fa4:	6005      	str	r5, [r0, #0]
 8008fa6:	60c5      	str	r5, [r0, #12]
 8008fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008faa:	6819      	ldr	r1, [r3, #0]
 8008fac:	b151      	cbz	r1, 8008fc4 <_dtoa_r+0x5c>
 8008fae:	685a      	ldr	r2, [r3, #4]
 8008fb0:	604a      	str	r2, [r1, #4]
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	4093      	lsls	r3, r2
 8008fb6:	608b      	str	r3, [r1, #8]
 8008fb8:	4620      	mov	r0, r4
 8008fba:	f001 f82d 	bl	800a018 <_Bfree>
 8008fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]
 8008fc4:	1e3b      	subs	r3, r7, #0
 8008fc6:	bfb9      	ittee	lt
 8008fc8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008fcc:	9303      	strlt	r3, [sp, #12]
 8008fce:	2300      	movge	r3, #0
 8008fd0:	f8c8 3000 	strge.w	r3, [r8]
 8008fd4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8008fd8:	4ba3      	ldr	r3, [pc, #652]	; (8009268 <_dtoa_r+0x300>)
 8008fda:	bfbc      	itt	lt
 8008fdc:	2201      	movlt	r2, #1
 8008fde:	f8c8 2000 	strlt.w	r2, [r8]
 8008fe2:	ea33 0309 	bics.w	r3, r3, r9
 8008fe6:	d11b      	bne.n	8009020 <_dtoa_r+0xb8>
 8008fe8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008fea:	f242 730f 	movw	r3, #9999	; 0x270f
 8008fee:	6013      	str	r3, [r2, #0]
 8008ff0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008ff4:	4333      	orrs	r3, r6
 8008ff6:	f000 857a 	beq.w	8009aee <_dtoa_r+0xb86>
 8008ffa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ffc:	b963      	cbnz	r3, 8009018 <_dtoa_r+0xb0>
 8008ffe:	4b9b      	ldr	r3, [pc, #620]	; (800926c <_dtoa_r+0x304>)
 8009000:	e024      	b.n	800904c <_dtoa_r+0xe4>
 8009002:	4b9b      	ldr	r3, [pc, #620]	; (8009270 <_dtoa_r+0x308>)
 8009004:	9300      	str	r3, [sp, #0]
 8009006:	3308      	adds	r3, #8
 8009008:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800900a:	6013      	str	r3, [r2, #0]
 800900c:	9800      	ldr	r0, [sp, #0]
 800900e:	b015      	add	sp, #84	; 0x54
 8009010:	ecbd 8b02 	vpop	{d8}
 8009014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009018:	4b94      	ldr	r3, [pc, #592]	; (800926c <_dtoa_r+0x304>)
 800901a:	9300      	str	r3, [sp, #0]
 800901c:	3303      	adds	r3, #3
 800901e:	e7f3      	b.n	8009008 <_dtoa_r+0xa0>
 8009020:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009024:	2200      	movs	r2, #0
 8009026:	ec51 0b17 	vmov	r0, r1, d7
 800902a:	2300      	movs	r3, #0
 800902c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009030:	f7f7 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009034:	4680      	mov	r8, r0
 8009036:	b158      	cbz	r0, 8009050 <_dtoa_r+0xe8>
 8009038:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800903a:	2301      	movs	r3, #1
 800903c:	6013      	str	r3, [r2, #0]
 800903e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009040:	2b00      	cmp	r3, #0
 8009042:	f000 8551 	beq.w	8009ae8 <_dtoa_r+0xb80>
 8009046:	488b      	ldr	r0, [pc, #556]	; (8009274 <_dtoa_r+0x30c>)
 8009048:	6018      	str	r0, [r3, #0]
 800904a:	1e43      	subs	r3, r0, #1
 800904c:	9300      	str	r3, [sp, #0]
 800904e:	e7dd      	b.n	800900c <_dtoa_r+0xa4>
 8009050:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009054:	aa12      	add	r2, sp, #72	; 0x48
 8009056:	a913      	add	r1, sp, #76	; 0x4c
 8009058:	4620      	mov	r0, r4
 800905a:	f001 fabf 	bl	800a5dc <__d2b>
 800905e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009062:	4683      	mov	fp, r0
 8009064:	2d00      	cmp	r5, #0
 8009066:	d07c      	beq.n	8009162 <_dtoa_r+0x1fa>
 8009068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800906a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800906e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009072:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8009076:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800907a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800907e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009082:	4b7d      	ldr	r3, [pc, #500]	; (8009278 <_dtoa_r+0x310>)
 8009084:	2200      	movs	r2, #0
 8009086:	4630      	mov	r0, r6
 8009088:	4639      	mov	r1, r7
 800908a:	f7f7 f8fd 	bl	8000288 <__aeabi_dsub>
 800908e:	a36e      	add	r3, pc, #440	; (adr r3, 8009248 <_dtoa_r+0x2e0>)
 8009090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009094:	f7f7 fab0 	bl	80005f8 <__aeabi_dmul>
 8009098:	a36d      	add	r3, pc, #436	; (adr r3, 8009250 <_dtoa_r+0x2e8>)
 800909a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800909e:	f7f7 f8f5 	bl	800028c <__adddf3>
 80090a2:	4606      	mov	r6, r0
 80090a4:	4628      	mov	r0, r5
 80090a6:	460f      	mov	r7, r1
 80090a8:	f7f7 fa3c 	bl	8000524 <__aeabi_i2d>
 80090ac:	a36a      	add	r3, pc, #424	; (adr r3, 8009258 <_dtoa_r+0x2f0>)
 80090ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090b2:	f7f7 faa1 	bl	80005f8 <__aeabi_dmul>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4630      	mov	r0, r6
 80090bc:	4639      	mov	r1, r7
 80090be:	f7f7 f8e5 	bl	800028c <__adddf3>
 80090c2:	4606      	mov	r6, r0
 80090c4:	460f      	mov	r7, r1
 80090c6:	f7f7 fd47 	bl	8000b58 <__aeabi_d2iz>
 80090ca:	2200      	movs	r2, #0
 80090cc:	4682      	mov	sl, r0
 80090ce:	2300      	movs	r3, #0
 80090d0:	4630      	mov	r0, r6
 80090d2:	4639      	mov	r1, r7
 80090d4:	f7f7 fd02 	bl	8000adc <__aeabi_dcmplt>
 80090d8:	b148      	cbz	r0, 80090ee <_dtoa_r+0x186>
 80090da:	4650      	mov	r0, sl
 80090dc:	f7f7 fa22 	bl	8000524 <__aeabi_i2d>
 80090e0:	4632      	mov	r2, r6
 80090e2:	463b      	mov	r3, r7
 80090e4:	f7f7 fcf0 	bl	8000ac8 <__aeabi_dcmpeq>
 80090e8:	b908      	cbnz	r0, 80090ee <_dtoa_r+0x186>
 80090ea:	f10a 3aff 	add.w	sl, sl, #4294967295
 80090ee:	f1ba 0f16 	cmp.w	sl, #22
 80090f2:	d854      	bhi.n	800919e <_dtoa_r+0x236>
 80090f4:	4b61      	ldr	r3, [pc, #388]	; (800927c <_dtoa_r+0x314>)
 80090f6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009102:	f7f7 fceb 	bl	8000adc <__aeabi_dcmplt>
 8009106:	2800      	cmp	r0, #0
 8009108:	d04b      	beq.n	80091a2 <_dtoa_r+0x23a>
 800910a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800910e:	2300      	movs	r3, #0
 8009110:	930e      	str	r3, [sp, #56]	; 0x38
 8009112:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009114:	1b5d      	subs	r5, r3, r5
 8009116:	1e6b      	subs	r3, r5, #1
 8009118:	9304      	str	r3, [sp, #16]
 800911a:	bf43      	ittte	mi
 800911c:	2300      	movmi	r3, #0
 800911e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009122:	9304      	strmi	r3, [sp, #16]
 8009124:	f04f 0800 	movpl.w	r8, #0
 8009128:	f1ba 0f00 	cmp.w	sl, #0
 800912c:	db3b      	blt.n	80091a6 <_dtoa_r+0x23e>
 800912e:	9b04      	ldr	r3, [sp, #16]
 8009130:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009134:	4453      	add	r3, sl
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	2300      	movs	r3, #0
 800913a:	9306      	str	r3, [sp, #24]
 800913c:	9b05      	ldr	r3, [sp, #20]
 800913e:	2b09      	cmp	r3, #9
 8009140:	d869      	bhi.n	8009216 <_dtoa_r+0x2ae>
 8009142:	2b05      	cmp	r3, #5
 8009144:	bfc4      	itt	gt
 8009146:	3b04      	subgt	r3, #4
 8009148:	9305      	strgt	r3, [sp, #20]
 800914a:	9b05      	ldr	r3, [sp, #20]
 800914c:	f1a3 0302 	sub.w	r3, r3, #2
 8009150:	bfcc      	ite	gt
 8009152:	2500      	movgt	r5, #0
 8009154:	2501      	movle	r5, #1
 8009156:	2b03      	cmp	r3, #3
 8009158:	d869      	bhi.n	800922e <_dtoa_r+0x2c6>
 800915a:	e8df f003 	tbb	[pc, r3]
 800915e:	4e2c      	.short	0x4e2c
 8009160:	5a4c      	.short	0x5a4c
 8009162:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8009166:	441d      	add	r5, r3
 8009168:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800916c:	2b20      	cmp	r3, #32
 800916e:	bfc1      	itttt	gt
 8009170:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009174:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009178:	fa09 f303 	lslgt.w	r3, r9, r3
 800917c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009180:	bfda      	itte	le
 8009182:	f1c3 0320 	rsble	r3, r3, #32
 8009186:	fa06 f003 	lslle.w	r0, r6, r3
 800918a:	4318      	orrgt	r0, r3
 800918c:	f7f7 f9ba 	bl	8000504 <__aeabi_ui2d>
 8009190:	2301      	movs	r3, #1
 8009192:	4606      	mov	r6, r0
 8009194:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009198:	3d01      	subs	r5, #1
 800919a:	9310      	str	r3, [sp, #64]	; 0x40
 800919c:	e771      	b.n	8009082 <_dtoa_r+0x11a>
 800919e:	2301      	movs	r3, #1
 80091a0:	e7b6      	b.n	8009110 <_dtoa_r+0x1a8>
 80091a2:	900e      	str	r0, [sp, #56]	; 0x38
 80091a4:	e7b5      	b.n	8009112 <_dtoa_r+0x1aa>
 80091a6:	f1ca 0300 	rsb	r3, sl, #0
 80091aa:	9306      	str	r3, [sp, #24]
 80091ac:	2300      	movs	r3, #0
 80091ae:	eba8 080a 	sub.w	r8, r8, sl
 80091b2:	930d      	str	r3, [sp, #52]	; 0x34
 80091b4:	e7c2      	b.n	800913c <_dtoa_r+0x1d4>
 80091b6:	2300      	movs	r3, #0
 80091b8:	9308      	str	r3, [sp, #32]
 80091ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091bc:	2b00      	cmp	r3, #0
 80091be:	dc39      	bgt.n	8009234 <_dtoa_r+0x2cc>
 80091c0:	f04f 0901 	mov.w	r9, #1
 80091c4:	f8cd 9004 	str.w	r9, [sp, #4]
 80091c8:	464b      	mov	r3, r9
 80091ca:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80091ce:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80091d0:	2200      	movs	r2, #0
 80091d2:	6042      	str	r2, [r0, #4]
 80091d4:	2204      	movs	r2, #4
 80091d6:	f102 0614 	add.w	r6, r2, #20
 80091da:	429e      	cmp	r6, r3
 80091dc:	6841      	ldr	r1, [r0, #4]
 80091de:	d92f      	bls.n	8009240 <_dtoa_r+0x2d8>
 80091e0:	4620      	mov	r0, r4
 80091e2:	f000 fed9 	bl	8009f98 <_Balloc>
 80091e6:	9000      	str	r0, [sp, #0]
 80091e8:	2800      	cmp	r0, #0
 80091ea:	d14b      	bne.n	8009284 <_dtoa_r+0x31c>
 80091ec:	4b24      	ldr	r3, [pc, #144]	; (8009280 <_dtoa_r+0x318>)
 80091ee:	4602      	mov	r2, r0
 80091f0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80091f4:	e6d1      	b.n	8008f9a <_dtoa_r+0x32>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e7de      	b.n	80091b8 <_dtoa_r+0x250>
 80091fa:	2300      	movs	r3, #0
 80091fc:	9308      	str	r3, [sp, #32]
 80091fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009200:	eb0a 0903 	add.w	r9, sl, r3
 8009204:	f109 0301 	add.w	r3, r9, #1
 8009208:	2b01      	cmp	r3, #1
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	bfb8      	it	lt
 800920e:	2301      	movlt	r3, #1
 8009210:	e7dd      	b.n	80091ce <_dtoa_r+0x266>
 8009212:	2301      	movs	r3, #1
 8009214:	e7f2      	b.n	80091fc <_dtoa_r+0x294>
 8009216:	2501      	movs	r5, #1
 8009218:	2300      	movs	r3, #0
 800921a:	9305      	str	r3, [sp, #20]
 800921c:	9508      	str	r5, [sp, #32]
 800921e:	f04f 39ff 	mov.w	r9, #4294967295
 8009222:	2200      	movs	r2, #0
 8009224:	f8cd 9004 	str.w	r9, [sp, #4]
 8009228:	2312      	movs	r3, #18
 800922a:	9209      	str	r2, [sp, #36]	; 0x24
 800922c:	e7cf      	b.n	80091ce <_dtoa_r+0x266>
 800922e:	2301      	movs	r3, #1
 8009230:	9308      	str	r3, [sp, #32]
 8009232:	e7f4      	b.n	800921e <_dtoa_r+0x2b6>
 8009234:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009238:	f8cd 9004 	str.w	r9, [sp, #4]
 800923c:	464b      	mov	r3, r9
 800923e:	e7c6      	b.n	80091ce <_dtoa_r+0x266>
 8009240:	3101      	adds	r1, #1
 8009242:	6041      	str	r1, [r0, #4]
 8009244:	0052      	lsls	r2, r2, #1
 8009246:	e7c6      	b.n	80091d6 <_dtoa_r+0x26e>
 8009248:	636f4361 	.word	0x636f4361
 800924c:	3fd287a7 	.word	0x3fd287a7
 8009250:	8b60c8b3 	.word	0x8b60c8b3
 8009254:	3fc68a28 	.word	0x3fc68a28
 8009258:	509f79fb 	.word	0x509f79fb
 800925c:	3fd34413 	.word	0x3fd34413
 8009260:	0800b2dd 	.word	0x0800b2dd
 8009264:	0800b2f4 	.word	0x0800b2f4
 8009268:	7ff00000 	.word	0x7ff00000
 800926c:	0800b2d9 	.word	0x0800b2d9
 8009270:	0800b2d0 	.word	0x0800b2d0
 8009274:	0800b2ad 	.word	0x0800b2ad
 8009278:	3ff80000 	.word	0x3ff80000
 800927c:	0800b450 	.word	0x0800b450
 8009280:	0800b353 	.word	0x0800b353
 8009284:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009286:	9a00      	ldr	r2, [sp, #0]
 8009288:	601a      	str	r2, [r3, #0]
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	2b0e      	cmp	r3, #14
 800928e:	f200 80ad 	bhi.w	80093ec <_dtoa_r+0x484>
 8009292:	2d00      	cmp	r5, #0
 8009294:	f000 80aa 	beq.w	80093ec <_dtoa_r+0x484>
 8009298:	f1ba 0f00 	cmp.w	sl, #0
 800929c:	dd36      	ble.n	800930c <_dtoa_r+0x3a4>
 800929e:	4ac3      	ldr	r2, [pc, #780]	; (80095ac <_dtoa_r+0x644>)
 80092a0:	f00a 030f 	and.w	r3, sl, #15
 80092a4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80092a8:	ed93 7b00 	vldr	d7, [r3]
 80092ac:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80092b0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80092b4:	eeb0 8a47 	vmov.f32	s16, s14
 80092b8:	eef0 8a67 	vmov.f32	s17, s15
 80092bc:	d016      	beq.n	80092ec <_dtoa_r+0x384>
 80092be:	4bbc      	ldr	r3, [pc, #752]	; (80095b0 <_dtoa_r+0x648>)
 80092c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80092c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092c8:	f7f7 fac0 	bl	800084c <__aeabi_ddiv>
 80092cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092d0:	f007 070f 	and.w	r7, r7, #15
 80092d4:	2503      	movs	r5, #3
 80092d6:	4eb6      	ldr	r6, [pc, #728]	; (80095b0 <_dtoa_r+0x648>)
 80092d8:	b957      	cbnz	r7, 80092f0 <_dtoa_r+0x388>
 80092da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092de:	ec53 2b18 	vmov	r2, r3, d8
 80092e2:	f7f7 fab3 	bl	800084c <__aeabi_ddiv>
 80092e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092ea:	e029      	b.n	8009340 <_dtoa_r+0x3d8>
 80092ec:	2502      	movs	r5, #2
 80092ee:	e7f2      	b.n	80092d6 <_dtoa_r+0x36e>
 80092f0:	07f9      	lsls	r1, r7, #31
 80092f2:	d508      	bpl.n	8009306 <_dtoa_r+0x39e>
 80092f4:	ec51 0b18 	vmov	r0, r1, d8
 80092f8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80092fc:	f7f7 f97c 	bl	80005f8 <__aeabi_dmul>
 8009300:	ec41 0b18 	vmov	d8, r0, r1
 8009304:	3501      	adds	r5, #1
 8009306:	107f      	asrs	r7, r7, #1
 8009308:	3608      	adds	r6, #8
 800930a:	e7e5      	b.n	80092d8 <_dtoa_r+0x370>
 800930c:	f000 80a6 	beq.w	800945c <_dtoa_r+0x4f4>
 8009310:	f1ca 0600 	rsb	r6, sl, #0
 8009314:	4ba5      	ldr	r3, [pc, #660]	; (80095ac <_dtoa_r+0x644>)
 8009316:	4fa6      	ldr	r7, [pc, #664]	; (80095b0 <_dtoa_r+0x648>)
 8009318:	f006 020f 	and.w	r2, r6, #15
 800931c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009324:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009328:	f7f7 f966 	bl	80005f8 <__aeabi_dmul>
 800932c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009330:	1136      	asrs	r6, r6, #4
 8009332:	2300      	movs	r3, #0
 8009334:	2502      	movs	r5, #2
 8009336:	2e00      	cmp	r6, #0
 8009338:	f040 8085 	bne.w	8009446 <_dtoa_r+0x4de>
 800933c:	2b00      	cmp	r3, #0
 800933e:	d1d2      	bne.n	80092e6 <_dtoa_r+0x37e>
 8009340:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009342:	2b00      	cmp	r3, #0
 8009344:	f000 808c 	beq.w	8009460 <_dtoa_r+0x4f8>
 8009348:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800934c:	4b99      	ldr	r3, [pc, #612]	; (80095b4 <_dtoa_r+0x64c>)
 800934e:	2200      	movs	r2, #0
 8009350:	4630      	mov	r0, r6
 8009352:	4639      	mov	r1, r7
 8009354:	f7f7 fbc2 	bl	8000adc <__aeabi_dcmplt>
 8009358:	2800      	cmp	r0, #0
 800935a:	f000 8081 	beq.w	8009460 <_dtoa_r+0x4f8>
 800935e:	9b01      	ldr	r3, [sp, #4]
 8009360:	2b00      	cmp	r3, #0
 8009362:	d07d      	beq.n	8009460 <_dtoa_r+0x4f8>
 8009364:	f1b9 0f00 	cmp.w	r9, #0
 8009368:	dd3c      	ble.n	80093e4 <_dtoa_r+0x47c>
 800936a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800936e:	9307      	str	r3, [sp, #28]
 8009370:	2200      	movs	r2, #0
 8009372:	4b91      	ldr	r3, [pc, #580]	; (80095b8 <_dtoa_r+0x650>)
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 f93e 	bl	80005f8 <__aeabi_dmul>
 800937c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009380:	3501      	adds	r5, #1
 8009382:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8009386:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800938a:	4628      	mov	r0, r5
 800938c:	f7f7 f8ca 	bl	8000524 <__aeabi_i2d>
 8009390:	4632      	mov	r2, r6
 8009392:	463b      	mov	r3, r7
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	4b88      	ldr	r3, [pc, #544]	; (80095bc <_dtoa_r+0x654>)
 800939a:	2200      	movs	r2, #0
 800939c:	f7f6 ff76 	bl	800028c <__adddf3>
 80093a0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80093a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093a8:	9303      	str	r3, [sp, #12]
 80093aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d15c      	bne.n	800946a <_dtoa_r+0x502>
 80093b0:	4b83      	ldr	r3, [pc, #524]	; (80095c0 <_dtoa_r+0x658>)
 80093b2:	2200      	movs	r2, #0
 80093b4:	4630      	mov	r0, r6
 80093b6:	4639      	mov	r1, r7
 80093b8:	f7f6 ff66 	bl	8000288 <__aeabi_dsub>
 80093bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093c0:	4606      	mov	r6, r0
 80093c2:	460f      	mov	r7, r1
 80093c4:	f7f7 fba8 	bl	8000b18 <__aeabi_dcmpgt>
 80093c8:	2800      	cmp	r0, #0
 80093ca:	f040 8296 	bne.w	80098fa <_dtoa_r+0x992>
 80093ce:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80093d2:	4630      	mov	r0, r6
 80093d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80093d8:	4639      	mov	r1, r7
 80093da:	f7f7 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80093de:	2800      	cmp	r0, #0
 80093e0:	f040 8288 	bne.w	80098f4 <_dtoa_r+0x98c>
 80093e4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80093e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f2c0 8158 	blt.w	80096a4 <_dtoa_r+0x73c>
 80093f4:	f1ba 0f0e 	cmp.w	sl, #14
 80093f8:	f300 8154 	bgt.w	80096a4 <_dtoa_r+0x73c>
 80093fc:	4b6b      	ldr	r3, [pc, #428]	; (80095ac <_dtoa_r+0x644>)
 80093fe:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009402:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009408:	2b00      	cmp	r3, #0
 800940a:	f280 80e3 	bge.w	80095d4 <_dtoa_r+0x66c>
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	2b00      	cmp	r3, #0
 8009412:	f300 80df 	bgt.w	80095d4 <_dtoa_r+0x66c>
 8009416:	f040 826d 	bne.w	80098f4 <_dtoa_r+0x98c>
 800941a:	4b69      	ldr	r3, [pc, #420]	; (80095c0 <_dtoa_r+0x658>)
 800941c:	2200      	movs	r2, #0
 800941e:	4640      	mov	r0, r8
 8009420:	4649      	mov	r1, r9
 8009422:	f7f7 f8e9 	bl	80005f8 <__aeabi_dmul>
 8009426:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800942a:	f7f7 fb6b 	bl	8000b04 <__aeabi_dcmpge>
 800942e:	9e01      	ldr	r6, [sp, #4]
 8009430:	4637      	mov	r7, r6
 8009432:	2800      	cmp	r0, #0
 8009434:	f040 8243 	bne.w	80098be <_dtoa_r+0x956>
 8009438:	9d00      	ldr	r5, [sp, #0]
 800943a:	2331      	movs	r3, #49	; 0x31
 800943c:	f805 3b01 	strb.w	r3, [r5], #1
 8009440:	f10a 0a01 	add.w	sl, sl, #1
 8009444:	e23f      	b.n	80098c6 <_dtoa_r+0x95e>
 8009446:	07f2      	lsls	r2, r6, #31
 8009448:	d505      	bpl.n	8009456 <_dtoa_r+0x4ee>
 800944a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800944e:	f7f7 f8d3 	bl	80005f8 <__aeabi_dmul>
 8009452:	3501      	adds	r5, #1
 8009454:	2301      	movs	r3, #1
 8009456:	1076      	asrs	r6, r6, #1
 8009458:	3708      	adds	r7, #8
 800945a:	e76c      	b.n	8009336 <_dtoa_r+0x3ce>
 800945c:	2502      	movs	r5, #2
 800945e:	e76f      	b.n	8009340 <_dtoa_r+0x3d8>
 8009460:	9b01      	ldr	r3, [sp, #4]
 8009462:	f8cd a01c 	str.w	sl, [sp, #28]
 8009466:	930c      	str	r3, [sp, #48]	; 0x30
 8009468:	e78d      	b.n	8009386 <_dtoa_r+0x41e>
 800946a:	9900      	ldr	r1, [sp, #0]
 800946c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800946e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009470:	4b4e      	ldr	r3, [pc, #312]	; (80095ac <_dtoa_r+0x644>)
 8009472:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009476:	4401      	add	r1, r0
 8009478:	9102      	str	r1, [sp, #8]
 800947a:	9908      	ldr	r1, [sp, #32]
 800947c:	eeb0 8a47 	vmov.f32	s16, s14
 8009480:	eef0 8a67 	vmov.f32	s17, s15
 8009484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009488:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800948c:	2900      	cmp	r1, #0
 800948e:	d045      	beq.n	800951c <_dtoa_r+0x5b4>
 8009490:	494c      	ldr	r1, [pc, #304]	; (80095c4 <_dtoa_r+0x65c>)
 8009492:	2000      	movs	r0, #0
 8009494:	f7f7 f9da 	bl	800084c <__aeabi_ddiv>
 8009498:	ec53 2b18 	vmov	r2, r3, d8
 800949c:	f7f6 fef4 	bl	8000288 <__aeabi_dsub>
 80094a0:	9d00      	ldr	r5, [sp, #0]
 80094a2:	ec41 0b18 	vmov	d8, r0, r1
 80094a6:	4639      	mov	r1, r7
 80094a8:	4630      	mov	r0, r6
 80094aa:	f7f7 fb55 	bl	8000b58 <__aeabi_d2iz>
 80094ae:	900c      	str	r0, [sp, #48]	; 0x30
 80094b0:	f7f7 f838 	bl	8000524 <__aeabi_i2d>
 80094b4:	4602      	mov	r2, r0
 80094b6:	460b      	mov	r3, r1
 80094b8:	4630      	mov	r0, r6
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f6 fee4 	bl	8000288 <__aeabi_dsub>
 80094c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094c2:	3330      	adds	r3, #48	; 0x30
 80094c4:	f805 3b01 	strb.w	r3, [r5], #1
 80094c8:	ec53 2b18 	vmov	r2, r3, d8
 80094cc:	4606      	mov	r6, r0
 80094ce:	460f      	mov	r7, r1
 80094d0:	f7f7 fb04 	bl	8000adc <__aeabi_dcmplt>
 80094d4:	2800      	cmp	r0, #0
 80094d6:	d165      	bne.n	80095a4 <_dtoa_r+0x63c>
 80094d8:	4632      	mov	r2, r6
 80094da:	463b      	mov	r3, r7
 80094dc:	4935      	ldr	r1, [pc, #212]	; (80095b4 <_dtoa_r+0x64c>)
 80094de:	2000      	movs	r0, #0
 80094e0:	f7f6 fed2 	bl	8000288 <__aeabi_dsub>
 80094e4:	ec53 2b18 	vmov	r2, r3, d8
 80094e8:	f7f7 faf8 	bl	8000adc <__aeabi_dcmplt>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	f040 80b9 	bne.w	8009664 <_dtoa_r+0x6fc>
 80094f2:	9b02      	ldr	r3, [sp, #8]
 80094f4:	429d      	cmp	r5, r3
 80094f6:	f43f af75 	beq.w	80093e4 <_dtoa_r+0x47c>
 80094fa:	4b2f      	ldr	r3, [pc, #188]	; (80095b8 <_dtoa_r+0x650>)
 80094fc:	ec51 0b18 	vmov	r0, r1, d8
 8009500:	2200      	movs	r2, #0
 8009502:	f7f7 f879 	bl	80005f8 <__aeabi_dmul>
 8009506:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <_dtoa_r+0x650>)
 8009508:	ec41 0b18 	vmov	d8, r0, r1
 800950c:	2200      	movs	r2, #0
 800950e:	4630      	mov	r0, r6
 8009510:	4639      	mov	r1, r7
 8009512:	f7f7 f871 	bl	80005f8 <__aeabi_dmul>
 8009516:	4606      	mov	r6, r0
 8009518:	460f      	mov	r7, r1
 800951a:	e7c4      	b.n	80094a6 <_dtoa_r+0x53e>
 800951c:	ec51 0b17 	vmov	r0, r1, d7
 8009520:	f7f7 f86a 	bl	80005f8 <__aeabi_dmul>
 8009524:	9b02      	ldr	r3, [sp, #8]
 8009526:	9d00      	ldr	r5, [sp, #0]
 8009528:	930c      	str	r3, [sp, #48]	; 0x30
 800952a:	ec41 0b18 	vmov	d8, r0, r1
 800952e:	4639      	mov	r1, r7
 8009530:	4630      	mov	r0, r6
 8009532:	f7f7 fb11 	bl	8000b58 <__aeabi_d2iz>
 8009536:	9011      	str	r0, [sp, #68]	; 0x44
 8009538:	f7f6 fff4 	bl	8000524 <__aeabi_i2d>
 800953c:	4602      	mov	r2, r0
 800953e:	460b      	mov	r3, r1
 8009540:	4630      	mov	r0, r6
 8009542:	4639      	mov	r1, r7
 8009544:	f7f6 fea0 	bl	8000288 <__aeabi_dsub>
 8009548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800954a:	3330      	adds	r3, #48	; 0x30
 800954c:	f805 3b01 	strb.w	r3, [r5], #1
 8009550:	9b02      	ldr	r3, [sp, #8]
 8009552:	429d      	cmp	r5, r3
 8009554:	4606      	mov	r6, r0
 8009556:	460f      	mov	r7, r1
 8009558:	f04f 0200 	mov.w	r2, #0
 800955c:	d134      	bne.n	80095c8 <_dtoa_r+0x660>
 800955e:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <_dtoa_r+0x65c>)
 8009560:	ec51 0b18 	vmov	r0, r1, d8
 8009564:	f7f6 fe92 	bl	800028c <__adddf3>
 8009568:	4602      	mov	r2, r0
 800956a:	460b      	mov	r3, r1
 800956c:	4630      	mov	r0, r6
 800956e:	4639      	mov	r1, r7
 8009570:	f7f7 fad2 	bl	8000b18 <__aeabi_dcmpgt>
 8009574:	2800      	cmp	r0, #0
 8009576:	d175      	bne.n	8009664 <_dtoa_r+0x6fc>
 8009578:	ec53 2b18 	vmov	r2, r3, d8
 800957c:	4911      	ldr	r1, [pc, #68]	; (80095c4 <_dtoa_r+0x65c>)
 800957e:	2000      	movs	r0, #0
 8009580:	f7f6 fe82 	bl	8000288 <__aeabi_dsub>
 8009584:	4602      	mov	r2, r0
 8009586:	460b      	mov	r3, r1
 8009588:	4630      	mov	r0, r6
 800958a:	4639      	mov	r1, r7
 800958c:	f7f7 faa6 	bl	8000adc <__aeabi_dcmplt>
 8009590:	2800      	cmp	r0, #0
 8009592:	f43f af27 	beq.w	80093e4 <_dtoa_r+0x47c>
 8009596:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009598:	1e6b      	subs	r3, r5, #1
 800959a:	930c      	str	r3, [sp, #48]	; 0x30
 800959c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80095a0:	2b30      	cmp	r3, #48	; 0x30
 80095a2:	d0f8      	beq.n	8009596 <_dtoa_r+0x62e>
 80095a4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80095a8:	e04a      	b.n	8009640 <_dtoa_r+0x6d8>
 80095aa:	bf00      	nop
 80095ac:	0800b450 	.word	0x0800b450
 80095b0:	0800b428 	.word	0x0800b428
 80095b4:	3ff00000 	.word	0x3ff00000
 80095b8:	40240000 	.word	0x40240000
 80095bc:	401c0000 	.word	0x401c0000
 80095c0:	40140000 	.word	0x40140000
 80095c4:	3fe00000 	.word	0x3fe00000
 80095c8:	4baf      	ldr	r3, [pc, #700]	; (8009888 <_dtoa_r+0x920>)
 80095ca:	f7f7 f815 	bl	80005f8 <__aeabi_dmul>
 80095ce:	4606      	mov	r6, r0
 80095d0:	460f      	mov	r7, r1
 80095d2:	e7ac      	b.n	800952e <_dtoa_r+0x5c6>
 80095d4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80095d8:	9d00      	ldr	r5, [sp, #0]
 80095da:	4642      	mov	r2, r8
 80095dc:	464b      	mov	r3, r9
 80095de:	4630      	mov	r0, r6
 80095e0:	4639      	mov	r1, r7
 80095e2:	f7f7 f933 	bl	800084c <__aeabi_ddiv>
 80095e6:	f7f7 fab7 	bl	8000b58 <__aeabi_d2iz>
 80095ea:	9002      	str	r0, [sp, #8]
 80095ec:	f7f6 ff9a 	bl	8000524 <__aeabi_i2d>
 80095f0:	4642      	mov	r2, r8
 80095f2:	464b      	mov	r3, r9
 80095f4:	f7f7 f800 	bl	80005f8 <__aeabi_dmul>
 80095f8:	4602      	mov	r2, r0
 80095fa:	460b      	mov	r3, r1
 80095fc:	4630      	mov	r0, r6
 80095fe:	4639      	mov	r1, r7
 8009600:	f7f6 fe42 	bl	8000288 <__aeabi_dsub>
 8009604:	9e02      	ldr	r6, [sp, #8]
 8009606:	9f01      	ldr	r7, [sp, #4]
 8009608:	3630      	adds	r6, #48	; 0x30
 800960a:	f805 6b01 	strb.w	r6, [r5], #1
 800960e:	9e00      	ldr	r6, [sp, #0]
 8009610:	1bae      	subs	r6, r5, r6
 8009612:	42b7      	cmp	r7, r6
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	d137      	bne.n	800968a <_dtoa_r+0x722>
 800961a:	f7f6 fe37 	bl	800028c <__adddf3>
 800961e:	4642      	mov	r2, r8
 8009620:	464b      	mov	r3, r9
 8009622:	4606      	mov	r6, r0
 8009624:	460f      	mov	r7, r1
 8009626:	f7f7 fa77 	bl	8000b18 <__aeabi_dcmpgt>
 800962a:	b9c8      	cbnz	r0, 8009660 <_dtoa_r+0x6f8>
 800962c:	4642      	mov	r2, r8
 800962e:	464b      	mov	r3, r9
 8009630:	4630      	mov	r0, r6
 8009632:	4639      	mov	r1, r7
 8009634:	f7f7 fa48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009638:	b110      	cbz	r0, 8009640 <_dtoa_r+0x6d8>
 800963a:	9b02      	ldr	r3, [sp, #8]
 800963c:	07d9      	lsls	r1, r3, #31
 800963e:	d40f      	bmi.n	8009660 <_dtoa_r+0x6f8>
 8009640:	4620      	mov	r0, r4
 8009642:	4659      	mov	r1, fp
 8009644:	f000 fce8 	bl	800a018 <_Bfree>
 8009648:	2300      	movs	r3, #0
 800964a:	702b      	strb	r3, [r5, #0]
 800964c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800964e:	f10a 0001 	add.w	r0, sl, #1
 8009652:	6018      	str	r0, [r3, #0]
 8009654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009656:	2b00      	cmp	r3, #0
 8009658:	f43f acd8 	beq.w	800900c <_dtoa_r+0xa4>
 800965c:	601d      	str	r5, [r3, #0]
 800965e:	e4d5      	b.n	800900c <_dtoa_r+0xa4>
 8009660:	f8cd a01c 	str.w	sl, [sp, #28]
 8009664:	462b      	mov	r3, r5
 8009666:	461d      	mov	r5, r3
 8009668:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800966c:	2a39      	cmp	r2, #57	; 0x39
 800966e:	d108      	bne.n	8009682 <_dtoa_r+0x71a>
 8009670:	9a00      	ldr	r2, [sp, #0]
 8009672:	429a      	cmp	r2, r3
 8009674:	d1f7      	bne.n	8009666 <_dtoa_r+0x6fe>
 8009676:	9a07      	ldr	r2, [sp, #28]
 8009678:	9900      	ldr	r1, [sp, #0]
 800967a:	3201      	adds	r2, #1
 800967c:	9207      	str	r2, [sp, #28]
 800967e:	2230      	movs	r2, #48	; 0x30
 8009680:	700a      	strb	r2, [r1, #0]
 8009682:	781a      	ldrb	r2, [r3, #0]
 8009684:	3201      	adds	r2, #1
 8009686:	701a      	strb	r2, [r3, #0]
 8009688:	e78c      	b.n	80095a4 <_dtoa_r+0x63c>
 800968a:	4b7f      	ldr	r3, [pc, #508]	; (8009888 <_dtoa_r+0x920>)
 800968c:	2200      	movs	r2, #0
 800968e:	f7f6 ffb3 	bl	80005f8 <__aeabi_dmul>
 8009692:	2200      	movs	r2, #0
 8009694:	2300      	movs	r3, #0
 8009696:	4606      	mov	r6, r0
 8009698:	460f      	mov	r7, r1
 800969a:	f7f7 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800969e:	2800      	cmp	r0, #0
 80096a0:	d09b      	beq.n	80095da <_dtoa_r+0x672>
 80096a2:	e7cd      	b.n	8009640 <_dtoa_r+0x6d8>
 80096a4:	9a08      	ldr	r2, [sp, #32]
 80096a6:	2a00      	cmp	r2, #0
 80096a8:	f000 80c4 	beq.w	8009834 <_dtoa_r+0x8cc>
 80096ac:	9a05      	ldr	r2, [sp, #20]
 80096ae:	2a01      	cmp	r2, #1
 80096b0:	f300 80a8 	bgt.w	8009804 <_dtoa_r+0x89c>
 80096b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	f000 80a0 	beq.w	80097fc <_dtoa_r+0x894>
 80096bc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80096c0:	9e06      	ldr	r6, [sp, #24]
 80096c2:	4645      	mov	r5, r8
 80096c4:	9a04      	ldr	r2, [sp, #16]
 80096c6:	2101      	movs	r1, #1
 80096c8:	441a      	add	r2, r3
 80096ca:	4620      	mov	r0, r4
 80096cc:	4498      	add	r8, r3
 80096ce:	9204      	str	r2, [sp, #16]
 80096d0:	f000 fd5e 	bl	800a190 <__i2b>
 80096d4:	4607      	mov	r7, r0
 80096d6:	2d00      	cmp	r5, #0
 80096d8:	dd0b      	ble.n	80096f2 <_dtoa_r+0x78a>
 80096da:	9b04      	ldr	r3, [sp, #16]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	dd08      	ble.n	80096f2 <_dtoa_r+0x78a>
 80096e0:	42ab      	cmp	r3, r5
 80096e2:	9a04      	ldr	r2, [sp, #16]
 80096e4:	bfa8      	it	ge
 80096e6:	462b      	movge	r3, r5
 80096e8:	eba8 0803 	sub.w	r8, r8, r3
 80096ec:	1aed      	subs	r5, r5, r3
 80096ee:	1ad3      	subs	r3, r2, r3
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	9b06      	ldr	r3, [sp, #24]
 80096f4:	b1fb      	cbz	r3, 8009736 <_dtoa_r+0x7ce>
 80096f6:	9b08      	ldr	r3, [sp, #32]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 809f 	beq.w	800983c <_dtoa_r+0x8d4>
 80096fe:	2e00      	cmp	r6, #0
 8009700:	dd11      	ble.n	8009726 <_dtoa_r+0x7be>
 8009702:	4639      	mov	r1, r7
 8009704:	4632      	mov	r2, r6
 8009706:	4620      	mov	r0, r4
 8009708:	f000 fdfe 	bl	800a308 <__pow5mult>
 800970c:	465a      	mov	r2, fp
 800970e:	4601      	mov	r1, r0
 8009710:	4607      	mov	r7, r0
 8009712:	4620      	mov	r0, r4
 8009714:	f000 fd52 	bl	800a1bc <__multiply>
 8009718:	4659      	mov	r1, fp
 800971a:	9007      	str	r0, [sp, #28]
 800971c:	4620      	mov	r0, r4
 800971e:	f000 fc7b 	bl	800a018 <_Bfree>
 8009722:	9b07      	ldr	r3, [sp, #28]
 8009724:	469b      	mov	fp, r3
 8009726:	9b06      	ldr	r3, [sp, #24]
 8009728:	1b9a      	subs	r2, r3, r6
 800972a:	d004      	beq.n	8009736 <_dtoa_r+0x7ce>
 800972c:	4659      	mov	r1, fp
 800972e:	4620      	mov	r0, r4
 8009730:	f000 fdea 	bl	800a308 <__pow5mult>
 8009734:	4683      	mov	fp, r0
 8009736:	2101      	movs	r1, #1
 8009738:	4620      	mov	r0, r4
 800973a:	f000 fd29 	bl	800a190 <__i2b>
 800973e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009740:	2b00      	cmp	r3, #0
 8009742:	4606      	mov	r6, r0
 8009744:	dd7c      	ble.n	8009840 <_dtoa_r+0x8d8>
 8009746:	461a      	mov	r2, r3
 8009748:	4601      	mov	r1, r0
 800974a:	4620      	mov	r0, r4
 800974c:	f000 fddc 	bl	800a308 <__pow5mult>
 8009750:	9b05      	ldr	r3, [sp, #20]
 8009752:	2b01      	cmp	r3, #1
 8009754:	4606      	mov	r6, r0
 8009756:	dd76      	ble.n	8009846 <_dtoa_r+0x8de>
 8009758:	2300      	movs	r3, #0
 800975a:	9306      	str	r3, [sp, #24]
 800975c:	6933      	ldr	r3, [r6, #16]
 800975e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009762:	6918      	ldr	r0, [r3, #16]
 8009764:	f000 fcc4 	bl	800a0f0 <__hi0bits>
 8009768:	f1c0 0020 	rsb	r0, r0, #32
 800976c:	9b04      	ldr	r3, [sp, #16]
 800976e:	4418      	add	r0, r3
 8009770:	f010 001f 	ands.w	r0, r0, #31
 8009774:	f000 8086 	beq.w	8009884 <_dtoa_r+0x91c>
 8009778:	f1c0 0320 	rsb	r3, r0, #32
 800977c:	2b04      	cmp	r3, #4
 800977e:	dd7f      	ble.n	8009880 <_dtoa_r+0x918>
 8009780:	f1c0 001c 	rsb	r0, r0, #28
 8009784:	9b04      	ldr	r3, [sp, #16]
 8009786:	4403      	add	r3, r0
 8009788:	4480      	add	r8, r0
 800978a:	4405      	add	r5, r0
 800978c:	9304      	str	r3, [sp, #16]
 800978e:	f1b8 0f00 	cmp.w	r8, #0
 8009792:	dd05      	ble.n	80097a0 <_dtoa_r+0x838>
 8009794:	4659      	mov	r1, fp
 8009796:	4642      	mov	r2, r8
 8009798:	4620      	mov	r0, r4
 800979a:	f000 fe0f 	bl	800a3bc <__lshift>
 800979e:	4683      	mov	fp, r0
 80097a0:	9b04      	ldr	r3, [sp, #16]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	dd05      	ble.n	80097b2 <_dtoa_r+0x84a>
 80097a6:	4631      	mov	r1, r6
 80097a8:	461a      	mov	r2, r3
 80097aa:	4620      	mov	r0, r4
 80097ac:	f000 fe06 	bl	800a3bc <__lshift>
 80097b0:	4606      	mov	r6, r0
 80097b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d069      	beq.n	800988c <_dtoa_r+0x924>
 80097b8:	4631      	mov	r1, r6
 80097ba:	4658      	mov	r0, fp
 80097bc:	f000 fe6a 	bl	800a494 <__mcmp>
 80097c0:	2800      	cmp	r0, #0
 80097c2:	da63      	bge.n	800988c <_dtoa_r+0x924>
 80097c4:	2300      	movs	r3, #0
 80097c6:	4659      	mov	r1, fp
 80097c8:	220a      	movs	r2, #10
 80097ca:	4620      	mov	r0, r4
 80097cc:	f000 fc46 	bl	800a05c <__multadd>
 80097d0:	9b08      	ldr	r3, [sp, #32]
 80097d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097d6:	4683      	mov	fp, r0
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 818f 	beq.w	8009afc <_dtoa_r+0xb94>
 80097de:	4639      	mov	r1, r7
 80097e0:	2300      	movs	r3, #0
 80097e2:	220a      	movs	r2, #10
 80097e4:	4620      	mov	r0, r4
 80097e6:	f000 fc39 	bl	800a05c <__multadd>
 80097ea:	f1b9 0f00 	cmp.w	r9, #0
 80097ee:	4607      	mov	r7, r0
 80097f0:	f300 808e 	bgt.w	8009910 <_dtoa_r+0x9a8>
 80097f4:	9b05      	ldr	r3, [sp, #20]
 80097f6:	2b02      	cmp	r3, #2
 80097f8:	dc50      	bgt.n	800989c <_dtoa_r+0x934>
 80097fa:	e089      	b.n	8009910 <_dtoa_r+0x9a8>
 80097fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80097fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009802:	e75d      	b.n	80096c0 <_dtoa_r+0x758>
 8009804:	9b01      	ldr	r3, [sp, #4]
 8009806:	1e5e      	subs	r6, r3, #1
 8009808:	9b06      	ldr	r3, [sp, #24]
 800980a:	42b3      	cmp	r3, r6
 800980c:	bfbf      	itttt	lt
 800980e:	9b06      	ldrlt	r3, [sp, #24]
 8009810:	9606      	strlt	r6, [sp, #24]
 8009812:	1af2      	sublt	r2, r6, r3
 8009814:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009816:	bfb6      	itet	lt
 8009818:	189b      	addlt	r3, r3, r2
 800981a:	1b9e      	subge	r6, r3, r6
 800981c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800981e:	9b01      	ldr	r3, [sp, #4]
 8009820:	bfb8      	it	lt
 8009822:	2600      	movlt	r6, #0
 8009824:	2b00      	cmp	r3, #0
 8009826:	bfb5      	itete	lt
 8009828:	eba8 0503 	sublt.w	r5, r8, r3
 800982c:	9b01      	ldrge	r3, [sp, #4]
 800982e:	2300      	movlt	r3, #0
 8009830:	4645      	movge	r5, r8
 8009832:	e747      	b.n	80096c4 <_dtoa_r+0x75c>
 8009834:	9e06      	ldr	r6, [sp, #24]
 8009836:	9f08      	ldr	r7, [sp, #32]
 8009838:	4645      	mov	r5, r8
 800983a:	e74c      	b.n	80096d6 <_dtoa_r+0x76e>
 800983c:	9a06      	ldr	r2, [sp, #24]
 800983e:	e775      	b.n	800972c <_dtoa_r+0x7c4>
 8009840:	9b05      	ldr	r3, [sp, #20]
 8009842:	2b01      	cmp	r3, #1
 8009844:	dc18      	bgt.n	8009878 <_dtoa_r+0x910>
 8009846:	9b02      	ldr	r3, [sp, #8]
 8009848:	b9b3      	cbnz	r3, 8009878 <_dtoa_r+0x910>
 800984a:	9b03      	ldr	r3, [sp, #12]
 800984c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009850:	b9a3      	cbnz	r3, 800987c <_dtoa_r+0x914>
 8009852:	9b03      	ldr	r3, [sp, #12]
 8009854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009858:	0d1b      	lsrs	r3, r3, #20
 800985a:	051b      	lsls	r3, r3, #20
 800985c:	b12b      	cbz	r3, 800986a <_dtoa_r+0x902>
 800985e:	9b04      	ldr	r3, [sp, #16]
 8009860:	3301      	adds	r3, #1
 8009862:	9304      	str	r3, [sp, #16]
 8009864:	f108 0801 	add.w	r8, r8, #1
 8009868:	2301      	movs	r3, #1
 800986a:	9306      	str	r3, [sp, #24]
 800986c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800986e:	2b00      	cmp	r3, #0
 8009870:	f47f af74 	bne.w	800975c <_dtoa_r+0x7f4>
 8009874:	2001      	movs	r0, #1
 8009876:	e779      	b.n	800976c <_dtoa_r+0x804>
 8009878:	2300      	movs	r3, #0
 800987a:	e7f6      	b.n	800986a <_dtoa_r+0x902>
 800987c:	9b02      	ldr	r3, [sp, #8]
 800987e:	e7f4      	b.n	800986a <_dtoa_r+0x902>
 8009880:	d085      	beq.n	800978e <_dtoa_r+0x826>
 8009882:	4618      	mov	r0, r3
 8009884:	301c      	adds	r0, #28
 8009886:	e77d      	b.n	8009784 <_dtoa_r+0x81c>
 8009888:	40240000 	.word	0x40240000
 800988c:	9b01      	ldr	r3, [sp, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	dc38      	bgt.n	8009904 <_dtoa_r+0x99c>
 8009892:	9b05      	ldr	r3, [sp, #20]
 8009894:	2b02      	cmp	r3, #2
 8009896:	dd35      	ble.n	8009904 <_dtoa_r+0x99c>
 8009898:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800989c:	f1b9 0f00 	cmp.w	r9, #0
 80098a0:	d10d      	bne.n	80098be <_dtoa_r+0x956>
 80098a2:	4631      	mov	r1, r6
 80098a4:	464b      	mov	r3, r9
 80098a6:	2205      	movs	r2, #5
 80098a8:	4620      	mov	r0, r4
 80098aa:	f000 fbd7 	bl	800a05c <__multadd>
 80098ae:	4601      	mov	r1, r0
 80098b0:	4606      	mov	r6, r0
 80098b2:	4658      	mov	r0, fp
 80098b4:	f000 fdee 	bl	800a494 <__mcmp>
 80098b8:	2800      	cmp	r0, #0
 80098ba:	f73f adbd 	bgt.w	8009438 <_dtoa_r+0x4d0>
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	9d00      	ldr	r5, [sp, #0]
 80098c2:	ea6f 0a03 	mvn.w	sl, r3
 80098c6:	f04f 0800 	mov.w	r8, #0
 80098ca:	4631      	mov	r1, r6
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fba3 	bl	800a018 <_Bfree>
 80098d2:	2f00      	cmp	r7, #0
 80098d4:	f43f aeb4 	beq.w	8009640 <_dtoa_r+0x6d8>
 80098d8:	f1b8 0f00 	cmp.w	r8, #0
 80098dc:	d005      	beq.n	80098ea <_dtoa_r+0x982>
 80098de:	45b8      	cmp	r8, r7
 80098e0:	d003      	beq.n	80098ea <_dtoa_r+0x982>
 80098e2:	4641      	mov	r1, r8
 80098e4:	4620      	mov	r0, r4
 80098e6:	f000 fb97 	bl	800a018 <_Bfree>
 80098ea:	4639      	mov	r1, r7
 80098ec:	4620      	mov	r0, r4
 80098ee:	f000 fb93 	bl	800a018 <_Bfree>
 80098f2:	e6a5      	b.n	8009640 <_dtoa_r+0x6d8>
 80098f4:	2600      	movs	r6, #0
 80098f6:	4637      	mov	r7, r6
 80098f8:	e7e1      	b.n	80098be <_dtoa_r+0x956>
 80098fa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80098fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009900:	4637      	mov	r7, r6
 8009902:	e599      	b.n	8009438 <_dtoa_r+0x4d0>
 8009904:	9b08      	ldr	r3, [sp, #32]
 8009906:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	f000 80fd 	beq.w	8009b0a <_dtoa_r+0xba2>
 8009910:	2d00      	cmp	r5, #0
 8009912:	dd05      	ble.n	8009920 <_dtoa_r+0x9b8>
 8009914:	4639      	mov	r1, r7
 8009916:	462a      	mov	r2, r5
 8009918:	4620      	mov	r0, r4
 800991a:	f000 fd4f 	bl	800a3bc <__lshift>
 800991e:	4607      	mov	r7, r0
 8009920:	9b06      	ldr	r3, [sp, #24]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d05c      	beq.n	80099e0 <_dtoa_r+0xa78>
 8009926:	6879      	ldr	r1, [r7, #4]
 8009928:	4620      	mov	r0, r4
 800992a:	f000 fb35 	bl	8009f98 <_Balloc>
 800992e:	4605      	mov	r5, r0
 8009930:	b928      	cbnz	r0, 800993e <_dtoa_r+0x9d6>
 8009932:	4b80      	ldr	r3, [pc, #512]	; (8009b34 <_dtoa_r+0xbcc>)
 8009934:	4602      	mov	r2, r0
 8009936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800993a:	f7ff bb2e 	b.w	8008f9a <_dtoa_r+0x32>
 800993e:	693a      	ldr	r2, [r7, #16]
 8009940:	3202      	adds	r2, #2
 8009942:	0092      	lsls	r2, r2, #2
 8009944:	f107 010c 	add.w	r1, r7, #12
 8009948:	300c      	adds	r0, #12
 800994a:	f7fe fc7f 	bl	800824c <memcpy>
 800994e:	2201      	movs	r2, #1
 8009950:	4629      	mov	r1, r5
 8009952:	4620      	mov	r0, r4
 8009954:	f000 fd32 	bl	800a3bc <__lshift>
 8009958:	9b00      	ldr	r3, [sp, #0]
 800995a:	3301      	adds	r3, #1
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	9b00      	ldr	r3, [sp, #0]
 8009960:	444b      	add	r3, r9
 8009962:	9307      	str	r3, [sp, #28]
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	f003 0301 	and.w	r3, r3, #1
 800996a:	46b8      	mov	r8, r7
 800996c:	9306      	str	r3, [sp, #24]
 800996e:	4607      	mov	r7, r0
 8009970:	9b01      	ldr	r3, [sp, #4]
 8009972:	4631      	mov	r1, r6
 8009974:	3b01      	subs	r3, #1
 8009976:	4658      	mov	r0, fp
 8009978:	9302      	str	r3, [sp, #8]
 800997a:	f7ff fa69 	bl	8008e50 <quorem>
 800997e:	4603      	mov	r3, r0
 8009980:	3330      	adds	r3, #48	; 0x30
 8009982:	9004      	str	r0, [sp, #16]
 8009984:	4641      	mov	r1, r8
 8009986:	4658      	mov	r0, fp
 8009988:	9308      	str	r3, [sp, #32]
 800998a:	f000 fd83 	bl	800a494 <__mcmp>
 800998e:	463a      	mov	r2, r7
 8009990:	4681      	mov	r9, r0
 8009992:	4631      	mov	r1, r6
 8009994:	4620      	mov	r0, r4
 8009996:	f000 fd99 	bl	800a4cc <__mdiff>
 800999a:	68c2      	ldr	r2, [r0, #12]
 800999c:	9b08      	ldr	r3, [sp, #32]
 800999e:	4605      	mov	r5, r0
 80099a0:	bb02      	cbnz	r2, 80099e4 <_dtoa_r+0xa7c>
 80099a2:	4601      	mov	r1, r0
 80099a4:	4658      	mov	r0, fp
 80099a6:	f000 fd75 	bl	800a494 <__mcmp>
 80099aa:	9b08      	ldr	r3, [sp, #32]
 80099ac:	4602      	mov	r2, r0
 80099ae:	4629      	mov	r1, r5
 80099b0:	4620      	mov	r0, r4
 80099b2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80099b6:	f000 fb2f 	bl	800a018 <_Bfree>
 80099ba:	9b05      	ldr	r3, [sp, #20]
 80099bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099be:	9d01      	ldr	r5, [sp, #4]
 80099c0:	ea43 0102 	orr.w	r1, r3, r2
 80099c4:	9b06      	ldr	r3, [sp, #24]
 80099c6:	430b      	orrs	r3, r1
 80099c8:	9b08      	ldr	r3, [sp, #32]
 80099ca:	d10d      	bne.n	80099e8 <_dtoa_r+0xa80>
 80099cc:	2b39      	cmp	r3, #57	; 0x39
 80099ce:	d029      	beq.n	8009a24 <_dtoa_r+0xabc>
 80099d0:	f1b9 0f00 	cmp.w	r9, #0
 80099d4:	dd01      	ble.n	80099da <_dtoa_r+0xa72>
 80099d6:	9b04      	ldr	r3, [sp, #16]
 80099d8:	3331      	adds	r3, #49	; 0x31
 80099da:	9a02      	ldr	r2, [sp, #8]
 80099dc:	7013      	strb	r3, [r2, #0]
 80099de:	e774      	b.n	80098ca <_dtoa_r+0x962>
 80099e0:	4638      	mov	r0, r7
 80099e2:	e7b9      	b.n	8009958 <_dtoa_r+0x9f0>
 80099e4:	2201      	movs	r2, #1
 80099e6:	e7e2      	b.n	80099ae <_dtoa_r+0xa46>
 80099e8:	f1b9 0f00 	cmp.w	r9, #0
 80099ec:	db06      	blt.n	80099fc <_dtoa_r+0xa94>
 80099ee:	9905      	ldr	r1, [sp, #20]
 80099f0:	ea41 0909 	orr.w	r9, r1, r9
 80099f4:	9906      	ldr	r1, [sp, #24]
 80099f6:	ea59 0101 	orrs.w	r1, r9, r1
 80099fa:	d120      	bne.n	8009a3e <_dtoa_r+0xad6>
 80099fc:	2a00      	cmp	r2, #0
 80099fe:	ddec      	ble.n	80099da <_dtoa_r+0xa72>
 8009a00:	4659      	mov	r1, fp
 8009a02:	2201      	movs	r2, #1
 8009a04:	4620      	mov	r0, r4
 8009a06:	9301      	str	r3, [sp, #4]
 8009a08:	f000 fcd8 	bl	800a3bc <__lshift>
 8009a0c:	4631      	mov	r1, r6
 8009a0e:	4683      	mov	fp, r0
 8009a10:	f000 fd40 	bl	800a494 <__mcmp>
 8009a14:	2800      	cmp	r0, #0
 8009a16:	9b01      	ldr	r3, [sp, #4]
 8009a18:	dc02      	bgt.n	8009a20 <_dtoa_r+0xab8>
 8009a1a:	d1de      	bne.n	80099da <_dtoa_r+0xa72>
 8009a1c:	07da      	lsls	r2, r3, #31
 8009a1e:	d5dc      	bpl.n	80099da <_dtoa_r+0xa72>
 8009a20:	2b39      	cmp	r3, #57	; 0x39
 8009a22:	d1d8      	bne.n	80099d6 <_dtoa_r+0xa6e>
 8009a24:	9a02      	ldr	r2, [sp, #8]
 8009a26:	2339      	movs	r3, #57	; 0x39
 8009a28:	7013      	strb	r3, [r2, #0]
 8009a2a:	462b      	mov	r3, r5
 8009a2c:	461d      	mov	r5, r3
 8009a2e:	3b01      	subs	r3, #1
 8009a30:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a34:	2a39      	cmp	r2, #57	; 0x39
 8009a36:	d050      	beq.n	8009ada <_dtoa_r+0xb72>
 8009a38:	3201      	adds	r2, #1
 8009a3a:	701a      	strb	r2, [r3, #0]
 8009a3c:	e745      	b.n	80098ca <_dtoa_r+0x962>
 8009a3e:	2a00      	cmp	r2, #0
 8009a40:	dd03      	ble.n	8009a4a <_dtoa_r+0xae2>
 8009a42:	2b39      	cmp	r3, #57	; 0x39
 8009a44:	d0ee      	beq.n	8009a24 <_dtoa_r+0xabc>
 8009a46:	3301      	adds	r3, #1
 8009a48:	e7c7      	b.n	80099da <_dtoa_r+0xa72>
 8009a4a:	9a01      	ldr	r2, [sp, #4]
 8009a4c:	9907      	ldr	r1, [sp, #28]
 8009a4e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009a52:	428a      	cmp	r2, r1
 8009a54:	d02a      	beq.n	8009aac <_dtoa_r+0xb44>
 8009a56:	4659      	mov	r1, fp
 8009a58:	2300      	movs	r3, #0
 8009a5a:	220a      	movs	r2, #10
 8009a5c:	4620      	mov	r0, r4
 8009a5e:	f000 fafd 	bl	800a05c <__multadd>
 8009a62:	45b8      	cmp	r8, r7
 8009a64:	4683      	mov	fp, r0
 8009a66:	f04f 0300 	mov.w	r3, #0
 8009a6a:	f04f 020a 	mov.w	r2, #10
 8009a6e:	4641      	mov	r1, r8
 8009a70:	4620      	mov	r0, r4
 8009a72:	d107      	bne.n	8009a84 <_dtoa_r+0xb1c>
 8009a74:	f000 faf2 	bl	800a05c <__multadd>
 8009a78:	4680      	mov	r8, r0
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	9b01      	ldr	r3, [sp, #4]
 8009a7e:	3301      	adds	r3, #1
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	e775      	b.n	8009970 <_dtoa_r+0xa08>
 8009a84:	f000 faea 	bl	800a05c <__multadd>
 8009a88:	4639      	mov	r1, r7
 8009a8a:	4680      	mov	r8, r0
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	220a      	movs	r2, #10
 8009a90:	4620      	mov	r0, r4
 8009a92:	f000 fae3 	bl	800a05c <__multadd>
 8009a96:	4607      	mov	r7, r0
 8009a98:	e7f0      	b.n	8009a7c <_dtoa_r+0xb14>
 8009a9a:	f1b9 0f00 	cmp.w	r9, #0
 8009a9e:	9a00      	ldr	r2, [sp, #0]
 8009aa0:	bfcc      	ite	gt
 8009aa2:	464d      	movgt	r5, r9
 8009aa4:	2501      	movle	r5, #1
 8009aa6:	4415      	add	r5, r2
 8009aa8:	f04f 0800 	mov.w	r8, #0
 8009aac:	4659      	mov	r1, fp
 8009aae:	2201      	movs	r2, #1
 8009ab0:	4620      	mov	r0, r4
 8009ab2:	9301      	str	r3, [sp, #4]
 8009ab4:	f000 fc82 	bl	800a3bc <__lshift>
 8009ab8:	4631      	mov	r1, r6
 8009aba:	4683      	mov	fp, r0
 8009abc:	f000 fcea 	bl	800a494 <__mcmp>
 8009ac0:	2800      	cmp	r0, #0
 8009ac2:	dcb2      	bgt.n	8009a2a <_dtoa_r+0xac2>
 8009ac4:	d102      	bne.n	8009acc <_dtoa_r+0xb64>
 8009ac6:	9b01      	ldr	r3, [sp, #4]
 8009ac8:	07db      	lsls	r3, r3, #31
 8009aca:	d4ae      	bmi.n	8009a2a <_dtoa_r+0xac2>
 8009acc:	462b      	mov	r3, r5
 8009ace:	461d      	mov	r5, r3
 8009ad0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ad4:	2a30      	cmp	r2, #48	; 0x30
 8009ad6:	d0fa      	beq.n	8009ace <_dtoa_r+0xb66>
 8009ad8:	e6f7      	b.n	80098ca <_dtoa_r+0x962>
 8009ada:	9a00      	ldr	r2, [sp, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d1a5      	bne.n	8009a2c <_dtoa_r+0xac4>
 8009ae0:	f10a 0a01 	add.w	sl, sl, #1
 8009ae4:	2331      	movs	r3, #49	; 0x31
 8009ae6:	e779      	b.n	80099dc <_dtoa_r+0xa74>
 8009ae8:	4b13      	ldr	r3, [pc, #76]	; (8009b38 <_dtoa_r+0xbd0>)
 8009aea:	f7ff baaf 	b.w	800904c <_dtoa_r+0xe4>
 8009aee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f47f aa86 	bne.w	8009002 <_dtoa_r+0x9a>
 8009af6:	4b11      	ldr	r3, [pc, #68]	; (8009b3c <_dtoa_r+0xbd4>)
 8009af8:	f7ff baa8 	b.w	800904c <_dtoa_r+0xe4>
 8009afc:	f1b9 0f00 	cmp.w	r9, #0
 8009b00:	dc03      	bgt.n	8009b0a <_dtoa_r+0xba2>
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	2b02      	cmp	r3, #2
 8009b06:	f73f aec9 	bgt.w	800989c <_dtoa_r+0x934>
 8009b0a:	9d00      	ldr	r5, [sp, #0]
 8009b0c:	4631      	mov	r1, r6
 8009b0e:	4658      	mov	r0, fp
 8009b10:	f7ff f99e 	bl	8008e50 <quorem>
 8009b14:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b18:	f805 3b01 	strb.w	r3, [r5], #1
 8009b1c:	9a00      	ldr	r2, [sp, #0]
 8009b1e:	1aaa      	subs	r2, r5, r2
 8009b20:	4591      	cmp	r9, r2
 8009b22:	ddba      	ble.n	8009a9a <_dtoa_r+0xb32>
 8009b24:	4659      	mov	r1, fp
 8009b26:	2300      	movs	r3, #0
 8009b28:	220a      	movs	r2, #10
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f000 fa96 	bl	800a05c <__multadd>
 8009b30:	4683      	mov	fp, r0
 8009b32:	e7eb      	b.n	8009b0c <_dtoa_r+0xba4>
 8009b34:	0800b353 	.word	0x0800b353
 8009b38:	0800b2ac 	.word	0x0800b2ac
 8009b3c:	0800b2d0 	.word	0x0800b2d0

08009b40 <__sflush_r>:
 8009b40:	898a      	ldrh	r2, [r1, #12]
 8009b42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b46:	4605      	mov	r5, r0
 8009b48:	0710      	lsls	r0, r2, #28
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	d458      	bmi.n	8009c00 <__sflush_r+0xc0>
 8009b4e:	684b      	ldr	r3, [r1, #4]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	dc05      	bgt.n	8009b60 <__sflush_r+0x20>
 8009b54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	dc02      	bgt.n	8009b60 <__sflush_r+0x20>
 8009b5a:	2000      	movs	r0, #0
 8009b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b62:	2e00      	cmp	r6, #0
 8009b64:	d0f9      	beq.n	8009b5a <__sflush_r+0x1a>
 8009b66:	2300      	movs	r3, #0
 8009b68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b6c:	682f      	ldr	r7, [r5, #0]
 8009b6e:	602b      	str	r3, [r5, #0]
 8009b70:	d032      	beq.n	8009bd8 <__sflush_r+0x98>
 8009b72:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	075a      	lsls	r2, r3, #29
 8009b78:	d505      	bpl.n	8009b86 <__sflush_r+0x46>
 8009b7a:	6863      	ldr	r3, [r4, #4]
 8009b7c:	1ac0      	subs	r0, r0, r3
 8009b7e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b80:	b10b      	cbz	r3, 8009b86 <__sflush_r+0x46>
 8009b82:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b84:	1ac0      	subs	r0, r0, r3
 8009b86:	2300      	movs	r3, #0
 8009b88:	4602      	mov	r2, r0
 8009b8a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b8c:	6a21      	ldr	r1, [r4, #32]
 8009b8e:	4628      	mov	r0, r5
 8009b90:	47b0      	blx	r6
 8009b92:	1c43      	adds	r3, r0, #1
 8009b94:	89a3      	ldrh	r3, [r4, #12]
 8009b96:	d106      	bne.n	8009ba6 <__sflush_r+0x66>
 8009b98:	6829      	ldr	r1, [r5, #0]
 8009b9a:	291d      	cmp	r1, #29
 8009b9c:	d82c      	bhi.n	8009bf8 <__sflush_r+0xb8>
 8009b9e:	4a2a      	ldr	r2, [pc, #168]	; (8009c48 <__sflush_r+0x108>)
 8009ba0:	40ca      	lsrs	r2, r1
 8009ba2:	07d6      	lsls	r6, r2, #31
 8009ba4:	d528      	bpl.n	8009bf8 <__sflush_r+0xb8>
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	6062      	str	r2, [r4, #4]
 8009baa:	04d9      	lsls	r1, r3, #19
 8009bac:	6922      	ldr	r2, [r4, #16]
 8009bae:	6022      	str	r2, [r4, #0]
 8009bb0:	d504      	bpl.n	8009bbc <__sflush_r+0x7c>
 8009bb2:	1c42      	adds	r2, r0, #1
 8009bb4:	d101      	bne.n	8009bba <__sflush_r+0x7a>
 8009bb6:	682b      	ldr	r3, [r5, #0]
 8009bb8:	b903      	cbnz	r3, 8009bbc <__sflush_r+0x7c>
 8009bba:	6560      	str	r0, [r4, #84]	; 0x54
 8009bbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009bbe:	602f      	str	r7, [r5, #0]
 8009bc0:	2900      	cmp	r1, #0
 8009bc2:	d0ca      	beq.n	8009b5a <__sflush_r+0x1a>
 8009bc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009bc8:	4299      	cmp	r1, r3
 8009bca:	d002      	beq.n	8009bd2 <__sflush_r+0x92>
 8009bcc:	4628      	mov	r0, r5
 8009bce:	f000 fd71 	bl	800a6b4 <_free_r>
 8009bd2:	2000      	movs	r0, #0
 8009bd4:	6360      	str	r0, [r4, #52]	; 0x34
 8009bd6:	e7c1      	b.n	8009b5c <__sflush_r+0x1c>
 8009bd8:	6a21      	ldr	r1, [r4, #32]
 8009bda:	2301      	movs	r3, #1
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b0      	blx	r6
 8009be0:	1c41      	adds	r1, r0, #1
 8009be2:	d1c7      	bne.n	8009b74 <__sflush_r+0x34>
 8009be4:	682b      	ldr	r3, [r5, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d0c4      	beq.n	8009b74 <__sflush_r+0x34>
 8009bea:	2b1d      	cmp	r3, #29
 8009bec:	d001      	beq.n	8009bf2 <__sflush_r+0xb2>
 8009bee:	2b16      	cmp	r3, #22
 8009bf0:	d101      	bne.n	8009bf6 <__sflush_r+0xb6>
 8009bf2:	602f      	str	r7, [r5, #0]
 8009bf4:	e7b1      	b.n	8009b5a <__sflush_r+0x1a>
 8009bf6:	89a3      	ldrh	r3, [r4, #12]
 8009bf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	e7ad      	b.n	8009b5c <__sflush_r+0x1c>
 8009c00:	690f      	ldr	r7, [r1, #16]
 8009c02:	2f00      	cmp	r7, #0
 8009c04:	d0a9      	beq.n	8009b5a <__sflush_r+0x1a>
 8009c06:	0793      	lsls	r3, r2, #30
 8009c08:	680e      	ldr	r6, [r1, #0]
 8009c0a:	bf08      	it	eq
 8009c0c:	694b      	ldreq	r3, [r1, #20]
 8009c0e:	600f      	str	r7, [r1, #0]
 8009c10:	bf18      	it	ne
 8009c12:	2300      	movne	r3, #0
 8009c14:	eba6 0807 	sub.w	r8, r6, r7
 8009c18:	608b      	str	r3, [r1, #8]
 8009c1a:	f1b8 0f00 	cmp.w	r8, #0
 8009c1e:	dd9c      	ble.n	8009b5a <__sflush_r+0x1a>
 8009c20:	6a21      	ldr	r1, [r4, #32]
 8009c22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c24:	4643      	mov	r3, r8
 8009c26:	463a      	mov	r2, r7
 8009c28:	4628      	mov	r0, r5
 8009c2a:	47b0      	blx	r6
 8009c2c:	2800      	cmp	r0, #0
 8009c2e:	dc06      	bgt.n	8009c3e <__sflush_r+0xfe>
 8009c30:	89a3      	ldrh	r3, [r4, #12]
 8009c32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c36:	81a3      	strh	r3, [r4, #12]
 8009c38:	f04f 30ff 	mov.w	r0, #4294967295
 8009c3c:	e78e      	b.n	8009b5c <__sflush_r+0x1c>
 8009c3e:	4407      	add	r7, r0
 8009c40:	eba8 0800 	sub.w	r8, r8, r0
 8009c44:	e7e9      	b.n	8009c1a <__sflush_r+0xda>
 8009c46:	bf00      	nop
 8009c48:	20400001 	.word	0x20400001

08009c4c <_fflush_r>:
 8009c4c:	b538      	push	{r3, r4, r5, lr}
 8009c4e:	690b      	ldr	r3, [r1, #16]
 8009c50:	4605      	mov	r5, r0
 8009c52:	460c      	mov	r4, r1
 8009c54:	b913      	cbnz	r3, 8009c5c <_fflush_r+0x10>
 8009c56:	2500      	movs	r5, #0
 8009c58:	4628      	mov	r0, r5
 8009c5a:	bd38      	pop	{r3, r4, r5, pc}
 8009c5c:	b118      	cbz	r0, 8009c66 <_fflush_r+0x1a>
 8009c5e:	6983      	ldr	r3, [r0, #24]
 8009c60:	b90b      	cbnz	r3, 8009c66 <_fflush_r+0x1a>
 8009c62:	f000 f887 	bl	8009d74 <__sinit>
 8009c66:	4b14      	ldr	r3, [pc, #80]	; (8009cb8 <_fflush_r+0x6c>)
 8009c68:	429c      	cmp	r4, r3
 8009c6a:	d11b      	bne.n	8009ca4 <_fflush_r+0x58>
 8009c6c:	686c      	ldr	r4, [r5, #4]
 8009c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d0ef      	beq.n	8009c56 <_fflush_r+0xa>
 8009c76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c78:	07d0      	lsls	r0, r2, #31
 8009c7a:	d404      	bmi.n	8009c86 <_fflush_r+0x3a>
 8009c7c:	0599      	lsls	r1, r3, #22
 8009c7e:	d402      	bmi.n	8009c86 <_fflush_r+0x3a>
 8009c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c82:	f000 f91a 	bl	8009eba <__retarget_lock_acquire_recursive>
 8009c86:	4628      	mov	r0, r5
 8009c88:	4621      	mov	r1, r4
 8009c8a:	f7ff ff59 	bl	8009b40 <__sflush_r>
 8009c8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c90:	07da      	lsls	r2, r3, #31
 8009c92:	4605      	mov	r5, r0
 8009c94:	d4e0      	bmi.n	8009c58 <_fflush_r+0xc>
 8009c96:	89a3      	ldrh	r3, [r4, #12]
 8009c98:	059b      	lsls	r3, r3, #22
 8009c9a:	d4dd      	bmi.n	8009c58 <_fflush_r+0xc>
 8009c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c9e:	f000 f90d 	bl	8009ebc <__retarget_lock_release_recursive>
 8009ca2:	e7d9      	b.n	8009c58 <_fflush_r+0xc>
 8009ca4:	4b05      	ldr	r3, [pc, #20]	; (8009cbc <_fflush_r+0x70>)
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	d101      	bne.n	8009cae <_fflush_r+0x62>
 8009caa:	68ac      	ldr	r4, [r5, #8]
 8009cac:	e7df      	b.n	8009c6e <_fflush_r+0x22>
 8009cae:	4b04      	ldr	r3, [pc, #16]	; (8009cc0 <_fflush_r+0x74>)
 8009cb0:	429c      	cmp	r4, r3
 8009cb2:	bf08      	it	eq
 8009cb4:	68ec      	ldreq	r4, [r5, #12]
 8009cb6:	e7da      	b.n	8009c6e <_fflush_r+0x22>
 8009cb8:	0800b384 	.word	0x0800b384
 8009cbc:	0800b3a4 	.word	0x0800b3a4
 8009cc0:	0800b364 	.word	0x0800b364

08009cc4 <std>:
 8009cc4:	2300      	movs	r3, #0
 8009cc6:	b510      	push	{r4, lr}
 8009cc8:	4604      	mov	r4, r0
 8009cca:	e9c0 3300 	strd	r3, r3, [r0]
 8009cce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cd2:	6083      	str	r3, [r0, #8]
 8009cd4:	8181      	strh	r1, [r0, #12]
 8009cd6:	6643      	str	r3, [r0, #100]	; 0x64
 8009cd8:	81c2      	strh	r2, [r0, #14]
 8009cda:	6183      	str	r3, [r0, #24]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	2208      	movs	r2, #8
 8009ce0:	305c      	adds	r0, #92	; 0x5c
 8009ce2:	f7fe fac1 	bl	8008268 <memset>
 8009ce6:	4b05      	ldr	r3, [pc, #20]	; (8009cfc <std+0x38>)
 8009ce8:	6263      	str	r3, [r4, #36]	; 0x24
 8009cea:	4b05      	ldr	r3, [pc, #20]	; (8009d00 <std+0x3c>)
 8009cec:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cee:	4b05      	ldr	r3, [pc, #20]	; (8009d04 <std+0x40>)
 8009cf0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009cf2:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <std+0x44>)
 8009cf4:	6224      	str	r4, [r4, #32]
 8009cf6:	6323      	str	r3, [r4, #48]	; 0x30
 8009cf8:	bd10      	pop	{r4, pc}
 8009cfa:	bf00      	nop
 8009cfc:	0800ad95 	.word	0x0800ad95
 8009d00:	0800adb7 	.word	0x0800adb7
 8009d04:	0800adef 	.word	0x0800adef
 8009d08:	0800ae13 	.word	0x0800ae13

08009d0c <_cleanup_r>:
 8009d0c:	4901      	ldr	r1, [pc, #4]	; (8009d14 <_cleanup_r+0x8>)
 8009d0e:	f000 b8af 	b.w	8009e70 <_fwalk_reent>
 8009d12:	bf00      	nop
 8009d14:	08009c4d 	.word	0x08009c4d

08009d18 <__sfmoreglue>:
 8009d18:	b570      	push	{r4, r5, r6, lr}
 8009d1a:	1e4a      	subs	r2, r1, #1
 8009d1c:	2568      	movs	r5, #104	; 0x68
 8009d1e:	4355      	muls	r5, r2
 8009d20:	460e      	mov	r6, r1
 8009d22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d26:	f000 fd15 	bl	800a754 <_malloc_r>
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	b140      	cbz	r0, 8009d40 <__sfmoreglue+0x28>
 8009d2e:	2100      	movs	r1, #0
 8009d30:	e9c0 1600 	strd	r1, r6, [r0]
 8009d34:	300c      	adds	r0, #12
 8009d36:	60a0      	str	r0, [r4, #8]
 8009d38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d3c:	f7fe fa94 	bl	8008268 <memset>
 8009d40:	4620      	mov	r0, r4
 8009d42:	bd70      	pop	{r4, r5, r6, pc}

08009d44 <__sfp_lock_acquire>:
 8009d44:	4801      	ldr	r0, [pc, #4]	; (8009d4c <__sfp_lock_acquire+0x8>)
 8009d46:	f000 b8b8 	b.w	8009eba <__retarget_lock_acquire_recursive>
 8009d4a:	bf00      	nop
 8009d4c:	2000091c 	.word	0x2000091c

08009d50 <__sfp_lock_release>:
 8009d50:	4801      	ldr	r0, [pc, #4]	; (8009d58 <__sfp_lock_release+0x8>)
 8009d52:	f000 b8b3 	b.w	8009ebc <__retarget_lock_release_recursive>
 8009d56:	bf00      	nop
 8009d58:	2000091c 	.word	0x2000091c

08009d5c <__sinit_lock_acquire>:
 8009d5c:	4801      	ldr	r0, [pc, #4]	; (8009d64 <__sinit_lock_acquire+0x8>)
 8009d5e:	f000 b8ac 	b.w	8009eba <__retarget_lock_acquire_recursive>
 8009d62:	bf00      	nop
 8009d64:	20000917 	.word	0x20000917

08009d68 <__sinit_lock_release>:
 8009d68:	4801      	ldr	r0, [pc, #4]	; (8009d70 <__sinit_lock_release+0x8>)
 8009d6a:	f000 b8a7 	b.w	8009ebc <__retarget_lock_release_recursive>
 8009d6e:	bf00      	nop
 8009d70:	20000917 	.word	0x20000917

08009d74 <__sinit>:
 8009d74:	b510      	push	{r4, lr}
 8009d76:	4604      	mov	r4, r0
 8009d78:	f7ff fff0 	bl	8009d5c <__sinit_lock_acquire>
 8009d7c:	69a3      	ldr	r3, [r4, #24]
 8009d7e:	b11b      	cbz	r3, 8009d88 <__sinit+0x14>
 8009d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d84:	f7ff bff0 	b.w	8009d68 <__sinit_lock_release>
 8009d88:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d8c:	6523      	str	r3, [r4, #80]	; 0x50
 8009d8e:	4b13      	ldr	r3, [pc, #76]	; (8009ddc <__sinit+0x68>)
 8009d90:	4a13      	ldr	r2, [pc, #76]	; (8009de0 <__sinit+0x6c>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d96:	42a3      	cmp	r3, r4
 8009d98:	bf04      	itt	eq
 8009d9a:	2301      	moveq	r3, #1
 8009d9c:	61a3      	streq	r3, [r4, #24]
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 f820 	bl	8009de4 <__sfp>
 8009da4:	6060      	str	r0, [r4, #4]
 8009da6:	4620      	mov	r0, r4
 8009da8:	f000 f81c 	bl	8009de4 <__sfp>
 8009dac:	60a0      	str	r0, [r4, #8]
 8009dae:	4620      	mov	r0, r4
 8009db0:	f000 f818 	bl	8009de4 <__sfp>
 8009db4:	2200      	movs	r2, #0
 8009db6:	60e0      	str	r0, [r4, #12]
 8009db8:	2104      	movs	r1, #4
 8009dba:	6860      	ldr	r0, [r4, #4]
 8009dbc:	f7ff ff82 	bl	8009cc4 <std>
 8009dc0:	68a0      	ldr	r0, [r4, #8]
 8009dc2:	2201      	movs	r2, #1
 8009dc4:	2109      	movs	r1, #9
 8009dc6:	f7ff ff7d 	bl	8009cc4 <std>
 8009dca:	68e0      	ldr	r0, [r4, #12]
 8009dcc:	2202      	movs	r2, #2
 8009dce:	2112      	movs	r1, #18
 8009dd0:	f7ff ff78 	bl	8009cc4 <std>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	61a3      	str	r3, [r4, #24]
 8009dd8:	e7d2      	b.n	8009d80 <__sinit+0xc>
 8009dda:	bf00      	nop
 8009ddc:	0800b298 	.word	0x0800b298
 8009de0:	08009d0d 	.word	0x08009d0d

08009de4 <__sfp>:
 8009de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009de6:	4607      	mov	r7, r0
 8009de8:	f7ff ffac 	bl	8009d44 <__sfp_lock_acquire>
 8009dec:	4b1e      	ldr	r3, [pc, #120]	; (8009e68 <__sfp+0x84>)
 8009dee:	681e      	ldr	r6, [r3, #0]
 8009df0:	69b3      	ldr	r3, [r6, #24]
 8009df2:	b913      	cbnz	r3, 8009dfa <__sfp+0x16>
 8009df4:	4630      	mov	r0, r6
 8009df6:	f7ff ffbd 	bl	8009d74 <__sinit>
 8009dfa:	3648      	adds	r6, #72	; 0x48
 8009dfc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	d503      	bpl.n	8009e0c <__sfp+0x28>
 8009e04:	6833      	ldr	r3, [r6, #0]
 8009e06:	b30b      	cbz	r3, 8009e4c <__sfp+0x68>
 8009e08:	6836      	ldr	r6, [r6, #0]
 8009e0a:	e7f7      	b.n	8009dfc <__sfp+0x18>
 8009e0c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e10:	b9d5      	cbnz	r5, 8009e48 <__sfp+0x64>
 8009e12:	4b16      	ldr	r3, [pc, #88]	; (8009e6c <__sfp+0x88>)
 8009e14:	60e3      	str	r3, [r4, #12]
 8009e16:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e1a:	6665      	str	r5, [r4, #100]	; 0x64
 8009e1c:	f000 f84c 	bl	8009eb8 <__retarget_lock_init_recursive>
 8009e20:	f7ff ff96 	bl	8009d50 <__sfp_lock_release>
 8009e24:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e28:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e2c:	6025      	str	r5, [r4, #0]
 8009e2e:	61a5      	str	r5, [r4, #24]
 8009e30:	2208      	movs	r2, #8
 8009e32:	4629      	mov	r1, r5
 8009e34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e38:	f7fe fa16 	bl	8008268 <memset>
 8009e3c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009e40:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009e44:	4620      	mov	r0, r4
 8009e46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e48:	3468      	adds	r4, #104	; 0x68
 8009e4a:	e7d9      	b.n	8009e00 <__sfp+0x1c>
 8009e4c:	2104      	movs	r1, #4
 8009e4e:	4638      	mov	r0, r7
 8009e50:	f7ff ff62 	bl	8009d18 <__sfmoreglue>
 8009e54:	4604      	mov	r4, r0
 8009e56:	6030      	str	r0, [r6, #0]
 8009e58:	2800      	cmp	r0, #0
 8009e5a:	d1d5      	bne.n	8009e08 <__sfp+0x24>
 8009e5c:	f7ff ff78 	bl	8009d50 <__sfp_lock_release>
 8009e60:	230c      	movs	r3, #12
 8009e62:	603b      	str	r3, [r7, #0]
 8009e64:	e7ee      	b.n	8009e44 <__sfp+0x60>
 8009e66:	bf00      	nop
 8009e68:	0800b298 	.word	0x0800b298
 8009e6c:	ffff0001 	.word	0xffff0001

08009e70 <_fwalk_reent>:
 8009e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e74:	4606      	mov	r6, r0
 8009e76:	4688      	mov	r8, r1
 8009e78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e7c:	2700      	movs	r7, #0
 8009e7e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e82:	f1b9 0901 	subs.w	r9, r9, #1
 8009e86:	d505      	bpl.n	8009e94 <_fwalk_reent+0x24>
 8009e88:	6824      	ldr	r4, [r4, #0]
 8009e8a:	2c00      	cmp	r4, #0
 8009e8c:	d1f7      	bne.n	8009e7e <_fwalk_reent+0xe>
 8009e8e:	4638      	mov	r0, r7
 8009e90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e94:	89ab      	ldrh	r3, [r5, #12]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d907      	bls.n	8009eaa <_fwalk_reent+0x3a>
 8009e9a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e9e:	3301      	adds	r3, #1
 8009ea0:	d003      	beq.n	8009eaa <_fwalk_reent+0x3a>
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	47c0      	blx	r8
 8009ea8:	4307      	orrs	r7, r0
 8009eaa:	3568      	adds	r5, #104	; 0x68
 8009eac:	e7e9      	b.n	8009e82 <_fwalk_reent+0x12>
	...

08009eb0 <_localeconv_r>:
 8009eb0:	4800      	ldr	r0, [pc, #0]	; (8009eb4 <_localeconv_r+0x4>)
 8009eb2:	4770      	bx	lr
 8009eb4:	20000350 	.word	0x20000350

08009eb8 <__retarget_lock_init_recursive>:
 8009eb8:	4770      	bx	lr

08009eba <__retarget_lock_acquire_recursive>:
 8009eba:	4770      	bx	lr

08009ebc <__retarget_lock_release_recursive>:
 8009ebc:	4770      	bx	lr

08009ebe <__swhatbuf_r>:
 8009ebe:	b570      	push	{r4, r5, r6, lr}
 8009ec0:	460e      	mov	r6, r1
 8009ec2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec6:	2900      	cmp	r1, #0
 8009ec8:	b096      	sub	sp, #88	; 0x58
 8009eca:	4614      	mov	r4, r2
 8009ecc:	461d      	mov	r5, r3
 8009ece:	da07      	bge.n	8009ee0 <__swhatbuf_r+0x22>
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	602b      	str	r3, [r5, #0]
 8009ed4:	89b3      	ldrh	r3, [r6, #12]
 8009ed6:	061a      	lsls	r2, r3, #24
 8009ed8:	d410      	bmi.n	8009efc <__swhatbuf_r+0x3e>
 8009eda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ede:	e00e      	b.n	8009efe <__swhatbuf_r+0x40>
 8009ee0:	466a      	mov	r2, sp
 8009ee2:	f000 ffed 	bl	800aec0 <_fstat_r>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	dbf2      	blt.n	8009ed0 <__swhatbuf_r+0x12>
 8009eea:	9a01      	ldr	r2, [sp, #4]
 8009eec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009ef0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009ef4:	425a      	negs	r2, r3
 8009ef6:	415a      	adcs	r2, r3
 8009ef8:	602a      	str	r2, [r5, #0]
 8009efa:	e7ee      	b.n	8009eda <__swhatbuf_r+0x1c>
 8009efc:	2340      	movs	r3, #64	; 0x40
 8009efe:	2000      	movs	r0, #0
 8009f00:	6023      	str	r3, [r4, #0]
 8009f02:	b016      	add	sp, #88	; 0x58
 8009f04:	bd70      	pop	{r4, r5, r6, pc}
	...

08009f08 <__smakebuf_r>:
 8009f08:	898b      	ldrh	r3, [r1, #12]
 8009f0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009f0c:	079d      	lsls	r5, r3, #30
 8009f0e:	4606      	mov	r6, r0
 8009f10:	460c      	mov	r4, r1
 8009f12:	d507      	bpl.n	8009f24 <__smakebuf_r+0x1c>
 8009f14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009f18:	6023      	str	r3, [r4, #0]
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	2301      	movs	r3, #1
 8009f1e:	6163      	str	r3, [r4, #20]
 8009f20:	b002      	add	sp, #8
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	ab01      	add	r3, sp, #4
 8009f26:	466a      	mov	r2, sp
 8009f28:	f7ff ffc9 	bl	8009ebe <__swhatbuf_r>
 8009f2c:	9900      	ldr	r1, [sp, #0]
 8009f2e:	4605      	mov	r5, r0
 8009f30:	4630      	mov	r0, r6
 8009f32:	f000 fc0f 	bl	800a754 <_malloc_r>
 8009f36:	b948      	cbnz	r0, 8009f4c <__smakebuf_r+0x44>
 8009f38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f3c:	059a      	lsls	r2, r3, #22
 8009f3e:	d4ef      	bmi.n	8009f20 <__smakebuf_r+0x18>
 8009f40:	f023 0303 	bic.w	r3, r3, #3
 8009f44:	f043 0302 	orr.w	r3, r3, #2
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	e7e3      	b.n	8009f14 <__smakebuf_r+0xc>
 8009f4c:	4b0d      	ldr	r3, [pc, #52]	; (8009f84 <__smakebuf_r+0x7c>)
 8009f4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009f50:	89a3      	ldrh	r3, [r4, #12]
 8009f52:	6020      	str	r0, [r4, #0]
 8009f54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	9b00      	ldr	r3, [sp, #0]
 8009f5c:	6163      	str	r3, [r4, #20]
 8009f5e:	9b01      	ldr	r3, [sp, #4]
 8009f60:	6120      	str	r0, [r4, #16]
 8009f62:	b15b      	cbz	r3, 8009f7c <__smakebuf_r+0x74>
 8009f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f68:	4630      	mov	r0, r6
 8009f6a:	f000 ffbb 	bl	800aee4 <_isatty_r>
 8009f6e:	b128      	cbz	r0, 8009f7c <__smakebuf_r+0x74>
 8009f70:	89a3      	ldrh	r3, [r4, #12]
 8009f72:	f023 0303 	bic.w	r3, r3, #3
 8009f76:	f043 0301 	orr.w	r3, r3, #1
 8009f7a:	81a3      	strh	r3, [r4, #12]
 8009f7c:	89a0      	ldrh	r0, [r4, #12]
 8009f7e:	4305      	orrs	r5, r0
 8009f80:	81a5      	strh	r5, [r4, #12]
 8009f82:	e7cd      	b.n	8009f20 <__smakebuf_r+0x18>
 8009f84:	08009d0d 	.word	0x08009d0d

08009f88 <malloc>:
 8009f88:	4b02      	ldr	r3, [pc, #8]	; (8009f94 <malloc+0xc>)
 8009f8a:	4601      	mov	r1, r0
 8009f8c:	6818      	ldr	r0, [r3, #0]
 8009f8e:	f000 bbe1 	b.w	800a754 <_malloc_r>
 8009f92:	bf00      	nop
 8009f94:	200001fc 	.word	0x200001fc

08009f98 <_Balloc>:
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f9c:	4604      	mov	r4, r0
 8009f9e:	460d      	mov	r5, r1
 8009fa0:	b976      	cbnz	r6, 8009fc0 <_Balloc+0x28>
 8009fa2:	2010      	movs	r0, #16
 8009fa4:	f7ff fff0 	bl	8009f88 <malloc>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6260      	str	r0, [r4, #36]	; 0x24
 8009fac:	b920      	cbnz	r0, 8009fb8 <_Balloc+0x20>
 8009fae:	4b18      	ldr	r3, [pc, #96]	; (800a010 <_Balloc+0x78>)
 8009fb0:	4818      	ldr	r0, [pc, #96]	; (800a014 <_Balloc+0x7c>)
 8009fb2:	2166      	movs	r1, #102	; 0x66
 8009fb4:	f000 ff44 	bl	800ae40 <__assert_func>
 8009fb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fbc:	6006      	str	r6, [r0, #0]
 8009fbe:	60c6      	str	r6, [r0, #12]
 8009fc0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009fc2:	68f3      	ldr	r3, [r6, #12]
 8009fc4:	b183      	cbz	r3, 8009fe8 <_Balloc+0x50>
 8009fc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009fc8:	68db      	ldr	r3, [r3, #12]
 8009fca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009fce:	b9b8      	cbnz	r0, 800a000 <_Balloc+0x68>
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	fa01 f605 	lsl.w	r6, r1, r5
 8009fd6:	1d72      	adds	r2, r6, #5
 8009fd8:	0092      	lsls	r2, r2, #2
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f000 fb5a 	bl	800a694 <_calloc_r>
 8009fe0:	b160      	cbz	r0, 8009ffc <_Balloc+0x64>
 8009fe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009fe6:	e00e      	b.n	800a006 <_Balloc+0x6e>
 8009fe8:	2221      	movs	r2, #33	; 0x21
 8009fea:	2104      	movs	r1, #4
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 fb51 	bl	800a694 <_calloc_r>
 8009ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ff4:	60f0      	str	r0, [r6, #12]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d1e4      	bne.n	8009fc6 <_Balloc+0x2e>
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	bd70      	pop	{r4, r5, r6, pc}
 800a000:	6802      	ldr	r2, [r0, #0]
 800a002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a006:	2300      	movs	r3, #0
 800a008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a00c:	e7f7      	b.n	8009ffe <_Balloc+0x66>
 800a00e:	bf00      	nop
 800a010:	0800b2dd 	.word	0x0800b2dd
 800a014:	0800b3c4 	.word	0x0800b3c4

0800a018 <_Bfree>:
 800a018:	b570      	push	{r4, r5, r6, lr}
 800a01a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a01c:	4605      	mov	r5, r0
 800a01e:	460c      	mov	r4, r1
 800a020:	b976      	cbnz	r6, 800a040 <_Bfree+0x28>
 800a022:	2010      	movs	r0, #16
 800a024:	f7ff ffb0 	bl	8009f88 <malloc>
 800a028:	4602      	mov	r2, r0
 800a02a:	6268      	str	r0, [r5, #36]	; 0x24
 800a02c:	b920      	cbnz	r0, 800a038 <_Bfree+0x20>
 800a02e:	4b09      	ldr	r3, [pc, #36]	; (800a054 <_Bfree+0x3c>)
 800a030:	4809      	ldr	r0, [pc, #36]	; (800a058 <_Bfree+0x40>)
 800a032:	218a      	movs	r1, #138	; 0x8a
 800a034:	f000 ff04 	bl	800ae40 <__assert_func>
 800a038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a03c:	6006      	str	r6, [r0, #0]
 800a03e:	60c6      	str	r6, [r0, #12]
 800a040:	b13c      	cbz	r4, 800a052 <_Bfree+0x3a>
 800a042:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a044:	6862      	ldr	r2, [r4, #4]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a04c:	6021      	str	r1, [r4, #0]
 800a04e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a052:	bd70      	pop	{r4, r5, r6, pc}
 800a054:	0800b2dd 	.word	0x0800b2dd
 800a058:	0800b3c4 	.word	0x0800b3c4

0800a05c <__multadd>:
 800a05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a060:	690e      	ldr	r6, [r1, #16]
 800a062:	4607      	mov	r7, r0
 800a064:	4698      	mov	r8, r3
 800a066:	460c      	mov	r4, r1
 800a068:	f101 0014 	add.w	r0, r1, #20
 800a06c:	2300      	movs	r3, #0
 800a06e:	6805      	ldr	r5, [r0, #0]
 800a070:	b2a9      	uxth	r1, r5
 800a072:	fb02 8101 	mla	r1, r2, r1, r8
 800a076:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a07a:	0c2d      	lsrs	r5, r5, #16
 800a07c:	fb02 c505 	mla	r5, r2, r5, ip
 800a080:	b289      	uxth	r1, r1
 800a082:	3301      	adds	r3, #1
 800a084:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a088:	429e      	cmp	r6, r3
 800a08a:	f840 1b04 	str.w	r1, [r0], #4
 800a08e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a092:	dcec      	bgt.n	800a06e <__multadd+0x12>
 800a094:	f1b8 0f00 	cmp.w	r8, #0
 800a098:	d022      	beq.n	800a0e0 <__multadd+0x84>
 800a09a:	68a3      	ldr	r3, [r4, #8]
 800a09c:	42b3      	cmp	r3, r6
 800a09e:	dc19      	bgt.n	800a0d4 <__multadd+0x78>
 800a0a0:	6861      	ldr	r1, [r4, #4]
 800a0a2:	4638      	mov	r0, r7
 800a0a4:	3101      	adds	r1, #1
 800a0a6:	f7ff ff77 	bl	8009f98 <_Balloc>
 800a0aa:	4605      	mov	r5, r0
 800a0ac:	b928      	cbnz	r0, 800a0ba <__multadd+0x5e>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	4b0d      	ldr	r3, [pc, #52]	; (800a0e8 <__multadd+0x8c>)
 800a0b2:	480e      	ldr	r0, [pc, #56]	; (800a0ec <__multadd+0x90>)
 800a0b4:	21b5      	movs	r1, #181	; 0xb5
 800a0b6:	f000 fec3 	bl	800ae40 <__assert_func>
 800a0ba:	6922      	ldr	r2, [r4, #16]
 800a0bc:	3202      	adds	r2, #2
 800a0be:	f104 010c 	add.w	r1, r4, #12
 800a0c2:	0092      	lsls	r2, r2, #2
 800a0c4:	300c      	adds	r0, #12
 800a0c6:	f7fe f8c1 	bl	800824c <memcpy>
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	4638      	mov	r0, r7
 800a0ce:	f7ff ffa3 	bl	800a018 <_Bfree>
 800a0d2:	462c      	mov	r4, r5
 800a0d4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a0d8:	3601      	adds	r6, #1
 800a0da:	f8c3 8014 	str.w	r8, [r3, #20]
 800a0de:	6126      	str	r6, [r4, #16]
 800a0e0:	4620      	mov	r0, r4
 800a0e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0e6:	bf00      	nop
 800a0e8:	0800b353 	.word	0x0800b353
 800a0ec:	0800b3c4 	.word	0x0800b3c4

0800a0f0 <__hi0bits>:
 800a0f0:	0c03      	lsrs	r3, r0, #16
 800a0f2:	041b      	lsls	r3, r3, #16
 800a0f4:	b9d3      	cbnz	r3, 800a12c <__hi0bits+0x3c>
 800a0f6:	0400      	lsls	r0, r0, #16
 800a0f8:	2310      	movs	r3, #16
 800a0fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a0fe:	bf04      	itt	eq
 800a100:	0200      	lsleq	r0, r0, #8
 800a102:	3308      	addeq	r3, #8
 800a104:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a108:	bf04      	itt	eq
 800a10a:	0100      	lsleq	r0, r0, #4
 800a10c:	3304      	addeq	r3, #4
 800a10e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a112:	bf04      	itt	eq
 800a114:	0080      	lsleq	r0, r0, #2
 800a116:	3302      	addeq	r3, #2
 800a118:	2800      	cmp	r0, #0
 800a11a:	db05      	blt.n	800a128 <__hi0bits+0x38>
 800a11c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a120:	f103 0301 	add.w	r3, r3, #1
 800a124:	bf08      	it	eq
 800a126:	2320      	moveq	r3, #32
 800a128:	4618      	mov	r0, r3
 800a12a:	4770      	bx	lr
 800a12c:	2300      	movs	r3, #0
 800a12e:	e7e4      	b.n	800a0fa <__hi0bits+0xa>

0800a130 <__lo0bits>:
 800a130:	6803      	ldr	r3, [r0, #0]
 800a132:	f013 0207 	ands.w	r2, r3, #7
 800a136:	4601      	mov	r1, r0
 800a138:	d00b      	beq.n	800a152 <__lo0bits+0x22>
 800a13a:	07da      	lsls	r2, r3, #31
 800a13c:	d424      	bmi.n	800a188 <__lo0bits+0x58>
 800a13e:	0798      	lsls	r0, r3, #30
 800a140:	bf49      	itett	mi
 800a142:	085b      	lsrmi	r3, r3, #1
 800a144:	089b      	lsrpl	r3, r3, #2
 800a146:	2001      	movmi	r0, #1
 800a148:	600b      	strmi	r3, [r1, #0]
 800a14a:	bf5c      	itt	pl
 800a14c:	600b      	strpl	r3, [r1, #0]
 800a14e:	2002      	movpl	r0, #2
 800a150:	4770      	bx	lr
 800a152:	b298      	uxth	r0, r3
 800a154:	b9b0      	cbnz	r0, 800a184 <__lo0bits+0x54>
 800a156:	0c1b      	lsrs	r3, r3, #16
 800a158:	2010      	movs	r0, #16
 800a15a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a15e:	bf04      	itt	eq
 800a160:	0a1b      	lsreq	r3, r3, #8
 800a162:	3008      	addeq	r0, #8
 800a164:	071a      	lsls	r2, r3, #28
 800a166:	bf04      	itt	eq
 800a168:	091b      	lsreq	r3, r3, #4
 800a16a:	3004      	addeq	r0, #4
 800a16c:	079a      	lsls	r2, r3, #30
 800a16e:	bf04      	itt	eq
 800a170:	089b      	lsreq	r3, r3, #2
 800a172:	3002      	addeq	r0, #2
 800a174:	07da      	lsls	r2, r3, #31
 800a176:	d403      	bmi.n	800a180 <__lo0bits+0x50>
 800a178:	085b      	lsrs	r3, r3, #1
 800a17a:	f100 0001 	add.w	r0, r0, #1
 800a17e:	d005      	beq.n	800a18c <__lo0bits+0x5c>
 800a180:	600b      	str	r3, [r1, #0]
 800a182:	4770      	bx	lr
 800a184:	4610      	mov	r0, r2
 800a186:	e7e8      	b.n	800a15a <__lo0bits+0x2a>
 800a188:	2000      	movs	r0, #0
 800a18a:	4770      	bx	lr
 800a18c:	2020      	movs	r0, #32
 800a18e:	4770      	bx	lr

0800a190 <__i2b>:
 800a190:	b510      	push	{r4, lr}
 800a192:	460c      	mov	r4, r1
 800a194:	2101      	movs	r1, #1
 800a196:	f7ff feff 	bl	8009f98 <_Balloc>
 800a19a:	4602      	mov	r2, r0
 800a19c:	b928      	cbnz	r0, 800a1aa <__i2b+0x1a>
 800a19e:	4b05      	ldr	r3, [pc, #20]	; (800a1b4 <__i2b+0x24>)
 800a1a0:	4805      	ldr	r0, [pc, #20]	; (800a1b8 <__i2b+0x28>)
 800a1a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1a6:	f000 fe4b 	bl	800ae40 <__assert_func>
 800a1aa:	2301      	movs	r3, #1
 800a1ac:	6144      	str	r4, [r0, #20]
 800a1ae:	6103      	str	r3, [r0, #16]
 800a1b0:	bd10      	pop	{r4, pc}
 800a1b2:	bf00      	nop
 800a1b4:	0800b353 	.word	0x0800b353
 800a1b8:	0800b3c4 	.word	0x0800b3c4

0800a1bc <__multiply>:
 800a1bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1c0:	4614      	mov	r4, r2
 800a1c2:	690a      	ldr	r2, [r1, #16]
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	bfb8      	it	lt
 800a1ca:	460b      	movlt	r3, r1
 800a1cc:	460d      	mov	r5, r1
 800a1ce:	bfbc      	itt	lt
 800a1d0:	4625      	movlt	r5, r4
 800a1d2:	461c      	movlt	r4, r3
 800a1d4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a1d8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a1dc:	68ab      	ldr	r3, [r5, #8]
 800a1de:	6869      	ldr	r1, [r5, #4]
 800a1e0:	eb0a 0709 	add.w	r7, sl, r9
 800a1e4:	42bb      	cmp	r3, r7
 800a1e6:	b085      	sub	sp, #20
 800a1e8:	bfb8      	it	lt
 800a1ea:	3101      	addlt	r1, #1
 800a1ec:	f7ff fed4 	bl	8009f98 <_Balloc>
 800a1f0:	b930      	cbnz	r0, 800a200 <__multiply+0x44>
 800a1f2:	4602      	mov	r2, r0
 800a1f4:	4b42      	ldr	r3, [pc, #264]	; (800a300 <__multiply+0x144>)
 800a1f6:	4843      	ldr	r0, [pc, #268]	; (800a304 <__multiply+0x148>)
 800a1f8:	f240 115d 	movw	r1, #349	; 0x15d
 800a1fc:	f000 fe20 	bl	800ae40 <__assert_func>
 800a200:	f100 0614 	add.w	r6, r0, #20
 800a204:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a208:	4633      	mov	r3, r6
 800a20a:	2200      	movs	r2, #0
 800a20c:	4543      	cmp	r3, r8
 800a20e:	d31e      	bcc.n	800a24e <__multiply+0x92>
 800a210:	f105 0c14 	add.w	ip, r5, #20
 800a214:	f104 0314 	add.w	r3, r4, #20
 800a218:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a21c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a220:	9202      	str	r2, [sp, #8]
 800a222:	ebac 0205 	sub.w	r2, ip, r5
 800a226:	3a15      	subs	r2, #21
 800a228:	f022 0203 	bic.w	r2, r2, #3
 800a22c:	3204      	adds	r2, #4
 800a22e:	f105 0115 	add.w	r1, r5, #21
 800a232:	458c      	cmp	ip, r1
 800a234:	bf38      	it	cc
 800a236:	2204      	movcc	r2, #4
 800a238:	9201      	str	r2, [sp, #4]
 800a23a:	9a02      	ldr	r2, [sp, #8]
 800a23c:	9303      	str	r3, [sp, #12]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d808      	bhi.n	800a254 <__multiply+0x98>
 800a242:	2f00      	cmp	r7, #0
 800a244:	dc55      	bgt.n	800a2f2 <__multiply+0x136>
 800a246:	6107      	str	r7, [r0, #16]
 800a248:	b005      	add	sp, #20
 800a24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a24e:	f843 2b04 	str.w	r2, [r3], #4
 800a252:	e7db      	b.n	800a20c <__multiply+0x50>
 800a254:	f8b3 a000 	ldrh.w	sl, [r3]
 800a258:	f1ba 0f00 	cmp.w	sl, #0
 800a25c:	d020      	beq.n	800a2a0 <__multiply+0xe4>
 800a25e:	f105 0e14 	add.w	lr, r5, #20
 800a262:	46b1      	mov	r9, r6
 800a264:	2200      	movs	r2, #0
 800a266:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a26a:	f8d9 b000 	ldr.w	fp, [r9]
 800a26e:	b2a1      	uxth	r1, r4
 800a270:	fa1f fb8b 	uxth.w	fp, fp
 800a274:	fb0a b101 	mla	r1, sl, r1, fp
 800a278:	4411      	add	r1, r2
 800a27a:	f8d9 2000 	ldr.w	r2, [r9]
 800a27e:	0c24      	lsrs	r4, r4, #16
 800a280:	0c12      	lsrs	r2, r2, #16
 800a282:	fb0a 2404 	mla	r4, sl, r4, r2
 800a286:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a28a:	b289      	uxth	r1, r1
 800a28c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a290:	45f4      	cmp	ip, lr
 800a292:	f849 1b04 	str.w	r1, [r9], #4
 800a296:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a29a:	d8e4      	bhi.n	800a266 <__multiply+0xaa>
 800a29c:	9901      	ldr	r1, [sp, #4]
 800a29e:	5072      	str	r2, [r6, r1]
 800a2a0:	9a03      	ldr	r2, [sp, #12]
 800a2a2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2a6:	3304      	adds	r3, #4
 800a2a8:	f1b9 0f00 	cmp.w	r9, #0
 800a2ac:	d01f      	beq.n	800a2ee <__multiply+0x132>
 800a2ae:	6834      	ldr	r4, [r6, #0]
 800a2b0:	f105 0114 	add.w	r1, r5, #20
 800a2b4:	46b6      	mov	lr, r6
 800a2b6:	f04f 0a00 	mov.w	sl, #0
 800a2ba:	880a      	ldrh	r2, [r1, #0]
 800a2bc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a2c0:	fb09 b202 	mla	r2, r9, r2, fp
 800a2c4:	4492      	add	sl, r2
 800a2c6:	b2a4      	uxth	r4, r4
 800a2c8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a2cc:	f84e 4b04 	str.w	r4, [lr], #4
 800a2d0:	f851 4b04 	ldr.w	r4, [r1], #4
 800a2d4:	f8be 2000 	ldrh.w	r2, [lr]
 800a2d8:	0c24      	lsrs	r4, r4, #16
 800a2da:	fb09 2404 	mla	r4, r9, r4, r2
 800a2de:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a2e2:	458c      	cmp	ip, r1
 800a2e4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a2e8:	d8e7      	bhi.n	800a2ba <__multiply+0xfe>
 800a2ea:	9a01      	ldr	r2, [sp, #4]
 800a2ec:	50b4      	str	r4, [r6, r2]
 800a2ee:	3604      	adds	r6, #4
 800a2f0:	e7a3      	b.n	800a23a <__multiply+0x7e>
 800a2f2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1a5      	bne.n	800a246 <__multiply+0x8a>
 800a2fa:	3f01      	subs	r7, #1
 800a2fc:	e7a1      	b.n	800a242 <__multiply+0x86>
 800a2fe:	bf00      	nop
 800a300:	0800b353 	.word	0x0800b353
 800a304:	0800b3c4 	.word	0x0800b3c4

0800a308 <__pow5mult>:
 800a308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a30c:	4615      	mov	r5, r2
 800a30e:	f012 0203 	ands.w	r2, r2, #3
 800a312:	4606      	mov	r6, r0
 800a314:	460f      	mov	r7, r1
 800a316:	d007      	beq.n	800a328 <__pow5mult+0x20>
 800a318:	4c25      	ldr	r4, [pc, #148]	; (800a3b0 <__pow5mult+0xa8>)
 800a31a:	3a01      	subs	r2, #1
 800a31c:	2300      	movs	r3, #0
 800a31e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a322:	f7ff fe9b 	bl	800a05c <__multadd>
 800a326:	4607      	mov	r7, r0
 800a328:	10ad      	asrs	r5, r5, #2
 800a32a:	d03d      	beq.n	800a3a8 <__pow5mult+0xa0>
 800a32c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a32e:	b97c      	cbnz	r4, 800a350 <__pow5mult+0x48>
 800a330:	2010      	movs	r0, #16
 800a332:	f7ff fe29 	bl	8009f88 <malloc>
 800a336:	4602      	mov	r2, r0
 800a338:	6270      	str	r0, [r6, #36]	; 0x24
 800a33a:	b928      	cbnz	r0, 800a348 <__pow5mult+0x40>
 800a33c:	4b1d      	ldr	r3, [pc, #116]	; (800a3b4 <__pow5mult+0xac>)
 800a33e:	481e      	ldr	r0, [pc, #120]	; (800a3b8 <__pow5mult+0xb0>)
 800a340:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a344:	f000 fd7c 	bl	800ae40 <__assert_func>
 800a348:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a34c:	6004      	str	r4, [r0, #0]
 800a34e:	60c4      	str	r4, [r0, #12]
 800a350:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a354:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a358:	b94c      	cbnz	r4, 800a36e <__pow5mult+0x66>
 800a35a:	f240 2171 	movw	r1, #625	; 0x271
 800a35e:	4630      	mov	r0, r6
 800a360:	f7ff ff16 	bl	800a190 <__i2b>
 800a364:	2300      	movs	r3, #0
 800a366:	f8c8 0008 	str.w	r0, [r8, #8]
 800a36a:	4604      	mov	r4, r0
 800a36c:	6003      	str	r3, [r0, #0]
 800a36e:	f04f 0900 	mov.w	r9, #0
 800a372:	07eb      	lsls	r3, r5, #31
 800a374:	d50a      	bpl.n	800a38c <__pow5mult+0x84>
 800a376:	4639      	mov	r1, r7
 800a378:	4622      	mov	r2, r4
 800a37a:	4630      	mov	r0, r6
 800a37c:	f7ff ff1e 	bl	800a1bc <__multiply>
 800a380:	4639      	mov	r1, r7
 800a382:	4680      	mov	r8, r0
 800a384:	4630      	mov	r0, r6
 800a386:	f7ff fe47 	bl	800a018 <_Bfree>
 800a38a:	4647      	mov	r7, r8
 800a38c:	106d      	asrs	r5, r5, #1
 800a38e:	d00b      	beq.n	800a3a8 <__pow5mult+0xa0>
 800a390:	6820      	ldr	r0, [r4, #0]
 800a392:	b938      	cbnz	r0, 800a3a4 <__pow5mult+0x9c>
 800a394:	4622      	mov	r2, r4
 800a396:	4621      	mov	r1, r4
 800a398:	4630      	mov	r0, r6
 800a39a:	f7ff ff0f 	bl	800a1bc <__multiply>
 800a39e:	6020      	str	r0, [r4, #0]
 800a3a0:	f8c0 9000 	str.w	r9, [r0]
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	e7e4      	b.n	800a372 <__pow5mult+0x6a>
 800a3a8:	4638      	mov	r0, r7
 800a3aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ae:	bf00      	nop
 800a3b0:	0800b518 	.word	0x0800b518
 800a3b4:	0800b2dd 	.word	0x0800b2dd
 800a3b8:	0800b3c4 	.word	0x0800b3c4

0800a3bc <__lshift>:
 800a3bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	6849      	ldr	r1, [r1, #4]
 800a3c4:	6923      	ldr	r3, [r4, #16]
 800a3c6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a3ca:	68a3      	ldr	r3, [r4, #8]
 800a3cc:	4607      	mov	r7, r0
 800a3ce:	4691      	mov	r9, r2
 800a3d0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3d4:	f108 0601 	add.w	r6, r8, #1
 800a3d8:	42b3      	cmp	r3, r6
 800a3da:	db0b      	blt.n	800a3f4 <__lshift+0x38>
 800a3dc:	4638      	mov	r0, r7
 800a3de:	f7ff fddb 	bl	8009f98 <_Balloc>
 800a3e2:	4605      	mov	r5, r0
 800a3e4:	b948      	cbnz	r0, 800a3fa <__lshift+0x3e>
 800a3e6:	4602      	mov	r2, r0
 800a3e8:	4b28      	ldr	r3, [pc, #160]	; (800a48c <__lshift+0xd0>)
 800a3ea:	4829      	ldr	r0, [pc, #164]	; (800a490 <__lshift+0xd4>)
 800a3ec:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a3f0:	f000 fd26 	bl	800ae40 <__assert_func>
 800a3f4:	3101      	adds	r1, #1
 800a3f6:	005b      	lsls	r3, r3, #1
 800a3f8:	e7ee      	b.n	800a3d8 <__lshift+0x1c>
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f100 0114 	add.w	r1, r0, #20
 800a400:	f100 0210 	add.w	r2, r0, #16
 800a404:	4618      	mov	r0, r3
 800a406:	4553      	cmp	r3, sl
 800a408:	db33      	blt.n	800a472 <__lshift+0xb6>
 800a40a:	6920      	ldr	r0, [r4, #16]
 800a40c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a410:	f104 0314 	add.w	r3, r4, #20
 800a414:	f019 091f 	ands.w	r9, r9, #31
 800a418:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a41c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a420:	d02b      	beq.n	800a47a <__lshift+0xbe>
 800a422:	f1c9 0e20 	rsb	lr, r9, #32
 800a426:	468a      	mov	sl, r1
 800a428:	2200      	movs	r2, #0
 800a42a:	6818      	ldr	r0, [r3, #0]
 800a42c:	fa00 f009 	lsl.w	r0, r0, r9
 800a430:	4302      	orrs	r2, r0
 800a432:	f84a 2b04 	str.w	r2, [sl], #4
 800a436:	f853 2b04 	ldr.w	r2, [r3], #4
 800a43a:	459c      	cmp	ip, r3
 800a43c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a440:	d8f3      	bhi.n	800a42a <__lshift+0x6e>
 800a442:	ebac 0304 	sub.w	r3, ip, r4
 800a446:	3b15      	subs	r3, #21
 800a448:	f023 0303 	bic.w	r3, r3, #3
 800a44c:	3304      	adds	r3, #4
 800a44e:	f104 0015 	add.w	r0, r4, #21
 800a452:	4584      	cmp	ip, r0
 800a454:	bf38      	it	cc
 800a456:	2304      	movcc	r3, #4
 800a458:	50ca      	str	r2, [r1, r3]
 800a45a:	b10a      	cbz	r2, 800a460 <__lshift+0xa4>
 800a45c:	f108 0602 	add.w	r6, r8, #2
 800a460:	3e01      	subs	r6, #1
 800a462:	4638      	mov	r0, r7
 800a464:	612e      	str	r6, [r5, #16]
 800a466:	4621      	mov	r1, r4
 800a468:	f7ff fdd6 	bl	800a018 <_Bfree>
 800a46c:	4628      	mov	r0, r5
 800a46e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a472:	f842 0f04 	str.w	r0, [r2, #4]!
 800a476:	3301      	adds	r3, #1
 800a478:	e7c5      	b.n	800a406 <__lshift+0x4a>
 800a47a:	3904      	subs	r1, #4
 800a47c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a480:	f841 2f04 	str.w	r2, [r1, #4]!
 800a484:	459c      	cmp	ip, r3
 800a486:	d8f9      	bhi.n	800a47c <__lshift+0xc0>
 800a488:	e7ea      	b.n	800a460 <__lshift+0xa4>
 800a48a:	bf00      	nop
 800a48c:	0800b353 	.word	0x0800b353
 800a490:	0800b3c4 	.word	0x0800b3c4

0800a494 <__mcmp>:
 800a494:	b530      	push	{r4, r5, lr}
 800a496:	6902      	ldr	r2, [r0, #16]
 800a498:	690c      	ldr	r4, [r1, #16]
 800a49a:	1b12      	subs	r2, r2, r4
 800a49c:	d10e      	bne.n	800a4bc <__mcmp+0x28>
 800a49e:	f100 0314 	add.w	r3, r0, #20
 800a4a2:	3114      	adds	r1, #20
 800a4a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4b4:	42a5      	cmp	r5, r4
 800a4b6:	d003      	beq.n	800a4c0 <__mcmp+0x2c>
 800a4b8:	d305      	bcc.n	800a4c6 <__mcmp+0x32>
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	4610      	mov	r0, r2
 800a4be:	bd30      	pop	{r4, r5, pc}
 800a4c0:	4283      	cmp	r3, r0
 800a4c2:	d3f3      	bcc.n	800a4ac <__mcmp+0x18>
 800a4c4:	e7fa      	b.n	800a4bc <__mcmp+0x28>
 800a4c6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ca:	e7f7      	b.n	800a4bc <__mcmp+0x28>

0800a4cc <__mdiff>:
 800a4cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4d0:	460c      	mov	r4, r1
 800a4d2:	4606      	mov	r6, r0
 800a4d4:	4611      	mov	r1, r2
 800a4d6:	4620      	mov	r0, r4
 800a4d8:	4617      	mov	r7, r2
 800a4da:	f7ff ffdb 	bl	800a494 <__mcmp>
 800a4de:	1e05      	subs	r5, r0, #0
 800a4e0:	d110      	bne.n	800a504 <__mdiff+0x38>
 800a4e2:	4629      	mov	r1, r5
 800a4e4:	4630      	mov	r0, r6
 800a4e6:	f7ff fd57 	bl	8009f98 <_Balloc>
 800a4ea:	b930      	cbnz	r0, 800a4fa <__mdiff+0x2e>
 800a4ec:	4b39      	ldr	r3, [pc, #228]	; (800a5d4 <__mdiff+0x108>)
 800a4ee:	4602      	mov	r2, r0
 800a4f0:	f240 2132 	movw	r1, #562	; 0x232
 800a4f4:	4838      	ldr	r0, [pc, #224]	; (800a5d8 <__mdiff+0x10c>)
 800a4f6:	f000 fca3 	bl	800ae40 <__assert_func>
 800a4fa:	2301      	movs	r3, #1
 800a4fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a500:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a504:	bfa4      	itt	ge
 800a506:	463b      	movge	r3, r7
 800a508:	4627      	movge	r7, r4
 800a50a:	4630      	mov	r0, r6
 800a50c:	6879      	ldr	r1, [r7, #4]
 800a50e:	bfa6      	itte	ge
 800a510:	461c      	movge	r4, r3
 800a512:	2500      	movge	r5, #0
 800a514:	2501      	movlt	r5, #1
 800a516:	f7ff fd3f 	bl	8009f98 <_Balloc>
 800a51a:	b920      	cbnz	r0, 800a526 <__mdiff+0x5a>
 800a51c:	4b2d      	ldr	r3, [pc, #180]	; (800a5d4 <__mdiff+0x108>)
 800a51e:	4602      	mov	r2, r0
 800a520:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a524:	e7e6      	b.n	800a4f4 <__mdiff+0x28>
 800a526:	693e      	ldr	r6, [r7, #16]
 800a528:	60c5      	str	r5, [r0, #12]
 800a52a:	6925      	ldr	r5, [r4, #16]
 800a52c:	f107 0114 	add.w	r1, r7, #20
 800a530:	f104 0914 	add.w	r9, r4, #20
 800a534:	f100 0e14 	add.w	lr, r0, #20
 800a538:	f107 0210 	add.w	r2, r7, #16
 800a53c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a540:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a544:	46f2      	mov	sl, lr
 800a546:	2700      	movs	r7, #0
 800a548:	f859 3b04 	ldr.w	r3, [r9], #4
 800a54c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a550:	fa1f f883 	uxth.w	r8, r3
 800a554:	fa17 f78b 	uxtah	r7, r7, fp
 800a558:	0c1b      	lsrs	r3, r3, #16
 800a55a:	eba7 0808 	sub.w	r8, r7, r8
 800a55e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a562:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a566:	fa1f f888 	uxth.w	r8, r8
 800a56a:	141f      	asrs	r7, r3, #16
 800a56c:	454d      	cmp	r5, r9
 800a56e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a572:	f84a 3b04 	str.w	r3, [sl], #4
 800a576:	d8e7      	bhi.n	800a548 <__mdiff+0x7c>
 800a578:	1b2b      	subs	r3, r5, r4
 800a57a:	3b15      	subs	r3, #21
 800a57c:	f023 0303 	bic.w	r3, r3, #3
 800a580:	3304      	adds	r3, #4
 800a582:	3415      	adds	r4, #21
 800a584:	42a5      	cmp	r5, r4
 800a586:	bf38      	it	cc
 800a588:	2304      	movcc	r3, #4
 800a58a:	4419      	add	r1, r3
 800a58c:	4473      	add	r3, lr
 800a58e:	469e      	mov	lr, r3
 800a590:	460d      	mov	r5, r1
 800a592:	4565      	cmp	r5, ip
 800a594:	d30e      	bcc.n	800a5b4 <__mdiff+0xe8>
 800a596:	f10c 0203 	add.w	r2, ip, #3
 800a59a:	1a52      	subs	r2, r2, r1
 800a59c:	f022 0203 	bic.w	r2, r2, #3
 800a5a0:	3903      	subs	r1, #3
 800a5a2:	458c      	cmp	ip, r1
 800a5a4:	bf38      	it	cc
 800a5a6:	2200      	movcc	r2, #0
 800a5a8:	441a      	add	r2, r3
 800a5aa:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a5ae:	b17b      	cbz	r3, 800a5d0 <__mdiff+0x104>
 800a5b0:	6106      	str	r6, [r0, #16]
 800a5b2:	e7a5      	b.n	800a500 <__mdiff+0x34>
 800a5b4:	f855 8b04 	ldr.w	r8, [r5], #4
 800a5b8:	fa17 f488 	uxtah	r4, r7, r8
 800a5bc:	1422      	asrs	r2, r4, #16
 800a5be:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a5c2:	b2a4      	uxth	r4, r4
 800a5c4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a5c8:	f84e 4b04 	str.w	r4, [lr], #4
 800a5cc:	1417      	asrs	r7, r2, #16
 800a5ce:	e7e0      	b.n	800a592 <__mdiff+0xc6>
 800a5d0:	3e01      	subs	r6, #1
 800a5d2:	e7ea      	b.n	800a5aa <__mdiff+0xde>
 800a5d4:	0800b353 	.word	0x0800b353
 800a5d8:	0800b3c4 	.word	0x0800b3c4

0800a5dc <__d2b>:
 800a5dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5e0:	4689      	mov	r9, r1
 800a5e2:	2101      	movs	r1, #1
 800a5e4:	ec57 6b10 	vmov	r6, r7, d0
 800a5e8:	4690      	mov	r8, r2
 800a5ea:	f7ff fcd5 	bl	8009f98 <_Balloc>
 800a5ee:	4604      	mov	r4, r0
 800a5f0:	b930      	cbnz	r0, 800a600 <__d2b+0x24>
 800a5f2:	4602      	mov	r2, r0
 800a5f4:	4b25      	ldr	r3, [pc, #148]	; (800a68c <__d2b+0xb0>)
 800a5f6:	4826      	ldr	r0, [pc, #152]	; (800a690 <__d2b+0xb4>)
 800a5f8:	f240 310a 	movw	r1, #778	; 0x30a
 800a5fc:	f000 fc20 	bl	800ae40 <__assert_func>
 800a600:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a604:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a608:	bb35      	cbnz	r5, 800a658 <__d2b+0x7c>
 800a60a:	2e00      	cmp	r6, #0
 800a60c:	9301      	str	r3, [sp, #4]
 800a60e:	d028      	beq.n	800a662 <__d2b+0x86>
 800a610:	4668      	mov	r0, sp
 800a612:	9600      	str	r6, [sp, #0]
 800a614:	f7ff fd8c 	bl	800a130 <__lo0bits>
 800a618:	9900      	ldr	r1, [sp, #0]
 800a61a:	b300      	cbz	r0, 800a65e <__d2b+0x82>
 800a61c:	9a01      	ldr	r2, [sp, #4]
 800a61e:	f1c0 0320 	rsb	r3, r0, #32
 800a622:	fa02 f303 	lsl.w	r3, r2, r3
 800a626:	430b      	orrs	r3, r1
 800a628:	40c2      	lsrs	r2, r0
 800a62a:	6163      	str	r3, [r4, #20]
 800a62c:	9201      	str	r2, [sp, #4]
 800a62e:	9b01      	ldr	r3, [sp, #4]
 800a630:	61a3      	str	r3, [r4, #24]
 800a632:	2b00      	cmp	r3, #0
 800a634:	bf14      	ite	ne
 800a636:	2202      	movne	r2, #2
 800a638:	2201      	moveq	r2, #1
 800a63a:	6122      	str	r2, [r4, #16]
 800a63c:	b1d5      	cbz	r5, 800a674 <__d2b+0x98>
 800a63e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a642:	4405      	add	r5, r0
 800a644:	f8c9 5000 	str.w	r5, [r9]
 800a648:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a64c:	f8c8 0000 	str.w	r0, [r8]
 800a650:	4620      	mov	r0, r4
 800a652:	b003      	add	sp, #12
 800a654:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a658:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a65c:	e7d5      	b.n	800a60a <__d2b+0x2e>
 800a65e:	6161      	str	r1, [r4, #20]
 800a660:	e7e5      	b.n	800a62e <__d2b+0x52>
 800a662:	a801      	add	r0, sp, #4
 800a664:	f7ff fd64 	bl	800a130 <__lo0bits>
 800a668:	9b01      	ldr	r3, [sp, #4]
 800a66a:	6163      	str	r3, [r4, #20]
 800a66c:	2201      	movs	r2, #1
 800a66e:	6122      	str	r2, [r4, #16]
 800a670:	3020      	adds	r0, #32
 800a672:	e7e3      	b.n	800a63c <__d2b+0x60>
 800a674:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a678:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a67c:	f8c9 0000 	str.w	r0, [r9]
 800a680:	6918      	ldr	r0, [r3, #16]
 800a682:	f7ff fd35 	bl	800a0f0 <__hi0bits>
 800a686:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a68a:	e7df      	b.n	800a64c <__d2b+0x70>
 800a68c:	0800b353 	.word	0x0800b353
 800a690:	0800b3c4 	.word	0x0800b3c4

0800a694 <_calloc_r>:
 800a694:	b513      	push	{r0, r1, r4, lr}
 800a696:	434a      	muls	r2, r1
 800a698:	4611      	mov	r1, r2
 800a69a:	9201      	str	r2, [sp, #4]
 800a69c:	f000 f85a 	bl	800a754 <_malloc_r>
 800a6a0:	4604      	mov	r4, r0
 800a6a2:	b118      	cbz	r0, 800a6ac <_calloc_r+0x18>
 800a6a4:	9a01      	ldr	r2, [sp, #4]
 800a6a6:	2100      	movs	r1, #0
 800a6a8:	f7fd fdde 	bl	8008268 <memset>
 800a6ac:	4620      	mov	r0, r4
 800a6ae:	b002      	add	sp, #8
 800a6b0:	bd10      	pop	{r4, pc}
	...

0800a6b4 <_free_r>:
 800a6b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6b6:	2900      	cmp	r1, #0
 800a6b8:	d048      	beq.n	800a74c <_free_r+0x98>
 800a6ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a6be:	9001      	str	r0, [sp, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	f1a1 0404 	sub.w	r4, r1, #4
 800a6c6:	bfb8      	it	lt
 800a6c8:	18e4      	addlt	r4, r4, r3
 800a6ca:	f000 fc59 	bl	800af80 <__malloc_lock>
 800a6ce:	4a20      	ldr	r2, [pc, #128]	; (800a750 <_free_r+0x9c>)
 800a6d0:	9801      	ldr	r0, [sp, #4]
 800a6d2:	6813      	ldr	r3, [r2, #0]
 800a6d4:	4615      	mov	r5, r2
 800a6d6:	b933      	cbnz	r3, 800a6e6 <_free_r+0x32>
 800a6d8:	6063      	str	r3, [r4, #4]
 800a6da:	6014      	str	r4, [r2, #0]
 800a6dc:	b003      	add	sp, #12
 800a6de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a6e2:	f000 bc53 	b.w	800af8c <__malloc_unlock>
 800a6e6:	42a3      	cmp	r3, r4
 800a6e8:	d90b      	bls.n	800a702 <_free_r+0x4e>
 800a6ea:	6821      	ldr	r1, [r4, #0]
 800a6ec:	1862      	adds	r2, r4, r1
 800a6ee:	4293      	cmp	r3, r2
 800a6f0:	bf04      	itt	eq
 800a6f2:	681a      	ldreq	r2, [r3, #0]
 800a6f4:	685b      	ldreq	r3, [r3, #4]
 800a6f6:	6063      	str	r3, [r4, #4]
 800a6f8:	bf04      	itt	eq
 800a6fa:	1852      	addeq	r2, r2, r1
 800a6fc:	6022      	streq	r2, [r4, #0]
 800a6fe:	602c      	str	r4, [r5, #0]
 800a700:	e7ec      	b.n	800a6dc <_free_r+0x28>
 800a702:	461a      	mov	r2, r3
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	b10b      	cbz	r3, 800a70c <_free_r+0x58>
 800a708:	42a3      	cmp	r3, r4
 800a70a:	d9fa      	bls.n	800a702 <_free_r+0x4e>
 800a70c:	6811      	ldr	r1, [r2, #0]
 800a70e:	1855      	adds	r5, r2, r1
 800a710:	42a5      	cmp	r5, r4
 800a712:	d10b      	bne.n	800a72c <_free_r+0x78>
 800a714:	6824      	ldr	r4, [r4, #0]
 800a716:	4421      	add	r1, r4
 800a718:	1854      	adds	r4, r2, r1
 800a71a:	42a3      	cmp	r3, r4
 800a71c:	6011      	str	r1, [r2, #0]
 800a71e:	d1dd      	bne.n	800a6dc <_free_r+0x28>
 800a720:	681c      	ldr	r4, [r3, #0]
 800a722:	685b      	ldr	r3, [r3, #4]
 800a724:	6053      	str	r3, [r2, #4]
 800a726:	4421      	add	r1, r4
 800a728:	6011      	str	r1, [r2, #0]
 800a72a:	e7d7      	b.n	800a6dc <_free_r+0x28>
 800a72c:	d902      	bls.n	800a734 <_free_r+0x80>
 800a72e:	230c      	movs	r3, #12
 800a730:	6003      	str	r3, [r0, #0]
 800a732:	e7d3      	b.n	800a6dc <_free_r+0x28>
 800a734:	6825      	ldr	r5, [r4, #0]
 800a736:	1961      	adds	r1, r4, r5
 800a738:	428b      	cmp	r3, r1
 800a73a:	bf04      	itt	eq
 800a73c:	6819      	ldreq	r1, [r3, #0]
 800a73e:	685b      	ldreq	r3, [r3, #4]
 800a740:	6063      	str	r3, [r4, #4]
 800a742:	bf04      	itt	eq
 800a744:	1949      	addeq	r1, r1, r5
 800a746:	6021      	streq	r1, [r4, #0]
 800a748:	6054      	str	r4, [r2, #4]
 800a74a:	e7c7      	b.n	800a6dc <_free_r+0x28>
 800a74c:	b003      	add	sp, #12
 800a74e:	bd30      	pop	{r4, r5, pc}
 800a750:	20000624 	.word	0x20000624

0800a754 <_malloc_r>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	1ccd      	adds	r5, r1, #3
 800a758:	f025 0503 	bic.w	r5, r5, #3
 800a75c:	3508      	adds	r5, #8
 800a75e:	2d0c      	cmp	r5, #12
 800a760:	bf38      	it	cc
 800a762:	250c      	movcc	r5, #12
 800a764:	2d00      	cmp	r5, #0
 800a766:	4606      	mov	r6, r0
 800a768:	db01      	blt.n	800a76e <_malloc_r+0x1a>
 800a76a:	42a9      	cmp	r1, r5
 800a76c:	d903      	bls.n	800a776 <_malloc_r+0x22>
 800a76e:	230c      	movs	r3, #12
 800a770:	6033      	str	r3, [r6, #0]
 800a772:	2000      	movs	r0, #0
 800a774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a776:	f000 fc03 	bl	800af80 <__malloc_lock>
 800a77a:	4921      	ldr	r1, [pc, #132]	; (800a800 <_malloc_r+0xac>)
 800a77c:	680a      	ldr	r2, [r1, #0]
 800a77e:	4614      	mov	r4, r2
 800a780:	b99c      	cbnz	r4, 800a7aa <_malloc_r+0x56>
 800a782:	4f20      	ldr	r7, [pc, #128]	; (800a804 <_malloc_r+0xb0>)
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	b923      	cbnz	r3, 800a792 <_malloc_r+0x3e>
 800a788:	4621      	mov	r1, r4
 800a78a:	4630      	mov	r0, r6
 800a78c:	f000 faf2 	bl	800ad74 <_sbrk_r>
 800a790:	6038      	str	r0, [r7, #0]
 800a792:	4629      	mov	r1, r5
 800a794:	4630      	mov	r0, r6
 800a796:	f000 faed 	bl	800ad74 <_sbrk_r>
 800a79a:	1c43      	adds	r3, r0, #1
 800a79c:	d123      	bne.n	800a7e6 <_malloc_r+0x92>
 800a79e:	230c      	movs	r3, #12
 800a7a0:	6033      	str	r3, [r6, #0]
 800a7a2:	4630      	mov	r0, r6
 800a7a4:	f000 fbf2 	bl	800af8c <__malloc_unlock>
 800a7a8:	e7e3      	b.n	800a772 <_malloc_r+0x1e>
 800a7aa:	6823      	ldr	r3, [r4, #0]
 800a7ac:	1b5b      	subs	r3, r3, r5
 800a7ae:	d417      	bmi.n	800a7e0 <_malloc_r+0x8c>
 800a7b0:	2b0b      	cmp	r3, #11
 800a7b2:	d903      	bls.n	800a7bc <_malloc_r+0x68>
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	441c      	add	r4, r3
 800a7b8:	6025      	str	r5, [r4, #0]
 800a7ba:	e004      	b.n	800a7c6 <_malloc_r+0x72>
 800a7bc:	6863      	ldr	r3, [r4, #4]
 800a7be:	42a2      	cmp	r2, r4
 800a7c0:	bf0c      	ite	eq
 800a7c2:	600b      	streq	r3, [r1, #0]
 800a7c4:	6053      	strne	r3, [r2, #4]
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f000 fbe0 	bl	800af8c <__malloc_unlock>
 800a7cc:	f104 000b 	add.w	r0, r4, #11
 800a7d0:	1d23      	adds	r3, r4, #4
 800a7d2:	f020 0007 	bic.w	r0, r0, #7
 800a7d6:	1ac2      	subs	r2, r0, r3
 800a7d8:	d0cc      	beq.n	800a774 <_malloc_r+0x20>
 800a7da:	1a1b      	subs	r3, r3, r0
 800a7dc:	50a3      	str	r3, [r4, r2]
 800a7de:	e7c9      	b.n	800a774 <_malloc_r+0x20>
 800a7e0:	4622      	mov	r2, r4
 800a7e2:	6864      	ldr	r4, [r4, #4]
 800a7e4:	e7cc      	b.n	800a780 <_malloc_r+0x2c>
 800a7e6:	1cc4      	adds	r4, r0, #3
 800a7e8:	f024 0403 	bic.w	r4, r4, #3
 800a7ec:	42a0      	cmp	r0, r4
 800a7ee:	d0e3      	beq.n	800a7b8 <_malloc_r+0x64>
 800a7f0:	1a21      	subs	r1, r4, r0
 800a7f2:	4630      	mov	r0, r6
 800a7f4:	f000 fabe 	bl	800ad74 <_sbrk_r>
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	d1dd      	bne.n	800a7b8 <_malloc_r+0x64>
 800a7fc:	e7cf      	b.n	800a79e <_malloc_r+0x4a>
 800a7fe:	bf00      	nop
 800a800:	20000624 	.word	0x20000624
 800a804:	20000628 	.word	0x20000628

0800a808 <__ssputs_r>:
 800a808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a80c:	688e      	ldr	r6, [r1, #8]
 800a80e:	429e      	cmp	r6, r3
 800a810:	4682      	mov	sl, r0
 800a812:	460c      	mov	r4, r1
 800a814:	4690      	mov	r8, r2
 800a816:	461f      	mov	r7, r3
 800a818:	d838      	bhi.n	800a88c <__ssputs_r+0x84>
 800a81a:	898a      	ldrh	r2, [r1, #12]
 800a81c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a820:	d032      	beq.n	800a888 <__ssputs_r+0x80>
 800a822:	6825      	ldr	r5, [r4, #0]
 800a824:	6909      	ldr	r1, [r1, #16]
 800a826:	eba5 0901 	sub.w	r9, r5, r1
 800a82a:	6965      	ldr	r5, [r4, #20]
 800a82c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a830:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a834:	3301      	adds	r3, #1
 800a836:	444b      	add	r3, r9
 800a838:	106d      	asrs	r5, r5, #1
 800a83a:	429d      	cmp	r5, r3
 800a83c:	bf38      	it	cc
 800a83e:	461d      	movcc	r5, r3
 800a840:	0553      	lsls	r3, r2, #21
 800a842:	d531      	bpl.n	800a8a8 <__ssputs_r+0xa0>
 800a844:	4629      	mov	r1, r5
 800a846:	f7ff ff85 	bl	800a754 <_malloc_r>
 800a84a:	4606      	mov	r6, r0
 800a84c:	b950      	cbnz	r0, 800a864 <__ssputs_r+0x5c>
 800a84e:	230c      	movs	r3, #12
 800a850:	f8ca 3000 	str.w	r3, [sl]
 800a854:	89a3      	ldrh	r3, [r4, #12]
 800a856:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a85a:	81a3      	strh	r3, [r4, #12]
 800a85c:	f04f 30ff 	mov.w	r0, #4294967295
 800a860:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a864:	6921      	ldr	r1, [r4, #16]
 800a866:	464a      	mov	r2, r9
 800a868:	f7fd fcf0 	bl	800824c <memcpy>
 800a86c:	89a3      	ldrh	r3, [r4, #12]
 800a86e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a876:	81a3      	strh	r3, [r4, #12]
 800a878:	6126      	str	r6, [r4, #16]
 800a87a:	6165      	str	r5, [r4, #20]
 800a87c:	444e      	add	r6, r9
 800a87e:	eba5 0509 	sub.w	r5, r5, r9
 800a882:	6026      	str	r6, [r4, #0]
 800a884:	60a5      	str	r5, [r4, #8]
 800a886:	463e      	mov	r6, r7
 800a888:	42be      	cmp	r6, r7
 800a88a:	d900      	bls.n	800a88e <__ssputs_r+0x86>
 800a88c:	463e      	mov	r6, r7
 800a88e:	4632      	mov	r2, r6
 800a890:	6820      	ldr	r0, [r4, #0]
 800a892:	4641      	mov	r1, r8
 800a894:	f000 fb5a 	bl	800af4c <memmove>
 800a898:	68a3      	ldr	r3, [r4, #8]
 800a89a:	6822      	ldr	r2, [r4, #0]
 800a89c:	1b9b      	subs	r3, r3, r6
 800a89e:	4432      	add	r2, r6
 800a8a0:	60a3      	str	r3, [r4, #8]
 800a8a2:	6022      	str	r2, [r4, #0]
 800a8a4:	2000      	movs	r0, #0
 800a8a6:	e7db      	b.n	800a860 <__ssputs_r+0x58>
 800a8a8:	462a      	mov	r2, r5
 800a8aa:	f000 fb75 	bl	800af98 <_realloc_r>
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d1e1      	bne.n	800a878 <__ssputs_r+0x70>
 800a8b4:	6921      	ldr	r1, [r4, #16]
 800a8b6:	4650      	mov	r0, sl
 800a8b8:	f7ff fefc 	bl	800a6b4 <_free_r>
 800a8bc:	e7c7      	b.n	800a84e <__ssputs_r+0x46>
	...

0800a8c0 <_svfiprintf_r>:
 800a8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c4:	4698      	mov	r8, r3
 800a8c6:	898b      	ldrh	r3, [r1, #12]
 800a8c8:	061b      	lsls	r3, r3, #24
 800a8ca:	b09d      	sub	sp, #116	; 0x74
 800a8cc:	4607      	mov	r7, r0
 800a8ce:	460d      	mov	r5, r1
 800a8d0:	4614      	mov	r4, r2
 800a8d2:	d50e      	bpl.n	800a8f2 <_svfiprintf_r+0x32>
 800a8d4:	690b      	ldr	r3, [r1, #16]
 800a8d6:	b963      	cbnz	r3, 800a8f2 <_svfiprintf_r+0x32>
 800a8d8:	2140      	movs	r1, #64	; 0x40
 800a8da:	f7ff ff3b 	bl	800a754 <_malloc_r>
 800a8de:	6028      	str	r0, [r5, #0]
 800a8e0:	6128      	str	r0, [r5, #16]
 800a8e2:	b920      	cbnz	r0, 800a8ee <_svfiprintf_r+0x2e>
 800a8e4:	230c      	movs	r3, #12
 800a8e6:	603b      	str	r3, [r7, #0]
 800a8e8:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ec:	e0d1      	b.n	800aa92 <_svfiprintf_r+0x1d2>
 800a8ee:	2340      	movs	r3, #64	; 0x40
 800a8f0:	616b      	str	r3, [r5, #20]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	9309      	str	r3, [sp, #36]	; 0x24
 800a8f6:	2320      	movs	r3, #32
 800a8f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a8fc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a900:	2330      	movs	r3, #48	; 0x30
 800a902:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800aaac <_svfiprintf_r+0x1ec>
 800a906:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a90a:	f04f 0901 	mov.w	r9, #1
 800a90e:	4623      	mov	r3, r4
 800a910:	469a      	mov	sl, r3
 800a912:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a916:	b10a      	cbz	r2, 800a91c <_svfiprintf_r+0x5c>
 800a918:	2a25      	cmp	r2, #37	; 0x25
 800a91a:	d1f9      	bne.n	800a910 <_svfiprintf_r+0x50>
 800a91c:	ebba 0b04 	subs.w	fp, sl, r4
 800a920:	d00b      	beq.n	800a93a <_svfiprintf_r+0x7a>
 800a922:	465b      	mov	r3, fp
 800a924:	4622      	mov	r2, r4
 800a926:	4629      	mov	r1, r5
 800a928:	4638      	mov	r0, r7
 800a92a:	f7ff ff6d 	bl	800a808 <__ssputs_r>
 800a92e:	3001      	adds	r0, #1
 800a930:	f000 80aa 	beq.w	800aa88 <_svfiprintf_r+0x1c8>
 800a934:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a936:	445a      	add	r2, fp
 800a938:	9209      	str	r2, [sp, #36]	; 0x24
 800a93a:	f89a 3000 	ldrb.w	r3, [sl]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f000 80a2 	beq.w	800aa88 <_svfiprintf_r+0x1c8>
 800a944:	2300      	movs	r3, #0
 800a946:	f04f 32ff 	mov.w	r2, #4294967295
 800a94a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a94e:	f10a 0a01 	add.w	sl, sl, #1
 800a952:	9304      	str	r3, [sp, #16]
 800a954:	9307      	str	r3, [sp, #28]
 800a956:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a95a:	931a      	str	r3, [sp, #104]	; 0x68
 800a95c:	4654      	mov	r4, sl
 800a95e:	2205      	movs	r2, #5
 800a960:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a964:	4851      	ldr	r0, [pc, #324]	; (800aaac <_svfiprintf_r+0x1ec>)
 800a966:	f7f5 fc3b 	bl	80001e0 <memchr>
 800a96a:	9a04      	ldr	r2, [sp, #16]
 800a96c:	b9d8      	cbnz	r0, 800a9a6 <_svfiprintf_r+0xe6>
 800a96e:	06d0      	lsls	r0, r2, #27
 800a970:	bf44      	itt	mi
 800a972:	2320      	movmi	r3, #32
 800a974:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a978:	0711      	lsls	r1, r2, #28
 800a97a:	bf44      	itt	mi
 800a97c:	232b      	movmi	r3, #43	; 0x2b
 800a97e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a982:	f89a 3000 	ldrb.w	r3, [sl]
 800a986:	2b2a      	cmp	r3, #42	; 0x2a
 800a988:	d015      	beq.n	800a9b6 <_svfiprintf_r+0xf6>
 800a98a:	9a07      	ldr	r2, [sp, #28]
 800a98c:	4654      	mov	r4, sl
 800a98e:	2000      	movs	r0, #0
 800a990:	f04f 0c0a 	mov.w	ip, #10
 800a994:	4621      	mov	r1, r4
 800a996:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a99a:	3b30      	subs	r3, #48	; 0x30
 800a99c:	2b09      	cmp	r3, #9
 800a99e:	d94e      	bls.n	800aa3e <_svfiprintf_r+0x17e>
 800a9a0:	b1b0      	cbz	r0, 800a9d0 <_svfiprintf_r+0x110>
 800a9a2:	9207      	str	r2, [sp, #28]
 800a9a4:	e014      	b.n	800a9d0 <_svfiprintf_r+0x110>
 800a9a6:	eba0 0308 	sub.w	r3, r0, r8
 800a9aa:	fa09 f303 	lsl.w	r3, r9, r3
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	46a2      	mov	sl, r4
 800a9b4:	e7d2      	b.n	800a95c <_svfiprintf_r+0x9c>
 800a9b6:	9b03      	ldr	r3, [sp, #12]
 800a9b8:	1d19      	adds	r1, r3, #4
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	9103      	str	r1, [sp, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	bfbb      	ittet	lt
 800a9c2:	425b      	neglt	r3, r3
 800a9c4:	f042 0202 	orrlt.w	r2, r2, #2
 800a9c8:	9307      	strge	r3, [sp, #28]
 800a9ca:	9307      	strlt	r3, [sp, #28]
 800a9cc:	bfb8      	it	lt
 800a9ce:	9204      	strlt	r2, [sp, #16]
 800a9d0:	7823      	ldrb	r3, [r4, #0]
 800a9d2:	2b2e      	cmp	r3, #46	; 0x2e
 800a9d4:	d10c      	bne.n	800a9f0 <_svfiprintf_r+0x130>
 800a9d6:	7863      	ldrb	r3, [r4, #1]
 800a9d8:	2b2a      	cmp	r3, #42	; 0x2a
 800a9da:	d135      	bne.n	800aa48 <_svfiprintf_r+0x188>
 800a9dc:	9b03      	ldr	r3, [sp, #12]
 800a9de:	1d1a      	adds	r2, r3, #4
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	9203      	str	r2, [sp, #12]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	bfb8      	it	lt
 800a9e8:	f04f 33ff 	movlt.w	r3, #4294967295
 800a9ec:	3402      	adds	r4, #2
 800a9ee:	9305      	str	r3, [sp, #20]
 800a9f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800aabc <_svfiprintf_r+0x1fc>
 800a9f4:	7821      	ldrb	r1, [r4, #0]
 800a9f6:	2203      	movs	r2, #3
 800a9f8:	4650      	mov	r0, sl
 800a9fa:	f7f5 fbf1 	bl	80001e0 <memchr>
 800a9fe:	b140      	cbz	r0, 800aa12 <_svfiprintf_r+0x152>
 800aa00:	2340      	movs	r3, #64	; 0x40
 800aa02:	eba0 000a 	sub.w	r0, r0, sl
 800aa06:	fa03 f000 	lsl.w	r0, r3, r0
 800aa0a:	9b04      	ldr	r3, [sp, #16]
 800aa0c:	4303      	orrs	r3, r0
 800aa0e:	3401      	adds	r4, #1
 800aa10:	9304      	str	r3, [sp, #16]
 800aa12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa16:	4826      	ldr	r0, [pc, #152]	; (800aab0 <_svfiprintf_r+0x1f0>)
 800aa18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aa1c:	2206      	movs	r2, #6
 800aa1e:	f7f5 fbdf 	bl	80001e0 <memchr>
 800aa22:	2800      	cmp	r0, #0
 800aa24:	d038      	beq.n	800aa98 <_svfiprintf_r+0x1d8>
 800aa26:	4b23      	ldr	r3, [pc, #140]	; (800aab4 <_svfiprintf_r+0x1f4>)
 800aa28:	bb1b      	cbnz	r3, 800aa72 <_svfiprintf_r+0x1b2>
 800aa2a:	9b03      	ldr	r3, [sp, #12]
 800aa2c:	3307      	adds	r3, #7
 800aa2e:	f023 0307 	bic.w	r3, r3, #7
 800aa32:	3308      	adds	r3, #8
 800aa34:	9303      	str	r3, [sp, #12]
 800aa36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa38:	4433      	add	r3, r6
 800aa3a:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3c:	e767      	b.n	800a90e <_svfiprintf_r+0x4e>
 800aa3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa42:	460c      	mov	r4, r1
 800aa44:	2001      	movs	r0, #1
 800aa46:	e7a5      	b.n	800a994 <_svfiprintf_r+0xd4>
 800aa48:	2300      	movs	r3, #0
 800aa4a:	3401      	adds	r4, #1
 800aa4c:	9305      	str	r3, [sp, #20]
 800aa4e:	4619      	mov	r1, r3
 800aa50:	f04f 0c0a 	mov.w	ip, #10
 800aa54:	4620      	mov	r0, r4
 800aa56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa5a:	3a30      	subs	r2, #48	; 0x30
 800aa5c:	2a09      	cmp	r2, #9
 800aa5e:	d903      	bls.n	800aa68 <_svfiprintf_r+0x1a8>
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d0c5      	beq.n	800a9f0 <_svfiprintf_r+0x130>
 800aa64:	9105      	str	r1, [sp, #20]
 800aa66:	e7c3      	b.n	800a9f0 <_svfiprintf_r+0x130>
 800aa68:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa6c:	4604      	mov	r4, r0
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e7f0      	b.n	800aa54 <_svfiprintf_r+0x194>
 800aa72:	ab03      	add	r3, sp, #12
 800aa74:	9300      	str	r3, [sp, #0]
 800aa76:	462a      	mov	r2, r5
 800aa78:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <_svfiprintf_r+0x1f8>)
 800aa7a:	a904      	add	r1, sp, #16
 800aa7c:	4638      	mov	r0, r7
 800aa7e:	f7fd fc9b 	bl	80083b8 <_printf_float>
 800aa82:	1c42      	adds	r2, r0, #1
 800aa84:	4606      	mov	r6, r0
 800aa86:	d1d6      	bne.n	800aa36 <_svfiprintf_r+0x176>
 800aa88:	89ab      	ldrh	r3, [r5, #12]
 800aa8a:	065b      	lsls	r3, r3, #25
 800aa8c:	f53f af2c 	bmi.w	800a8e8 <_svfiprintf_r+0x28>
 800aa90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa92:	b01d      	add	sp, #116	; 0x74
 800aa94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa98:	ab03      	add	r3, sp, #12
 800aa9a:	9300      	str	r3, [sp, #0]
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	4b06      	ldr	r3, [pc, #24]	; (800aab8 <_svfiprintf_r+0x1f8>)
 800aaa0:	a904      	add	r1, sp, #16
 800aaa2:	4638      	mov	r0, r7
 800aaa4:	f7fd ff2c 	bl	8008900 <_printf_i>
 800aaa8:	e7eb      	b.n	800aa82 <_svfiprintf_r+0x1c2>
 800aaaa:	bf00      	nop
 800aaac:	0800b524 	.word	0x0800b524
 800aab0:	0800b52e 	.word	0x0800b52e
 800aab4:	080083b9 	.word	0x080083b9
 800aab8:	0800a809 	.word	0x0800a809
 800aabc:	0800b52a 	.word	0x0800b52a

0800aac0 <__sfputc_r>:
 800aac0:	6893      	ldr	r3, [r2, #8]
 800aac2:	3b01      	subs	r3, #1
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	b410      	push	{r4}
 800aac8:	6093      	str	r3, [r2, #8]
 800aaca:	da08      	bge.n	800aade <__sfputc_r+0x1e>
 800aacc:	6994      	ldr	r4, [r2, #24]
 800aace:	42a3      	cmp	r3, r4
 800aad0:	db01      	blt.n	800aad6 <__sfputc_r+0x16>
 800aad2:	290a      	cmp	r1, #10
 800aad4:	d103      	bne.n	800aade <__sfputc_r+0x1e>
 800aad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aada:	f7fe b8f9 	b.w	8008cd0 <__swbuf_r>
 800aade:	6813      	ldr	r3, [r2, #0]
 800aae0:	1c58      	adds	r0, r3, #1
 800aae2:	6010      	str	r0, [r2, #0]
 800aae4:	7019      	strb	r1, [r3, #0]
 800aae6:	4608      	mov	r0, r1
 800aae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aaec:	4770      	bx	lr

0800aaee <__sfputs_r>:
 800aaee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	4614      	mov	r4, r2
 800aaf6:	18d5      	adds	r5, r2, r3
 800aaf8:	42ac      	cmp	r4, r5
 800aafa:	d101      	bne.n	800ab00 <__sfputs_r+0x12>
 800aafc:	2000      	movs	r0, #0
 800aafe:	e007      	b.n	800ab10 <__sfputs_r+0x22>
 800ab00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab04:	463a      	mov	r2, r7
 800ab06:	4630      	mov	r0, r6
 800ab08:	f7ff ffda 	bl	800aac0 <__sfputc_r>
 800ab0c:	1c43      	adds	r3, r0, #1
 800ab0e:	d1f3      	bne.n	800aaf8 <__sfputs_r+0xa>
 800ab10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab14 <_vfiprintf_r>:
 800ab14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab18:	460d      	mov	r5, r1
 800ab1a:	b09d      	sub	sp, #116	; 0x74
 800ab1c:	4614      	mov	r4, r2
 800ab1e:	4698      	mov	r8, r3
 800ab20:	4606      	mov	r6, r0
 800ab22:	b118      	cbz	r0, 800ab2c <_vfiprintf_r+0x18>
 800ab24:	6983      	ldr	r3, [r0, #24]
 800ab26:	b90b      	cbnz	r3, 800ab2c <_vfiprintf_r+0x18>
 800ab28:	f7ff f924 	bl	8009d74 <__sinit>
 800ab2c:	4b89      	ldr	r3, [pc, #548]	; (800ad54 <_vfiprintf_r+0x240>)
 800ab2e:	429d      	cmp	r5, r3
 800ab30:	d11b      	bne.n	800ab6a <_vfiprintf_r+0x56>
 800ab32:	6875      	ldr	r5, [r6, #4]
 800ab34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab36:	07d9      	lsls	r1, r3, #31
 800ab38:	d405      	bmi.n	800ab46 <_vfiprintf_r+0x32>
 800ab3a:	89ab      	ldrh	r3, [r5, #12]
 800ab3c:	059a      	lsls	r2, r3, #22
 800ab3e:	d402      	bmi.n	800ab46 <_vfiprintf_r+0x32>
 800ab40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab42:	f7ff f9ba 	bl	8009eba <__retarget_lock_acquire_recursive>
 800ab46:	89ab      	ldrh	r3, [r5, #12]
 800ab48:	071b      	lsls	r3, r3, #28
 800ab4a:	d501      	bpl.n	800ab50 <_vfiprintf_r+0x3c>
 800ab4c:	692b      	ldr	r3, [r5, #16]
 800ab4e:	b9eb      	cbnz	r3, 800ab8c <_vfiprintf_r+0x78>
 800ab50:	4629      	mov	r1, r5
 800ab52:	4630      	mov	r0, r6
 800ab54:	f7fe f90e 	bl	8008d74 <__swsetup_r>
 800ab58:	b1c0      	cbz	r0, 800ab8c <_vfiprintf_r+0x78>
 800ab5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ab5c:	07dc      	lsls	r4, r3, #31
 800ab5e:	d50e      	bpl.n	800ab7e <_vfiprintf_r+0x6a>
 800ab60:	f04f 30ff 	mov.w	r0, #4294967295
 800ab64:	b01d      	add	sp, #116	; 0x74
 800ab66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab6a:	4b7b      	ldr	r3, [pc, #492]	; (800ad58 <_vfiprintf_r+0x244>)
 800ab6c:	429d      	cmp	r5, r3
 800ab6e:	d101      	bne.n	800ab74 <_vfiprintf_r+0x60>
 800ab70:	68b5      	ldr	r5, [r6, #8]
 800ab72:	e7df      	b.n	800ab34 <_vfiprintf_r+0x20>
 800ab74:	4b79      	ldr	r3, [pc, #484]	; (800ad5c <_vfiprintf_r+0x248>)
 800ab76:	429d      	cmp	r5, r3
 800ab78:	bf08      	it	eq
 800ab7a:	68f5      	ldreq	r5, [r6, #12]
 800ab7c:	e7da      	b.n	800ab34 <_vfiprintf_r+0x20>
 800ab7e:	89ab      	ldrh	r3, [r5, #12]
 800ab80:	0598      	lsls	r0, r3, #22
 800ab82:	d4ed      	bmi.n	800ab60 <_vfiprintf_r+0x4c>
 800ab84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ab86:	f7ff f999 	bl	8009ebc <__retarget_lock_release_recursive>
 800ab8a:	e7e9      	b.n	800ab60 <_vfiprintf_r+0x4c>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab90:	2320      	movs	r3, #32
 800ab92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ab96:	f8cd 800c 	str.w	r8, [sp, #12]
 800ab9a:	2330      	movs	r3, #48	; 0x30
 800ab9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ad60 <_vfiprintf_r+0x24c>
 800aba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aba4:	f04f 0901 	mov.w	r9, #1
 800aba8:	4623      	mov	r3, r4
 800abaa:	469a      	mov	sl, r3
 800abac:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abb0:	b10a      	cbz	r2, 800abb6 <_vfiprintf_r+0xa2>
 800abb2:	2a25      	cmp	r2, #37	; 0x25
 800abb4:	d1f9      	bne.n	800abaa <_vfiprintf_r+0x96>
 800abb6:	ebba 0b04 	subs.w	fp, sl, r4
 800abba:	d00b      	beq.n	800abd4 <_vfiprintf_r+0xc0>
 800abbc:	465b      	mov	r3, fp
 800abbe:	4622      	mov	r2, r4
 800abc0:	4629      	mov	r1, r5
 800abc2:	4630      	mov	r0, r6
 800abc4:	f7ff ff93 	bl	800aaee <__sfputs_r>
 800abc8:	3001      	adds	r0, #1
 800abca:	f000 80aa 	beq.w	800ad22 <_vfiprintf_r+0x20e>
 800abce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd0:	445a      	add	r2, fp
 800abd2:	9209      	str	r2, [sp, #36]	; 0x24
 800abd4:	f89a 3000 	ldrb.w	r3, [sl]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 80a2 	beq.w	800ad22 <_vfiprintf_r+0x20e>
 800abde:	2300      	movs	r3, #0
 800abe0:	f04f 32ff 	mov.w	r2, #4294967295
 800abe4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800abe8:	f10a 0a01 	add.w	sl, sl, #1
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	9307      	str	r3, [sp, #28]
 800abf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800abf4:	931a      	str	r3, [sp, #104]	; 0x68
 800abf6:	4654      	mov	r4, sl
 800abf8:	2205      	movs	r2, #5
 800abfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abfe:	4858      	ldr	r0, [pc, #352]	; (800ad60 <_vfiprintf_r+0x24c>)
 800ac00:	f7f5 faee 	bl	80001e0 <memchr>
 800ac04:	9a04      	ldr	r2, [sp, #16]
 800ac06:	b9d8      	cbnz	r0, 800ac40 <_vfiprintf_r+0x12c>
 800ac08:	06d1      	lsls	r1, r2, #27
 800ac0a:	bf44      	itt	mi
 800ac0c:	2320      	movmi	r3, #32
 800ac0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac12:	0713      	lsls	r3, r2, #28
 800ac14:	bf44      	itt	mi
 800ac16:	232b      	movmi	r3, #43	; 0x2b
 800ac18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac20:	2b2a      	cmp	r3, #42	; 0x2a
 800ac22:	d015      	beq.n	800ac50 <_vfiprintf_r+0x13c>
 800ac24:	9a07      	ldr	r2, [sp, #28]
 800ac26:	4654      	mov	r4, sl
 800ac28:	2000      	movs	r0, #0
 800ac2a:	f04f 0c0a 	mov.w	ip, #10
 800ac2e:	4621      	mov	r1, r4
 800ac30:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac34:	3b30      	subs	r3, #48	; 0x30
 800ac36:	2b09      	cmp	r3, #9
 800ac38:	d94e      	bls.n	800acd8 <_vfiprintf_r+0x1c4>
 800ac3a:	b1b0      	cbz	r0, 800ac6a <_vfiprintf_r+0x156>
 800ac3c:	9207      	str	r2, [sp, #28]
 800ac3e:	e014      	b.n	800ac6a <_vfiprintf_r+0x156>
 800ac40:	eba0 0308 	sub.w	r3, r0, r8
 800ac44:	fa09 f303 	lsl.w	r3, r9, r3
 800ac48:	4313      	orrs	r3, r2
 800ac4a:	9304      	str	r3, [sp, #16]
 800ac4c:	46a2      	mov	sl, r4
 800ac4e:	e7d2      	b.n	800abf6 <_vfiprintf_r+0xe2>
 800ac50:	9b03      	ldr	r3, [sp, #12]
 800ac52:	1d19      	adds	r1, r3, #4
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	9103      	str	r1, [sp, #12]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	bfbb      	ittet	lt
 800ac5c:	425b      	neglt	r3, r3
 800ac5e:	f042 0202 	orrlt.w	r2, r2, #2
 800ac62:	9307      	strge	r3, [sp, #28]
 800ac64:	9307      	strlt	r3, [sp, #28]
 800ac66:	bfb8      	it	lt
 800ac68:	9204      	strlt	r2, [sp, #16]
 800ac6a:	7823      	ldrb	r3, [r4, #0]
 800ac6c:	2b2e      	cmp	r3, #46	; 0x2e
 800ac6e:	d10c      	bne.n	800ac8a <_vfiprintf_r+0x176>
 800ac70:	7863      	ldrb	r3, [r4, #1]
 800ac72:	2b2a      	cmp	r3, #42	; 0x2a
 800ac74:	d135      	bne.n	800ace2 <_vfiprintf_r+0x1ce>
 800ac76:	9b03      	ldr	r3, [sp, #12]
 800ac78:	1d1a      	adds	r2, r3, #4
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	9203      	str	r2, [sp, #12]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	bfb8      	it	lt
 800ac82:	f04f 33ff 	movlt.w	r3, #4294967295
 800ac86:	3402      	adds	r4, #2
 800ac88:	9305      	str	r3, [sp, #20]
 800ac8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ad70 <_vfiprintf_r+0x25c>
 800ac8e:	7821      	ldrb	r1, [r4, #0]
 800ac90:	2203      	movs	r2, #3
 800ac92:	4650      	mov	r0, sl
 800ac94:	f7f5 faa4 	bl	80001e0 <memchr>
 800ac98:	b140      	cbz	r0, 800acac <_vfiprintf_r+0x198>
 800ac9a:	2340      	movs	r3, #64	; 0x40
 800ac9c:	eba0 000a 	sub.w	r0, r0, sl
 800aca0:	fa03 f000 	lsl.w	r0, r3, r0
 800aca4:	9b04      	ldr	r3, [sp, #16]
 800aca6:	4303      	orrs	r3, r0
 800aca8:	3401      	adds	r4, #1
 800acaa:	9304      	str	r3, [sp, #16]
 800acac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acb0:	482c      	ldr	r0, [pc, #176]	; (800ad64 <_vfiprintf_r+0x250>)
 800acb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800acb6:	2206      	movs	r2, #6
 800acb8:	f7f5 fa92 	bl	80001e0 <memchr>
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d03f      	beq.n	800ad40 <_vfiprintf_r+0x22c>
 800acc0:	4b29      	ldr	r3, [pc, #164]	; (800ad68 <_vfiprintf_r+0x254>)
 800acc2:	bb1b      	cbnz	r3, 800ad0c <_vfiprintf_r+0x1f8>
 800acc4:	9b03      	ldr	r3, [sp, #12]
 800acc6:	3307      	adds	r3, #7
 800acc8:	f023 0307 	bic.w	r3, r3, #7
 800accc:	3308      	adds	r3, #8
 800acce:	9303      	str	r3, [sp, #12]
 800acd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acd2:	443b      	add	r3, r7
 800acd4:	9309      	str	r3, [sp, #36]	; 0x24
 800acd6:	e767      	b.n	800aba8 <_vfiprintf_r+0x94>
 800acd8:	fb0c 3202 	mla	r2, ip, r2, r3
 800acdc:	460c      	mov	r4, r1
 800acde:	2001      	movs	r0, #1
 800ace0:	e7a5      	b.n	800ac2e <_vfiprintf_r+0x11a>
 800ace2:	2300      	movs	r3, #0
 800ace4:	3401      	adds	r4, #1
 800ace6:	9305      	str	r3, [sp, #20]
 800ace8:	4619      	mov	r1, r3
 800acea:	f04f 0c0a 	mov.w	ip, #10
 800acee:	4620      	mov	r0, r4
 800acf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800acf4:	3a30      	subs	r2, #48	; 0x30
 800acf6:	2a09      	cmp	r2, #9
 800acf8:	d903      	bls.n	800ad02 <_vfiprintf_r+0x1ee>
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d0c5      	beq.n	800ac8a <_vfiprintf_r+0x176>
 800acfe:	9105      	str	r1, [sp, #20]
 800ad00:	e7c3      	b.n	800ac8a <_vfiprintf_r+0x176>
 800ad02:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad06:	4604      	mov	r4, r0
 800ad08:	2301      	movs	r3, #1
 800ad0a:	e7f0      	b.n	800acee <_vfiprintf_r+0x1da>
 800ad0c:	ab03      	add	r3, sp, #12
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	462a      	mov	r2, r5
 800ad12:	4b16      	ldr	r3, [pc, #88]	; (800ad6c <_vfiprintf_r+0x258>)
 800ad14:	a904      	add	r1, sp, #16
 800ad16:	4630      	mov	r0, r6
 800ad18:	f7fd fb4e 	bl	80083b8 <_printf_float>
 800ad1c:	4607      	mov	r7, r0
 800ad1e:	1c78      	adds	r0, r7, #1
 800ad20:	d1d6      	bne.n	800acd0 <_vfiprintf_r+0x1bc>
 800ad22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ad24:	07d9      	lsls	r1, r3, #31
 800ad26:	d405      	bmi.n	800ad34 <_vfiprintf_r+0x220>
 800ad28:	89ab      	ldrh	r3, [r5, #12]
 800ad2a:	059a      	lsls	r2, r3, #22
 800ad2c:	d402      	bmi.n	800ad34 <_vfiprintf_r+0x220>
 800ad2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ad30:	f7ff f8c4 	bl	8009ebc <__retarget_lock_release_recursive>
 800ad34:	89ab      	ldrh	r3, [r5, #12]
 800ad36:	065b      	lsls	r3, r3, #25
 800ad38:	f53f af12 	bmi.w	800ab60 <_vfiprintf_r+0x4c>
 800ad3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ad3e:	e711      	b.n	800ab64 <_vfiprintf_r+0x50>
 800ad40:	ab03      	add	r3, sp, #12
 800ad42:	9300      	str	r3, [sp, #0]
 800ad44:	462a      	mov	r2, r5
 800ad46:	4b09      	ldr	r3, [pc, #36]	; (800ad6c <_vfiprintf_r+0x258>)
 800ad48:	a904      	add	r1, sp, #16
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f7fd fdd8 	bl	8008900 <_printf_i>
 800ad50:	e7e4      	b.n	800ad1c <_vfiprintf_r+0x208>
 800ad52:	bf00      	nop
 800ad54:	0800b384 	.word	0x0800b384
 800ad58:	0800b3a4 	.word	0x0800b3a4
 800ad5c:	0800b364 	.word	0x0800b364
 800ad60:	0800b524 	.word	0x0800b524
 800ad64:	0800b52e 	.word	0x0800b52e
 800ad68:	080083b9 	.word	0x080083b9
 800ad6c:	0800aaef 	.word	0x0800aaef
 800ad70:	0800b52a 	.word	0x0800b52a

0800ad74 <_sbrk_r>:
 800ad74:	b538      	push	{r3, r4, r5, lr}
 800ad76:	4d06      	ldr	r5, [pc, #24]	; (800ad90 <_sbrk_r+0x1c>)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	4604      	mov	r4, r0
 800ad7c:	4608      	mov	r0, r1
 800ad7e:	602b      	str	r3, [r5, #0]
 800ad80:	f7f7 fb96 	bl	80024b0 <_sbrk>
 800ad84:	1c43      	adds	r3, r0, #1
 800ad86:	d102      	bne.n	800ad8e <_sbrk_r+0x1a>
 800ad88:	682b      	ldr	r3, [r5, #0]
 800ad8a:	b103      	cbz	r3, 800ad8e <_sbrk_r+0x1a>
 800ad8c:	6023      	str	r3, [r4, #0]
 800ad8e:	bd38      	pop	{r3, r4, r5, pc}
 800ad90:	20000920 	.word	0x20000920

0800ad94 <__sread>:
 800ad94:	b510      	push	{r4, lr}
 800ad96:	460c      	mov	r4, r1
 800ad98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad9c:	f000 f922 	bl	800afe4 <_read_r>
 800ada0:	2800      	cmp	r0, #0
 800ada2:	bfab      	itete	ge
 800ada4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ada6:	89a3      	ldrhlt	r3, [r4, #12]
 800ada8:	181b      	addge	r3, r3, r0
 800adaa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800adae:	bfac      	ite	ge
 800adb0:	6563      	strge	r3, [r4, #84]	; 0x54
 800adb2:	81a3      	strhlt	r3, [r4, #12]
 800adb4:	bd10      	pop	{r4, pc}

0800adb6 <__swrite>:
 800adb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adba:	461f      	mov	r7, r3
 800adbc:	898b      	ldrh	r3, [r1, #12]
 800adbe:	05db      	lsls	r3, r3, #23
 800adc0:	4605      	mov	r5, r0
 800adc2:	460c      	mov	r4, r1
 800adc4:	4616      	mov	r6, r2
 800adc6:	d505      	bpl.n	800add4 <__swrite+0x1e>
 800adc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adcc:	2302      	movs	r3, #2
 800adce:	2200      	movs	r2, #0
 800add0:	f000 f898 	bl	800af04 <_lseek_r>
 800add4:	89a3      	ldrh	r3, [r4, #12]
 800add6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800adde:	81a3      	strh	r3, [r4, #12]
 800ade0:	4632      	mov	r2, r6
 800ade2:	463b      	mov	r3, r7
 800ade4:	4628      	mov	r0, r5
 800ade6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adea:	f000 b817 	b.w	800ae1c <_write_r>

0800adee <__sseek>:
 800adee:	b510      	push	{r4, lr}
 800adf0:	460c      	mov	r4, r1
 800adf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adf6:	f000 f885 	bl	800af04 <_lseek_r>
 800adfa:	1c43      	adds	r3, r0, #1
 800adfc:	89a3      	ldrh	r3, [r4, #12]
 800adfe:	bf15      	itete	ne
 800ae00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ae02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ae06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ae0a:	81a3      	strheq	r3, [r4, #12]
 800ae0c:	bf18      	it	ne
 800ae0e:	81a3      	strhne	r3, [r4, #12]
 800ae10:	bd10      	pop	{r4, pc}

0800ae12 <__sclose>:
 800ae12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae16:	f000 b831 	b.w	800ae7c <_close_r>
	...

0800ae1c <_write_r>:
 800ae1c:	b538      	push	{r3, r4, r5, lr}
 800ae1e:	4d07      	ldr	r5, [pc, #28]	; (800ae3c <_write_r+0x20>)
 800ae20:	4604      	mov	r4, r0
 800ae22:	4608      	mov	r0, r1
 800ae24:	4611      	mov	r1, r2
 800ae26:	2200      	movs	r2, #0
 800ae28:	602a      	str	r2, [r5, #0]
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f7f7 faef 	bl	800240e <_write>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d102      	bne.n	800ae3a <_write_r+0x1e>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	b103      	cbz	r3, 800ae3a <_write_r+0x1e>
 800ae38:	6023      	str	r3, [r4, #0]
 800ae3a:	bd38      	pop	{r3, r4, r5, pc}
 800ae3c:	20000920 	.word	0x20000920

0800ae40 <__assert_func>:
 800ae40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae42:	4614      	mov	r4, r2
 800ae44:	461a      	mov	r2, r3
 800ae46:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <__assert_func+0x2c>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4605      	mov	r5, r0
 800ae4c:	68d8      	ldr	r0, [r3, #12]
 800ae4e:	b14c      	cbz	r4, 800ae64 <__assert_func+0x24>
 800ae50:	4b07      	ldr	r3, [pc, #28]	; (800ae70 <__assert_func+0x30>)
 800ae52:	9100      	str	r1, [sp, #0]
 800ae54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae58:	4906      	ldr	r1, [pc, #24]	; (800ae74 <__assert_func+0x34>)
 800ae5a:	462b      	mov	r3, r5
 800ae5c:	f000 f81e 	bl	800ae9c <fiprintf>
 800ae60:	f000 f8df 	bl	800b022 <abort>
 800ae64:	4b04      	ldr	r3, [pc, #16]	; (800ae78 <__assert_func+0x38>)
 800ae66:	461c      	mov	r4, r3
 800ae68:	e7f3      	b.n	800ae52 <__assert_func+0x12>
 800ae6a:	bf00      	nop
 800ae6c:	200001fc 	.word	0x200001fc
 800ae70:	0800b535 	.word	0x0800b535
 800ae74:	0800b542 	.word	0x0800b542
 800ae78:	0800b570 	.word	0x0800b570

0800ae7c <_close_r>:
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	4d06      	ldr	r5, [pc, #24]	; (800ae98 <_close_r+0x1c>)
 800ae80:	2300      	movs	r3, #0
 800ae82:	4604      	mov	r4, r0
 800ae84:	4608      	mov	r0, r1
 800ae86:	602b      	str	r3, [r5, #0]
 800ae88:	f7f7 fadd 	bl	8002446 <_close>
 800ae8c:	1c43      	adds	r3, r0, #1
 800ae8e:	d102      	bne.n	800ae96 <_close_r+0x1a>
 800ae90:	682b      	ldr	r3, [r5, #0]
 800ae92:	b103      	cbz	r3, 800ae96 <_close_r+0x1a>
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	bd38      	pop	{r3, r4, r5, pc}
 800ae98:	20000920 	.word	0x20000920

0800ae9c <fiprintf>:
 800ae9c:	b40e      	push	{r1, r2, r3}
 800ae9e:	b503      	push	{r0, r1, lr}
 800aea0:	4601      	mov	r1, r0
 800aea2:	ab03      	add	r3, sp, #12
 800aea4:	4805      	ldr	r0, [pc, #20]	; (800aebc <fiprintf+0x20>)
 800aea6:	f853 2b04 	ldr.w	r2, [r3], #4
 800aeaa:	6800      	ldr	r0, [r0, #0]
 800aeac:	9301      	str	r3, [sp, #4]
 800aeae:	f7ff fe31 	bl	800ab14 <_vfiprintf_r>
 800aeb2:	b002      	add	sp, #8
 800aeb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aeb8:	b003      	add	sp, #12
 800aeba:	4770      	bx	lr
 800aebc:	200001fc 	.word	0x200001fc

0800aec0 <_fstat_r>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	4d07      	ldr	r5, [pc, #28]	; (800aee0 <_fstat_r+0x20>)
 800aec4:	2300      	movs	r3, #0
 800aec6:	4604      	mov	r4, r0
 800aec8:	4608      	mov	r0, r1
 800aeca:	4611      	mov	r1, r2
 800aecc:	602b      	str	r3, [r5, #0]
 800aece:	f7f7 fac6 	bl	800245e <_fstat>
 800aed2:	1c43      	adds	r3, r0, #1
 800aed4:	d102      	bne.n	800aedc <_fstat_r+0x1c>
 800aed6:	682b      	ldr	r3, [r5, #0]
 800aed8:	b103      	cbz	r3, 800aedc <_fstat_r+0x1c>
 800aeda:	6023      	str	r3, [r4, #0]
 800aedc:	bd38      	pop	{r3, r4, r5, pc}
 800aede:	bf00      	nop
 800aee0:	20000920 	.word	0x20000920

0800aee4 <_isatty_r>:
 800aee4:	b538      	push	{r3, r4, r5, lr}
 800aee6:	4d06      	ldr	r5, [pc, #24]	; (800af00 <_isatty_r+0x1c>)
 800aee8:	2300      	movs	r3, #0
 800aeea:	4604      	mov	r4, r0
 800aeec:	4608      	mov	r0, r1
 800aeee:	602b      	str	r3, [r5, #0]
 800aef0:	f7f7 fac5 	bl	800247e <_isatty>
 800aef4:	1c43      	adds	r3, r0, #1
 800aef6:	d102      	bne.n	800aefe <_isatty_r+0x1a>
 800aef8:	682b      	ldr	r3, [r5, #0]
 800aefa:	b103      	cbz	r3, 800aefe <_isatty_r+0x1a>
 800aefc:	6023      	str	r3, [r4, #0]
 800aefe:	bd38      	pop	{r3, r4, r5, pc}
 800af00:	20000920 	.word	0x20000920

0800af04 <_lseek_r>:
 800af04:	b538      	push	{r3, r4, r5, lr}
 800af06:	4d07      	ldr	r5, [pc, #28]	; (800af24 <_lseek_r+0x20>)
 800af08:	4604      	mov	r4, r0
 800af0a:	4608      	mov	r0, r1
 800af0c:	4611      	mov	r1, r2
 800af0e:	2200      	movs	r2, #0
 800af10:	602a      	str	r2, [r5, #0]
 800af12:	461a      	mov	r2, r3
 800af14:	f7f7 fabe 	bl	8002494 <_lseek>
 800af18:	1c43      	adds	r3, r0, #1
 800af1a:	d102      	bne.n	800af22 <_lseek_r+0x1e>
 800af1c:	682b      	ldr	r3, [r5, #0]
 800af1e:	b103      	cbz	r3, 800af22 <_lseek_r+0x1e>
 800af20:	6023      	str	r3, [r4, #0]
 800af22:	bd38      	pop	{r3, r4, r5, pc}
 800af24:	20000920 	.word	0x20000920

0800af28 <__ascii_mbtowc>:
 800af28:	b082      	sub	sp, #8
 800af2a:	b901      	cbnz	r1, 800af2e <__ascii_mbtowc+0x6>
 800af2c:	a901      	add	r1, sp, #4
 800af2e:	b142      	cbz	r2, 800af42 <__ascii_mbtowc+0x1a>
 800af30:	b14b      	cbz	r3, 800af46 <__ascii_mbtowc+0x1e>
 800af32:	7813      	ldrb	r3, [r2, #0]
 800af34:	600b      	str	r3, [r1, #0]
 800af36:	7812      	ldrb	r2, [r2, #0]
 800af38:	1e10      	subs	r0, r2, #0
 800af3a:	bf18      	it	ne
 800af3c:	2001      	movne	r0, #1
 800af3e:	b002      	add	sp, #8
 800af40:	4770      	bx	lr
 800af42:	4610      	mov	r0, r2
 800af44:	e7fb      	b.n	800af3e <__ascii_mbtowc+0x16>
 800af46:	f06f 0001 	mvn.w	r0, #1
 800af4a:	e7f8      	b.n	800af3e <__ascii_mbtowc+0x16>

0800af4c <memmove>:
 800af4c:	4288      	cmp	r0, r1
 800af4e:	b510      	push	{r4, lr}
 800af50:	eb01 0402 	add.w	r4, r1, r2
 800af54:	d902      	bls.n	800af5c <memmove+0x10>
 800af56:	4284      	cmp	r4, r0
 800af58:	4623      	mov	r3, r4
 800af5a:	d807      	bhi.n	800af6c <memmove+0x20>
 800af5c:	1e43      	subs	r3, r0, #1
 800af5e:	42a1      	cmp	r1, r4
 800af60:	d008      	beq.n	800af74 <memmove+0x28>
 800af62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af66:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af6a:	e7f8      	b.n	800af5e <memmove+0x12>
 800af6c:	4402      	add	r2, r0
 800af6e:	4601      	mov	r1, r0
 800af70:	428a      	cmp	r2, r1
 800af72:	d100      	bne.n	800af76 <memmove+0x2a>
 800af74:	bd10      	pop	{r4, pc}
 800af76:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af7a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af7e:	e7f7      	b.n	800af70 <memmove+0x24>

0800af80 <__malloc_lock>:
 800af80:	4801      	ldr	r0, [pc, #4]	; (800af88 <__malloc_lock+0x8>)
 800af82:	f7fe bf9a 	b.w	8009eba <__retarget_lock_acquire_recursive>
 800af86:	bf00      	nop
 800af88:	20000918 	.word	0x20000918

0800af8c <__malloc_unlock>:
 800af8c:	4801      	ldr	r0, [pc, #4]	; (800af94 <__malloc_unlock+0x8>)
 800af8e:	f7fe bf95 	b.w	8009ebc <__retarget_lock_release_recursive>
 800af92:	bf00      	nop
 800af94:	20000918 	.word	0x20000918

0800af98 <_realloc_r>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	4607      	mov	r7, r0
 800af9c:	4614      	mov	r4, r2
 800af9e:	460e      	mov	r6, r1
 800afa0:	b921      	cbnz	r1, 800afac <_realloc_r+0x14>
 800afa2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800afa6:	4611      	mov	r1, r2
 800afa8:	f7ff bbd4 	b.w	800a754 <_malloc_r>
 800afac:	b922      	cbnz	r2, 800afb8 <_realloc_r+0x20>
 800afae:	f7ff fb81 	bl	800a6b4 <_free_r>
 800afb2:	4625      	mov	r5, r4
 800afb4:	4628      	mov	r0, r5
 800afb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb8:	f000 f83a 	bl	800b030 <_malloc_usable_size_r>
 800afbc:	42a0      	cmp	r0, r4
 800afbe:	d20f      	bcs.n	800afe0 <_realloc_r+0x48>
 800afc0:	4621      	mov	r1, r4
 800afc2:	4638      	mov	r0, r7
 800afc4:	f7ff fbc6 	bl	800a754 <_malloc_r>
 800afc8:	4605      	mov	r5, r0
 800afca:	2800      	cmp	r0, #0
 800afcc:	d0f2      	beq.n	800afb4 <_realloc_r+0x1c>
 800afce:	4631      	mov	r1, r6
 800afd0:	4622      	mov	r2, r4
 800afd2:	f7fd f93b 	bl	800824c <memcpy>
 800afd6:	4631      	mov	r1, r6
 800afd8:	4638      	mov	r0, r7
 800afda:	f7ff fb6b 	bl	800a6b4 <_free_r>
 800afde:	e7e9      	b.n	800afb4 <_realloc_r+0x1c>
 800afe0:	4635      	mov	r5, r6
 800afe2:	e7e7      	b.n	800afb4 <_realloc_r+0x1c>

0800afe4 <_read_r>:
 800afe4:	b538      	push	{r3, r4, r5, lr}
 800afe6:	4d07      	ldr	r5, [pc, #28]	; (800b004 <_read_r+0x20>)
 800afe8:	4604      	mov	r4, r0
 800afea:	4608      	mov	r0, r1
 800afec:	4611      	mov	r1, r2
 800afee:	2200      	movs	r2, #0
 800aff0:	602a      	str	r2, [r5, #0]
 800aff2:	461a      	mov	r2, r3
 800aff4:	f7f7 f9ee 	bl	80023d4 <_read>
 800aff8:	1c43      	adds	r3, r0, #1
 800affa:	d102      	bne.n	800b002 <_read_r+0x1e>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	b103      	cbz	r3, 800b002 <_read_r+0x1e>
 800b000:	6023      	str	r3, [r4, #0]
 800b002:	bd38      	pop	{r3, r4, r5, pc}
 800b004:	20000920 	.word	0x20000920

0800b008 <__ascii_wctomb>:
 800b008:	b149      	cbz	r1, 800b01e <__ascii_wctomb+0x16>
 800b00a:	2aff      	cmp	r2, #255	; 0xff
 800b00c:	bf85      	ittet	hi
 800b00e:	238a      	movhi	r3, #138	; 0x8a
 800b010:	6003      	strhi	r3, [r0, #0]
 800b012:	700a      	strbls	r2, [r1, #0]
 800b014:	f04f 30ff 	movhi.w	r0, #4294967295
 800b018:	bf98      	it	ls
 800b01a:	2001      	movls	r0, #1
 800b01c:	4770      	bx	lr
 800b01e:	4608      	mov	r0, r1
 800b020:	4770      	bx	lr

0800b022 <abort>:
 800b022:	b508      	push	{r3, lr}
 800b024:	2006      	movs	r0, #6
 800b026:	f000 f833 	bl	800b090 <raise>
 800b02a:	2001      	movs	r0, #1
 800b02c:	f7f7 f9c8 	bl	80023c0 <_exit>

0800b030 <_malloc_usable_size_r>:
 800b030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b034:	1f18      	subs	r0, r3, #4
 800b036:	2b00      	cmp	r3, #0
 800b038:	bfbc      	itt	lt
 800b03a:	580b      	ldrlt	r3, [r1, r0]
 800b03c:	18c0      	addlt	r0, r0, r3
 800b03e:	4770      	bx	lr

0800b040 <_raise_r>:
 800b040:	291f      	cmp	r1, #31
 800b042:	b538      	push	{r3, r4, r5, lr}
 800b044:	4604      	mov	r4, r0
 800b046:	460d      	mov	r5, r1
 800b048:	d904      	bls.n	800b054 <_raise_r+0x14>
 800b04a:	2316      	movs	r3, #22
 800b04c:	6003      	str	r3, [r0, #0]
 800b04e:	f04f 30ff 	mov.w	r0, #4294967295
 800b052:	bd38      	pop	{r3, r4, r5, pc}
 800b054:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b056:	b112      	cbz	r2, 800b05e <_raise_r+0x1e>
 800b058:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b05c:	b94b      	cbnz	r3, 800b072 <_raise_r+0x32>
 800b05e:	4620      	mov	r0, r4
 800b060:	f000 f830 	bl	800b0c4 <_getpid_r>
 800b064:	462a      	mov	r2, r5
 800b066:	4601      	mov	r1, r0
 800b068:	4620      	mov	r0, r4
 800b06a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b06e:	f000 b817 	b.w	800b0a0 <_kill_r>
 800b072:	2b01      	cmp	r3, #1
 800b074:	d00a      	beq.n	800b08c <_raise_r+0x4c>
 800b076:	1c59      	adds	r1, r3, #1
 800b078:	d103      	bne.n	800b082 <_raise_r+0x42>
 800b07a:	2316      	movs	r3, #22
 800b07c:	6003      	str	r3, [r0, #0]
 800b07e:	2001      	movs	r0, #1
 800b080:	e7e7      	b.n	800b052 <_raise_r+0x12>
 800b082:	2400      	movs	r4, #0
 800b084:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b088:	4628      	mov	r0, r5
 800b08a:	4798      	blx	r3
 800b08c:	2000      	movs	r0, #0
 800b08e:	e7e0      	b.n	800b052 <_raise_r+0x12>

0800b090 <raise>:
 800b090:	4b02      	ldr	r3, [pc, #8]	; (800b09c <raise+0xc>)
 800b092:	4601      	mov	r1, r0
 800b094:	6818      	ldr	r0, [r3, #0]
 800b096:	f7ff bfd3 	b.w	800b040 <_raise_r>
 800b09a:	bf00      	nop
 800b09c:	200001fc 	.word	0x200001fc

0800b0a0 <_kill_r>:
 800b0a0:	b538      	push	{r3, r4, r5, lr}
 800b0a2:	4d07      	ldr	r5, [pc, #28]	; (800b0c0 <_kill_r+0x20>)
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	4604      	mov	r4, r0
 800b0a8:	4608      	mov	r0, r1
 800b0aa:	4611      	mov	r1, r2
 800b0ac:	602b      	str	r3, [r5, #0]
 800b0ae:	f7f7 f977 	bl	80023a0 <_kill>
 800b0b2:	1c43      	adds	r3, r0, #1
 800b0b4:	d102      	bne.n	800b0bc <_kill_r+0x1c>
 800b0b6:	682b      	ldr	r3, [r5, #0]
 800b0b8:	b103      	cbz	r3, 800b0bc <_kill_r+0x1c>
 800b0ba:	6023      	str	r3, [r4, #0]
 800b0bc:	bd38      	pop	{r3, r4, r5, pc}
 800b0be:	bf00      	nop
 800b0c0:	20000920 	.word	0x20000920

0800b0c4 <_getpid_r>:
 800b0c4:	f7f7 b964 	b.w	8002390 <_getpid>

0800b0c8 <_init>:
 800b0c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ca:	bf00      	nop
 800b0cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0ce:	bc08      	pop	{r3}
 800b0d0:	469e      	mov	lr, r3
 800b0d2:	4770      	bx	lr

0800b0d4 <_fini>:
 800b0d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0d6:	bf00      	nop
 800b0d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b0da:	bc08      	pop	{r3}
 800b0dc:	469e      	mov	lr, r3
 800b0de:	4770      	bx	lr
