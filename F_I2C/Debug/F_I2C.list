
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007908  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007a98  08007a98  00017a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c1c  08007c1c  00020188  2**0
                  CONTENTS
  4 .ARM          00000008  08007c1c  08007c1c  00017c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c24  08007c24  00020188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c24  08007c24  00017c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c28  08007c28  00017c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000188  20000000  08007c2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  20000188  08007db4  00020188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000744  08007db4  00020744  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017cba  00000000  00000000  000201b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003197  00000000  00000000  00037e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0003b010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef8  00000000  00000000  0003c070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ea9  00000000  00000000  0003cf68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c5e  00000000  00000000  00065e11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f116f  00000000  00000000  0007aa6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016bbde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  0016bc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000188 	.word	0x20000188
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a80 	.word	0x08007a80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000018c 	.word	0x2000018c
 80001cc:	08007a80 	.word	0x08007a80

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_d2iz>:
 80005f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000600:	d215      	bcs.n	800062e <__aeabi_d2iz+0x36>
 8000602:	d511      	bpl.n	8000628 <__aeabi_d2iz+0x30>
 8000604:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000608:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800060c:	d912      	bls.n	8000634 <__aeabi_d2iz+0x3c>
 800060e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000612:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000616:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800061a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800061e:	fa23 f002 	lsr.w	r0, r3, r2
 8000622:	bf18      	it	ne
 8000624:	4240      	negne	r0, r0
 8000626:	4770      	bx	lr
 8000628:	f04f 0000 	mov.w	r0, #0
 800062c:	4770      	bx	lr
 800062e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000632:	d105      	bne.n	8000640 <__aeabi_d2iz+0x48>
 8000634:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000638:	bf08      	it	eq
 800063a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop

08000648 <__aeabi_uldivmod>:
 8000648:	b953      	cbnz	r3, 8000660 <__aeabi_uldivmod+0x18>
 800064a:	b94a      	cbnz	r2, 8000660 <__aeabi_uldivmod+0x18>
 800064c:	2900      	cmp	r1, #0
 800064e:	bf08      	it	eq
 8000650:	2800      	cmpeq	r0, #0
 8000652:	bf1c      	itt	ne
 8000654:	f04f 31ff 	movne.w	r1, #4294967295
 8000658:	f04f 30ff 	movne.w	r0, #4294967295
 800065c:	f000 b96e 	b.w	800093c <__aeabi_idiv0>
 8000660:	f1ad 0c08 	sub.w	ip, sp, #8
 8000664:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000668:	f000 f806 	bl	8000678 <__udivmoddi4>
 800066c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000670:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000674:	b004      	add	sp, #16
 8000676:	4770      	bx	lr

08000678 <__udivmoddi4>:
 8000678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800067c:	9d08      	ldr	r5, [sp, #32]
 800067e:	4604      	mov	r4, r0
 8000680:	468c      	mov	ip, r1
 8000682:	2b00      	cmp	r3, #0
 8000684:	f040 8083 	bne.w	800078e <__udivmoddi4+0x116>
 8000688:	428a      	cmp	r2, r1
 800068a:	4617      	mov	r7, r2
 800068c:	d947      	bls.n	800071e <__udivmoddi4+0xa6>
 800068e:	fab2 f282 	clz	r2, r2
 8000692:	b142      	cbz	r2, 80006a6 <__udivmoddi4+0x2e>
 8000694:	f1c2 0020 	rsb	r0, r2, #32
 8000698:	fa24 f000 	lsr.w	r0, r4, r0
 800069c:	4091      	lsls	r1, r2
 800069e:	4097      	lsls	r7, r2
 80006a0:	ea40 0c01 	orr.w	ip, r0, r1
 80006a4:	4094      	lsls	r4, r2
 80006a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80006aa:	0c23      	lsrs	r3, r4, #16
 80006ac:	fbbc f6f8 	udiv	r6, ip, r8
 80006b0:	fa1f fe87 	uxth.w	lr, r7
 80006b4:	fb08 c116 	mls	r1, r8, r6, ip
 80006b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80006bc:	fb06 f10e 	mul.w	r1, r6, lr
 80006c0:	4299      	cmp	r1, r3
 80006c2:	d909      	bls.n	80006d8 <__udivmoddi4+0x60>
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80006ca:	f080 8119 	bcs.w	8000900 <__udivmoddi4+0x288>
 80006ce:	4299      	cmp	r1, r3
 80006d0:	f240 8116 	bls.w	8000900 <__udivmoddi4+0x288>
 80006d4:	3e02      	subs	r6, #2
 80006d6:	443b      	add	r3, r7
 80006d8:	1a5b      	subs	r3, r3, r1
 80006da:	b2a4      	uxth	r4, r4
 80006dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80006e0:	fb08 3310 	mls	r3, r8, r0, r3
 80006e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80006e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80006ec:	45a6      	cmp	lr, r4
 80006ee:	d909      	bls.n	8000704 <__udivmoddi4+0x8c>
 80006f0:	193c      	adds	r4, r7, r4
 80006f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80006f6:	f080 8105 	bcs.w	8000904 <__udivmoddi4+0x28c>
 80006fa:	45a6      	cmp	lr, r4
 80006fc:	f240 8102 	bls.w	8000904 <__udivmoddi4+0x28c>
 8000700:	3802      	subs	r0, #2
 8000702:	443c      	add	r4, r7
 8000704:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000708:	eba4 040e 	sub.w	r4, r4, lr
 800070c:	2600      	movs	r6, #0
 800070e:	b11d      	cbz	r5, 8000718 <__udivmoddi4+0xa0>
 8000710:	40d4      	lsrs	r4, r2
 8000712:	2300      	movs	r3, #0
 8000714:	e9c5 4300 	strd	r4, r3, [r5]
 8000718:	4631      	mov	r1, r6
 800071a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800071e:	b902      	cbnz	r2, 8000722 <__udivmoddi4+0xaa>
 8000720:	deff      	udf	#255	; 0xff
 8000722:	fab2 f282 	clz	r2, r2
 8000726:	2a00      	cmp	r2, #0
 8000728:	d150      	bne.n	80007cc <__udivmoddi4+0x154>
 800072a:	1bcb      	subs	r3, r1, r7
 800072c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000730:	fa1f f887 	uxth.w	r8, r7
 8000734:	2601      	movs	r6, #1
 8000736:	fbb3 fcfe 	udiv	ip, r3, lr
 800073a:	0c21      	lsrs	r1, r4, #16
 800073c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000740:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000744:	fb08 f30c 	mul.w	r3, r8, ip
 8000748:	428b      	cmp	r3, r1
 800074a:	d907      	bls.n	800075c <__udivmoddi4+0xe4>
 800074c:	1879      	adds	r1, r7, r1
 800074e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000752:	d202      	bcs.n	800075a <__udivmoddi4+0xe2>
 8000754:	428b      	cmp	r3, r1
 8000756:	f200 80e9 	bhi.w	800092c <__udivmoddi4+0x2b4>
 800075a:	4684      	mov	ip, r0
 800075c:	1ac9      	subs	r1, r1, r3
 800075e:	b2a3      	uxth	r3, r4
 8000760:	fbb1 f0fe 	udiv	r0, r1, lr
 8000764:	fb0e 1110 	mls	r1, lr, r0, r1
 8000768:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800076c:	fb08 f800 	mul.w	r8, r8, r0
 8000770:	45a0      	cmp	r8, r4
 8000772:	d907      	bls.n	8000784 <__udivmoddi4+0x10c>
 8000774:	193c      	adds	r4, r7, r4
 8000776:	f100 33ff 	add.w	r3, r0, #4294967295
 800077a:	d202      	bcs.n	8000782 <__udivmoddi4+0x10a>
 800077c:	45a0      	cmp	r8, r4
 800077e:	f200 80d9 	bhi.w	8000934 <__udivmoddi4+0x2bc>
 8000782:	4618      	mov	r0, r3
 8000784:	eba4 0408 	sub.w	r4, r4, r8
 8000788:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800078c:	e7bf      	b.n	800070e <__udivmoddi4+0x96>
 800078e:	428b      	cmp	r3, r1
 8000790:	d909      	bls.n	80007a6 <__udivmoddi4+0x12e>
 8000792:	2d00      	cmp	r5, #0
 8000794:	f000 80b1 	beq.w	80008fa <__udivmoddi4+0x282>
 8000798:	2600      	movs	r6, #0
 800079a:	e9c5 0100 	strd	r0, r1, [r5]
 800079e:	4630      	mov	r0, r6
 80007a0:	4631      	mov	r1, r6
 80007a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007a6:	fab3 f683 	clz	r6, r3
 80007aa:	2e00      	cmp	r6, #0
 80007ac:	d14a      	bne.n	8000844 <__udivmoddi4+0x1cc>
 80007ae:	428b      	cmp	r3, r1
 80007b0:	d302      	bcc.n	80007b8 <__udivmoddi4+0x140>
 80007b2:	4282      	cmp	r2, r0
 80007b4:	f200 80b8 	bhi.w	8000928 <__udivmoddi4+0x2b0>
 80007b8:	1a84      	subs	r4, r0, r2
 80007ba:	eb61 0103 	sbc.w	r1, r1, r3
 80007be:	2001      	movs	r0, #1
 80007c0:	468c      	mov	ip, r1
 80007c2:	2d00      	cmp	r5, #0
 80007c4:	d0a8      	beq.n	8000718 <__udivmoddi4+0xa0>
 80007c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80007ca:	e7a5      	b.n	8000718 <__udivmoddi4+0xa0>
 80007cc:	f1c2 0320 	rsb	r3, r2, #32
 80007d0:	fa20 f603 	lsr.w	r6, r0, r3
 80007d4:	4097      	lsls	r7, r2
 80007d6:	fa01 f002 	lsl.w	r0, r1, r2
 80007da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007de:	40d9      	lsrs	r1, r3
 80007e0:	4330      	orrs	r0, r6
 80007e2:	0c03      	lsrs	r3, r0, #16
 80007e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80007e8:	fa1f f887 	uxth.w	r8, r7
 80007ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80007f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007f4:	fb06 f108 	mul.w	r1, r6, r8
 80007f8:	4299      	cmp	r1, r3
 80007fa:	fa04 f402 	lsl.w	r4, r4, r2
 80007fe:	d909      	bls.n	8000814 <__udivmoddi4+0x19c>
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	f106 3cff 	add.w	ip, r6, #4294967295
 8000806:	f080 808d 	bcs.w	8000924 <__udivmoddi4+0x2ac>
 800080a:	4299      	cmp	r1, r3
 800080c:	f240 808a 	bls.w	8000924 <__udivmoddi4+0x2ac>
 8000810:	3e02      	subs	r6, #2
 8000812:	443b      	add	r3, r7
 8000814:	1a5b      	subs	r3, r3, r1
 8000816:	b281      	uxth	r1, r0
 8000818:	fbb3 f0fe 	udiv	r0, r3, lr
 800081c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000820:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000824:	fb00 f308 	mul.w	r3, r0, r8
 8000828:	428b      	cmp	r3, r1
 800082a:	d907      	bls.n	800083c <__udivmoddi4+0x1c4>
 800082c:	1879      	adds	r1, r7, r1
 800082e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000832:	d273      	bcs.n	800091c <__udivmoddi4+0x2a4>
 8000834:	428b      	cmp	r3, r1
 8000836:	d971      	bls.n	800091c <__udivmoddi4+0x2a4>
 8000838:	3802      	subs	r0, #2
 800083a:	4439      	add	r1, r7
 800083c:	1acb      	subs	r3, r1, r3
 800083e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000842:	e778      	b.n	8000736 <__udivmoddi4+0xbe>
 8000844:	f1c6 0c20 	rsb	ip, r6, #32
 8000848:	fa03 f406 	lsl.w	r4, r3, r6
 800084c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000850:	431c      	orrs	r4, r3
 8000852:	fa20 f70c 	lsr.w	r7, r0, ip
 8000856:	fa01 f306 	lsl.w	r3, r1, r6
 800085a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800085e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000862:	431f      	orrs	r7, r3
 8000864:	0c3b      	lsrs	r3, r7, #16
 8000866:	fbb1 f9fe 	udiv	r9, r1, lr
 800086a:	fa1f f884 	uxth.w	r8, r4
 800086e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000872:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000876:	fb09 fa08 	mul.w	sl, r9, r8
 800087a:	458a      	cmp	sl, r1
 800087c:	fa02 f206 	lsl.w	r2, r2, r6
 8000880:	fa00 f306 	lsl.w	r3, r0, r6
 8000884:	d908      	bls.n	8000898 <__udivmoddi4+0x220>
 8000886:	1861      	adds	r1, r4, r1
 8000888:	f109 30ff 	add.w	r0, r9, #4294967295
 800088c:	d248      	bcs.n	8000920 <__udivmoddi4+0x2a8>
 800088e:	458a      	cmp	sl, r1
 8000890:	d946      	bls.n	8000920 <__udivmoddi4+0x2a8>
 8000892:	f1a9 0902 	sub.w	r9, r9, #2
 8000896:	4421      	add	r1, r4
 8000898:	eba1 010a 	sub.w	r1, r1, sl
 800089c:	b2bf      	uxth	r7, r7
 800089e:	fbb1 f0fe 	udiv	r0, r1, lr
 80008a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80008a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80008aa:	fb00 f808 	mul.w	r8, r0, r8
 80008ae:	45b8      	cmp	r8, r7
 80008b0:	d907      	bls.n	80008c2 <__udivmoddi4+0x24a>
 80008b2:	19e7      	adds	r7, r4, r7
 80008b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80008b8:	d22e      	bcs.n	8000918 <__udivmoddi4+0x2a0>
 80008ba:	45b8      	cmp	r8, r7
 80008bc:	d92c      	bls.n	8000918 <__udivmoddi4+0x2a0>
 80008be:	3802      	subs	r0, #2
 80008c0:	4427      	add	r7, r4
 80008c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80008c6:	eba7 0708 	sub.w	r7, r7, r8
 80008ca:	fba0 8902 	umull	r8, r9, r0, r2
 80008ce:	454f      	cmp	r7, r9
 80008d0:	46c6      	mov	lr, r8
 80008d2:	4649      	mov	r1, r9
 80008d4:	d31a      	bcc.n	800090c <__udivmoddi4+0x294>
 80008d6:	d017      	beq.n	8000908 <__udivmoddi4+0x290>
 80008d8:	b15d      	cbz	r5, 80008f2 <__udivmoddi4+0x27a>
 80008da:	ebb3 020e 	subs.w	r2, r3, lr
 80008de:	eb67 0701 	sbc.w	r7, r7, r1
 80008e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80008e6:	40f2      	lsrs	r2, r6
 80008e8:	ea4c 0202 	orr.w	r2, ip, r2
 80008ec:	40f7      	lsrs	r7, r6
 80008ee:	e9c5 2700 	strd	r2, r7, [r5]
 80008f2:	2600      	movs	r6, #0
 80008f4:	4631      	mov	r1, r6
 80008f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fa:	462e      	mov	r6, r5
 80008fc:	4628      	mov	r0, r5
 80008fe:	e70b      	b.n	8000718 <__udivmoddi4+0xa0>
 8000900:	4606      	mov	r6, r0
 8000902:	e6e9      	b.n	80006d8 <__udivmoddi4+0x60>
 8000904:	4618      	mov	r0, r3
 8000906:	e6fd      	b.n	8000704 <__udivmoddi4+0x8c>
 8000908:	4543      	cmp	r3, r8
 800090a:	d2e5      	bcs.n	80008d8 <__udivmoddi4+0x260>
 800090c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000910:	eb69 0104 	sbc.w	r1, r9, r4
 8000914:	3801      	subs	r0, #1
 8000916:	e7df      	b.n	80008d8 <__udivmoddi4+0x260>
 8000918:	4608      	mov	r0, r1
 800091a:	e7d2      	b.n	80008c2 <__udivmoddi4+0x24a>
 800091c:	4660      	mov	r0, ip
 800091e:	e78d      	b.n	800083c <__udivmoddi4+0x1c4>
 8000920:	4681      	mov	r9, r0
 8000922:	e7b9      	b.n	8000898 <__udivmoddi4+0x220>
 8000924:	4666      	mov	r6, ip
 8000926:	e775      	b.n	8000814 <__udivmoddi4+0x19c>
 8000928:	4630      	mov	r0, r6
 800092a:	e74a      	b.n	80007c2 <__udivmoddi4+0x14a>
 800092c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000930:	4439      	add	r1, r7
 8000932:	e713      	b.n	800075c <__udivmoddi4+0xe4>
 8000934:	3802      	subs	r0, #2
 8000936:	443c      	add	r4, r7
 8000938:	e724      	b.n	8000784 <__udivmoddi4+0x10c>
 800093a:	bf00      	nop

0800093c <__aeabi_idiv0>:
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08c      	sub	sp, #48	; 0x30
 8000944:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000946:	f001 fd65 	bl	8002414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800094a:	f000 f9c7 	bl	8000cdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094e:	f000 fab7 	bl	8000ec0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000952:	f000 fa85 	bl	8000e60 <MX_USART1_UART_Init>
  MX_UART4_Init();
 8000956:	f000 fa53 	bl	8000e00 <MX_UART4_Init>
  MX_I2C2_Init();
 800095a:	f000 fa11 	bl	8000d80 <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */

  	  BSP_TSENSOR_Init();
 800095e:	f001 f9bf 	bl	8001ce0 <BSP_TSENSOR_Init>
  	  BSP_HSENSOR_Init();
 8000962:	f001 f961 	bl	8001c28 <BSP_HSENSOR_Init>
  	  BSP_PSENSOR_Init();
 8000966:	f001 f98d 	bl	8001c84 <BSP_PSENSOR_Init>
  	  BSP_ACCELERO_Init();
 800096a:	f001 f907 	bl	8001b7c <BSP_ACCELERO_Init>

	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800096e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000972:	222c      	movs	r2, #44	; 0x2c
 8000974:	49bd      	ldr	r1, [pc, #756]	; (8000c6c <main+0x32c>)
 8000976:	48be      	ldr	r0, [pc, #760]	; (8000c70 <main+0x330>)
 8000978:	f004 fbe4 	bl	8005144 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800097c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000980:	2219      	movs	r2, #25
 8000982:	49bc      	ldr	r1, [pc, #752]	; (8000c74 <main+0x334>)
 8000984:	48ba      	ldr	r0, [pc, #744]	; (8000c70 <main+0x330>)
 8000986:	f004 fbdd 	bl	8005144 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 800098a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098e:	2253      	movs	r2, #83	; 0x53
 8000990:	49b9      	ldr	r1, [pc, #740]	; (8000c78 <main+0x338>)
 8000992:	48b7      	ldr	r0, [pc, #732]	; (8000c70 <main+0x330>)
 8000994:	f004 fbd6 	bl	8005144 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart1,rxData,1);
 8000998:	2201      	movs	r2, #1
 800099a:	49b8      	ldr	r1, [pc, #736]	; (8000c7c <main+0x33c>)
 800099c:	48b4      	ldr	r0, [pc, #720]	; (8000c70 <main+0x330>)
 800099e:	f004 fc65 	bl	800526c <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  	//for temp
		temp_value = BSP_TSENSOR_ReadTemp();
 80009a2:	f001 f9b9 	bl	8001d18 <BSP_TSENSOR_ReadTemp>
 80009a6:	eef0 7a40 	vmov.f32	s15, s0
 80009aa:	4bb5      	ldr	r3, [pc, #724]	; (8000c80 <main+0x340>)
 80009ac:	edc3 7a00 	vstr	s15, [r3]
		int tmpInt1 = temp_value;
 80009b0:	4bb3      	ldr	r3, [pc, #716]	; (8000c80 <main+0x340>)
 80009b2:	edd3 7a00 	vldr	s15, [r3]
 80009b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009ba:	ee17 3a90 	vmov	r3, s15
 80009be:	623b      	str	r3, [r7, #32]
		float tmpFrac = temp_value - tmpInt1;
 80009c0:	4baf      	ldr	r3, [pc, #700]	; (8000c80 <main+0x340>)
 80009c2:	ed93 7a00 	vldr	s14, [r3]
 80009c6:	6a3b      	ldr	r3, [r7, #32]
 80009c8:	ee07 3a90 	vmov	s15, r3
 80009cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009d4:	edc7 7a07 	vstr	s15, [r7, #28]
		int tmpInt2 = trunc(tmpFrac * 100);
 80009d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80009dc:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 8000c84 <main+0x344>
 80009e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009e4:	ee17 0a90 	vmov	r0, s15
 80009e8:	f7ff fdae 	bl	8000548 <__aeabi_f2d>
 80009ec:	4602      	mov	r2, r0
 80009ee:	460b      	mov	r3, r1
 80009f0:	ec43 2b10 	vmov	d0, r2, r3
 80009f4:	f007 f812 	bl	8007a1c <trunc>
 80009f8:	ec53 2b10 	vmov	r2, r3, d0
 80009fc:	4610      	mov	r0, r2
 80009fe:	4619      	mov	r1, r3
 8000a00:	f7ff fdfa 	bl	80005f8 <__aeabi_d2iz>
 8000a04:	4603      	mov	r3, r0
 8000a06:	61bb      	str	r3, [r7, #24]
		snprintf(str_tmp,100," TEMPERATURE = %d.%02d \n\r", tmpInt1, tmpInt2);
 8000a08:	69bb      	ldr	r3, [r7, #24]
 8000a0a:	9300      	str	r3, [sp, #0]
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	4a9e      	ldr	r2, [pc, #632]	; (8000c88 <main+0x348>)
 8000a10:	2164      	movs	r1, #100	; 0x64
 8000a12:	489e      	ldr	r0, [pc, #632]	; (8000c8c <main+0x34c>)
 8000a14:	f005 feec 	bl	80067f0 <sniprintf>
		//HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),1000);
		//HAL_Delay(3000);

		//for Humi
		humi_value = BSP_HSENSOR_ReadHumidity();
 8000a18:	f001 f926 	bl	8001c68 <BSP_HSENSOR_ReadHumidity>
 8000a1c:	eef0 7a40 	vmov.f32	s15, s0
 8000a20:	4b9b      	ldr	r3, [pc, #620]	; (8000c90 <main+0x350>)
 8000a22:	edc3 7a00 	vstr	s15, [r3]
		int humiInt1 = humi_value;
 8000a26:	4b9a      	ldr	r3, [pc, #616]	; (8000c90 <main+0x350>)
 8000a28:	edd3 7a00 	vldr	s15, [r3]
 8000a2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a30:	ee17 3a90 	vmov	r3, s15
 8000a34:	617b      	str	r3, [r7, #20]
		float humiFrac = humi_value - humiInt1;
 8000a36:	4b96      	ldr	r3, [pc, #600]	; (8000c90 <main+0x350>)
 8000a38:	ed93 7a00 	vldr	s14, [r3]
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	ee07 3a90 	vmov	s15, r3
 8000a42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a4a:	edc7 7a04 	vstr	s15, [r7, #16]
		int humiInt2 = trunc(humiFrac * 100);
 8000a4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8000a52:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8000c84 <main+0x344>
 8000a56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a5a:	ee17 0a90 	vmov	r0, s15
 8000a5e:	f7ff fd73 	bl	8000548 <__aeabi_f2d>
 8000a62:	4602      	mov	r2, r0
 8000a64:	460b      	mov	r3, r1
 8000a66:	ec43 2b10 	vmov	d0, r2, r3
 8000a6a:	f006 ffd7 	bl	8007a1c <trunc>
 8000a6e:	ec53 2b10 	vmov	r2, r3, d0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4619      	mov	r1, r3
 8000a76:	f7ff fdbf 	bl	80005f8 <__aeabi_d2iz>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	60fb      	str	r3, [r7, #12]
		snprintf(str_humi,100," HUMIDITY = %d.%02d \n\r", humiInt1, humiInt2);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4a83      	ldr	r2, [pc, #524]	; (8000c94 <main+0x354>)
 8000a86:	2164      	movs	r1, #100	; 0x64
 8000a88:	4883      	ldr	r0, [pc, #524]	; (8000c98 <main+0x358>)
 8000a8a:	f005 feb1 	bl	80067f0 <sniprintf>
		//snprintf(str_humi,100," HUMIDITY = %d \n\r", humi_value);

		//for pre

		pre_value = BSP_PSENSOR_ReadPressure();
 8000a8e:	f001 f919 	bl	8001cc4 <BSP_PSENSOR_ReadPressure>
 8000a92:	eef0 7a40 	vmov.f32	s15, s0
 8000a96:	4b81      	ldr	r3, [pc, #516]	; (8000c9c <main+0x35c>)
 8000a98:	edc3 7a00 	vstr	s15, [r3]
		int preInt1 = pre_value;
 8000a9c:	4b7f      	ldr	r3, [pc, #508]	; (8000c9c <main+0x35c>)
 8000a9e:	edd3 7a00 	vldr	s15, [r3]
 8000aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aa6:	ee17 3a90 	vmov	r3, s15
 8000aaa:	60bb      	str	r3, [r7, #8]
		float preFrac = pre_value - preInt1;
 8000aac:	4b7b      	ldr	r3, [pc, #492]	; (8000c9c <main+0x35c>)
 8000aae:	ed93 7a00 	vldr	s14, [r3]
 8000ab2:	68bb      	ldr	r3, [r7, #8]
 8000ab4:	ee07 3a90 	vmov	s15, r3
 8000ab8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000abc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ac0:	edc7 7a01 	vstr	s15, [r7, #4]
		int preInt2 = trunc(preFrac * 100);
 8000ac4:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ac8:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8000c84 <main+0x344>
 8000acc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ad0:	ee17 0a90 	vmov	r0, s15
 8000ad4:	f7ff fd38 	bl	8000548 <__aeabi_f2d>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	460b      	mov	r3, r1
 8000adc:	ec43 2b10 	vmov	d0, r2, r3
 8000ae0:	f006 ff9c 	bl	8007a1c <trunc>
 8000ae4:	ec53 2b10 	vmov	r2, r3, d0
 8000ae8:	4610      	mov	r0, r2
 8000aea:	4619      	mov	r1, r3
 8000aec:	f7ff fd84 	bl	80005f8 <__aeabi_d2iz>
 8000af0:	4603      	mov	r3, r0
 8000af2:	603b      	str	r3, [r7, #0]
		snprintf(str_pre,100," PRESSURE = %d.%02d \n\r", preInt1, preInt2);
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	9300      	str	r3, [sp, #0]
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	4a69      	ldr	r2, [pc, #420]	; (8000ca0 <main+0x360>)
 8000afc:	2164      	movs	r1, #100	; 0x64
 8000afe:	4869      	ldr	r0, [pc, #420]	; (8000ca4 <main+0x364>)
 8000b00:	f005 fe76 	bl	80067f0 <sniprintf>

		// ACCELERO
		//BSP_ACCELERO_AccGetXYZ(Acc_temp);
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8000b04:	4868      	ldr	r0, [pc, #416]	; (8000ca8 <main+0x368>)
 8000b06:	f001 f877 	bl	8001bf8 <BSP_ACCELERO_AccGetXYZ>
		snprintf(str_acc1,100," X-axis = %d      ", pDataXYZ[0]);
 8000b0a:	4b67      	ldr	r3, [pc, #412]	; (8000ca8 <main+0x368>)
 8000b0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b10:	4a66      	ldr	r2, [pc, #408]	; (8000cac <main+0x36c>)
 8000b12:	2164      	movs	r1, #100	; 0x64
 8000b14:	4866      	ldr	r0, [pc, #408]	; (8000cb0 <main+0x370>)
 8000b16:	f005 fe6b 	bl	80067f0 <sniprintf>
		snprintf(str_acc2,100," Y-axis = %d      ", pDataXYZ[1]);
 8000b1a:	4b63      	ldr	r3, [pc, #396]	; (8000ca8 <main+0x368>)
 8000b1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b20:	4a64      	ldr	r2, [pc, #400]	; (8000cb4 <main+0x374>)
 8000b22:	2164      	movs	r1, #100	; 0x64
 8000b24:	4864      	ldr	r0, [pc, #400]	; (8000cb8 <main+0x378>)
 8000b26:	f005 fe63 	bl	80067f0 <sniprintf>
		snprintf(str_acc3,100," Z-axis = %d  \n\r", pDataXYZ[2]);
 8000b2a:	4b5f      	ldr	r3, [pc, #380]	; (8000ca8 <main+0x368>)
 8000b2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b30:	4a62      	ldr	r2, [pc, #392]	; (8000cbc <main+0x37c>)
 8000b32:	2164      	movs	r1, #100	; 0x64
 8000b34:	4862      	ldr	r0, [pc, #392]	; (8000cc0 <main+0x380>)
 8000b36:	f005 fe5b 	bl	80067f0 <sniprintf>
		//HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),1000);
		//HAL_Delay(500);



		if(newMsg)
 8000b3a:	4b62      	ldr	r3, [pc, #392]	; (8000cc4 <main+0x384>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d026      	beq.n	8000b90 <main+0x250>
		{
			//size =strlen(rxBuffer);
			//printf("Size of size : %d\n",size);
			size = sizeof(rxBuffer);
 8000b42:	4b61      	ldr	r3, [pc, #388]	; (8000cc8 <main+0x388>)
 8000b44:	22c8      	movs	r2, #200	; 0xc8
 8000b46:	701a      	strb	r2, [r3, #0]

			rxBuffer[size]='\r';
 8000b48:	4b5f      	ldr	r3, [pc, #380]	; (8000cc8 <main+0x388>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	4b5f      	ldr	r3, [pc, #380]	; (8000ccc <main+0x38c>)
 8000b50:	220d      	movs	r2, #13
 8000b52:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			rxBuffer[size+1]='\n';
 8000b56:	4b5c      	ldr	r3, [pc, #368]	; (8000cc8 <main+0x388>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	4a5b      	ldr	r2, [pc, #364]	; (8000ccc <main+0x38c>)
 8000b5e:	210a      	movs	r1, #10
 8000b60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			s_case= rxBuffer[0];
 8000b64:	4b59      	ldr	r3, [pc, #356]	; (8000ccc <main+0x38c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b59      	ldr	r3, [pc, #356]	; (8000cd0 <main+0x390>)
 8000b6c:	701a      	strb	r2, [r3, #0]
			//HAL_UART_Transmit(&huart4,(uint8_t*)rxBuffer,(size + 3),500);


			for(int i=0;i< BUFFERRX ;i++)
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
 8000b72:	e007      	b.n	8000b84 <main+0x244>
			{
				rxBuffer[i]=0;
 8000b74:	4a55      	ldr	r2, [pc, #340]	; (8000ccc <main+0x38c>)
 8000b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b78:	2100      	movs	r1, #0
 8000b7a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i=0;i< BUFFERRX ;i++)
 8000b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b80:	3301      	adds	r3, #1
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
 8000b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b86:	2b31      	cmp	r3, #49	; 0x31
 8000b88:	ddf4      	ble.n	8000b74 <main+0x234>
			}

			newMsg=0;
 8000b8a:	4b4e      	ldr	r3, [pc, #312]	; (8000cc4 <main+0x384>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
		}

		printf("switch case value : %d \n",s_case);
 8000b90:	4b4f      	ldr	r3, [pc, #316]	; (8000cd0 <main+0x390>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4619      	mov	r1, r3
 8000b96:	484f      	ldr	r0, [pc, #316]	; (8000cd4 <main+0x394>)
 8000b98:	f005 fe12 	bl	80067c0 <iprintf>
		switch(s_case)
 8000b9c:	4b4c      	ldr	r3, [pc, #304]	; (8000cd0 <main+0x390>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d061      	beq.n	8000c68 <main+0x328>
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	db4f      	blt.n	8000c48 <main+0x308>
 8000ba8:	2b34      	cmp	r3, #52	; 0x34
 8000baa:	dc4d      	bgt.n	8000c48 <main+0x308>
 8000bac:	2b31      	cmp	r3, #49	; 0x31
 8000bae:	db4b      	blt.n	8000c48 <main+0x308>
 8000bb0:	3b31      	subs	r3, #49	; 0x31
 8000bb2:	2b03      	cmp	r3, #3
 8000bb4:	d848      	bhi.n	8000c48 <main+0x308>
 8000bb6:	a201      	add	r2, pc, #4	; (adr r2, 8000bbc <main+0x27c>)
 8000bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bbc:	08000bcd 	.word	0x08000bcd
 8000bc0:	08000be5 	.word	0x08000be5
 8000bc4:	08000bfd 	.word	0x08000bfd
 8000bc8:	08000c15 	.word	0x08000c15
				break;
			}

			case 49:
			{
				HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),500);
 8000bcc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bd0:	2264      	movs	r2, #100	; 0x64
 8000bd2:	492e      	ldr	r1, [pc, #184]	; (8000c8c <main+0x34c>)
 8000bd4:	4826      	ldr	r0, [pc, #152]	; (8000c70 <main+0x330>)
 8000bd6:	f004 fab5 	bl	8005144 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000bda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bde:	f001 fc8d 	bl	80024fc <HAL_Delay>
				break;
 8000be2:	e042      	b.n	8000c6a <main+0x32a>
			}
			case 50:
			{
				HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),500);
 8000be4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000be8:	2264      	movs	r2, #100	; 0x64
 8000bea:	492b      	ldr	r1, [pc, #172]	; (8000c98 <main+0x358>)
 8000bec:	4820      	ldr	r0, [pc, #128]	; (8000c70 <main+0x330>)
 8000bee:	f004 faa9 	bl	8005144 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000bf2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bf6:	f001 fc81 	bl	80024fc <HAL_Delay>
				break;
 8000bfa:	e036      	b.n	8000c6a <main+0x32a>
			}
			case 51:
			{
				HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),500);
 8000bfc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c00:	2264      	movs	r2, #100	; 0x64
 8000c02:	4928      	ldr	r1, [pc, #160]	; (8000ca4 <main+0x364>)
 8000c04:	481a      	ldr	r0, [pc, #104]	; (8000c70 <main+0x330>)
 8000c06:	f004 fa9d 	bl	8005144 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000c0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c0e:	f001 fc75 	bl	80024fc <HAL_Delay>
				break;
 8000c12:	e02a      	b.n	8000c6a <main+0x32a>
			}
			case 52:
			{
				HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 8000c14:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c18:	2264      	movs	r2, #100	; 0x64
 8000c1a:	4925      	ldr	r1, [pc, #148]	; (8000cb0 <main+0x370>)
 8000c1c:	4814      	ldr	r0, [pc, #80]	; (8000c70 <main+0x330>)
 8000c1e:	f004 fa91 	bl	8005144 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,( uint8_t * )str_acc2,sizeof(str_acc2),500);
 8000c22:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c26:	2264      	movs	r2, #100	; 0x64
 8000c28:	4923      	ldr	r1, [pc, #140]	; (8000cb8 <main+0x378>)
 8000c2a:	4811      	ldr	r0, [pc, #68]	; (8000c70 <main+0x330>)
 8000c2c:	f004 fa8a 	bl	8005144 <HAL_UART_Transmit>
				HAL_UART_Transmit(&huart1,( uint8_t * )str_acc3,sizeof(str_acc2),500);
 8000c30:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c34:	2264      	movs	r2, #100	; 0x64
 8000c36:	4922      	ldr	r1, [pc, #136]	; (8000cc0 <main+0x380>)
 8000c38:	480d      	ldr	r0, [pc, #52]	; (8000c70 <main+0x330>)
 8000c3a:	f004 fa83 	bl	8005144 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f001 fc5b 	bl	80024fc <HAL_Delay>
				break;
 8000c46:	e010      	b.n	8000c6a <main+0x32a>
			}

			default :
			{
				HAL_UART_Transmit(&huart1,(uint8_t*)Invalid,strlen(Invalid),500);
 8000c48:	4823      	ldr	r0, [pc, #140]	; (8000cd8 <main+0x398>)
 8000c4a:	f7ff fac1 	bl	80001d0 <strlen>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b29a      	uxth	r2, r3
 8000c52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000c56:	4920      	ldr	r1, [pc, #128]	; (8000cd8 <main+0x398>)
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <main+0x330>)
 8000c5a:	f004 fa73 	bl	8005144 <HAL_UART_Transmit>
				HAL_Delay(1000);
 8000c5e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c62:	f001 fc4b 	bl	80024fc <HAL_Delay>
 8000c66:	e69c      	b.n	80009a2 <main+0x62>
				break;
 8000c68:	bf00      	nop
  {
 8000c6a:	e69a      	b.n	80009a2 <main+0x62>
 8000c6c:	20000000 	.word	0x20000000
 8000c70:	20000488 	.word	0x20000488
 8000c74:	2000002c 	.word	0x2000002c
 8000c78:	20000048 	.word	0x20000048
 8000c7c:	20000430 	.word	0x20000430
 8000c80:	200001a4 	.word	0x200001a4
 8000c84:	42c80000 	.word	0x42c80000
 8000c88:	08007a98 	.word	0x08007a98
 8000c8c:	200001b0 	.word	0x200001b0
 8000c90:	200001a8 	.word	0x200001a8
 8000c94:	08007ab4 	.word	0x08007ab4
 8000c98:	20000214 	.word	0x20000214
 8000c9c:	200001ac 	.word	0x200001ac
 8000ca0:	08007acc 	.word	0x08007acc
 8000ca4:	20000278 	.word	0x20000278
 8000ca8:	200002dc 	.word	0x200002dc
 8000cac:	08007ae4 	.word	0x08007ae4
 8000cb0:	200002e4 	.word	0x200002e4
 8000cb4:	08007af8 	.word	0x08007af8
 8000cb8:	20000348 	.word	0x20000348
 8000cbc:	08007b0c 	.word	0x08007b0c
 8000cc0:	200003ac 	.word	0x200003ac
 8000cc4:	20000411 	.word	0x20000411
 8000cc8:	20000413 	.word	0x20000413
 8000ccc:	2000050c 	.word	0x2000050c
 8000cd0:	20000410 	.word	0x20000410
 8000cd4:	08007b20 	.word	0x08007b20
 8000cd8:	2000009c 	.word	0x2000009c

08000cdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b096      	sub	sp, #88	; 0x58
 8000ce0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2244      	movs	r2, #68	; 0x44
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4618      	mov	r0, r3
 8000cec:	f005 fd60 	bl	80067b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf0:	463b      	mov	r3, r7
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cfe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d02:	f002 fec1 	bl	8003a88 <HAL_PWREx_ControlVoltageScaling>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000d0c:	f000 fb18 	bl	8001340 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000d10:	2310      	movs	r3, #16
 8000d12:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000d14:	2301      	movs	r3, #1
 8000d16:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000d1c:	2360      	movs	r3, #96	; 0x60
 8000d1e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d20:	2302      	movs	r3, #2
 8000d22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000d24:	2301      	movs	r3, #1
 8000d26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000d2c:	2328      	movs	r3, #40	; 0x28
 8000d2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000d30:	2307      	movs	r3, #7
 8000d32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d34:	2302      	movs	r3, #2
 8000d36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d38:	2302      	movs	r3, #2
 8000d3a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4618      	mov	r0, r3
 8000d42:	f002 fef7 	bl	8003b34 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000d4c:	f000 faf8 	bl	8001340 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d54:	2303      	movs	r3, #3
 8000d56:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d64:	463b      	mov	r3, r7
 8000d66:	2104      	movs	r1, #4
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fabd 	bl	80042e8 <HAL_RCC_ClockConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000d74:	f000 fae4 	bl	8001340 <Error_Handler>
  }
}
 8000d78:	bf00      	nop
 8000d7a:	3758      	adds	r7, #88	; 0x58
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d84:	4b1b      	ldr	r3, [pc, #108]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d86:	4a1c      	ldr	r2, [pc, #112]	; (8000df8 <MX_I2C2_Init+0x78>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000d8a:	4b1a      	ldr	r3, [pc, #104]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <MX_I2C2_Init+0x7c>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d90:	4b18      	ldr	r3, [pc, #96]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d96:	4b17      	ldr	r3, [pc, #92]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d9c:	4b15      	ldr	r3, [pc, #84]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000da2:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000da8:	4b12      	ldr	r3, [pc, #72]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000dba:	480e      	ldr	r0, [pc, #56]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000dbc:	f002 f82b 	bl	8002e16 <HAL_I2C_Init>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d001      	beq.n	8000dca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000dc6:	f000 fabb 	bl	8001340 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dca:	2100      	movs	r1, #0
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000dce:	f002 fdb5 	bl	800393c <HAL_I2CEx_ConfigAnalogFilter>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000dd8:	f000 fab2 	bl	8001340 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4805      	ldr	r0, [pc, #20]	; (8000df4 <MX_I2C2_Init+0x74>)
 8000de0:	f002 fdf7 	bl	80039d2 <HAL_I2CEx_ConfigDigitalFilter>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000dea:	f000 faa9 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	20000434 	.word	0x20000434
 8000df8:	40005800 	.word	0x40005800
 8000dfc:	10909cec 	.word	0x10909cec

08000e00 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <MX_UART4_Init+0x5c>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_UART4_Init+0x58>)
 8000e44:	f004 f930 	bl	80050a8 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f000 fa77 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200005d4 	.word	0x200005d4
 8000e5c:	40004c00 	.word	0x40004c00

08000e60 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e64:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e66:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <MX_USART1_UART_Init+0x5c>)
 8000e68:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e6a:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e70:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e78:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e86:	220c      	movs	r2, #12
 8000e88:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e90:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e96:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e9c:	4b06      	ldr	r3, [pc, #24]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <MX_USART1_UART_Init+0x58>)
 8000ea4:	f004 f900 	bl	80050a8 <HAL_UART_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000eae:	f000 fa47 	bl	8001340 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000eb2:	bf00      	nop
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	20000488 	.word	0x20000488
 8000ebc:	40013800 	.word	0x40013800

08000ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b08a      	sub	sp, #40	; 0x28
 8000ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec6:	f107 0314 	add.w	r3, r7, #20
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	605a      	str	r2, [r3, #4]
 8000ed0:	609a      	str	r2, [r3, #8]
 8000ed2:	60da      	str	r2, [r3, #12]
 8000ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ed6:	4bbd      	ldr	r3, [pc, #756]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4abc      	ldr	r2, [pc, #752]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000edc:	f043 0310 	orr.w	r3, r3, #16
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4bba      	ldr	r3, [pc, #744]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0310 	and.w	r3, r3, #16
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eee:	4bb7      	ldr	r3, [pc, #732]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef2:	4ab6      	ldr	r2, [pc, #728]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000ef4:	f043 0304 	orr.w	r3, r3, #4
 8000ef8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efa:	4bb4      	ldr	r3, [pc, #720]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000efc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efe:	f003 0304 	and.w	r3, r3, #4
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4bb1      	ldr	r3, [pc, #708]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0a:	4ab0      	ldr	r2, [pc, #704]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f12:	4bae      	ldr	r3, [pc, #696]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	4bab      	ldr	r3, [pc, #684]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f22:	4aaa      	ldr	r2, [pc, #680]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f2a:	4ba8      	ldr	r3, [pc, #672]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	607b      	str	r3, [r7, #4]
 8000f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f36:	4ba5      	ldr	r3, [pc, #660]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3a:	4aa4      	ldr	r2, [pc, #656]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f3c:	f043 0308 	orr.w	r3, r3, #8
 8000f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f42:	4ba2      	ldr	r3, [pc, #648]	; (80011cc <MX_GPIO_Init+0x30c>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000f54:	489e      	ldr	r0, [pc, #632]	; (80011d0 <MX_GPIO_Init+0x310>)
 8000f56:	f001 ff23 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f001 ff1c 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000f6e:	4899      	ldr	r0, [pc, #612]	; (80011d4 <MX_GPIO_Init+0x314>)
 8000f70:	f001 ff16 	bl	8002da0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000f74:	2200      	movs	r2, #0
 8000f76:	f241 0181 	movw	r1, #4225	; 0x1081
 8000f7a:	4897      	ldr	r0, [pc, #604]	; (80011d8 <MX_GPIO_Init+0x318>)
 8000f7c:	f001 ff10 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f80:	2201      	movs	r2, #1
 8000f82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f86:	4894      	ldr	r0, [pc, #592]	; (80011d8 <MX_GPIO_Init+0x318>)
 8000f88:	f001 ff0a 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000f92:	4892      	ldr	r0, [pc, #584]	; (80011dc <MX_GPIO_Init+0x31c>)
 8000f94:	f001 ff04 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000f98:	2201      	movs	r2, #1
 8000f9a:	2120      	movs	r1, #32
 8000f9c:	488d      	ldr	r0, [pc, #564]	; (80011d4 <MX_GPIO_Init+0x314>)
 8000f9e:	f001 feff 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	2101      	movs	r1, #1
 8000fa6:	488a      	ldr	r0, [pc, #552]	; (80011d0 <MX_GPIO_Init+0x310>)
 8000fa8:	f001 fefa 	bl	8002da0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000fac:	f240 1315 	movw	r3, #277	; 0x115
 8000fb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	4882      	ldr	r0, [pc, #520]	; (80011d0 <MX_GPIO_Init+0x310>)
 8000fc6:	f001 fc4d 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000fca:	236a      	movs	r3, #106	; 0x6a
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000fd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	487c      	ldr	r0, [pc, #496]	; (80011d0 <MX_GPIO_Init+0x310>)
 8000fe0:	f001 fc40 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fe8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	f107 0314 	add.w	r3, r7, #20
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4878      	ldr	r0, [pc, #480]	; (80011dc <MX_GPIO_Init+0x31c>)
 8000ffc:	f001 fc32 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001000:	233f      	movs	r3, #63	; 0x3f
 8001002:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001004:	230b      	movs	r3, #11
 8001006:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4619      	mov	r1, r3
 8001012:	4872      	ldr	r0, [pc, #456]	; (80011dc <MX_GPIO_Init+0x31c>)
 8001014:	f001 fc26 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001018:	f248 1304 	movw	r3, #33028	; 0x8104
 800101c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800101e:	2301      	movs	r3, #1
 8001020:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001034:	f001 fc16 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001038:	2308      	movs	r3, #8
 800103a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001056:	f001 fc05 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800105a:	2310      	movs	r3, #16
 800105c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800105e:	230b      	movs	r3, #11
 8001060:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001070:	f001 fbf8 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001074:	23e0      	movs	r3, #224	; 0xe0
 8001076:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001078:	2302      	movs	r3, #2
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001080:	2303      	movs	r3, #3
 8001082:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001084:	2305      	movs	r3, #5
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f001 fbe7 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800109e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a0:	2300      	movs	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	484a      	ldr	r0, [pc, #296]	; (80011d4 <MX_GPIO_Init+0x314>)
 80010ac:	f001 fbda 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 80010b0:	2302      	movs	r3, #2
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80010b4:	230b      	movs	r3, #11
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4844      	ldr	r0, [pc, #272]	; (80011d4 <MX_GPIO_Init+0x314>)
 80010c4:	f001 fbce 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80010c8:	f24f 0334 	movw	r3, #61492	; 0xf034
 80010cc:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	483c      	ldr	r0, [pc, #240]	; (80011d4 <MX_GPIO_Init+0x314>)
 80010e2:	f001 fbbf 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80010e6:	f44f 7320 	mov.w	r3, #640	; 0x280
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f4:	2300      	movs	r3, #0
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80010f8:	2306      	movs	r3, #6
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4833      	ldr	r0, [pc, #204]	; (80011d0 <MX_GPIO_Init+0x310>)
 8001104:	f001 fbae 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001108:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800110c:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800111a:	230a      	movs	r3, #10
 800111c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	482a      	ldr	r0, [pc, #168]	; (80011d0 <MX_GPIO_Init+0x310>)
 8001126:	f001 fb9d 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800112a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001130:	2302      	movs	r3, #2
 8001132:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001134:	2300      	movs	r3, #0
 8001136:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001138:	2303      	movs	r3, #3
 800113a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800113c:	2307      	movs	r3, #7
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4824      	ldr	r0, [pc, #144]	; (80011d8 <MX_GPIO_Init+0x318>)
 8001148:	f001 fb8c 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 800114c:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001150:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001152:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001156:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	481d      	ldr	r0, [pc, #116]	; (80011d8 <MX_GPIO_Init+0x318>)
 8001164:	f001 fb7e 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001168:	f243 0381 	movw	r3, #12417	; 0x3081
 800116c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	2301      	movs	r3, #1
 8001170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	4619      	mov	r1, r3
 8001180:	4815      	ldr	r0, [pc, #84]	; (80011d8 <MX_GPIO_Init+0x318>)
 8001182:	f001 fb6f 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001186:	f44f 7310 	mov.w	r3, #576	; 0x240
 800118a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	2301      	movs	r3, #1
 800118e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001198:	f107 0314 	add.w	r3, r7, #20
 800119c:	4619      	mov	r1, r3
 800119e:	480f      	ldr	r0, [pc, #60]	; (80011dc <MX_GPIO_Init+0x31c>)
 80011a0:	f001 fb60 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80011a4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80011a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	4808      	ldr	r0, [pc, #32]	; (80011dc <MX_GPIO_Init+0x31c>)
 80011bc:	f001 fb52 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80011c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e00a      	b.n	80011e0 <MX_GPIO_Init+0x320>
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	48001000 	.word	0x48001000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	48000c00 	.word	0x48000c00
 80011dc:	48000800 	.word	0x48000800
 80011e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80011e6:	f107 0314 	add.w	r3, r7, #20
 80011ea:	4619      	mov	r1, r3
 80011ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f0:	f001 fb38 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80011f4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80011f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001202:	2303      	movs	r3, #3
 8001204:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001206:	230a      	movs	r3, #10
 8001208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f001 fb26 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001218:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121e:	2302      	movs	r3, #2
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800122a:	2306      	movs	r3, #6
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4823      	ldr	r0, [pc, #140]	; (80012c4 <MX_GPIO_Init+0x404>)
 8001236:	f001 fb15 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800123a:	2302      	movs	r3, #2
 800123c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001242:	2300      	movs	r3, #0
 8001244:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001246:	2303      	movs	r3, #3
 8001248:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800124a:	2305      	movs	r3, #5
 800124c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800124e:	f107 0314 	add.w	r3, r7, #20
 8001252:	4619      	mov	r1, r3
 8001254:	481c      	ldr	r0, [pc, #112]	; (80012c8 <MX_GPIO_Init+0x408>)
 8001256:	f001 fb05 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800125a:	2378      	movs	r3, #120	; 0x78
 800125c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001266:	2303      	movs	r3, #3
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800126a:	2307      	movs	r3, #7
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	4814      	ldr	r0, [pc, #80]	; (80012c8 <MX_GPIO_Init+0x408>)
 8001276:	f001 faf5 	bl	8002864 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 800127a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800127e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001280:	2312      	movs	r3, #18
 8001282:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001288:	2303      	movs	r3, #3
 800128a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800128c:	2304      	movs	r3, #4
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001290:	f107 0314 	add.w	r3, r7, #20
 8001294:	4619      	mov	r1, r3
 8001296:	480d      	ldr	r0, [pc, #52]	; (80012cc <MX_GPIO_Init+0x40c>)
 8001298:	f001 fae4 	bl	8002864 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	2017      	movs	r0, #23
 80012a2:	f001 fa2a 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80012a6:	2017      	movs	r0, #23
 80012a8:	f001 fa43 	bl	8002732 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2100      	movs	r1, #0
 80012b0:	2028      	movs	r0, #40	; 0x28
 80012b2:	f001 fa22 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012b6:	2028      	movs	r0, #40	; 0x28
 80012b8:	f001 fa3b 	bl	8002732 <HAL_NVIC_EnableIRQ>

}
 80012bc:	bf00      	nop
 80012be:	3728      	adds	r7, #40	; 0x28
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	48000800 	.word	0x48000800
 80012c8:	48000c00 	.word	0x48000c00
 80012cc:	48000400 	.word	0x48000400

080012d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4a12      	ldr	r2, [pc, #72]	; (8001328 <HAL_UART_RxCpltCallback+0x58>)
 80012de:	4293      	cmp	r3, r2
 80012e0:	d11d      	bne.n	800131e <HAL_UART_RxCpltCallback+0x4e>
    {
    	if(rxData[0]!='\r')
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_UART_RxCpltCallback+0x5c>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2b0d      	cmp	r3, #13
 80012e8:	d00e      	beq.n	8001308 <HAL_UART_RxCpltCallback+0x38>
        {
            rxBuffer[rxIndex]=rxData[0];
 80012ea:	4b10      	ldr	r3, [pc, #64]	; (800132c <HAL_UART_RxCpltCallback+0x5c>)
 80012ec:	7819      	ldrb	r1, [r3, #0]
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <HAL_UART_RxCpltCallback+0x60>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b0f      	ldr	r3, [pc, #60]	; (8001334 <HAL_UART_RxCpltCallback+0x64>)
 80012f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            rxIndex++;
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_UART_RxCpltCallback+0x60>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	3301      	adds	r3, #1
 8001300:	b2da      	uxtb	r2, r3
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <HAL_UART_RxCpltCallback+0x60>)
 8001304:	701a      	strb	r2, [r3, #0]
 8001306:	e005      	b.n	8001314 <HAL_UART_RxCpltCallback+0x44>
        }
        else
        {
            newMsg=1;
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_UART_RxCpltCallback+0x68>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <HAL_UART_RxCpltCallback+0x60>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8001314:	2201      	movs	r2, #1
 8001316:	4905      	ldr	r1, [pc, #20]	; (800132c <HAL_UART_RxCpltCallback+0x5c>)
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <HAL_UART_RxCpltCallback+0x6c>)
 800131a:	f003 ffa7 	bl	800526c <HAL_UART_Receive_IT>
                rxIndex1=0;
            }
            HAL_UART_Receive_IT(&huart4 ,rxData1,1);
        }
        */
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40013800 	.word	0x40013800
 800132c:	20000430 	.word	0x20000430
 8001330:	20000412 	.word	0x20000412
 8001334:	2000050c 	.word	0x2000050c
 8001338:	20000411 	.word	0x20000411
 800133c:	20000488 	.word	0x20000488

08001340 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001344:	b672      	cpsid	i
}
 8001346:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001348:	e7fe      	b.n	8001348 <Error_Handler+0x8>
	...

0800134c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <HAL_MspInit+0x44>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001356:	4a0e      	ldr	r2, [pc, #56]	; (8001390 <HAL_MspInit+0x44>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6613      	str	r3, [r2, #96]	; 0x60
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <HAL_MspInit+0x44>)
 8001360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	607b      	str	r3, [r7, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_MspInit+0x44>)
 800136c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_MspInit+0x44>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6593      	str	r3, [r2, #88]	; 0x58
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_MspInit+0x44>)
 8001378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b0ac      	sub	sp, #176	; 0xb0
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]
 80013aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	2288      	movs	r2, #136	; 0x88
 80013b2:	2100      	movs	r1, #0
 80013b4:	4618      	mov	r0, r3
 80013b6:	f005 f9fb 	bl	80067b0 <memset>
  if(hi2c->Instance==I2C2)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4a21      	ldr	r2, [pc, #132]	; (8001444 <HAL_I2C_MspInit+0xb0>)
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d13b      	bne.n	800143c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80013c4:	2380      	movs	r3, #128	; 0x80
 80013c6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 f9ad 	bl	8004730 <HAL_RCCEx_PeriphCLKConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80013dc:	f7ff ffb0 	bl	8001340 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e0:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 80013e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e4:	4a18      	ldr	r2, [pc, #96]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 80013e6:	f043 0302 	orr.w	r3, r3, #2
 80013ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ec:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 80013ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80013f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001400:	2312      	movs	r3, #18
 8001402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800140c:	2303      	movs	r3, #3
 800140e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001412:	2304      	movs	r3, #4
 8001414:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001418:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800141c:	4619      	mov	r1, r3
 800141e:	480b      	ldr	r0, [pc, #44]	; (800144c <HAL_I2C_MspInit+0xb8>)
 8001420:	f001 fa20 	bl	8002864 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 800142a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800142e:	6593      	str	r3, [r2, #88]	; 0x58
 8001430:	4b05      	ldr	r3, [pc, #20]	; (8001448 <HAL_I2C_MspInit+0xb4>)
 8001432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001434:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800143c:	bf00      	nop
 800143e:	37b0      	adds	r7, #176	; 0xb0
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40005800 	.word	0x40005800
 8001448:	40021000 	.word	0x40021000
 800144c:	48000400 	.word	0x48000400

08001450 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_I2C_MspDeInit+0x3c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10f      	bne.n	8001482 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_I2C_MspDeInit+0x40>)
 8001464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001466:	4a0a      	ldr	r2, [pc, #40]	; (8001490 <HAL_I2C_MspDeInit+0x40>)
 8001468:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800146c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 800146e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <HAL_I2C_MspDeInit+0x44>)
 8001474:	f001 fba0 	bl	8002bb8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001478:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800147c:	4805      	ldr	r0, [pc, #20]	; (8001494 <HAL_I2C_MspDeInit+0x44>)
 800147e:	f001 fb9b 	bl	8002bb8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40005800 	.word	0x40005800
 8001490:	40021000 	.word	0x40021000
 8001494:	48000400 	.word	0x48000400

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b0ae      	sub	sp, #184	; 0xb8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
 80014ac:	60da      	str	r2, [r3, #12]
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b0:	f107 031c 	add.w	r3, r7, #28
 80014b4:	2288      	movs	r2, #136	; 0x88
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f005 f979 	bl	80067b0 <memset>
  if(huart->Instance==UART4)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a4a      	ldr	r2, [pc, #296]	; (80015ec <HAL_UART_MspInit+0x154>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d144      	bne.n	8001552 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80014c8:	2308      	movs	r3, #8
 80014ca:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80014cc:	2300      	movs	r3, #0
 80014ce:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 031c 	add.w	r3, r7, #28
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 f92b 	bl	8004730 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e0:	f7ff ff2e 	bl	8001340 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80014e4:	4b42      	ldr	r3, [pc, #264]	; (80015f0 <HAL_UART_MspInit+0x158>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	4a41      	ldr	r2, [pc, #260]	; (80015f0 <HAL_UART_MspInit+0x158>)
 80014ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80014ee:	6593      	str	r3, [r2, #88]	; 0x58
 80014f0:	4b3f      	ldr	r3, [pc, #252]	; (80015f0 <HAL_UART_MspInit+0x158>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014f8:	61bb      	str	r3, [r7, #24]
 80014fa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fc:	4b3c      	ldr	r3, [pc, #240]	; (80015f0 <HAL_UART_MspInit+0x158>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001500:	4a3b      	ldr	r2, [pc, #236]	; (80015f0 <HAL_UART_MspInit+0x158>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001508:	4b39      	ldr	r3, [pc, #228]	; (80015f0 <HAL_UART_MspInit+0x158>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001514:	2303      	movs	r3, #3
 8001516:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800152c:	2308      	movs	r3, #8
 800152e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f001 f992 	bl	8002864 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001540:	2200      	movs	r2, #0
 8001542:	2100      	movs	r1, #0
 8001544:	2034      	movs	r0, #52	; 0x34
 8001546:	f001 f8d8 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800154a:	2034      	movs	r0, #52	; 0x34
 800154c:	f001 f8f1 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001550:	e047      	b.n	80015e2 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a27      	ldr	r2, [pc, #156]	; (80015f4 <HAL_UART_MspInit+0x15c>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d142      	bne.n	80015e2 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800155c:	2301      	movs	r3, #1
 800155e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001560:	2300      	movs	r3, #0
 8001562:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4618      	mov	r0, r3
 800156a:	f003 f8e1 	bl	8004730 <HAL_RCCEx_PeriphCLKConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001574:	f7ff fee4 	bl	8001340 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001578:	4b1d      	ldr	r3, [pc, #116]	; (80015f0 <HAL_UART_MspInit+0x158>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	4a1c      	ldr	r2, [pc, #112]	; (80015f0 <HAL_UART_MspInit+0x158>)
 800157e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001582:	6613      	str	r3, [r2, #96]	; 0x60
 8001584:	4b1a      	ldr	r3, [pc, #104]	; (80015f0 <HAL_UART_MspInit+0x158>)
 8001586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001590:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_UART_MspInit+0x158>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <HAL_UART_MspInit+0x158>)
 8001596:	f043 0302 	orr.w	r3, r3, #2
 800159a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0x158>)
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	60fb      	str	r3, [r7, #12]
 80015a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80015a8:	23c0      	movs	r3, #192	; 0xc0
 80015aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015c0:	2307      	movs	r3, #7
 80015c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015ca:	4619      	mov	r1, r3
 80015cc:	480a      	ldr	r0, [pc, #40]	; (80015f8 <HAL_UART_MspInit+0x160>)
 80015ce:	f001 f949 	bl	8002864 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	2025      	movs	r0, #37	; 0x25
 80015d8:	f001 f88f 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015dc:	2025      	movs	r0, #37	; 0x25
 80015de:	f001 f8a8 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	37b8      	adds	r7, #184	; 0xb8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40004c00 	.word	0x40004c00
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40013800 	.word	0x40013800
 80015f8:	48000400 	.word	0x48000400

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 ff38 	bl	80024bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001654:	2020      	movs	r0, #32
 8001656:	f001 fbbb 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800165a:	2040      	movs	r0, #64	; 0x40
 800165c:	f001 fbb8 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001660:	2080      	movs	r0, #128	; 0x80
 8001662:	f001 fbb5 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001666:	f44f 7080 	mov.w	r0, #256	; 0x100
 800166a:	f001 fbb1 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001678:	4802      	ldr	r0, [pc, #8]	; (8001684 <USART1_IRQHandler+0x10>)
 800167a:	f003 fe4d 	bl	8005318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20000488 	.word	0x20000488

08001688 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800168c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001690:	f001 fb9e 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001694:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001698:	f001 fb9a 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800169c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016a0:	f001 fb96 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80016a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80016a8:	f001 fb92 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80016ac:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80016b0:	f001 fb8e 	bl	8002dd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80016bc:	4802      	ldr	r0, [pc, #8]	; (80016c8 <UART4_IRQHandler+0x10>)
 80016be:	f003 fe2b 	bl	8005318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	200005d4 	.word	0x200005d4

080016cc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <ITM_SendChar+0x48>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a0e      	ldr	r2, [pc, #56]	; (8001714 <ITM_SendChar+0x48>)
 80016dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80016e2:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <ITM_SendChar+0x4c>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <ITM_SendChar+0x4c>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80016ee:	bf00      	nop
 80016f0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d0f8      	beq.n	80016f0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80016fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001702:	79fb      	ldrb	r3, [r7, #7]
 8001704:	6013      	str	r3, [r2, #0]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
 8001712:	bf00      	nop
 8001714:	e000edfc 	.word	0xe000edfc
 8001718:	e0000e00 	.word	0xe0000e00

0800171c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	60f8      	str	r0, [r7, #12]
 8001724:	60b9      	str	r1, [r7, #8]
 8001726:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	e00a      	b.n	8001744 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800172e:	f3af 8000 	nop.w
 8001732:	4601      	mov	r1, r0
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	1c5a      	adds	r2, r3, #1
 8001738:	60ba      	str	r2, [r7, #8]
 800173a:	b2ca      	uxtb	r2, r1
 800173c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	3301      	adds	r3, #1
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	429a      	cmp	r2, r3
 800174a:	dbf0      	blt.n	800172e <_read+0x12>
	}

return len;
 800174c:	687b      	ldr	r3, [r7, #4]
}
 800174e:	4618      	mov	r0, r3
 8001750:	3718      	adds	r7, #24
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}

08001756 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b086      	sub	sp, #24
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	2300      	movs	r3, #0
 8001764:	617b      	str	r3, [r7, #20]
 8001766:	e009      	b.n	800177c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	60ba      	str	r2, [r7, #8]
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff ffab 	bl	80016cc <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	3301      	adds	r3, #1
 800177a:	617b      	str	r3, [r7, #20]
 800177c:	697a      	ldr	r2, [r7, #20]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	429a      	cmp	r2, r3
 8001782:	dbf1      	blt.n	8001768 <_write+0x12>
	}
	return len;
 8001784:	687b      	ldr	r3, [r7, #4]
}
 8001786:	4618      	mov	r0, r3
 8001788:	3718      	adds	r7, #24
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <_close>:

int _close(int file)
{
 800178e:	b480      	push	{r7}
 8001790:	b083      	sub	sp, #12
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
	return -1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
 80017ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017b6:	605a      	str	r2, [r3, #4]
	return 0;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	370c      	adds	r7, #12
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <_isatty>:

int _isatty(int file)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
	return 1;
 80017ce:	2301      	movs	r3, #1
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
	return 0;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3714      	adds	r7, #20
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
	...

080017f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001800:	4a14      	ldr	r2, [pc, #80]	; (8001854 <_sbrk+0x5c>)
 8001802:	4b15      	ldr	r3, [pc, #84]	; (8001858 <_sbrk+0x60>)
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800180c:	4b13      	ldr	r3, [pc, #76]	; (800185c <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <_sbrk+0x64>)
 8001816:	4a12      	ldr	r2, [pc, #72]	; (8001860 <_sbrk+0x68>)
 8001818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800181a:	4b10      	ldr	r3, [pc, #64]	; (800185c <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	429a      	cmp	r2, r3
 8001826:	d207      	bcs.n	8001838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001828:	f004 ff8a 	bl	8006740 <__errno>
 800182c:	4603      	mov	r3, r0
 800182e:	220c      	movs	r2, #12
 8001830:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001832:	f04f 33ff 	mov.w	r3, #4294967295
 8001836:	e009      	b.n	800184c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001838:	4b08      	ldr	r3, [pc, #32]	; (800185c <_sbrk+0x64>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183e:	4b07      	ldr	r3, [pc, #28]	; (800185c <_sbrk+0x64>)
 8001840:	681a      	ldr	r2, [r3, #0]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	4a05      	ldr	r2, [pc, #20]	; (800185c <_sbrk+0x64>)
 8001848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800184a:	68fb      	ldr	r3, [r7, #12]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	20018000 	.word	0x20018000
 8001858:	00000400 	.word	0x00000400
 800185c:	20000414 	.word	0x20000414
 8001860:	20000748 	.word	0x20000748

08001864 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001868:	4b06      	ldr	r3, [pc, #24]	; (8001884 <SystemInit+0x20>)
 800186a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <SystemInit+0x20>)
 8001870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001878:	bf00      	nop
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018c0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800188c:	f7ff ffea 	bl	8001864 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001890:	480c      	ldr	r0, [pc, #48]	; (80018c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001892:	490d      	ldr	r1, [pc, #52]	; (80018c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001894:	4a0d      	ldr	r2, [pc, #52]	; (80018cc <LoopForever+0xe>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001898:	e002      	b.n	80018a0 <LoopCopyDataInit>

0800189a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800189a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800189c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189e:	3304      	adds	r3, #4

080018a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a4:	d3f9      	bcc.n	800189a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a6:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a8:	4c0a      	ldr	r4, [pc, #40]	; (80018d4 <LoopForever+0x16>)
  movs r3, #0
 80018aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018ac:	e001      	b.n	80018b2 <LoopFillZerobss>

080018ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b0:	3204      	adds	r2, #4

080018b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b4:	d3fb      	bcc.n	80018ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b6:	f004 ff49 	bl	800674c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ba:	f7ff f841 	bl	8000940 <main>

080018be <LoopForever>:

LoopForever:
    b LoopForever
 80018be:	e7fe      	b.n	80018be <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80018cc:	08007c2c 	.word	0x08007c2c
  ldr r2, =_sbss
 80018d0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80018d4:	20000744 	.word	0x20000744

080018d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_2_IRQHandler>
	...

080018dc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08a      	sub	sp, #40	; 0x28
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018e4:	4b27      	ldr	r3, [pc, #156]	; (8001984 <I2Cx_MspInit+0xa8>)
 80018e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e8:	4a26      	ldr	r2, [pc, #152]	; (8001984 <I2Cx_MspInit+0xa8>)
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <I2Cx_MspInit+0xa8>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	613b      	str	r3, [r7, #16]
 80018fa:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80018fc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001900:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001902:	2312      	movs	r3, #18
 8001904:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001906:	2301      	movs	r3, #1
 8001908:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800190e:	2304      	movs	r3, #4
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	481b      	ldr	r0, [pc, #108]	; (8001988 <I2Cx_MspInit+0xac>)
 800191a:	f000 ffa3 	bl	8002864 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800191e:	f107 0314 	add.w	r3, r7, #20
 8001922:	4619      	mov	r1, r3
 8001924:	4818      	ldr	r0, [pc, #96]	; (8001988 <I2Cx_MspInit+0xac>)
 8001926:	f000 ff9d 	bl	8002864 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <I2Cx_MspInit+0xa8>)
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <I2Cx_MspInit+0xa8>)
 8001930:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001934:	6593      	str	r3, [r2, #88]	; 0x58
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <I2Cx_MspInit+0xa8>)
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001942:	4b10      	ldr	r3, [pc, #64]	; (8001984 <I2Cx_MspInit+0xa8>)
 8001944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001946:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <I2Cx_MspInit+0xa8>)
 8001948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800194c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800194e:	4b0d      	ldr	r3, [pc, #52]	; (8001984 <I2Cx_MspInit+0xa8>)
 8001950:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001952:	4a0c      	ldr	r2, [pc, #48]	; (8001984 <I2Cx_MspInit+0xa8>)
 8001954:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001958:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	210f      	movs	r1, #15
 800195e:	2021      	movs	r0, #33	; 0x21
 8001960:	f000 fecb 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001964:	2021      	movs	r0, #33	; 0x21
 8001966:	f000 fee4 	bl	8002732 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800196a:	2200      	movs	r2, #0
 800196c:	210f      	movs	r1, #15
 800196e:	2022      	movs	r0, #34	; 0x22
 8001970:	f000 fec3 	bl	80026fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001974:	2022      	movs	r0, #34	; 0x22
 8001976:	f000 fedc 	bl	8002732 <HAL_NVIC_EnableIRQ>
}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40021000 	.word	0x40021000
 8001988:	48000400 	.word	0x48000400

0800198c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	4a12      	ldr	r2, [pc, #72]	; (80019e0 <I2Cx_Init+0x54>)
 8001998:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a11      	ldr	r2, [pc, #68]	; (80019e4 <I2Cx_Init+0x58>)
 800199e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2201      	movs	r2, #1
 80019aa:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff89 	bl	80018dc <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f001 fa23 	bl	8002e16 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80019d0:	2100      	movs	r1, #0
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f001 ffb2 	bl	800393c <HAL_I2CEx_ConfigAnalogFilter>
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40005800 	.word	0x40005800
 80019e4:	00702681 	.word	0x00702681

080019e8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af04      	add	r7, sp, #16
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	4608      	mov	r0, r1
 80019f2:	4611      	mov	r1, r2
 80019f4:	461a      	mov	r2, r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	72fb      	strb	r3, [r7, #11]
 80019fa:	460b      	mov	r3, r1
 80019fc:	813b      	strh	r3, [r7, #8]
 80019fe:	4613      	mov	r3, r2
 8001a00:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a02:	2300      	movs	r3, #0
 8001a04:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	b299      	uxth	r1, r3
 8001a0a:	88f8      	ldrh	r0, [r7, #6]
 8001a0c:	893a      	ldrh	r2, [r7, #8]
 8001a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a12:	9302      	str	r3, [sp, #8]
 8001a14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	68f8      	ldr	r0, [r7, #12]
 8001a20:	f001 fbcc 	bl	80031bc <HAL_I2C_Mem_Read>
 8001a24:	4603      	mov	r3, r0
 8001a26:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
 8001a30:	4619      	mov	r1, r3
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f000 f832 	bl	8001a9c <I2Cx_Error>
  }
  return status;
 8001a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3718      	adds	r7, #24
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}

08001a42 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a42:	b580      	push	{r7, lr}
 8001a44:	b08a      	sub	sp, #40	; 0x28
 8001a46:	af04      	add	r7, sp, #16
 8001a48:	60f8      	str	r0, [r7, #12]
 8001a4a:	4608      	mov	r0, r1
 8001a4c:	4611      	mov	r1, r2
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	72fb      	strb	r3, [r7, #11]
 8001a54:	460b      	mov	r3, r1
 8001a56:	813b      	strh	r3, [r7, #8]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a60:	7afb      	ldrb	r3, [r7, #11]
 8001a62:	b299      	uxth	r1, r3
 8001a64:	88f8      	ldrh	r0, [r7, #6]
 8001a66:	893a      	ldrh	r2, [r7, #8]
 8001a68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a6c:	9302      	str	r3, [sp, #8]
 8001a6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a70:	9301      	str	r3, [sp, #4]
 8001a72:	6a3b      	ldr	r3, [r7, #32]
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4603      	mov	r3, r0
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f001 fa8b 	bl	8002f94 <HAL_I2C_Mem_Write>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a82:	7dfb      	ldrb	r3, [r7, #23]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d004      	beq.n	8001a92 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001a88:	7afb      	ldrb	r3, [r7, #11]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f000 f805 	bl	8001a9c <I2Cx_Error>
  }
  return status;
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3718      	adds	r7, #24
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	460b      	mov	r3, r1
 8001aa6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f001 fa43 	bl	8002f34 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ff6c 	bl	800198c <I2Cx_Init>
}
 8001ab4:	bf00      	nop
 8001ab6:	3708      	adds	r7, #8
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <SENSOR_IO_Init+0x10>)
 8001ac2:	f7ff ff63 	bl	800198c <I2Cx_Init>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	200006dc 	.word	0x200006dc

08001ad0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af02      	add	r7, sp, #8
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
 8001ada:	460b      	mov	r3, r1
 8001adc:	71bb      	strb	r3, [r7, #6]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001ae2:	79bb      	ldrb	r3, [r7, #6]
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	79f9      	ldrb	r1, [r7, #7]
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9301      	str	r3, [sp, #4]
 8001aec:	1d7b      	adds	r3, r7, #5
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2301      	movs	r3, #1
 8001af2:	4803      	ldr	r0, [pc, #12]	; (8001b00 <SENSOR_IO_Write+0x30>)
 8001af4:	f7ff ffa5 	bl	8001a42 <I2Cx_WriteMultiple>
}
 8001af8:	bf00      	nop
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200006dc 	.word	0x200006dc

08001b04 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af02      	add	r7, sp, #8
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	460a      	mov	r2, r1
 8001b0e:	71fb      	strb	r3, [r7, #7]
 8001b10:	4613      	mov	r3, r2
 8001b12:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001b18:	79bb      	ldrb	r3, [r7, #6]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	79f9      	ldrb	r1, [r7, #7]
 8001b1e:	2301      	movs	r3, #1
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	f107 030f 	add.w	r3, r7, #15
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2301      	movs	r3, #1
 8001b2a:	4804      	ldr	r0, [pc, #16]	; (8001b3c <SENSOR_IO_Read+0x38>)
 8001b2c:	f7ff ff5c 	bl	80019e8 <I2Cx_ReadMultiple>

  return read_value;
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	200006dc 	.word	0x200006dc

08001b40 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b084      	sub	sp, #16
 8001b44:	af02      	add	r7, sp, #8
 8001b46:	603a      	str	r2, [r7, #0]
 8001b48:	461a      	mov	r2, r3
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
 8001b4e:	460b      	mov	r3, r1
 8001b50:	71bb      	strb	r3, [r7, #6]
 8001b52:	4613      	mov	r3, r2
 8001b54:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001b56:	79bb      	ldrb	r3, [r7, #6]
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	79f9      	ldrb	r1, [r7, #7]
 8001b5c:	88bb      	ldrh	r3, [r7, #4]
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	4804      	ldr	r0, [pc, #16]	; (8001b78 <SENSOR_IO_ReadMultiple+0x38>)
 8001b68:	f7ff ff3e 	bl	80019e8 <I2Cx_ReadMultiple>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	b29b      	uxth	r3, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	200006dc 	.word	0x200006dc

08001b7c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8001b82:	2300      	movs	r3, #0
 8001b84:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8001b86:	2300      	movs	r3, #0
 8001b88:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8001b8a:	4b19      	ldr	r3, [pc, #100]	; (8001bf0 <BSP_ACCELERO_Init+0x74>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	4798      	blx	r3
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b6a      	cmp	r3, #106	; 0x6a
 8001b94:	d002      	beq.n	8001b9c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	73fb      	strb	r3, [r7, #15]
 8001b9a:	e024      	b.n	8001be6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8001b9c:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <BSP_ACCELERO_Init+0x78>)
 8001b9e:	4a14      	ldr	r2, [pc, #80]	; (8001bf0 <BSP_ACCELERO_Init+0x74>)
 8001ba0:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8001ba2:	2330      	movs	r3, #48	; 0x30
 8001ba4:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8001baa:	2300      	movs	r3, #0
 8001bac:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8001bae:	2340      	movs	r3, #64	; 0x40
 8001bb0:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8001bba:	797a      	ldrb	r2, [r7, #5]
 8001bbc:	7abb      	ldrb	r3, [r7, #10]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8001bc4:	7a3b      	ldrb	r3, [r7, #8]
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	021b      	lsls	r3, r3, #8
 8001bce:	b21a      	sxth	r2, r3
 8001bd0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8001bda:	4b06      	ldr	r3, [pc, #24]	; (8001bf4 <BSP_ACCELERO_Init+0x78>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	89ba      	ldrh	r2, [r7, #12]
 8001be2:	4610      	mov	r0, r2
 8001be4:	4798      	blx	r3
  }  

  return ret;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	200000e8 	.word	0x200000e8
 8001bf4:	20000418 	.word	0x20000418

08001bf8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d009      	beq.n	8001c1c <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8001c08:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d004      	beq.n	8001c1c <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	4798      	blx	r3
    }
  }
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20000418 	.word	0x20000418

08001c28 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <BSP_HSENSOR_Init+0x38>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	20be      	movs	r0, #190	; 0xbe
 8001c34:	4798      	blx	r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	2bbc      	cmp	r3, #188	; 0xbc
 8001c3a:	d002      	beq.n	8001c42 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	e009      	b.n	8001c56 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8001c42:	4b08      	ldr	r3, [pc, #32]	; (8001c64 <BSP_HSENSOR_Init+0x3c>)
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <BSP_HSENSOR_Init+0x38>)
 8001c46:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <BSP_HSENSOR_Init+0x3c>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	20be      	movs	r0, #190	; 0xbe
 8001c50:	4798      	blx	r3
    ret = HSENSOR_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001c56:	687b      	ldr	r3, [r7, #4]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	200000c0 	.word	0x200000c0
 8001c64:	2000041c 	.word	0x2000041c

08001c68 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <BSP_HSENSOR_ReadHumidity+0x18>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	689b      	ldr	r3, [r3, #8]
 8001c72:	20be      	movs	r0, #190	; 0xbe
 8001c74:	4798      	blx	r3
 8001c76:	eef0 7a40 	vmov.f32	s15, s0
}
 8001c7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000041c 	.word	0x2000041c

08001c84 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <BSP_PSENSOR_Init+0x38>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	20ba      	movs	r0, #186	; 0xba
 8001c90:	4798      	blx	r3
 8001c92:	4603      	mov	r3, r0
 8001c94:	2bb1      	cmp	r3, #177	; 0xb1
 8001c96:	d002      	beq.n	8001c9e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
 8001c9c:	e009      	b.n	8001cb2 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <BSP_PSENSOR_Init+0x3c>)
 8001ca0:	4a06      	ldr	r2, [pc, #24]	; (8001cbc <BSP_PSENSOR_Init+0x38>)
 8001ca2:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8001ca4:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <BSP_PSENSOR_Init+0x3c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	20ba      	movs	r0, #186	; 0xba
 8001cac:	4798      	blx	r3
    ret = PSENSOR_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8001cb2:	687b      	ldr	r3, [r7, #4]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	200000dc 	.word	0x200000dc
 8001cc0:	20000420 	.word	0x20000420

08001cc4 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <BSP_PSENSOR_ReadPressure+0x18>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	20ba      	movs	r0, #186	; 0xba
 8001cd0:	4798      	blx	r3
 8001cd2:	eef0 7a40 	vmov.f32	s15, s0
}
 8001cd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000420 	.word	0x20000420

08001ce0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <BSP_TSENSOR_Init+0x30>)
 8001cec:	4a09      	ldr	r2, [pc, #36]	; (8001d14 <BSP_TSENSOR_Init+0x34>)
 8001cee:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001cf0:	f7ff fee4 	bl	8001abc <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <BSP_TSENSOR_Init+0x30>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	20be      	movs	r0, #190	; 0xbe
 8001cfe:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001d00:	2300      	movs	r3, #0
 8001d02:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001d04:	79fb      	ldrb	r3, [r7, #7]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3708      	adds	r7, #8
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000424 	.word	0x20000424
 8001d14:	200000cc 	.word	0x200000cc

08001d18 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001d1c:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <BSP_TSENSOR_ReadTemp+0x18>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	68db      	ldr	r3, [r3, #12]
 8001d22:	20be      	movs	r0, #190	; 0xbe
 8001d24:	4798      	blx	r3
 8001d26:	eef0 7a40 	vmov.f32	s15, s0
}
 8001d2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000424 	.word	0x20000424

08001d34 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001d3e:	88fb      	ldrh	r3, [r7, #6]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2120      	movs	r1, #32
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fedd 	bl	8001b04 <SENSOR_IO_Read>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001d4e:	7bfb      	ldrb	r3, [r7, #15]
 8001d50:	f023 0304 	bic.w	r3, r3, #4
 8001d54:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001d56:	7bfb      	ldrb	r3, [r7, #15]
 8001d58:	f043 0304 	orr.w	r3, r3, #4
 8001d5c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	f023 0303 	bic.w	r3, r3, #3
 8001d64:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001d66:	7bfb      	ldrb	r3, [r7, #15]
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001d6e:	7bfb      	ldrb	r3, [r7, #15]
 8001d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d74:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001d76:	88fb      	ldrh	r3, [r7, #6]
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	7bfa      	ldrb	r2, [r7, #15]
 8001d7c:	2120      	movs	r1, #32
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff fea6 	bl	8001ad0 <SENSOR_IO_Write>
}
 8001d84:	bf00      	nop
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8001d96:	2300      	movs	r3, #0
 8001d98:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8001d9a:	f7ff fe8f 	bl	8001abc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8001d9e:	88fb      	ldrh	r3, [r7, #6]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	210f      	movs	r1, #15
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff fead 	bl	8001b04 <SENSOR_IO_Read>
 8001daa:	4603      	mov	r3, r0
 8001dac:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8001dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	b2d8      	uxtb	r0, r3
 8001dc6:	f107 020c 	add.w	r2, r7, #12
 8001dca:	2302      	movs	r3, #2
 8001dcc:	21b0      	movs	r1, #176	; 0xb0
 8001dce:	f7ff feb7 	bl	8001b40 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8001dd2:	7b3b      	ldrb	r3, [r7, #12]
 8001dd4:	085b      	lsrs	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8001dda:	7b7b      	ldrb	r3, [r7, #13]
 8001ddc:	085b      	lsrs	r3, r3, #1
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	b2d8      	uxtb	r0, r3
 8001de6:	f107 020c 	add.w	r2, r7, #12
 8001dea:	2302      	movs	r3, #2
 8001dec:	21b6      	movs	r1, #182	; 0xb6
 8001dee:	f7ff fea7 	bl	8001b40 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001df2:	7b7b      	ldrb	r3, [r7, #13]
 8001df4:	021b      	lsls	r3, r3, #8
 8001df6:	b21a      	sxth	r2, r3
 8001df8:	7b3b      	ldrb	r3, [r7, #12]
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8001e00:	88fb      	ldrh	r3, [r7, #6]
 8001e02:	b2d8      	uxtb	r0, r3
 8001e04:	f107 020c 	add.w	r2, r7, #12
 8001e08:	2302      	movs	r3, #2
 8001e0a:	21ba      	movs	r1, #186	; 0xba
 8001e0c:	f7ff fe98 	bl	8001b40 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e10:	7b7b      	ldrb	r3, [r7, #13]
 8001e12:	021b      	lsls	r3, r3, #8
 8001e14:	b21a      	sxth	r2, r3
 8001e16:	7b3b      	ldrb	r3, [r7, #12]
 8001e18:	b21b      	sxth	r3, r3
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8001e1e:	88fb      	ldrh	r3, [r7, #6]
 8001e20:	b2d8      	uxtb	r0, r3
 8001e22:	f107 020c 	add.w	r2, r7, #12
 8001e26:	2302      	movs	r3, #2
 8001e28:	21a8      	movs	r1, #168	; 0xa8
 8001e2a:	f7ff fe89 	bl	8001b40 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001e2e:	7b7b      	ldrb	r3, [r7, #13]
 8001e30:	021b      	lsls	r3, r3, #8
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	7b3b      	ldrb	r3, [r7, #12]
 8001e36:	b21b      	sxth	r3, r3
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8001e3c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001e40:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	ee07 3a90 	vmov	s15, r3
 8001e4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e4e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001e52:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	ee07 3a90 	vmov	s15, r3
 8001e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e60:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001e64:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001e68:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	ee07 3a90 	vmov	s15, r3
 8001e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001e7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001e7e:	ee07 3a90 	vmov	s15, r3
 8001e82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8001e8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e9a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8001e9e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ea2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ee8 <HTS221_H_ReadHumidity+0x130>
 8001ea6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eae:	dd01      	ble.n	8001eb4 <HTS221_H_ReadHumidity+0xfc>
 8001eb0:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <HTS221_H_ReadHumidity+0x134>)
 8001eb2:	e00a      	b.n	8001eca <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8001eb4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d502      	bpl.n	8001ec8 <HTS221_H_ReadHumidity+0x110>
 8001ec2:	f04f 0300 	mov.w	r3, #0
 8001ec6:	e000      	b.n	8001eca <HTS221_H_ReadHumidity+0x112>
 8001ec8:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 8001eca:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8001ecc:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ed0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ed4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001ed8:	eef0 7a66 	vmov.f32	s15, s13
}
 8001edc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee0:	3720      	adds	r7, #32
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	447a0000 	.word	0x447a0000
 8001eec:	447a0000 	.word	0x447a0000

08001ef0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	6039      	str	r1, [r7, #0]
 8001efa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2120      	movs	r1, #32
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fdfe 	bl	8001b04 <SENSOR_IO_Read>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001f0c:	7bfb      	ldrb	r3, [r7, #15]
 8001f0e:	f023 0304 	bic.w	r3, r3, #4
 8001f12:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001f14:	7bfb      	ldrb	r3, [r7, #15]
 8001f16:	f043 0304 	orr.w	r3, r3, #4
 8001f1a:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001f1c:	7bfb      	ldrb	r3, [r7, #15]
 8001f1e:	f023 0303 	bic.w	r3, r3, #3
 8001f22:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f32:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	2120      	movs	r1, #32
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fdc7 	bl	8001ad0 <SENSOR_IO_Write>
}
 8001f42:	bf00      	nop
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b088      	sub	sp, #32
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	4603      	mov	r3, r0
 8001f52:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001f54:	88fb      	ldrh	r3, [r7, #6]
 8001f56:	b2d8      	uxtb	r0, r3
 8001f58:	f107 0208 	add.w	r2, r7, #8
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	21b2      	movs	r1, #178	; 0xb2
 8001f60:	f7ff fdee 	bl	8001b40 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	2135      	movs	r1, #53	; 0x35
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff fdca 	bl	8001b04 <SENSOR_IO_Read>
 8001f70:	4603      	mov	r3, r0
 8001f72:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001f74:	7ffb      	ldrb	r3, [r7, #31]
 8001f76:	021b      	lsls	r3, r3, #8
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f7e:	b21a      	sxth	r2, r3
 8001f80:	7a3b      	ldrb	r3, [r7, #8]
 8001f82:	b21b      	sxth	r3, r3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001f88:	7ffb      	ldrb	r3, [r7, #31]
 8001f8a:	019b      	lsls	r3, r3, #6
 8001f8c:	b21b      	sxth	r3, r3
 8001f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	7a7b      	ldrb	r3, [r7, #9]
 8001f96:	b21b      	sxth	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001f9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fa0:	10db      	asrs	r3, r3, #3
 8001fa2:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001fa4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001fa8:	10db      	asrs	r3, r3, #3
 8001faa:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001fac:	88fb      	ldrh	r3, [r7, #6]
 8001fae:	b2d8      	uxtb	r0, r3
 8001fb0:	f107 0208 	add.w	r2, r7, #8
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	21bc      	movs	r1, #188	; 0xbc
 8001fb8:	f7ff fdc2 	bl	8001b40 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fbc:	7a7b      	ldrb	r3, [r7, #9]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b21a      	sxth	r2, r3
 8001fc2:	7a3b      	ldrb	r3, [r7, #8]
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001fca:	7afb      	ldrb	r3, [r7, #11]
 8001fcc:	021b      	lsls	r3, r3, #8
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	7abb      	ldrb	r3, [r7, #10]
 8001fd2:	b21b      	sxth	r3, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001fd8:	88fb      	ldrh	r3, [r7, #6]
 8001fda:	b2d8      	uxtb	r0, r3
 8001fdc:	f107 0208 	add.w	r2, r7, #8
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	21aa      	movs	r1, #170	; 0xaa
 8001fe4:	f7ff fdac 	bl	8001b40 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001fe8:	7a7b      	ldrb	r3, [r7, #9]
 8001fea:	021b      	lsls	r3, r3, #8
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	7a3b      	ldrb	r3, [r7, #8]
 8001ff0:	b21b      	sxth	r3, r3
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001ff6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001ffa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002008:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800200c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	ee07 3a90 	vmov	s15, r3
 8002016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800201a:	ee67 6a27 	vmul.f32	s13, s14, s15
 800201e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002022:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002030:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002034:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002038:	ee07 3a90 	vmov	s15, r3
 800203c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002040:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002044:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	ee07 3a90 	vmov	s15, r3
}
 800204e:	eeb0 0a67 	vmov.f32	s0, s15
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b082      	sub	sp, #8
 800205c:	af00      	add	r7, sp, #0
 800205e:	4603      	mov	r3, r0
 8002060:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002062:	88fb      	ldrh	r3, [r7, #6]
 8002064:	4618      	mov	r0, r3
 8002066:	f000 f87b 	bl	8002160 <LPS22HB_Init>
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002072:	b580      	push	{r7, lr}
 8002074:	b084      	sub	sp, #16
 8002076:	af00      	add	r7, sp, #0
 8002078:	4603      	mov	r3, r0
 800207a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002080:	f7ff fd1c 	bl	8001abc <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	210f      	movs	r1, #15
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fd3a 	bl	8001b04 <SENSOR_IO_Read>
 8002090:	4603      	mov	r3, r0
 8002092:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b087      	sub	sp, #28
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	4603      	mov	r3, r0
 80020a8:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	74fb      	strb	r3, [r7, #19]
 80020b2:	e013      	b.n	80020dc <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 80020b4:	88fb      	ldrh	r3, [r7, #6]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	7cfb      	ldrb	r3, [r7, #19]
 80020ba:	3328      	adds	r3, #40	; 0x28
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	7cfc      	ldrb	r4, [r7, #19]
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f7ff fd1e 	bl	8001b04 <SENSOR_IO_Read>
 80020c8:	4603      	mov	r3, r0
 80020ca:	461a      	mov	r2, r3
 80020cc:	f107 0318 	add.w	r3, r7, #24
 80020d0:	4423      	add	r3, r4
 80020d2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80020d6:	7cfb      	ldrb	r3, [r7, #19]
 80020d8:	3301      	adds	r3, #1
 80020da:	74fb      	strb	r3, [r7, #19]
 80020dc:	7cfb      	ldrb	r3, [r7, #19]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d9e8      	bls.n	80020b4 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80020e2:	2300      	movs	r3, #0
 80020e4:	74fb      	strb	r3, [r7, #19]
 80020e6:	e010      	b.n	800210a <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80020e8:	7cfb      	ldrb	r3, [r7, #19]
 80020ea:	f107 0218 	add.w	r2, r7, #24
 80020ee:	4413      	add	r3, r2
 80020f0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80020f4:	461a      	mov	r2, r3
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	697a      	ldr	r2, [r7, #20]
 8002100:	4313      	orrs	r3, r2
 8002102:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	3301      	adds	r3, #1
 8002108:	74fb      	strb	r3, [r7, #19]
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	2b02      	cmp	r3, #2
 800210e:	d9eb      	bls.n	80020e8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d003      	beq.n	8002122 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002120:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	2264      	movs	r2, #100	; 0x64
 800212a:	fb02 f303 	mul.w	r3, r2, r3
 800212e:	2b00      	cmp	r3, #0
 8002130:	da01      	bge.n	8002136 <LPS22HB_P_ReadPressure+0x96>
 8002132:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002136:	131b      	asrs	r3, r3, #12
 8002138:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002144:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800215c <LPS22HB_P_ReadPressure+0xbc>
 8002148:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800214c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002150:	eeb0 0a67 	vmov.f32	s0, s15
 8002154:	371c      	adds	r7, #28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd90      	pop	{r4, r7, pc}
 800215a:	bf00      	nop
 800215c:	42c80000 	.word	0x42c80000

08002160 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800216a:	88fb      	ldrh	r3, [r7, #6]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	211a      	movs	r1, #26
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff fcc7 	bl	8001b04 <SENSOR_IO_Read>
 8002176:	4603      	mov	r3, r0
 8002178:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800217a:	7bfb      	ldrb	r3, [r7, #15]
 800217c:	f023 0301 	bic.w	r3, r3, #1
 8002180:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002182:	7bfb      	ldrb	r3, [r7, #15]
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	7bfa      	ldrb	r2, [r7, #15]
 8002190:	211a      	movs	r1, #26
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fc9c 	bl	8001ad0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002198:	88fb      	ldrh	r3, [r7, #6]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	2110      	movs	r1, #16
 800219e:	4618      	mov	r0, r3
 80021a0:	f7ff fcb0 	bl	8001b04 <SENSOR_IO_Read>
 80021a4:	4603      	mov	r3, r0
 80021a6:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ae:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 80021b0:	7bfb      	ldrb	r3, [r7, #15]
 80021b2:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80021b6:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	f023 0302 	bic.w	r3, r3, #2
 80021be:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	f043 0302 	orr.w	r3, r3, #2
 80021c6:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	2110      	movs	r1, #16
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff fc7d 	bl	8001ad0 <SENSOR_IO_Write>
}  
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	4603      	mov	r3, r0
 80021e6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80021e8:	2300      	movs	r3, #0
 80021ea:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80021ec:	2110      	movs	r1, #16
 80021ee:	20d4      	movs	r0, #212	; 0xd4
 80021f0:	f7ff fc88 	bl	8001b04 <SENSOR_IO_Read>
 80021f4:	4603      	mov	r3, r0
 80021f6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80021f8:	88fb      	ldrh	r3, [r7, #6]
 80021fa:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80021fc:	7bbb      	ldrb	r3, [r7, #14]
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8002204:	7bba      	ldrb	r2, [r7, #14]
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	4313      	orrs	r3, r2
 800220a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800220c:	7bbb      	ldrb	r3, [r7, #14]
 800220e:	461a      	mov	r2, r3
 8002210:	2110      	movs	r1, #16
 8002212:	20d4      	movs	r0, #212	; 0xd4
 8002214:	f7ff fc5c 	bl	8001ad0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8002218:	2112      	movs	r1, #18
 800221a:	20d4      	movs	r0, #212	; 0xd4
 800221c:	f7ff fc72 	bl	8001b04 <SENSOR_IO_Read>
 8002220:	4603      	mov	r3, r0
 8002222:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8002224:	88fb      	ldrh	r3, [r7, #6]
 8002226:	0a1b      	lsrs	r3, r3, #8
 8002228:	b29b      	uxth	r3, r3
 800222a:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800222c:	7bbb      	ldrb	r3, [r7, #14]
 800222e:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002232:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002234:	7bba      	ldrb	r2, [r7, #14]
 8002236:	7bfb      	ldrb	r3, [r7, #15]
 8002238:	4313      	orrs	r3, r2
 800223a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800223c:	7bbb      	ldrb	r3, [r7, #14]
 800223e:	461a      	mov	r2, r3
 8002240:	2112      	movs	r1, #18
 8002242:	20d4      	movs	r0, #212	; 0xd4
 8002244:	f7ff fc44 	bl	8001ad0 <SENSOR_IO_Write>
}
 8002248:	bf00      	nop
 800224a:	3710      	adds	r7, #16
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}

08002250 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002256:	2300      	movs	r3, #0
 8002258:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800225a:	2110      	movs	r1, #16
 800225c:	20d4      	movs	r0, #212	; 0xd4
 800225e:	f7ff fc51 	bl	8001b04 <SENSOR_IO_Read>
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800226e:	79fb      	ldrb	r3, [r7, #7]
 8002270:	461a      	mov	r2, r3
 8002272:	2110      	movs	r1, #16
 8002274:	20d4      	movs	r0, #212	; 0xd4
 8002276:	f7ff fc2b 	bl	8001ad0 <SENSOR_IO_Write>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002282:	b580      	push	{r7, lr}
 8002284:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002286:	f7ff fc19 	bl	8001abc <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800228a:	210f      	movs	r1, #15
 800228c:	20d4      	movs	r0, #212	; 0xd4
 800228e:	f7ff fc39 	bl	8001b04 <SENSOR_IO_Read>
 8002292:	4603      	mov	r3, r0
}
 8002294:	4618      	mov	r0, r3
 8002296:	bd80      	pop	{r7, pc}

08002298 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80022a2:	2300      	movs	r3, #0
 80022a4:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80022a6:	2115      	movs	r1, #21
 80022a8:	20d4      	movs	r0, #212	; 0xd4
 80022aa:	f7ff fc2b 	bl	8001b04 <SENSOR_IO_Read>
 80022ae:	4603      	mov	r3, r0
 80022b0:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80022b2:	7bfb      	ldrb	r3, [r7, #15]
 80022b4:	f023 0310 	bic.w	r3, r3, #16
 80022b8:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	f043 0310 	orr.w	r3, r3, #16
 80022c6:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80022c8:	7bfb      	ldrb	r3, [r7, #15]
 80022ca:	461a      	mov	r2, r3
 80022cc:	2115      	movs	r1, #21
 80022ce:	20d4      	movs	r0, #212	; 0xd4
 80022d0:	f7ff fbfe 	bl	8001ad0 <SENSOR_IO_Write>
}
 80022d4:	bf00      	nop
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80022ec:	f04f 0300 	mov.w	r3, #0
 80022f0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80022f2:	2110      	movs	r1, #16
 80022f4:	20d4      	movs	r0, #212	; 0xd4
 80022f6:	f7ff fc05 	bl	8001b04 <SENSOR_IO_Read>
 80022fa:	4603      	mov	r3, r0
 80022fc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80022fe:	f107 0208 	add.w	r2, r7, #8
 8002302:	2306      	movs	r3, #6
 8002304:	2128      	movs	r1, #40	; 0x28
 8002306:	20d4      	movs	r0, #212	; 0xd4
 8002308:	f7ff fc1a 	bl	8001b40 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800230c:	2300      	movs	r3, #0
 800230e:	77fb      	strb	r3, [r7, #31]
 8002310:	e01f      	b.n	8002352 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8002312:	7ffb      	ldrb	r3, [r7, #31]
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	3301      	adds	r3, #1
 8002318:	f107 0220 	add.w	r2, r7, #32
 800231c:	4413      	add	r3, r2
 800231e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002322:	b29b      	uxth	r3, r3
 8002324:	021b      	lsls	r3, r3, #8
 8002326:	b29a      	uxth	r2, r3
 8002328:	7ffb      	ldrb	r3, [r7, #31]
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	f107 0120 	add.w	r1, r7, #32
 8002330:	440b      	add	r3, r1
 8002332:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002336:	b29b      	uxth	r3, r3
 8002338:	4413      	add	r3, r2
 800233a:	b29a      	uxth	r2, r3
 800233c:	7ffb      	ldrb	r3, [r7, #31]
 800233e:	b212      	sxth	r2, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	f107 0120 	add.w	r1, r7, #32
 8002346:	440b      	add	r3, r1
 8002348:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	3301      	adds	r3, #1
 8002350:	77fb      	strb	r3, [r7, #31]
 8002352:	7ffb      	ldrb	r3, [r7, #31]
 8002354:	2b02      	cmp	r3, #2
 8002356:	d9dc      	bls.n	8002312 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002358:	7dfb      	ldrb	r3, [r7, #23]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d828      	bhi.n	80023b4 <LSM6DSL_AccReadXYZ+0xd8>
 8002362:	a201      	add	r2, pc, #4	; (adr r2, 8002368 <LSM6DSL_AccReadXYZ+0x8c>)
 8002364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002368:	0800239d 	.word	0x0800239d
 800236c:	080023b5 	.word	0x080023b5
 8002370:	080023b5 	.word	0x080023b5
 8002374:	080023b5 	.word	0x080023b5
 8002378:	080023af 	.word	0x080023af
 800237c:	080023b5 	.word	0x080023b5
 8002380:	080023b5 	.word	0x080023b5
 8002384:	080023b5 	.word	0x080023b5
 8002388:	080023a3 	.word	0x080023a3
 800238c:	080023b5 	.word	0x080023b5
 8002390:	080023b5 	.word	0x080023b5
 8002394:	080023b5 	.word	0x080023b5
 8002398:	080023a9 	.word	0x080023a9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <LSM6DSL_AccReadXYZ+0x128>)
 800239e:	61bb      	str	r3, [r7, #24]
    break;
 80023a0:	e008      	b.n	80023b4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80023a2:	4b19      	ldr	r3, [pc, #100]	; (8002408 <LSM6DSL_AccReadXYZ+0x12c>)
 80023a4:	61bb      	str	r3, [r7, #24]
    break;
 80023a6:	e005      	b.n	80023b4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80023a8:	4b18      	ldr	r3, [pc, #96]	; (800240c <LSM6DSL_AccReadXYZ+0x130>)
 80023aa:	61bb      	str	r3, [r7, #24]
    break;
 80023ac:	e002      	b.n	80023b4 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80023ae:	4b18      	ldr	r3, [pc, #96]	; (8002410 <LSM6DSL_AccReadXYZ+0x134>)
 80023b0:	61bb      	str	r3, [r7, #24]
    break;    
 80023b2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	77fb      	strb	r3, [r7, #31]
 80023b8:	e01b      	b.n	80023f2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	f107 0220 	add.w	r2, r7, #32
 80023c2:	4413      	add	r3, r2
 80023c4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80023c8:	ee07 3a90 	vmov	s15, r3
 80023cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80023d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d8:	7ffb      	ldrb	r3, [r7, #31]
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	4413      	add	r3, r2
 80023e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e4:	ee17 2a90 	vmov	r2, s15
 80023e8:	b212      	sxth	r2, r2
 80023ea:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80023ec:	7ffb      	ldrb	r3, [r7, #31]
 80023ee:	3301      	adds	r3, #1
 80023f0:	77fb      	strb	r3, [r7, #31]
 80023f2:	7ffb      	ldrb	r3, [r7, #31]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d9e0      	bls.n	80023ba <LSM6DSL_AccReadXYZ+0xde>
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	3d79db23 	.word	0x3d79db23
 8002408:	3df9db23 	.word	0x3df9db23
 800240c:	3e79db23 	.word	0x3e79db23
 8002410:	3ef9db23 	.word	0x3ef9db23

08002414 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800241a:	2300      	movs	r3, #0
 800241c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800241e:	2003      	movs	r0, #3
 8002420:	f000 f960 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002424:	2000      	movs	r0, #0
 8002426:	f000 f80d 	bl	8002444 <HAL_InitTick>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d002      	beq.n	8002436 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	71fb      	strb	r3, [r7, #7]
 8002434:	e001      	b.n	800243a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002436:	f7fe ff89 	bl	800134c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800243a:	79fb      	ldrb	r3, [r7, #7]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3708      	adds	r7, #8
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800244c:	2300      	movs	r3, #0
 800244e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002450:	4b17      	ldr	r3, [pc, #92]	; (80024b0 <HAL_InitTick+0x6c>)
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d023      	beq.n	80024a0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002458:	4b16      	ldr	r3, [pc, #88]	; (80024b4 <HAL_InitTick+0x70>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b14      	ldr	r3, [pc, #80]	; (80024b0 <HAL_InitTick+0x6c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f96d 	bl	800274e <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10f      	bne.n	800249a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2b0f      	cmp	r3, #15
 800247e:	d809      	bhi.n	8002494 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002480:	2200      	movs	r2, #0
 8002482:	6879      	ldr	r1, [r7, #4]
 8002484:	f04f 30ff 	mov.w	r0, #4294967295
 8002488:	f000 f937 	bl	80026fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <HAL_InitTick+0x74>)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e007      	b.n	80024a4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	73fb      	strb	r3, [r7, #15]
 8002498:	e004      	b.n	80024a4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	73fb      	strb	r3, [r7, #15]
 800249e:	e001      	b.n	80024a4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3710      	adds	r7, #16
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	20000120 	.word	0x20000120
 80024b4:	200000bc 	.word	0x200000bc
 80024b8:	2000011c 	.word	0x2000011c

080024bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80024c0:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_IncTick+0x20>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4b06      	ldr	r3, [pc, #24]	; (80024e0 <HAL_IncTick+0x24>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4413      	add	r3, r2
 80024cc:	4a04      	ldr	r2, [pc, #16]	; (80024e0 <HAL_IncTick+0x24>)
 80024ce:	6013      	str	r3, [r2, #0]
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000120 	.word	0x20000120
 80024e0:	20000730 	.word	0x20000730

080024e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return uwTick;
 80024e8:	4b03      	ldr	r3, [pc, #12]	; (80024f8 <HAL_GetTick+0x14>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	20000730 	.word	0x20000730

080024fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002504:	f7ff ffee 	bl	80024e4 <HAL_GetTick>
 8002508:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002514:	d005      	beq.n	8002522 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002516:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <HAL_Delay+0x44>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4413      	add	r3, r2
 8002520:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002522:	bf00      	nop
 8002524:	f7ff ffde 	bl	80024e4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	68fa      	ldr	r2, [r7, #12]
 8002530:	429a      	cmp	r2, r3
 8002532:	d8f7      	bhi.n	8002524 <HAL_Delay+0x28>
  {
  }
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000120 	.word	0x20000120

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff29 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff3e 	bl	800258c <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff8e 	bl	8002638 <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5d 	bl	80025e4 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff31 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffa2 	bl	80026a0 <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002766:	b480      	push	{r7}
 8002768:	b085      	sub	sp, #20
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d008      	beq.n	8002790 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2204      	movs	r2, #4
 8002782:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e022      	b.n	80027d6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 020e 	bic.w	r2, r2, #14
 800279e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f003 021c 	and.w	r2, r3, #28
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027bc:	2101      	movs	r1, #1
 80027be:	fa01 f202 	lsl.w	r2, r1, r2
 80027c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80027d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3714      	adds	r7, #20
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80027e2:	b580      	push	{r7, lr}
 80027e4:	b084      	sub	sp, #16
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ea:	2300      	movs	r3, #0
 80027ec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027f4:	b2db      	uxtb	r3, r3
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	d005      	beq.n	8002806 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2204      	movs	r2, #4
 80027fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	73fb      	strb	r3, [r7, #15]
 8002804:	e029      	b.n	800285a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 020e 	bic.w	r2, r2, #14
 8002814:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f022 0201 	bic.w	r2, r2, #1
 8002824:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282a:	f003 021c 	and.w	r2, r3, #28
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	4798      	blx	r3
    }
  }
  return status;
 800285a:	7bfb      	ldrb	r3, [r7, #15]
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002864:	b480      	push	{r7}
 8002866:	b087      	sub	sp, #28
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800286e:	2300      	movs	r3, #0
 8002870:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002872:	e17f      	b.n	8002b74 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2101      	movs	r1, #1
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	fa01 f303 	lsl.w	r3, r1, r3
 8002880:	4013      	ands	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f000 8171 	beq.w	8002b6e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	f003 0303 	and.w	r3, r3, #3
 8002894:	2b01      	cmp	r3, #1
 8002896:	d005      	beq.n	80028a4 <HAL_GPIO_Init+0x40>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d130      	bne.n	8002906 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	2203      	movs	r2, #3
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	693a      	ldr	r2, [r7, #16]
 80028d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028da:	2201      	movs	r2, #1
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	4013      	ands	r3, r2
 80028e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 0201 	and.w	r2, r3, #1
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	693a      	ldr	r2, [r7, #16]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f003 0303 	and.w	r3, r3, #3
 800290e:	2b03      	cmp	r3, #3
 8002910:	d118      	bne.n	8002944 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002918:	2201      	movs	r2, #1
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	43db      	mvns	r3, r3
 8002922:	693a      	ldr	r2, [r7, #16]
 8002924:	4013      	ands	r3, r2
 8002926:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	08db      	lsrs	r3, r3, #3
 800292e:	f003 0201 	and.w	r2, r3, #1
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f003 0303 	and.w	r3, r3, #3
 800294c:	2b03      	cmp	r3, #3
 800294e:	d017      	beq.n	8002980 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	68db      	ldr	r3, [r3, #12]
 8002954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	2203      	movs	r2, #3
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	693a      	ldr	r2, [r7, #16]
 8002964:	4013      	ands	r3, r2
 8002966:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	4313      	orrs	r3, r2
 8002978:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 0303 	and.w	r3, r3, #3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d123      	bne.n	80029d4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	08da      	lsrs	r2, r3, #3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	3208      	adds	r2, #8
 8002994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0307 	and.w	r3, r3, #7
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	220f      	movs	r2, #15
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	43db      	mvns	r3, r3
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	4013      	ands	r3, r2
 80029ae:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	691a      	ldr	r2, [r3, #16]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	08da      	lsrs	r2, r3, #3
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3208      	adds	r2, #8
 80029ce:	6939      	ldr	r1, [r7, #16]
 80029d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	005b      	lsls	r3, r3, #1
 80029de:	2203      	movs	r2, #3
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	43db      	mvns	r3, r3
 80029e6:	693a      	ldr	r2, [r7, #16]
 80029e8:	4013      	ands	r3, r2
 80029ea:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0203 	and.w	r2, r3, #3
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	693a      	ldr	r2, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	693a      	ldr	r2, [r7, #16]
 8002a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 80ac 	beq.w	8002b6e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a16:	4b5f      	ldr	r3, [pc, #380]	; (8002b94 <HAL_GPIO_Init+0x330>)
 8002a18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a1a:	4a5e      	ldr	r2, [pc, #376]	; (8002b94 <HAL_GPIO_Init+0x330>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6613      	str	r3, [r2, #96]	; 0x60
 8002a22:	4b5c      	ldr	r3, [pc, #368]	; (8002b94 <HAL_GPIO_Init+0x330>)
 8002a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002a2e:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	693a      	ldr	r2, [r7, #16]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002a58:	d025      	beq.n	8002aa6 <HAL_GPIO_Init+0x242>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a4f      	ldr	r2, [pc, #316]	; (8002b9c <HAL_GPIO_Init+0x338>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d01f      	beq.n	8002aa2 <HAL_GPIO_Init+0x23e>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4e      	ldr	r2, [pc, #312]	; (8002ba0 <HAL_GPIO_Init+0x33c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d019      	beq.n	8002a9e <HAL_GPIO_Init+0x23a>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ba4 <HAL_GPIO_Init+0x340>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d013      	beq.n	8002a9a <HAL_GPIO_Init+0x236>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4c      	ldr	r2, [pc, #304]	; (8002ba8 <HAL_GPIO_Init+0x344>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00d      	beq.n	8002a96 <HAL_GPIO_Init+0x232>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4b      	ldr	r2, [pc, #300]	; (8002bac <HAL_GPIO_Init+0x348>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <HAL_GPIO_Init+0x22e>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4a      	ldr	r2, [pc, #296]	; (8002bb0 <HAL_GPIO_Init+0x34c>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_GPIO_Init+0x22a>
 8002a8a:	2306      	movs	r3, #6
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_Init+0x244>
 8002a8e:	2307      	movs	r3, #7
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_Init+0x244>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x244>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x244>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x244>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x244>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x244>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ab8:	4937      	ldr	r1, [pc, #220]	; (8002b98 <HAL_GPIO_Init+0x334>)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002aea:	4a32      	ldr	r2, [pc, #200]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002af0:	4b30      	ldr	r3, [pc, #192]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002b14:	4a27      	ldr	r2, [pc, #156]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002b1a:	4b26      	ldr	r3, [pc, #152]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	4013      	ands	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	4013      	ands	r3, r2
 8002b52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002b60:	693a      	ldr	r2, [r7, #16]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002b68:	4a12      	ldr	r2, [pc, #72]	; (8002bb4 <HAL_GPIO_Init+0x350>)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002b6e:	697b      	ldr	r3, [r7, #20]
 8002b70:	3301      	adds	r3, #1
 8002b72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	f47f ae78 	bne.w	8002874 <HAL_GPIO_Init+0x10>
  }
}
 8002b84:	bf00      	nop
 8002b86:	bf00      	nop
 8002b88:	371c      	adds	r7, #28
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr
 8002b92:	bf00      	nop
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40010000 	.word	0x40010000
 8002b9c:	48000400 	.word	0x48000400
 8002ba0:	48000800 	.word	0x48000800
 8002ba4:	48000c00 	.word	0x48000c00
 8002ba8:	48001000 	.word	0x48001000
 8002bac:	48001400 	.word	0x48001400
 8002bb0:	48001800 	.word	0x48001800
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b087      	sub	sp, #28
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002bc6:	e0cd      	b.n	8002d64 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002bc8:	2201      	movs	r2, #1
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd0:	683a      	ldr	r2, [r7, #0]
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80c0 	beq.w	8002d5e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002bde:	4a68      	ldr	r2, [pc, #416]	; (8002d80 <HAL_GPIO_DeInit+0x1c8>)
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	089b      	lsrs	r3, r3, #2
 8002be4:	3302      	adds	r3, #2
 8002be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bea:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	220f      	movs	r2, #15
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c06:	d025      	beq.n	8002c54 <HAL_GPIO_DeInit+0x9c>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4a5e      	ldr	r2, [pc, #376]	; (8002d84 <HAL_GPIO_DeInit+0x1cc>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d01f      	beq.n	8002c50 <HAL_GPIO_DeInit+0x98>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a5d      	ldr	r2, [pc, #372]	; (8002d88 <HAL_GPIO_DeInit+0x1d0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d019      	beq.n	8002c4c <HAL_GPIO_DeInit+0x94>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a5c      	ldr	r2, [pc, #368]	; (8002d8c <HAL_GPIO_DeInit+0x1d4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <HAL_GPIO_DeInit+0x90>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a5b      	ldr	r2, [pc, #364]	; (8002d90 <HAL_GPIO_DeInit+0x1d8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00d      	beq.n	8002c44 <HAL_GPIO_DeInit+0x8c>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a5a      	ldr	r2, [pc, #360]	; (8002d94 <HAL_GPIO_DeInit+0x1dc>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d007      	beq.n	8002c40 <HAL_GPIO_DeInit+0x88>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a59      	ldr	r2, [pc, #356]	; (8002d98 <HAL_GPIO_DeInit+0x1e0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d101      	bne.n	8002c3c <HAL_GPIO_DeInit+0x84>
 8002c38:	2306      	movs	r3, #6
 8002c3a:	e00c      	b.n	8002c56 <HAL_GPIO_DeInit+0x9e>
 8002c3c:	2307      	movs	r3, #7
 8002c3e:	e00a      	b.n	8002c56 <HAL_GPIO_DeInit+0x9e>
 8002c40:	2305      	movs	r3, #5
 8002c42:	e008      	b.n	8002c56 <HAL_GPIO_DeInit+0x9e>
 8002c44:	2304      	movs	r3, #4
 8002c46:	e006      	b.n	8002c56 <HAL_GPIO_DeInit+0x9e>
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e004      	b.n	8002c56 <HAL_GPIO_DeInit+0x9e>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e002      	b.n	8002c56 <HAL_GPIO_DeInit+0x9e>
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_GPIO_DeInit+0x9e>
 8002c54:	2300      	movs	r3, #0
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	f002 0203 	and.w	r2, r2, #3
 8002c5c:	0092      	lsls	r2, r2, #2
 8002c5e:	4093      	lsls	r3, r2
 8002c60:	68fa      	ldr	r2, [r7, #12]
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d132      	bne.n	8002ccc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002c66:	4b4d      	ldr	r3, [pc, #308]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c68:	681a      	ldr	r2, [r3, #0]
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	494b      	ldr	r1, [pc, #300]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002c74:	4b49      	ldr	r3, [pc, #292]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	43db      	mvns	r3, r3
 8002c7c:	4947      	ldr	r1, [pc, #284]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002c82:	4b46      	ldr	r3, [pc, #280]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c84:	68da      	ldr	r2, [r3, #12]
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	43db      	mvns	r3, r3
 8002c8a:	4944      	ldr	r1, [pc, #272]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002c90:	4b42      	ldr	r3, [pc, #264]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c92:	689a      	ldr	r2, [r3, #8]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	43db      	mvns	r3, r3
 8002c98:	4940      	ldr	r1, [pc, #256]	; (8002d9c <HAL_GPIO_DeInit+0x1e4>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f003 0303 	and.w	r3, r3, #3
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cac:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002cae:	4a34      	ldr	r2, [pc, #208]	; (8002d80 <HAL_GPIO_DeInit+0x1c8>)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	089b      	lsrs	r3, r3, #2
 8002cb4:	3302      	adds	r3, #2
 8002cb6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	43da      	mvns	r2, r3
 8002cbe:	4830      	ldr	r0, [pc, #192]	; (8002d80 <HAL_GPIO_DeInit+0x1c8>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	089b      	lsrs	r3, r3, #2
 8002cc4:	400a      	ands	r2, r1
 8002cc6:	3302      	adds	r3, #2
 8002cc8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	2103      	movs	r1, #3
 8002cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	08da      	lsrs	r2, r3, #3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3208      	adds	r2, #8
 8002ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f003 0307 	and.w	r3, r3, #7
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	220f      	movs	r2, #15
 8002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfa:	43db      	mvns	r3, r3
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	08d2      	lsrs	r2, r2, #3
 8002d00:	4019      	ands	r1, r3
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3208      	adds	r2, #8
 8002d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	689a      	ldr	r2, [r3, #8]
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2103      	movs	r1, #3
 8002d14:	fa01 f303 	lsl.w	r3, r1, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	401a      	ands	r2, r3
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685a      	ldr	r2, [r3, #4]
 8002d24:	2101      	movs	r1, #1
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	fa01 f303 	lsl.w	r3, r1, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	401a      	ands	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	2103      	movs	r1, #3
 8002d3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d42:	43db      	mvns	r3, r3
 8002d44:	401a      	ands	r2, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d4e:	2101      	movs	r1, #1
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	401a      	ands	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	3301      	adds	r3, #1
 8002d62:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f af2b 	bne.w	8002bc8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002d72:	bf00      	nop
 8002d74:	bf00      	nop
 8002d76:	371c      	adds	r7, #28
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr
 8002d80:	40010000 	.word	0x40010000
 8002d84:	48000400 	.word	0x48000400
 8002d88:	48000800 	.word	0x48000800
 8002d8c:	48000c00 	.word	0x48000c00
 8002d90:	48001000 	.word	0x48001000
 8002d94:	48001400 	.word	0x48001400
 8002d98:	48001800 	.word	0x48001800
 8002d9c:	40010400 	.word	0x40010400

08002da0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	460b      	mov	r3, r1
 8002daa:	807b      	strh	r3, [r7, #2]
 8002dac:	4613      	mov	r3, r2
 8002dae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db0:	787b      	ldrb	r3, [r7, #1]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d003      	beq.n	8002dbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002db6:	887a      	ldrh	r2, [r7, #2]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dbc:	e002      	b.n	8002dc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dc4:	bf00      	nop
 8002dc6:	370c      	adds	r7, #12
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002dda:	4b08      	ldr	r3, [pc, #32]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ddc:	695a      	ldr	r2, [r3, #20]
 8002dde:	88fb      	ldrh	r3, [r7, #6]
 8002de0:	4013      	ands	r3, r2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d006      	beq.n	8002df4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002de6:	4a05      	ldr	r2, [pc, #20]	; (8002dfc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	4618      	mov	r0, r3
 8002df0:	f000 f806 	bl	8002e00 <HAL_GPIO_EXTI_Callback>
  }
}
 8002df4:	bf00      	nop
 8002df6:	3708      	adds	r7, #8
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40010400 	.word	0x40010400

08002e00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	4603      	mov	r3, r0
 8002e08:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e0a:	bf00      	nop
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e16:	b580      	push	{r7, lr}
 8002e18:	b082      	sub	sp, #8
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e081      	b.n	8002f2c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d106      	bne.n	8002e42 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7fe faa9 	bl	8001394 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2224      	movs	r2, #36	; 0x24
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f022 0201 	bic.w	r2, r2, #1
 8002e58:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e66:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689a      	ldr	r2, [r3, #8]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e76:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e8c:	609a      	str	r2, [r3, #8]
 8002e8e:	e006      	b.n	8002e9e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d104      	bne.n	8002eb0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6812      	ldr	r2, [r2, #0]
 8002eba:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ebe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ec2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68da      	ldr	r2, [r3, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002ed2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	430a      	orrs	r2, r1
 8002eec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69d9      	ldr	r1, [r3, #28]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a1a      	ldr	r2, [r3, #32]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e021      	b.n	8002f8a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2224      	movs	r2, #36	; 0x24
 8002f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f022 0201 	bic.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f7fe fa76 	bl	8001450 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3708      	adds	r7, #8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
	...

08002f94 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af02      	add	r7, sp, #8
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	4608      	mov	r0, r1
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	817b      	strh	r3, [r7, #10]
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	813b      	strh	r3, [r7, #8]
 8002faa:	4613      	mov	r3, r2
 8002fac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	2b20      	cmp	r3, #32
 8002fb8:	f040 80f9 	bne.w	80031ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d002      	beq.n	8002fc8 <HAL_I2C_Mem_Write+0x34>
 8002fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d105      	bne.n	8002fd4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0ed      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d101      	bne.n	8002fe2 <HAL_I2C_Mem_Write+0x4e>
 8002fde:	2302      	movs	r3, #2
 8002fe0:	e0e6      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002fea:	f7ff fa7b 	bl	80024e4 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	2319      	movs	r3, #25
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 fac3 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d001      	beq.n	800300c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e0d1      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2221      	movs	r2, #33	; 0x21
 8003010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2200      	movs	r2, #0
 8003020:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6a3a      	ldr	r2, [r7, #32]
 8003026:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800302c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2200      	movs	r2, #0
 8003032:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003034:	88f8      	ldrh	r0, [r7, #6]
 8003036:	893a      	ldrh	r2, [r7, #8]
 8003038:	8979      	ldrh	r1, [r7, #10]
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	9301      	str	r3, [sp, #4]
 800303e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	4603      	mov	r3, r0
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f000 f9d3 	bl	80033f0 <I2C_RequestMemoryWrite>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0a9      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003060:	b29b      	uxth	r3, r3
 8003062:	2bff      	cmp	r3, #255	; 0xff
 8003064:	d90e      	bls.n	8003084 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	22ff      	movs	r2, #255	; 0xff
 800306a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003070:	b2da      	uxtb	r2, r3
 8003072:	8979      	ldrh	r1, [r7, #10]
 8003074:	2300      	movs	r3, #0
 8003076:	9300      	str	r3, [sp, #0]
 8003078:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 fc2b 	bl	80038d8 <I2C_TransferConfig>
 8003082:	e00f      	b.n	80030a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003088:	b29a      	uxth	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003092:	b2da      	uxtb	r2, r3
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	2300      	movs	r3, #0
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fc1a 	bl	80038d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030a4:	697a      	ldr	r2, [r7, #20]
 80030a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f000 faad 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e07b      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030bc:	781a      	ldrb	r2, [r3, #0]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c8:	1c5a      	adds	r2, r3, #1
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	3b01      	subs	r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030e0:	3b01      	subs	r3, #1
 80030e2:	b29a      	uxth	r2, r3
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d034      	beq.n	800315c <HAL_I2C_Mem_Write+0x1c8>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d130      	bne.n	800315c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003100:	2200      	movs	r2, #0
 8003102:	2180      	movs	r1, #128	; 0x80
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 fa3f 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e04d      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	2bff      	cmp	r3, #255	; 0xff
 800311c:	d90e      	bls.n	800313c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	22ff      	movs	r2, #255	; 0xff
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	b2da      	uxtb	r2, r3
 800312a:	8979      	ldrh	r1, [r7, #10]
 800312c:	2300      	movs	r3, #0
 800312e:	9300      	str	r3, [sp, #0]
 8003130:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 fbcf 	bl	80038d8 <I2C_TransferConfig>
 800313a:	e00f      	b.n	800315c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003140:	b29a      	uxth	r2, r3
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8979      	ldrh	r1, [r7, #10]
 800314e:	2300      	movs	r3, #0
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 fbbe 	bl	80038d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b00      	cmp	r3, #0
 8003164:	d19e      	bne.n	80030a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003166:	697a      	ldr	r2, [r7, #20]
 8003168:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fa8c 	bl	8003688 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e01a      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2220      	movs	r2, #32
 8003180:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6859      	ldr	r1, [r3, #4]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	4b0a      	ldr	r3, [pc, #40]	; (80031b8 <HAL_I2C_Mem_Write+0x224>)
 800318e:	400b      	ands	r3, r1
 8003190:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2220      	movs	r2, #32
 8003196:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031aa:	2300      	movs	r3, #0
 80031ac:	e000      	b.n	80031b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80031ae:	2302      	movs	r3, #2
  }
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3718      	adds	r7, #24
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	fe00e800 	.word	0xfe00e800

080031bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b088      	sub	sp, #32
 80031c0:	af02      	add	r7, sp, #8
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	4608      	mov	r0, r1
 80031c6:	4611      	mov	r1, r2
 80031c8:	461a      	mov	r2, r3
 80031ca:	4603      	mov	r3, r0
 80031cc:	817b      	strh	r3, [r7, #10]
 80031ce:	460b      	mov	r3, r1
 80031d0:	813b      	strh	r3, [r7, #8]
 80031d2:	4613      	mov	r3, r2
 80031d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b20      	cmp	r3, #32
 80031e0:	f040 80fd 	bne.w	80033de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80031e4:	6a3b      	ldr	r3, [r7, #32]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <HAL_I2C_Mem_Read+0x34>
 80031ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d105      	bne.n	80031fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e0f1      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003202:	2b01      	cmp	r3, #1
 8003204:	d101      	bne.n	800320a <HAL_I2C_Mem_Read+0x4e>
 8003206:	2302      	movs	r3, #2
 8003208:	e0ea      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003212:	f7ff f967 	bl	80024e4 <HAL_GetTick>
 8003216:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2319      	movs	r3, #25
 800321e:	2201      	movs	r2, #1
 8003220:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 f9af 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d5      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2222      	movs	r2, #34	; 0x22
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2240      	movs	r2, #64	; 0x40
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6a3a      	ldr	r2, [r7, #32]
 800324e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800325c:	88f8      	ldrh	r0, [r7, #6]
 800325e:	893a      	ldrh	r2, [r7, #8]
 8003260:	8979      	ldrh	r1, [r7, #10]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	9301      	str	r3, [sp, #4]
 8003266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	4603      	mov	r3, r0
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f913 	bl	8003498 <I2C_RequestMemoryRead>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d005      	beq.n	8003284 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2200      	movs	r2, #0
 800327c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	e0ad      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003288:	b29b      	uxth	r3, r3
 800328a:	2bff      	cmp	r3, #255	; 0xff
 800328c:	d90e      	bls.n	80032ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	22ff      	movs	r2, #255	; 0xff
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003298:	b2da      	uxtb	r2, r3
 800329a:	8979      	ldrh	r1, [r7, #10]
 800329c:	4b52      	ldr	r3, [pc, #328]	; (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 800329e:	9300      	str	r3, [sp, #0]
 80032a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f000 fb17 	bl	80038d8 <I2C_TransferConfig>
 80032aa:	e00f      	b.n	80032cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ba:	b2da      	uxtb	r2, r3
 80032bc:	8979      	ldrh	r1, [r7, #10]
 80032be:	4b4a      	ldr	r3, [pc, #296]	; (80033e8 <HAL_I2C_Mem_Read+0x22c>)
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032c6:	68f8      	ldr	r0, [r7, #12]
 80032c8:	f000 fb06 	bl	80038d8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032d2:	2200      	movs	r2, #0
 80032d4:	2104      	movs	r1, #4
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 f956 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e07c      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	3b01      	subs	r3, #1
 8003304:	b29a      	uxth	r2, r3
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800330e:	b29b      	uxth	r3, r3
 8003310:	3b01      	subs	r3, #1
 8003312:	b29a      	uxth	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d034      	beq.n	800338c <HAL_I2C_Mem_Read+0x1d0>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003326:	2b00      	cmp	r3, #0
 8003328:	d130      	bne.n	800338c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003330:	2200      	movs	r2, #0
 8003332:	2180      	movs	r1, #128	; 0x80
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f000 f927 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 800333a:	4603      	mov	r3, r0
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e04d      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003348:	b29b      	uxth	r3, r3
 800334a:	2bff      	cmp	r3, #255	; 0xff
 800334c:	d90e      	bls.n	800336c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	22ff      	movs	r2, #255	; 0xff
 8003352:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003358:	b2da      	uxtb	r2, r3
 800335a:	8979      	ldrh	r1, [r7, #10]
 800335c:	2300      	movs	r3, #0
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 fab7 	bl	80038d8 <I2C_TransferConfig>
 800336a:	e00f      	b.n	800338c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003370:	b29a      	uxth	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800337a:	b2da      	uxtb	r2, r3
 800337c:	8979      	ldrh	r1, [r7, #10]
 800337e:	2300      	movs	r3, #0
 8003380:	9300      	str	r3, [sp, #0]
 8003382:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003386:	68f8      	ldr	r0, [r7, #12]
 8003388:	f000 faa6 	bl	80038d8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	2b00      	cmp	r3, #0
 8003394:	d19a      	bne.n	80032cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f974 	bl	8003688 <I2C_WaitOnSTOPFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e01a      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2220      	movs	r2, #32
 80033b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	6859      	ldr	r1, [r3, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_I2C_Mem_Read+0x230>)
 80033be:	400b      	ands	r3, r1
 80033c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	e000      	b.n	80033e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80033de:	2302      	movs	r3, #2
  }
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3718      	adds	r7, #24
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	80002400 	.word	0x80002400
 80033ec:	fe00e800 	.word	0xfe00e800

080033f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af02      	add	r7, sp, #8
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	4608      	mov	r0, r1
 80033fa:	4611      	mov	r1, r2
 80033fc:	461a      	mov	r2, r3
 80033fe:	4603      	mov	r3, r0
 8003400:	817b      	strh	r3, [r7, #10]
 8003402:	460b      	mov	r3, r1
 8003404:	813b      	strh	r3, [r7, #8]
 8003406:	4613      	mov	r3, r2
 8003408:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800340a:	88fb      	ldrh	r3, [r7, #6]
 800340c:	b2da      	uxtb	r2, r3
 800340e:	8979      	ldrh	r1, [r7, #10]
 8003410:	4b20      	ldr	r3, [pc, #128]	; (8003494 <I2C_RequestMemoryWrite+0xa4>)
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fa5d 	bl	80038d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	69fa      	ldr	r2, [r7, #28]
 8003420:	69b9      	ldr	r1, [r7, #24]
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 f8f0 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e02c      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003432:	88fb      	ldrh	r3, [r7, #6]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003438:	893b      	ldrh	r3, [r7, #8]
 800343a:	b2da      	uxtb	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
 8003442:	e015      	b.n	8003470 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003444:	893b      	ldrh	r3, [r7, #8]
 8003446:	0a1b      	lsrs	r3, r3, #8
 8003448:	b29b      	uxth	r3, r3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	69b9      	ldr	r1, [r7, #24]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f8d6 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e012      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003466:	893b      	ldrh	r3, [r7, #8]
 8003468:	b2da      	uxtb	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	9300      	str	r3, [sp, #0]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2200      	movs	r2, #0
 8003478:	2180      	movs	r1, #128	; 0x80
 800347a:	68f8      	ldr	r0, [r7, #12]
 800347c:	f000 f884 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e000      	b.n	800348c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	80002000 	.word	0x80002000

08003498 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af02      	add	r7, sp, #8
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	4608      	mov	r0, r1
 80034a2:	4611      	mov	r1, r2
 80034a4:	461a      	mov	r2, r3
 80034a6:	4603      	mov	r3, r0
 80034a8:	817b      	strh	r3, [r7, #10]
 80034aa:	460b      	mov	r3, r1
 80034ac:	813b      	strh	r3, [r7, #8]
 80034ae:	4613      	mov	r3, r2
 80034b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80034b2:	88fb      	ldrh	r3, [r7, #6]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	8979      	ldrh	r1, [r7, #10]
 80034b8:	4b20      	ldr	r3, [pc, #128]	; (800353c <I2C_RequestMemoryRead+0xa4>)
 80034ba:	9300      	str	r3, [sp, #0]
 80034bc:	2300      	movs	r3, #0
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	f000 fa0a 	bl	80038d8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c4:	69fa      	ldr	r2, [r7, #28]
 80034c6:	69b9      	ldr	r1, [r7, #24]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f89d 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e02c      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034d8:	88fb      	ldrh	r3, [r7, #6]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034de:	893b      	ldrh	r3, [r7, #8]
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	629a      	str	r2, [r3, #40]	; 0x28
 80034e8:	e015      	b.n	8003516 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034ea:	893b      	ldrh	r3, [r7, #8]
 80034ec:	0a1b      	lsrs	r3, r3, #8
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f8:	69fa      	ldr	r2, [r7, #28]
 80034fa:	69b9      	ldr	r1, [r7, #24]
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 f883 	bl	8003608 <I2C_WaitOnTXISFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e012      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800350c:	893b      	ldrh	r3, [r7, #8]
 800350e:	b2da      	uxtb	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2200      	movs	r2, #0
 800351e:	2140      	movs	r1, #64	; 0x40
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f831 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	80002000 	.word	0x80002000

08003540 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d103      	bne.n	800355e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	2200      	movs	r2, #0
 800355c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b01      	cmp	r3, #1
 800356a:	d007      	beq.n	800357c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f042 0201 	orr.w	r2, r2, #1
 800357a:	619a      	str	r2, [r3, #24]
  }
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e022      	b.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d01e      	beq.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7fe ff9f 	bl	80024e4 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d113      	bne.n	80035e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e00f      	b.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	68ba      	ldr	r2, [r7, #8]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d0cd      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}

08003608 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003614:	e02c      	b.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68b9      	ldr	r1, [r7, #8]
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f870 	bl	8003700 <I2C_IsErrorOccurred>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e02a      	b.n	8003680 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003630:	d01e      	beq.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003632:	f7fe ff57 	bl	80024e4 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	68ba      	ldr	r2, [r7, #8]
 800363e:	429a      	cmp	r2, r3
 8003640:	d302      	bcc.n	8003648 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d113      	bne.n	8003670 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364c:	f043 0220 	orr.w	r2, r3, #32
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	2200      	movs	r2, #0
 8003668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e007      	b.n	8003680 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d1cb      	bne.n	8003616 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800367e:	2300      	movs	r3, #0
}
 8003680:	4618      	mov	r0, r3
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003694:	e028      	b.n	80036e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68b9      	ldr	r1, [r7, #8]
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f830 	bl	8003700 <I2C_IsErrorOccurred>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e026      	b.n	80036f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe ff1b 	bl	80024e4 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d113      	bne.n	80036e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f043 0220 	orr.w	r2, r3, #32
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2220      	movs	r2, #32
 80036d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e007      	b.n	80036f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b20      	cmp	r3, #32
 80036f4:	d1cf      	bne.n	8003696 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	3710      	adds	r7, #16
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b08a      	sub	sp, #40	; 0x28
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800371a:	2300      	movs	r3, #0
 800371c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b00      	cmp	r3, #0
 800372a:	d075      	beq.n	8003818 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2210      	movs	r2, #16
 8003732:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003734:	e056      	b.n	80037e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800373c:	d052      	beq.n	80037e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800373e:	f7fe fed1 	bl	80024e4 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	68ba      	ldr	r2, [r7, #8]
 800374a:	429a      	cmp	r2, r3
 800374c:	d302      	bcc.n	8003754 <I2C_IsErrorOccurred+0x54>
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d147      	bne.n	80037e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800375e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003766:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003772:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003776:	d12e      	bne.n	80037d6 <I2C_IsErrorOccurred+0xd6>
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800377e:	d02a      	beq.n	80037d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003780:	7cfb      	ldrb	r3, [r7, #19]
 8003782:	2b20      	cmp	r3, #32
 8003784:	d027      	beq.n	80037d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003794:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003796:	f7fe fea5 	bl	80024e4 <HAL_GetTick>
 800379a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379c:	e01b      	b.n	80037d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800379e:	f7fe fea1 	bl	80024e4 <HAL_GetTick>
 80037a2:	4602      	mov	r2, r0
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	1ad3      	subs	r3, r2, r3
 80037a8:	2b19      	cmp	r3, #25
 80037aa:	d914      	bls.n	80037d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b0:	f043 0220 	orr.w	r2, r3, #32
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d1dc      	bne.n	800379e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f003 0320 	and.w	r3, r3, #32
 80037ee:	2b20      	cmp	r3, #32
 80037f0:	d003      	beq.n	80037fa <I2C_IsErrorOccurred+0xfa>
 80037f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d09d      	beq.n	8003736 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80037fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d103      	bne.n	800380a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2220      	movs	r2, #32
 8003808:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	f043 0304 	orr.w	r3, r3, #4
 8003810:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	699b      	ldr	r3, [r3, #24]
 800381e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00b      	beq.n	8003842 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f043 0301 	orr.w	r3, r3, #1
 8003830:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800383a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00b      	beq.n	8003864 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	f043 0308 	orr.w	r3, r3, #8
 8003852:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800385c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00b      	beq.n	8003886 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	f043 0302 	orr.w	r3, r3, #2
 8003874:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800387e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003886:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800388a:	2b00      	cmp	r3, #0
 800388c:	d01c      	beq.n	80038c8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800388e:	68f8      	ldr	r0, [r7, #12]
 8003890:	f7ff fe56 	bl	8003540 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6859      	ldr	r1, [r3, #4]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4b0d      	ldr	r3, [pc, #52]	; (80038d4 <I2C_IsErrorOccurred+0x1d4>)
 80038a0:	400b      	ands	r3, r1
 80038a2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2220      	movs	r2, #32
 80038b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80038c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3728      	adds	r7, #40	; 0x28
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	fe00e800 	.word	0xfe00e800

080038d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	460b      	mov	r3, r1
 80038e4:	817b      	strh	r3, [r7, #10]
 80038e6:	4613      	mov	r3, r2
 80038e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038ea:	897b      	ldrh	r3, [r7, #10]
 80038ec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038f0:	7a7b      	ldrb	r3, [r7, #9]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038f8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80038fe:	6a3b      	ldr	r3, [r7, #32]
 8003900:	4313      	orrs	r3, r2
 8003902:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003906:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	6a3b      	ldr	r3, [r7, #32]
 8003910:	0d5b      	lsrs	r3, r3, #21
 8003912:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003916:	4b08      	ldr	r3, [pc, #32]	; (8003938 <I2C_TransferConfig+0x60>)
 8003918:	430b      	orrs	r3, r1
 800391a:	43db      	mvns	r3, r3
 800391c:	ea02 0103 	and.w	r1, r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	697a      	ldr	r2, [r7, #20]
 8003926:	430a      	orrs	r2, r1
 8003928:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	03ff63ff 	.word	0x03ff63ff

0800393c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b20      	cmp	r3, #32
 8003950:	d138      	bne.n	80039c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003958:	2b01      	cmp	r3, #1
 800395a:	d101      	bne.n	8003960 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800395c:	2302      	movs	r3, #2
 800395e:	e032      	b.n	80039c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2224      	movs	r2, #36	; 0x24
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681a      	ldr	r2, [r3, #0]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0201 	bic.w	r2, r2, #1
 800397e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800398e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6819      	ldr	r1, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f042 0201 	orr.w	r2, r2, #1
 80039ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	e000      	b.n	80039c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
  }
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b085      	sub	sp, #20
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
 80039da:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b20      	cmp	r3, #32
 80039e6:	d139      	bne.n	8003a5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d101      	bne.n	80039f6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e033      	b.n	8003a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2224      	movs	r2, #36	; 0x24
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0201 	bic.w	r2, r2, #1
 8003a14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003a24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	021b      	lsls	r3, r3, #8
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f042 0201 	orr.w	r2, r2, #1
 8003a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	e000      	b.n	8003a5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003a5c:	2302      	movs	r3, #2
  }
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003a70:	4b04      	ldr	r3, [pc, #16]	; (8003a84 <HAL_PWREx_GetVoltageRange+0x18>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40007000 	.word	0x40007000

08003a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b085      	sub	sp, #20
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a96:	d130      	bne.n	8003afa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003a98:	4b23      	ldr	r3, [pc, #140]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aa0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa4:	d038      	beq.n	8003b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003aa6:	4b20      	ldr	r3, [pc, #128]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003aae:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ab0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ab4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ab6:	4b1d      	ldr	r3, [pc, #116]	; (8003b2c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2232      	movs	r2, #50	; 0x32
 8003abc:	fb02 f303 	mul.w	r3, r2, r3
 8003ac0:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	0c9b      	lsrs	r3, r3, #18
 8003ac8:	3301      	adds	r3, #1
 8003aca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003acc:	e002      	b.n	8003ad4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ad4:	4b14      	ldr	r3, [pc, #80]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ae0:	d102      	bne.n	8003ae8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1f2      	bne.n	8003ace <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af4:	d110      	bne.n	8003b18 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e00f      	b.n	8003b1a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003afa:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b06:	d007      	beq.n	8003b18 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003b08:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b10:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b16:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003b18:	2300      	movs	r3, #0
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3714      	adds	r7, #20
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40007000 	.word	0x40007000
 8003b2c:	200000bc 	.word	0x200000bc
 8003b30:	431bde83 	.word	0x431bde83

08003b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b088      	sub	sp, #32
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e3c6      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b46:	4ba1      	ldr	r3, [pc, #644]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f003 030c 	and.w	r3, r3, #12
 8003b4e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b50:	4b9e      	ldr	r3, [pc, #632]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	f003 0303 	and.w	r3, r3, #3
 8003b58:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0310 	and.w	r3, r3, #16
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80e4 	beq.w	8003d30 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d007      	beq.n	8003b7e <HAL_RCC_OscConfig+0x4a>
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	2b0c      	cmp	r3, #12
 8003b72:	f040 808b 	bne.w	8003c8c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	f040 8087 	bne.w	8003c8c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b7e:	4b93      	ldr	r3, [pc, #588]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d005      	beq.n	8003b96 <HAL_RCC_OscConfig+0x62>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e39e      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1a      	ldr	r2, [r3, #32]
 8003b9a:	4b8c      	ldr	r3, [pc, #560]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d004      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x7c>
 8003ba6:	4b89      	ldr	r3, [pc, #548]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bae:	e005      	b.n	8003bbc <HAL_RCC_OscConfig+0x88>
 8003bb0:	4b86      	ldr	r3, [pc, #536]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb6:	091b      	lsrs	r3, r3, #4
 8003bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d223      	bcs.n	8003c08 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a1b      	ldr	r3, [r3, #32]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f000 fd53 	bl	8004670 <RCC_SetFlashLatencyFromMSIRange>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e37f      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bd4:	4b7d      	ldr	r3, [pc, #500]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a7c      	ldr	r2, [pc, #496]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003bda:	f043 0308 	orr.w	r3, r3, #8
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b7a      	ldr	r3, [pc, #488]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a1b      	ldr	r3, [r3, #32]
 8003bec:	4977      	ldr	r1, [pc, #476]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bf2:	4b76      	ldr	r3, [pc, #472]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	4972      	ldr	r1, [pc, #456]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	604b      	str	r3, [r1, #4]
 8003c06:	e025      	b.n	8003c54 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003c08:	4b70      	ldr	r3, [pc, #448]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a6f      	ldr	r2, [pc, #444]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c0e:	f043 0308 	orr.w	r3, r3, #8
 8003c12:	6013      	str	r3, [r2, #0]
 8003c14:	4b6d      	ldr	r3, [pc, #436]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	496a      	ldr	r1, [pc, #424]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c26:	4b69      	ldr	r3, [pc, #420]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	021b      	lsls	r3, r3, #8
 8003c34:	4965      	ldr	r1, [pc, #404]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d109      	bne.n	8003c54 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a1b      	ldr	r3, [r3, #32]
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 fd13 	bl	8004670 <RCC_SetFlashLatencyFromMSIRange>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e33f      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c54:	f000 fc48 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b5c      	ldr	r3, [pc, #368]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	495a      	ldr	r1, [pc, #360]	; (8003dd0 <HAL_RCC_OscConfig+0x29c>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <HAL_RCC_OscConfig+0x2a0>)
 8003c72:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c74:	4b58      	ldr	r3, [pc, #352]	; (8003dd8 <HAL_RCC_OscConfig+0x2a4>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fe fbe3 	bl	8002444 <HAL_InitTick>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d052      	beq.n	8003d2e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	e323      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d032      	beq.n	8003cfa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c94:	4b4d      	ldr	r3, [pc, #308]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a4c      	ldr	r2, [pc, #304]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003c9a:	f043 0301 	orr.w	r3, r3, #1
 8003c9e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fc20 	bl	80024e4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ca8:	f7fe fc1c 	bl	80024e4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e30c      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003cba:	4b44      	ldr	r3, [pc, #272]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d0f0      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cc6:	4b41      	ldr	r3, [pc, #260]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a40      	ldr	r2, [pc, #256]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003ccc:	f043 0308 	orr.w	r3, r3, #8
 8003cd0:	6013      	str	r3, [r2, #0]
 8003cd2:	4b3e      	ldr	r3, [pc, #248]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	493b      	ldr	r1, [pc, #236]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ce4:	4b39      	ldr	r3, [pc, #228]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	4936      	ldr	r1, [pc, #216]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	604b      	str	r3, [r1, #4]
 8003cf8:	e01a      	b.n	8003d30 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cfa:	4b34      	ldr	r3, [pc, #208]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a33      	ldr	r2, [pc, #204]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d00:	f023 0301 	bic.w	r3, r3, #1
 8003d04:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d06:	f7fe fbed 	bl	80024e4 <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d0e:	f7fe fbe9 	bl	80024e4 <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e2d9      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d20:	4b2a      	ldr	r3, [pc, #168]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d1f0      	bne.n	8003d0e <HAL_RCC_OscConfig+0x1da>
 8003d2c:	e000      	b.n	8003d30 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d2e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 0301 	and.w	r3, r3, #1
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d074      	beq.n	8003e26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b08      	cmp	r3, #8
 8003d40:	d005      	beq.n	8003d4e <HAL_RCC_OscConfig+0x21a>
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d10e      	bne.n	8003d66 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d10b      	bne.n	8003d66 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4e:	4b1f      	ldr	r3, [pc, #124]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d064      	beq.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d160      	bne.n	8003e24 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e2b6      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0x24a>
 8003d70:	4b16      	ldr	r3, [pc, #88]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a15      	ldr	r2, [pc, #84]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e01d      	b.n	8003dba <HAL_RCC_OscConfig+0x286>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x26e>
 8003d88:	4b10      	ldr	r3, [pc, #64]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a0f      	ldr	r2, [pc, #60]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b0d      	ldr	r3, [pc, #52]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a0c      	ldr	r2, [pc, #48]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e00b      	b.n	8003dba <HAL_RCC_OscConfig+0x286>
 8003da2:	4b0a      	ldr	r3, [pc, #40]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a09      	ldr	r2, [pc, #36]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b07      	ldr	r3, [pc, #28]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <HAL_RCC_OscConfig+0x298>)
 8003db4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d01c      	beq.n	8003dfc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fb8f 	bl	80024e4 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc8:	e011      	b.n	8003dee <HAL_RCC_OscConfig+0x2ba>
 8003dca:	bf00      	nop
 8003dcc:	40021000 	.word	0x40021000
 8003dd0:	08007b3c 	.word	0x08007b3c
 8003dd4:	200000bc 	.word	0x200000bc
 8003dd8:	2000011c 	.word	0x2000011c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fe fb82 	bl	80024e4 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e272      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dee:	4baf      	ldr	r3, [pc, #700]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0x2a8>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dfc:	f7fe fb72 	bl	80024e4 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fe fb6e 	bl	80024e4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e25e      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e16:	4ba5      	ldr	r3, [pc, #660]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0x2d0>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d060      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d005      	beq.n	8003e44 <HAL_RCC_OscConfig+0x310>
 8003e38:	69bb      	ldr	r3, [r7, #24]
 8003e3a:	2b0c      	cmp	r3, #12
 8003e3c:	d119      	bne.n	8003e72 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	2b02      	cmp	r3, #2
 8003e42:	d116      	bne.n	8003e72 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e44:	4b99      	ldr	r3, [pc, #612]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d005      	beq.n	8003e5c <HAL_RCC_OscConfig+0x328>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e23b      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e5c:	4b93      	ldr	r3, [pc, #588]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	691b      	ldr	r3, [r3, #16]
 8003e68:	061b      	lsls	r3, r3, #24
 8003e6a:	4990      	ldr	r1, [pc, #576]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e70:	e040      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d023      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7a:	4b8c      	ldr	r3, [pc, #560]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a8b      	ldr	r2, [pc, #556]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e86:	f7fe fb2d 	bl	80024e4 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8e:	f7fe fb29 	bl	80024e4 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e219      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea0:	4b82      	ldr	r3, [pc, #520]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eac:	4b7f      	ldr	r3, [pc, #508]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	061b      	lsls	r3, r3, #24
 8003eba:	497c      	ldr	r1, [pc, #496]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	604b      	str	r3, [r1, #4]
 8003ec0:	e018      	b.n	8003ef4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ec2:	4b7a      	ldr	r3, [pc, #488]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a79      	ldr	r2, [pc, #484]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003ec8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ecc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ece:	f7fe fb09 	bl	80024e4 <HAL_GetTick>
 8003ed2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ed4:	e008      	b.n	8003ee8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed6:	f7fe fb05 	bl	80024e4 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	2b02      	cmp	r3, #2
 8003ee2:	d901      	bls.n	8003ee8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e1f5      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee8:	4b70      	ldr	r3, [pc, #448]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d1f0      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d03c      	beq.n	8003f7a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01c      	beq.n	8003f42 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f08:	4b68      	ldr	r3, [pc, #416]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f0e:	4a67      	ldr	r2, [pc, #412]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f10:	f043 0301 	orr.w	r3, r3, #1
 8003f14:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f18:	f7fe fae4 	bl	80024e4 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f20:	f7fe fae0 	bl	80024e4 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e1d0      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f32:	4b5e      	ldr	r3, [pc, #376]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f38:	f003 0302 	and.w	r3, r3, #2
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d0ef      	beq.n	8003f20 <HAL_RCC_OscConfig+0x3ec>
 8003f40:	e01b      	b.n	8003f7a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f42:	4b5a      	ldr	r3, [pc, #360]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f48:	4a58      	ldr	r2, [pc, #352]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f4a:	f023 0301 	bic.w	r3, r3, #1
 8003f4e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f52:	f7fe fac7 	bl	80024e4 <HAL_GetTick>
 8003f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f58:	e008      	b.n	8003f6c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5a:	f7fe fac3 	bl	80024e4 <HAL_GetTick>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d901      	bls.n	8003f6c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	e1b3      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f6c:	4b4f      	ldr	r3, [pc, #316]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1ef      	bne.n	8003f5a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f003 0304 	and.w	r3, r3, #4
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 80a6 	beq.w	80040d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003f8c:	4b47      	ldr	r3, [pc, #284]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d10d      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f98:	4b44      	ldr	r3, [pc, #272]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9c:	4a43      	ldr	r2, [pc, #268]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003fa4:	4b41      	ldr	r3, [pc, #260]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fac:	60bb      	str	r3, [r7, #8]
 8003fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	4b3e      	ldr	r3, [pc, #248]	; (80040b0 <HAL_RCC_OscConfig+0x57c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d118      	bne.n	8003ff2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fc0:	4b3b      	ldr	r3, [pc, #236]	; (80040b0 <HAL_RCC_OscConfig+0x57c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a3a      	ldr	r2, [pc, #232]	; (80040b0 <HAL_RCC_OscConfig+0x57c>)
 8003fc6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fcc:	f7fe fa8a 	bl	80024e4 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd4:	f7fe fa86 	bl	80024e4 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e176      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe6:	4b32      	ldr	r3, [pc, #200]	; (80040b0 <HAL_RCC_OscConfig+0x57c>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d0f0      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d108      	bne.n	800400c <HAL_RCC_OscConfig+0x4d8>
 8003ffa:	4b2c      	ldr	r3, [pc, #176]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8003ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004000:	4a2a      	ldr	r2, [pc, #168]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8004002:	f043 0301 	orr.w	r3, r3, #1
 8004006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800400a:	e024      	b.n	8004056 <HAL_RCC_OscConfig+0x522>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d110      	bne.n	8004036 <HAL_RCC_OscConfig+0x502>
 8004014:	4b25      	ldr	r3, [pc, #148]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	4a24      	ldr	r2, [pc, #144]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 800401c:	f043 0304 	orr.w	r3, r3, #4
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004024:	4b21      	ldr	r3, [pc, #132]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	4a20      	ldr	r2, [pc, #128]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004034:	e00f      	b.n	8004056 <HAL_RCC_OscConfig+0x522>
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8004038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403c:	4a1b      	ldr	r2, [pc, #108]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004046:	4b19      	ldr	r3, [pc, #100]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	4a17      	ldr	r2, [pc, #92]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 800404e:	f023 0304 	bic.w	r3, r3, #4
 8004052:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405e:	f7fe fa41 	bl	80024e4 <HAL_GetTick>
 8004062:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004064:	e00a      	b.n	800407c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004066:	f7fe fa3d 	bl	80024e4 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	f241 3288 	movw	r2, #5000	; 0x1388
 8004074:	4293      	cmp	r3, r2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e12b      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407c:	4b0b      	ldr	r3, [pc, #44]	; (80040ac <HAL_RCC_OscConfig+0x578>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0ed      	beq.n	8004066 <HAL_RCC_OscConfig+0x532>
 800408a:	e01a      	b.n	80040c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408c:	f7fe fa2a 	bl	80024e4 <HAL_GetTick>
 8004090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004092:	e00f      	b.n	80040b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004094:	f7fe fa26 	bl	80024e4 <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d906      	bls.n	80040b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e114      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
 80040aa:	bf00      	nop
 80040ac:	40021000 	.word	0x40021000
 80040b0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040b4:	4b89      	ldr	r3, [pc, #548]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80040b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ba:	f003 0302 	and.w	r3, r3, #2
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1e8      	bne.n	8004094 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040c2:	7ffb      	ldrb	r3, [r7, #31]
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d105      	bne.n	80040d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040c8:	4b84      	ldr	r3, [pc, #528]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80040ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040cc:	4a83      	ldr	r2, [pc, #524]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80040ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040d2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 80fa 	beq.w	80042d2 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	f040 80d0 	bne.w	8004288 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80040e8:	4b7c      	ldr	r3, [pc, #496]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	f003 0203 	and.w	r2, r3, #3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d130      	bne.n	800415e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004106:	3b01      	subs	r3, #1
 8004108:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800410a:	429a      	cmp	r2, r3
 800410c:	d127      	bne.n	800415e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004118:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800411a:	429a      	cmp	r2, r3
 800411c:	d11f      	bne.n	800415e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004128:	2a07      	cmp	r2, #7
 800412a:	bf14      	ite	ne
 800412c:	2201      	movne	r2, #1
 800412e:	2200      	moveq	r2, #0
 8004130:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004132:	4293      	cmp	r3, r2
 8004134:	d113      	bne.n	800415e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	3b01      	subs	r3, #1
 8004144:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004146:	429a      	cmp	r2, r3
 8004148:	d109      	bne.n	800415e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004154:	085b      	lsrs	r3, r3, #1
 8004156:	3b01      	subs	r3, #1
 8004158:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800415a:	429a      	cmp	r2, r3
 800415c:	d06e      	beq.n	800423c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	2b0c      	cmp	r3, #12
 8004162:	d069      	beq.n	8004238 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004164:	4b5d      	ldr	r3, [pc, #372]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d105      	bne.n	800417c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004170:	4b5a      	ldr	r3, [pc, #360]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d001      	beq.n	8004180 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e0a9      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004180:	4b56      	ldr	r3, [pc, #344]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a55      	ldr	r2, [pc, #340]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004186:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800418a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800418c:	f7fe f9aa 	bl	80024e4 <HAL_GetTick>
 8004190:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004192:	e008      	b.n	80041a6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004194:	f7fe f9a6 	bl	80024e4 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e096      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041a6:	4b4d      	ldr	r3, [pc, #308]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1f0      	bne.n	8004194 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041b2:	4b4a      	ldr	r3, [pc, #296]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80041b4:	68da      	ldr	r2, [r3, #12]
 80041b6:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <HAL_RCC_OscConfig+0x7ac>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041c2:	3a01      	subs	r2, #1
 80041c4:	0112      	lsls	r2, r2, #4
 80041c6:	4311      	orrs	r1, r2
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041cc:	0212      	lsls	r2, r2, #8
 80041ce:	4311      	orrs	r1, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041d4:	0852      	lsrs	r2, r2, #1
 80041d6:	3a01      	subs	r2, #1
 80041d8:	0552      	lsls	r2, r2, #21
 80041da:	4311      	orrs	r1, r2
 80041dc:	687a      	ldr	r2, [r7, #4]
 80041de:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80041e0:	0852      	lsrs	r2, r2, #1
 80041e2:	3a01      	subs	r2, #1
 80041e4:	0652      	lsls	r2, r2, #25
 80041e6:	4311      	orrs	r1, r2
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80041ec:	0912      	lsrs	r2, r2, #4
 80041ee:	0452      	lsls	r2, r2, #17
 80041f0:	430a      	orrs	r2, r1
 80041f2:	493a      	ldr	r1, [pc, #232]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80041f8:	4b38      	ldr	r3, [pc, #224]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a37      	ldr	r2, [pc, #220]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80041fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004202:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004204:	4b35      	ldr	r3, [pc, #212]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	4a34      	ldr	r2, [pc, #208]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 800420a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004210:	f7fe f968 	bl	80024e4 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004218:	f7fe f964 	bl	80024e4 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e054      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800422a:	4b2c      	ldr	r3, [pc, #176]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d0f0      	beq.n	8004218 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004236:	e04c      	b.n	80042d2 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e04b      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d144      	bne.n	80042d2 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004248:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a23      	ldr	r2, [pc, #140]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 800424e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004252:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004254:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	4a20      	ldr	r2, [pc, #128]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 800425a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800425e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004260:	f7fe f940 	bl	80024e4 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004268:	f7fe f93c 	bl	80024e4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b02      	cmp	r3, #2
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e02c      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800427a:	4b18      	ldr	r3, [pc, #96]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d0f0      	beq.n	8004268 <HAL_RCC_OscConfig+0x734>
 8004286:	e024      	b.n	80042d2 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004288:	69bb      	ldr	r3, [r7, #24]
 800428a:	2b0c      	cmp	r3, #12
 800428c:	d01f      	beq.n	80042ce <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800428e:	4b13      	ldr	r3, [pc, #76]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a12      	ldr	r2, [pc, #72]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 8004294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429a:	f7fe f923 	bl	80024e4 <HAL_GetTick>
 800429e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042a0:	e008      	b.n	80042b4 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a2:	f7fe f91f 	bl	80024e4 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d901      	bls.n	80042b4 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e00f      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042b4:	4b09      	ldr	r3, [pc, #36]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1f0      	bne.n	80042a2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80042c0:	4b06      	ldr	r3, [pc, #24]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80042c2:	68da      	ldr	r2, [r3, #12]
 80042c4:	4905      	ldr	r1, [pc, #20]	; (80042dc <HAL_RCC_OscConfig+0x7a8>)
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <HAL_RCC_OscConfig+0x7b0>)
 80042c8:	4013      	ands	r3, r2
 80042ca:	60cb      	str	r3, [r1, #12]
 80042cc:	e001      	b.n	80042d2 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e000      	b.n	80042d4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80042d2:	2300      	movs	r3, #0
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3720      	adds	r7, #32
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	40021000 	.word	0x40021000
 80042e0:	f99d808c 	.word	0xf99d808c
 80042e4:	feeefffc 	.word	0xfeeefffc

080042e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d101      	bne.n	80042fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e0e7      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042fc:	4b75      	ldr	r3, [pc, #468]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	683a      	ldr	r2, [r7, #0]
 8004306:	429a      	cmp	r2, r3
 8004308:	d910      	bls.n	800432c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800430a:	4b72      	ldr	r3, [pc, #456]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f023 0207 	bic.w	r2, r3, #7
 8004312:	4970      	ldr	r1, [pc, #448]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	4313      	orrs	r3, r2
 8004318:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800431a:	4b6e      	ldr	r3, [pc, #440]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	683a      	ldr	r2, [r7, #0]
 8004324:	429a      	cmp	r2, r3
 8004326:	d001      	beq.n	800432c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	e0cf      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0302 	and.w	r3, r3, #2
 8004334:	2b00      	cmp	r3, #0
 8004336:	d010      	beq.n	800435a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	4b66      	ldr	r3, [pc, #408]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004344:	429a      	cmp	r2, r3
 8004346:	d908      	bls.n	800435a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004348:	4b63      	ldr	r3, [pc, #396]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4960      	ldr	r1, [pc, #384]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004356:	4313      	orrs	r3, r2
 8004358:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0301 	and.w	r3, r3, #1
 8004362:	2b00      	cmp	r3, #0
 8004364:	d04c      	beq.n	8004400 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800436e:	4b5a      	ldr	r3, [pc, #360]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d121      	bne.n	80043be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e0a6      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2b02      	cmp	r3, #2
 8004384:	d107      	bne.n	8004396 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004386:	4b54      	ldr	r3, [pc, #336]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d115      	bne.n	80043be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e09a      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800439e:	4b4e      	ldr	r3, [pc, #312]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e08e      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043ae:	4b4a      	ldr	r3, [pc, #296]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d101      	bne.n	80043be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e086      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043be:	4b46      	ldr	r3, [pc, #280]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f023 0203 	bic.w	r2, r3, #3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	4943      	ldr	r1, [pc, #268]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 80043cc:	4313      	orrs	r3, r2
 80043ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043d0:	f7fe f888 	bl	80024e4 <HAL_GetTick>
 80043d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043d8:	f7fe f884 	bl	80024e4 <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e06e      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	4b3a      	ldr	r3, [pc, #232]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 020c 	and.w	r2, r3, #12
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d1eb      	bne.n	80043d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d010      	beq.n	800442e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	689a      	ldr	r2, [r3, #8]
 8004410:	4b31      	ldr	r3, [pc, #196]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004418:	429a      	cmp	r2, r3
 800441a:	d208      	bcs.n	800442e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800441c:	4b2e      	ldr	r3, [pc, #184]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	492b      	ldr	r1, [pc, #172]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 800442a:	4313      	orrs	r3, r2
 800442c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800442e:	4b29      	ldr	r3, [pc, #164]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	429a      	cmp	r2, r3
 800443a:	d210      	bcs.n	800445e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443c:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f023 0207 	bic.w	r2, r3, #7
 8004444:	4923      	ldr	r1, [pc, #140]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800444c:	4b21      	ldr	r3, [pc, #132]	; (80044d4 <HAL_RCC_ClockConfig+0x1ec>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d001      	beq.n	800445e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e036      	b.n	80044cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800446a:	4b1b      	ldr	r3, [pc, #108]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	4918      	ldr	r1, [pc, #96]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004478:	4313      	orrs	r3, r2
 800447a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0308 	and.w	r3, r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	d009      	beq.n	800449c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004488:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	00db      	lsls	r3, r3, #3
 8004496:	4910      	ldr	r1, [pc, #64]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 8004498:	4313      	orrs	r3, r2
 800449a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800449c:	f000 f824 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b0d      	ldr	r3, [pc, #52]	; (80044d8 <HAL_RCC_ClockConfig+0x1f0>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	490b      	ldr	r1, [pc, #44]	; (80044dc <HAL_RCC_ClockConfig+0x1f4>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	f003 031f 	and.w	r3, r3, #31
 80044b4:	fa22 f303 	lsr.w	r3, r2, r3
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <HAL_RCC_ClockConfig+0x1f8>)
 80044ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <HAL_RCC_ClockConfig+0x1fc>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f7fd ffbf 	bl	8002444 <HAL_InitTick>
 80044c6:	4603      	mov	r3, r0
 80044c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80044ca:	7afb      	ldrb	r3, [r7, #11]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3710      	adds	r7, #16
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}
 80044d4:	40022000 	.word	0x40022000
 80044d8:	40021000 	.word	0x40021000
 80044dc:	08007b3c 	.word	0x08007b3c
 80044e0:	200000bc 	.word	0x200000bc
 80044e4:	2000011c 	.word	0x2000011c

080044e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b089      	sub	sp, #36	; 0x24
 80044ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
 80044f2:	2300      	movs	r3, #0
 80044f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80044f6:	4b3e      	ldr	r3, [pc, #248]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f003 030c 	and.w	r3, r3, #12
 80044fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004500:	4b3b      	ldr	r3, [pc, #236]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	f003 0303 	and.w	r3, r3, #3
 8004508:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d005      	beq.n	800451c <HAL_RCC_GetSysClockFreq+0x34>
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d121      	bne.n	800455a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2b01      	cmp	r3, #1
 800451a:	d11e      	bne.n	800455a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800451c:	4b34      	ldr	r3, [pc, #208]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0308 	and.w	r3, r3, #8
 8004524:	2b00      	cmp	r3, #0
 8004526:	d107      	bne.n	8004538 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004528:	4b31      	ldr	r3, [pc, #196]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800452a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	e005      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004538:	4b2d      	ldr	r3, [pc, #180]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	091b      	lsrs	r3, r3, #4
 800453e:	f003 030f 	and.w	r3, r3, #15
 8004542:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004544:	4a2b      	ldr	r2, [pc, #172]	; (80045f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10d      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004554:	69fb      	ldr	r3, [r7, #28]
 8004556:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004558:	e00a      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	2b04      	cmp	r3, #4
 800455e:	d102      	bne.n	8004566 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004560:	4b25      	ldr	r3, [pc, #148]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004562:	61bb      	str	r3, [r7, #24]
 8004564:	e004      	b.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b08      	cmp	r3, #8
 800456a:	d101      	bne.n	8004570 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800456c:	4b23      	ldr	r3, [pc, #140]	; (80045fc <HAL_RCC_GetSysClockFreq+0x114>)
 800456e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	2b0c      	cmp	r3, #12
 8004574:	d134      	bne.n	80045e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004576:	4b1e      	ldr	r3, [pc, #120]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	f003 0303 	and.w	r3, r3, #3
 800457e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	2b02      	cmp	r3, #2
 8004584:	d003      	beq.n	800458e <HAL_RCC_GetSysClockFreq+0xa6>
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	2b03      	cmp	r3, #3
 800458a:	d003      	beq.n	8004594 <HAL_RCC_GetSysClockFreq+0xac>
 800458c:	e005      	b.n	800459a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800458e:	4b1a      	ldr	r3, [pc, #104]	; (80045f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004590:	617b      	str	r3, [r7, #20]
      break;
 8004592:	e005      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004594:	4b19      	ldr	r3, [pc, #100]	; (80045fc <HAL_RCC_GetSysClockFreq+0x114>)
 8004596:	617b      	str	r3, [r7, #20]
      break;
 8004598:	e002      	b.n	80045a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	617b      	str	r3, [r7, #20]
      break;
 800459e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045a0:	4b13      	ldr	r3, [pc, #76]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 0307 	and.w	r3, r3, #7
 80045aa:	3301      	adds	r3, #1
 80045ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80045ae:	4b10      	ldr	r3, [pc, #64]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	0a1b      	lsrs	r3, r3, #8
 80045b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	fb02 f203 	mul.w	r2, r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045c6:	4b0a      	ldr	r3, [pc, #40]	; (80045f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	0e5b      	lsrs	r3, r3, #25
 80045cc:	f003 0303 	and.w	r3, r3, #3
 80045d0:	3301      	adds	r3, #1
 80045d2:	005b      	lsls	r3, r3, #1
 80045d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	fbb2 f3f3 	udiv	r3, r2, r3
 80045de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80045e0:	69bb      	ldr	r3, [r7, #24]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	; 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40021000 	.word	0x40021000
 80045f4:	08007b54 	.word	0x08007b54
 80045f8:	00f42400 	.word	0x00f42400
 80045fc:	007a1200 	.word	0x007a1200

08004600 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004600:	b480      	push	{r7}
 8004602:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004604:	4b03      	ldr	r3, [pc, #12]	; (8004614 <HAL_RCC_GetHCLKFreq+0x14>)
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	200000bc 	.word	0x200000bc

08004618 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800461c:	f7ff fff0 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 8004620:	4602      	mov	r2, r0
 8004622:	4b06      	ldr	r3, [pc, #24]	; (800463c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	0a1b      	lsrs	r3, r3, #8
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	4904      	ldr	r1, [pc, #16]	; (8004640 <HAL_RCC_GetPCLK1Freq+0x28>)
 800462e:	5ccb      	ldrb	r3, [r1, r3]
 8004630:	f003 031f 	and.w	r3, r3, #31
 8004634:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004638:	4618      	mov	r0, r3
 800463a:	bd80      	pop	{r7, pc}
 800463c:	40021000 	.word	0x40021000
 8004640:	08007b4c 	.word	0x08007b4c

08004644 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004648:	f7ff ffda 	bl	8004600 <HAL_RCC_GetHCLKFreq>
 800464c:	4602      	mov	r2, r0
 800464e:	4b06      	ldr	r3, [pc, #24]	; (8004668 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	0adb      	lsrs	r3, r3, #11
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	4904      	ldr	r1, [pc, #16]	; (800466c <HAL_RCC_GetPCLK2Freq+0x28>)
 800465a:	5ccb      	ldrb	r3, [r1, r3]
 800465c:	f003 031f 	and.w	r3, r3, #31
 8004660:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004664:	4618      	mov	r0, r3
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40021000 	.word	0x40021000
 800466c:	08007b4c 	.word	0x08007b4c

08004670 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800467c:	4b2a      	ldr	r3, [pc, #168]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004688:	f7ff f9f0 	bl	8003a6c <HAL_PWREx_GetVoltageRange>
 800468c:	6178      	str	r0, [r7, #20]
 800468e:	e014      	b.n	80046ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004694:	4a24      	ldr	r2, [pc, #144]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800469a:	6593      	str	r3, [r2, #88]	; 0x58
 800469c:	4b22      	ldr	r3, [pc, #136]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800469e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046a4:	60fb      	str	r3, [r7, #12]
 80046a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80046a8:	f7ff f9e0 	bl	8003a6c <HAL_PWREx_GetVoltageRange>
 80046ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80046ae:	4b1e      	ldr	r3, [pc, #120]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b2:	4a1d      	ldr	r2, [pc, #116]	; (8004728 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80046b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046c0:	d10b      	bne.n	80046da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2b80      	cmp	r3, #128	; 0x80
 80046c6:	d919      	bls.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2ba0      	cmp	r3, #160	; 0xa0
 80046cc:	d902      	bls.n	80046d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046ce:	2302      	movs	r3, #2
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e013      	b.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046d4:	2301      	movs	r3, #1
 80046d6:	613b      	str	r3, [r7, #16]
 80046d8:	e010      	b.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2b80      	cmp	r3, #128	; 0x80
 80046de:	d902      	bls.n	80046e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80046e0:	2303      	movs	r3, #3
 80046e2:	613b      	str	r3, [r7, #16]
 80046e4:	e00a      	b.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b80      	cmp	r3, #128	; 0x80
 80046ea:	d102      	bne.n	80046f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80046ec:	2302      	movs	r3, #2
 80046ee:	613b      	str	r3, [r7, #16]
 80046f0:	e004      	b.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2b70      	cmp	r3, #112	; 0x70
 80046f6:	d101      	bne.n	80046fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80046f8:	2301      	movs	r3, #1
 80046fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 0207 	bic.w	r2, r3, #7
 8004704:	4909      	ldr	r1, [pc, #36]	; (800472c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800470c:	4b07      	ldr	r3, [pc, #28]	; (800472c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0307 	and.w	r3, r3, #7
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d001      	beq.n	800471e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	3718      	adds	r7, #24
 8004724:	46bd      	mov	sp, r7
 8004726:	bd80      	pop	{r7, pc}
 8004728:	40021000 	.word	0x40021000
 800472c:	40022000 	.word	0x40022000

08004730 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004738:	2300      	movs	r3, #0
 800473a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800473c:	2300      	movs	r3, #0
 800473e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004748:	2b00      	cmp	r3, #0
 800474a:	d041      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004750:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004754:	d02a      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004756:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800475a:	d824      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800475c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004760:	d008      	beq.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004762:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004766:	d81e      	bhi.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800476c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004770:	d010      	beq.n	8004794 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004772:	e018      	b.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004774:	4b86      	ldr	r3, [pc, #536]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004776:	68db      	ldr	r3, [r3, #12]
 8004778:	4a85      	ldr	r2, [pc, #532]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800477a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800477e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004780:	e015      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	3304      	adds	r3, #4
 8004786:	2100      	movs	r1, #0
 8004788:	4618      	mov	r0, r3
 800478a:	f000 fabb 	bl	8004d04 <RCCEx_PLLSAI1_Config>
 800478e:	4603      	mov	r3, r0
 8004790:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004792:	e00c      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3320      	adds	r3, #32
 8004798:	2100      	movs	r1, #0
 800479a:	4618      	mov	r0, r3
 800479c:	f000 fba6 	bl	8004eec <RCCEx_PLLSAI2_Config>
 80047a0:	4603      	mov	r3, r0
 80047a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80047a4:	e003      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	74fb      	strb	r3, [r7, #19]
      break;
 80047aa:	e000      	b.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80047ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80047ae:	7cfb      	ldrb	r3, [r7, #19]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10b      	bne.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80047b4:	4b76      	ldr	r3, [pc, #472]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c2:	4973      	ldr	r1, [pc, #460]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c4:	4313      	orrs	r3, r2
 80047c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80047ca:	e001      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d041      	beq.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047e4:	d02a      	beq.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80047e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80047ea:	d824      	bhi.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f0:	d008      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80047f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80047f6:	d81e      	bhi.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80047fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004800:	d010      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004802:	e018      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004804:	4b62      	ldr	r3, [pc, #392]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	4a61      	ldr	r2, [pc, #388]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800480a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800480e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004810:	e015      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fa73 	bl	8004d04 <RCCEx_PLLSAI1_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004822:	e00c      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3320      	adds	r3, #32
 8004828:	2100      	movs	r1, #0
 800482a:	4618      	mov	r0, r3
 800482c:	f000 fb5e 	bl	8004eec <RCCEx_PLLSAI2_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004834:	e003      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	74fb      	strb	r3, [r7, #19]
      break;
 800483a:	e000      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800483c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800483e:	7cfb      	ldrb	r3, [r7, #19]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d10b      	bne.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004844:	4b52      	ldr	r3, [pc, #328]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800484a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004852:	494f      	ldr	r1, [pc, #316]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004854:	4313      	orrs	r3, r2
 8004856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800485a:	e001      	b.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800485c:	7cfb      	ldrb	r3, [r7, #19]
 800485e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80a0 	beq.w	80049ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800487e:	2301      	movs	r3, #1
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004882:	2300      	movs	r3, #0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004888:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800488c:	4a40      	ldr	r2, [pc, #256]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800488e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004892:	6593      	str	r3, [r2, #88]	; 0x58
 8004894:	4b3e      	ldr	r3, [pc, #248]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489c:	60bb      	str	r3, [r7, #8]
 800489e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048a0:	2301      	movs	r3, #1
 80048a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048a4:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a3a      	ldr	r2, [pc, #232]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80048b0:	f7fd fe18 	bl	80024e4 <HAL_GetTick>
 80048b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048b6:	e009      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048b8:	f7fd fe14 	bl	80024e4 <HAL_GetTick>
 80048bc:	4602      	mov	r2, r0
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	1ad3      	subs	r3, r2, r3
 80048c2:	2b02      	cmp	r3, #2
 80048c4:	d902      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80048c6:	2303      	movs	r3, #3
 80048c8:	74fb      	strb	r3, [r7, #19]
        break;
 80048ca:	e005      	b.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80048cc:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ef      	beq.n	80048b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80048d8:	7cfb      	ldrb	r3, [r7, #19]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d15c      	bne.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048de:	4b2c      	ldr	r3, [pc, #176]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d01f      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d019      	beq.n	8004930 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048fc:	4b24      	ldr	r3, [pc, #144]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004902:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004906:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800490a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800490e:	4a20      	ldr	r2, [pc, #128]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004910:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	4a1c      	ldr	r2, [pc, #112]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004920:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004928:	4a19      	ldr	r2, [pc, #100]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f003 0301 	and.w	r3, r3, #1
 8004936:	2b00      	cmp	r3, #0
 8004938:	d016      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800493a:	f7fd fdd3 	bl	80024e4 <HAL_GetTick>
 800493e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004940:	e00b      	b.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004942:	f7fd fdcf 	bl	80024e4 <HAL_GetTick>
 8004946:	4602      	mov	r2, r0
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	1ad3      	subs	r3, r2, r3
 800494c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004950:	4293      	cmp	r3, r2
 8004952:	d902      	bls.n	800495a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	74fb      	strb	r3, [r7, #19]
            break;
 8004958:	e006      	b.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800495a:	4b0d      	ldr	r3, [pc, #52]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800495c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004960:	f003 0302 	and.w	r3, r3, #2
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0ec      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004968:	7cfb      	ldrb	r3, [r7, #19]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d10c      	bne.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800496e:	4b08      	ldr	r3, [pc, #32]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497e:	4904      	ldr	r1, [pc, #16]	; (8004990 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004986:	e009      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004988:	7cfb      	ldrb	r3, [r7, #19]
 800498a:	74bb      	strb	r3, [r7, #18]
 800498c:	e006      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800498e:	bf00      	nop
 8004990:	40021000 	.word	0x40021000
 8004994:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004998:	7cfb      	ldrb	r3, [r7, #19]
 800499a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800499c:	7c7b      	ldrb	r3, [r7, #17]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d105      	bne.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049a2:	4b9e      	ldr	r3, [pc, #632]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a6:	4a9d      	ldr	r2, [pc, #628]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00a      	beq.n	80049d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049ba:	4b98      	ldr	r3, [pc, #608]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c0:	f023 0203 	bic.w	r2, r3, #3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c8:	4994      	ldr	r1, [pc, #592]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d00a      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049dc:	4b8f      	ldr	r3, [pc, #572]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e2:	f023 020c 	bic.w	r2, r3, #12
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ea:	498c      	ldr	r1, [pc, #560]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0304 	and.w	r3, r3, #4
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d00a      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049fe:	4b87      	ldr	r3, [pc, #540]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a04:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0c:	4983      	ldr	r1, [pc, #524]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d00a      	beq.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a20:	4b7e      	ldr	r3, [pc, #504]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2e:	497b      	ldr	r1, [pc, #492]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a30:	4313      	orrs	r3, r2
 8004a32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0310 	and.w	r3, r3, #16
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00a      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a42:	4b76      	ldr	r3, [pc, #472]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a50:	4972      	ldr	r1, [pc, #456]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0320 	and.w	r3, r3, #32
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a64:	4b6d      	ldr	r3, [pc, #436]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a72:	496a      	ldr	r1, [pc, #424]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a86:	4b65      	ldr	r3, [pc, #404]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a94:	4961      	ldr	r1, [pc, #388]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00a      	beq.n	8004abe <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004aa8:	4b5c      	ldr	r3, [pc, #368]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab6:	4959      	ldr	r1, [pc, #356]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab8:	4313      	orrs	r3, r2
 8004aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d00a      	beq.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004aca:	4b54      	ldr	r3, [pc, #336]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ad0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad8:	4950      	ldr	r1, [pc, #320]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	4313      	orrs	r3, r2
 8004adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004aec:	4b4b      	ldr	r3, [pc, #300]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afa:	4948      	ldr	r1, [pc, #288]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afc:	4313      	orrs	r3, r2
 8004afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00a      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b0e:	4b43      	ldr	r3, [pc, #268]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b14:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	493f      	ldr	r1, [pc, #252]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d028      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b30:	4b3a      	ldr	r3, [pc, #232]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b3e:	4937      	ldr	r1, [pc, #220]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b4e:	d106      	bne.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b50:	4b32      	ldr	r3, [pc, #200]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a31      	ldr	r2, [pc, #196]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b5a:	60d3      	str	r3, [r2, #12]
 8004b5c:	e011      	b.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b62:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	3304      	adds	r3, #4
 8004b6c:	2101      	movs	r1, #1
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 f8c8 	bl	8004d04 <RCCEx_PLLSAI1_Config>
 8004b74:	4603      	mov	r3, r0
 8004b76:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004b7e:	7cfb      	ldrb	r3, [r7, #19]
 8004b80:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d028      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b8e:	4b23      	ldr	r3, [pc, #140]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9c:	491f      	ldr	r1, [pc, #124]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bac:	d106      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bae:	4b1b      	ldr	r3, [pc, #108]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	4a1a      	ldr	r2, [pc, #104]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bb8:	60d3      	str	r3, [r2, #12]
 8004bba:	e011      	b.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bc4:	d10c      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	3304      	adds	r3, #4
 8004bca:	2101      	movs	r1, #1
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f000 f899 	bl	8004d04 <RCCEx_PLLSAI1_Config>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004bd6:	7cfb      	ldrb	r3, [r7, #19]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004bdc:	7cfb      	ldrb	r3, [r7, #19]
 8004bde:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d02b      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bfa:	4908      	ldr	r1, [pc, #32]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfc:	4313      	orrs	r3, r2
 8004bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c0a:	d109      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c0c:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a02      	ldr	r2, [pc, #8]	; (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c16:	60d3      	str	r3, [r2, #12]
 8004c18:	e014      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c28:	d10c      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	2101      	movs	r1, #1
 8004c30:	4618      	mov	r0, r3
 8004c32:	f000 f867 	bl	8004d04 <RCCEx_PLLSAI1_Config>
 8004c36:	4603      	mov	r3, r0
 8004c38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c3a:	7cfb      	ldrb	r3, [r7, #19]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d001      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004c40:	7cfb      	ldrb	r3, [r7, #19]
 8004c42:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d02f      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c50:	4b2b      	ldr	r3, [pc, #172]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c5e:	4928      	ldr	r1, [pc, #160]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004c60:	4313      	orrs	r3, r2
 8004c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c6a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c6e:	d10d      	bne.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	3304      	adds	r3, #4
 8004c74:	2102      	movs	r1, #2
 8004c76:	4618      	mov	r0, r3
 8004c78:	f000 f844 	bl	8004d04 <RCCEx_PLLSAI1_Config>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c80:	7cfb      	ldrb	r3, [r7, #19]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d014      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004c86:	7cfb      	ldrb	r3, [r7, #19]
 8004c88:	74bb      	strb	r3, [r7, #18]
 8004c8a:	e011      	b.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004c90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3320      	adds	r3, #32
 8004c9a:	2102      	movs	r1, #2
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f000 f925 	bl	8004eec <RCCEx_PLLSAI2_Config>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004cac:	7cfb      	ldrb	r3, [r7, #19]
 8004cae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cbc:	4b10      	ldr	r3, [pc, #64]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cca:	490d      	ldr	r1, [pc, #52]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004cee:	4904      	ldr	r1, [pc, #16]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004cf0:	4313      	orrs	r3, r2
 8004cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004cf6:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	40021000 	.word	0x40021000

08004d04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d0e:	2300      	movs	r3, #0
 8004d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d12:	4b75      	ldr	r3, [pc, #468]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d14:	68db      	ldr	r3, [r3, #12]
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d018      	beq.n	8004d50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d1e:	4b72      	ldr	r3, [pc, #456]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d20:	68db      	ldr	r3, [r3, #12]
 8004d22:	f003 0203 	and.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d10d      	bne.n	8004d4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
       ||
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d009      	beq.n	8004d4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d36:	4b6c      	ldr	r3, [pc, #432]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	1c5a      	adds	r2, r3, #1
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
       ||
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d047      	beq.n	8004dda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
 8004d4e:	e044      	b.n	8004dda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2b03      	cmp	r3, #3
 8004d56:	d018      	beq.n	8004d8a <RCCEx_PLLSAI1_Config+0x86>
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d825      	bhi.n	8004da8 <RCCEx_PLLSAI1_Config+0xa4>
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d002      	beq.n	8004d66 <RCCEx_PLLSAI1_Config+0x62>
 8004d60:	2b02      	cmp	r3, #2
 8004d62:	d009      	beq.n	8004d78 <RCCEx_PLLSAI1_Config+0x74>
 8004d64:	e020      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d66:	4b60      	ldr	r3, [pc, #384]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d11d      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d76:	e01a      	b.n	8004dae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d78:	4b5b      	ldr	r3, [pc, #364]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d116      	bne.n	8004db2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d88:	e013      	b.n	8004db2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d8a:	4b57      	ldr	r3, [pc, #348]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d10f      	bne.n	8004db6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d96:	4b54      	ldr	r3, [pc, #336]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004da2:	2301      	movs	r3, #1
 8004da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004da6:	e006      	b.n	8004db6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      break;
 8004dac:	e004      	b.n	8004db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dae:	bf00      	nop
 8004db0:	e002      	b.n	8004db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004db2:	bf00      	nop
 8004db4:	e000      	b.n	8004db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d10d      	bne.n	8004dda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004dbe:	4b4a      	ldr	r3, [pc, #296]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6819      	ldr	r1, [r3, #0]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	430b      	orrs	r3, r1
 8004dd4:	4944      	ldr	r1, [pc, #272]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d17d      	bne.n	8004edc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004de0:	4b41      	ldr	r3, [pc, #260]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a40      	ldr	r2, [pc, #256]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dec:	f7fd fb7a 	bl	80024e4 <HAL_GetTick>
 8004df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004df2:	e009      	b.n	8004e08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004df4:	f7fd fb76 	bl	80024e4 <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68bb      	ldr	r3, [r7, #8]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d902      	bls.n	8004e08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004e02:	2303      	movs	r3, #3
 8004e04:	73fb      	strb	r3, [r7, #15]
        break;
 8004e06:	e005      	b.n	8004e14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e08:	4b37      	ldr	r3, [pc, #220]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ef      	bne.n	8004df4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e14:	7bfb      	ldrb	r3, [r7, #15]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d160      	bne.n	8004edc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d111      	bne.n	8004e44 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e20:	4b31      	ldr	r3, [pc, #196]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	6892      	ldr	r2, [r2, #8]
 8004e30:	0211      	lsls	r1, r2, #8
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68d2      	ldr	r2, [r2, #12]
 8004e36:	0912      	lsrs	r2, r2, #4
 8004e38:	0452      	lsls	r2, r2, #17
 8004e3a:	430a      	orrs	r2, r1
 8004e3c:	492a      	ldr	r1, [pc, #168]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	610b      	str	r3, [r1, #16]
 8004e42:	e027      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d112      	bne.n	8004e70 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e4a:	4b27      	ldr	r3, [pc, #156]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e52:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	6892      	ldr	r2, [r2, #8]
 8004e5a:	0211      	lsls	r1, r2, #8
 8004e5c:	687a      	ldr	r2, [r7, #4]
 8004e5e:	6912      	ldr	r2, [r2, #16]
 8004e60:	0852      	lsrs	r2, r2, #1
 8004e62:	3a01      	subs	r2, #1
 8004e64:	0552      	lsls	r2, r2, #21
 8004e66:	430a      	orrs	r2, r1
 8004e68:	491f      	ldr	r1, [pc, #124]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	610b      	str	r3, [r1, #16]
 8004e6e:	e011      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e70:	4b1d      	ldr	r3, [pc, #116]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6892      	ldr	r2, [r2, #8]
 8004e80:	0211      	lsls	r1, r2, #8
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	6952      	ldr	r2, [r2, #20]
 8004e86:	0852      	lsrs	r2, r2, #1
 8004e88:	3a01      	subs	r2, #1
 8004e8a:	0652      	lsls	r2, r2, #25
 8004e8c:	430a      	orrs	r2, r1
 8004e8e:	4916      	ldr	r1, [pc, #88]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e94:	4b14      	ldr	r3, [pc, #80]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea0:	f7fd fb20 	bl	80024e4 <HAL_GetTick>
 8004ea4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ea6:	e009      	b.n	8004ebc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ea8:	f7fd fb1c 	bl	80024e4 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d902      	bls.n	8004ebc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	73fb      	strb	r3, [r7, #15]
          break;
 8004eba:	e005      	b.n	8004ec8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ebc:	4b0a      	ldr	r3, [pc, #40]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0ef      	beq.n	8004ea8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ec8:	7bfb      	ldrb	r3, [r7, #15]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	699b      	ldr	r3, [r3, #24]
 8004ed6:	4904      	ldr	r1, [pc, #16]	; (8004ee8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3710      	adds	r7, #16
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	40021000 	.word	0x40021000

08004eec <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b084      	sub	sp, #16
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004efa:	4b6a      	ldr	r3, [pc, #424]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d018      	beq.n	8004f38 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004f06:	4b67      	ldr	r3, [pc, #412]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	f003 0203 	and.w	r2, r3, #3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d10d      	bne.n	8004f32 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
       ||
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d009      	beq.n	8004f32 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004f1e:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	091b      	lsrs	r3, r3, #4
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	1c5a      	adds	r2, r3, #1
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d047      	beq.n	8004fc2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	73fb      	strb	r3, [r7, #15]
 8004f36:	e044      	b.n	8004fc2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d018      	beq.n	8004f72 <RCCEx_PLLSAI2_Config+0x86>
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d825      	bhi.n	8004f90 <RCCEx_PLLSAI2_Config+0xa4>
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d002      	beq.n	8004f4e <RCCEx_PLLSAI2_Config+0x62>
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d009      	beq.n	8004f60 <RCCEx_PLLSAI2_Config+0x74>
 8004f4c:	e020      	b.n	8004f90 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f4e:	4b55      	ldr	r3, [pc, #340]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d11d      	bne.n	8004f96 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f5e:	e01a      	b.n	8004f96 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f60:	4b50      	ldr	r3, [pc, #320]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d116      	bne.n	8004f9a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f70:	e013      	b.n	8004f9a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f72:	4b4c      	ldr	r3, [pc, #304]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10f      	bne.n	8004f9e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f7e:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d109      	bne.n	8004f9e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004f8e:	e006      	b.n	8004f9e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      break;
 8004f94:	e004      	b.n	8004fa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f96:	bf00      	nop
 8004f98:	e002      	b.n	8004fa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004f9e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fa0:	7bfb      	ldrb	r3, [r7, #15]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10d      	bne.n	8004fc2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fa6:	4b3f      	ldr	r3, [pc, #252]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6819      	ldr	r1, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	3b01      	subs	r3, #1
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	430b      	orrs	r3, r1
 8004fbc:	4939      	ldr	r1, [pc, #228]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fc2:	7bfb      	ldrb	r3, [r7, #15]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d167      	bne.n	8005098 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a35      	ldr	r2, [pc, #212]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fd4:	f7fd fa86 	bl	80024e4 <HAL_GetTick>
 8004fd8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fda:	e009      	b.n	8004ff0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fdc:	f7fd fa82 	bl	80024e4 <HAL_GetTick>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	1ad3      	subs	r3, r2, r3
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d902      	bls.n	8004ff0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	73fb      	strb	r3, [r7, #15]
        break;
 8004fee:	e005      	b.n	8004ffc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ff0:	4b2c      	ldr	r3, [pc, #176]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ef      	bne.n	8004fdc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ffc:	7bfb      	ldrb	r3, [r7, #15]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d14a      	bne.n	8005098 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d111      	bne.n	800502c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005008:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800500a:	695b      	ldr	r3, [r3, #20]
 800500c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6892      	ldr	r2, [r2, #8]
 8005018:	0211      	lsls	r1, r2, #8
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	68d2      	ldr	r2, [r2, #12]
 800501e:	0912      	lsrs	r2, r2, #4
 8005020:	0452      	lsls	r2, r2, #17
 8005022:	430a      	orrs	r2, r1
 8005024:	491f      	ldr	r1, [pc, #124]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005026:	4313      	orrs	r3, r2
 8005028:	614b      	str	r3, [r1, #20]
 800502a:	e011      	b.n	8005050 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800502c:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502e:	695b      	ldr	r3, [r3, #20]
 8005030:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005034:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	6892      	ldr	r2, [r2, #8]
 800503c:	0211      	lsls	r1, r2, #8
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	6912      	ldr	r2, [r2, #16]
 8005042:	0852      	lsrs	r2, r2, #1
 8005044:	3a01      	subs	r2, #1
 8005046:	0652      	lsls	r2, r2, #25
 8005048:	430a      	orrs	r2, r1
 800504a:	4916      	ldr	r1, [pc, #88]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800504c:	4313      	orrs	r3, r2
 800504e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005050:	4b14      	ldr	r3, [pc, #80]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7fd fa42 	bl	80024e4 <HAL_GetTick>
 8005060:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005062:	e009      	b.n	8005078 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005064:	f7fd fa3e 	bl	80024e4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d902      	bls.n	8005078 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	73fb      	strb	r3, [r7, #15]
          break;
 8005076:	e005      	b.n	8005084 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005078:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ef      	beq.n	8005064 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	4904      	ldr	r1, [pc, #16]	; (80050a4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005094:	4313      	orrs	r3, r2
 8005096:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005098:	7bfb      	ldrb	r3, [r7, #15]
}
 800509a:	4618      	mov	r0, r3
 800509c:	3710      	adds	r7, #16
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	40021000 	.word	0x40021000

080050a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e040      	b.n	800513c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc f9e4 	bl	8001498 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2224      	movs	r2, #36	; 0x24
 80050d4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f022 0201 	bic.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fc18 	bl	800591c <UART_SetConfig>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e022      	b.n	800513c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fe96 	bl	8005e30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005112:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	689a      	ldr	r2, [r3, #8]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005122:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 ff1d 	bl	8005f74 <UART_CheckIdleState>
 800513a:	4603      	mov	r3, r0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3708      	adds	r7, #8
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08a      	sub	sp, #40	; 0x28
 8005148:	af02      	add	r7, sp, #8
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005158:	2b20      	cmp	r3, #32
 800515a:	f040 8082 	bne.w	8005262 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d002      	beq.n	800516a <HAL_UART_Transmit+0x26>
 8005164:	88fb      	ldrh	r3, [r7, #6]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d101      	bne.n	800516e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800516a:	2301      	movs	r3, #1
 800516c:	e07a      	b.n	8005264 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_UART_Transmit+0x38>
 8005178:	2302      	movs	r3, #2
 800517a:	e073      	b.n	8005264 <HAL_UART_Transmit+0x120>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2221      	movs	r2, #33	; 0x21
 8005190:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005192:	f7fd f9a7 	bl	80024e4 <HAL_GetTick>
 8005196:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	88fa      	ldrh	r2, [r7, #6]
 800519c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	88fa      	ldrh	r2, [r7, #6]
 80051a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	689b      	ldr	r3, [r3, #8]
 80051ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051b0:	d108      	bne.n	80051c4 <HAL_UART_Transmit+0x80>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d104      	bne.n	80051c4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80051ba:	2300      	movs	r3, #0
 80051bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	61bb      	str	r3, [r7, #24]
 80051c2:	e003      	b.n	80051cc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051c8:	2300      	movs	r3, #0
 80051ca:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80051d4:	e02d      	b.n	8005232 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	9300      	str	r3, [sp, #0]
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2200      	movs	r2, #0
 80051de:	2180      	movs	r1, #128	; 0x80
 80051e0:	68f8      	ldr	r0, [r7, #12]
 80051e2:	f000 ff10 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d001      	beq.n	80051f0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80051ec:	2303      	movs	r3, #3
 80051ee:	e039      	b.n	8005264 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d10b      	bne.n	800520e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	881a      	ldrh	r2, [r3, #0]
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005202:	b292      	uxth	r2, r2
 8005204:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	3302      	adds	r3, #2
 800520a:	61bb      	str	r3, [r7, #24]
 800520c:	e008      	b.n	8005220 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	b292      	uxth	r2, r2
 8005218:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800521a:	69fb      	ldr	r3, [r7, #28]
 800521c:	3301      	adds	r3, #1
 800521e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005226:	b29b      	uxth	r3, r3
 8005228:	3b01      	subs	r3, #1
 800522a:	b29a      	uxth	r2, r3
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005238:	b29b      	uxth	r3, r3
 800523a:	2b00      	cmp	r3, #0
 800523c:	d1cb      	bne.n	80051d6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	2200      	movs	r2, #0
 8005246:	2140      	movs	r1, #64	; 0x40
 8005248:	68f8      	ldr	r0, [r7, #12]
 800524a:	f000 fedc 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d001      	beq.n	8005258 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005254:	2303      	movs	r3, #3
 8005256:	e005      	b.n	8005264 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2220      	movs	r2, #32
 800525c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800525e:	2300      	movs	r3, #0
 8005260:	e000      	b.n	8005264 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005262:	2302      	movs	r3, #2
  }
}
 8005264:	4618      	mov	r0, r3
 8005266:	3720      	adds	r7, #32
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08a      	sub	sp, #40	; 0x28
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	4613      	mov	r3, r2
 8005278:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800527e:	2b20      	cmp	r3, #32
 8005280:	d142      	bne.n	8005308 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	2b00      	cmp	r3, #0
 8005286:	d002      	beq.n	800528e <HAL_UART_Receive_IT+0x22>
 8005288:	88fb      	ldrh	r3, [r7, #6]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e03b      	b.n	800530a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005298:	2b01      	cmp	r3, #1
 800529a:	d101      	bne.n	80052a0 <HAL_UART_Receive_IT+0x34>
 800529c:	2302      	movs	r3, #2
 800529e:	e034      	b.n	800530a <HAL_UART_Receive_IT+0x9e>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a18      	ldr	r2, [pc, #96]	; (8005314 <HAL_UART_Receive_IT+0xa8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01f      	beq.n	80052f8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d018      	beq.n	80052f8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	613b      	str	r3, [r7, #16]
   return(result);
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	461a      	mov	r2, r3
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	623b      	str	r3, [r7, #32]
 80052e6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	69f9      	ldr	r1, [r7, #28]
 80052ea:	6a3a      	ldr	r2, [r7, #32]
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e6      	bne.n	80052c6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	461a      	mov	r2, r3
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	68f8      	ldr	r0, [r7, #12]
 8005300:	f000 ff46 	bl	8006190 <UART_Start_Receive_IT>
 8005304:	4603      	mov	r3, r0
 8005306:	e000      	b.n	800530a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005308:	2302      	movs	r3, #2
  }
}
 800530a:	4618      	mov	r0, r3
 800530c:	3728      	adds	r7, #40	; 0x28
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	40008000 	.word	0x40008000

08005318 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b0ba      	sub	sp, #232	; 0xe8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	69db      	ldr	r3, [r3, #28]
 8005326:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800533e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005342:	f640 030f 	movw	r3, #2063	; 0x80f
 8005346:	4013      	ands	r3, r2
 8005348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800534c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005350:	2b00      	cmp	r3, #0
 8005352:	d115      	bne.n	8005380 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005354:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005358:	f003 0320 	and.w	r3, r3, #32
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00f      	beq.n	8005380 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005360:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005364:	f003 0320 	and.w	r3, r3, #32
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005370:	2b00      	cmp	r3, #0
 8005372:	f000 82a6 	beq.w	80058c2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	4798      	blx	r3
      }
      return;
 800537e:	e2a0      	b.n	80058c2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005380:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005384:	2b00      	cmp	r3, #0
 8005386:	f000 8117 	beq.w	80055b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800538a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005396:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800539a:	4b85      	ldr	r3, [pc, #532]	; (80055b0 <HAL_UART_IRQHandler+0x298>)
 800539c:	4013      	ands	r3, r2
 800539e:	2b00      	cmp	r3, #0
 80053a0:	f000 810a 	beq.w	80055b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d011      	beq.n	80053d4 <HAL_UART_IRQHandler+0xbc>
 80053b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00b      	beq.n	80053d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2201      	movs	r2, #1
 80053c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ca:	f043 0201 	orr.w	r2, r3, #1
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d011      	beq.n	8005404 <HAL_UART_IRQHandler+0xec>
 80053e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053e4:	f003 0301 	and.w	r3, r3, #1
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00b      	beq.n	8005404 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2202      	movs	r2, #2
 80053f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	f043 0204 	orr.w	r2, r3, #4
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b00      	cmp	r3, #0
 800540e:	d011      	beq.n	8005434 <HAL_UART_IRQHandler+0x11c>
 8005410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d00b      	beq.n	8005434 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	2204      	movs	r2, #4
 8005422:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	f043 0202 	orr.w	r2, r3, #2
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005438:	f003 0308 	and.w	r3, r3, #8
 800543c:	2b00      	cmp	r3, #0
 800543e:	d017      	beq.n	8005470 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005440:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b00      	cmp	r3, #0
 800544a:	d105      	bne.n	8005458 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800544c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005450:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2208      	movs	r2, #8
 800545e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005466:	f043 0208 	orr.w	r2, r3, #8
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005470:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005474:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005478:	2b00      	cmp	r3, #0
 800547a:	d012      	beq.n	80054a2 <HAL_UART_IRQHandler+0x18a>
 800547c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d00c      	beq.n	80054a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005490:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005498:	f043 0220 	orr.w	r2, r3, #32
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 820c 	beq.w	80058c6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80054ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b2:	f003 0320 	and.w	r3, r3, #32
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d00d      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80054ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054be:	f003 0320 	and.w	r3, r3, #32
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054ea:	2b40      	cmp	r3, #64	; 0x40
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80054f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d04f      	beq.n	800559a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 ff12 	bl	8006324 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800550a:	2b40      	cmp	r3, #64	; 0x40
 800550c:	d141      	bne.n	8005592 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	3308      	adds	r3, #8
 8005514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005518:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005528:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800552c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	3308      	adds	r3, #8
 8005536:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800553a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800553e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005542:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005546:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005552:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d1d9      	bne.n	800550e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555e:	2b00      	cmp	r3, #0
 8005560:	d013      	beq.n	800558a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <HAL_UART_IRQHandler+0x29c>)
 8005568:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800556e:	4618      	mov	r0, r3
 8005570:	f7fd f937 	bl	80027e2 <HAL_DMA_Abort_IT>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d017      	beq.n	80055aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005584:	4610      	mov	r0, r2
 8005586:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	e00f      	b.n	80055aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f9b0 	bl	80058f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005590:	e00b      	b.n	80055aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f9ac 	bl	80058f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005598:	e007      	b.n	80055aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f000 f9a8 	bl	80058f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80055a8:	e18d      	b.n	80058c6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055aa:	bf00      	nop
    return;
 80055ac:	e18b      	b.n	80058c6 <HAL_UART_IRQHandler+0x5ae>
 80055ae:	bf00      	nop
 80055b0:	04000120 	.word	0x04000120
 80055b4:	080063eb 	.word	0x080063eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 8146 	bne.w	800584e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 813f 	beq.w	800584e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 8138 	beq.w	800584e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2210      	movs	r2, #16
 80055e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	f040 80b4 	bne.w	800575e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005602:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 815f 	beq.w	80058ca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005612:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005616:	429a      	cmp	r2, r3
 8005618:	f080 8157 	bcs.w	80058ca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005622:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0320 	and.w	r3, r3, #32
 8005632:	2b00      	cmp	r3, #0
 8005634:	f040 8085 	bne.w	8005742 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800564c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005650:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005654:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	461a      	mov	r2, r3
 800565e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005662:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005666:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800566a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800566e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005672:	e841 2300 	strex	r3, r2, [r1]
 8005676:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800567a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800567e:	2b00      	cmp	r3, #0
 8005680:	d1da      	bne.n	8005638 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	3308      	adds	r3, #8
 8005688:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005692:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005694:	f023 0301 	bic.w	r3, r3, #1
 8005698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	3308      	adds	r3, #8
 80056a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d1e1      	bne.n	8005682 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	3308      	adds	r3, #8
 80056c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056c8:	e853 3f00 	ldrex	r3, [r3]
 80056cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	3308      	adds	r3, #8
 80056de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e3      	bne.n	80056be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2220      	movs	r2, #32
 80056fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005708:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570a:	e853 3f00 	ldrex	r3, [r3]
 800570e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005712:	f023 0310 	bic.w	r3, r3, #16
 8005716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	461a      	mov	r2, r3
 8005720:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005724:	65bb      	str	r3, [r7, #88]	; 0x58
 8005726:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005728:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800572a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800572c:	e841 2300 	strex	r3, r2, [r1]
 8005730:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005732:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005734:	2b00      	cmp	r3, #0
 8005736:	d1e4      	bne.n	8005702 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573c:	4618      	mov	r0, r3
 800573e:	f7fd f812 	bl	8002766 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800574e:	b29b      	uxth	r3, r3
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	b29b      	uxth	r3, r3
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f8d4 	bl	8005904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800575c:	e0b5      	b.n	80058ca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800576a:	b29b      	uxth	r3, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005778:	b29b      	uxth	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	f000 80a7 	beq.w	80058ce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005780:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005784:	2b00      	cmp	r3, #0
 8005786:	f000 80a2 	beq.w	80058ce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800579a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800579e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	461a      	mov	r2, r3
 80057a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80057ac:	647b      	str	r3, [r7, #68]	; 0x44
 80057ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057b4:	e841 2300 	strex	r3, r2, [r1]
 80057b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e4      	bne.n	800578a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3308      	adds	r3, #8
 80057c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ca:	e853 3f00 	ldrex	r3, [r3]
 80057ce:	623b      	str	r3, [r7, #32]
   return(result);
 80057d0:	6a3b      	ldr	r3, [r7, #32]
 80057d2:	f023 0301 	bic.w	r3, r3, #1
 80057d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	3308      	adds	r3, #8
 80057e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057e4:	633a      	str	r2, [r7, #48]	; 0x30
 80057e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057ec:	e841 2300 	strex	r3, r2, [r1]
 80057f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d1e3      	bne.n	80057c0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2220      	movs	r2, #32
 80057fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	e853 3f00 	ldrex	r3, [r3]
 8005816:	60fb      	str	r3, [r7, #12]
   return(result);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f023 0310 	bic.w	r3, r3, #16
 800581e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800582c:	61fb      	str	r3, [r7, #28]
 800582e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005830:	69b9      	ldr	r1, [r7, #24]
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	e841 2300 	strex	r3, r2, [r1]
 8005838:	617b      	str	r3, [r7, #20]
   return(result);
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1e4      	bne.n	800580a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005840:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005844:	4619      	mov	r1, r3
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f85c 	bl	8005904 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800584c:	e03f      	b.n	80058ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800584e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005852:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00e      	beq.n	8005878 <HAL_UART_IRQHandler+0x560>
 800585a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800585e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800586e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f000 ff5a 	bl	800672a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005876:	e02d      	b.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00e      	beq.n	80058a2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588c:	2b00      	cmp	r3, #0
 800588e:	d008      	beq.n	80058a2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005894:	2b00      	cmp	r3, #0
 8005896:	d01c      	beq.n	80058d2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
    }
    return;
 80058a0:	e017      	b.n	80058d2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80058a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d012      	beq.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
 80058ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fdab 	bl	8006416 <UART_EndTransmit_IT>
    return;
 80058c0:	e008      	b.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80058c2:	bf00      	nop
 80058c4:	e006      	b.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80058c6:	bf00      	nop
 80058c8:	e004      	b.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80058ca:	bf00      	nop
 80058cc:	e002      	b.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80058ce:	bf00      	nop
 80058d0:	e000      	b.n	80058d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80058d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80058d4:	37e8      	adds	r7, #232	; 0xe8
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop

080058dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	460b      	mov	r3, r1
 800590e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800591c:	b5b0      	push	{r4, r5, r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	689a      	ldr	r2, [r3, #8]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	431a      	orrs	r2, r3
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	4313      	orrs	r3, r2
 800593e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	4bad      	ldr	r3, [pc, #692]	; (8005bfc <UART_SetConfig+0x2e0>)
 8005948:	4013      	ands	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	6812      	ldr	r2, [r2, #0]
 800594e:	69f9      	ldr	r1, [r7, #28]
 8005950:	430b      	orrs	r3, r1
 8005952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4aa2      	ldr	r2, [pc, #648]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d004      	beq.n	8005984 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6a1b      	ldr	r3, [r3, #32]
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	4313      	orrs	r3, r2
 8005982:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	430a      	orrs	r2, r1
 8005996:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a99      	ldr	r2, [pc, #612]	; (8005c04 <UART_SetConfig+0x2e8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d121      	bne.n	80059e6 <UART_SetConfig+0xca>
 80059a2:	4b99      	ldr	r3, [pc, #612]	; (8005c08 <UART_SetConfig+0x2ec>)
 80059a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a8:	f003 0303 	and.w	r3, r3, #3
 80059ac:	2b03      	cmp	r3, #3
 80059ae:	d817      	bhi.n	80059e0 <UART_SetConfig+0xc4>
 80059b0:	a201      	add	r2, pc, #4	; (adr r2, 80059b8 <UART_SetConfig+0x9c>)
 80059b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b6:	bf00      	nop
 80059b8:	080059c9 	.word	0x080059c9
 80059bc:	080059d5 	.word	0x080059d5
 80059c0:	080059cf 	.word	0x080059cf
 80059c4:	080059db 	.word	0x080059db
 80059c8:	2301      	movs	r3, #1
 80059ca:	76fb      	strb	r3, [r7, #27]
 80059cc:	e0e7      	b.n	8005b9e <UART_SetConfig+0x282>
 80059ce:	2302      	movs	r3, #2
 80059d0:	76fb      	strb	r3, [r7, #27]
 80059d2:	e0e4      	b.n	8005b9e <UART_SetConfig+0x282>
 80059d4:	2304      	movs	r3, #4
 80059d6:	76fb      	strb	r3, [r7, #27]
 80059d8:	e0e1      	b.n	8005b9e <UART_SetConfig+0x282>
 80059da:	2308      	movs	r3, #8
 80059dc:	76fb      	strb	r3, [r7, #27]
 80059de:	e0de      	b.n	8005b9e <UART_SetConfig+0x282>
 80059e0:	2310      	movs	r3, #16
 80059e2:	76fb      	strb	r3, [r7, #27]
 80059e4:	e0db      	b.n	8005b9e <UART_SetConfig+0x282>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a88      	ldr	r2, [pc, #544]	; (8005c0c <UART_SetConfig+0x2f0>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d132      	bne.n	8005a56 <UART_SetConfig+0x13a>
 80059f0:	4b85      	ldr	r3, [pc, #532]	; (8005c08 <UART_SetConfig+0x2ec>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	f003 030c 	and.w	r3, r3, #12
 80059fa:	2b0c      	cmp	r3, #12
 80059fc:	d828      	bhi.n	8005a50 <UART_SetConfig+0x134>
 80059fe:	a201      	add	r2, pc, #4	; (adr r2, 8005a04 <UART_SetConfig+0xe8>)
 8005a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a04:	08005a39 	.word	0x08005a39
 8005a08:	08005a51 	.word	0x08005a51
 8005a0c:	08005a51 	.word	0x08005a51
 8005a10:	08005a51 	.word	0x08005a51
 8005a14:	08005a45 	.word	0x08005a45
 8005a18:	08005a51 	.word	0x08005a51
 8005a1c:	08005a51 	.word	0x08005a51
 8005a20:	08005a51 	.word	0x08005a51
 8005a24:	08005a3f 	.word	0x08005a3f
 8005a28:	08005a51 	.word	0x08005a51
 8005a2c:	08005a51 	.word	0x08005a51
 8005a30:	08005a51 	.word	0x08005a51
 8005a34:	08005a4b 	.word	0x08005a4b
 8005a38:	2300      	movs	r3, #0
 8005a3a:	76fb      	strb	r3, [r7, #27]
 8005a3c:	e0af      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a3e:	2302      	movs	r3, #2
 8005a40:	76fb      	strb	r3, [r7, #27]
 8005a42:	e0ac      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a44:	2304      	movs	r3, #4
 8005a46:	76fb      	strb	r3, [r7, #27]
 8005a48:	e0a9      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a4a:	2308      	movs	r3, #8
 8005a4c:	76fb      	strb	r3, [r7, #27]
 8005a4e:	e0a6      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a50:	2310      	movs	r3, #16
 8005a52:	76fb      	strb	r3, [r7, #27]
 8005a54:	e0a3      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4a6d      	ldr	r2, [pc, #436]	; (8005c10 <UART_SetConfig+0x2f4>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d120      	bne.n	8005aa2 <UART_SetConfig+0x186>
 8005a60:	4b69      	ldr	r3, [pc, #420]	; (8005c08 <UART_SetConfig+0x2ec>)
 8005a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005a6a:	2b30      	cmp	r3, #48	; 0x30
 8005a6c:	d013      	beq.n	8005a96 <UART_SetConfig+0x17a>
 8005a6e:	2b30      	cmp	r3, #48	; 0x30
 8005a70:	d814      	bhi.n	8005a9c <UART_SetConfig+0x180>
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d009      	beq.n	8005a8a <UART_SetConfig+0x16e>
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d810      	bhi.n	8005a9c <UART_SetConfig+0x180>
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d002      	beq.n	8005a84 <UART_SetConfig+0x168>
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d006      	beq.n	8005a90 <UART_SetConfig+0x174>
 8005a82:	e00b      	b.n	8005a9c <UART_SetConfig+0x180>
 8005a84:	2300      	movs	r3, #0
 8005a86:	76fb      	strb	r3, [r7, #27]
 8005a88:	e089      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a8a:	2302      	movs	r3, #2
 8005a8c:	76fb      	strb	r3, [r7, #27]
 8005a8e:	e086      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a90:	2304      	movs	r3, #4
 8005a92:	76fb      	strb	r3, [r7, #27]
 8005a94:	e083      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a96:	2308      	movs	r3, #8
 8005a98:	76fb      	strb	r3, [r7, #27]
 8005a9a:	e080      	b.n	8005b9e <UART_SetConfig+0x282>
 8005a9c:	2310      	movs	r3, #16
 8005a9e:	76fb      	strb	r3, [r7, #27]
 8005aa0:	e07d      	b.n	8005b9e <UART_SetConfig+0x282>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a5b      	ldr	r2, [pc, #364]	; (8005c14 <UART_SetConfig+0x2f8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d120      	bne.n	8005aee <UART_SetConfig+0x1d2>
 8005aac:	4b56      	ldr	r3, [pc, #344]	; (8005c08 <UART_SetConfig+0x2ec>)
 8005aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ab2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005ab6:	2bc0      	cmp	r3, #192	; 0xc0
 8005ab8:	d013      	beq.n	8005ae2 <UART_SetConfig+0x1c6>
 8005aba:	2bc0      	cmp	r3, #192	; 0xc0
 8005abc:	d814      	bhi.n	8005ae8 <UART_SetConfig+0x1cc>
 8005abe:	2b80      	cmp	r3, #128	; 0x80
 8005ac0:	d009      	beq.n	8005ad6 <UART_SetConfig+0x1ba>
 8005ac2:	2b80      	cmp	r3, #128	; 0x80
 8005ac4:	d810      	bhi.n	8005ae8 <UART_SetConfig+0x1cc>
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d002      	beq.n	8005ad0 <UART_SetConfig+0x1b4>
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d006      	beq.n	8005adc <UART_SetConfig+0x1c0>
 8005ace:	e00b      	b.n	8005ae8 <UART_SetConfig+0x1cc>
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	76fb      	strb	r3, [r7, #27]
 8005ad4:	e063      	b.n	8005b9e <UART_SetConfig+0x282>
 8005ad6:	2302      	movs	r3, #2
 8005ad8:	76fb      	strb	r3, [r7, #27]
 8005ada:	e060      	b.n	8005b9e <UART_SetConfig+0x282>
 8005adc:	2304      	movs	r3, #4
 8005ade:	76fb      	strb	r3, [r7, #27]
 8005ae0:	e05d      	b.n	8005b9e <UART_SetConfig+0x282>
 8005ae2:	2308      	movs	r3, #8
 8005ae4:	76fb      	strb	r3, [r7, #27]
 8005ae6:	e05a      	b.n	8005b9e <UART_SetConfig+0x282>
 8005ae8:	2310      	movs	r3, #16
 8005aea:	76fb      	strb	r3, [r7, #27]
 8005aec:	e057      	b.n	8005b9e <UART_SetConfig+0x282>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a49      	ldr	r2, [pc, #292]	; (8005c18 <UART_SetConfig+0x2fc>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d125      	bne.n	8005b44 <UART_SetConfig+0x228>
 8005af8:	4b43      	ldr	r3, [pc, #268]	; (8005c08 <UART_SetConfig+0x2ec>)
 8005afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b06:	d017      	beq.n	8005b38 <UART_SetConfig+0x21c>
 8005b08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b0c:	d817      	bhi.n	8005b3e <UART_SetConfig+0x222>
 8005b0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b12:	d00b      	beq.n	8005b2c <UART_SetConfig+0x210>
 8005b14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b18:	d811      	bhi.n	8005b3e <UART_SetConfig+0x222>
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d003      	beq.n	8005b26 <UART_SetConfig+0x20a>
 8005b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b22:	d006      	beq.n	8005b32 <UART_SetConfig+0x216>
 8005b24:	e00b      	b.n	8005b3e <UART_SetConfig+0x222>
 8005b26:	2300      	movs	r3, #0
 8005b28:	76fb      	strb	r3, [r7, #27]
 8005b2a:	e038      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b2c:	2302      	movs	r3, #2
 8005b2e:	76fb      	strb	r3, [r7, #27]
 8005b30:	e035      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b32:	2304      	movs	r3, #4
 8005b34:	76fb      	strb	r3, [r7, #27]
 8005b36:	e032      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b38:	2308      	movs	r3, #8
 8005b3a:	76fb      	strb	r3, [r7, #27]
 8005b3c:	e02f      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b3e:	2310      	movs	r3, #16
 8005b40:	76fb      	strb	r3, [r7, #27]
 8005b42:	e02c      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a2d      	ldr	r2, [pc, #180]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d125      	bne.n	8005b9a <UART_SetConfig+0x27e>
 8005b4e:	4b2e      	ldr	r3, [pc, #184]	; (8005c08 <UART_SetConfig+0x2ec>)
 8005b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005b58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b5c:	d017      	beq.n	8005b8e <UART_SetConfig+0x272>
 8005b5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005b62:	d817      	bhi.n	8005b94 <UART_SetConfig+0x278>
 8005b64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b68:	d00b      	beq.n	8005b82 <UART_SetConfig+0x266>
 8005b6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b6e:	d811      	bhi.n	8005b94 <UART_SetConfig+0x278>
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <UART_SetConfig+0x260>
 8005b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b78:	d006      	beq.n	8005b88 <UART_SetConfig+0x26c>
 8005b7a:	e00b      	b.n	8005b94 <UART_SetConfig+0x278>
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	76fb      	strb	r3, [r7, #27]
 8005b80:	e00d      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b82:	2302      	movs	r3, #2
 8005b84:	76fb      	strb	r3, [r7, #27]
 8005b86:	e00a      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b88:	2304      	movs	r3, #4
 8005b8a:	76fb      	strb	r3, [r7, #27]
 8005b8c:	e007      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b8e:	2308      	movs	r3, #8
 8005b90:	76fb      	strb	r3, [r7, #27]
 8005b92:	e004      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b94:	2310      	movs	r3, #16
 8005b96:	76fb      	strb	r3, [r7, #27]
 8005b98:	e001      	b.n	8005b9e <UART_SetConfig+0x282>
 8005b9a:	2310      	movs	r3, #16
 8005b9c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a17      	ldr	r2, [pc, #92]	; (8005c00 <UART_SetConfig+0x2e4>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	f040 8087 	bne.w	8005cb8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005baa:	7efb      	ldrb	r3, [r7, #27]
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	d837      	bhi.n	8005c20 <UART_SetConfig+0x304>
 8005bb0:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <UART_SetConfig+0x29c>)
 8005bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb6:	bf00      	nop
 8005bb8:	08005bdd 	.word	0x08005bdd
 8005bbc:	08005c21 	.word	0x08005c21
 8005bc0:	08005be5 	.word	0x08005be5
 8005bc4:	08005c21 	.word	0x08005c21
 8005bc8:	08005beb 	.word	0x08005beb
 8005bcc:	08005c21 	.word	0x08005c21
 8005bd0:	08005c21 	.word	0x08005c21
 8005bd4:	08005c21 	.word	0x08005c21
 8005bd8:	08005bf3 	.word	0x08005bf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bdc:	f7fe fd1c 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8005be0:	6178      	str	r0, [r7, #20]
        break;
 8005be2:	e022      	b.n	8005c2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005be4:	4b0d      	ldr	r3, [pc, #52]	; (8005c1c <UART_SetConfig+0x300>)
 8005be6:	617b      	str	r3, [r7, #20]
        break;
 8005be8:	e01f      	b.n	8005c2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bea:	f7fe fc7d 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8005bee:	6178      	str	r0, [r7, #20]
        break;
 8005bf0:	e01b      	b.n	8005c2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005bf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005bf6:	617b      	str	r3, [r7, #20]
        break;
 8005bf8:	e017      	b.n	8005c2a <UART_SetConfig+0x30e>
 8005bfa:	bf00      	nop
 8005bfc:	efff69f3 	.word	0xefff69f3
 8005c00:	40008000 	.word	0x40008000
 8005c04:	40013800 	.word	0x40013800
 8005c08:	40021000 	.word	0x40021000
 8005c0c:	40004400 	.word	0x40004400
 8005c10:	40004800 	.word	0x40004800
 8005c14:	40004c00 	.word	0x40004c00
 8005c18:	40005000 	.word	0x40005000
 8005c1c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	76bb      	strb	r3, [r7, #26]
        break;
 8005c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	f000 80f1 	beq.w	8005e14 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	4613      	mov	r3, r2
 8005c38:	005b      	lsls	r3, r3, #1
 8005c3a:	4413      	add	r3, r2
 8005c3c:	697a      	ldr	r2, [r7, #20]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d305      	bcc.n	8005c4e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d902      	bls.n	8005c54 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	76bb      	strb	r3, [r7, #26]
 8005c52:	e0df      	b.n	8005e14 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f04f 0100 	mov.w	r1, #0
 8005c5c:	f04f 0200 	mov.w	r2, #0
 8005c60:	f04f 0300 	mov.w	r3, #0
 8005c64:	020b      	lsls	r3, r1, #8
 8005c66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005c6a:	0202      	lsls	r2, r0, #8
 8005c6c:	6879      	ldr	r1, [r7, #4]
 8005c6e:	6849      	ldr	r1, [r1, #4]
 8005c70:	0849      	lsrs	r1, r1, #1
 8005c72:	4608      	mov	r0, r1
 8005c74:	f04f 0100 	mov.w	r1, #0
 8005c78:	1814      	adds	r4, r2, r0
 8005c7a:	eb43 0501 	adc.w	r5, r3, r1
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	461a      	mov	r2, r3
 8005c84:	f04f 0300 	mov.w	r3, #0
 8005c88:	4620      	mov	r0, r4
 8005c8a:	4629      	mov	r1, r5
 8005c8c:	f7fa fcdc 	bl	8000648 <__aeabi_uldivmod>
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	4613      	mov	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c9e:	d308      	bcc.n	8005cb2 <UART_SetConfig+0x396>
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ca6:	d204      	bcs.n	8005cb2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	60da      	str	r2, [r3, #12]
 8005cb0:	e0b0      	b.n	8005e14 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	76bb      	strb	r3, [r7, #26]
 8005cb6:	e0ad      	b.n	8005e14 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	69db      	ldr	r3, [r3, #28]
 8005cbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc0:	d15b      	bne.n	8005d7a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8005cc2:	7efb      	ldrb	r3, [r7, #27]
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d828      	bhi.n	8005d1a <UART_SetConfig+0x3fe>
 8005cc8:	a201      	add	r2, pc, #4	; (adr r2, 8005cd0 <UART_SetConfig+0x3b4>)
 8005cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cce:	bf00      	nop
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005cfd 	.word	0x08005cfd
 8005cd8:	08005d05 	.word	0x08005d05
 8005cdc:	08005d1b 	.word	0x08005d1b
 8005ce0:	08005d0b 	.word	0x08005d0b
 8005ce4:	08005d1b 	.word	0x08005d1b
 8005ce8:	08005d1b 	.word	0x08005d1b
 8005cec:	08005d1b 	.word	0x08005d1b
 8005cf0:	08005d13 	.word	0x08005d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cf4:	f7fe fc90 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8005cf8:	6178      	str	r0, [r7, #20]
        break;
 8005cfa:	e013      	b.n	8005d24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cfc:	f7fe fca2 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 8005d00:	6178      	str	r0, [r7, #20]
        break;
 8005d02:	e00f      	b.n	8005d24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d04:	4b49      	ldr	r3, [pc, #292]	; (8005e2c <UART_SetConfig+0x510>)
 8005d06:	617b      	str	r3, [r7, #20]
        break;
 8005d08:	e00c      	b.n	8005d24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d0a:	f7fe fbed 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8005d0e:	6178      	str	r0, [r7, #20]
        break;
 8005d10:	e008      	b.n	8005d24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d16:	617b      	str	r3, [r7, #20]
        break;
 8005d18:	e004      	b.n	8005d24 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	76bb      	strb	r3, [r7, #26]
        break;
 8005d22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d074      	beq.n	8005e14 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	005a      	lsls	r2, r3, #1
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	085b      	lsrs	r3, r3, #1
 8005d34:	441a      	add	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	2b0f      	cmp	r3, #15
 8005d44:	d916      	bls.n	8005d74 <UART_SetConfig+0x458>
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d4c:	d212      	bcs.n	8005d74 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	f023 030f 	bic.w	r3, r3, #15
 8005d56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	085b      	lsrs	r3, r3, #1
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	89fb      	ldrh	r3, [r7, #14]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	89fa      	ldrh	r2, [r7, #14]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	e04f      	b.n	8005e14 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	76bb      	strb	r3, [r7, #26]
 8005d78:	e04c      	b.n	8005e14 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d7a:	7efb      	ldrb	r3, [r7, #27]
 8005d7c:	2b08      	cmp	r3, #8
 8005d7e:	d828      	bhi.n	8005dd2 <UART_SetConfig+0x4b6>
 8005d80:	a201      	add	r2, pc, #4	; (adr r2, 8005d88 <UART_SetConfig+0x46c>)
 8005d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d86:	bf00      	nop
 8005d88:	08005dad 	.word	0x08005dad
 8005d8c:	08005db5 	.word	0x08005db5
 8005d90:	08005dbd 	.word	0x08005dbd
 8005d94:	08005dd3 	.word	0x08005dd3
 8005d98:	08005dc3 	.word	0x08005dc3
 8005d9c:	08005dd3 	.word	0x08005dd3
 8005da0:	08005dd3 	.word	0x08005dd3
 8005da4:	08005dd3 	.word	0x08005dd3
 8005da8:	08005dcb 	.word	0x08005dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005dac:	f7fe fc34 	bl	8004618 <HAL_RCC_GetPCLK1Freq>
 8005db0:	6178      	str	r0, [r7, #20]
        break;
 8005db2:	e013      	b.n	8005ddc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005db4:	f7fe fc46 	bl	8004644 <HAL_RCC_GetPCLK2Freq>
 8005db8:	6178      	str	r0, [r7, #20]
        break;
 8005dba:	e00f      	b.n	8005ddc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005dbc:	4b1b      	ldr	r3, [pc, #108]	; (8005e2c <UART_SetConfig+0x510>)
 8005dbe:	617b      	str	r3, [r7, #20]
        break;
 8005dc0:	e00c      	b.n	8005ddc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005dc2:	f7fe fb91 	bl	80044e8 <HAL_RCC_GetSysClockFreq>
 8005dc6:	6178      	str	r0, [r7, #20]
        break;
 8005dc8:	e008      	b.n	8005ddc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005dca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dce:	617b      	str	r3, [r7, #20]
        break;
 8005dd0:	e004      	b.n	8005ddc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	76bb      	strb	r3, [r7, #26]
        break;
 8005dda:	bf00      	nop
    }

    if (pclk != 0U)
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d018      	beq.n	8005e14 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	085a      	lsrs	r2, r3, #1
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	441a      	add	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005df4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	2b0f      	cmp	r3, #15
 8005dfa:	d909      	bls.n	8005e10 <UART_SetConfig+0x4f4>
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e02:	d205      	bcs.n	8005e10 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e04:	693b      	ldr	r3, [r7, #16]
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	60da      	str	r2, [r3, #12]
 8005e0e:	e001      	b.n	8005e14 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005e20:	7ebb      	ldrb	r3, [r7, #26]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3720      	adds	r7, #32
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bdb0      	pop	{r4, r5, r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	00f42400 	.word	0x00f42400

08005e30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e3c:	f003 0301 	and.w	r3, r3, #1
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00a      	beq.n	8005e5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	f003 0302 	and.w	r3, r3, #2
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d00a      	beq.n	8005e7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d00a      	beq.n	8005e9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	430a      	orrs	r2, r1
 8005e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d00a      	beq.n	8005ec0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	430a      	orrs	r2, r1
 8005ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	f003 0310 	and.w	r3, r3, #16
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	430a      	orrs	r2, r1
 8005ee0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d00a      	beq.n	8005f04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	430a      	orrs	r2, r1
 8005f02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01a      	beq.n	8005f46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	430a      	orrs	r2, r1
 8005f24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f2e:	d10a      	bne.n	8005f46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	430a      	orrs	r2, r1
 8005f66:	605a      	str	r2, [r3, #4]
  }
}
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af02      	add	r7, sp, #8
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005f84:	f7fc faae 	bl	80024e4 <HAL_GetTick>
 8005f88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f003 0308 	and.w	r3, r3, #8
 8005f94:	2b08      	cmp	r3, #8
 8005f96:	d10e      	bne.n	8005fb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005f98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f000 f82d 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fb2:	2303      	movs	r3, #3
 8005fb4:	e023      	b.n	8005ffe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0304 	and.w	r3, r3, #4
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d10e      	bne.n	8005fe2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fc8:	9300      	str	r3, [sp, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f817 	bl	8006006 <UART_WaitOnFlagUntilTimeout>
 8005fd8:	4603      	mov	r3, r0
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d001      	beq.n	8005fe2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e00d      	b.n	8005ffe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2220      	movs	r2, #32
 8005fe6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b09c      	sub	sp, #112	; 0x70
 800600a:	af00      	add	r7, sp, #0
 800600c:	60f8      	str	r0, [r7, #12]
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	603b      	str	r3, [r7, #0]
 8006012:	4613      	mov	r3, r2
 8006014:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006016:	e0a5      	b.n	8006164 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800601a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800601e:	f000 80a1 	beq.w	8006164 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006022:	f7fc fa5f 	bl	80024e4 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800602e:	429a      	cmp	r2, r3
 8006030:	d302      	bcc.n	8006038 <UART_WaitOnFlagUntilTimeout+0x32>
 8006032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006034:	2b00      	cmp	r3, #0
 8006036:	d13e      	bne.n	80060b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006040:	e853 3f00 	ldrex	r3, [r3]
 8006044:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006048:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800604c:	667b      	str	r3, [r7, #100]	; 0x64
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	461a      	mov	r2, r3
 8006054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006056:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006058:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800605c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006064:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1e6      	bne.n	8006038 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	3308      	adds	r3, #8
 8006070:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800607a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800607c:	f023 0301 	bic.w	r3, r3, #1
 8006080:	663b      	str	r3, [r7, #96]	; 0x60
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	3308      	adds	r3, #8
 8006088:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800608a:	64ba      	str	r2, [r7, #72]	; 0x48
 800608c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006090:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006098:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1e5      	bne.n	800606a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2220      	movs	r2, #32
 80060a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2220      	movs	r2, #32
 80060a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80060b2:	2303      	movs	r3, #3
 80060b4:	e067      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0304 	and.w	r3, r3, #4
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d04f      	beq.n	8006164 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	69db      	ldr	r3, [r3, #28]
 80060ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060d2:	d147      	bne.n	8006164 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	e853 3f00 	ldrex	r3, [r3]
 80060ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80060f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fc:	637b      	str	r3, [r7, #52]	; 0x34
 80060fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006100:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006102:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006104:	e841 2300 	strex	r3, r2, [r1]
 8006108:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800610a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800610c:	2b00      	cmp	r3, #0
 800610e:	d1e6      	bne.n	80060de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3308      	adds	r3, #8
 8006116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	e853 3f00 	ldrex	r3, [r3]
 800611e:	613b      	str	r3, [r7, #16]
   return(result);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	f023 0301 	bic.w	r3, r3, #1
 8006126:	66bb      	str	r3, [r7, #104]	; 0x68
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	3308      	adds	r3, #8
 800612e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006130:	623a      	str	r2, [r7, #32]
 8006132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006134:	69f9      	ldr	r1, [r7, #28]
 8006136:	6a3a      	ldr	r2, [r7, #32]
 8006138:	e841 2300 	strex	r3, r2, [r1]
 800613c:	61bb      	str	r3, [r7, #24]
   return(result);
 800613e:	69bb      	ldr	r3, [r7, #24]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1e5      	bne.n	8006110 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2220      	movs	r2, #32
 8006148:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2220      	movs	r2, #32
 800614e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2220      	movs	r2, #32
 8006154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2200      	movs	r2, #0
 800615c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006160:	2303      	movs	r3, #3
 8006162:	e010      	b.n	8006186 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	69da      	ldr	r2, [r3, #28]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	429a      	cmp	r2, r3
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	429a      	cmp	r2, r3
 8006180:	f43f af4a 	beq.w	8006018 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006184:	2300      	movs	r3, #0
}
 8006186:	4618      	mov	r0, r3
 8006188:	3770      	adds	r7, #112	; 0x70
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
	...

08006190 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006190:	b480      	push	{r7}
 8006192:	b097      	sub	sp, #92	; 0x5c
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4613      	mov	r3, r2
 800619c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	88fa      	ldrh	r2, [r7, #6]
 80061a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	88fa      	ldrh	r2, [r7, #6]
 80061b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	2200      	movs	r2, #0
 80061b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c2:	d10e      	bne.n	80061e2 <UART_Start_Receive_IT+0x52>
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	691b      	ldr	r3, [r3, #16]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d105      	bne.n	80061d8 <UART_Start_Receive_IT+0x48>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80061d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061d6:	e02d      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	22ff      	movs	r2, #255	; 0xff
 80061dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061e0:	e028      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10d      	bne.n	8006206 <UART_Start_Receive_IT+0x76>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d104      	bne.n	80061fc <UART_Start_Receive_IT+0x6c>
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	22ff      	movs	r2, #255	; 0xff
 80061f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80061fa:	e01b      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	227f      	movs	r2, #127	; 0x7f
 8006200:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006204:	e016      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800620e:	d10d      	bne.n	800622c <UART_Start_Receive_IT+0x9c>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d104      	bne.n	8006222 <UART_Start_Receive_IT+0x92>
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	227f      	movs	r2, #127	; 0x7f
 800621c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006220:	e008      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	223f      	movs	r2, #63	; 0x3f
 8006226:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800622a:	e003      	b.n	8006234 <UART_Start_Receive_IT+0xa4>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2200      	movs	r2, #0
 8006230:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	2222      	movs	r2, #34	; 0x22
 8006240:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006254:	f043 0301 	orr.w	r3, r3, #1
 8006258:	657b      	str	r3, [r7, #84]	; 0x54
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	3308      	adds	r3, #8
 8006260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006262:	64ba      	str	r2, [r7, #72]	; 0x48
 8006264:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006268:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e5      	bne.n	8006242 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800627e:	d107      	bne.n	8006290 <UART_Start_Receive_IT+0x100>
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	691b      	ldr	r3, [r3, #16]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d103      	bne.n	8006290 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	4a24      	ldr	r2, [pc, #144]	; (800631c <UART_Start_Receive_IT+0x18c>)
 800628c:	665a      	str	r2, [r3, #100]	; 0x64
 800628e:	e002      	b.n	8006296 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	4a23      	ldr	r2, [pc, #140]	; (8006320 <UART_Start_Receive_IT+0x190>)
 8006294:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d019      	beq.n	80062da <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ae:	e853 3f00 	ldrex	r3, [r3]
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80062b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80062ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	461a      	mov	r2, r3
 80062c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062c4:	637b      	str	r3, [r7, #52]	; 0x34
 80062c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80062ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062cc:	e841 2300 	strex	r3, r2, [r1]
 80062d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80062d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <UART_Start_Receive_IT+0x116>
 80062d8:	e018      	b.n	800630c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	e853 3f00 	ldrex	r3, [r3]
 80062e6:	613b      	str	r3, [r7, #16]
   return(result);
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	f043 0320 	orr.w	r3, r3, #32
 80062ee:	653b      	str	r3, [r7, #80]	; 0x50
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062f8:	623b      	str	r3, [r7, #32]
 80062fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062fc:	69f9      	ldr	r1, [r7, #28]
 80062fe:	6a3a      	ldr	r2, [r7, #32]
 8006300:	e841 2300 	strex	r3, r2, [r1]
 8006304:	61bb      	str	r3, [r7, #24]
   return(result);
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d1e6      	bne.n	80062da <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800630c:	2300      	movs	r3, #0
}
 800630e:	4618      	mov	r0, r3
 8006310:	375c      	adds	r7, #92	; 0x5c
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	080065cb 	.word	0x080065cb
 8006320:	0800646b 	.word	0x0800646b

08006324 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b095      	sub	sp, #84	; 0x54
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006334:	e853 3f00 	ldrex	r3, [r3]
 8006338:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006340:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800634a:	643b      	str	r3, [r7, #64]	; 0x40
 800634c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006350:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e6      	bne.n	800632c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3308      	adds	r3, #8
 8006364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6a3b      	ldr	r3, [r7, #32]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	61fb      	str	r3, [r7, #28]
   return(result);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	f023 0301 	bic.w	r3, r3, #1
 8006374:	64bb      	str	r3, [r7, #72]	; 0x48
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	3308      	adds	r3, #8
 800637c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800637e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006380:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006384:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006386:	e841 2300 	strex	r3, r2, [r1]
 800638a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800638c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1e5      	bne.n	800635e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006396:	2b01      	cmp	r3, #1
 8006398:	d118      	bne.n	80063cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	e853 3f00 	ldrex	r3, [r3]
 80063a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f023 0310 	bic.w	r3, r3, #16
 80063ae:	647b      	str	r3, [r7, #68]	; 0x44
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	461a      	mov	r2, r3
 80063b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063b8:	61bb      	str	r3, [r7, #24]
 80063ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	6979      	ldr	r1, [r7, #20]
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	613b      	str	r3, [r7, #16]
   return(result);
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e6      	bne.n	800639a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2220      	movs	r2, #32
 80063d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 80063de:	bf00      	nop
 80063e0:	3754      	adds	r7, #84	; 0x54
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b084      	sub	sp, #16
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	2200      	movs	r2, #0
 80063fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006408:	68f8      	ldr	r0, [r7, #12]
 800640a:	f7ff fa71 	bl	80058f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800640e:	bf00      	nop
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b088      	sub	sp, #32
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	e853 3f00 	ldrex	r3, [r3]
 800642a:	60bb      	str	r3, [r7, #8]
   return(result);
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006432:	61fb      	str	r3, [r7, #28]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	461a      	mov	r2, r3
 800643a:	69fb      	ldr	r3, [r7, #28]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006440:	6979      	ldr	r1, [r7, #20]
 8006442:	69ba      	ldr	r2, [r7, #24]
 8006444:	e841 2300 	strex	r3, r2, [r1]
 8006448:	613b      	str	r3, [r7, #16]
   return(result);
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e6      	bne.n	800641e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2220      	movs	r2, #32
 8006454:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff fa3d 	bl	80058dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006462:	bf00      	nop
 8006464:	3720      	adds	r7, #32
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b096      	sub	sp, #88	; 0x58
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006478:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006480:	2b22      	cmp	r3, #34	; 0x22
 8006482:	f040 8094 	bne.w	80065ae <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800648c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006490:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006494:	b2d9      	uxtb	r1, r3
 8006496:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800649a:	b2da      	uxtb	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a0:	400a      	ands	r2, r1
 80064a2:	b2d2      	uxtb	r2, r2
 80064a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064aa:	1c5a      	adds	r2, r3, #1
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d179      	bne.n	80065c2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064d6:	e853 3f00 	ldrex	r3, [r3]
 80064da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80064dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80064e2:	653b      	str	r3, [r7, #80]	; 0x50
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ec:	647b      	str	r3, [r7, #68]	; 0x44
 80064ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80064f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064f4:	e841 2300 	strex	r3, r2, [r1]
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80064fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e6      	bne.n	80064ce <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3308      	adds	r3, #8
 8006506:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650a:	e853 3f00 	ldrex	r3, [r3]
 800650e:	623b      	str	r3, [r7, #32]
   return(result);
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	f023 0301 	bic.w	r3, r3, #1
 8006516:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3308      	adds	r3, #8
 800651e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006520:	633a      	str	r2, [r7, #48]	; 0x30
 8006522:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006524:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006528:	e841 2300 	strex	r3, r2, [r1]
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006530:	2b00      	cmp	r3, #0
 8006532:	d1e5      	bne.n	8006500 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2220      	movs	r2, #32
 8006538:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006544:	2b01      	cmp	r3, #1
 8006546:	d12e      	bne.n	80065a6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	e853 3f00 	ldrex	r3, [r3]
 800655a:	60fb      	str	r3, [r7, #12]
   return(result);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f023 0310 	bic.w	r3, r3, #16
 8006562:	64bb      	str	r3, [r7, #72]	; 0x48
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	461a      	mov	r2, r3
 800656a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006570:	69b9      	ldr	r1, [r7, #24]
 8006572:	69fa      	ldr	r2, [r7, #28]
 8006574:	e841 2300 	strex	r3, r2, [r1]
 8006578:	617b      	str	r3, [r7, #20]
   return(result);
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d1e6      	bne.n	800654e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	69db      	ldr	r3, [r3, #28]
 8006586:	f003 0310 	and.w	r3, r3, #16
 800658a:	2b10      	cmp	r3, #16
 800658c:	d103      	bne.n	8006596 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2210      	movs	r2, #16
 8006594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff f9b0 	bl	8005904 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80065a4:	e00d      	b.n	80065c2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fa fe92 	bl	80012d0 <HAL_UART_RxCpltCallback>
}
 80065ac:	e009      	b.n	80065c2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	8b1b      	ldrh	r3, [r3, #24]
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 0208 	orr.w	r2, r2, #8
 80065be:	b292      	uxth	r2, r2
 80065c0:	831a      	strh	r2, [r3, #24]
}
 80065c2:	bf00      	nop
 80065c4:	3758      	adds	r7, #88	; 0x58
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b096      	sub	sp, #88	; 0x58
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065d8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e0:	2b22      	cmp	r3, #34	; 0x22
 80065e2:	f040 8094 	bne.w	800670e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80065ec:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065f4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80065f6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80065fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80065fe:	4013      	ands	r3, r2
 8006600:	b29a      	uxth	r2, r3
 8006602:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006604:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800660a:	1c9a      	adds	r2, r3, #2
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006616:	b29b      	uxth	r3, r3
 8006618:	3b01      	subs	r3, #1
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006628:	b29b      	uxth	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d179      	bne.n	8006722 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800663c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	461a      	mov	r2, r3
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	643b      	str	r3, [r7, #64]	; 0x40
 800664e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006652:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e6      	bne.n	800662e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	3308      	adds	r3, #8
 8006666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	e853 3f00 	ldrex	r3, [r3]
 800666e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	f023 0301 	bic.w	r3, r3, #1
 8006676:	64bb      	str	r3, [r7, #72]	; 0x48
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	3308      	adds	r3, #8
 800667e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006680:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006688:	e841 2300 	strex	r3, r2, [r1]
 800668c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006690:	2b00      	cmp	r3, #0
 8006692:	d1e5      	bne.n	8006660 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d12e      	bne.n	8006706 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	e853 3f00 	ldrex	r3, [r3]
 80066ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	f023 0310 	bic.w	r3, r3, #16
 80066c2:	647b      	str	r3, [r7, #68]	; 0x44
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066cc:	61bb      	str	r3, [r7, #24]
 80066ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d0:	6979      	ldr	r1, [r7, #20]
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	e841 2300 	strex	r3, r2, [r1]
 80066d8:	613b      	str	r3, [r7, #16]
   return(result);
 80066da:	693b      	ldr	r3, [r7, #16]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d1e6      	bne.n	80066ae <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f003 0310 	and.w	r3, r3, #16
 80066ea:	2b10      	cmp	r3, #16
 80066ec:	d103      	bne.n	80066f6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2210      	movs	r2, #16
 80066f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff f900 	bl	8005904 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006704:	e00d      	b.n	8006722 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006706:	6878      	ldr	r0, [r7, #4]
 8006708:	f7fa fde2 	bl	80012d0 <HAL_UART_RxCpltCallback>
}
 800670c:	e009      	b.n	8006722 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	8b1b      	ldrh	r3, [r3, #24]
 8006714:	b29a      	uxth	r2, r3
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f042 0208 	orr.w	r2, r2, #8
 800671e:	b292      	uxth	r2, r2
 8006720:	831a      	strh	r2, [r3, #24]
}
 8006722:	bf00      	nop
 8006724:	3758      	adds	r7, #88	; 0x58
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800672a:	b480      	push	{r7}
 800672c:	b083      	sub	sp, #12
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006732:	bf00      	nop
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr
	...

08006740 <__errno>:
 8006740:	4b01      	ldr	r3, [pc, #4]	; (8006748 <__errno+0x8>)
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	4770      	bx	lr
 8006746:	bf00      	nop
 8006748:	20000124 	.word	0x20000124

0800674c <__libc_init_array>:
 800674c:	b570      	push	{r4, r5, r6, lr}
 800674e:	4d0d      	ldr	r5, [pc, #52]	; (8006784 <__libc_init_array+0x38>)
 8006750:	4c0d      	ldr	r4, [pc, #52]	; (8006788 <__libc_init_array+0x3c>)
 8006752:	1b64      	subs	r4, r4, r5
 8006754:	10a4      	asrs	r4, r4, #2
 8006756:	2600      	movs	r6, #0
 8006758:	42a6      	cmp	r6, r4
 800675a:	d109      	bne.n	8006770 <__libc_init_array+0x24>
 800675c:	4d0b      	ldr	r5, [pc, #44]	; (800678c <__libc_init_array+0x40>)
 800675e:	4c0c      	ldr	r4, [pc, #48]	; (8006790 <__libc_init_array+0x44>)
 8006760:	f001 f98e 	bl	8007a80 <_init>
 8006764:	1b64      	subs	r4, r4, r5
 8006766:	10a4      	asrs	r4, r4, #2
 8006768:	2600      	movs	r6, #0
 800676a:	42a6      	cmp	r6, r4
 800676c:	d105      	bne.n	800677a <__libc_init_array+0x2e>
 800676e:	bd70      	pop	{r4, r5, r6, pc}
 8006770:	f855 3b04 	ldr.w	r3, [r5], #4
 8006774:	4798      	blx	r3
 8006776:	3601      	adds	r6, #1
 8006778:	e7ee      	b.n	8006758 <__libc_init_array+0xc>
 800677a:	f855 3b04 	ldr.w	r3, [r5], #4
 800677e:	4798      	blx	r3
 8006780:	3601      	adds	r6, #1
 8006782:	e7f2      	b.n	800676a <__libc_init_array+0x1e>
 8006784:	08007c24 	.word	0x08007c24
 8006788:	08007c24 	.word	0x08007c24
 800678c:	08007c24 	.word	0x08007c24
 8006790:	08007c28 	.word	0x08007c28

08006794 <memcpy>:
 8006794:	440a      	add	r2, r1
 8006796:	4291      	cmp	r1, r2
 8006798:	f100 33ff 	add.w	r3, r0, #4294967295
 800679c:	d100      	bne.n	80067a0 <memcpy+0xc>
 800679e:	4770      	bx	lr
 80067a0:	b510      	push	{r4, lr}
 80067a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067aa:	4291      	cmp	r1, r2
 80067ac:	d1f9      	bne.n	80067a2 <memcpy+0xe>
 80067ae:	bd10      	pop	{r4, pc}

080067b0 <memset>:
 80067b0:	4402      	add	r2, r0
 80067b2:	4603      	mov	r3, r0
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d100      	bne.n	80067ba <memset+0xa>
 80067b8:	4770      	bx	lr
 80067ba:	f803 1b01 	strb.w	r1, [r3], #1
 80067be:	e7f9      	b.n	80067b4 <memset+0x4>

080067c0 <iprintf>:
 80067c0:	b40f      	push	{r0, r1, r2, r3}
 80067c2:	4b0a      	ldr	r3, [pc, #40]	; (80067ec <iprintf+0x2c>)
 80067c4:	b513      	push	{r0, r1, r4, lr}
 80067c6:	681c      	ldr	r4, [r3, #0]
 80067c8:	b124      	cbz	r4, 80067d4 <iprintf+0x14>
 80067ca:	69a3      	ldr	r3, [r4, #24]
 80067cc:	b913      	cbnz	r3, 80067d4 <iprintf+0x14>
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 f89a 	bl	8006908 <__sinit>
 80067d4:	ab05      	add	r3, sp, #20
 80067d6:	9a04      	ldr	r2, [sp, #16]
 80067d8:	68a1      	ldr	r1, [r4, #8]
 80067da:	9301      	str	r3, [sp, #4]
 80067dc:	4620      	mov	r0, r4
 80067de:	f000 fb13 	bl	8006e08 <_vfiprintf_r>
 80067e2:	b002      	add	sp, #8
 80067e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067e8:	b004      	add	sp, #16
 80067ea:	4770      	bx	lr
 80067ec:	20000124 	.word	0x20000124

080067f0 <sniprintf>:
 80067f0:	b40c      	push	{r2, r3}
 80067f2:	b530      	push	{r4, r5, lr}
 80067f4:	4b17      	ldr	r3, [pc, #92]	; (8006854 <sniprintf+0x64>)
 80067f6:	1e0c      	subs	r4, r1, #0
 80067f8:	681d      	ldr	r5, [r3, #0]
 80067fa:	b09d      	sub	sp, #116	; 0x74
 80067fc:	da08      	bge.n	8006810 <sniprintf+0x20>
 80067fe:	238b      	movs	r3, #139	; 0x8b
 8006800:	602b      	str	r3, [r5, #0]
 8006802:	f04f 30ff 	mov.w	r0, #4294967295
 8006806:	b01d      	add	sp, #116	; 0x74
 8006808:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800680c:	b002      	add	sp, #8
 800680e:	4770      	bx	lr
 8006810:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006814:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006818:	bf14      	ite	ne
 800681a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800681e:	4623      	moveq	r3, r4
 8006820:	9304      	str	r3, [sp, #16]
 8006822:	9307      	str	r3, [sp, #28]
 8006824:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006828:	9002      	str	r0, [sp, #8]
 800682a:	9006      	str	r0, [sp, #24]
 800682c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006830:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006832:	ab21      	add	r3, sp, #132	; 0x84
 8006834:	a902      	add	r1, sp, #8
 8006836:	4628      	mov	r0, r5
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	f000 f9bb 	bl	8006bb4 <_svfiprintf_r>
 800683e:	1c43      	adds	r3, r0, #1
 8006840:	bfbc      	itt	lt
 8006842:	238b      	movlt	r3, #139	; 0x8b
 8006844:	602b      	strlt	r3, [r5, #0]
 8006846:	2c00      	cmp	r4, #0
 8006848:	d0dd      	beq.n	8006806 <sniprintf+0x16>
 800684a:	9b02      	ldr	r3, [sp, #8]
 800684c:	2200      	movs	r2, #0
 800684e:	701a      	strb	r2, [r3, #0]
 8006850:	e7d9      	b.n	8006806 <sniprintf+0x16>
 8006852:	bf00      	nop
 8006854:	20000124 	.word	0x20000124

08006858 <std>:
 8006858:	2300      	movs	r3, #0
 800685a:	b510      	push	{r4, lr}
 800685c:	4604      	mov	r4, r0
 800685e:	e9c0 3300 	strd	r3, r3, [r0]
 8006862:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006866:	6083      	str	r3, [r0, #8]
 8006868:	8181      	strh	r1, [r0, #12]
 800686a:	6643      	str	r3, [r0, #100]	; 0x64
 800686c:	81c2      	strh	r2, [r0, #14]
 800686e:	6183      	str	r3, [r0, #24]
 8006870:	4619      	mov	r1, r3
 8006872:	2208      	movs	r2, #8
 8006874:	305c      	adds	r0, #92	; 0x5c
 8006876:	f7ff ff9b 	bl	80067b0 <memset>
 800687a:	4b05      	ldr	r3, [pc, #20]	; (8006890 <std+0x38>)
 800687c:	6263      	str	r3, [r4, #36]	; 0x24
 800687e:	4b05      	ldr	r3, [pc, #20]	; (8006894 <std+0x3c>)
 8006880:	62a3      	str	r3, [r4, #40]	; 0x28
 8006882:	4b05      	ldr	r3, [pc, #20]	; (8006898 <std+0x40>)
 8006884:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006886:	4b05      	ldr	r3, [pc, #20]	; (800689c <std+0x44>)
 8006888:	6224      	str	r4, [r4, #32]
 800688a:	6323      	str	r3, [r4, #48]	; 0x30
 800688c:	bd10      	pop	{r4, pc}
 800688e:	bf00      	nop
 8006890:	080073b1 	.word	0x080073b1
 8006894:	080073d3 	.word	0x080073d3
 8006898:	0800740b 	.word	0x0800740b
 800689c:	0800742f 	.word	0x0800742f

080068a0 <_cleanup_r>:
 80068a0:	4901      	ldr	r1, [pc, #4]	; (80068a8 <_cleanup_r+0x8>)
 80068a2:	f000 b8af 	b.w	8006a04 <_fwalk_reent>
 80068a6:	bf00      	nop
 80068a8:	08007709 	.word	0x08007709

080068ac <__sfmoreglue>:
 80068ac:	b570      	push	{r4, r5, r6, lr}
 80068ae:	1e4a      	subs	r2, r1, #1
 80068b0:	2568      	movs	r5, #104	; 0x68
 80068b2:	4355      	muls	r5, r2
 80068b4:	460e      	mov	r6, r1
 80068b6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80068ba:	f000 f8c5 	bl	8006a48 <_malloc_r>
 80068be:	4604      	mov	r4, r0
 80068c0:	b140      	cbz	r0, 80068d4 <__sfmoreglue+0x28>
 80068c2:	2100      	movs	r1, #0
 80068c4:	e9c0 1600 	strd	r1, r6, [r0]
 80068c8:	300c      	adds	r0, #12
 80068ca:	60a0      	str	r0, [r4, #8]
 80068cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068d0:	f7ff ff6e 	bl	80067b0 <memset>
 80068d4:	4620      	mov	r0, r4
 80068d6:	bd70      	pop	{r4, r5, r6, pc}

080068d8 <__sfp_lock_acquire>:
 80068d8:	4801      	ldr	r0, [pc, #4]	; (80068e0 <__sfp_lock_acquire+0x8>)
 80068da:	f000 b8b3 	b.w	8006a44 <__retarget_lock_acquire_recursive>
 80068de:	bf00      	nop
 80068e0:	2000073c 	.word	0x2000073c

080068e4 <__sfp_lock_release>:
 80068e4:	4801      	ldr	r0, [pc, #4]	; (80068ec <__sfp_lock_release+0x8>)
 80068e6:	f000 b8ae 	b.w	8006a46 <__retarget_lock_release_recursive>
 80068ea:	bf00      	nop
 80068ec:	2000073c 	.word	0x2000073c

080068f0 <__sinit_lock_acquire>:
 80068f0:	4801      	ldr	r0, [pc, #4]	; (80068f8 <__sinit_lock_acquire+0x8>)
 80068f2:	f000 b8a7 	b.w	8006a44 <__retarget_lock_acquire_recursive>
 80068f6:	bf00      	nop
 80068f8:	20000737 	.word	0x20000737

080068fc <__sinit_lock_release>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__sinit_lock_release+0x8>)
 80068fe:	f000 b8a2 	b.w	8006a46 <__retarget_lock_release_recursive>
 8006902:	bf00      	nop
 8006904:	20000737 	.word	0x20000737

08006908 <__sinit>:
 8006908:	b510      	push	{r4, lr}
 800690a:	4604      	mov	r4, r0
 800690c:	f7ff fff0 	bl	80068f0 <__sinit_lock_acquire>
 8006910:	69a3      	ldr	r3, [r4, #24]
 8006912:	b11b      	cbz	r3, 800691c <__sinit+0x14>
 8006914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006918:	f7ff bff0 	b.w	80068fc <__sinit_lock_release>
 800691c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006920:	6523      	str	r3, [r4, #80]	; 0x50
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <__sinit+0x68>)
 8006924:	4a13      	ldr	r2, [pc, #76]	; (8006974 <__sinit+0x6c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	62a2      	str	r2, [r4, #40]	; 0x28
 800692a:	42a3      	cmp	r3, r4
 800692c:	bf04      	itt	eq
 800692e:	2301      	moveq	r3, #1
 8006930:	61a3      	streq	r3, [r4, #24]
 8006932:	4620      	mov	r0, r4
 8006934:	f000 f820 	bl	8006978 <__sfp>
 8006938:	6060      	str	r0, [r4, #4]
 800693a:	4620      	mov	r0, r4
 800693c:	f000 f81c 	bl	8006978 <__sfp>
 8006940:	60a0      	str	r0, [r4, #8]
 8006942:	4620      	mov	r0, r4
 8006944:	f000 f818 	bl	8006978 <__sfp>
 8006948:	2200      	movs	r2, #0
 800694a:	60e0      	str	r0, [r4, #12]
 800694c:	2104      	movs	r1, #4
 800694e:	6860      	ldr	r0, [r4, #4]
 8006950:	f7ff ff82 	bl	8006858 <std>
 8006954:	68a0      	ldr	r0, [r4, #8]
 8006956:	2201      	movs	r2, #1
 8006958:	2109      	movs	r1, #9
 800695a:	f7ff ff7d 	bl	8006858 <std>
 800695e:	68e0      	ldr	r0, [r4, #12]
 8006960:	2202      	movs	r2, #2
 8006962:	2112      	movs	r1, #18
 8006964:	f7ff ff78 	bl	8006858 <std>
 8006968:	2301      	movs	r3, #1
 800696a:	61a3      	str	r3, [r4, #24]
 800696c:	e7d2      	b.n	8006914 <__sinit+0xc>
 800696e:	bf00      	nop
 8006970:	08007b84 	.word	0x08007b84
 8006974:	080068a1 	.word	0x080068a1

08006978 <__sfp>:
 8006978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800697a:	4607      	mov	r7, r0
 800697c:	f7ff ffac 	bl	80068d8 <__sfp_lock_acquire>
 8006980:	4b1e      	ldr	r3, [pc, #120]	; (80069fc <__sfp+0x84>)
 8006982:	681e      	ldr	r6, [r3, #0]
 8006984:	69b3      	ldr	r3, [r6, #24]
 8006986:	b913      	cbnz	r3, 800698e <__sfp+0x16>
 8006988:	4630      	mov	r0, r6
 800698a:	f7ff ffbd 	bl	8006908 <__sinit>
 800698e:	3648      	adds	r6, #72	; 0x48
 8006990:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006994:	3b01      	subs	r3, #1
 8006996:	d503      	bpl.n	80069a0 <__sfp+0x28>
 8006998:	6833      	ldr	r3, [r6, #0]
 800699a:	b30b      	cbz	r3, 80069e0 <__sfp+0x68>
 800699c:	6836      	ldr	r6, [r6, #0]
 800699e:	e7f7      	b.n	8006990 <__sfp+0x18>
 80069a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069a4:	b9d5      	cbnz	r5, 80069dc <__sfp+0x64>
 80069a6:	4b16      	ldr	r3, [pc, #88]	; (8006a00 <__sfp+0x88>)
 80069a8:	60e3      	str	r3, [r4, #12]
 80069aa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069ae:	6665      	str	r5, [r4, #100]	; 0x64
 80069b0:	f000 f847 	bl	8006a42 <__retarget_lock_init_recursive>
 80069b4:	f7ff ff96 	bl	80068e4 <__sfp_lock_release>
 80069b8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80069bc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80069c0:	6025      	str	r5, [r4, #0]
 80069c2:	61a5      	str	r5, [r4, #24]
 80069c4:	2208      	movs	r2, #8
 80069c6:	4629      	mov	r1, r5
 80069c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80069cc:	f7ff fef0 	bl	80067b0 <memset>
 80069d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069d8:	4620      	mov	r0, r4
 80069da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069dc:	3468      	adds	r4, #104	; 0x68
 80069de:	e7d9      	b.n	8006994 <__sfp+0x1c>
 80069e0:	2104      	movs	r1, #4
 80069e2:	4638      	mov	r0, r7
 80069e4:	f7ff ff62 	bl	80068ac <__sfmoreglue>
 80069e8:	4604      	mov	r4, r0
 80069ea:	6030      	str	r0, [r6, #0]
 80069ec:	2800      	cmp	r0, #0
 80069ee:	d1d5      	bne.n	800699c <__sfp+0x24>
 80069f0:	f7ff ff78 	bl	80068e4 <__sfp_lock_release>
 80069f4:	230c      	movs	r3, #12
 80069f6:	603b      	str	r3, [r7, #0]
 80069f8:	e7ee      	b.n	80069d8 <__sfp+0x60>
 80069fa:	bf00      	nop
 80069fc:	08007b84 	.word	0x08007b84
 8006a00:	ffff0001 	.word	0xffff0001

08006a04 <_fwalk_reent>:
 8006a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a08:	4606      	mov	r6, r0
 8006a0a:	4688      	mov	r8, r1
 8006a0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a10:	2700      	movs	r7, #0
 8006a12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a16:	f1b9 0901 	subs.w	r9, r9, #1
 8006a1a:	d505      	bpl.n	8006a28 <_fwalk_reent+0x24>
 8006a1c:	6824      	ldr	r4, [r4, #0]
 8006a1e:	2c00      	cmp	r4, #0
 8006a20:	d1f7      	bne.n	8006a12 <_fwalk_reent+0xe>
 8006a22:	4638      	mov	r0, r7
 8006a24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a28:	89ab      	ldrh	r3, [r5, #12]
 8006a2a:	2b01      	cmp	r3, #1
 8006a2c:	d907      	bls.n	8006a3e <_fwalk_reent+0x3a>
 8006a2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a32:	3301      	adds	r3, #1
 8006a34:	d003      	beq.n	8006a3e <_fwalk_reent+0x3a>
 8006a36:	4629      	mov	r1, r5
 8006a38:	4630      	mov	r0, r6
 8006a3a:	47c0      	blx	r8
 8006a3c:	4307      	orrs	r7, r0
 8006a3e:	3568      	adds	r5, #104	; 0x68
 8006a40:	e7e9      	b.n	8006a16 <_fwalk_reent+0x12>

08006a42 <__retarget_lock_init_recursive>:
 8006a42:	4770      	bx	lr

08006a44 <__retarget_lock_acquire_recursive>:
 8006a44:	4770      	bx	lr

08006a46 <__retarget_lock_release_recursive>:
 8006a46:	4770      	bx	lr

08006a48 <_malloc_r>:
 8006a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a4a:	1ccd      	adds	r5, r1, #3
 8006a4c:	f025 0503 	bic.w	r5, r5, #3
 8006a50:	3508      	adds	r5, #8
 8006a52:	2d0c      	cmp	r5, #12
 8006a54:	bf38      	it	cc
 8006a56:	250c      	movcc	r5, #12
 8006a58:	2d00      	cmp	r5, #0
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	db01      	blt.n	8006a62 <_malloc_r+0x1a>
 8006a5e:	42a9      	cmp	r1, r5
 8006a60:	d903      	bls.n	8006a6a <_malloc_r+0x22>
 8006a62:	230c      	movs	r3, #12
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	2000      	movs	r0, #0
 8006a68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6a:	f000 ff19 	bl	80078a0 <__malloc_lock>
 8006a6e:	4921      	ldr	r1, [pc, #132]	; (8006af4 <_malloc_r+0xac>)
 8006a70:	680a      	ldr	r2, [r1, #0]
 8006a72:	4614      	mov	r4, r2
 8006a74:	b99c      	cbnz	r4, 8006a9e <_malloc_r+0x56>
 8006a76:	4f20      	ldr	r7, [pc, #128]	; (8006af8 <_malloc_r+0xb0>)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	b923      	cbnz	r3, 8006a86 <_malloc_r+0x3e>
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	4630      	mov	r0, r6
 8006a80:	f000 fc86 	bl	8007390 <_sbrk_r>
 8006a84:	6038      	str	r0, [r7, #0]
 8006a86:	4629      	mov	r1, r5
 8006a88:	4630      	mov	r0, r6
 8006a8a:	f000 fc81 	bl	8007390 <_sbrk_r>
 8006a8e:	1c43      	adds	r3, r0, #1
 8006a90:	d123      	bne.n	8006ada <_malloc_r+0x92>
 8006a92:	230c      	movs	r3, #12
 8006a94:	6033      	str	r3, [r6, #0]
 8006a96:	4630      	mov	r0, r6
 8006a98:	f000 ff08 	bl	80078ac <__malloc_unlock>
 8006a9c:	e7e3      	b.n	8006a66 <_malloc_r+0x1e>
 8006a9e:	6823      	ldr	r3, [r4, #0]
 8006aa0:	1b5b      	subs	r3, r3, r5
 8006aa2:	d417      	bmi.n	8006ad4 <_malloc_r+0x8c>
 8006aa4:	2b0b      	cmp	r3, #11
 8006aa6:	d903      	bls.n	8006ab0 <_malloc_r+0x68>
 8006aa8:	6023      	str	r3, [r4, #0]
 8006aaa:	441c      	add	r4, r3
 8006aac:	6025      	str	r5, [r4, #0]
 8006aae:	e004      	b.n	8006aba <_malloc_r+0x72>
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	42a2      	cmp	r2, r4
 8006ab4:	bf0c      	ite	eq
 8006ab6:	600b      	streq	r3, [r1, #0]
 8006ab8:	6053      	strne	r3, [r2, #4]
 8006aba:	4630      	mov	r0, r6
 8006abc:	f000 fef6 	bl	80078ac <__malloc_unlock>
 8006ac0:	f104 000b 	add.w	r0, r4, #11
 8006ac4:	1d23      	adds	r3, r4, #4
 8006ac6:	f020 0007 	bic.w	r0, r0, #7
 8006aca:	1ac2      	subs	r2, r0, r3
 8006acc:	d0cc      	beq.n	8006a68 <_malloc_r+0x20>
 8006ace:	1a1b      	subs	r3, r3, r0
 8006ad0:	50a3      	str	r3, [r4, r2]
 8006ad2:	e7c9      	b.n	8006a68 <_malloc_r+0x20>
 8006ad4:	4622      	mov	r2, r4
 8006ad6:	6864      	ldr	r4, [r4, #4]
 8006ad8:	e7cc      	b.n	8006a74 <_malloc_r+0x2c>
 8006ada:	1cc4      	adds	r4, r0, #3
 8006adc:	f024 0403 	bic.w	r4, r4, #3
 8006ae0:	42a0      	cmp	r0, r4
 8006ae2:	d0e3      	beq.n	8006aac <_malloc_r+0x64>
 8006ae4:	1a21      	subs	r1, r4, r0
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f000 fc52 	bl	8007390 <_sbrk_r>
 8006aec:	3001      	adds	r0, #1
 8006aee:	d1dd      	bne.n	8006aac <_malloc_r+0x64>
 8006af0:	e7cf      	b.n	8006a92 <_malloc_r+0x4a>
 8006af2:	bf00      	nop
 8006af4:	20000428 	.word	0x20000428
 8006af8:	2000042c 	.word	0x2000042c

08006afc <__ssputs_r>:
 8006afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b00:	688e      	ldr	r6, [r1, #8]
 8006b02:	429e      	cmp	r6, r3
 8006b04:	4682      	mov	sl, r0
 8006b06:	460c      	mov	r4, r1
 8006b08:	4690      	mov	r8, r2
 8006b0a:	461f      	mov	r7, r3
 8006b0c:	d838      	bhi.n	8006b80 <__ssputs_r+0x84>
 8006b0e:	898a      	ldrh	r2, [r1, #12]
 8006b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b14:	d032      	beq.n	8006b7c <__ssputs_r+0x80>
 8006b16:	6825      	ldr	r5, [r4, #0]
 8006b18:	6909      	ldr	r1, [r1, #16]
 8006b1a:	eba5 0901 	sub.w	r9, r5, r1
 8006b1e:	6965      	ldr	r5, [r4, #20]
 8006b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b28:	3301      	adds	r3, #1
 8006b2a:	444b      	add	r3, r9
 8006b2c:	106d      	asrs	r5, r5, #1
 8006b2e:	429d      	cmp	r5, r3
 8006b30:	bf38      	it	cc
 8006b32:	461d      	movcc	r5, r3
 8006b34:	0553      	lsls	r3, r2, #21
 8006b36:	d531      	bpl.n	8006b9c <__ssputs_r+0xa0>
 8006b38:	4629      	mov	r1, r5
 8006b3a:	f7ff ff85 	bl	8006a48 <_malloc_r>
 8006b3e:	4606      	mov	r6, r0
 8006b40:	b950      	cbnz	r0, 8006b58 <__ssputs_r+0x5c>
 8006b42:	230c      	movs	r3, #12
 8006b44:	f8ca 3000 	str.w	r3, [sl]
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b4e:	81a3      	strh	r3, [r4, #12]
 8006b50:	f04f 30ff 	mov.w	r0, #4294967295
 8006b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b58:	6921      	ldr	r1, [r4, #16]
 8006b5a:	464a      	mov	r2, r9
 8006b5c:	f7ff fe1a 	bl	8006794 <memcpy>
 8006b60:	89a3      	ldrh	r3, [r4, #12]
 8006b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	81a3      	strh	r3, [r4, #12]
 8006b6c:	6126      	str	r6, [r4, #16]
 8006b6e:	6165      	str	r5, [r4, #20]
 8006b70:	444e      	add	r6, r9
 8006b72:	eba5 0509 	sub.w	r5, r5, r9
 8006b76:	6026      	str	r6, [r4, #0]
 8006b78:	60a5      	str	r5, [r4, #8]
 8006b7a:	463e      	mov	r6, r7
 8006b7c:	42be      	cmp	r6, r7
 8006b7e:	d900      	bls.n	8006b82 <__ssputs_r+0x86>
 8006b80:	463e      	mov	r6, r7
 8006b82:	4632      	mov	r2, r6
 8006b84:	6820      	ldr	r0, [r4, #0]
 8006b86:	4641      	mov	r1, r8
 8006b88:	f000 fe70 	bl	800786c <memmove>
 8006b8c:	68a3      	ldr	r3, [r4, #8]
 8006b8e:	6822      	ldr	r2, [r4, #0]
 8006b90:	1b9b      	subs	r3, r3, r6
 8006b92:	4432      	add	r2, r6
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6022      	str	r2, [r4, #0]
 8006b98:	2000      	movs	r0, #0
 8006b9a:	e7db      	b.n	8006b54 <__ssputs_r+0x58>
 8006b9c:	462a      	mov	r2, r5
 8006b9e:	f000 fedb 	bl	8007958 <_realloc_r>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d1e1      	bne.n	8006b6c <__ssputs_r+0x70>
 8006ba8:	6921      	ldr	r1, [r4, #16]
 8006baa:	4650      	mov	r0, sl
 8006bac:	f000 fe84 	bl	80078b8 <_free_r>
 8006bb0:	e7c7      	b.n	8006b42 <__ssputs_r+0x46>
	...

08006bb4 <_svfiprintf_r>:
 8006bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb8:	4698      	mov	r8, r3
 8006bba:	898b      	ldrh	r3, [r1, #12]
 8006bbc:	061b      	lsls	r3, r3, #24
 8006bbe:	b09d      	sub	sp, #116	; 0x74
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	4614      	mov	r4, r2
 8006bc6:	d50e      	bpl.n	8006be6 <_svfiprintf_r+0x32>
 8006bc8:	690b      	ldr	r3, [r1, #16]
 8006bca:	b963      	cbnz	r3, 8006be6 <_svfiprintf_r+0x32>
 8006bcc:	2140      	movs	r1, #64	; 0x40
 8006bce:	f7ff ff3b 	bl	8006a48 <_malloc_r>
 8006bd2:	6028      	str	r0, [r5, #0]
 8006bd4:	6128      	str	r0, [r5, #16]
 8006bd6:	b920      	cbnz	r0, 8006be2 <_svfiprintf_r+0x2e>
 8006bd8:	230c      	movs	r3, #12
 8006bda:	603b      	str	r3, [r7, #0]
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	e0d1      	b.n	8006d86 <_svfiprintf_r+0x1d2>
 8006be2:	2340      	movs	r3, #64	; 0x40
 8006be4:	616b      	str	r3, [r5, #20]
 8006be6:	2300      	movs	r3, #0
 8006be8:	9309      	str	r3, [sp, #36]	; 0x24
 8006bea:	2320      	movs	r3, #32
 8006bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bf4:	2330      	movs	r3, #48	; 0x30
 8006bf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006da0 <_svfiprintf_r+0x1ec>
 8006bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bfe:	f04f 0901 	mov.w	r9, #1
 8006c02:	4623      	mov	r3, r4
 8006c04:	469a      	mov	sl, r3
 8006c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c0a:	b10a      	cbz	r2, 8006c10 <_svfiprintf_r+0x5c>
 8006c0c:	2a25      	cmp	r2, #37	; 0x25
 8006c0e:	d1f9      	bne.n	8006c04 <_svfiprintf_r+0x50>
 8006c10:	ebba 0b04 	subs.w	fp, sl, r4
 8006c14:	d00b      	beq.n	8006c2e <_svfiprintf_r+0x7a>
 8006c16:	465b      	mov	r3, fp
 8006c18:	4622      	mov	r2, r4
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4638      	mov	r0, r7
 8006c1e:	f7ff ff6d 	bl	8006afc <__ssputs_r>
 8006c22:	3001      	adds	r0, #1
 8006c24:	f000 80aa 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c2a:	445a      	add	r2, fp
 8006c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8006c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	f000 80a2 	beq.w	8006d7c <_svfiprintf_r+0x1c8>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c42:	f10a 0a01 	add.w	sl, sl, #1
 8006c46:	9304      	str	r3, [sp, #16]
 8006c48:	9307      	str	r3, [sp, #28]
 8006c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8006c50:	4654      	mov	r4, sl
 8006c52:	2205      	movs	r2, #5
 8006c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c58:	4851      	ldr	r0, [pc, #324]	; (8006da0 <_svfiprintf_r+0x1ec>)
 8006c5a:	f7f9 fac1 	bl	80001e0 <memchr>
 8006c5e:	9a04      	ldr	r2, [sp, #16]
 8006c60:	b9d8      	cbnz	r0, 8006c9a <_svfiprintf_r+0xe6>
 8006c62:	06d0      	lsls	r0, r2, #27
 8006c64:	bf44      	itt	mi
 8006c66:	2320      	movmi	r3, #32
 8006c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c6c:	0711      	lsls	r1, r2, #28
 8006c6e:	bf44      	itt	mi
 8006c70:	232b      	movmi	r3, #43	; 0x2b
 8006c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c76:	f89a 3000 	ldrb.w	r3, [sl]
 8006c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c7c:	d015      	beq.n	8006caa <_svfiprintf_r+0xf6>
 8006c7e:	9a07      	ldr	r2, [sp, #28]
 8006c80:	4654      	mov	r4, sl
 8006c82:	2000      	movs	r0, #0
 8006c84:	f04f 0c0a 	mov.w	ip, #10
 8006c88:	4621      	mov	r1, r4
 8006c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c8e:	3b30      	subs	r3, #48	; 0x30
 8006c90:	2b09      	cmp	r3, #9
 8006c92:	d94e      	bls.n	8006d32 <_svfiprintf_r+0x17e>
 8006c94:	b1b0      	cbz	r0, 8006cc4 <_svfiprintf_r+0x110>
 8006c96:	9207      	str	r2, [sp, #28]
 8006c98:	e014      	b.n	8006cc4 <_svfiprintf_r+0x110>
 8006c9a:	eba0 0308 	sub.w	r3, r0, r8
 8006c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	9304      	str	r3, [sp, #16]
 8006ca6:	46a2      	mov	sl, r4
 8006ca8:	e7d2      	b.n	8006c50 <_svfiprintf_r+0x9c>
 8006caa:	9b03      	ldr	r3, [sp, #12]
 8006cac:	1d19      	adds	r1, r3, #4
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	9103      	str	r1, [sp, #12]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	bfbb      	ittet	lt
 8006cb6:	425b      	neglt	r3, r3
 8006cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8006cbc:	9307      	strge	r3, [sp, #28]
 8006cbe:	9307      	strlt	r3, [sp, #28]
 8006cc0:	bfb8      	it	lt
 8006cc2:	9204      	strlt	r2, [sp, #16]
 8006cc4:	7823      	ldrb	r3, [r4, #0]
 8006cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8006cc8:	d10c      	bne.n	8006ce4 <_svfiprintf_r+0x130>
 8006cca:	7863      	ldrb	r3, [r4, #1]
 8006ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cce:	d135      	bne.n	8006d3c <_svfiprintf_r+0x188>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	1d1a      	adds	r2, r3, #4
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	9203      	str	r2, [sp, #12]
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	bfb8      	it	lt
 8006cdc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ce0:	3402      	adds	r4, #2
 8006ce2:	9305      	str	r3, [sp, #20]
 8006ce4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006db0 <_svfiprintf_r+0x1fc>
 8006ce8:	7821      	ldrb	r1, [r4, #0]
 8006cea:	2203      	movs	r2, #3
 8006cec:	4650      	mov	r0, sl
 8006cee:	f7f9 fa77 	bl	80001e0 <memchr>
 8006cf2:	b140      	cbz	r0, 8006d06 <_svfiprintf_r+0x152>
 8006cf4:	2340      	movs	r3, #64	; 0x40
 8006cf6:	eba0 000a 	sub.w	r0, r0, sl
 8006cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8006cfe:	9b04      	ldr	r3, [sp, #16]
 8006d00:	4303      	orrs	r3, r0
 8006d02:	3401      	adds	r4, #1
 8006d04:	9304      	str	r3, [sp, #16]
 8006d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d0a:	4826      	ldr	r0, [pc, #152]	; (8006da4 <_svfiprintf_r+0x1f0>)
 8006d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d10:	2206      	movs	r2, #6
 8006d12:	f7f9 fa65 	bl	80001e0 <memchr>
 8006d16:	2800      	cmp	r0, #0
 8006d18:	d038      	beq.n	8006d8c <_svfiprintf_r+0x1d8>
 8006d1a:	4b23      	ldr	r3, [pc, #140]	; (8006da8 <_svfiprintf_r+0x1f4>)
 8006d1c:	bb1b      	cbnz	r3, 8006d66 <_svfiprintf_r+0x1b2>
 8006d1e:	9b03      	ldr	r3, [sp, #12]
 8006d20:	3307      	adds	r3, #7
 8006d22:	f023 0307 	bic.w	r3, r3, #7
 8006d26:	3308      	adds	r3, #8
 8006d28:	9303      	str	r3, [sp, #12]
 8006d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d2c:	4433      	add	r3, r6
 8006d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d30:	e767      	b.n	8006c02 <_svfiprintf_r+0x4e>
 8006d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d36:	460c      	mov	r4, r1
 8006d38:	2001      	movs	r0, #1
 8006d3a:	e7a5      	b.n	8006c88 <_svfiprintf_r+0xd4>
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	3401      	adds	r4, #1
 8006d40:	9305      	str	r3, [sp, #20]
 8006d42:	4619      	mov	r1, r3
 8006d44:	f04f 0c0a 	mov.w	ip, #10
 8006d48:	4620      	mov	r0, r4
 8006d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d4e:	3a30      	subs	r2, #48	; 0x30
 8006d50:	2a09      	cmp	r2, #9
 8006d52:	d903      	bls.n	8006d5c <_svfiprintf_r+0x1a8>
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d0c5      	beq.n	8006ce4 <_svfiprintf_r+0x130>
 8006d58:	9105      	str	r1, [sp, #20]
 8006d5a:	e7c3      	b.n	8006ce4 <_svfiprintf_r+0x130>
 8006d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d60:	4604      	mov	r4, r0
 8006d62:	2301      	movs	r3, #1
 8006d64:	e7f0      	b.n	8006d48 <_svfiprintf_r+0x194>
 8006d66:	ab03      	add	r3, sp, #12
 8006d68:	9300      	str	r3, [sp, #0]
 8006d6a:	462a      	mov	r2, r5
 8006d6c:	4b0f      	ldr	r3, [pc, #60]	; (8006dac <_svfiprintf_r+0x1f8>)
 8006d6e:	a904      	add	r1, sp, #16
 8006d70:	4638      	mov	r0, r7
 8006d72:	f3af 8000 	nop.w
 8006d76:	1c42      	adds	r2, r0, #1
 8006d78:	4606      	mov	r6, r0
 8006d7a:	d1d6      	bne.n	8006d2a <_svfiprintf_r+0x176>
 8006d7c:	89ab      	ldrh	r3, [r5, #12]
 8006d7e:	065b      	lsls	r3, r3, #25
 8006d80:	f53f af2c 	bmi.w	8006bdc <_svfiprintf_r+0x28>
 8006d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d86:	b01d      	add	sp, #116	; 0x74
 8006d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8c:	ab03      	add	r3, sp, #12
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4b06      	ldr	r3, [pc, #24]	; (8006dac <_svfiprintf_r+0x1f8>)
 8006d94:	a904      	add	r1, sp, #16
 8006d96:	4638      	mov	r0, r7
 8006d98:	f000 f9d4 	bl	8007144 <_printf_i>
 8006d9c:	e7eb      	b.n	8006d76 <_svfiprintf_r+0x1c2>
 8006d9e:	bf00      	nop
 8006da0:	08007be8 	.word	0x08007be8
 8006da4:	08007bf2 	.word	0x08007bf2
 8006da8:	00000000 	.word	0x00000000
 8006dac:	08006afd 	.word	0x08006afd
 8006db0:	08007bee 	.word	0x08007bee

08006db4 <__sfputc_r>:
 8006db4:	6893      	ldr	r3, [r2, #8]
 8006db6:	3b01      	subs	r3, #1
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	b410      	push	{r4}
 8006dbc:	6093      	str	r3, [r2, #8]
 8006dbe:	da08      	bge.n	8006dd2 <__sfputc_r+0x1e>
 8006dc0:	6994      	ldr	r4, [r2, #24]
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	db01      	blt.n	8006dca <__sfputc_r+0x16>
 8006dc6:	290a      	cmp	r1, #10
 8006dc8:	d103      	bne.n	8006dd2 <__sfputc_r+0x1e>
 8006dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006dce:	f000 bb33 	b.w	8007438 <__swbuf_r>
 8006dd2:	6813      	ldr	r3, [r2, #0]
 8006dd4:	1c58      	adds	r0, r3, #1
 8006dd6:	6010      	str	r0, [r2, #0]
 8006dd8:	7019      	strb	r1, [r3, #0]
 8006dda:	4608      	mov	r0, r1
 8006ddc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006de0:	4770      	bx	lr

08006de2 <__sfputs_r>:
 8006de2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de4:	4606      	mov	r6, r0
 8006de6:	460f      	mov	r7, r1
 8006de8:	4614      	mov	r4, r2
 8006dea:	18d5      	adds	r5, r2, r3
 8006dec:	42ac      	cmp	r4, r5
 8006dee:	d101      	bne.n	8006df4 <__sfputs_r+0x12>
 8006df0:	2000      	movs	r0, #0
 8006df2:	e007      	b.n	8006e04 <__sfputs_r+0x22>
 8006df4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006df8:	463a      	mov	r2, r7
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	f7ff ffda 	bl	8006db4 <__sfputc_r>
 8006e00:	1c43      	adds	r3, r0, #1
 8006e02:	d1f3      	bne.n	8006dec <__sfputs_r+0xa>
 8006e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e08 <_vfiprintf_r>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	460d      	mov	r5, r1
 8006e0e:	b09d      	sub	sp, #116	; 0x74
 8006e10:	4614      	mov	r4, r2
 8006e12:	4698      	mov	r8, r3
 8006e14:	4606      	mov	r6, r0
 8006e16:	b118      	cbz	r0, 8006e20 <_vfiprintf_r+0x18>
 8006e18:	6983      	ldr	r3, [r0, #24]
 8006e1a:	b90b      	cbnz	r3, 8006e20 <_vfiprintf_r+0x18>
 8006e1c:	f7ff fd74 	bl	8006908 <__sinit>
 8006e20:	4b89      	ldr	r3, [pc, #548]	; (8007048 <_vfiprintf_r+0x240>)
 8006e22:	429d      	cmp	r5, r3
 8006e24:	d11b      	bne.n	8006e5e <_vfiprintf_r+0x56>
 8006e26:	6875      	ldr	r5, [r6, #4]
 8006e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e2a:	07d9      	lsls	r1, r3, #31
 8006e2c:	d405      	bmi.n	8006e3a <_vfiprintf_r+0x32>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	059a      	lsls	r2, r3, #22
 8006e32:	d402      	bmi.n	8006e3a <_vfiprintf_r+0x32>
 8006e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e36:	f7ff fe05 	bl	8006a44 <__retarget_lock_acquire_recursive>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	071b      	lsls	r3, r3, #28
 8006e3e:	d501      	bpl.n	8006e44 <_vfiprintf_r+0x3c>
 8006e40:	692b      	ldr	r3, [r5, #16]
 8006e42:	b9eb      	cbnz	r3, 8006e80 <_vfiprintf_r+0x78>
 8006e44:	4629      	mov	r1, r5
 8006e46:	4630      	mov	r0, r6
 8006e48:	f000 fb5a 	bl	8007500 <__swsetup_r>
 8006e4c:	b1c0      	cbz	r0, 8006e80 <_vfiprintf_r+0x78>
 8006e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e50:	07dc      	lsls	r4, r3, #31
 8006e52:	d50e      	bpl.n	8006e72 <_vfiprintf_r+0x6a>
 8006e54:	f04f 30ff 	mov.w	r0, #4294967295
 8006e58:	b01d      	add	sp, #116	; 0x74
 8006e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5e:	4b7b      	ldr	r3, [pc, #492]	; (800704c <_vfiprintf_r+0x244>)
 8006e60:	429d      	cmp	r5, r3
 8006e62:	d101      	bne.n	8006e68 <_vfiprintf_r+0x60>
 8006e64:	68b5      	ldr	r5, [r6, #8]
 8006e66:	e7df      	b.n	8006e28 <_vfiprintf_r+0x20>
 8006e68:	4b79      	ldr	r3, [pc, #484]	; (8007050 <_vfiprintf_r+0x248>)
 8006e6a:	429d      	cmp	r5, r3
 8006e6c:	bf08      	it	eq
 8006e6e:	68f5      	ldreq	r5, [r6, #12]
 8006e70:	e7da      	b.n	8006e28 <_vfiprintf_r+0x20>
 8006e72:	89ab      	ldrh	r3, [r5, #12]
 8006e74:	0598      	lsls	r0, r3, #22
 8006e76:	d4ed      	bmi.n	8006e54 <_vfiprintf_r+0x4c>
 8006e78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e7a:	f7ff fde4 	bl	8006a46 <__retarget_lock_release_recursive>
 8006e7e:	e7e9      	b.n	8006e54 <_vfiprintf_r+0x4c>
 8006e80:	2300      	movs	r3, #0
 8006e82:	9309      	str	r3, [sp, #36]	; 0x24
 8006e84:	2320      	movs	r3, #32
 8006e86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e8a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e8e:	2330      	movs	r3, #48	; 0x30
 8006e90:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007054 <_vfiprintf_r+0x24c>
 8006e94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e98:	f04f 0901 	mov.w	r9, #1
 8006e9c:	4623      	mov	r3, r4
 8006e9e:	469a      	mov	sl, r3
 8006ea0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ea4:	b10a      	cbz	r2, 8006eaa <_vfiprintf_r+0xa2>
 8006ea6:	2a25      	cmp	r2, #37	; 0x25
 8006ea8:	d1f9      	bne.n	8006e9e <_vfiprintf_r+0x96>
 8006eaa:	ebba 0b04 	subs.w	fp, sl, r4
 8006eae:	d00b      	beq.n	8006ec8 <_vfiprintf_r+0xc0>
 8006eb0:	465b      	mov	r3, fp
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4629      	mov	r1, r5
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f7ff ff93 	bl	8006de2 <__sfputs_r>
 8006ebc:	3001      	adds	r0, #1
 8006ebe:	f000 80aa 	beq.w	8007016 <_vfiprintf_r+0x20e>
 8006ec2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ec4:	445a      	add	r2, fp
 8006ec6:	9209      	str	r2, [sp, #36]	; 0x24
 8006ec8:	f89a 3000 	ldrb.w	r3, [sl]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f000 80a2 	beq.w	8007016 <_vfiprintf_r+0x20e>
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006edc:	f10a 0a01 	add.w	sl, sl, #1
 8006ee0:	9304      	str	r3, [sp, #16]
 8006ee2:	9307      	str	r3, [sp, #28]
 8006ee4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee8:	931a      	str	r3, [sp, #104]	; 0x68
 8006eea:	4654      	mov	r4, sl
 8006eec:	2205      	movs	r2, #5
 8006eee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef2:	4858      	ldr	r0, [pc, #352]	; (8007054 <_vfiprintf_r+0x24c>)
 8006ef4:	f7f9 f974 	bl	80001e0 <memchr>
 8006ef8:	9a04      	ldr	r2, [sp, #16]
 8006efa:	b9d8      	cbnz	r0, 8006f34 <_vfiprintf_r+0x12c>
 8006efc:	06d1      	lsls	r1, r2, #27
 8006efe:	bf44      	itt	mi
 8006f00:	2320      	movmi	r3, #32
 8006f02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f06:	0713      	lsls	r3, r2, #28
 8006f08:	bf44      	itt	mi
 8006f0a:	232b      	movmi	r3, #43	; 0x2b
 8006f0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f10:	f89a 3000 	ldrb.w	r3, [sl]
 8006f14:	2b2a      	cmp	r3, #42	; 0x2a
 8006f16:	d015      	beq.n	8006f44 <_vfiprintf_r+0x13c>
 8006f18:	9a07      	ldr	r2, [sp, #28]
 8006f1a:	4654      	mov	r4, sl
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	f04f 0c0a 	mov.w	ip, #10
 8006f22:	4621      	mov	r1, r4
 8006f24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f28:	3b30      	subs	r3, #48	; 0x30
 8006f2a:	2b09      	cmp	r3, #9
 8006f2c:	d94e      	bls.n	8006fcc <_vfiprintf_r+0x1c4>
 8006f2e:	b1b0      	cbz	r0, 8006f5e <_vfiprintf_r+0x156>
 8006f30:	9207      	str	r2, [sp, #28]
 8006f32:	e014      	b.n	8006f5e <_vfiprintf_r+0x156>
 8006f34:	eba0 0308 	sub.w	r3, r0, r8
 8006f38:	fa09 f303 	lsl.w	r3, r9, r3
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	9304      	str	r3, [sp, #16]
 8006f40:	46a2      	mov	sl, r4
 8006f42:	e7d2      	b.n	8006eea <_vfiprintf_r+0xe2>
 8006f44:	9b03      	ldr	r3, [sp, #12]
 8006f46:	1d19      	adds	r1, r3, #4
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	9103      	str	r1, [sp, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bfbb      	ittet	lt
 8006f50:	425b      	neglt	r3, r3
 8006f52:	f042 0202 	orrlt.w	r2, r2, #2
 8006f56:	9307      	strge	r3, [sp, #28]
 8006f58:	9307      	strlt	r3, [sp, #28]
 8006f5a:	bfb8      	it	lt
 8006f5c:	9204      	strlt	r2, [sp, #16]
 8006f5e:	7823      	ldrb	r3, [r4, #0]
 8006f60:	2b2e      	cmp	r3, #46	; 0x2e
 8006f62:	d10c      	bne.n	8006f7e <_vfiprintf_r+0x176>
 8006f64:	7863      	ldrb	r3, [r4, #1]
 8006f66:	2b2a      	cmp	r3, #42	; 0x2a
 8006f68:	d135      	bne.n	8006fd6 <_vfiprintf_r+0x1ce>
 8006f6a:	9b03      	ldr	r3, [sp, #12]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	9203      	str	r2, [sp, #12]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	bfb8      	it	lt
 8006f76:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f7a:	3402      	adds	r4, #2
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007064 <_vfiprintf_r+0x25c>
 8006f82:	7821      	ldrb	r1, [r4, #0]
 8006f84:	2203      	movs	r2, #3
 8006f86:	4650      	mov	r0, sl
 8006f88:	f7f9 f92a 	bl	80001e0 <memchr>
 8006f8c:	b140      	cbz	r0, 8006fa0 <_vfiprintf_r+0x198>
 8006f8e:	2340      	movs	r3, #64	; 0x40
 8006f90:	eba0 000a 	sub.w	r0, r0, sl
 8006f94:	fa03 f000 	lsl.w	r0, r3, r0
 8006f98:	9b04      	ldr	r3, [sp, #16]
 8006f9a:	4303      	orrs	r3, r0
 8006f9c:	3401      	adds	r4, #1
 8006f9e:	9304      	str	r3, [sp, #16]
 8006fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa4:	482c      	ldr	r0, [pc, #176]	; (8007058 <_vfiprintf_r+0x250>)
 8006fa6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006faa:	2206      	movs	r2, #6
 8006fac:	f7f9 f918 	bl	80001e0 <memchr>
 8006fb0:	2800      	cmp	r0, #0
 8006fb2:	d03f      	beq.n	8007034 <_vfiprintf_r+0x22c>
 8006fb4:	4b29      	ldr	r3, [pc, #164]	; (800705c <_vfiprintf_r+0x254>)
 8006fb6:	bb1b      	cbnz	r3, 8007000 <_vfiprintf_r+0x1f8>
 8006fb8:	9b03      	ldr	r3, [sp, #12]
 8006fba:	3307      	adds	r3, #7
 8006fbc:	f023 0307 	bic.w	r3, r3, #7
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	9303      	str	r3, [sp, #12]
 8006fc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fc6:	443b      	add	r3, r7
 8006fc8:	9309      	str	r3, [sp, #36]	; 0x24
 8006fca:	e767      	b.n	8006e9c <_vfiprintf_r+0x94>
 8006fcc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fd0:	460c      	mov	r4, r1
 8006fd2:	2001      	movs	r0, #1
 8006fd4:	e7a5      	b.n	8006f22 <_vfiprintf_r+0x11a>
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	3401      	adds	r4, #1
 8006fda:	9305      	str	r3, [sp, #20]
 8006fdc:	4619      	mov	r1, r3
 8006fde:	f04f 0c0a 	mov.w	ip, #10
 8006fe2:	4620      	mov	r0, r4
 8006fe4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fe8:	3a30      	subs	r2, #48	; 0x30
 8006fea:	2a09      	cmp	r2, #9
 8006fec:	d903      	bls.n	8006ff6 <_vfiprintf_r+0x1ee>
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d0c5      	beq.n	8006f7e <_vfiprintf_r+0x176>
 8006ff2:	9105      	str	r1, [sp, #20]
 8006ff4:	e7c3      	b.n	8006f7e <_vfiprintf_r+0x176>
 8006ff6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ffa:	4604      	mov	r4, r0
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e7f0      	b.n	8006fe2 <_vfiprintf_r+0x1da>
 8007000:	ab03      	add	r3, sp, #12
 8007002:	9300      	str	r3, [sp, #0]
 8007004:	462a      	mov	r2, r5
 8007006:	4b16      	ldr	r3, [pc, #88]	; (8007060 <_vfiprintf_r+0x258>)
 8007008:	a904      	add	r1, sp, #16
 800700a:	4630      	mov	r0, r6
 800700c:	f3af 8000 	nop.w
 8007010:	4607      	mov	r7, r0
 8007012:	1c78      	adds	r0, r7, #1
 8007014:	d1d6      	bne.n	8006fc4 <_vfiprintf_r+0x1bc>
 8007016:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007018:	07d9      	lsls	r1, r3, #31
 800701a:	d405      	bmi.n	8007028 <_vfiprintf_r+0x220>
 800701c:	89ab      	ldrh	r3, [r5, #12]
 800701e:	059a      	lsls	r2, r3, #22
 8007020:	d402      	bmi.n	8007028 <_vfiprintf_r+0x220>
 8007022:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007024:	f7ff fd0f 	bl	8006a46 <__retarget_lock_release_recursive>
 8007028:	89ab      	ldrh	r3, [r5, #12]
 800702a:	065b      	lsls	r3, r3, #25
 800702c:	f53f af12 	bmi.w	8006e54 <_vfiprintf_r+0x4c>
 8007030:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007032:	e711      	b.n	8006e58 <_vfiprintf_r+0x50>
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	462a      	mov	r2, r5
 800703a:	4b09      	ldr	r3, [pc, #36]	; (8007060 <_vfiprintf_r+0x258>)
 800703c:	a904      	add	r1, sp, #16
 800703e:	4630      	mov	r0, r6
 8007040:	f000 f880 	bl	8007144 <_printf_i>
 8007044:	e7e4      	b.n	8007010 <_vfiprintf_r+0x208>
 8007046:	bf00      	nop
 8007048:	08007ba8 	.word	0x08007ba8
 800704c:	08007bc8 	.word	0x08007bc8
 8007050:	08007b88 	.word	0x08007b88
 8007054:	08007be8 	.word	0x08007be8
 8007058:	08007bf2 	.word	0x08007bf2
 800705c:	00000000 	.word	0x00000000
 8007060:	08006de3 	.word	0x08006de3
 8007064:	08007bee 	.word	0x08007bee

08007068 <_printf_common>:
 8007068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800706c:	4616      	mov	r6, r2
 800706e:	4699      	mov	r9, r3
 8007070:	688a      	ldr	r2, [r1, #8]
 8007072:	690b      	ldr	r3, [r1, #16]
 8007074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007078:	4293      	cmp	r3, r2
 800707a:	bfb8      	it	lt
 800707c:	4613      	movlt	r3, r2
 800707e:	6033      	str	r3, [r6, #0]
 8007080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007084:	4607      	mov	r7, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b10a      	cbz	r2, 800708e <_printf_common+0x26>
 800708a:	3301      	adds	r3, #1
 800708c:	6033      	str	r3, [r6, #0]
 800708e:	6823      	ldr	r3, [r4, #0]
 8007090:	0699      	lsls	r1, r3, #26
 8007092:	bf42      	ittt	mi
 8007094:	6833      	ldrmi	r3, [r6, #0]
 8007096:	3302      	addmi	r3, #2
 8007098:	6033      	strmi	r3, [r6, #0]
 800709a:	6825      	ldr	r5, [r4, #0]
 800709c:	f015 0506 	ands.w	r5, r5, #6
 80070a0:	d106      	bne.n	80070b0 <_printf_common+0x48>
 80070a2:	f104 0a19 	add.w	sl, r4, #25
 80070a6:	68e3      	ldr	r3, [r4, #12]
 80070a8:	6832      	ldr	r2, [r6, #0]
 80070aa:	1a9b      	subs	r3, r3, r2
 80070ac:	42ab      	cmp	r3, r5
 80070ae:	dc26      	bgt.n	80070fe <_printf_common+0x96>
 80070b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80070b4:	1e13      	subs	r3, r2, #0
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	bf18      	it	ne
 80070ba:	2301      	movne	r3, #1
 80070bc:	0692      	lsls	r2, r2, #26
 80070be:	d42b      	bmi.n	8007118 <_printf_common+0xb0>
 80070c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070c4:	4649      	mov	r1, r9
 80070c6:	4638      	mov	r0, r7
 80070c8:	47c0      	blx	r8
 80070ca:	3001      	adds	r0, #1
 80070cc:	d01e      	beq.n	800710c <_printf_common+0xa4>
 80070ce:	6823      	ldr	r3, [r4, #0]
 80070d0:	68e5      	ldr	r5, [r4, #12]
 80070d2:	6832      	ldr	r2, [r6, #0]
 80070d4:	f003 0306 	and.w	r3, r3, #6
 80070d8:	2b04      	cmp	r3, #4
 80070da:	bf08      	it	eq
 80070dc:	1aad      	subeq	r5, r5, r2
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	6922      	ldr	r2, [r4, #16]
 80070e2:	bf0c      	ite	eq
 80070e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e8:	2500      	movne	r5, #0
 80070ea:	4293      	cmp	r3, r2
 80070ec:	bfc4      	itt	gt
 80070ee:	1a9b      	subgt	r3, r3, r2
 80070f0:	18ed      	addgt	r5, r5, r3
 80070f2:	2600      	movs	r6, #0
 80070f4:	341a      	adds	r4, #26
 80070f6:	42b5      	cmp	r5, r6
 80070f8:	d11a      	bne.n	8007130 <_printf_common+0xc8>
 80070fa:	2000      	movs	r0, #0
 80070fc:	e008      	b.n	8007110 <_printf_common+0xa8>
 80070fe:	2301      	movs	r3, #1
 8007100:	4652      	mov	r2, sl
 8007102:	4649      	mov	r1, r9
 8007104:	4638      	mov	r0, r7
 8007106:	47c0      	blx	r8
 8007108:	3001      	adds	r0, #1
 800710a:	d103      	bne.n	8007114 <_printf_common+0xac>
 800710c:	f04f 30ff 	mov.w	r0, #4294967295
 8007110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007114:	3501      	adds	r5, #1
 8007116:	e7c6      	b.n	80070a6 <_printf_common+0x3e>
 8007118:	18e1      	adds	r1, r4, r3
 800711a:	1c5a      	adds	r2, r3, #1
 800711c:	2030      	movs	r0, #48	; 0x30
 800711e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007122:	4422      	add	r2, r4
 8007124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800712c:	3302      	adds	r3, #2
 800712e:	e7c7      	b.n	80070c0 <_printf_common+0x58>
 8007130:	2301      	movs	r3, #1
 8007132:	4622      	mov	r2, r4
 8007134:	4649      	mov	r1, r9
 8007136:	4638      	mov	r0, r7
 8007138:	47c0      	blx	r8
 800713a:	3001      	adds	r0, #1
 800713c:	d0e6      	beq.n	800710c <_printf_common+0xa4>
 800713e:	3601      	adds	r6, #1
 8007140:	e7d9      	b.n	80070f6 <_printf_common+0x8e>
	...

08007144 <_printf_i>:
 8007144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007148:	460c      	mov	r4, r1
 800714a:	4691      	mov	r9, r2
 800714c:	7e27      	ldrb	r7, [r4, #24]
 800714e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007150:	2f78      	cmp	r7, #120	; 0x78
 8007152:	4680      	mov	r8, r0
 8007154:	469a      	mov	sl, r3
 8007156:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800715a:	d807      	bhi.n	800716c <_printf_i+0x28>
 800715c:	2f62      	cmp	r7, #98	; 0x62
 800715e:	d80a      	bhi.n	8007176 <_printf_i+0x32>
 8007160:	2f00      	cmp	r7, #0
 8007162:	f000 80d8 	beq.w	8007316 <_printf_i+0x1d2>
 8007166:	2f58      	cmp	r7, #88	; 0x58
 8007168:	f000 80a3 	beq.w	80072b2 <_printf_i+0x16e>
 800716c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007174:	e03a      	b.n	80071ec <_printf_i+0xa8>
 8007176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800717a:	2b15      	cmp	r3, #21
 800717c:	d8f6      	bhi.n	800716c <_printf_i+0x28>
 800717e:	a001      	add	r0, pc, #4	; (adr r0, 8007184 <_printf_i+0x40>)
 8007180:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007184:	080071dd 	.word	0x080071dd
 8007188:	080071f1 	.word	0x080071f1
 800718c:	0800716d 	.word	0x0800716d
 8007190:	0800716d 	.word	0x0800716d
 8007194:	0800716d 	.word	0x0800716d
 8007198:	0800716d 	.word	0x0800716d
 800719c:	080071f1 	.word	0x080071f1
 80071a0:	0800716d 	.word	0x0800716d
 80071a4:	0800716d 	.word	0x0800716d
 80071a8:	0800716d 	.word	0x0800716d
 80071ac:	0800716d 	.word	0x0800716d
 80071b0:	080072fd 	.word	0x080072fd
 80071b4:	08007221 	.word	0x08007221
 80071b8:	080072df 	.word	0x080072df
 80071bc:	0800716d 	.word	0x0800716d
 80071c0:	0800716d 	.word	0x0800716d
 80071c4:	0800731f 	.word	0x0800731f
 80071c8:	0800716d 	.word	0x0800716d
 80071cc:	08007221 	.word	0x08007221
 80071d0:	0800716d 	.word	0x0800716d
 80071d4:	0800716d 	.word	0x0800716d
 80071d8:	080072e7 	.word	0x080072e7
 80071dc:	680b      	ldr	r3, [r1, #0]
 80071de:	1d1a      	adds	r2, r3, #4
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	600a      	str	r2, [r1, #0]
 80071e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80071e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80071ec:	2301      	movs	r3, #1
 80071ee:	e0a3      	b.n	8007338 <_printf_i+0x1f4>
 80071f0:	6825      	ldr	r5, [r4, #0]
 80071f2:	6808      	ldr	r0, [r1, #0]
 80071f4:	062e      	lsls	r6, r5, #24
 80071f6:	f100 0304 	add.w	r3, r0, #4
 80071fa:	d50a      	bpl.n	8007212 <_printf_i+0xce>
 80071fc:	6805      	ldr	r5, [r0, #0]
 80071fe:	600b      	str	r3, [r1, #0]
 8007200:	2d00      	cmp	r5, #0
 8007202:	da03      	bge.n	800720c <_printf_i+0xc8>
 8007204:	232d      	movs	r3, #45	; 0x2d
 8007206:	426d      	negs	r5, r5
 8007208:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800720c:	485e      	ldr	r0, [pc, #376]	; (8007388 <_printf_i+0x244>)
 800720e:	230a      	movs	r3, #10
 8007210:	e019      	b.n	8007246 <_printf_i+0x102>
 8007212:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007216:	6805      	ldr	r5, [r0, #0]
 8007218:	600b      	str	r3, [r1, #0]
 800721a:	bf18      	it	ne
 800721c:	b22d      	sxthne	r5, r5
 800721e:	e7ef      	b.n	8007200 <_printf_i+0xbc>
 8007220:	680b      	ldr	r3, [r1, #0]
 8007222:	6825      	ldr	r5, [r4, #0]
 8007224:	1d18      	adds	r0, r3, #4
 8007226:	6008      	str	r0, [r1, #0]
 8007228:	0628      	lsls	r0, r5, #24
 800722a:	d501      	bpl.n	8007230 <_printf_i+0xec>
 800722c:	681d      	ldr	r5, [r3, #0]
 800722e:	e002      	b.n	8007236 <_printf_i+0xf2>
 8007230:	0669      	lsls	r1, r5, #25
 8007232:	d5fb      	bpl.n	800722c <_printf_i+0xe8>
 8007234:	881d      	ldrh	r5, [r3, #0]
 8007236:	4854      	ldr	r0, [pc, #336]	; (8007388 <_printf_i+0x244>)
 8007238:	2f6f      	cmp	r7, #111	; 0x6f
 800723a:	bf0c      	ite	eq
 800723c:	2308      	moveq	r3, #8
 800723e:	230a      	movne	r3, #10
 8007240:	2100      	movs	r1, #0
 8007242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007246:	6866      	ldr	r6, [r4, #4]
 8007248:	60a6      	str	r6, [r4, #8]
 800724a:	2e00      	cmp	r6, #0
 800724c:	bfa2      	ittt	ge
 800724e:	6821      	ldrge	r1, [r4, #0]
 8007250:	f021 0104 	bicge.w	r1, r1, #4
 8007254:	6021      	strge	r1, [r4, #0]
 8007256:	b90d      	cbnz	r5, 800725c <_printf_i+0x118>
 8007258:	2e00      	cmp	r6, #0
 800725a:	d04d      	beq.n	80072f8 <_printf_i+0x1b4>
 800725c:	4616      	mov	r6, r2
 800725e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007262:	fb03 5711 	mls	r7, r3, r1, r5
 8007266:	5dc7      	ldrb	r7, [r0, r7]
 8007268:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800726c:	462f      	mov	r7, r5
 800726e:	42bb      	cmp	r3, r7
 8007270:	460d      	mov	r5, r1
 8007272:	d9f4      	bls.n	800725e <_printf_i+0x11a>
 8007274:	2b08      	cmp	r3, #8
 8007276:	d10b      	bne.n	8007290 <_printf_i+0x14c>
 8007278:	6823      	ldr	r3, [r4, #0]
 800727a:	07df      	lsls	r7, r3, #31
 800727c:	d508      	bpl.n	8007290 <_printf_i+0x14c>
 800727e:	6923      	ldr	r3, [r4, #16]
 8007280:	6861      	ldr	r1, [r4, #4]
 8007282:	4299      	cmp	r1, r3
 8007284:	bfde      	ittt	le
 8007286:	2330      	movle	r3, #48	; 0x30
 8007288:	f806 3c01 	strble.w	r3, [r6, #-1]
 800728c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007290:	1b92      	subs	r2, r2, r6
 8007292:	6122      	str	r2, [r4, #16]
 8007294:	f8cd a000 	str.w	sl, [sp]
 8007298:	464b      	mov	r3, r9
 800729a:	aa03      	add	r2, sp, #12
 800729c:	4621      	mov	r1, r4
 800729e:	4640      	mov	r0, r8
 80072a0:	f7ff fee2 	bl	8007068 <_printf_common>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d14c      	bne.n	8007342 <_printf_i+0x1fe>
 80072a8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ac:	b004      	add	sp, #16
 80072ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072b2:	4835      	ldr	r0, [pc, #212]	; (8007388 <_printf_i+0x244>)
 80072b4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80072b8:	6823      	ldr	r3, [r4, #0]
 80072ba:	680e      	ldr	r6, [r1, #0]
 80072bc:	061f      	lsls	r7, r3, #24
 80072be:	f856 5b04 	ldr.w	r5, [r6], #4
 80072c2:	600e      	str	r6, [r1, #0]
 80072c4:	d514      	bpl.n	80072f0 <_printf_i+0x1ac>
 80072c6:	07d9      	lsls	r1, r3, #31
 80072c8:	bf44      	itt	mi
 80072ca:	f043 0320 	orrmi.w	r3, r3, #32
 80072ce:	6023      	strmi	r3, [r4, #0]
 80072d0:	b91d      	cbnz	r5, 80072da <_printf_i+0x196>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	f023 0320 	bic.w	r3, r3, #32
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	2310      	movs	r3, #16
 80072dc:	e7b0      	b.n	8007240 <_printf_i+0xfc>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f043 0320 	orr.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	2378      	movs	r3, #120	; 0x78
 80072e8:	4828      	ldr	r0, [pc, #160]	; (800738c <_printf_i+0x248>)
 80072ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80072ee:	e7e3      	b.n	80072b8 <_printf_i+0x174>
 80072f0:	065e      	lsls	r6, r3, #25
 80072f2:	bf48      	it	mi
 80072f4:	b2ad      	uxthmi	r5, r5
 80072f6:	e7e6      	b.n	80072c6 <_printf_i+0x182>
 80072f8:	4616      	mov	r6, r2
 80072fa:	e7bb      	b.n	8007274 <_printf_i+0x130>
 80072fc:	680b      	ldr	r3, [r1, #0]
 80072fe:	6826      	ldr	r6, [r4, #0]
 8007300:	6960      	ldr	r0, [r4, #20]
 8007302:	1d1d      	adds	r5, r3, #4
 8007304:	600d      	str	r5, [r1, #0]
 8007306:	0635      	lsls	r5, r6, #24
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	d501      	bpl.n	8007310 <_printf_i+0x1cc>
 800730c:	6018      	str	r0, [r3, #0]
 800730e:	e002      	b.n	8007316 <_printf_i+0x1d2>
 8007310:	0671      	lsls	r1, r6, #25
 8007312:	d5fb      	bpl.n	800730c <_printf_i+0x1c8>
 8007314:	8018      	strh	r0, [r3, #0]
 8007316:	2300      	movs	r3, #0
 8007318:	6123      	str	r3, [r4, #16]
 800731a:	4616      	mov	r6, r2
 800731c:	e7ba      	b.n	8007294 <_printf_i+0x150>
 800731e:	680b      	ldr	r3, [r1, #0]
 8007320:	1d1a      	adds	r2, r3, #4
 8007322:	600a      	str	r2, [r1, #0]
 8007324:	681e      	ldr	r6, [r3, #0]
 8007326:	6862      	ldr	r2, [r4, #4]
 8007328:	2100      	movs	r1, #0
 800732a:	4630      	mov	r0, r6
 800732c:	f7f8 ff58 	bl	80001e0 <memchr>
 8007330:	b108      	cbz	r0, 8007336 <_printf_i+0x1f2>
 8007332:	1b80      	subs	r0, r0, r6
 8007334:	6060      	str	r0, [r4, #4]
 8007336:	6863      	ldr	r3, [r4, #4]
 8007338:	6123      	str	r3, [r4, #16]
 800733a:	2300      	movs	r3, #0
 800733c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007340:	e7a8      	b.n	8007294 <_printf_i+0x150>
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	4632      	mov	r2, r6
 8007346:	4649      	mov	r1, r9
 8007348:	4640      	mov	r0, r8
 800734a:	47d0      	blx	sl
 800734c:	3001      	adds	r0, #1
 800734e:	d0ab      	beq.n	80072a8 <_printf_i+0x164>
 8007350:	6823      	ldr	r3, [r4, #0]
 8007352:	079b      	lsls	r3, r3, #30
 8007354:	d413      	bmi.n	800737e <_printf_i+0x23a>
 8007356:	68e0      	ldr	r0, [r4, #12]
 8007358:	9b03      	ldr	r3, [sp, #12]
 800735a:	4298      	cmp	r0, r3
 800735c:	bfb8      	it	lt
 800735e:	4618      	movlt	r0, r3
 8007360:	e7a4      	b.n	80072ac <_printf_i+0x168>
 8007362:	2301      	movs	r3, #1
 8007364:	4632      	mov	r2, r6
 8007366:	4649      	mov	r1, r9
 8007368:	4640      	mov	r0, r8
 800736a:	47d0      	blx	sl
 800736c:	3001      	adds	r0, #1
 800736e:	d09b      	beq.n	80072a8 <_printf_i+0x164>
 8007370:	3501      	adds	r5, #1
 8007372:	68e3      	ldr	r3, [r4, #12]
 8007374:	9903      	ldr	r1, [sp, #12]
 8007376:	1a5b      	subs	r3, r3, r1
 8007378:	42ab      	cmp	r3, r5
 800737a:	dcf2      	bgt.n	8007362 <_printf_i+0x21e>
 800737c:	e7eb      	b.n	8007356 <_printf_i+0x212>
 800737e:	2500      	movs	r5, #0
 8007380:	f104 0619 	add.w	r6, r4, #25
 8007384:	e7f5      	b.n	8007372 <_printf_i+0x22e>
 8007386:	bf00      	nop
 8007388:	08007bf9 	.word	0x08007bf9
 800738c:	08007c0a 	.word	0x08007c0a

08007390 <_sbrk_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d06      	ldr	r5, [pc, #24]	; (80073ac <_sbrk_r+0x1c>)
 8007394:	2300      	movs	r3, #0
 8007396:	4604      	mov	r4, r0
 8007398:	4608      	mov	r0, r1
 800739a:	602b      	str	r3, [r5, #0]
 800739c:	f7fa fa2c 	bl	80017f8 <_sbrk>
 80073a0:	1c43      	adds	r3, r0, #1
 80073a2:	d102      	bne.n	80073aa <_sbrk_r+0x1a>
 80073a4:	682b      	ldr	r3, [r5, #0]
 80073a6:	b103      	cbz	r3, 80073aa <_sbrk_r+0x1a>
 80073a8:	6023      	str	r3, [r4, #0]
 80073aa:	bd38      	pop	{r3, r4, r5, pc}
 80073ac:	20000740 	.word	0x20000740

080073b0 <__sread>:
 80073b0:	b510      	push	{r4, lr}
 80073b2:	460c      	mov	r4, r1
 80073b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073b8:	f000 faf4 	bl	80079a4 <_read_r>
 80073bc:	2800      	cmp	r0, #0
 80073be:	bfab      	itete	ge
 80073c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c2:	89a3      	ldrhlt	r3, [r4, #12]
 80073c4:	181b      	addge	r3, r3, r0
 80073c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ca:	bfac      	ite	ge
 80073cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80073ce:	81a3      	strhlt	r3, [r4, #12]
 80073d0:	bd10      	pop	{r4, pc}

080073d2 <__swrite>:
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	461f      	mov	r7, r3
 80073d8:	898b      	ldrh	r3, [r1, #12]
 80073da:	05db      	lsls	r3, r3, #23
 80073dc:	4605      	mov	r5, r0
 80073de:	460c      	mov	r4, r1
 80073e0:	4616      	mov	r6, r2
 80073e2:	d505      	bpl.n	80073f0 <__swrite+0x1e>
 80073e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073e8:	2302      	movs	r3, #2
 80073ea:	2200      	movs	r2, #0
 80073ec:	f000 f9c8 	bl	8007780 <_lseek_r>
 80073f0:	89a3      	ldrh	r3, [r4, #12]
 80073f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fa:	81a3      	strh	r3, [r4, #12]
 80073fc:	4632      	mov	r2, r6
 80073fe:	463b      	mov	r3, r7
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007406:	f000 b869 	b.w	80074dc <_write_r>

0800740a <__sseek>:
 800740a:	b510      	push	{r4, lr}
 800740c:	460c      	mov	r4, r1
 800740e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007412:	f000 f9b5 	bl	8007780 <_lseek_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	89a3      	ldrh	r3, [r4, #12]
 800741a:	bf15      	itete	ne
 800741c:	6560      	strne	r0, [r4, #84]	; 0x54
 800741e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007422:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007426:	81a3      	strheq	r3, [r4, #12]
 8007428:	bf18      	it	ne
 800742a:	81a3      	strhne	r3, [r4, #12]
 800742c:	bd10      	pop	{r4, pc}

0800742e <__sclose>:
 800742e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007432:	f000 b8d3 	b.w	80075dc <_close_r>
	...

08007438 <__swbuf_r>:
 8007438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743a:	460e      	mov	r6, r1
 800743c:	4614      	mov	r4, r2
 800743e:	4605      	mov	r5, r0
 8007440:	b118      	cbz	r0, 800744a <__swbuf_r+0x12>
 8007442:	6983      	ldr	r3, [r0, #24]
 8007444:	b90b      	cbnz	r3, 800744a <__swbuf_r+0x12>
 8007446:	f7ff fa5f 	bl	8006908 <__sinit>
 800744a:	4b21      	ldr	r3, [pc, #132]	; (80074d0 <__swbuf_r+0x98>)
 800744c:	429c      	cmp	r4, r3
 800744e:	d12b      	bne.n	80074a8 <__swbuf_r+0x70>
 8007450:	686c      	ldr	r4, [r5, #4]
 8007452:	69a3      	ldr	r3, [r4, #24]
 8007454:	60a3      	str	r3, [r4, #8]
 8007456:	89a3      	ldrh	r3, [r4, #12]
 8007458:	071a      	lsls	r2, r3, #28
 800745a:	d52f      	bpl.n	80074bc <__swbuf_r+0x84>
 800745c:	6923      	ldr	r3, [r4, #16]
 800745e:	b36b      	cbz	r3, 80074bc <__swbuf_r+0x84>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	6820      	ldr	r0, [r4, #0]
 8007464:	1ac0      	subs	r0, r0, r3
 8007466:	6963      	ldr	r3, [r4, #20]
 8007468:	b2f6      	uxtb	r6, r6
 800746a:	4283      	cmp	r3, r0
 800746c:	4637      	mov	r7, r6
 800746e:	dc04      	bgt.n	800747a <__swbuf_r+0x42>
 8007470:	4621      	mov	r1, r4
 8007472:	4628      	mov	r0, r5
 8007474:	f000 f948 	bl	8007708 <_fflush_r>
 8007478:	bb30      	cbnz	r0, 80074c8 <__swbuf_r+0x90>
 800747a:	68a3      	ldr	r3, [r4, #8]
 800747c:	3b01      	subs	r3, #1
 800747e:	60a3      	str	r3, [r4, #8]
 8007480:	6823      	ldr	r3, [r4, #0]
 8007482:	1c5a      	adds	r2, r3, #1
 8007484:	6022      	str	r2, [r4, #0]
 8007486:	701e      	strb	r6, [r3, #0]
 8007488:	6963      	ldr	r3, [r4, #20]
 800748a:	3001      	adds	r0, #1
 800748c:	4283      	cmp	r3, r0
 800748e:	d004      	beq.n	800749a <__swbuf_r+0x62>
 8007490:	89a3      	ldrh	r3, [r4, #12]
 8007492:	07db      	lsls	r3, r3, #31
 8007494:	d506      	bpl.n	80074a4 <__swbuf_r+0x6c>
 8007496:	2e0a      	cmp	r6, #10
 8007498:	d104      	bne.n	80074a4 <__swbuf_r+0x6c>
 800749a:	4621      	mov	r1, r4
 800749c:	4628      	mov	r0, r5
 800749e:	f000 f933 	bl	8007708 <_fflush_r>
 80074a2:	b988      	cbnz	r0, 80074c8 <__swbuf_r+0x90>
 80074a4:	4638      	mov	r0, r7
 80074a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074a8:	4b0a      	ldr	r3, [pc, #40]	; (80074d4 <__swbuf_r+0x9c>)
 80074aa:	429c      	cmp	r4, r3
 80074ac:	d101      	bne.n	80074b2 <__swbuf_r+0x7a>
 80074ae:	68ac      	ldr	r4, [r5, #8]
 80074b0:	e7cf      	b.n	8007452 <__swbuf_r+0x1a>
 80074b2:	4b09      	ldr	r3, [pc, #36]	; (80074d8 <__swbuf_r+0xa0>)
 80074b4:	429c      	cmp	r4, r3
 80074b6:	bf08      	it	eq
 80074b8:	68ec      	ldreq	r4, [r5, #12]
 80074ba:	e7ca      	b.n	8007452 <__swbuf_r+0x1a>
 80074bc:	4621      	mov	r1, r4
 80074be:	4628      	mov	r0, r5
 80074c0:	f000 f81e 	bl	8007500 <__swsetup_r>
 80074c4:	2800      	cmp	r0, #0
 80074c6:	d0cb      	beq.n	8007460 <__swbuf_r+0x28>
 80074c8:	f04f 37ff 	mov.w	r7, #4294967295
 80074cc:	e7ea      	b.n	80074a4 <__swbuf_r+0x6c>
 80074ce:	bf00      	nop
 80074d0:	08007ba8 	.word	0x08007ba8
 80074d4:	08007bc8 	.word	0x08007bc8
 80074d8:	08007b88 	.word	0x08007b88

080074dc <_write_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4d07      	ldr	r5, [pc, #28]	; (80074fc <_write_r+0x20>)
 80074e0:	4604      	mov	r4, r0
 80074e2:	4608      	mov	r0, r1
 80074e4:	4611      	mov	r1, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	602a      	str	r2, [r5, #0]
 80074ea:	461a      	mov	r2, r3
 80074ec:	f7fa f933 	bl	8001756 <_write>
 80074f0:	1c43      	adds	r3, r0, #1
 80074f2:	d102      	bne.n	80074fa <_write_r+0x1e>
 80074f4:	682b      	ldr	r3, [r5, #0]
 80074f6:	b103      	cbz	r3, 80074fa <_write_r+0x1e>
 80074f8:	6023      	str	r3, [r4, #0]
 80074fa:	bd38      	pop	{r3, r4, r5, pc}
 80074fc:	20000740 	.word	0x20000740

08007500 <__swsetup_r>:
 8007500:	4b32      	ldr	r3, [pc, #200]	; (80075cc <__swsetup_r+0xcc>)
 8007502:	b570      	push	{r4, r5, r6, lr}
 8007504:	681d      	ldr	r5, [r3, #0]
 8007506:	4606      	mov	r6, r0
 8007508:	460c      	mov	r4, r1
 800750a:	b125      	cbz	r5, 8007516 <__swsetup_r+0x16>
 800750c:	69ab      	ldr	r3, [r5, #24]
 800750e:	b913      	cbnz	r3, 8007516 <__swsetup_r+0x16>
 8007510:	4628      	mov	r0, r5
 8007512:	f7ff f9f9 	bl	8006908 <__sinit>
 8007516:	4b2e      	ldr	r3, [pc, #184]	; (80075d0 <__swsetup_r+0xd0>)
 8007518:	429c      	cmp	r4, r3
 800751a:	d10f      	bne.n	800753c <__swsetup_r+0x3c>
 800751c:	686c      	ldr	r4, [r5, #4]
 800751e:	89a3      	ldrh	r3, [r4, #12]
 8007520:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007524:	0719      	lsls	r1, r3, #28
 8007526:	d42c      	bmi.n	8007582 <__swsetup_r+0x82>
 8007528:	06dd      	lsls	r5, r3, #27
 800752a:	d411      	bmi.n	8007550 <__swsetup_r+0x50>
 800752c:	2309      	movs	r3, #9
 800752e:	6033      	str	r3, [r6, #0]
 8007530:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007534:	81a3      	strh	r3, [r4, #12]
 8007536:	f04f 30ff 	mov.w	r0, #4294967295
 800753a:	e03e      	b.n	80075ba <__swsetup_r+0xba>
 800753c:	4b25      	ldr	r3, [pc, #148]	; (80075d4 <__swsetup_r+0xd4>)
 800753e:	429c      	cmp	r4, r3
 8007540:	d101      	bne.n	8007546 <__swsetup_r+0x46>
 8007542:	68ac      	ldr	r4, [r5, #8]
 8007544:	e7eb      	b.n	800751e <__swsetup_r+0x1e>
 8007546:	4b24      	ldr	r3, [pc, #144]	; (80075d8 <__swsetup_r+0xd8>)
 8007548:	429c      	cmp	r4, r3
 800754a:	bf08      	it	eq
 800754c:	68ec      	ldreq	r4, [r5, #12]
 800754e:	e7e6      	b.n	800751e <__swsetup_r+0x1e>
 8007550:	0758      	lsls	r0, r3, #29
 8007552:	d512      	bpl.n	800757a <__swsetup_r+0x7a>
 8007554:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007556:	b141      	cbz	r1, 800756a <__swsetup_r+0x6a>
 8007558:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800755c:	4299      	cmp	r1, r3
 800755e:	d002      	beq.n	8007566 <__swsetup_r+0x66>
 8007560:	4630      	mov	r0, r6
 8007562:	f000 f9a9 	bl	80078b8 <_free_r>
 8007566:	2300      	movs	r3, #0
 8007568:	6363      	str	r3, [r4, #52]	; 0x34
 800756a:	89a3      	ldrh	r3, [r4, #12]
 800756c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007570:	81a3      	strh	r3, [r4, #12]
 8007572:	2300      	movs	r3, #0
 8007574:	6063      	str	r3, [r4, #4]
 8007576:	6923      	ldr	r3, [r4, #16]
 8007578:	6023      	str	r3, [r4, #0]
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f043 0308 	orr.w	r3, r3, #8
 8007580:	81a3      	strh	r3, [r4, #12]
 8007582:	6923      	ldr	r3, [r4, #16]
 8007584:	b94b      	cbnz	r3, 800759a <__swsetup_r+0x9a>
 8007586:	89a3      	ldrh	r3, [r4, #12]
 8007588:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800758c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007590:	d003      	beq.n	800759a <__swsetup_r+0x9a>
 8007592:	4621      	mov	r1, r4
 8007594:	4630      	mov	r0, r6
 8007596:	f000 f929 	bl	80077ec <__smakebuf_r>
 800759a:	89a0      	ldrh	r0, [r4, #12]
 800759c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075a0:	f010 0301 	ands.w	r3, r0, #1
 80075a4:	d00a      	beq.n	80075bc <__swsetup_r+0xbc>
 80075a6:	2300      	movs	r3, #0
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	6963      	ldr	r3, [r4, #20]
 80075ac:	425b      	negs	r3, r3
 80075ae:	61a3      	str	r3, [r4, #24]
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	b943      	cbnz	r3, 80075c6 <__swsetup_r+0xc6>
 80075b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80075b8:	d1ba      	bne.n	8007530 <__swsetup_r+0x30>
 80075ba:	bd70      	pop	{r4, r5, r6, pc}
 80075bc:	0781      	lsls	r1, r0, #30
 80075be:	bf58      	it	pl
 80075c0:	6963      	ldrpl	r3, [r4, #20]
 80075c2:	60a3      	str	r3, [r4, #8]
 80075c4:	e7f4      	b.n	80075b0 <__swsetup_r+0xb0>
 80075c6:	2000      	movs	r0, #0
 80075c8:	e7f7      	b.n	80075ba <__swsetup_r+0xba>
 80075ca:	bf00      	nop
 80075cc:	20000124 	.word	0x20000124
 80075d0:	08007ba8 	.word	0x08007ba8
 80075d4:	08007bc8 	.word	0x08007bc8
 80075d8:	08007b88 	.word	0x08007b88

080075dc <_close_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4d06      	ldr	r5, [pc, #24]	; (80075f8 <_close_r+0x1c>)
 80075e0:	2300      	movs	r3, #0
 80075e2:	4604      	mov	r4, r0
 80075e4:	4608      	mov	r0, r1
 80075e6:	602b      	str	r3, [r5, #0]
 80075e8:	f7fa f8d1 	bl	800178e <_close>
 80075ec:	1c43      	adds	r3, r0, #1
 80075ee:	d102      	bne.n	80075f6 <_close_r+0x1a>
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	b103      	cbz	r3, 80075f6 <_close_r+0x1a>
 80075f4:	6023      	str	r3, [r4, #0]
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	20000740 	.word	0x20000740

080075fc <__sflush_r>:
 80075fc:	898a      	ldrh	r2, [r1, #12]
 80075fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007602:	4605      	mov	r5, r0
 8007604:	0710      	lsls	r0, r2, #28
 8007606:	460c      	mov	r4, r1
 8007608:	d458      	bmi.n	80076bc <__sflush_r+0xc0>
 800760a:	684b      	ldr	r3, [r1, #4]
 800760c:	2b00      	cmp	r3, #0
 800760e:	dc05      	bgt.n	800761c <__sflush_r+0x20>
 8007610:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007612:	2b00      	cmp	r3, #0
 8007614:	dc02      	bgt.n	800761c <__sflush_r+0x20>
 8007616:	2000      	movs	r0, #0
 8007618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800761c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800761e:	2e00      	cmp	r6, #0
 8007620:	d0f9      	beq.n	8007616 <__sflush_r+0x1a>
 8007622:	2300      	movs	r3, #0
 8007624:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007628:	682f      	ldr	r7, [r5, #0]
 800762a:	602b      	str	r3, [r5, #0]
 800762c:	d032      	beq.n	8007694 <__sflush_r+0x98>
 800762e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007630:	89a3      	ldrh	r3, [r4, #12]
 8007632:	075a      	lsls	r2, r3, #29
 8007634:	d505      	bpl.n	8007642 <__sflush_r+0x46>
 8007636:	6863      	ldr	r3, [r4, #4]
 8007638:	1ac0      	subs	r0, r0, r3
 800763a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800763c:	b10b      	cbz	r3, 8007642 <__sflush_r+0x46>
 800763e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007640:	1ac0      	subs	r0, r0, r3
 8007642:	2300      	movs	r3, #0
 8007644:	4602      	mov	r2, r0
 8007646:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007648:	6a21      	ldr	r1, [r4, #32]
 800764a:	4628      	mov	r0, r5
 800764c:	47b0      	blx	r6
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	d106      	bne.n	8007662 <__sflush_r+0x66>
 8007654:	6829      	ldr	r1, [r5, #0]
 8007656:	291d      	cmp	r1, #29
 8007658:	d82c      	bhi.n	80076b4 <__sflush_r+0xb8>
 800765a:	4a2a      	ldr	r2, [pc, #168]	; (8007704 <__sflush_r+0x108>)
 800765c:	40ca      	lsrs	r2, r1
 800765e:	07d6      	lsls	r6, r2, #31
 8007660:	d528      	bpl.n	80076b4 <__sflush_r+0xb8>
 8007662:	2200      	movs	r2, #0
 8007664:	6062      	str	r2, [r4, #4]
 8007666:	04d9      	lsls	r1, r3, #19
 8007668:	6922      	ldr	r2, [r4, #16]
 800766a:	6022      	str	r2, [r4, #0]
 800766c:	d504      	bpl.n	8007678 <__sflush_r+0x7c>
 800766e:	1c42      	adds	r2, r0, #1
 8007670:	d101      	bne.n	8007676 <__sflush_r+0x7a>
 8007672:	682b      	ldr	r3, [r5, #0]
 8007674:	b903      	cbnz	r3, 8007678 <__sflush_r+0x7c>
 8007676:	6560      	str	r0, [r4, #84]	; 0x54
 8007678:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800767a:	602f      	str	r7, [r5, #0]
 800767c:	2900      	cmp	r1, #0
 800767e:	d0ca      	beq.n	8007616 <__sflush_r+0x1a>
 8007680:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007684:	4299      	cmp	r1, r3
 8007686:	d002      	beq.n	800768e <__sflush_r+0x92>
 8007688:	4628      	mov	r0, r5
 800768a:	f000 f915 	bl	80078b8 <_free_r>
 800768e:	2000      	movs	r0, #0
 8007690:	6360      	str	r0, [r4, #52]	; 0x34
 8007692:	e7c1      	b.n	8007618 <__sflush_r+0x1c>
 8007694:	6a21      	ldr	r1, [r4, #32]
 8007696:	2301      	movs	r3, #1
 8007698:	4628      	mov	r0, r5
 800769a:	47b0      	blx	r6
 800769c:	1c41      	adds	r1, r0, #1
 800769e:	d1c7      	bne.n	8007630 <__sflush_r+0x34>
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0c4      	beq.n	8007630 <__sflush_r+0x34>
 80076a6:	2b1d      	cmp	r3, #29
 80076a8:	d001      	beq.n	80076ae <__sflush_r+0xb2>
 80076aa:	2b16      	cmp	r3, #22
 80076ac:	d101      	bne.n	80076b2 <__sflush_r+0xb6>
 80076ae:	602f      	str	r7, [r5, #0]
 80076b0:	e7b1      	b.n	8007616 <__sflush_r+0x1a>
 80076b2:	89a3      	ldrh	r3, [r4, #12]
 80076b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076b8:	81a3      	strh	r3, [r4, #12]
 80076ba:	e7ad      	b.n	8007618 <__sflush_r+0x1c>
 80076bc:	690f      	ldr	r7, [r1, #16]
 80076be:	2f00      	cmp	r7, #0
 80076c0:	d0a9      	beq.n	8007616 <__sflush_r+0x1a>
 80076c2:	0793      	lsls	r3, r2, #30
 80076c4:	680e      	ldr	r6, [r1, #0]
 80076c6:	bf08      	it	eq
 80076c8:	694b      	ldreq	r3, [r1, #20]
 80076ca:	600f      	str	r7, [r1, #0]
 80076cc:	bf18      	it	ne
 80076ce:	2300      	movne	r3, #0
 80076d0:	eba6 0807 	sub.w	r8, r6, r7
 80076d4:	608b      	str	r3, [r1, #8]
 80076d6:	f1b8 0f00 	cmp.w	r8, #0
 80076da:	dd9c      	ble.n	8007616 <__sflush_r+0x1a>
 80076dc:	6a21      	ldr	r1, [r4, #32]
 80076de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076e0:	4643      	mov	r3, r8
 80076e2:	463a      	mov	r2, r7
 80076e4:	4628      	mov	r0, r5
 80076e6:	47b0      	blx	r6
 80076e8:	2800      	cmp	r0, #0
 80076ea:	dc06      	bgt.n	80076fa <__sflush_r+0xfe>
 80076ec:	89a3      	ldrh	r3, [r4, #12]
 80076ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f2:	81a3      	strh	r3, [r4, #12]
 80076f4:	f04f 30ff 	mov.w	r0, #4294967295
 80076f8:	e78e      	b.n	8007618 <__sflush_r+0x1c>
 80076fa:	4407      	add	r7, r0
 80076fc:	eba8 0800 	sub.w	r8, r8, r0
 8007700:	e7e9      	b.n	80076d6 <__sflush_r+0xda>
 8007702:	bf00      	nop
 8007704:	20400001 	.word	0x20400001

08007708 <_fflush_r>:
 8007708:	b538      	push	{r3, r4, r5, lr}
 800770a:	690b      	ldr	r3, [r1, #16]
 800770c:	4605      	mov	r5, r0
 800770e:	460c      	mov	r4, r1
 8007710:	b913      	cbnz	r3, 8007718 <_fflush_r+0x10>
 8007712:	2500      	movs	r5, #0
 8007714:	4628      	mov	r0, r5
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	b118      	cbz	r0, 8007722 <_fflush_r+0x1a>
 800771a:	6983      	ldr	r3, [r0, #24]
 800771c:	b90b      	cbnz	r3, 8007722 <_fflush_r+0x1a>
 800771e:	f7ff f8f3 	bl	8006908 <__sinit>
 8007722:	4b14      	ldr	r3, [pc, #80]	; (8007774 <_fflush_r+0x6c>)
 8007724:	429c      	cmp	r4, r3
 8007726:	d11b      	bne.n	8007760 <_fflush_r+0x58>
 8007728:	686c      	ldr	r4, [r5, #4]
 800772a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d0ef      	beq.n	8007712 <_fflush_r+0xa>
 8007732:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007734:	07d0      	lsls	r0, r2, #31
 8007736:	d404      	bmi.n	8007742 <_fflush_r+0x3a>
 8007738:	0599      	lsls	r1, r3, #22
 800773a:	d402      	bmi.n	8007742 <_fflush_r+0x3a>
 800773c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800773e:	f7ff f981 	bl	8006a44 <__retarget_lock_acquire_recursive>
 8007742:	4628      	mov	r0, r5
 8007744:	4621      	mov	r1, r4
 8007746:	f7ff ff59 	bl	80075fc <__sflush_r>
 800774a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800774c:	07da      	lsls	r2, r3, #31
 800774e:	4605      	mov	r5, r0
 8007750:	d4e0      	bmi.n	8007714 <_fflush_r+0xc>
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	059b      	lsls	r3, r3, #22
 8007756:	d4dd      	bmi.n	8007714 <_fflush_r+0xc>
 8007758:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800775a:	f7ff f974 	bl	8006a46 <__retarget_lock_release_recursive>
 800775e:	e7d9      	b.n	8007714 <_fflush_r+0xc>
 8007760:	4b05      	ldr	r3, [pc, #20]	; (8007778 <_fflush_r+0x70>)
 8007762:	429c      	cmp	r4, r3
 8007764:	d101      	bne.n	800776a <_fflush_r+0x62>
 8007766:	68ac      	ldr	r4, [r5, #8]
 8007768:	e7df      	b.n	800772a <_fflush_r+0x22>
 800776a:	4b04      	ldr	r3, [pc, #16]	; (800777c <_fflush_r+0x74>)
 800776c:	429c      	cmp	r4, r3
 800776e:	bf08      	it	eq
 8007770:	68ec      	ldreq	r4, [r5, #12]
 8007772:	e7da      	b.n	800772a <_fflush_r+0x22>
 8007774:	08007ba8 	.word	0x08007ba8
 8007778:	08007bc8 	.word	0x08007bc8
 800777c:	08007b88 	.word	0x08007b88

08007780 <_lseek_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	; (80077a0 <_lseek_r+0x20>)
 8007784:	4604      	mov	r4, r0
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	2200      	movs	r2, #0
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f7fa f824 	bl	80017dc <_lseek>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_lseek_r+0x1e>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_lseek_r+0x1e>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	20000740 	.word	0x20000740

080077a4 <__swhatbuf_r>:
 80077a4:	b570      	push	{r4, r5, r6, lr}
 80077a6:	460e      	mov	r6, r1
 80077a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ac:	2900      	cmp	r1, #0
 80077ae:	b096      	sub	sp, #88	; 0x58
 80077b0:	4614      	mov	r4, r2
 80077b2:	461d      	mov	r5, r3
 80077b4:	da07      	bge.n	80077c6 <__swhatbuf_r+0x22>
 80077b6:	2300      	movs	r3, #0
 80077b8:	602b      	str	r3, [r5, #0]
 80077ba:	89b3      	ldrh	r3, [r6, #12]
 80077bc:	061a      	lsls	r2, r3, #24
 80077be:	d410      	bmi.n	80077e2 <__swhatbuf_r+0x3e>
 80077c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077c4:	e00e      	b.n	80077e4 <__swhatbuf_r+0x40>
 80077c6:	466a      	mov	r2, sp
 80077c8:	f000 f8fe 	bl	80079c8 <_fstat_r>
 80077cc:	2800      	cmp	r0, #0
 80077ce:	dbf2      	blt.n	80077b6 <__swhatbuf_r+0x12>
 80077d0:	9a01      	ldr	r2, [sp, #4]
 80077d2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077d6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077da:	425a      	negs	r2, r3
 80077dc:	415a      	adcs	r2, r3
 80077de:	602a      	str	r2, [r5, #0]
 80077e0:	e7ee      	b.n	80077c0 <__swhatbuf_r+0x1c>
 80077e2:	2340      	movs	r3, #64	; 0x40
 80077e4:	2000      	movs	r0, #0
 80077e6:	6023      	str	r3, [r4, #0]
 80077e8:	b016      	add	sp, #88	; 0x58
 80077ea:	bd70      	pop	{r4, r5, r6, pc}

080077ec <__smakebuf_r>:
 80077ec:	898b      	ldrh	r3, [r1, #12]
 80077ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077f0:	079d      	lsls	r5, r3, #30
 80077f2:	4606      	mov	r6, r0
 80077f4:	460c      	mov	r4, r1
 80077f6:	d507      	bpl.n	8007808 <__smakebuf_r+0x1c>
 80077f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077fc:	6023      	str	r3, [r4, #0]
 80077fe:	6123      	str	r3, [r4, #16]
 8007800:	2301      	movs	r3, #1
 8007802:	6163      	str	r3, [r4, #20]
 8007804:	b002      	add	sp, #8
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	ab01      	add	r3, sp, #4
 800780a:	466a      	mov	r2, sp
 800780c:	f7ff ffca 	bl	80077a4 <__swhatbuf_r>
 8007810:	9900      	ldr	r1, [sp, #0]
 8007812:	4605      	mov	r5, r0
 8007814:	4630      	mov	r0, r6
 8007816:	f7ff f917 	bl	8006a48 <_malloc_r>
 800781a:	b948      	cbnz	r0, 8007830 <__smakebuf_r+0x44>
 800781c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007820:	059a      	lsls	r2, r3, #22
 8007822:	d4ef      	bmi.n	8007804 <__smakebuf_r+0x18>
 8007824:	f023 0303 	bic.w	r3, r3, #3
 8007828:	f043 0302 	orr.w	r3, r3, #2
 800782c:	81a3      	strh	r3, [r4, #12]
 800782e:	e7e3      	b.n	80077f8 <__smakebuf_r+0xc>
 8007830:	4b0d      	ldr	r3, [pc, #52]	; (8007868 <__smakebuf_r+0x7c>)
 8007832:	62b3      	str	r3, [r6, #40]	; 0x28
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	6020      	str	r0, [r4, #0]
 8007838:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800783c:	81a3      	strh	r3, [r4, #12]
 800783e:	9b00      	ldr	r3, [sp, #0]
 8007840:	6163      	str	r3, [r4, #20]
 8007842:	9b01      	ldr	r3, [sp, #4]
 8007844:	6120      	str	r0, [r4, #16]
 8007846:	b15b      	cbz	r3, 8007860 <__smakebuf_r+0x74>
 8007848:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800784c:	4630      	mov	r0, r6
 800784e:	f000 f8cd 	bl	80079ec <_isatty_r>
 8007852:	b128      	cbz	r0, 8007860 <__smakebuf_r+0x74>
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f023 0303 	bic.w	r3, r3, #3
 800785a:	f043 0301 	orr.w	r3, r3, #1
 800785e:	81a3      	strh	r3, [r4, #12]
 8007860:	89a0      	ldrh	r0, [r4, #12]
 8007862:	4305      	orrs	r5, r0
 8007864:	81a5      	strh	r5, [r4, #12]
 8007866:	e7cd      	b.n	8007804 <__smakebuf_r+0x18>
 8007868:	080068a1 	.word	0x080068a1

0800786c <memmove>:
 800786c:	4288      	cmp	r0, r1
 800786e:	b510      	push	{r4, lr}
 8007870:	eb01 0402 	add.w	r4, r1, r2
 8007874:	d902      	bls.n	800787c <memmove+0x10>
 8007876:	4284      	cmp	r4, r0
 8007878:	4623      	mov	r3, r4
 800787a:	d807      	bhi.n	800788c <memmove+0x20>
 800787c:	1e43      	subs	r3, r0, #1
 800787e:	42a1      	cmp	r1, r4
 8007880:	d008      	beq.n	8007894 <memmove+0x28>
 8007882:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007886:	f803 2f01 	strb.w	r2, [r3, #1]!
 800788a:	e7f8      	b.n	800787e <memmove+0x12>
 800788c:	4402      	add	r2, r0
 800788e:	4601      	mov	r1, r0
 8007890:	428a      	cmp	r2, r1
 8007892:	d100      	bne.n	8007896 <memmove+0x2a>
 8007894:	bd10      	pop	{r4, pc}
 8007896:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800789a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800789e:	e7f7      	b.n	8007890 <memmove+0x24>

080078a0 <__malloc_lock>:
 80078a0:	4801      	ldr	r0, [pc, #4]	; (80078a8 <__malloc_lock+0x8>)
 80078a2:	f7ff b8cf 	b.w	8006a44 <__retarget_lock_acquire_recursive>
 80078a6:	bf00      	nop
 80078a8:	20000738 	.word	0x20000738

080078ac <__malloc_unlock>:
 80078ac:	4801      	ldr	r0, [pc, #4]	; (80078b4 <__malloc_unlock+0x8>)
 80078ae:	f7ff b8ca 	b.w	8006a46 <__retarget_lock_release_recursive>
 80078b2:	bf00      	nop
 80078b4:	20000738 	.word	0x20000738

080078b8 <_free_r>:
 80078b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078ba:	2900      	cmp	r1, #0
 80078bc:	d048      	beq.n	8007950 <_free_r+0x98>
 80078be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078c2:	9001      	str	r0, [sp, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f1a1 0404 	sub.w	r4, r1, #4
 80078ca:	bfb8      	it	lt
 80078cc:	18e4      	addlt	r4, r4, r3
 80078ce:	f7ff ffe7 	bl	80078a0 <__malloc_lock>
 80078d2:	4a20      	ldr	r2, [pc, #128]	; (8007954 <_free_r+0x9c>)
 80078d4:	9801      	ldr	r0, [sp, #4]
 80078d6:	6813      	ldr	r3, [r2, #0]
 80078d8:	4615      	mov	r5, r2
 80078da:	b933      	cbnz	r3, 80078ea <_free_r+0x32>
 80078dc:	6063      	str	r3, [r4, #4]
 80078de:	6014      	str	r4, [r2, #0]
 80078e0:	b003      	add	sp, #12
 80078e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078e6:	f7ff bfe1 	b.w	80078ac <__malloc_unlock>
 80078ea:	42a3      	cmp	r3, r4
 80078ec:	d90b      	bls.n	8007906 <_free_r+0x4e>
 80078ee:	6821      	ldr	r1, [r4, #0]
 80078f0:	1862      	adds	r2, r4, r1
 80078f2:	4293      	cmp	r3, r2
 80078f4:	bf04      	itt	eq
 80078f6:	681a      	ldreq	r2, [r3, #0]
 80078f8:	685b      	ldreq	r3, [r3, #4]
 80078fa:	6063      	str	r3, [r4, #4]
 80078fc:	bf04      	itt	eq
 80078fe:	1852      	addeq	r2, r2, r1
 8007900:	6022      	streq	r2, [r4, #0]
 8007902:	602c      	str	r4, [r5, #0]
 8007904:	e7ec      	b.n	80078e0 <_free_r+0x28>
 8007906:	461a      	mov	r2, r3
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	b10b      	cbz	r3, 8007910 <_free_r+0x58>
 800790c:	42a3      	cmp	r3, r4
 800790e:	d9fa      	bls.n	8007906 <_free_r+0x4e>
 8007910:	6811      	ldr	r1, [r2, #0]
 8007912:	1855      	adds	r5, r2, r1
 8007914:	42a5      	cmp	r5, r4
 8007916:	d10b      	bne.n	8007930 <_free_r+0x78>
 8007918:	6824      	ldr	r4, [r4, #0]
 800791a:	4421      	add	r1, r4
 800791c:	1854      	adds	r4, r2, r1
 800791e:	42a3      	cmp	r3, r4
 8007920:	6011      	str	r1, [r2, #0]
 8007922:	d1dd      	bne.n	80078e0 <_free_r+0x28>
 8007924:	681c      	ldr	r4, [r3, #0]
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	6053      	str	r3, [r2, #4]
 800792a:	4421      	add	r1, r4
 800792c:	6011      	str	r1, [r2, #0]
 800792e:	e7d7      	b.n	80078e0 <_free_r+0x28>
 8007930:	d902      	bls.n	8007938 <_free_r+0x80>
 8007932:	230c      	movs	r3, #12
 8007934:	6003      	str	r3, [r0, #0]
 8007936:	e7d3      	b.n	80078e0 <_free_r+0x28>
 8007938:	6825      	ldr	r5, [r4, #0]
 800793a:	1961      	adds	r1, r4, r5
 800793c:	428b      	cmp	r3, r1
 800793e:	bf04      	itt	eq
 8007940:	6819      	ldreq	r1, [r3, #0]
 8007942:	685b      	ldreq	r3, [r3, #4]
 8007944:	6063      	str	r3, [r4, #4]
 8007946:	bf04      	itt	eq
 8007948:	1949      	addeq	r1, r1, r5
 800794a:	6021      	streq	r1, [r4, #0]
 800794c:	6054      	str	r4, [r2, #4]
 800794e:	e7c7      	b.n	80078e0 <_free_r+0x28>
 8007950:	b003      	add	sp, #12
 8007952:	bd30      	pop	{r4, r5, pc}
 8007954:	20000428 	.word	0x20000428

08007958 <_realloc_r>:
 8007958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795a:	4607      	mov	r7, r0
 800795c:	4614      	mov	r4, r2
 800795e:	460e      	mov	r6, r1
 8007960:	b921      	cbnz	r1, 800796c <_realloc_r+0x14>
 8007962:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007966:	4611      	mov	r1, r2
 8007968:	f7ff b86e 	b.w	8006a48 <_malloc_r>
 800796c:	b922      	cbnz	r2, 8007978 <_realloc_r+0x20>
 800796e:	f7ff ffa3 	bl	80078b8 <_free_r>
 8007972:	4625      	mov	r5, r4
 8007974:	4628      	mov	r0, r5
 8007976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007978:	f000 f848 	bl	8007a0c <_malloc_usable_size_r>
 800797c:	42a0      	cmp	r0, r4
 800797e:	d20f      	bcs.n	80079a0 <_realloc_r+0x48>
 8007980:	4621      	mov	r1, r4
 8007982:	4638      	mov	r0, r7
 8007984:	f7ff f860 	bl	8006a48 <_malloc_r>
 8007988:	4605      	mov	r5, r0
 800798a:	2800      	cmp	r0, #0
 800798c:	d0f2      	beq.n	8007974 <_realloc_r+0x1c>
 800798e:	4631      	mov	r1, r6
 8007990:	4622      	mov	r2, r4
 8007992:	f7fe feff 	bl	8006794 <memcpy>
 8007996:	4631      	mov	r1, r6
 8007998:	4638      	mov	r0, r7
 800799a:	f7ff ff8d 	bl	80078b8 <_free_r>
 800799e:	e7e9      	b.n	8007974 <_realloc_r+0x1c>
 80079a0:	4635      	mov	r5, r6
 80079a2:	e7e7      	b.n	8007974 <_realloc_r+0x1c>

080079a4 <_read_r>:
 80079a4:	b538      	push	{r3, r4, r5, lr}
 80079a6:	4d07      	ldr	r5, [pc, #28]	; (80079c4 <_read_r+0x20>)
 80079a8:	4604      	mov	r4, r0
 80079aa:	4608      	mov	r0, r1
 80079ac:	4611      	mov	r1, r2
 80079ae:	2200      	movs	r2, #0
 80079b0:	602a      	str	r2, [r5, #0]
 80079b2:	461a      	mov	r2, r3
 80079b4:	f7f9 feb2 	bl	800171c <_read>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_read_r+0x1e>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_read_r+0x1e>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	20000740 	.word	0x20000740

080079c8 <_fstat_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	; (80079e8 <_fstat_r+0x20>)
 80079cc:	2300      	movs	r3, #0
 80079ce:	4604      	mov	r4, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	602b      	str	r3, [r5, #0]
 80079d6:	f7f9 fee6 	bl	80017a6 <_fstat>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d102      	bne.n	80079e4 <_fstat_r+0x1c>
 80079de:	682b      	ldr	r3, [r5, #0]
 80079e0:	b103      	cbz	r3, 80079e4 <_fstat_r+0x1c>
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
 80079e6:	bf00      	nop
 80079e8:	20000740 	.word	0x20000740

080079ec <_isatty_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d06      	ldr	r5, [pc, #24]	; (8007a08 <_isatty_r+0x1c>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	f7f9 fee5 	bl	80017c6 <_isatty>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_isatty_r+0x1a>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_isatty_r+0x1a>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	20000740 	.word	0x20000740

08007a0c <_malloc_usable_size_r>:
 8007a0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a10:	1f18      	subs	r0, r3, #4
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	bfbc      	itt	lt
 8007a16:	580b      	ldrlt	r3, [r1, r0]
 8007a18:	18c0      	addlt	r0, r0, r3
 8007a1a:	4770      	bx	lr

08007a1c <trunc>:
 8007a1c:	ec51 0b10 	vmov	r0, r1, d0
 8007a20:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007a24:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8007a28:	2b13      	cmp	r3, #19
 8007a2a:	b5d0      	push	{r4, r6, r7, lr}
 8007a2c:	460c      	mov	r4, r1
 8007a2e:	dc10      	bgt.n	8007a52 <trunc+0x36>
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	bfa5      	ittet	ge
 8007a34:	4a11      	ldrge	r2, [pc, #68]	; (8007a7c <trunc+0x60>)
 8007a36:	fa42 f303 	asrge.w	r3, r2, r3
 8007a3a:	2100      	movlt	r1, #0
 8007a3c:	2100      	movge	r1, #0
 8007a3e:	bfb9      	ittee	lt
 8007a40:	2000      	movlt	r0, #0
 8007a42:	f004 4100 	andlt.w	r1, r4, #2147483648	; 0x80000000
 8007a46:	2000      	movge	r0, #0
 8007a48:	ea24 0103 	bicge.w	r1, r4, r3
 8007a4c:	ec41 0b10 	vmov	d0, r0, r1
 8007a50:	bdd0      	pop	{r4, r6, r7, pc}
 8007a52:	2b33      	cmp	r3, #51	; 0x33
 8007a54:	dd08      	ble.n	8007a68 <trunc+0x4c>
 8007a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5a:	d1f7      	bne.n	8007a4c <trunc+0x30>
 8007a5c:	ee10 2a10 	vmov	r2, s0
 8007a60:	460b      	mov	r3, r1
 8007a62:	f7f8 fc13 	bl	800028c <__adddf3>
 8007a66:	e7f1      	b.n	8007a4c <trunc+0x30>
 8007a68:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8007a70:	fa23 f202 	lsr.w	r2, r3, r2
 8007a74:	ea20 0602 	bic.w	r6, r0, r2
 8007a78:	4630      	mov	r0, r6
 8007a7a:	e7e7      	b.n	8007a4c <trunc+0x30>
 8007a7c:	000fffff 	.word	0x000fffff

08007a80 <_init>:
 8007a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a82:	bf00      	nop
 8007a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a86:	bc08      	pop	{r3}
 8007a88:	469e      	mov	lr, r3
 8007a8a:	4770      	bx	lr

08007a8c <_fini>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	bf00      	nop
 8007a90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a92:	bc08      	pop	{r3}
 8007a94:	469e      	mov	lr, r3
 8007a96:	4770      	bx	lr
