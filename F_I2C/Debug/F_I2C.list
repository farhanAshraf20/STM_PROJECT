
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ca0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  08009e30  08009e30  00019e30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a374  0800a374  0002031c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a374  0800a374  0001a374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a37c  0800a37c  0002031c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a37c  0800a37c  0001a37c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a380  0800a380  0001a380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000031c  20000000  0800a384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000440  2000031c  0800a6a0  0002031c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000075c  0800a6a0  0002075c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017c55  00000000  00000000  0002034c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000318d  00000000  00000000  00037fa1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001090  00000000  00000000  0003b130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f28  00000000  00000000  0003c1c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028ec7  00000000  00000000  0003d0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014cea  00000000  00000000  00065faf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f1181  00000000  00000000  0007ac99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016be1a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005370  00000000  00000000  0016be70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e18 	.word	0x08009e18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	08009e18 	.word	0x08009e18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <f_Temperature>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void f_Temperature(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af02      	add	r7, sp, #8
	if(BSP_TSENSOR_Init())
 8000ea6:	f001 fa83 	bl	80023b0 <BSP_TSENSOR_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d011      	beq.n	8000ed4 <f_Temperature+0x34>
	{
		snprintf(str_tmp,100,"\033\143 Not Taking TEMPERATURE Data\r");
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <f_Temperature+0x84>)
 8000eb2:	2164      	movs	r1, #100	; 0x64
 8000eb4:	481c      	ldr	r0, [pc, #112]	; (8000f28 <f_Temperature+0x88>)
 8000eb6:	f006 fd7f 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),500);
 8000eba:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ebe:	2264      	movs	r2, #100	; 0x64
 8000ec0:	4919      	ldr	r1, [pc, #100]	; (8000f28 <f_Temperature+0x88>)
 8000ec2:	481a      	ldr	r0, [pc, #104]	; (8000f2c <f_Temperature+0x8c>)
 8000ec4:	f004 fca6 	bl	8005814 <HAL_UART_Transmit>
		memset(str_tmp, 0, sizeof(str_tmp));
 8000ec8:	2264      	movs	r2, #100	; 0x64
 8000eca:	2100      	movs	r1, #0
 8000ecc:	4816      	ldr	r0, [pc, #88]	; (8000f28 <f_Temperature+0x88>)
 8000ece:	f006 f901 	bl	80070d4 <memset>
		snprintf(str_tmp,100," \033\143 TEMPERATURE = %.2f \r", temp_value);
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),500);
		memset(str_tmp, 0, sizeof(str_tmp));
	}

}
 8000ed2:	e024      	b.n	8000f1e <f_Temperature+0x7e>
		temp_value = BSP_TSENSOR_ReadTemp();
 8000ed4:	f001 fa88 	bl	80023e8 <BSP_TSENSOR_ReadTemp>
 8000ed8:	eef0 7a40 	vmov.f32	s15, s0
 8000edc:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <f_Temperature+0x90>)
 8000ede:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1000);
 8000ee2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee6:	f001 fe71 	bl	8002bcc <HAL_Delay>
		snprintf(str_tmp,100," \033\143 TEMPERATURE = %.2f \r", temp_value);
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <f_Temperature+0x90>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fb2a 	bl	8000548 <__aeabi_f2d>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	460b      	mov	r3, r1
 8000ef8:	e9cd 2300 	strd	r2, r3, [sp]
 8000efc:	4a0d      	ldr	r2, [pc, #52]	; (8000f34 <f_Temperature+0x94>)
 8000efe:	2164      	movs	r1, #100	; 0x64
 8000f00:	4809      	ldr	r0, [pc, #36]	; (8000f28 <f_Temperature+0x88>)
 8000f02:	f006 fd59 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),500);
 8000f06:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f0a:	2264      	movs	r2, #100	; 0x64
 8000f0c:	4906      	ldr	r1, [pc, #24]	; (8000f28 <f_Temperature+0x88>)
 8000f0e:	4807      	ldr	r0, [pc, #28]	; (8000f2c <f_Temperature+0x8c>)
 8000f10:	f004 fc80 	bl	8005814 <HAL_UART_Transmit>
		memset(str_tmp, 0, sizeof(str_tmp));
 8000f14:	2264      	movs	r2, #100	; 0x64
 8000f16:	2100      	movs	r1, #0
 8000f18:	4803      	ldr	r0, [pc, #12]	; (8000f28 <f_Temperature+0x88>)
 8000f1a:	f006 f8db 	bl	80070d4 <memset>
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	08009e30 	.word	0x08009e30
 8000f28:	20000344 	.word	0x20000344
 8000f2c:	20000554 	.word	0x20000554
 8000f30:	20000338 	.word	0x20000338
 8000f34:	08009e50 	.word	0x08009e50

08000f38 <f_Humidity>:

/*This function use for extracting Humidity data */
void f_Humidity(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af02      	add	r7, sp, #8
	if(BSP_HSENSOR_Init())
 8000f3e:	f001 f9db 	bl	80022f8 <BSP_HSENSOR_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d011      	beq.n	8000f6c <f_Humidity+0x34>
	{
		snprintf(str_humi,100,"\033\143 Not Taking HUMIDITY Data \r");
 8000f48:	4a1c      	ldr	r2, [pc, #112]	; (8000fbc <f_Humidity+0x84>)
 8000f4a:	2164      	movs	r1, #100	; 0x64
 8000f4c:	481c      	ldr	r0, [pc, #112]	; (8000fc0 <f_Humidity+0x88>)
 8000f4e:	f006 fd33 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),500);
 8000f52:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000f56:	2264      	movs	r2, #100	; 0x64
 8000f58:	4919      	ldr	r1, [pc, #100]	; (8000fc0 <f_Humidity+0x88>)
 8000f5a:	481a      	ldr	r0, [pc, #104]	; (8000fc4 <f_Humidity+0x8c>)
 8000f5c:	f004 fc5a 	bl	8005814 <HAL_UART_Transmit>
		memset(str_humi, 0, sizeof(str_humi));
 8000f60:	2264      	movs	r2, #100	; 0x64
 8000f62:	2100      	movs	r1, #0
 8000f64:	4816      	ldr	r0, [pc, #88]	; (8000fc0 <f_Humidity+0x88>)
 8000f66:	f006 f8b5 	bl	80070d4 <memset>
		HAL_Delay(1000);
		snprintf(str_humi,100,"\033\143 HUMIDITY = %.2f \r", humi_value);
		HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),500);
		memset(str_humi, 0, sizeof(str_humi));
	}
}
 8000f6a:	e024      	b.n	8000fb6 <f_Humidity+0x7e>
		humi_value = BSP_HSENSOR_ReadHumidity();
 8000f6c:	f001 f9e4 	bl	8002338 <BSP_HSENSOR_ReadHumidity>
 8000f70:	eef0 7a40 	vmov.f32	s15, s0
 8000f74:	4b14      	ldr	r3, [pc, #80]	; (8000fc8 <f_Humidity+0x90>)
 8000f76:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1000);
 8000f7a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f7e:	f001 fe25 	bl	8002bcc <HAL_Delay>
		snprintf(str_humi,100,"\033\143 HUMIDITY = %.2f \r", humi_value);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <f_Humidity+0x90>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fade 	bl	8000548 <__aeabi_f2d>
 8000f8c:	4602      	mov	r2, r0
 8000f8e:	460b      	mov	r3, r1
 8000f90:	e9cd 2300 	strd	r2, r3, [sp]
 8000f94:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <f_Humidity+0x94>)
 8000f96:	2164      	movs	r1, #100	; 0x64
 8000f98:	4809      	ldr	r0, [pc, #36]	; (8000fc0 <f_Humidity+0x88>)
 8000f9a:	f006 fd0d 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),500);
 8000f9e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	4906      	ldr	r1, [pc, #24]	; (8000fc0 <f_Humidity+0x88>)
 8000fa6:	4807      	ldr	r0, [pc, #28]	; (8000fc4 <f_Humidity+0x8c>)
 8000fa8:	f004 fc34 	bl	8005814 <HAL_UART_Transmit>
		memset(str_humi, 0, sizeof(str_humi));
 8000fac:	2264      	movs	r2, #100	; 0x64
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4803      	ldr	r0, [pc, #12]	; (8000fc0 <f_Humidity+0x88>)
 8000fb2:	f006 f88f 	bl	80070d4 <memset>
}
 8000fb6:	bf00      	nop
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	08009e6c 	.word	0x08009e6c
 8000fc0:	200003a8 	.word	0x200003a8
 8000fc4:	20000554 	.word	0x20000554
 8000fc8:	2000033c 	.word	0x2000033c
 8000fcc:	08009e8c 	.word	0x08009e8c

08000fd0 <f_Pressure>:

/*This function use for extracting Pressure data */
void f_Pressure(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af02      	add	r7, sp, #8

	if(BSP_PSENSOR_Init())
 8000fd6:	f001 f9bd 	bl	8002354 <BSP_PSENSOR_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00f      	beq.n	8001000 <f_Pressure+0x30>
	{
		snprintf(str_pre,100,"\033\143 Not Taking PRESSURE Data \r");
 8000fe0:	4a1b      	ldr	r2, [pc, #108]	; (8001050 <f_Pressure+0x80>)
 8000fe2:	2164      	movs	r1, #100	; 0x64
 8000fe4:	481b      	ldr	r0, [pc, #108]	; (8001054 <f_Pressure+0x84>)
 8000fe6:	f006 fce7 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit_IT(&huart1,( uint8_t * )str_pre,sizeof(str_pre));
 8000fea:	2264      	movs	r2, #100	; 0x64
 8000fec:	4919      	ldr	r1, [pc, #100]	; (8001054 <f_Pressure+0x84>)
 8000fee:	481a      	ldr	r0, [pc, #104]	; (8001058 <f_Pressure+0x88>)
 8000ff0:	f004 fca4 	bl	800593c <HAL_UART_Transmit_IT>
		memset(str_pre, 0, sizeof(str_pre));
 8000ff4:	2264      	movs	r2, #100	; 0x64
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4816      	ldr	r0, [pc, #88]	; (8001054 <f_Pressure+0x84>)
 8000ffa:	f006 f86b 	bl	80070d4 <memset>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),500);
		memset(str_pre, 0, sizeof(str_pre));
	}


}
 8000ffe:	e024      	b.n	800104a <f_Pressure+0x7a>
		pre_value = BSP_PSENSOR_ReadPressure();
 8001000:	f001 f9c8 	bl	8002394 <BSP_PSENSOR_ReadPressure>
 8001004:	eef0 7a40 	vmov.f32	s15, s0
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <f_Pressure+0x8c>)
 800100a:	edc3 7a00 	vstr	s15, [r3]
		HAL_Delay(1000);
 800100e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001012:	f001 fddb 	bl	8002bcc <HAL_Delay>
		snprintf(str_pre,100,"\033\143 PRESSURE = %.2f \r", pre_value);
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <f_Pressure+0x8c>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff fa94 	bl	8000548 <__aeabi_f2d>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	e9cd 2300 	strd	r2, r3, [sp]
 8001028:	4a0d      	ldr	r2, [pc, #52]	; (8001060 <f_Pressure+0x90>)
 800102a:	2164      	movs	r1, #100	; 0x64
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <f_Pressure+0x84>)
 800102e:	f006 fcc3 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),500);
 8001032:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001036:	2264      	movs	r2, #100	; 0x64
 8001038:	4906      	ldr	r1, [pc, #24]	; (8001054 <f_Pressure+0x84>)
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <f_Pressure+0x88>)
 800103c:	f004 fbea 	bl	8005814 <HAL_UART_Transmit>
		memset(str_pre, 0, sizeof(str_pre));
 8001040:	2264      	movs	r2, #100	; 0x64
 8001042:	2100      	movs	r1, #0
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <f_Pressure+0x84>)
 8001046:	f006 f845 	bl	80070d4 <memset>
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	08009ea4 	.word	0x08009ea4
 8001054:	2000040c 	.word	0x2000040c
 8001058:	20000554 	.word	0x20000554
 800105c:	20000340 	.word	0x20000340
 8001060:	08009ec4 	.word	0x08009ec4

08001064 <f_ACCELEROMETER>:

/*This function use for extracting ACCELEROMETER data */
void f_ACCELEROMETER(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
	if(BSP_ACCELERO_Init())
 8001068:	f001 f8f0 	bl	800224c <BSP_ACCELERO_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d03a      	beq.n	80010e8 <f_ACCELEROMETER+0x84>
	{
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8001072:	4840      	ldr	r0, [pc, #256]	; (8001174 <f_ACCELEROMETER+0x110>)
 8001074:	f001 f928 	bl	80022c8 <BSP_ACCELERO_AccGetXYZ>
		HAL_Delay(1000);
 8001078:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800107c:	f001 fda6 	bl	8002bcc <HAL_Delay>
		snprintf(str_acc1,100,"\033\143 X-axis Error");
 8001080:	4a3d      	ldr	r2, [pc, #244]	; (8001178 <f_ACCELEROMETER+0x114>)
 8001082:	2164      	movs	r1, #100	; 0x64
 8001084:	483d      	ldr	r0, [pc, #244]	; (800117c <f_ACCELEROMETER+0x118>)
 8001086:	f006 fc97 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 800108a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800108e:	2264      	movs	r2, #100	; 0x64
 8001090:	493a      	ldr	r1, [pc, #232]	; (800117c <f_ACCELEROMETER+0x118>)
 8001092:	483b      	ldr	r0, [pc, #236]	; (8001180 <f_ACCELEROMETER+0x11c>)
 8001094:	f004 fbbe 	bl	8005814 <HAL_UART_Transmit>
		memset(str_acc1, 0, sizeof(str_acc1));
 8001098:	2264      	movs	r2, #100	; 0x64
 800109a:	2100      	movs	r1, #0
 800109c:	4837      	ldr	r0, [pc, #220]	; (800117c <f_ACCELEROMETER+0x118>)
 800109e:	f006 f819 	bl	80070d4 <memset>
		snprintf(str_acc1,100," Y-axis Error");
 80010a2:	4a38      	ldr	r2, [pc, #224]	; (8001184 <f_ACCELEROMETER+0x120>)
 80010a4:	2164      	movs	r1, #100	; 0x64
 80010a6:	4835      	ldr	r0, [pc, #212]	; (800117c <f_ACCELEROMETER+0x118>)
 80010a8:	f006 fc86 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 80010ac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010b0:	2264      	movs	r2, #100	; 0x64
 80010b2:	4932      	ldr	r1, [pc, #200]	; (800117c <f_ACCELEROMETER+0x118>)
 80010b4:	4832      	ldr	r0, [pc, #200]	; (8001180 <f_ACCELEROMETER+0x11c>)
 80010b6:	f004 fbad 	bl	8005814 <HAL_UART_Transmit>
		memset(str_acc1, 0, sizeof(str_acc1));
 80010ba:	2264      	movs	r2, #100	; 0x64
 80010bc:	2100      	movs	r1, #0
 80010be:	482f      	ldr	r0, [pc, #188]	; (800117c <f_ACCELEROMETER+0x118>)
 80010c0:	f006 f808 	bl	80070d4 <memset>
		snprintf(str_acc1,100," Z-axis Error \r");
 80010c4:	4a30      	ldr	r2, [pc, #192]	; (8001188 <f_ACCELEROMETER+0x124>)
 80010c6:	2164      	movs	r1, #100	; 0x64
 80010c8:	482c      	ldr	r0, [pc, #176]	; (800117c <f_ACCELEROMETER+0x118>)
 80010ca:	f006 fc75 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 80010ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010d2:	2264      	movs	r2, #100	; 0x64
 80010d4:	4929      	ldr	r1, [pc, #164]	; (800117c <f_ACCELEROMETER+0x118>)
 80010d6:	482a      	ldr	r0, [pc, #168]	; (8001180 <f_ACCELEROMETER+0x11c>)
 80010d8:	f004 fb9c 	bl	8005814 <HAL_UART_Transmit>
		memset(str_acc1, 0, sizeof(str_acc1));
 80010dc:	2264      	movs	r2, #100	; 0x64
 80010de:	2100      	movs	r1, #0
 80010e0:	4826      	ldr	r0, [pc, #152]	; (800117c <f_ACCELEROMETER+0x118>)
 80010e2:	f005 fff7 	bl	80070d4 <memset>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
		memset(str_acc1, 0, sizeof(str_acc1));
	}


}
 80010e6:	e042      	b.n	800116e <f_ACCELEROMETER+0x10a>
		BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80010e8:	4822      	ldr	r0, [pc, #136]	; (8001174 <f_ACCELEROMETER+0x110>)
 80010ea:	f001 f8ed 	bl	80022c8 <BSP_ACCELERO_AccGetXYZ>
		HAL_Delay(1000);
 80010ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80010f2:	f001 fd6b 	bl	8002bcc <HAL_Delay>
		snprintf(str_acc1,100,"\033\143 X-axis = %d      ", pDataXYZ[0]);
 80010f6:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <f_ACCELEROMETER+0x110>)
 80010f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010fc:	4a23      	ldr	r2, [pc, #140]	; (800118c <f_ACCELEROMETER+0x128>)
 80010fe:	2164      	movs	r1, #100	; 0x64
 8001100:	481e      	ldr	r0, [pc, #120]	; (800117c <f_ACCELEROMETER+0x118>)
 8001102:	f006 fc59 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 8001106:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800110a:	2264      	movs	r2, #100	; 0x64
 800110c:	491b      	ldr	r1, [pc, #108]	; (800117c <f_ACCELEROMETER+0x118>)
 800110e:	481c      	ldr	r0, [pc, #112]	; (8001180 <f_ACCELEROMETER+0x11c>)
 8001110:	f004 fb80 	bl	8005814 <HAL_UART_Transmit>
		memset(str_acc1, 0, sizeof(str_acc1));
 8001114:	2264      	movs	r2, #100	; 0x64
 8001116:	2100      	movs	r1, #0
 8001118:	4818      	ldr	r0, [pc, #96]	; (800117c <f_ACCELEROMETER+0x118>)
 800111a:	f005 ffdb 	bl	80070d4 <memset>
		snprintf(str_acc1,100," Y-axis = %d      ", pDataXYZ[1]);
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <f_ACCELEROMETER+0x110>)
 8001120:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001124:	4a1a      	ldr	r2, [pc, #104]	; (8001190 <f_ACCELEROMETER+0x12c>)
 8001126:	2164      	movs	r1, #100	; 0x64
 8001128:	4814      	ldr	r0, [pc, #80]	; (800117c <f_ACCELEROMETER+0x118>)
 800112a:	f006 fc45 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 800112e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001132:	2264      	movs	r2, #100	; 0x64
 8001134:	4911      	ldr	r1, [pc, #68]	; (800117c <f_ACCELEROMETER+0x118>)
 8001136:	4812      	ldr	r0, [pc, #72]	; (8001180 <f_ACCELEROMETER+0x11c>)
 8001138:	f004 fb6c 	bl	8005814 <HAL_UART_Transmit>
		memset(str_acc1, 0, sizeof(str_acc1));
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	2100      	movs	r1, #0
 8001140:	480e      	ldr	r0, [pc, #56]	; (800117c <f_ACCELEROMETER+0x118>)
 8001142:	f005 ffc7 	bl	80070d4 <memset>
		snprintf(str_acc1,100," Z-axis = %d \r", pDataXYZ[2]);
 8001146:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <f_ACCELEROMETER+0x110>)
 8001148:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800114c:	4a11      	ldr	r2, [pc, #68]	; (8001194 <f_ACCELEROMETER+0x130>)
 800114e:	2164      	movs	r1, #100	; 0x64
 8001150:	480a      	ldr	r0, [pc, #40]	; (800117c <f_ACCELEROMETER+0x118>)
 8001152:	f006 fc31 	bl	80079b8 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),500);
 8001156:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800115a:	2264      	movs	r2, #100	; 0x64
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <f_ACCELEROMETER+0x118>)
 800115e:	4808      	ldr	r0, [pc, #32]	; (8001180 <f_ACCELEROMETER+0x11c>)
 8001160:	f004 fb58 	bl	8005814 <HAL_UART_Transmit>
		memset(str_acc1, 0, sizeof(str_acc1));
 8001164:	2264      	movs	r2, #100	; 0x64
 8001166:	2100      	movs	r1, #0
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <f_ACCELEROMETER+0x118>)
 800116a:	f005 ffb3 	bl	80070d4 <memset>
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000470 	.word	0x20000470
 8001178:	08009edc 	.word	0x08009edc
 800117c:	20000478 	.word	0x20000478
 8001180:	20000554 	.word	0x20000554
 8001184:	08009eec 	.word	0x08009eec
 8001188:	08009efc 	.word	0x08009efc
 800118c:	08009f0c 	.word	0x08009f0c
 8001190:	08009f24 	.word	0x08009f24
 8001194:	08009f38 	.word	0x08009f38

08001198 <f_Menu>:

/*This function use for Printing MENU */
void f_Menu(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),500);
 800119c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011a0:	227c      	movs	r2, #124	; 0x7c
 80011a2:	4904      	ldr	r1, [pc, #16]	; (80011b4 <f_Menu+0x1c>)
 80011a4:	4804      	ldr	r0, [pc, #16]	; (80011b8 <f_Menu+0x20>)
 80011a6:	f004 fb35 	bl	8005814 <HAL_UART_Transmit>
	s_case=0;
 80011aa:	4b04      	ldr	r3, [pc, #16]	; (80011bc <f_Menu+0x24>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20000048 	.word	0x20000048
 80011b8:	20000554 	.word	0x20000554
 80011bc:	200004dc 	.word	0x200004dc

080011c0 <f_Invalid>:

/*This function use for Printing Invalid */
void f_Invalid(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t*)Invalid,strlen(Invalid),500);
 80011c4:	4807      	ldr	r0, [pc, #28]	; (80011e4 <f_Invalid+0x24>)
 80011c6:	f7ff f803 	bl	80001d0 <strlen>
 80011ca:	4603      	mov	r3, r0
 80011cc:	b29a      	uxth	r2, r3
 80011ce:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80011d2:	4904      	ldr	r1, [pc, #16]	; (80011e4 <f_Invalid+0x24>)
 80011d4:	4804      	ldr	r0, [pc, #16]	; (80011e8 <f_Invalid+0x28>)
 80011d6:	f004 fb1d 	bl	8005814 <HAL_UART_Transmit>
	s_case=0;
 80011da:	4b04      	ldr	r3, [pc, #16]	; (80011ec <f_Invalid+0x2c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	701a      	strb	r2, [r3, #0]
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	200000c4 	.word	0x200000c4
 80011e8:	20000554 	.word	0x20000554
 80011ec:	200004dc 	.word	0x200004dc

080011f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 80011f4:	f001 fc76 	bl	8002ae4 <HAL_Init>

  /* USER CODE END Init */

  /* Configure the system clock */

	SystemClock_Config();
 80011f8:	f000 f8b6 	bl	8001368 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

	MX_GPIO_Init();
 80011fc:	f000 f9a6 	bl	800154c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8001200:	f000 f974 	bl	80014ec <MX_USART1_UART_Init>
	MX_UART4_Init();
 8001204:	f000 f942 	bl	800148c <MX_UART4_Init>
	MX_I2C2_Init();
 8001208:	f000 f900 	bl	800140c <MX_I2C2_Init>

  /* USER CODE BEGIN 2 */

	BSP_TSENSOR_Init();
 800120c:	f001 f8d0 	bl	80023b0 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8001210:	f001 f872 	bl	80022f8 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 8001214:	f001 f89e 	bl	8002354 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 8001218:	f001 f818 	bl	800224c <BSP_ACCELERO_Init>

	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 800121c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001220:	222b      	movs	r2, #43	; 0x2b
 8001222:	4948      	ldr	r1, [pc, #288]	; (8001344 <main+0x154>)
 8001224:	4848      	ldr	r0, [pc, #288]	; (8001348 <main+0x158>)
 8001226:	f004 faf5 	bl	8005814 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800122e:	2219      	movs	r2, #25
 8001230:	4946      	ldr	r1, [pc, #280]	; (800134c <main+0x15c>)
 8001232:	4845      	ldr	r0, [pc, #276]	; (8001348 <main+0x158>)
 8001234:	f004 faee 	bl	8005814 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	227c      	movs	r2, #124	; 0x7c
 800123e:	4944      	ldr	r1, [pc, #272]	; (8001350 <main+0x160>)
 8001240:	4841      	ldr	r0, [pc, #260]	; (8001348 <main+0x158>)
 8001242:	f004 fae7 	bl	8005814 <HAL_UART_Transmit>

	HAL_UART_Receive_IT(&huart1,rxData,1);
 8001246:	2201      	movs	r2, #1
 8001248:	4942      	ldr	r1, [pc, #264]	; (8001354 <main+0x164>)
 800124a:	483f      	ldr	r0, [pc, #252]	; (8001348 <main+0x158>)
 800124c:	f004 fbe4 	bl	8005a18 <HAL_UART_Receive_IT>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /*  This if condition is use for UART1 (Interrupt based) */
		if(newMsg)
 8001250:	4b41      	ldr	r3, [pc, #260]	; (8001358 <main+0x168>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d01d      	beq.n	8001294 <main+0xa4>
		{
			size = sizeof(rxBuffer);
 8001258:	4b40      	ldr	r3, [pc, #256]	; (800135c <main+0x16c>)
 800125a:	2214      	movs	r2, #20
 800125c:	701a      	strb	r2, [r3, #0]

			rxBuffer[size]='\r';
 800125e:	4b3f      	ldr	r3, [pc, #252]	; (800135c <main+0x16c>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	4619      	mov	r1, r3
 8001264:	4b3e      	ldr	r3, [pc, #248]	; (8001360 <main+0x170>)
 8001266:	220d      	movs	r2, #13
 8001268:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			rxBuffer[size+1]='\n';
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <main+0x16c>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	3301      	adds	r3, #1
 8001272:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <main+0x170>)
 8001274:	210a      	movs	r1, #10
 8001276:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			s_case= rxBuffer[0];
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <main+0x170>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	b2da      	uxtb	r2, r3
 8001280:	4b38      	ldr	r3, [pc, #224]	; (8001364 <main+0x174>)
 8001282:	701a      	strb	r2, [r3, #0]

			memset(rxBuffer, 0, sizeof(rxBuffer));
 8001284:	2214      	movs	r2, #20
 8001286:	2100      	movs	r1, #0
 8001288:	4835      	ldr	r0, [pc, #212]	; (8001360 <main+0x170>)
 800128a:	f005 ff23 	bl	80070d4 <memset>

			newMsg=0;
 800128e:	4b32      	ldr	r3, [pc, #200]	; (8001358 <main+0x168>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
		}


		/* This switch case is using for calling Sensor functions */
		switch(s_case)
 8001294:	4b33      	ldr	r3, [pc, #204]	; (8001364 <main+0x174>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d051      	beq.n	8001340 <main+0x150>
 800129c:	2b00      	cmp	r3, #0
 800129e:	db4c      	blt.n	800133a <main+0x14a>
 80012a0:	2b34      	cmp	r3, #52	; 0x34
 80012a2:	dc4a      	bgt.n	800133a <main+0x14a>
 80012a4:	2b1b      	cmp	r3, #27
 80012a6:	db48      	blt.n	800133a <main+0x14a>
 80012a8:	3b1b      	subs	r3, #27
 80012aa:	2b19      	cmp	r3, #25
 80012ac:	d845      	bhi.n	800133a <main+0x14a>
 80012ae:	a201      	add	r2, pc, #4	; (adr r2, 80012b4 <main+0xc4>)
 80012b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012b4:	08001335 	.word	0x08001335
 80012b8:	0800133b 	.word	0x0800133b
 80012bc:	0800133b 	.word	0x0800133b
 80012c0:	0800133b 	.word	0x0800133b
 80012c4:	0800133b 	.word	0x0800133b
 80012c8:	0800133b 	.word	0x0800133b
 80012cc:	0800133b 	.word	0x0800133b
 80012d0:	0800133b 	.word	0x0800133b
 80012d4:	0800133b 	.word	0x0800133b
 80012d8:	0800133b 	.word	0x0800133b
 80012dc:	0800133b 	.word	0x0800133b
 80012e0:	0800133b 	.word	0x0800133b
 80012e4:	0800133b 	.word	0x0800133b
 80012e8:	0800133b 	.word	0x0800133b
 80012ec:	0800133b 	.word	0x0800133b
 80012f0:	0800133b 	.word	0x0800133b
 80012f4:	0800133b 	.word	0x0800133b
 80012f8:	0800133b 	.word	0x0800133b
 80012fc:	0800133b 	.word	0x0800133b
 8001300:	0800133b 	.word	0x0800133b
 8001304:	0800133b 	.word	0x0800133b
 8001308:	0800133b 	.word	0x0800133b
 800130c:	0800131d 	.word	0x0800131d
 8001310:	08001323 	.word	0x08001323
 8001314:	08001329 	.word	0x08001329
 8001318:	0800132f 	.word	0x0800132f
				break;
			}

			case f_One:
			{
				f_Temperature();
 800131c:	f7ff fdc0 	bl	8000ea0 <f_Temperature>
				break;
 8001320:	e00f      	b.n	8001342 <main+0x152>
			}
			case f_Two:
			{
				f_Humidity();
 8001322:	f7ff fe09 	bl	8000f38 <f_Humidity>
				break;
 8001326:	e00c      	b.n	8001342 <main+0x152>
			}
			case f_Three:
			{
				f_Pressure();
 8001328:	f7ff fe52 	bl	8000fd0 <f_Pressure>
				break;
 800132c:	e009      	b.n	8001342 <main+0x152>
			}
			case f_Four:
			{
				f_ACCELEROMETER();
 800132e:	f7ff fe99 	bl	8001064 <f_ACCELEROMETER>
				break;
 8001332:	e006      	b.n	8001342 <main+0x152>
			}
			case f_escape:
			{
				f_Menu();
 8001334:	f7ff ff30 	bl	8001198 <f_Menu>
				break;
 8001338:	e003      	b.n	8001342 <main+0x152>
			}

			default :
			{
				f_Invalid();
 800133a:	f7ff ff41 	bl	80011c0 <f_Invalid>
 800133e:	e787      	b.n	8001250 <main+0x60>
				break;
 8001340:	bf00      	nop
		if(newMsg)
 8001342:	e785      	b.n	8001250 <main+0x60>
 8001344:	20000000 	.word	0x20000000
 8001348:	20000554 	.word	0x20000554
 800134c:	2000002c 	.word	0x2000002c
 8001350:	20000048 	.word	0x20000048
 8001354:	200004fc 	.word	0x200004fc
 8001358:	200004dd 	.word	0x200004dd
 800135c:	200004df 	.word	0x200004df
 8001360:	200005d8 	.word	0x200005d8
 8001364:	200004dc 	.word	0x200004dc

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b096      	sub	sp, #88	; 0x58
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	2244      	movs	r2, #68	; 0x44
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f005 feac 	bl	80070d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	463b      	mov	r3, r7
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800138a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800138e:	f002 fee3 	bl	8004158 <HAL_PWREx_ControlVoltageScaling>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001398:	f000 fb18 	bl	80019cc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800139c:	2310      	movs	r3, #16
 800139e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013a0:	2301      	movs	r3, #1
 80013a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013a4:	2300      	movs	r3, #0
 80013a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013a8:	2360      	movs	r3, #96	; 0x60
 80013aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013ac:	2302      	movs	r3, #2
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013b0:	2301      	movs	r3, #1
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b4:	2301      	movs	r3, #1
 80013b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013b8:	2328      	movs	r3, #40	; 0x28
 80013ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013bc:	2307      	movs	r3, #7
 80013be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c4:	2302      	movs	r3, #2
 80013c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	4618      	mov	r0, r3
 80013ce:	f002 ff19 	bl	8004204 <HAL_RCC_OscConfig>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013d8:	f000 faf8 	bl	80019cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013dc:	230f      	movs	r3, #15
 80013de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013e0:	2303      	movs	r3, #3
 80013e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013f0:	463b      	mov	r3, r7
 80013f2:	2104      	movs	r1, #4
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 fadf 	bl	80049b8 <HAL_RCC_ClockConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001400:	f000 fae4 	bl	80019cc <Error_Handler>
  }
}
 8001404:	bf00      	nop
 8001406:	3758      	adds	r7, #88	; 0x58
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}

0800140c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_I2C2_Init+0x74>)
 8001412:	4a1c      	ldr	r2, [pc, #112]	; (8001484 <MX_I2C2_Init+0x78>)
 8001414:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8001416:	4b1a      	ldr	r3, [pc, #104]	; (8001480 <MX_I2C2_Init+0x74>)
 8001418:	4a1b      	ldr	r2, [pc, #108]	; (8001488 <MX_I2C2_Init+0x7c>)
 800141a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800141c:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_I2C2_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001422:	4b17      	ldr	r3, [pc, #92]	; (8001480 <MX_I2C2_Init+0x74>)
 8001424:	2201      	movs	r2, #1
 8001426:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_I2C2_Init+0x74>)
 800142a:	2200      	movs	r2, #0
 800142c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800142e:	4b14      	ldr	r3, [pc, #80]	; (8001480 <MX_I2C2_Init+0x74>)
 8001430:	2200      	movs	r2, #0
 8001432:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001434:	4b12      	ldr	r3, [pc, #72]	; (8001480 <MX_I2C2_Init+0x74>)
 8001436:	2200      	movs	r2, #0
 8001438:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800143a:	4b11      	ldr	r3, [pc, #68]	; (8001480 <MX_I2C2_Init+0x74>)
 800143c:	2200      	movs	r2, #0
 800143e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <MX_I2C2_Init+0x74>)
 8001442:	2200      	movs	r2, #0
 8001444:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001446:	480e      	ldr	r0, [pc, #56]	; (8001480 <MX_I2C2_Init+0x74>)
 8001448:	f002 f84d 	bl	80034e6 <HAL_I2C_Init>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001452:	f000 fabb 	bl	80019cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001456:	2100      	movs	r1, #0
 8001458:	4809      	ldr	r0, [pc, #36]	; (8001480 <MX_I2C2_Init+0x74>)
 800145a:	f002 fdd7 	bl	800400c <HAL_I2CEx_ConfigAnalogFilter>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001464:	f000 fab2 	bl	80019cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001468:	2100      	movs	r1, #0
 800146a:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_I2C2_Init+0x74>)
 800146c:	f002 fe19 	bl	80040a2 <HAL_I2CEx_ConfigDigitalFilter>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001476:	f000 faa9 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800147a:	bf00      	nop
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000500 	.word	0x20000500
 8001484:	40005800 	.word	0x40005800
 8001488:	10909cec 	.word	0x10909cec

0800148c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_UART4_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_UART4_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_UART4_Init+0x58>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_UART4_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_UART4_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_UART4_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_UART4_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_UART4_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_UART4_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_UART4_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_UART4_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_UART4_Init+0x58>)
 80014d0:	f004 f952 	bl	8005778 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_UART4_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 fa77 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200005ec 	.word	0x200005ec
 80014e8:	40004c00 	.word	0x40004c00

080014ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f2:	4a15      	ldr	r2, [pc, #84]	; (8001548 <MX_USART1_UART_Init+0x5c>)
 80014f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <MX_USART1_UART_Init+0x58>)
 80014f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014fe:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001512:	220c      	movs	r2, #12
 8001514:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800151e:	2200      	movs	r2, #0
 8001520:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001524:	2200      	movs	r2, #0
 8001526:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART1_UART_Init+0x58>)
 800152a:	2200      	movs	r2, #0
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART1_UART_Init+0x58>)
 8001530:	f004 f922 	bl	8005778 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800153a:	f000 fa47 	bl	80019cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000554 	.word	0x20000554
 8001548:	40013800 	.word	0x40013800

0800154c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08a      	sub	sp, #40	; 0x28
 8001550:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001552:	f107 0314 	add.w	r3, r7, #20
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
 800155a:	605a      	str	r2, [r3, #4]
 800155c:	609a      	str	r2, [r3, #8]
 800155e:	60da      	str	r2, [r3, #12]
 8001560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001562:	4bbd      	ldr	r3, [pc, #756]	; (8001858 <MX_GPIO_Init+0x30c>)
 8001564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001566:	4abc      	ldr	r2, [pc, #752]	; (8001858 <MX_GPIO_Init+0x30c>)
 8001568:	f043 0310 	orr.w	r3, r3, #16
 800156c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800156e:	4bba      	ldr	r3, [pc, #744]	; (8001858 <MX_GPIO_Init+0x30c>)
 8001570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001572:	f003 0310 	and.w	r3, r3, #16
 8001576:	613b      	str	r3, [r7, #16]
 8001578:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800157a:	4bb7      	ldr	r3, [pc, #732]	; (8001858 <MX_GPIO_Init+0x30c>)
 800157c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157e:	4ab6      	ldr	r2, [pc, #728]	; (8001858 <MX_GPIO_Init+0x30c>)
 8001580:	f043 0304 	orr.w	r3, r3, #4
 8001584:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001586:	4bb4      	ldr	r3, [pc, #720]	; (8001858 <MX_GPIO_Init+0x30c>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	f003 0304 	and.w	r3, r3, #4
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001592:	4bb1      	ldr	r3, [pc, #708]	; (8001858 <MX_GPIO_Init+0x30c>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	4ab0      	ldr	r2, [pc, #704]	; (8001858 <MX_GPIO_Init+0x30c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800159e:	4bae      	ldr	r3, [pc, #696]	; (8001858 <MX_GPIO_Init+0x30c>)
 80015a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015aa:	4bab      	ldr	r3, [pc, #684]	; (8001858 <MX_GPIO_Init+0x30c>)
 80015ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ae:	4aaa      	ldr	r2, [pc, #680]	; (8001858 <MX_GPIO_Init+0x30c>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b6:	4ba8      	ldr	r3, [pc, #672]	; (8001858 <MX_GPIO_Init+0x30c>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	607b      	str	r3, [r7, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015c2:	4ba5      	ldr	r3, [pc, #660]	; (8001858 <MX_GPIO_Init+0x30c>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c6:	4aa4      	ldr	r2, [pc, #656]	; (8001858 <MX_GPIO_Init+0x30c>)
 80015c8:	f043 0308 	orr.w	r3, r3, #8
 80015cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ce:	4ba2      	ldr	r3, [pc, #648]	; (8001858 <MX_GPIO_Init+0x30c>)
 80015d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	603b      	str	r3, [r7, #0]
 80015d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 718a 	mov.w	r1, #276	; 0x114
 80015e0:	489e      	ldr	r0, [pc, #632]	; (800185c <MX_GPIO_Init+0x310>)
 80015e2:	f001 ff45 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 80015e6:	2200      	movs	r2, #0
 80015e8:	f248 1104 	movw	r1, #33028	; 0x8104
 80015ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f0:	f001 ff3e 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80015f4:	2200      	movs	r2, #0
 80015f6:	f24f 0114 	movw	r1, #61460	; 0xf014
 80015fa:	4899      	ldr	r0, [pc, #612]	; (8001860 <MX_GPIO_Init+0x314>)
 80015fc:	f001 ff38 	bl	8003470 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001600:	2200      	movs	r2, #0
 8001602:	f241 0181 	movw	r1, #4225	; 0x1081
 8001606:	4897      	ldr	r0, [pc, #604]	; (8001864 <MX_GPIO_Init+0x318>)
 8001608:	f001 ff32 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800160c:	2201      	movs	r2, #1
 800160e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001612:	4894      	ldr	r0, [pc, #592]	; (8001864 <MX_GPIO_Init+0x318>)
 8001614:	f001 ff2c 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001618:	2200      	movs	r2, #0
 800161a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800161e:	4892      	ldr	r0, [pc, #584]	; (8001868 <MX_GPIO_Init+0x31c>)
 8001620:	f001 ff26 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001624:	2201      	movs	r2, #1
 8001626:	2120      	movs	r1, #32
 8001628:	488d      	ldr	r0, [pc, #564]	; (8001860 <MX_GPIO_Init+0x314>)
 800162a:	f001 ff21 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800162e:	2201      	movs	r2, #1
 8001630:	2101      	movs	r1, #1
 8001632:	488a      	ldr	r0, [pc, #552]	; (800185c <MX_GPIO_Init+0x310>)
 8001634:	f001 ff1c 	bl	8003470 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001638:	f240 1315 	movw	r3, #277	; 0x115
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800163e:	2301      	movs	r3, #1
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001646:	2300      	movs	r3, #0
 8001648:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4882      	ldr	r0, [pc, #520]	; (800185c <MX_GPIO_Init+0x310>)
 8001652:	f001 fc6f 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001656:	236a      	movs	r3, #106	; 0x6a
 8001658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800165a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800165e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	487c      	ldr	r0, [pc, #496]	; (800185c <MX_GPIO_Init+0x310>)
 800166c:	f001 fc62 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8001670:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001676:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800167a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8001680:	f107 0314 	add.w	r3, r7, #20
 8001684:	4619      	mov	r1, r3
 8001686:	4878      	ldr	r0, [pc, #480]	; (8001868 <MX_GPIO_Init+0x31c>)
 8001688:	f001 fc54 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 800168c:	233f      	movs	r3, #63	; 0x3f
 800168e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001690:	230b      	movs	r3, #11
 8001692:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4872      	ldr	r0, [pc, #456]	; (8001868 <MX_GPIO_Init+0x31c>)
 80016a0:	f001 fc48 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80016a4:	f248 1304 	movw	r3, #33028	; 0x8104
 80016a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b6:	f107 0314 	add.w	r3, r7, #20
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c0:	f001 fc38 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 80016c4:	2308      	movs	r3, #8
 80016c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c8:	2302      	movs	r3, #2
 80016ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d0:	2300      	movs	r3, #0
 80016d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016d4:	2301      	movs	r3, #1
 80016d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 80016d8:	f107 0314 	add.w	r3, r7, #20
 80016dc:	4619      	mov	r1, r3
 80016de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e2:	f001 fc27 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 80016e6:	2310      	movs	r3, #16
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016ea:	230b      	movs	r3, #11
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 80016f2:	f107 0314 	add.w	r3, r7, #20
 80016f6:	4619      	mov	r1, r3
 80016f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fc:	f001 fc1a 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001700:	23e0      	movs	r3, #224	; 0xe0
 8001702:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170c:	2303      	movs	r3, #3
 800170e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001710:	2305      	movs	r3, #5
 8001712:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800171e:	f001 fc09 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001722:	2301      	movs	r3, #1
 8001724:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800172a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001730:	f107 0314 	add.w	r3, r7, #20
 8001734:	4619      	mov	r1, r3
 8001736:	484a      	ldr	r0, [pc, #296]	; (8001860 <MX_GPIO_Init+0x314>)
 8001738:	f001 fbfc 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800173c:	2302      	movs	r3, #2
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001740:	230b      	movs	r3, #11
 8001742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	4619      	mov	r1, r3
 800174e:	4844      	ldr	r0, [pc, #272]	; (8001860 <MX_GPIO_Init+0x314>)
 8001750:	f001 fbf0 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001754:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001758:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	483c      	ldr	r0, [pc, #240]	; (8001860 <MX_GPIO_Init+0x314>)
 800176e:	f001 fbe1 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001772:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001778:	2302      	movs	r3, #2
 800177a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177c:	2300      	movs	r3, #0
 800177e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001780:	2300      	movs	r3, #0
 8001782:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001784:	2306      	movs	r3, #6
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001788:	f107 0314 	add.w	r3, r7, #20
 800178c:	4619      	mov	r1, r3
 800178e:	4833      	ldr	r0, [pc, #204]	; (800185c <MX_GPIO_Init+0x310>)
 8001790:	f001 fbd0 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001794:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001798:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179a:	2302      	movs	r3, #2
 800179c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017a2:	2303      	movs	r3, #3
 80017a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017a6:	230a      	movs	r3, #10
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80017aa:	f107 0314 	add.w	r3, r7, #20
 80017ae:	4619      	mov	r1, r3
 80017b0:	482a      	ldr	r0, [pc, #168]	; (800185c <MX_GPIO_Init+0x310>)
 80017b2:	f001 fbbf 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80017b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c4:	2303      	movs	r3, #3
 80017c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c8:	2307      	movs	r3, #7
 80017ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	f107 0314 	add.w	r3, r7, #20
 80017d0:	4619      	mov	r1, r3
 80017d2:	4824      	ldr	r0, [pc, #144]	; (8001864 <MX_GPIO_Init+0x318>)
 80017d4:	f001 fbae 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 80017d8:	f64c 4304 	movw	r3, #52228	; 0xcc04
 80017dc:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80017de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80017e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e4:	2300      	movs	r3, #0
 80017e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	4619      	mov	r1, r3
 80017ee:	481d      	ldr	r0, [pc, #116]	; (8001864 <MX_GPIO_Init+0x318>)
 80017f0:	f001 fba0 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 80017f4:	f243 0381 	movw	r3, #12417	; 0x3081
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017fa:	2301      	movs	r3, #1
 80017fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001802:	2300      	movs	r3, #0
 8001804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4815      	ldr	r0, [pc, #84]	; (8001864 <MX_GPIO_Init+0x318>)
 800180e:	f001 fb91 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8001812:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001818:	2301      	movs	r3, #1
 800181a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	480f      	ldr	r0, [pc, #60]	; (8001868 <MX_GPIO_Init+0x31c>)
 800182c:	f001 fb82 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001830:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001836:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800183a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	4808      	ldr	r0, [pc, #32]	; (8001868 <MX_GPIO_Init+0x31c>)
 8001848:	f001 fb74 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 800184c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001852:	2300      	movs	r3, #0
 8001854:	e00a      	b.n	800186c <MX_GPIO_Init+0x320>
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000
 800185c:	48001000 	.word	0x48001000
 8001860:	48000400 	.word	0x48000400
 8001864:	48000c00 	.word	0x48000c00
 8001868:	48000800 	.word	0x48000800
 800186c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001872:	f107 0314 	add.w	r3, r7, #20
 8001876:	4619      	mov	r1, r3
 8001878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800187c:	f001 fb5a 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001880:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188e:	2303      	movs	r3, #3
 8001890:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001892:	230a      	movs	r3, #10
 8001894:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a0:	f001 fb48 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 80018a4:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80018a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018b6:	2306      	movs	r3, #6
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	4619      	mov	r1, r3
 80018c0:	4823      	ldr	r0, [pc, #140]	; (8001950 <MX_GPIO_Init+0x404>)
 80018c2:	f001 fb37 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80018c6:	2302      	movs	r3, #2
 80018c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	2302      	movs	r3, #2
 80018cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018d2:	2303      	movs	r3, #3
 80018d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018d6:	2305      	movs	r3, #5
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	4619      	mov	r1, r3
 80018e0:	481c      	ldr	r0, [pc, #112]	; (8001954 <MX_GPIO_Init+0x408>)
 80018e2:	f001 fb27 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80018e6:	2378      	movs	r3, #120	; 0x78
 80018e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	2303      	movs	r3, #3
 80018f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f6:	2307      	movs	r3, #7
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fa:	f107 0314 	add.w	r3, r7, #20
 80018fe:	4619      	mov	r1, r3
 8001900:	4814      	ldr	r0, [pc, #80]	; (8001954 <MX_GPIO_Init+0x408>)
 8001902:	f001 fb17 	bl	8002f34 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001906:	f44f 7340 	mov.w	r3, #768	; 0x300
 800190a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800190c:	2312      	movs	r3, #18
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2303      	movs	r3, #3
 8001916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001918:	2304      	movs	r3, #4
 800191a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	480d      	ldr	r0, [pc, #52]	; (8001958 <MX_GPIO_Init+0x40c>)
 8001924:	f001 fb06 	bl	8002f34 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001928:	2200      	movs	r2, #0
 800192a:	2100      	movs	r1, #0
 800192c:	2017      	movs	r0, #23
 800192e:	f001 fa4c 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001932:	2017      	movs	r0, #23
 8001934:	f001 fa65 	bl	8002e02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001938:	2200      	movs	r2, #0
 800193a:	2100      	movs	r1, #0
 800193c:	2028      	movs	r0, #40	; 0x28
 800193e:	f001 fa44 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001942:	2028      	movs	r0, #40	; 0x28
 8001944:	f001 fa5d 	bl	8002e02 <HAL_NVIC_EnableIRQ>

}
 8001948:	bf00      	nop
 800194a:	3728      	adds	r7, #40	; 0x28
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	48000800 	.word	0x48000800
 8001954:	48000c00 	.word	0x48000c00
 8001958:	48000400 	.word	0x48000400

0800195c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a12      	ldr	r2, [pc, #72]	; (80019b4 <HAL_UART_RxCpltCallback+0x58>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d11d      	bne.n	80019aa <HAL_UART_RxCpltCallback+0x4e>
    {
    	if(rxData[0]!='\r')
 800196e:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_UART_RxCpltCallback+0x5c>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b0d      	cmp	r3, #13
 8001974:	d00e      	beq.n	8001994 <HAL_UART_RxCpltCallback+0x38>
        {
            rxBuffer[rxIndex]=rxData[0];
 8001976:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_UART_RxCpltCallback+0x5c>)
 8001978:	7819      	ldrb	r1, [r3, #0]
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_UART_RxCpltCallback+0x60>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <HAL_UART_RxCpltCallback+0x64>)
 8001982:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            rxIndex++;
 8001986:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <HAL_UART_RxCpltCallback+0x60>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	3301      	adds	r3, #1
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b0b      	ldr	r3, [pc, #44]	; (80019bc <HAL_UART_RxCpltCallback+0x60>)
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	e005      	b.n	80019a0 <HAL_UART_RxCpltCallback+0x44>
        }
        else
        {
            newMsg=1;
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_UART_RxCpltCallback+0x68>)
 8001996:	2201      	movs	r2, #1
 8001998:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 800199a:	4b08      	ldr	r3, [pc, #32]	; (80019bc <HAL_UART_RxCpltCallback+0x60>)
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 80019a0:	2201      	movs	r2, #1
 80019a2:	4905      	ldr	r1, [pc, #20]	; (80019b8 <HAL_UART_RxCpltCallback+0x5c>)
 80019a4:	4808      	ldr	r0, [pc, #32]	; (80019c8 <HAL_UART_RxCpltCallback+0x6c>)
 80019a6:	f004 f837 	bl	8005a18 <HAL_UART_Receive_IT>
    }

}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40013800 	.word	0x40013800
 80019b8:	200004fc 	.word	0x200004fc
 80019bc:	200004de 	.word	0x200004de
 80019c0:	200005d8 	.word	0x200005d8
 80019c4:	200004dd 	.word	0x200004dd
 80019c8:	20000554 	.word	0x20000554

080019cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019d0:	b672      	cpsid	i
}
 80019d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d4:	e7fe      	b.n	80019d4 <Error_Handler+0x8>
	...

080019d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	4b0f      	ldr	r3, [pc, #60]	; (8001a1c <HAL_MspInit+0x44>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	4a0e      	ldr	r2, [pc, #56]	; (8001a1c <HAL_MspInit+0x44>)
 80019e4:	f043 0301 	orr.w	r3, r3, #1
 80019e8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ea:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <HAL_MspInit+0x44>)
 80019ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ee:	f003 0301 	and.w	r3, r3, #1
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019f6:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_MspInit+0x44>)
 80019f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fa:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <HAL_MspInit+0x44>)
 80019fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a00:	6593      	str	r3, [r2, #88]	; 0x58
 8001a02:	4b06      	ldr	r3, [pc, #24]	; (8001a1c <HAL_MspInit+0x44>)
 8001a04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr
 8001a1a:	bf00      	nop
 8001a1c:	40021000 	.word	0x40021000

08001a20 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b0ac      	sub	sp, #176	; 0xb0
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	60da      	str	r2, [r3, #12]
 8001a36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	2288      	movs	r2, #136	; 0x88
 8001a3e:	2100      	movs	r1, #0
 8001a40:	4618      	mov	r0, r3
 8001a42:	f005 fb47 	bl	80070d4 <memset>
  if(hi2c->Instance==I2C2)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a21      	ldr	r2, [pc, #132]	; (8001ad0 <HAL_I2C_MspInit+0xb0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d13b      	bne.n	8001ac8 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001a50:	2380      	movs	r3, #128	; 0x80
 8001a52:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001a54:	2300      	movs	r3, #0
 8001a56:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a58:	f107 0314 	add.w	r3, r7, #20
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 f9cf 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001a68:	f7ff ffb0 	bl	80019cc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_I2C_MspInit+0xb4>)
 8001a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a70:	4a18      	ldr	r2, [pc, #96]	; (8001ad4 <HAL_I2C_MspInit+0xb4>)
 8001a72:	f043 0302 	orr.w	r3, r3, #2
 8001a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a78:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_I2C_MspInit+0xb4>)
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8001a84:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a8c:	2312      	movs	r3, #18
 8001a8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a92:	2300      	movs	r3, #0
 8001a94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a98:	2303      	movs	r3, #3
 8001a9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a9e:	2304      	movs	r3, #4
 8001aa0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <HAL_I2C_MspInit+0xb8>)
 8001aac:	f001 fa42 	bl	8002f34 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_I2C_MspInit+0xb4>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab4:	4a07      	ldr	r2, [pc, #28]	; (8001ad4 <HAL_I2C_MspInit+0xb4>)
 8001ab6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001aba:	6593      	str	r3, [r2, #88]	; 0x58
 8001abc:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_I2C_MspInit+0xb4>)
 8001abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	37b0      	adds	r7, #176	; 0xb0
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40005800 	.word	0x40005800
 8001ad4:	40021000 	.word	0x40021000
 8001ad8:	48000400 	.word	0x48000400

08001adc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a0b      	ldr	r2, [pc, #44]	; (8001b18 <HAL_I2C_MspDeInit+0x3c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10f      	bne.n	8001b0e <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <HAL_I2C_MspDeInit+0x40>)
 8001af0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_I2C_MspDeInit+0x40>)
 8001af4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001af8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001afa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001afe:	4808      	ldr	r0, [pc, #32]	; (8001b20 <HAL_I2C_MspDeInit+0x44>)
 8001b00:	f001 fbc2 	bl	8003288 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001b04:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001b08:	4805      	ldr	r0, [pc, #20]	; (8001b20 <HAL_I2C_MspDeInit+0x44>)
 8001b0a:	f001 fbbd 	bl	8003288 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	40005800 	.word	0x40005800
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	48000400 	.word	0x48000400

08001b24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ae      	sub	sp, #184	; 0xb8
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 031c 	add.w	r3, r7, #28
 8001b40:	2288      	movs	r2, #136	; 0x88
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f005 fac5 	bl	80070d4 <memset>
  if(huart->Instance==UART4)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <HAL_UART_MspInit+0x154>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d144      	bne.n	8001bde <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001b54:	2308      	movs	r3, #8
 8001b56:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4618      	mov	r0, r3
 8001b62:	f003 f94d 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b6c:	f7ff ff2e 	bl	80019cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001b70:	4b42      	ldr	r3, [pc, #264]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	4a41      	ldr	r2, [pc, #260]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001b76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7c:	4b3f      	ldr	r3, [pc, #252]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b84:	61bb      	str	r3, [r7, #24]
 8001b86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b88:	4b3c      	ldr	r3, [pc, #240]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a3b      	ldr	r2, [pc, #236]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001b8e:	f043 0301 	orr.w	r3, r3, #1
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b39      	ldr	r3, [pc, #228]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bbe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bc8:	f001 f9b4 	bl	8002f34 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2034      	movs	r0, #52	; 0x34
 8001bd2:	f001 f8fa 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001bd6:	2034      	movs	r0, #52	; 0x34
 8001bd8:	f001 f913 	bl	8002e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bdc:	e047      	b.n	8001c6e <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_UART_MspInit+0x15c>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d142      	bne.n	8001c6e <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001be8:	2301      	movs	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001bec:	2300      	movs	r3, #0
 8001bee:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f903 	bl	8004e00 <HAL_RCCEx_PeriphCLKConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8001c00:	f7ff fee4 	bl	80019cc <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c08:	4a1c      	ldr	r2, [pc, #112]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001c0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0e:	6613      	str	r3, [r2, #96]	; 0x60
 8001c10:	4b1a      	ldr	r3, [pc, #104]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001c12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c18:	613b      	str	r3, [r7, #16]
 8001c1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c20:	4a16      	ldr	r2, [pc, #88]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001c22:	f043 0302 	orr.w	r3, r3, #2
 8001c26:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c28:	4b14      	ldr	r3, [pc, #80]	; (8001c7c <HAL_UART_MspInit+0x158>)
 8001c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2c:	f003 0302 	and.w	r3, r3, #2
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001c34:	23c0      	movs	r3, #192	; 0xc0
 8001c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c46:	2303      	movs	r3, #3
 8001c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c4c:	2307      	movs	r3, #7
 8001c4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001c56:	4619      	mov	r1, r3
 8001c58:	480a      	ldr	r0, [pc, #40]	; (8001c84 <HAL_UART_MspInit+0x160>)
 8001c5a:	f001 f96b 	bl	8002f34 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	2025      	movs	r0, #37	; 0x25
 8001c64:	f001 f8b1 	bl	8002dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001c68:	2025      	movs	r0, #37	; 0x25
 8001c6a:	f001 f8ca 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 8001c6e:	bf00      	nop
 8001c70:	37b8      	adds	r7, #184	; 0xb8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	40004c00 	.word	0x40004c00
 8001c7c:	40021000 	.word	0x40021000
 8001c80:	40013800 	.word	0x40013800
 8001c84:	48000400 	.word	0x48000400

08001c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c8c:	e7fe      	b.n	8001c8c <NMI_Handler+0x4>

08001c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c92:	e7fe      	b.n	8001c92 <HardFault_Handler+0x4>

08001c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <MemManage_Handler+0x4>

08001c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9e:	e7fe      	b.n	8001c9e <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	e7fe      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cd4:	f000 ff5a 	bl	8002b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cd8:	bf00      	nop
 8001cda:	bd80      	pop	{r7, pc}

08001cdc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8001ce0:	2020      	movs	r0, #32
 8001ce2:	f001 fbdd 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001ce6:	2040      	movs	r0, #64	; 0x40
 8001ce8:	f001 fbda 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8001cec:	2080      	movs	r0, #128	; 0x80
 8001cee:	f001 fbd7 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001cf2:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001cf6:	f001 fbd3 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	bd80      	pop	{r7, pc}
	...

08001d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d04:	4802      	ldr	r0, [pc, #8]	; (8001d10 <USART1_IRQHandler+0x10>)
 8001d06:	f003 fedd 	bl	8005ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20000554 	.word	0x20000554

08001d14 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001d18:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001d1c:	f001 fbc0 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001d20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001d24:	f001 fbbc 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d28:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d2c:	f001 fbb8 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001d30:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d34:	f001 fbb4 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001d38:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d3c:	f001 fbb0 	bl	80034a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d40:	bf00      	nop
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <UART4_IRQHandler+0x10>)
 8001d4a:	f003 febb 	bl	8005ac4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200005ec 	.word	0x200005ec

08001d58 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001d62:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <ITM_SendChar+0x48>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a0e      	ldr	r2, [pc, #56]	; (8001da0 <ITM_SendChar+0x48>)
 8001d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <ITM_SendChar+0x4c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a0c      	ldr	r2, [pc, #48]	; (8001da4 <ITM_SendChar+0x4c>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001d7a:	bf00      	nop
 8001d7c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f003 0301 	and.w	r3, r3, #1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f8      	beq.n	8001d7c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001d8a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	6013      	str	r3, [r2, #0]
}
 8001d92:	bf00      	nop
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	e000edfc 	.word	0xe000edfc
 8001da4:	e0000e00 	.word	0xe0000e00

08001da8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
	return 1;
 8001dac:	2301      	movs	r3, #1
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_kill>:

int _kill(int pid, int sig)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
 8001dc0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dc2:	f005 f94f 	bl	8007064 <__errno>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2216      	movs	r2, #22
 8001dca:	601a      	str	r2, [r3, #0]
	return -1;
 8001dcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3708      	adds	r7, #8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <_exit>:

void _exit (int status)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001de0:	f04f 31ff 	mov.w	r1, #4294967295
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f7ff ffe7 	bl	8001db8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dea:	e7fe      	b.n	8001dea <_exit+0x12>

08001dec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b086      	sub	sp, #24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e00a      	b.n	8001e14 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001dfe:	f3af 8000 	nop.w
 8001e02:	4601      	mov	r1, r0
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	b2ca      	uxtb	r2, r1
 8001e0c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	3301      	adds	r3, #1
 8001e12:	617b      	str	r3, [r7, #20]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	dbf0      	blt.n	8001dfe <_read+0x12>
	}

return len;
 8001e1c:	687b      	ldr	r3, [r7, #4]
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}

08001e26 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e009      	b.n	8001e4c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	1c5a      	adds	r2, r3, #1
 8001e3c:	60ba      	str	r2, [r7, #8]
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff ff89 	bl	8001d58 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	617b      	str	r3, [r7, #20]
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	dbf1      	blt.n	8001e38 <_write+0x12>
	}
	return len;
 8001e54:	687b      	ldr	r3, [r7, #4]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3718      	adds	r7, #24
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <_close>:

int _close(int file)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
	return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr

08001e76 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e76:	b480      	push	{r7}
 8001e78:	b083      	sub	sp, #12
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
 8001e7e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e86:	605a      	str	r2, [r3, #4]
	return 0;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <_isatty>:

int _isatty(int file)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
	return 1;
 8001e9e:	2301      	movs	r3, #1
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
	return 0;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3714      	adds	r7, #20
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
	...

08001ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b086      	sub	sp, #24
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ed0:	4a14      	ldr	r2, [pc, #80]	; (8001f24 <_sbrk+0x5c>)
 8001ed2:	4b15      	ldr	r3, [pc, #84]	; (8001f28 <_sbrk+0x60>)
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001edc:	4b13      	ldr	r3, [pc, #76]	; (8001f2c <_sbrk+0x64>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d102      	bne.n	8001eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ee4:	4b11      	ldr	r3, [pc, #68]	; (8001f2c <_sbrk+0x64>)
 8001ee6:	4a12      	ldr	r2, [pc, #72]	; (8001f30 <_sbrk+0x68>)
 8001ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <_sbrk+0x64>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	693a      	ldr	r2, [r7, #16]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d207      	bcs.n	8001f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ef8:	f005 f8b4 	bl	8007064 <__errno>
 8001efc:	4603      	mov	r3, r0
 8001efe:	220c      	movs	r2, #12
 8001f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295
 8001f06:	e009      	b.n	8001f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f08:	4b08      	ldr	r3, [pc, #32]	; (8001f2c <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f0e:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <_sbrk+0x64>)
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	4413      	add	r3, r2
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <_sbrk+0x64>)
 8001f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f1a:	68fb      	ldr	r3, [r7, #12]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3718      	adds	r7, #24
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	20018000 	.word	0x20018000
 8001f28:	00000400 	.word	0x00000400
 8001f2c:	200004e0 	.word	0x200004e0
 8001f30:	20000760 	.word	0x20000760

08001f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f38:	4b06      	ldr	r3, [pc, #24]	; (8001f54 <SystemInit+0x20>)
 8001f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f3e:	4a05      	ldr	r2, [pc, #20]	; (8001f54 <SystemInit+0x20>)
 8001f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	e000ed00 	.word	0xe000ed00

08001f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f5c:	f7ff ffea 	bl	8001f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f60:	480c      	ldr	r0, [pc, #48]	; (8001f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f62:	490d      	ldr	r1, [pc, #52]	; (8001f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f64:	4a0d      	ldr	r2, [pc, #52]	; (8001f9c <LoopForever+0xe>)
  movs r3, #0
 8001f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f68:	e002      	b.n	8001f70 <LoopCopyDataInit>

08001f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f6e:	3304      	adds	r3, #4

08001f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f74:	d3f9      	bcc.n	8001f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f76:	4a0a      	ldr	r2, [pc, #40]	; (8001fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f78:	4c0a      	ldr	r4, [pc, #40]	; (8001fa4 <LoopForever+0x16>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f7c:	e001      	b.n	8001f82 <LoopFillZerobss>

08001f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f80:	3204      	adds	r2, #4

08001f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f84:	d3fb      	bcc.n	8001f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f86:	f005 f873 	bl	8007070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f8a:	f7ff f931 	bl	80011f0 <main>

08001f8e <LoopForever>:

LoopForever:
    b LoopForever
 8001f8e:	e7fe      	b.n	8001f8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f98:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 8001f9c:	0800a384 	.word	0x0800a384
  ldr r2, =_sbss
 8001fa0:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8001fa4:	2000075c 	.word	0x2000075c

08001fa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001fa8:	e7fe      	b.n	8001fa8 <ADC1_2_IRQHandler>
	...

08001fac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001fb4:	4b27      	ldr	r3, [pc, #156]	; (8002054 <I2Cx_MspInit+0xa8>)
 8001fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <I2Cx_MspInit+0xa8>)
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <I2Cx_MspInit+0xa8>)
 8001fc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc4:	f003 0302 	and.w	r3, r3, #2
 8001fc8:	613b      	str	r3, [r7, #16]
 8001fca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8001fcc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001fd0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8001fd2:	2312      	movs	r3, #18
 8001fd4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8001fde:	2304      	movs	r3, #4
 8001fe0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fe2:	f107 0314 	add.w	r3, r7, #20
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	481b      	ldr	r0, [pc, #108]	; (8002058 <I2Cx_MspInit+0xac>)
 8001fea:	f000 ffa3 	bl	8002f34 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8001fee:	f107 0314 	add.w	r3, r7, #20
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	4818      	ldr	r0, [pc, #96]	; (8002058 <I2Cx_MspInit+0xac>)
 8001ff6:	f000 ff9d 	bl	8002f34 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8001ffa:	4b16      	ldr	r3, [pc, #88]	; (8002054 <I2Cx_MspInit+0xa8>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	4a15      	ldr	r2, [pc, #84]	; (8002054 <I2Cx_MspInit+0xa8>)
 8002000:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002004:	6593      	str	r3, [r2, #88]	; 0x58
 8002006:	4b13      	ldr	r3, [pc, #76]	; (8002054 <I2Cx_MspInit+0xa8>)
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8002012:	4b10      	ldr	r3, [pc, #64]	; (8002054 <I2Cx_MspInit+0xa8>)
 8002014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002016:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <I2Cx_MspInit+0xa8>)
 8002018:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800201c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800201e:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <I2Cx_MspInit+0xa8>)
 8002020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002022:	4a0c      	ldr	r2, [pc, #48]	; (8002054 <I2Cx_MspInit+0xa8>)
 8002024:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002028:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	210f      	movs	r1, #15
 800202e:	2021      	movs	r0, #33	; 0x21
 8002030:	f000 fecb 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8002034:	2021      	movs	r0, #33	; 0x21
 8002036:	f000 fee4 	bl	8002e02 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	210f      	movs	r1, #15
 800203e:	2022      	movs	r0, #34	; 0x22
 8002040:	f000 fec3 	bl	8002dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8002044:	2022      	movs	r0, #34	; 0x22
 8002046:	f000 fedc 	bl	8002e02 <HAL_NVIC_EnableIRQ>
}
 800204a:	bf00      	nop
 800204c:	3728      	adds	r7, #40	; 0x28
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40021000 	.word	0x40021000
 8002058:	48000400 	.word	0x48000400

0800205c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a12      	ldr	r2, [pc, #72]	; (80020b0 <I2Cx_Init+0x54>)
 8002068:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	4a11      	ldr	r2, [pc, #68]	; (80020b4 <I2Cx_Init+0x58>)
 800206e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff ff89 	bl	8001fac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f001 fa23 	bl	80034e6 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80020a0:	2100      	movs	r1, #0
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f001 ffb2 	bl	800400c <HAL_I2CEx_ConfigAnalogFilter>
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40005800 	.word	0x40005800
 80020b4:	00702681 	.word	0x00702681

080020b8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af04      	add	r7, sp, #16
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	4608      	mov	r0, r1
 80020c2:	4611      	mov	r1, r2
 80020c4:	461a      	mov	r2, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	72fb      	strb	r3, [r7, #11]
 80020ca:	460b      	mov	r3, r1
 80020cc:	813b      	strh	r3, [r7, #8]
 80020ce:	4613      	mov	r3, r2
 80020d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80020d6:	7afb      	ldrb	r3, [r7, #11]
 80020d8:	b299      	uxth	r1, r3
 80020da:	88f8      	ldrh	r0, [r7, #6]
 80020dc:	893a      	ldrh	r2, [r7, #8]
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	9302      	str	r3, [sp, #8]
 80020e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	4603      	mov	r3, r0
 80020ee:	68f8      	ldr	r0, [r7, #12]
 80020f0:	f001 fbcc 	bl	800388c <HAL_I2C_Mem_Read>
 80020f4:	4603      	mov	r3, r0
 80020f6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d004      	beq.n	8002108 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80020fe:	7afb      	ldrb	r3, [r7, #11]
 8002100:	4619      	mov	r1, r3
 8002102:	68f8      	ldr	r0, [r7, #12]
 8002104:	f000 f832 	bl	800216c <I2Cx_Error>
  }
  return status;
 8002108:	7dfb      	ldrb	r3, [r7, #23]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3718      	adds	r7, #24
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}

08002112 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b08a      	sub	sp, #40	; 0x28
 8002116:	af04      	add	r7, sp, #16
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	4608      	mov	r0, r1
 800211c:	4611      	mov	r1, r2
 800211e:	461a      	mov	r2, r3
 8002120:	4603      	mov	r3, r0
 8002122:	72fb      	strb	r3, [r7, #11]
 8002124:	460b      	mov	r3, r1
 8002126:	813b      	strh	r3, [r7, #8]
 8002128:	4613      	mov	r3, r2
 800212a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002130:	7afb      	ldrb	r3, [r7, #11]
 8002132:	b299      	uxth	r1, r3
 8002134:	88f8      	ldrh	r0, [r7, #6]
 8002136:	893a      	ldrh	r2, [r7, #8]
 8002138:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800213c:	9302      	str	r3, [sp, #8]
 800213e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	4603      	mov	r3, r0
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f001 fa8b 	bl	8003664 <HAL_I2C_Mem_Write>
 800214e:	4603      	mov	r3, r0
 8002150:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002152:	7dfb      	ldrb	r3, [r7, #23]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d004      	beq.n	8002162 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002158:	7afb      	ldrb	r3, [r7, #11]
 800215a:	4619      	mov	r1, r3
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f805 	bl	800216c <I2Cx_Error>
  }
  return status;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f001 fa43 	bl	8003604 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff6c 	bl	800205c <I2Cx_Init>
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002190:	4802      	ldr	r0, [pc, #8]	; (800219c <SENSOR_IO_Init+0x10>)
 8002192:	f7ff ff63 	bl	800205c <I2Cx_Init>
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	200006f4 	.word	0x200006f4

080021a0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af02      	add	r7, sp, #8
 80021a6:	4603      	mov	r3, r0
 80021a8:	71fb      	strb	r3, [r7, #7]
 80021aa:	460b      	mov	r3, r1
 80021ac:	71bb      	strb	r3, [r7, #6]
 80021ae:	4613      	mov	r3, r2
 80021b0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	79f9      	ldrb	r1, [r7, #7]
 80021b8:	2301      	movs	r3, #1
 80021ba:	9301      	str	r3, [sp, #4]
 80021bc:	1d7b      	adds	r3, r7, #5
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	2301      	movs	r3, #1
 80021c2:	4803      	ldr	r0, [pc, #12]	; (80021d0 <SENSOR_IO_Write+0x30>)
 80021c4:	f7ff ffa5 	bl	8002112 <I2Cx_WriteMultiple>
}
 80021c8:	bf00      	nop
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	200006f4 	.word	0x200006f4

080021d4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af02      	add	r7, sp, #8
 80021da:	4603      	mov	r3, r0
 80021dc:	460a      	mov	r2, r1
 80021de:	71fb      	strb	r3, [r7, #7]
 80021e0:	4613      	mov	r3, r2
 80021e2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80021e8:	79bb      	ldrb	r3, [r7, #6]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	79f9      	ldrb	r1, [r7, #7]
 80021ee:	2301      	movs	r3, #1
 80021f0:	9301      	str	r3, [sp, #4]
 80021f2:	f107 030f 	add.w	r3, r7, #15
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	2301      	movs	r3, #1
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <SENSOR_IO_Read+0x38>)
 80021fc:	f7ff ff5c 	bl	80020b8 <I2Cx_ReadMultiple>

  return read_value;
 8002200:	7bfb      	ldrb	r3, [r7, #15]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	200006f4 	.word	0x200006f4

08002210 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af02      	add	r7, sp, #8
 8002216:	603a      	str	r2, [r7, #0]
 8002218:	461a      	mov	r2, r3
 800221a:	4603      	mov	r3, r0
 800221c:	71fb      	strb	r3, [r7, #7]
 800221e:	460b      	mov	r3, r1
 8002220:	71bb      	strb	r3, [r7, #6]
 8002222:	4613      	mov	r3, r2
 8002224:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8002226:	79bb      	ldrb	r3, [r7, #6]
 8002228:	b29a      	uxth	r2, r3
 800222a:	79f9      	ldrb	r1, [r7, #7]
 800222c:	88bb      	ldrh	r3, [r7, #4]
 800222e:	9301      	str	r3, [sp, #4]
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	9300      	str	r3, [sp, #0]
 8002234:	2301      	movs	r3, #1
 8002236:	4804      	ldr	r0, [pc, #16]	; (8002248 <SENSOR_IO_ReadMultiple+0x38>)
 8002238:	f7ff ff3e 	bl	80020b8 <I2Cx_ReadMultiple>
 800223c:	4603      	mov	r3, r0
 800223e:	b29b      	uxth	r3, r3
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200006f4 	.word	0x200006f4

0800224c <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800224c:	b580      	push	{r7, lr}
 800224e:	b084      	sub	sp, #16
 8002250:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002256:	2300      	movs	r3, #0
 8002258:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <BSP_ACCELERO_Init+0x74>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	4798      	blx	r3
 8002260:	4603      	mov	r3, r0
 8002262:	2b6a      	cmp	r3, #106	; 0x6a
 8002264:	d002      	beq.n	800226c <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	73fb      	strb	r3, [r7, #15]
 800226a:	e024      	b.n	80022b6 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <BSP_ACCELERO_Init+0x78>)
 800226e:	4a14      	ldr	r2, [pc, #80]	; (80022c0 <BSP_ACCELERO_Init+0x74>)
 8002270:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8002272:	2330      	movs	r3, #48	; 0x30
 8002274:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002276:	2300      	movs	r3, #0
 8002278:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 800227a:	2300      	movs	r3, #0
 800227c:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800227e:	2340      	movs	r3, #64	; 0x40
 8002280:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8002282:	2300      	movs	r3, #0
 8002284:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800228a:	797a      	ldrb	r2, [r7, #5]
 800228c:	7abb      	ldrb	r3, [r7, #10]
 800228e:	4313      	orrs	r3, r2
 8002290:	b2db      	uxtb	r3, r3
 8002292:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002294:	7a3b      	ldrb	r3, [r7, #8]
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	b2db      	uxtb	r3, r3
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	b21a      	sxth	r2, r3
 80022a0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80022aa:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <BSP_ACCELERO_Init+0x78>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	89ba      	ldrh	r2, [r7, #12]
 80022b2:	4610      	mov	r0, r2
 80022b4:	4798      	blx	r3
  }  

  return ret;
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	20000110 	.word	0x20000110
 80022c4:	200004e4 	.word	0x200004e4

080022c8 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d009      	beq.n	80022ec <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 80022d8:	4b06      	ldr	r3, [pc, #24]	; (80022f4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 80022e2:	4b04      	ldr	r3, [pc, #16]	; (80022f4 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e8:	6878      	ldr	r0, [r7, #4]
 80022ea:	4798      	blx	r3
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	200004e4 	.word	0x200004e4

080022f8 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 80022fe:	4b0c      	ldr	r3, [pc, #48]	; (8002330 <BSP_HSENSOR_Init+0x38>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	20be      	movs	r0, #190	; 0xbe
 8002304:	4798      	blx	r3
 8002306:	4603      	mov	r3, r0
 8002308:	2bbc      	cmp	r3, #188	; 0xbc
 800230a:	d002      	beq.n	8002312 <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	e009      	b.n	8002326 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002312:	4b08      	ldr	r3, [pc, #32]	; (8002334 <BSP_HSENSOR_Init+0x3c>)
 8002314:	4a06      	ldr	r2, [pc, #24]	; (8002330 <BSP_HSENSOR_Init+0x38>)
 8002316:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <BSP_HSENSOR_Init+0x3c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	20be      	movs	r0, #190	; 0xbe
 8002320:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002326:	687b      	ldr	r3, [r7, #4]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3708      	adds	r7, #8
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	200000e8 	.word	0x200000e8
 8002334:	200004e8 	.word	0x200004e8

08002338 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 800233c:	4b04      	ldr	r3, [pc, #16]	; (8002350 <BSP_HSENSOR_ReadHumidity+0x18>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	20be      	movs	r0, #190	; 0xbe
 8002344:	4798      	blx	r3
 8002346:	eef0 7a40 	vmov.f32	s15, s0
}
 800234a:	eeb0 0a67 	vmov.f32	s0, s15
 800234e:	bd80      	pop	{r7, pc}
 8002350:	200004e8 	.word	0x200004e8

08002354 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <BSP_PSENSOR_Init+0x38>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	20ba      	movs	r0, #186	; 0xba
 8002360:	4798      	blx	r3
 8002362:	4603      	mov	r3, r0
 8002364:	2bb1      	cmp	r3, #177	; 0xb1
 8002366:	d002      	beq.n	800236e <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	607b      	str	r3, [r7, #4]
 800236c:	e009      	b.n	8002382 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <BSP_PSENSOR_Init+0x3c>)
 8002370:	4a06      	ldr	r2, [pc, #24]	; (800238c <BSP_PSENSOR_Init+0x38>)
 8002372:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002374:	4b06      	ldr	r3, [pc, #24]	; (8002390 <BSP_PSENSOR_Init+0x3c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	20ba      	movs	r0, #186	; 0xba
 800237c:	4798      	blx	r3
    ret = PSENSOR_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002382:	687b      	ldr	r3, [r7, #4]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	20000104 	.word	0x20000104
 8002390:	200004ec 	.word	0x200004ec

08002394 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002398:	4b04      	ldr	r3, [pc, #16]	; (80023ac <BSP_PSENSOR_ReadPressure+0x18>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	20ba      	movs	r0, #186	; 0xba
 80023a0:	4798      	blx	r3
 80023a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80023a6:	eeb0 0a67 	vmov.f32	s0, s15
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	200004ec 	.word	0x200004ec

080023b0 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 80023ba:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <BSP_TSENSOR_Init+0x30>)
 80023bc:	4a09      	ldr	r2, [pc, #36]	; (80023e4 <BSP_TSENSOR_Init+0x34>)
 80023be:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 80023c0:	f7ff fee4 	bl	800218c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <BSP_TSENSOR_Init+0x30>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2100      	movs	r1, #0
 80023cc:	20be      	movs	r0, #190	; 0xbe
 80023ce:	4798      	blx	r3

  ret = TSENSOR_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 80023d4:	79fb      	ldrb	r3, [r7, #7]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200004f0 	.word	0x200004f0
 80023e4:	200000f4 	.word	0x200000f4

080023e8 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 80023ec:	4b04      	ldr	r3, [pc, #16]	; (8002400 <BSP_TSENSOR_ReadTemp+0x18>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	20be      	movs	r0, #190	; 0xbe
 80023f4:	4798      	blx	r3
 80023f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80023fa:	eeb0 0a67 	vmov.f32	s0, s15
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	200004f0 	.word	0x200004f0

08002404 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2120      	movs	r1, #32
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff fedd 	bl	80021d4 <SENSOR_IO_Read>
 800241a:	4603      	mov	r3, r0
 800241c:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	f023 0304 	bic.w	r3, r3, #4
 8002424:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8002426:	7bfb      	ldrb	r3, [r7, #15]
 8002428:	f043 0304 	orr.w	r3, r3, #4
 800242c:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	f023 0303 	bic.w	r3, r3, #3
 8002434:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8002436:	7bfb      	ldrb	r3, [r7, #15]
 8002438:	f043 0301 	orr.w	r3, r3, #1
 800243c:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800243e:	7bfb      	ldrb	r3, [r7, #15]
 8002440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002444:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002446:	88fb      	ldrh	r3, [r7, #6]
 8002448:	b2db      	uxtb	r3, r3
 800244a:	7bfa      	ldrb	r2, [r7, #15]
 800244c:	2120      	movs	r1, #32
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fea6 	bl	80021a0 <SENSOR_IO_Write>
}
 8002454:	bf00      	nop
 8002456:	3710      	adds	r7, #16
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}

0800245c <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002466:	2300      	movs	r3, #0
 8002468:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800246a:	f7ff fe8f 	bl	800218c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	210f      	movs	r1, #15
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fead 	bl	80021d4 <SENSOR_IO_Read>
 800247a:	4603      	mov	r3, r0
 800247c:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800247e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3710      	adds	r7, #16
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b088      	sub	sp, #32
 800248c:	af00      	add	r7, sp, #0
 800248e:	4603      	mov	r3, r0
 8002490:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8002492:	88fb      	ldrh	r3, [r7, #6]
 8002494:	b2d8      	uxtb	r0, r3
 8002496:	f107 020c 	add.w	r2, r7, #12
 800249a:	2302      	movs	r3, #2
 800249c:	21b0      	movs	r1, #176	; 0xb0
 800249e:	f7ff feb7 	bl	8002210 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 80024a2:	7b3b      	ldrb	r3, [r7, #12]
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	b2db      	uxtb	r3, r3
 80024a8:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 80024aa:	7b7b      	ldrb	r3, [r7, #13]
 80024ac:	085b      	lsrs	r3, r3, #1
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 80024b2:	88fb      	ldrh	r3, [r7, #6]
 80024b4:	b2d8      	uxtb	r0, r3
 80024b6:	f107 020c 	add.w	r2, r7, #12
 80024ba:	2302      	movs	r3, #2
 80024bc:	21b6      	movs	r1, #182	; 0xb6
 80024be:	f7ff fea7 	bl	8002210 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024c2:	7b7b      	ldrb	r3, [r7, #13]
 80024c4:	021b      	lsls	r3, r3, #8
 80024c6:	b21a      	sxth	r2, r3
 80024c8:	7b3b      	ldrb	r3, [r7, #12]
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 80024d0:	88fb      	ldrh	r3, [r7, #6]
 80024d2:	b2d8      	uxtb	r0, r3
 80024d4:	f107 020c 	add.w	r2, r7, #12
 80024d8:	2302      	movs	r3, #2
 80024da:	21ba      	movs	r1, #186	; 0xba
 80024dc:	f7ff fe98 	bl	8002210 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024e0:	7b7b      	ldrb	r3, [r7, #13]
 80024e2:	021b      	lsls	r3, r3, #8
 80024e4:	b21a      	sxth	r2, r3
 80024e6:	7b3b      	ldrb	r3, [r7, #12]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	4313      	orrs	r3, r2
 80024ec:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 80024ee:	88fb      	ldrh	r3, [r7, #6]
 80024f0:	b2d8      	uxtb	r0, r3
 80024f2:	f107 020c 	add.w	r2, r7, #12
 80024f6:	2302      	movs	r3, #2
 80024f8:	21a8      	movs	r1, #168	; 0xa8
 80024fa:	f7ff fe89 	bl	8002210 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80024fe:	7b7b      	ldrb	r3, [r7, #13]
 8002500:	021b      	lsls	r3, r3, #8
 8002502:	b21a      	sxth	r2, r3
 8002504:	7b3b      	ldrb	r3, [r7, #12]
 8002506:	b21b      	sxth	r3, r3
 8002508:	4313      	orrs	r3, r2
 800250a:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800250c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002510:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251e:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8002522:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	ee07 3a90 	vmov	s15, r3
 800252c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002530:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002534:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002538:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	ee07 3a90 	vmov	s15, r3
 8002542:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800254e:	ee07 3a90 	vmov	s15, r3
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	ee77 7a27 	vadd.f32	s15, s14, s15
 800255a:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800255e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002562:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800256a:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800256e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002572:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80025b8 <HTS221_H_ReadHumidity+0x130>
 8002576:	eef4 7ac7 	vcmpe.f32	s15, s14
 800257a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800257e:	dd01      	ble.n	8002584 <HTS221_H_ReadHumidity+0xfc>
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <HTS221_H_ReadHumidity+0x134>)
 8002582:	e00a      	b.n	800259a <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8002584:	edd7 7a04 	vldr	s15, [r7, #16]
 8002588:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800258c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002590:	d502      	bpl.n	8002598 <HTS221_H_ReadHumidity+0x110>
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	e000      	b.n	800259a <HTS221_H_ReadHumidity+0x112>
 8002598:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800259a:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800259c:	edd7 7a04 	vldr	s15, [r7, #16]
 80025a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80025a4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025a8:	eef0 7a66 	vmov.f32	s15, s13
}
 80025ac:	eeb0 0a67 	vmov.f32	s0, s15
 80025b0:	3720      	adds	r7, #32
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	447a0000 	.word	0x447a0000
 80025bc:	447a0000 	.word	0x447a0000

080025c0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b084      	sub	sp, #16
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2120      	movs	r1, #32
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7ff fdfe 	bl	80021d4 <SENSOR_IO_Read>
 80025d8:	4603      	mov	r3, r0
 80025da:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80025dc:	7bfb      	ldrb	r3, [r7, #15]
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
 80025e6:	f043 0304 	orr.w	r3, r3, #4
 80025ea:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	f023 0303 	bic.w	r3, r3, #3
 80025f2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80025f4:	7bfb      	ldrb	r3, [r7, #15]
 80025f6:	f043 0301 	orr.w	r3, r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002602:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8002604:	88fb      	ldrh	r3, [r7, #6]
 8002606:	b2db      	uxtb	r3, r3
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	2120      	movs	r1, #32
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fdc7 	bl	80021a0 <SENSOR_IO_Write>
}
 8002612:	bf00      	nop
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b088      	sub	sp, #32
 800261e:	af00      	add	r7, sp, #0
 8002620:	4603      	mov	r3, r0
 8002622:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8002624:	88fb      	ldrh	r3, [r7, #6]
 8002626:	b2d8      	uxtb	r0, r3
 8002628:	f107 0208 	add.w	r2, r7, #8
 800262c:	2302      	movs	r3, #2
 800262e:	21b2      	movs	r1, #178	; 0xb2
 8002630:	f7ff fdee 	bl	8002210 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8002634:	88fb      	ldrh	r3, [r7, #6]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2135      	movs	r1, #53	; 0x35
 800263a:	4618      	mov	r0, r3
 800263c:	f7ff fdca 	bl	80021d4 <SENSOR_IO_Read>
 8002640:	4603      	mov	r3, r0
 8002642:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8002644:	7ffb      	ldrb	r3, [r7, #31]
 8002646:	021b      	lsls	r3, r3, #8
 8002648:	b21b      	sxth	r3, r3
 800264a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800264e:	b21a      	sxth	r2, r3
 8002650:	7a3b      	ldrb	r3, [r7, #8]
 8002652:	b21b      	sxth	r3, r3
 8002654:	4313      	orrs	r3, r2
 8002656:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8002658:	7ffb      	ldrb	r3, [r7, #31]
 800265a:	019b      	lsls	r3, r3, #6
 800265c:	b21b      	sxth	r3, r3
 800265e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002662:	b21a      	sxth	r2, r3
 8002664:	7a7b      	ldrb	r3, [r7, #9]
 8002666:	b21b      	sxth	r3, r3
 8002668:	4313      	orrs	r3, r2
 800266a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800266c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002670:	10db      	asrs	r3, r3, #3
 8002672:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8002674:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002678:	10db      	asrs	r3, r3, #3
 800267a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800267c:	88fb      	ldrh	r3, [r7, #6]
 800267e:	b2d8      	uxtb	r0, r3
 8002680:	f107 0208 	add.w	r2, r7, #8
 8002684:	2304      	movs	r3, #4
 8002686:	21bc      	movs	r1, #188	; 0xbc
 8002688:	f7ff fdc2 	bl	8002210 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800268c:	7a7b      	ldrb	r3, [r7, #9]
 800268e:	021b      	lsls	r3, r3, #8
 8002690:	b21a      	sxth	r2, r3
 8002692:	7a3b      	ldrb	r3, [r7, #8]
 8002694:	b21b      	sxth	r3, r3
 8002696:	4313      	orrs	r3, r2
 8002698:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800269a:	7afb      	ldrb	r3, [r7, #11]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	b21a      	sxth	r2, r3
 80026a0:	7abb      	ldrb	r3, [r7, #10]
 80026a2:	b21b      	sxth	r3, r3
 80026a4:	4313      	orrs	r3, r2
 80026a6:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 80026a8:	88fb      	ldrh	r3, [r7, #6]
 80026aa:	b2d8      	uxtb	r0, r3
 80026ac:	f107 0208 	add.w	r2, r7, #8
 80026b0:	2302      	movs	r3, #2
 80026b2:	21aa      	movs	r1, #170	; 0xaa
 80026b4:	f7ff fdac 	bl	8002210 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 80026b8:	7a7b      	ldrb	r3, [r7, #9]
 80026ba:	021b      	lsls	r3, r3, #8
 80026bc:	b21a      	sxth	r2, r3
 80026be:	7a3b      	ldrb	r3, [r7, #8]
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	4313      	orrs	r3, r2
 80026c4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 80026c6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80026ca:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80026dc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80026ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80026ee:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026f2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	ee07 3a90 	vmov	s15, r3
 80026fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002700:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002704:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002714:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	ee07 3a90 	vmov	s15, r3
}
 800271e:	eeb0 0a67 	vmov.f32	s0, s15
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}

08002728 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 8002732:	88fb      	ldrh	r3, [r7, #6]
 8002734:	4618      	mov	r0, r3
 8002736:	f000 f87b 	bl	8002830 <LPS22HB_Init>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	4603      	mov	r3, r0
 800274a:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800274c:	2300      	movs	r3, #0
 800274e:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 8002750:	f7ff fd1c 	bl	800218c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8002754:	88fb      	ldrh	r3, [r7, #6]
 8002756:	b2db      	uxtb	r3, r3
 8002758:	210f      	movs	r1, #15
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff fd3a 	bl	80021d4 <SENSOR_IO_Read>
 8002760:	4603      	mov	r3, r0
 8002762:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8002764:	7bfb      	ldrb	r3, [r7, #15]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 8002770:	b590      	push	{r4, r7, lr}
 8002772:	b087      	sub	sp, #28
 8002774:	af00      	add	r7, sp, #0
 8002776:	4603      	mov	r3, r0
 8002778:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	74fb      	strb	r3, [r7, #19]
 8002782:	e013      	b.n	80027ac <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8002784:	88fb      	ldrh	r3, [r7, #6]
 8002786:	b2da      	uxtb	r2, r3
 8002788:	7cfb      	ldrb	r3, [r7, #19]
 800278a:	3328      	adds	r3, #40	; 0x28
 800278c:	b2db      	uxtb	r3, r3
 800278e:	7cfc      	ldrb	r4, [r7, #19]
 8002790:	4619      	mov	r1, r3
 8002792:	4610      	mov	r0, r2
 8002794:	f7ff fd1e 	bl	80021d4 <SENSOR_IO_Read>
 8002798:	4603      	mov	r3, r0
 800279a:	461a      	mov	r2, r3
 800279c:	f107 0318 	add.w	r3, r7, #24
 80027a0:	4423      	add	r3, r4
 80027a2:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	3301      	adds	r3, #1
 80027aa:	74fb      	strb	r3, [r7, #19]
 80027ac:	7cfb      	ldrb	r3, [r7, #19]
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d9e8      	bls.n	8002784 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 80027b2:	2300      	movs	r3, #0
 80027b4:	74fb      	strb	r3, [r7, #19]
 80027b6:	e010      	b.n	80027da <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	f107 0218 	add.w	r2, r7, #24
 80027be:	4413      	add	r3, r2
 80027c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80027c4:	461a      	mov	r2, r3
 80027c6:	7cfb      	ldrb	r3, [r7, #19]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	3301      	adds	r3, #1
 80027d8:	74fb      	strb	r3, [r7, #19]
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d9eb      	bls.n	80027b8 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d003      	beq.n	80027f2 <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80027f0:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2264      	movs	r2, #100	; 0x64
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	da01      	bge.n	8002806 <LPS22HB_P_ReadPressure+0x96>
 8002802:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 8002806:	131b      	asrs	r3, r3, #12
 8002808:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	ee07 3a90 	vmov	s15, r3
 8002810:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002814:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800282c <LPS22HB_P_ReadPressure+0xbc>
 8002818:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800281c:	eef0 7a66 	vmov.f32	s15, s13
}
 8002820:	eeb0 0a67 	vmov.f32	s0, s15
 8002824:	371c      	adds	r7, #28
 8002826:	46bd      	mov	sp, r7
 8002828:	bd90      	pop	{r4, r7, pc}
 800282a:	bf00      	nop
 800282c:	42c80000 	.word	0x42c80000

08002830 <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	b2db      	uxtb	r3, r3
 800283e:	211a      	movs	r1, #26
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff fcc7 	bl	80021d4 <SENSOR_IO_Read>
 8002846:	4603      	mov	r3, r0
 8002848:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800284a:	7bfb      	ldrb	r3, [r7, #15]
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 8002852:	7bfb      	ldrb	r3, [r7, #15]
 8002854:	f043 0301 	orr.w	r3, r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	b2db      	uxtb	r3, r3
 800285e:	7bfa      	ldrb	r2, [r7, #15]
 8002860:	211a      	movs	r1, #26
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fc9c 	bl	80021a0 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8002868:	88fb      	ldrh	r3, [r7, #6]
 800286a:	b2db      	uxtb	r3, r3
 800286c:	2110      	movs	r1, #16
 800286e:	4618      	mov	r0, r3
 8002870:	f7ff fcb0 	bl	80021d4 <SENSOR_IO_Read>
 8002874:	4603      	mov	r3, r0
 8002876:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8002878:	7bfb      	ldrb	r3, [r7, #15]
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 8002880:	7bfb      	ldrb	r3, [r7, #15]
 8002882:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002886:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8002888:	7bfb      	ldrb	r3, [r7, #15]
 800288a:	f023 0302 	bic.w	r3, r3, #2
 800288e:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 8002890:	7bfb      	ldrb	r3, [r7, #15]
 8002892:	f043 0302 	orr.w	r3, r3, #2
 8002896:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	b2db      	uxtb	r3, r3
 800289c:	7bfa      	ldrb	r2, [r7, #15]
 800289e:	2110      	movs	r1, #16
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc7d 	bl	80021a0 <SENSOR_IO_Write>
}  
 80028a6:	bf00      	nop
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	4603      	mov	r3, r0
 80028b6:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80028b8:	2300      	movs	r3, #0
 80028ba:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80028bc:	2110      	movs	r1, #16
 80028be:	20d4      	movs	r0, #212	; 0xd4
 80028c0:	f7ff fc88 	bl	80021d4 <SENSOR_IO_Read>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80028c8:	88fb      	ldrh	r3, [r7, #6]
 80028ca:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80028cc:	7bbb      	ldrb	r3, [r7, #14]
 80028ce:	f003 0303 	and.w	r3, r3, #3
 80028d2:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80028d4:	7bba      	ldrb	r2, [r7, #14]
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
 80028d8:	4313      	orrs	r3, r2
 80028da:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80028dc:	7bbb      	ldrb	r3, [r7, #14]
 80028de:	461a      	mov	r2, r3
 80028e0:	2110      	movs	r1, #16
 80028e2:	20d4      	movs	r0, #212	; 0xd4
 80028e4:	f7ff fc5c 	bl	80021a0 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80028e8:	2112      	movs	r1, #18
 80028ea:	20d4      	movs	r0, #212	; 0xd4
 80028ec:	f7ff fc72 	bl	80021d4 <SENSOR_IO_Read>
 80028f0:	4603      	mov	r3, r0
 80028f2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80028f4:	88fb      	ldrh	r3, [r7, #6]
 80028f6:	0a1b      	lsrs	r3, r3, #8
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80028fc:	7bbb      	ldrb	r3, [r7, #14]
 80028fe:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8002902:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8002904:	7bba      	ldrb	r2, [r7, #14]
 8002906:	7bfb      	ldrb	r3, [r7, #15]
 8002908:	4313      	orrs	r3, r2
 800290a:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800290c:	7bbb      	ldrb	r3, [r7, #14]
 800290e:	461a      	mov	r2, r3
 8002910:	2112      	movs	r1, #18
 8002912:	20d4      	movs	r0, #212	; 0xd4
 8002914:	f7ff fc44 	bl	80021a0 <SENSOR_IO_Write>
}
 8002918:	bf00      	nop
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8002926:	2300      	movs	r3, #0
 8002928:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800292a:	2110      	movs	r1, #16
 800292c:	20d4      	movs	r0, #212	; 0xd4
 800292e:	f7ff fc51 	bl	80021d4 <SENSOR_IO_Read>
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	461a      	mov	r2, r3
 8002942:	2110      	movs	r1, #16
 8002944:	20d4      	movs	r0, #212	; 0xd4
 8002946:	f7ff fc2b 	bl	80021a0 <SENSOR_IO_Write>
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8002952:	b580      	push	{r7, lr}
 8002954:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8002956:	f7ff fc19 	bl	800218c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800295a:	210f      	movs	r1, #15
 800295c:	20d4      	movs	r0, #212	; 0xd4
 800295e:	f7ff fc39 	bl	80021d4 <SENSOR_IO_Read>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	bd80      	pop	{r7, pc}

08002968 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	4603      	mov	r3, r0
 8002970:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8002972:	2300      	movs	r3, #0
 8002974:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8002976:	2115      	movs	r1, #21
 8002978:	20d4      	movs	r0, #212	; 0xd4
 800297a:	f7ff fc2b 	bl	80021d4 <SENSOR_IO_Read>
 800297e:	4603      	mov	r3, r0
 8002980:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	f023 0310 	bic.w	r3, r3, #16
 8002988:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8002990:	7bfb      	ldrb	r3, [r7, #15]
 8002992:	f043 0310 	orr.w	r3, r3, #16
 8002996:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	461a      	mov	r2, r3
 800299c:	2115      	movs	r1, #21
 800299e:	20d4      	movs	r0, #212	; 0xd4
 80029a0:	f7ff fbfe 	bl	80021a0 <SENSOR_IO_Write>
}
 80029a4:	bf00      	nop
 80029a6:	3710      	adds	r7, #16
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}

080029ac <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b088      	sub	sp, #32
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 80029b4:	2300      	movs	r3, #0
 80029b6:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80029c2:	2110      	movs	r1, #16
 80029c4:	20d4      	movs	r0, #212	; 0xd4
 80029c6:	f7ff fc05 	bl	80021d4 <SENSOR_IO_Read>
 80029ca:	4603      	mov	r3, r0
 80029cc:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 80029ce:	f107 0208 	add.w	r2, r7, #8
 80029d2:	2306      	movs	r3, #6
 80029d4:	2128      	movs	r1, #40	; 0x28
 80029d6:	20d4      	movs	r0, #212	; 0xd4
 80029d8:	f7ff fc1a 	bl	8002210 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80029dc:	2300      	movs	r3, #0
 80029de:	77fb      	strb	r3, [r7, #31]
 80029e0:	e01f      	b.n	8002a22 <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80029e2:	7ffb      	ldrb	r3, [r7, #31]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	3301      	adds	r3, #1
 80029e8:	f107 0220 	add.w	r2, r7, #32
 80029ec:	4413      	add	r3, r2
 80029ee:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80029f2:	b29b      	uxth	r3, r3
 80029f4:	021b      	lsls	r3, r3, #8
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	7ffb      	ldrb	r3, [r7, #31]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	f107 0120 	add.w	r1, r7, #32
 8002a00:	440b      	add	r3, r1
 8002a02:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	4413      	add	r3, r2
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	7ffb      	ldrb	r3, [r7, #31]
 8002a0e:	b212      	sxth	r2, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	f107 0120 	add.w	r1, r7, #32
 8002a16:	440b      	add	r3, r1
 8002a18:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8002a1c:	7ffb      	ldrb	r3, [r7, #31]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	77fb      	strb	r3, [r7, #31]
 8002a22:	7ffb      	ldrb	r3, [r7, #31]
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d9dc      	bls.n	80029e2 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8002a28:	7dfb      	ldrb	r3, [r7, #23]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b0c      	cmp	r3, #12
 8002a30:	d828      	bhi.n	8002a84 <LSM6DSL_AccReadXYZ+0xd8>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <LSM6DSL_AccReadXYZ+0x8c>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002a85 	.word	0x08002a85
 8002a40:	08002a85 	.word	0x08002a85
 8002a44:	08002a85 	.word	0x08002a85
 8002a48:	08002a7f 	.word	0x08002a7f
 8002a4c:	08002a85 	.word	0x08002a85
 8002a50:	08002a85 	.word	0x08002a85
 8002a54:	08002a85 	.word	0x08002a85
 8002a58:	08002a73 	.word	0x08002a73
 8002a5c:	08002a85 	.word	0x08002a85
 8002a60:	08002a85 	.word	0x08002a85
 8002a64:	08002a85 	.word	0x08002a85
 8002a68:	08002a79 	.word	0x08002a79
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8002a6c:	4b19      	ldr	r3, [pc, #100]	; (8002ad4 <LSM6DSL_AccReadXYZ+0x128>)
 8002a6e:	61bb      	str	r3, [r7, #24]
    break;
 8002a70:	e008      	b.n	8002a84 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8002a72:	4b19      	ldr	r3, [pc, #100]	; (8002ad8 <LSM6DSL_AccReadXYZ+0x12c>)
 8002a74:	61bb      	str	r3, [r7, #24]
    break;
 8002a76:	e005      	b.n	8002a84 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8002a78:	4b18      	ldr	r3, [pc, #96]	; (8002adc <LSM6DSL_AccReadXYZ+0x130>)
 8002a7a:	61bb      	str	r3, [r7, #24]
    break;
 8002a7c:	e002      	b.n	8002a84 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8002a7e:	4b18      	ldr	r3, [pc, #96]	; (8002ae0 <LSM6DSL_AccReadXYZ+0x134>)
 8002a80:	61bb      	str	r3, [r7, #24]
    break;    
 8002a82:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8002a84:	2300      	movs	r3, #0
 8002a86:	77fb      	strb	r3, [r7, #31]
 8002a88:	e01b      	b.n	8002ac2 <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8002a8a:	7ffb      	ldrb	r3, [r7, #31]
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	f107 0220 	add.w	r2, r7, #32
 8002a92:	4413      	add	r3, r2
 8002a94:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002a98:	ee07 3a90 	vmov	s15, r3
 8002a9c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa0:	edd7 7a06 	vldr	s15, [r7, #24]
 8002aa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa8:	7ffb      	ldrb	r3, [r7, #31]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ab4:	ee17 2a90 	vmov	r2, s15
 8002ab8:	b212      	sxth	r2, r2
 8002aba:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8002abc:	7ffb      	ldrb	r3, [r7, #31]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	77fb      	strb	r3, [r7, #31]
 8002ac2:	7ffb      	ldrb	r3, [r7, #31]
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d9e0      	bls.n	8002a8a <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8002ac8:	bf00      	nop
 8002aca:	bf00      	nop
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	3d79db23 	.word	0x3d79db23
 8002ad8:	3df9db23 	.word	0x3df9db23
 8002adc:	3e79db23 	.word	0x3e79db23
 8002ae0:	3ef9db23 	.word	0x3ef9db23

08002ae4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002aea:	2300      	movs	r3, #0
 8002aec:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aee:	2003      	movs	r0, #3
 8002af0:	f000 f960 	bl	8002db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002af4:	2000      	movs	r0, #0
 8002af6:	f000 f80d 	bl	8002b14 <HAL_InitTick>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	71fb      	strb	r3, [r7, #7]
 8002b04:	e001      	b.n	8002b0a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002b06:	f7fe ff67 	bl	80019d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002b0a:	79fb      	ldrb	r3, [r7, #7]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002b20:	4b17      	ldr	r3, [pc, #92]	; (8002b80 <HAL_InitTick+0x6c>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d023      	beq.n	8002b70 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_InitTick+0x70>)
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	4b14      	ldr	r3, [pc, #80]	; (8002b80 <HAL_InitTick+0x6c>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	4619      	mov	r1, r3
 8002b32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f000 f96d 	bl	8002e1e <HAL_SYSTICK_Config>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d10f      	bne.n	8002b6a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b0f      	cmp	r3, #15
 8002b4e:	d809      	bhi.n	8002b64 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b50:	2200      	movs	r2, #0
 8002b52:	6879      	ldr	r1, [r7, #4]
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	f000 f937 	bl	8002dca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b5c:	4a0a      	ldr	r2, [pc, #40]	; (8002b88 <HAL_InitTick+0x74>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6013      	str	r3, [r2, #0]
 8002b62:	e007      	b.n	8002b74 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e004      	b.n	8002b74 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	73fb      	strb	r3, [r7, #15]
 8002b6e:	e001      	b.n	8002b74 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000148 	.word	0x20000148
 8002b84:	200000e4 	.word	0x200000e4
 8002b88:	20000144 	.word	0x20000144

08002b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002b90:	4b06      	ldr	r3, [pc, #24]	; (8002bac <HAL_IncTick+0x20>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b06      	ldr	r3, [pc, #24]	; (8002bb0 <HAL_IncTick+0x24>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	4a04      	ldr	r2, [pc, #16]	; (8002bb0 <HAL_IncTick+0x24>)
 8002b9e:	6013      	str	r3, [r2, #0]
}
 8002ba0:	bf00      	nop
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	20000148 	.word	0x20000148
 8002bb0:	20000748 	.word	0x20000748

08002bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8002bb8:	4b03      	ldr	r3, [pc, #12]	; (8002bc8 <HAL_GetTick+0x14>)
 8002bba:	681b      	ldr	r3, [r3, #0]
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	20000748 	.word	0x20000748

08002bcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bd4:	f7ff ffee 	bl	8002bb4 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d005      	beq.n	8002bf2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002be6:	4b0a      	ldr	r3, [pc, #40]	; (8002c10 <HAL_Delay+0x44>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4413      	add	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002bf2:	bf00      	nop
 8002bf4:	f7ff ffde 	bl	8002bb4 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	429a      	cmp	r2, r3
 8002c02:	d8f7      	bhi.n	8002bf4 <HAL_Delay+0x28>
  {
  }
}
 8002c04:	bf00      	nop
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	20000148 	.word	0x20000148

08002c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f003 0307 	and.w	r3, r3, #7
 8002c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c24:	4b0c      	ldr	r3, [pc, #48]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c30:	4013      	ands	r3, r2
 8002c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c46:	4a04      	ldr	r2, [pc, #16]	; (8002c58 <__NVIC_SetPriorityGrouping+0x44>)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	60d3      	str	r3, [r2, #12]
}
 8002c4c:	bf00      	nop
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	e000ed00 	.word	0xe000ed00

08002c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c60:	4b04      	ldr	r3, [pc, #16]	; (8002c74 <__NVIC_GetPriorityGrouping+0x18>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	0a1b      	lsrs	r3, r3, #8
 8002c66:	f003 0307 	and.w	r3, r3, #7
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4603      	mov	r3, r0
 8002c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	db0b      	blt.n	8002ca2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c8a:	79fb      	ldrb	r3, [r7, #7]
 8002c8c:	f003 021f 	and.w	r2, r3, #31
 8002c90:	4907      	ldr	r1, [pc, #28]	; (8002cb0 <__NVIC_EnableIRQ+0x38>)
 8002c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c96:	095b      	lsrs	r3, r3, #5
 8002c98:	2001      	movs	r0, #1
 8002c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ca2:	bf00      	nop
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	e000e100 	.word	0xe000e100

08002cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	4603      	mov	r3, r0
 8002cbc:	6039      	str	r1, [r7, #0]
 8002cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	db0a      	blt.n	8002cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	490c      	ldr	r1, [pc, #48]	; (8002d00 <__NVIC_SetPriority+0x4c>)
 8002cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd2:	0112      	lsls	r2, r2, #4
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	440b      	add	r3, r1
 8002cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cdc:	e00a      	b.n	8002cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	b2da      	uxtb	r2, r3
 8002ce2:	4908      	ldr	r1, [pc, #32]	; (8002d04 <__NVIC_SetPriority+0x50>)
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	3b04      	subs	r3, #4
 8002cec:	0112      	lsls	r2, r2, #4
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	761a      	strb	r2, [r3, #24]
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr
 8002d00:	e000e100 	.word	0xe000e100
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b089      	sub	sp, #36	; 0x24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	f1c3 0307 	rsb	r3, r3, #7
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	bf28      	it	cs
 8002d26:	2304      	movcs	r3, #4
 8002d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2b06      	cmp	r3, #6
 8002d30:	d902      	bls.n	8002d38 <NVIC_EncodePriority+0x30>
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	3b03      	subs	r3, #3
 8002d36:	e000      	b.n	8002d3a <NVIC_EncodePriority+0x32>
 8002d38:	2300      	movs	r3, #0
 8002d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	401a      	ands	r2, r3
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d50:	f04f 31ff 	mov.w	r1, #4294967295
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5a:	43d9      	mvns	r1, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d60:	4313      	orrs	r3, r2
         );
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3724      	adds	r7, #36	; 0x24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6c:	4770      	bx	lr
	...

08002d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d80:	d301      	bcc.n	8002d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d82:	2301      	movs	r3, #1
 8002d84:	e00f      	b.n	8002da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <SysTick_Config+0x40>)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d8e:	210f      	movs	r1, #15
 8002d90:	f04f 30ff 	mov.w	r0, #4294967295
 8002d94:	f7ff ff8e 	bl	8002cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <SysTick_Config+0x40>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9e:	4b04      	ldr	r3, [pc, #16]	; (8002db0 <SysTick_Config+0x40>)
 8002da0:	2207      	movs	r2, #7
 8002da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	e000e010 	.word	0xe000e010

08002db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ff29 	bl	8002c14 <__NVIC_SetPriorityGrouping>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}

08002dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dca:	b580      	push	{r7, lr}
 8002dcc:	b086      	sub	sp, #24
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	60b9      	str	r1, [r7, #8]
 8002dd4:	607a      	str	r2, [r7, #4]
 8002dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ddc:	f7ff ff3e 	bl	8002c5c <__NVIC_GetPriorityGrouping>
 8002de0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	68b9      	ldr	r1, [r7, #8]
 8002de6:	6978      	ldr	r0, [r7, #20]
 8002de8:	f7ff ff8e 	bl	8002d08 <NVIC_EncodePriority>
 8002dec:	4602      	mov	r2, r0
 8002dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002df2:	4611      	mov	r1, r2
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff5d 	bl	8002cb4 <__NVIC_SetPriority>
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b082      	sub	sp, #8
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	4603      	mov	r3, r0
 8002e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff31 	bl	8002c78 <__NVIC_EnableIRQ>
}
 8002e16:	bf00      	nop
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ffa2 	bl	8002d70 <SysTick_Config>
 8002e2c:	4603      	mov	r3, r0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}

08002e36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e36:	b480      	push	{r7}
 8002e38:	b085      	sub	sp, #20
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d008      	beq.n	8002e60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2204      	movs	r2, #4
 8002e52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e022      	b.n	8002ea6 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f003 021c 	and.w	r2, r3, #28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3714      	adds	r7, #20
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d005      	beq.n	8002ed6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2204      	movs	r2, #4
 8002ece:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e029      	b.n	8002f2a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 020e 	bic.w	r2, r2, #14
 8002ee4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f022 0201 	bic.w	r2, r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	f003 021c 	and.w	r2, r3, #28
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f202 	lsl.w	r2, r1, r2
 8002f08:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2200      	movs	r2, #0
 8002f16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4798      	blx	r3
    }
  }
  return status;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b087      	sub	sp, #28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f42:	e17f      	b.n	8003244 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	2101      	movs	r1, #1
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f50:	4013      	ands	r3, r2
 8002f52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	f000 8171 	beq.w	800323e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d005      	beq.n	8002f74 <HAL_GPIO_Init+0x40>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f003 0303 	and.w	r3, r3, #3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d130      	bne.n	8002fd6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	005b      	lsls	r3, r3, #1
 8002f7e:	2203      	movs	r2, #3
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	43db      	mvns	r3, r3
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	693a      	ldr	r2, [r7, #16]
 8002fa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002faa:	2201      	movs	r2, #1
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0201 	and.w	r2, r3, #1
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	693a      	ldr	r2, [r7, #16]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	693a      	ldr	r2, [r7, #16]
 8002fd4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f003 0303 	and.w	r3, r3, #3
 8002fde:	2b03      	cmp	r3, #3
 8002fe0:	d118      	bne.n	8003014 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	08db      	lsrs	r3, r3, #3
 8002ffe:	f003 0201 	and.w	r2, r3, #1
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	693a      	ldr	r2, [r7, #16]
 800300a:	4313      	orrs	r3, r2
 800300c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	685b      	ldr	r3, [r3, #4]
 8003018:	f003 0303 	and.w	r3, r3, #3
 800301c:	2b03      	cmp	r3, #3
 800301e:	d017      	beq.n	8003050 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	005b      	lsls	r3, r3, #1
 800302a:	2203      	movs	r2, #3
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	43db      	mvns	r3, r3
 8003032:	693a      	ldr	r2, [r7, #16]
 8003034:	4013      	ands	r3, r2
 8003036:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	693a      	ldr	r2, [r7, #16]
 8003046:	4313      	orrs	r3, r2
 8003048:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 0303 	and.w	r3, r3, #3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d123      	bne.n	80030a4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	08da      	lsrs	r2, r3, #3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3208      	adds	r2, #8
 8003064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 0307 	and.w	r3, r3, #7
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	220f      	movs	r2, #15
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	4013      	ands	r3, r2
 800307e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	691a      	ldr	r2, [r3, #16]
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	f003 0307 	and.w	r3, r3, #7
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003096:	697b      	ldr	r3, [r7, #20]
 8003098:	08da      	lsrs	r2, r3, #3
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	3208      	adds	r2, #8
 800309e:	6939      	ldr	r1, [r7, #16]
 80030a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	693a      	ldr	r2, [r7, #16]
 80030b8:	4013      	ands	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0203 	and.w	r2, r3, #3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	fa02 f303 	lsl.w	r3, r2, r3
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	4313      	orrs	r3, r2
 80030d0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	693a      	ldr	r2, [r7, #16]
 80030d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 80ac 	beq.w	800323e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e6:	4b5f      	ldr	r3, [pc, #380]	; (8003264 <HAL_GPIO_Init+0x330>)
 80030e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030ea:	4a5e      	ldr	r2, [pc, #376]	; (8003264 <HAL_GPIO_Init+0x330>)
 80030ec:	f043 0301 	orr.w	r3, r3, #1
 80030f0:	6613      	str	r3, [r2, #96]	; 0x60
 80030f2:	4b5c      	ldr	r3, [pc, #368]	; (8003264 <HAL_GPIO_Init+0x330>)
 80030f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	60bb      	str	r3, [r7, #8]
 80030fc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80030fe:	4a5a      	ldr	r2, [pc, #360]	; (8003268 <HAL_GPIO_Init+0x334>)
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	4013      	ands	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003128:	d025      	beq.n	8003176 <HAL_GPIO_Init+0x242>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a4f      	ldr	r2, [pc, #316]	; (800326c <HAL_GPIO_Init+0x338>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d01f      	beq.n	8003172 <HAL_GPIO_Init+0x23e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a4e      	ldr	r2, [pc, #312]	; (8003270 <HAL_GPIO_Init+0x33c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d019      	beq.n	800316e <HAL_GPIO_Init+0x23a>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4d      	ldr	r2, [pc, #308]	; (8003274 <HAL_GPIO_Init+0x340>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d013      	beq.n	800316a <HAL_GPIO_Init+0x236>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4c      	ldr	r2, [pc, #304]	; (8003278 <HAL_GPIO_Init+0x344>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00d      	beq.n	8003166 <HAL_GPIO_Init+0x232>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4b      	ldr	r2, [pc, #300]	; (800327c <HAL_GPIO_Init+0x348>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d007      	beq.n	8003162 <HAL_GPIO_Init+0x22e>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4a      	ldr	r2, [pc, #296]	; (8003280 <HAL_GPIO_Init+0x34c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_GPIO_Init+0x22a>
 800315a:	2306      	movs	r3, #6
 800315c:	e00c      	b.n	8003178 <HAL_GPIO_Init+0x244>
 800315e:	2307      	movs	r3, #7
 8003160:	e00a      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003162:	2305      	movs	r3, #5
 8003164:	e008      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003166:	2304      	movs	r3, #4
 8003168:	e006      	b.n	8003178 <HAL_GPIO_Init+0x244>
 800316a:	2303      	movs	r3, #3
 800316c:	e004      	b.n	8003178 <HAL_GPIO_Init+0x244>
 800316e:	2302      	movs	r3, #2
 8003170:	e002      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003172:	2301      	movs	r3, #1
 8003174:	e000      	b.n	8003178 <HAL_GPIO_Init+0x244>
 8003176:	2300      	movs	r3, #0
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	f002 0203 	and.w	r2, r2, #3
 800317e:	0092      	lsls	r2, r2, #2
 8003180:	4093      	lsls	r3, r2
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003188:	4937      	ldr	r1, [pc, #220]	; (8003268 <HAL_GPIO_Init+0x334>)
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	3302      	adds	r3, #2
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003196:	4b3b      	ldr	r3, [pc, #236]	; (8003284 <HAL_GPIO_Init+0x350>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80031ba:	4a32      	ldr	r2, [pc, #200]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80031c0:	4b30      	ldr	r3, [pc, #192]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	43db      	mvns	r3, r3
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	4013      	ands	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80031e4:	4a27      	ldr	r2, [pc, #156]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80031ea:	4b26      	ldr	r3, [pc, #152]	; (8003284 <HAL_GPIO_Init+0x350>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	43db      	mvns	r3, r3
 80031f4:	693a      	ldr	r2, [r7, #16]
 80031f6:	4013      	ands	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d003      	beq.n	800320e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800320e:	4a1d      	ldr	r2, [pc, #116]	; (8003284 <HAL_GPIO_Init+0x350>)
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003214:	4b1b      	ldr	r3, [pc, #108]	; (8003284 <HAL_GPIO_Init+0x350>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	43db      	mvns	r3, r3
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4013      	ands	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d003      	beq.n	8003238 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003230:	693a      	ldr	r2, [r7, #16]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	4313      	orrs	r3, r2
 8003236:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003238:	4a12      	ldr	r2, [pc, #72]	; (8003284 <HAL_GPIO_Init+0x350>)
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	3301      	adds	r3, #1
 8003242:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	fa22 f303 	lsr.w	r3, r2, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	f47f ae78 	bne.w	8002f44 <HAL_GPIO_Init+0x10>
  }
}
 8003254:	bf00      	nop
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	40021000 	.word	0x40021000
 8003268:	40010000 	.word	0x40010000
 800326c:	48000400 	.word	0x48000400
 8003270:	48000800 	.word	0x48000800
 8003274:	48000c00 	.word	0x48000c00
 8003278:	48001000 	.word	0x48001000
 800327c:	48001400 	.word	0x48001400
 8003280:	48001800 	.word	0x48001800
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003288:	b480      	push	{r7}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003292:	2300      	movs	r3, #0
 8003294:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8003296:	e0cd      	b.n	8003434 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8003298:	2201      	movs	r2, #1
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	4013      	ands	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80c0 	beq.w	800342e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80032ae:	4a68      	ldr	r2, [pc, #416]	; (8003450 <HAL_GPIO_DeInit+0x1c8>)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ba:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	f003 0303 	and.w	r3, r3, #3
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	220f      	movs	r2, #15
 80032c6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	4013      	ands	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80032d6:	d025      	beq.n	8003324 <HAL_GPIO_DeInit+0x9c>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a5e      	ldr	r2, [pc, #376]	; (8003454 <HAL_GPIO_DeInit+0x1cc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d01f      	beq.n	8003320 <HAL_GPIO_DeInit+0x98>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a5d      	ldr	r2, [pc, #372]	; (8003458 <HAL_GPIO_DeInit+0x1d0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d019      	beq.n	800331c <HAL_GPIO_DeInit+0x94>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a5c      	ldr	r2, [pc, #368]	; (800345c <HAL_GPIO_DeInit+0x1d4>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d013      	beq.n	8003318 <HAL_GPIO_DeInit+0x90>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a5b      	ldr	r2, [pc, #364]	; (8003460 <HAL_GPIO_DeInit+0x1d8>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d00d      	beq.n	8003314 <HAL_GPIO_DeInit+0x8c>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a5a      	ldr	r2, [pc, #360]	; (8003464 <HAL_GPIO_DeInit+0x1dc>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d007      	beq.n	8003310 <HAL_GPIO_DeInit+0x88>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a59      	ldr	r2, [pc, #356]	; (8003468 <HAL_GPIO_DeInit+0x1e0>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <HAL_GPIO_DeInit+0x84>
 8003308:	2306      	movs	r3, #6
 800330a:	e00c      	b.n	8003326 <HAL_GPIO_DeInit+0x9e>
 800330c:	2307      	movs	r3, #7
 800330e:	e00a      	b.n	8003326 <HAL_GPIO_DeInit+0x9e>
 8003310:	2305      	movs	r3, #5
 8003312:	e008      	b.n	8003326 <HAL_GPIO_DeInit+0x9e>
 8003314:	2304      	movs	r3, #4
 8003316:	e006      	b.n	8003326 <HAL_GPIO_DeInit+0x9e>
 8003318:	2303      	movs	r3, #3
 800331a:	e004      	b.n	8003326 <HAL_GPIO_DeInit+0x9e>
 800331c:	2302      	movs	r3, #2
 800331e:	e002      	b.n	8003326 <HAL_GPIO_DeInit+0x9e>
 8003320:	2301      	movs	r3, #1
 8003322:	e000      	b.n	8003326 <HAL_GPIO_DeInit+0x9e>
 8003324:	2300      	movs	r3, #0
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	f002 0203 	and.w	r2, r2, #3
 800332c:	0092      	lsls	r2, r2, #2
 800332e:	4093      	lsls	r3, r2
 8003330:	68fa      	ldr	r2, [r7, #12]
 8003332:	429a      	cmp	r2, r3
 8003334:	d132      	bne.n	800339c <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8003336:	4b4d      	ldr	r3, [pc, #308]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	494b      	ldr	r1, [pc, #300]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 8003340:	4013      	ands	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8003344:	4b49      	ldr	r3, [pc, #292]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 8003346:	685a      	ldr	r2, [r3, #4]
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	43db      	mvns	r3, r3
 800334c:	4947      	ldr	r1, [pc, #284]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 800334e:	4013      	ands	r3, r2
 8003350:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8003352:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	43db      	mvns	r3, r3
 800335a:	4944      	ldr	r1, [pc, #272]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 800335c:	4013      	ands	r3, r2
 800335e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8003360:	4b42      	ldr	r3, [pc, #264]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	4940      	ldr	r1, [pc, #256]	; (800346c <HAL_GPIO_DeInit+0x1e4>)
 800336a:	4013      	ands	r3, r2
 800336c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0303 	and.w	r3, r3, #3
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	220f      	movs	r2, #15
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800337e:	4a34      	ldr	r2, [pc, #208]	; (8003450 <HAL_GPIO_DeInit+0x1c8>)
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	089b      	lsrs	r3, r3, #2
 8003384:	3302      	adds	r3, #2
 8003386:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	43da      	mvns	r2, r3
 800338e:	4830      	ldr	r0, [pc, #192]	; (8003450 <HAL_GPIO_DeInit+0x1c8>)
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	400a      	ands	r2, r1
 8003396:	3302      	adds	r3, #2
 8003398:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	2103      	movs	r1, #3
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	431a      	orrs	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	08da      	lsrs	r2, r3, #3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3208      	adds	r2, #8
 80033b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f003 0307 	and.w	r3, r3, #7
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	220f      	movs	r2, #15
 80033c6:	fa02 f303 	lsl.w	r3, r2, r3
 80033ca:	43db      	mvns	r3, r3
 80033cc:	697a      	ldr	r2, [r7, #20]
 80033ce:	08d2      	lsrs	r2, r2, #3
 80033d0:	4019      	ands	r1, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	3208      	adds	r2, #8
 80033d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	005b      	lsls	r3, r3, #1
 80033e2:	2103      	movs	r1, #3
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	401a      	ands	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	2101      	movs	r1, #1
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa01 f303 	lsl.w	r3, r1, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	401a      	ands	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68da      	ldr	r2, [r3, #12]
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	2103      	movs	r1, #3
 800340e:	fa01 f303 	lsl.w	r3, r1, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	401a      	ands	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800341e:	2101      	movs	r1, #1
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	fa01 f303 	lsl.w	r3, r1, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	401a      	ands	r2, r3
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	3301      	adds	r3, #1
 8003432:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	fa22 f303 	lsr.w	r3, r2, r3
 800343c:	2b00      	cmp	r3, #0
 800343e:	f47f af2b 	bne.w	8003298 <HAL_GPIO_DeInit+0x10>
  }
}
 8003442:	bf00      	nop
 8003444:	bf00      	nop
 8003446:	371c      	adds	r7, #28
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40010000 	.word	0x40010000
 8003454:	48000400 	.word	0x48000400
 8003458:	48000800 	.word	0x48000800
 800345c:	48000c00 	.word	0x48000c00
 8003460:	48001000 	.word	0x48001000
 8003464:	48001400 	.word	0x48001400
 8003468:	48001800 	.word	0x48001800
 800346c:	40010400 	.word	0x40010400

08003470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	460b      	mov	r3, r1
 800347a:	807b      	strh	r3, [r7, #2]
 800347c:	4613      	mov	r3, r2
 800347e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003480:	787b      	ldrb	r3, [r7, #1]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003486:	887a      	ldrh	r2, [r7, #2]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800348c:	e002      	b.n	8003494 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800348e:	887a      	ldrh	r2, [r7, #2]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003494:	bf00      	nop
 8003496:	370c      	adds	r7, #12
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr

080034a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	4603      	mov	r3, r0
 80034a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80034aa:	4b08      	ldr	r3, [pc, #32]	; (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034ac:	695a      	ldr	r2, [r3, #20]
 80034ae:	88fb      	ldrh	r3, [r7, #6]
 80034b0:	4013      	ands	r3, r2
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d006      	beq.n	80034c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80034b6:	4a05      	ldr	r2, [pc, #20]	; (80034cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80034b8:	88fb      	ldrh	r3, [r7, #6]
 80034ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80034bc:	88fb      	ldrh	r3, [r7, #6]
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 f806 	bl	80034d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80034c4:	bf00      	nop
 80034c6:	3708      	adds	r7, #8
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40010400 	.word	0x40010400

080034d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80034da:	bf00      	nop
 80034dc:	370c      	adds	r7, #12
 80034de:	46bd      	mov	sp, r7
 80034e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e4:	4770      	bx	lr

080034e6 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034e6:	b580      	push	{r7, lr}
 80034e8:	b082      	sub	sp, #8
 80034ea:	af00      	add	r7, sp, #0
 80034ec:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e081      	b.n	80035fc <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d106      	bne.n	8003512 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f7fe fa87 	bl	8001a20 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2224      	movs	r2, #36	; 0x24
 8003516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f022 0201 	bic.w	r2, r2, #1
 8003528:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685a      	ldr	r2, [r3, #4]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003536:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003546:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d107      	bne.n	8003560 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800355c:	609a      	str	r2, [r3, #8]
 800355e:	e006      	b.n	800356e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800356c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d104      	bne.n	8003580 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800357e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	6812      	ldr	r2, [r2, #0]
 800358a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800358e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003592:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	68da      	ldr	r2, [r3, #12]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	699b      	ldr	r3, [r3, #24]
 80035b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	69d9      	ldr	r1, [r3, #28]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1a      	ldr	r2, [r3, #32]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f042 0201 	orr.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2220      	movs	r2, #32
 80035e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80035fa:	2300      	movs	r3, #0
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}

08003604 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b082      	sub	sp, #8
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e021      	b.n	800365a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2224      	movs	r2, #36	; 0x24
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f022 0201 	bic.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7fe fa54 	bl	8001adc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3708      	adds	r7, #8
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	4608      	mov	r0, r1
 800366e:	4611      	mov	r1, r2
 8003670:	461a      	mov	r2, r3
 8003672:	4603      	mov	r3, r0
 8003674:	817b      	strh	r3, [r7, #10]
 8003676:	460b      	mov	r3, r1
 8003678:	813b      	strh	r3, [r7, #8]
 800367a:	4613      	mov	r3, r2
 800367c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b20      	cmp	r3, #32
 8003688:	f040 80f9 	bne.w	800387e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d002      	beq.n	8003698 <HAL_I2C_Mem_Write+0x34>
 8003692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800369e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e0ed      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036aa:	2b01      	cmp	r3, #1
 80036ac:	d101      	bne.n	80036b2 <HAL_I2C_Mem_Write+0x4e>
 80036ae:	2302      	movs	r3, #2
 80036b0:	e0e6      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036ba:	f7ff fa7b 	bl	8002bb4 <HAL_GetTick>
 80036be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2319      	movs	r3, #25
 80036c6:	2201      	movs	r2, #1
 80036c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 fac3 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	e0d1      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2221      	movs	r2, #33	; 0x21
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2240      	movs	r2, #64	; 0x40
 80036e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a3a      	ldr	r2, [r7, #32]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003704:	88f8      	ldrh	r0, [r7, #6]
 8003706:	893a      	ldrh	r2, [r7, #8]
 8003708:	8979      	ldrh	r1, [r7, #10]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	4603      	mov	r3, r0
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 f9d3 	bl	8003ac0 <I2C_RequestMemoryWrite>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d005      	beq.n	800372c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003728:	2301      	movs	r3, #1
 800372a:	e0a9      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	d90e      	bls.n	8003754 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	22ff      	movs	r2, #255	; 0xff
 800373a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	b2da      	uxtb	r2, r3
 8003742:	8979      	ldrh	r1, [r7, #10]
 8003744:	2300      	movs	r3, #0
 8003746:	9300      	str	r3, [sp, #0]
 8003748:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fc2b 	bl	8003fa8 <I2C_TransferConfig>
 8003752:	e00f      	b.n	8003774 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	b2da      	uxtb	r2, r3
 8003764:	8979      	ldrh	r1, [r7, #10]
 8003766:	2300      	movs	r3, #0
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fc1a 	bl	8003fa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003774:	697a      	ldr	r2, [r7, #20]
 8003776:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003778:	68f8      	ldr	r0, [r7, #12]
 800377a:	f000 faad 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e07b      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	781a      	ldrb	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	3b01      	subs	r3, #1
 80037a6:	b29a      	uxth	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b0:	3b01      	subs	r3, #1
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d034      	beq.n	800382c <HAL_I2C_Mem_Write+0x1c8>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d130      	bne.n	800382c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d0:	2200      	movs	r2, #0
 80037d2:	2180      	movs	r1, #128	; 0x80
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 fa3f 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d001      	beq.n	80037e4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e04d      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	2bff      	cmp	r3, #255	; 0xff
 80037ec:	d90e      	bls.n	800380c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	22ff      	movs	r2, #255	; 0xff
 80037f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	2300      	movs	r3, #0
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 fbcf 	bl	8003fa8 <I2C_TransferConfig>
 800380a:	e00f      	b.n	800382c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800381a:	b2da      	uxtb	r2, r3
 800381c:	8979      	ldrh	r1, [r7, #10]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003826:	68f8      	ldr	r0, [r7, #12]
 8003828:	f000 fbbe 	bl	8003fa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d19e      	bne.n	8003774 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003836:	697a      	ldr	r2, [r7, #20]
 8003838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800383a:	68f8      	ldr	r0, [r7, #12]
 800383c:	f000 fa8c 	bl	8003d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e01a      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2220      	movs	r2, #32
 8003850:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	4b0a      	ldr	r3, [pc, #40]	; (8003888 <HAL_I2C_Mem_Write+0x224>)
 800385e:	400b      	ands	r3, r1
 8003860:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	e000      	b.n	8003880 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800387e:	2302      	movs	r3, #2
  }
}
 8003880:	4618      	mov	r0, r3
 8003882:	3718      	adds	r7, #24
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	fe00e800 	.word	0xfe00e800

0800388c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b088      	sub	sp, #32
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	4608      	mov	r0, r1
 8003896:	4611      	mov	r1, r2
 8003898:	461a      	mov	r2, r3
 800389a:	4603      	mov	r3, r0
 800389c:	817b      	strh	r3, [r7, #10]
 800389e:	460b      	mov	r3, r1
 80038a0:	813b      	strh	r3, [r7, #8]
 80038a2:	4613      	mov	r3, r2
 80038a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	f040 80fd 	bne.w	8003aae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_I2C_Mem_Read+0x34>
 80038ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	e0f1      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <HAL_I2C_Mem_Read+0x4e>
 80038d6:	2302      	movs	r3, #2
 80038d8:	e0ea      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80038e2:	f7ff f967 	bl	8002bb4 <HAL_GetTick>
 80038e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	9300      	str	r3, [sp, #0]
 80038ec:	2319      	movs	r3, #25
 80038ee:	2201      	movs	r2, #1
 80038f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038f4:	68f8      	ldr	r0, [r7, #12]
 80038f6:	f000 f9af 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0d5      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2222      	movs	r2, #34	; 0x22
 8003908:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2240      	movs	r2, #64	; 0x40
 8003910:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6a3a      	ldr	r2, [r7, #32]
 800391e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003924:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2200      	movs	r2, #0
 800392a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800392c:	88f8      	ldrh	r0, [r7, #6]
 800392e:	893a      	ldrh	r2, [r7, #8]
 8003930:	8979      	ldrh	r1, [r7, #10]
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	9301      	str	r3, [sp, #4]
 8003936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	4603      	mov	r3, r0
 800393c:	68f8      	ldr	r0, [r7, #12]
 800393e:	f000 f913 	bl	8003b68 <I2C_RequestMemoryRead>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0ad      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003958:	b29b      	uxth	r3, r3
 800395a:	2bff      	cmp	r3, #255	; 0xff
 800395c:	d90e      	bls.n	800397c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	22ff      	movs	r2, #255	; 0xff
 8003962:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003968:	b2da      	uxtb	r2, r3
 800396a:	8979      	ldrh	r1, [r7, #10]
 800396c:	4b52      	ldr	r3, [pc, #328]	; (8003ab8 <HAL_I2C_Mem_Read+0x22c>)
 800396e:	9300      	str	r3, [sp, #0]
 8003970:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 fb17 	bl	8003fa8 <I2C_TransferConfig>
 800397a:	e00f      	b.n	800399c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800398a:	b2da      	uxtb	r2, r3
 800398c:	8979      	ldrh	r1, [r7, #10]
 800398e:	4b4a      	ldr	r3, [pc, #296]	; (8003ab8 <HAL_I2C_Mem_Read+0x22c>)
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003996:	68f8      	ldr	r0, [r7, #12]
 8003998:	f000 fb06 	bl	8003fa8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a2:	2200      	movs	r2, #0
 80039a4:	2104      	movs	r1, #4
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f956 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e07c      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d2:	3b01      	subs	r3, #1
 80039d4:	b29a      	uxth	r2, r3
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039de:	b29b      	uxth	r3, r3
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d034      	beq.n	8003a5c <HAL_I2C_Mem_Read+0x1d0>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d130      	bne.n	8003a5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	9300      	str	r3, [sp, #0]
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	2200      	movs	r2, #0
 8003a02:	2180      	movs	r1, #128	; 0x80
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f927 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e04d      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2bff      	cmp	r3, #255	; 0xff
 8003a1c:	d90e      	bls.n	8003a3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	22ff      	movs	r2, #255	; 0xff
 8003a22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	8979      	ldrh	r1, [r7, #10]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003a34:	68f8      	ldr	r0, [r7, #12]
 8003a36:	f000 fab7 	bl	8003fa8 <I2C_TransferConfig>
 8003a3a:	e00f      	b.n	8003a5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	8979      	ldrh	r1, [r7, #10]
 8003a4e:	2300      	movs	r3, #0
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 faa6 	bl	8003fa8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d19a      	bne.n	800399c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a66:	697a      	ldr	r2, [r7, #20]
 8003a68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f974 	bl	8003d58 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e01a      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6859      	ldr	r1, [r3, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	; (8003abc <HAL_I2C_Mem_Read+0x230>)
 8003a8e:	400b      	ands	r3, r1
 8003a90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	e000      	b.n	8003ab0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
  }
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	80002400 	.word	0x80002400
 8003abc:	fe00e800 	.word	0xfe00e800

08003ac0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b086      	sub	sp, #24
 8003ac4:	af02      	add	r7, sp, #8
 8003ac6:	60f8      	str	r0, [r7, #12]
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	461a      	mov	r2, r3
 8003ace:	4603      	mov	r3, r0
 8003ad0:	817b      	strh	r3, [r7, #10]
 8003ad2:	460b      	mov	r3, r1
 8003ad4:	813b      	strh	r3, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ada:	88fb      	ldrh	r3, [r7, #6]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	8979      	ldrh	r1, [r7, #10]
 8003ae0:	4b20      	ldr	r3, [pc, #128]	; (8003b64 <I2C_RequestMemoryWrite+0xa4>)
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	f000 fa5d 	bl	8003fa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003aee:	69fa      	ldr	r2, [r7, #28]
 8003af0:	69b9      	ldr	r1, [r7, #24]
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f8f0 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e02c      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b02:	88fb      	ldrh	r3, [r7, #6]
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d105      	bne.n	8003b14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b08:	893b      	ldrh	r3, [r7, #8]
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28
 8003b12:	e015      	b.n	8003b40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b14:	893b      	ldrh	r3, [r7, #8]
 8003b16:	0a1b      	lsrs	r3, r3, #8
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	b2da      	uxtb	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	69b9      	ldr	r1, [r7, #24]
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f8d6 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e012      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b36:	893b      	ldrh	r3, [r7, #8]
 8003b38:	b2da      	uxtb	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	2200      	movs	r2, #0
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f884 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e000      	b.n	8003b5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003b5a:	2300      	movs	r3, #0
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	80002000 	.word	0x80002000

08003b68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b086      	sub	sp, #24
 8003b6c:	af02      	add	r7, sp, #8
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	4608      	mov	r0, r1
 8003b72:	4611      	mov	r1, r2
 8003b74:	461a      	mov	r2, r3
 8003b76:	4603      	mov	r3, r0
 8003b78:	817b      	strh	r3, [r7, #10]
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	813b      	strh	r3, [r7, #8]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003b82:	88fb      	ldrh	r3, [r7, #6]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	8979      	ldrh	r1, [r7, #10]
 8003b88:	4b20      	ldr	r3, [pc, #128]	; (8003c0c <I2C_RequestMemoryRead+0xa4>)
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	68f8      	ldr	r0, [r7, #12]
 8003b90:	f000 fa0a 	bl	8003fa8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	69b9      	ldr	r1, [r7, #24]
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f89d 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e02c      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ba8:	88fb      	ldrh	r3, [r7, #6]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d105      	bne.n	8003bba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bae:	893b      	ldrh	r3, [r7, #8]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb8:	e015      	b.n	8003be6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003bba:	893b      	ldrh	r3, [r7, #8]
 8003bbc:	0a1b      	lsrs	r3, r3, #8
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	69b9      	ldr	r1, [r7, #24]
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f883 	bl	8003cd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d001      	beq.n	8003bdc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e012      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003bdc:	893b      	ldrh	r3, [r7, #8]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	9300      	str	r3, [sp, #0]
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	2200      	movs	r2, #0
 8003bee:	2140      	movs	r1, #64	; 0x40
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f831 	bl	8003c58 <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d001      	beq.n	8003c00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	80002000 	.word	0x80002000

08003c10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b02      	cmp	r3, #2
 8003c24:	d103      	bne.n	8003c2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d007      	beq.n	8003c4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	699a      	ldr	r2, [r3, #24]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f042 0201 	orr.w	r2, r2, #1
 8003c4a:	619a      	str	r2, [r3, #24]
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	4613      	mov	r3, r2
 8003c66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c68:	e022      	b.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c70:	d01e      	beq.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c72:	f7fe ff9f 	bl	8002bb4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	69bb      	ldr	r3, [r7, #24]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d302      	bcc.n	8003c88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d113      	bne.n	8003cb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2220      	movs	r2, #32
 8003c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e00f      	b.n	8003cd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	699a      	ldr	r2, [r3, #24]
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	4013      	ands	r3, r2
 8003cba:	68ba      	ldr	r2, [r7, #8]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	bf0c      	ite	eq
 8003cc0:	2301      	moveq	r3, #1
 8003cc2:	2300      	movne	r3, #0
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	79fb      	ldrb	r3, [r7, #7]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d0cd      	beq.n	8003c6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003cce:	2300      	movs	r3, #0
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3710      	adds	r7, #16
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}

08003cd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003ce4:	e02c      	b.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	68b9      	ldr	r1, [r7, #8]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f870 	bl	8003dd0 <I2C_IsErrorOccurred>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e02a      	b.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d00:	d01e      	beq.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d02:	f7fe ff57 	bl	8002bb4 <HAL_GetTick>
 8003d06:	4602      	mov	r2, r0
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d302      	bcc.n	8003d18 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d113      	bne.n	8003d40 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d1c:	f043 0220 	orr.w	r2, r3, #32
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	e007      	b.n	8003d50 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	699b      	ldr	r3, [r3, #24]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d1cb      	bne.n	8003ce6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3710      	adds	r7, #16
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d64:	e028      	b.n	8003db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f000 f830 	bl	8003dd0 <I2C_IsErrorOccurred>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e026      	b.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d7a:	f7fe ff1b 	bl	8002bb4 <HAL_GetTick>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	1ad3      	subs	r3, r2, r3
 8003d84:	68ba      	ldr	r2, [r7, #8]
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d302      	bcc.n	8003d90 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d113      	bne.n	8003db8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2220      	movs	r2, #32
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e007      	b.n	8003dc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b20      	cmp	r3, #32
 8003dc4:	d1cf      	bne.n	8003d66 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003dea:	2300      	movs	r3, #0
 8003dec:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	f003 0310 	and.w	r3, r3, #16
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d075      	beq.n	8003ee8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2210      	movs	r2, #16
 8003e02:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e04:	e056      	b.n	8003eb4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d052      	beq.n	8003eb4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e0e:	f7fe fed1 	bl	8002bb4 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	68ba      	ldr	r2, [r7, #8]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d302      	bcc.n	8003e24 <I2C_IsErrorOccurred+0x54>
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d147      	bne.n	8003eb4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e2e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e36:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e46:	d12e      	bne.n	8003ea6 <I2C_IsErrorOccurred+0xd6>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e4e:	d02a      	beq.n	8003ea6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003e50:	7cfb      	ldrb	r3, [r7, #19]
 8003e52:	2b20      	cmp	r3, #32
 8003e54:	d027      	beq.n	8003ea6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	685a      	ldr	r2, [r3, #4]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e64:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003e66:	f7fe fea5 	bl	8002bb4 <HAL_GetTick>
 8003e6a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e6c:	e01b      	b.n	8003ea6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003e6e:	f7fe fea1 	bl	8002bb4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	2b19      	cmp	r3, #25
 8003e7a:	d914      	bls.n	8003ea6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e80:	f043 0220 	orr.w	r2, r3, #32
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2220      	movs	r2, #32
 8003e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	699b      	ldr	r3, [r3, #24]
 8003eac:	f003 0320 	and.w	r3, r3, #32
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d1dc      	bne.n	8003e6e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f003 0320 	and.w	r3, r3, #32
 8003ebe:	2b20      	cmp	r3, #32
 8003ec0:	d003      	beq.n	8003eca <I2C_IsErrorOccurred+0xfa>
 8003ec2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d09d      	beq.n	8003e06 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003eca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d103      	bne.n	8003eda <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003eda:	6a3b      	ldr	r3, [r7, #32]
 8003edc:	f043 0304 	orr.w	r3, r3, #4
 8003ee0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699b      	ldr	r3, [r3, #24]
 8003eee:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	f043 0301 	orr.w	r3, r3, #1
 8003f00:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f0a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f1c:	6a3b      	ldr	r3, [r7, #32]
 8003f1e:	f043 0308 	orr.w	r3, r3, #8
 8003f22:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f2c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00b      	beq.n	8003f56 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	f043 0302 	orr.w	r3, r3, #2
 8003f44:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f4e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003f56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d01c      	beq.n	8003f98 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f7ff fe56 	bl	8003c10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	6859      	ldr	r1, [r3, #4]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <I2C_IsErrorOccurred+0x1d4>)
 8003f70:	400b      	ands	r3, r1
 8003f72:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3728      	adds	r7, #40	; 0x28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	fe00e800 	.word	0xfe00e800

08003fa8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b087      	sub	sp, #28
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	607b      	str	r3, [r7, #4]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	817b      	strh	r3, [r7, #10]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fba:	897b      	ldrh	r3, [r7, #10]
 8003fbc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fc0:	7a7b      	ldrb	r3, [r7, #9]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fc8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003fd6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685a      	ldr	r2, [r3, #4]
 8003fde:	6a3b      	ldr	r3, [r7, #32]
 8003fe0:	0d5b      	lsrs	r3, r3, #21
 8003fe2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003fe6:	4b08      	ldr	r3, [pc, #32]	; (8004008 <I2C_TransferConfig+0x60>)
 8003fe8:	430b      	orrs	r3, r1
 8003fea:	43db      	mvns	r3, r3
 8003fec:	ea02 0103 	and.w	r1, r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	430a      	orrs	r2, r1
 8003ff8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ffa:	bf00      	nop
 8003ffc:	371c      	adds	r7, #28
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr
 8004006:	bf00      	nop
 8004008:	03ff63ff 	.word	0x03ff63ff

0800400c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
 8004014:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b20      	cmp	r3, #32
 8004020:	d138      	bne.n	8004094 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800402c:	2302      	movs	r3, #2
 800402e:	e032      	b.n	8004096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	; 0x24
 800403c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800405e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6819      	ldr	r1, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e000      	b.n	8004096 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004094:	2302      	movs	r3, #2
  }
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b085      	sub	sp, #20
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	2b20      	cmp	r3, #32
 80040b6:	d139      	bne.n	800412c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d101      	bne.n	80040c6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040c2:	2302      	movs	r3, #2
 80040c4:	e033      	b.n	800412e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2224      	movs	r2, #36	; 0x24
 80040d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0201 	bic.w	r2, r2, #1
 80040e4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80040f4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	021b      	lsls	r3, r3, #8
 80040fa:	68fa      	ldr	r2, [r7, #12]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004128:	2300      	movs	r3, #0
 800412a:	e000      	b.n	800412e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800412c:	2302      	movs	r3, #2
  }
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800413c:	b480      	push	{r7}
 800413e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004140:	4b04      	ldr	r3, [pc, #16]	; (8004154 <HAL_PWREx_GetVoltageRange+0x18>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004148:	4618      	mov	r0, r3
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr
 8004152:	bf00      	nop
 8004154:	40007000 	.word	0x40007000

08004158 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004166:	d130      	bne.n	80041ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004168:	4b23      	ldr	r3, [pc, #140]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004174:	d038      	beq.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004176:	4b20      	ldr	r3, [pc, #128]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800417e:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004184:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004186:	4b1d      	ldr	r3, [pc, #116]	; (80041fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2232      	movs	r2, #50	; 0x32
 800418c:	fb02 f303 	mul.w	r3, r2, r3
 8004190:	4a1b      	ldr	r2, [pc, #108]	; (8004200 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004192:	fba2 2303 	umull	r2, r3, r2, r3
 8004196:	0c9b      	lsrs	r3, r3, #18
 8004198:	3301      	adds	r3, #1
 800419a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800419c:	e002      	b.n	80041a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041a4:	4b14      	ldr	r3, [pc, #80]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a6:	695b      	ldr	r3, [r3, #20]
 80041a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041b0:	d102      	bne.n	80041b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f2      	bne.n	800419e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041b8:	4b0f      	ldr	r3, [pc, #60]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ba:	695b      	ldr	r3, [r3, #20]
 80041bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041c4:	d110      	bne.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e00f      	b.n	80041ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80041ca:	4b0b      	ldr	r3, [pc, #44]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d6:	d007      	beq.n	80041e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80041d8:	4b07      	ldr	r3, [pc, #28]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041e0:	4a05      	ldr	r2, [pc, #20]	; (80041f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40007000 	.word	0x40007000
 80041fc:	200000e4 	.word	0x200000e4
 8004200:	431bde83 	.word	0x431bde83

08004204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004212:	2301      	movs	r3, #1
 8004214:	e3c6      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004216:	4ba1      	ldr	r3, [pc, #644]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004220:	4b9e      	ldr	r3, [pc, #632]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0310 	and.w	r3, r3, #16
 8004232:	2b00      	cmp	r3, #0
 8004234:	f000 80e4 	beq.w	8004400 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <HAL_RCC_OscConfig+0x4a>
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b0c      	cmp	r3, #12
 8004242:	f040 808b 	bne.w	800435c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 8087 	bne.w	800435c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800424e:	4b93      	ldr	r3, [pc, #588]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d005      	beq.n	8004266 <HAL_RCC_OscConfig+0x62>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e39e      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1a      	ldr	r2, [r3, #32]
 800426a:	4b8c      	ldr	r3, [pc, #560]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	2b00      	cmp	r3, #0
 8004274:	d004      	beq.n	8004280 <HAL_RCC_OscConfig+0x7c>
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800427e:	e005      	b.n	800428c <HAL_RCC_OscConfig+0x88>
 8004280:	4b86      	ldr	r3, [pc, #536]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004282:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004286:	091b      	lsrs	r3, r3, #4
 8004288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800428c:	4293      	cmp	r3, r2
 800428e:	d223      	bcs.n	80042d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	4618      	mov	r0, r3
 8004296:	f000 fd53 	bl	8004d40 <RCC_SetFlashLatencyFromMSIRange>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d001      	beq.n	80042a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e37f      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042a4:	4b7d      	ldr	r3, [pc, #500]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	4a7c      	ldr	r2, [pc, #496]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042aa:	f043 0308 	orr.w	r3, r3, #8
 80042ae:	6013      	str	r3, [r2, #0]
 80042b0:	4b7a      	ldr	r3, [pc, #488]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a1b      	ldr	r3, [r3, #32]
 80042bc:	4977      	ldr	r1, [pc, #476]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c2:	4b76      	ldr	r3, [pc, #472]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	69db      	ldr	r3, [r3, #28]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	4972      	ldr	r1, [pc, #456]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	604b      	str	r3, [r1, #4]
 80042d6:	e025      	b.n	8004324 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042d8:	4b70      	ldr	r3, [pc, #448]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a6f      	ldr	r2, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042de:	f043 0308 	orr.w	r3, r3, #8
 80042e2:	6013      	str	r3, [r2, #0]
 80042e4:	4b6d      	ldr	r3, [pc, #436]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	496a      	ldr	r1, [pc, #424]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042f6:	4b69      	ldr	r3, [pc, #420]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	021b      	lsls	r3, r3, #8
 8004304:	4965      	ldr	r1, [pc, #404]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004306:	4313      	orrs	r3, r2
 8004308:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d109      	bne.n	8004324 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd13 	bl	8004d40 <RCC_SetFlashLatencyFromMSIRange>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e33f      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004324:	f000 fc48 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8004328:	4602      	mov	r2, r0
 800432a:	4b5c      	ldr	r3, [pc, #368]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	f003 030f 	and.w	r3, r3, #15
 8004334:	495a      	ldr	r1, [pc, #360]	; (80044a0 <HAL_RCC_OscConfig+0x29c>)
 8004336:	5ccb      	ldrb	r3, [r1, r3]
 8004338:	f003 031f 	and.w	r3, r3, #31
 800433c:	fa22 f303 	lsr.w	r3, r2, r3
 8004340:	4a58      	ldr	r2, [pc, #352]	; (80044a4 <HAL_RCC_OscConfig+0x2a0>)
 8004342:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004344:	4b58      	ldr	r3, [pc, #352]	; (80044a8 <HAL_RCC_OscConfig+0x2a4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fe fbe3 	bl	8002b14 <HAL_InitTick>
 800434e:	4603      	mov	r3, r0
 8004350:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004352:	7bfb      	ldrb	r3, [r7, #15]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d052      	beq.n	80043fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	e323      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d032      	beq.n	80043ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004364:	4b4d      	ldr	r3, [pc, #308]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a4c      	ldr	r2, [pc, #304]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800436a:	f043 0301 	orr.w	r3, r3, #1
 800436e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004370:	f7fe fc20 	bl	8002bb4 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004378:	f7fe fc1c 	bl	8002bb4 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e30c      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800438a:	4b44      	ldr	r3, [pc, #272]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d0f0      	beq.n	8004378 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a40      	ldr	r2, [pc, #256]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800439c:	f043 0308 	orr.w	r3, r3, #8
 80043a0:	6013      	str	r3, [r2, #0]
 80043a2:	4b3e      	ldr	r3, [pc, #248]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
 80043ae:	493b      	ldr	r1, [pc, #236]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043b4:	4b39      	ldr	r3, [pc, #228]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	4936      	ldr	r1, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
 80043c8:	e01a      	b.n	8004400 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043ca:	4b34      	ldr	r3, [pc, #208]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a33      	ldr	r2, [pc, #204]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80043d0:	f023 0301 	bic.w	r3, r3, #1
 80043d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043d6:	f7fe fbed 	bl	8002bb4 <HAL_GetTick>
 80043da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043dc:	e008      	b.n	80043f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043de:	f7fe fbe9 	bl	8002bb4 <HAL_GetTick>
 80043e2:	4602      	mov	r2, r0
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d901      	bls.n	80043f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e2d9      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <HAL_RCC_OscConfig+0x298>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1f0      	bne.n	80043de <HAL_RCC_OscConfig+0x1da>
 80043fc:	e000      	b.n	8004400 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80043fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b00      	cmp	r3, #0
 800440a:	d074      	beq.n	80044f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	2b08      	cmp	r3, #8
 8004410:	d005      	beq.n	800441e <HAL_RCC_OscConfig+0x21a>
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b0c      	cmp	r3, #12
 8004416:	d10e      	bne.n	8004436 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	2b03      	cmp	r3, #3
 800441c:	d10b      	bne.n	8004436 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800441e:	4b1f      	ldr	r3, [pc, #124]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d064      	beq.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d160      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e2b6      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800443e:	d106      	bne.n	800444e <HAL_RCC_OscConfig+0x24a>
 8004440:	4b16      	ldr	r3, [pc, #88]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a15      	ldr	r2, [pc, #84]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004446:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	e01d      	b.n	800448a <HAL_RCC_OscConfig+0x286>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004456:	d10c      	bne.n	8004472 <HAL_RCC_OscConfig+0x26e>
 8004458:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a0f      	ldr	r2, [pc, #60]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800445e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004462:	6013      	str	r3, [r2, #0]
 8004464:	4b0d      	ldr	r3, [pc, #52]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a0c      	ldr	r2, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x298>)
 800446a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446e:	6013      	str	r3, [r2, #0]
 8004470:	e00b      	b.n	800448a <HAL_RCC_OscConfig+0x286>
 8004472:	4b0a      	ldr	r3, [pc, #40]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a09      	ldr	r2, [pc, #36]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004478:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	4b07      	ldr	r3, [pc, #28]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4a06      	ldr	r2, [pc, #24]	; (800449c <HAL_RCC_OscConfig+0x298>)
 8004484:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004488:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01c      	beq.n	80044cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004492:	f7fe fb8f 	bl	8002bb4 <HAL_GetTick>
 8004496:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004498:	e011      	b.n	80044be <HAL_RCC_OscConfig+0x2ba>
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	08009f48 	.word	0x08009f48
 80044a4:	200000e4 	.word	0x200000e4
 80044a8:	20000144 	.word	0x20000144
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044ac:	f7fe fb82 	bl	8002bb4 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	2b64      	cmp	r3, #100	; 0x64
 80044b8:	d901      	bls.n	80044be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044ba:	2303      	movs	r3, #3
 80044bc:	e272      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044be:	4baf      	ldr	r3, [pc, #700]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d0f0      	beq.n	80044ac <HAL_RCC_OscConfig+0x2a8>
 80044ca:	e014      	b.n	80044f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044cc:	f7fe fb72 	bl	8002bb4 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044d2:	e008      	b.n	80044e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d4:	f7fe fb6e 	bl	8002bb4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e25e      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044e6:	4ba5      	ldr	r3, [pc, #660]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1f0      	bne.n	80044d4 <HAL_RCC_OscConfig+0x2d0>
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d060      	beq.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	2b04      	cmp	r3, #4
 8004506:	d005      	beq.n	8004514 <HAL_RCC_OscConfig+0x310>
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b0c      	cmp	r3, #12
 800450c:	d119      	bne.n	8004542 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d116      	bne.n	8004542 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004514:	4b99      	ldr	r3, [pc, #612]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_RCC_OscConfig+0x328>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e23b      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800452c:	4b93      	ldr	r3, [pc, #588]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	4990      	ldr	r1, [pc, #576]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800453c:	4313      	orrs	r3, r2
 800453e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004540:	e040      	b.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d023      	beq.n	8004592 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454a:	4b8c      	ldr	r3, [pc, #560]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a8b      	ldr	r2, [pc, #556]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004556:	f7fe fb2d 	bl	8002bb4 <HAL_GetTick>
 800455a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800455c:	e008      	b.n	8004570 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800455e:	f7fe fb29 	bl	8002bb4 <HAL_GetTick>
 8004562:	4602      	mov	r2, r0
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	1ad3      	subs	r3, r2, r3
 8004568:	2b02      	cmp	r3, #2
 800456a:	d901      	bls.n	8004570 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800456c:	2303      	movs	r3, #3
 800456e:	e219      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004570:	4b82      	ldr	r3, [pc, #520]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004578:	2b00      	cmp	r3, #0
 800457a:	d0f0      	beq.n	800455e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800457c:	4b7f      	ldr	r3, [pc, #508]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	061b      	lsls	r3, r3, #24
 800458a:	497c      	ldr	r1, [pc, #496]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800458c:	4313      	orrs	r3, r2
 800458e:	604b      	str	r3, [r1, #4]
 8004590:	e018      	b.n	80045c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004592:	4b7a      	ldr	r3, [pc, #488]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4a79      	ldr	r2, [pc, #484]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004598:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800459c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459e:	f7fe fb09 	bl	8002bb4 <HAL_GetTick>
 80045a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a4:	e008      	b.n	80045b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a6:	f7fe fb05 	bl	8002bb4 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	2b02      	cmp	r3, #2
 80045b2:	d901      	bls.n	80045b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e1f5      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045b8:	4b70      	ldr	r3, [pc, #448]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1f0      	bne.n	80045a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0308 	and.w	r3, r3, #8
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d03c      	beq.n	800464a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	695b      	ldr	r3, [r3, #20]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d01c      	beq.n	8004612 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045d8:	4b68      	ldr	r3, [pc, #416]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80045da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045de:	4a67      	ldr	r2, [pc, #412]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80045e0:	f043 0301 	orr.w	r3, r3, #1
 80045e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e8:	f7fe fae4 	bl	8002bb4 <HAL_GetTick>
 80045ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045ee:	e008      	b.n	8004602 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f0:	f7fe fae0 	bl	8002bb4 <HAL_GetTick>
 80045f4:	4602      	mov	r2, r0
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e1d0      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004602:	4b5e      	ldr	r3, [pc, #376]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ef      	beq.n	80045f0 <HAL_RCC_OscConfig+0x3ec>
 8004610:	e01b      	b.n	800464a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004612:	4b5a      	ldr	r3, [pc, #360]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004618:	4a58      	ldr	r2, [pc, #352]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800461a:	f023 0301 	bic.w	r3, r3, #1
 800461e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004622:	f7fe fac7 	bl	8002bb4 <HAL_GetTick>
 8004626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004628:	e008      	b.n	800463c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462a:	f7fe fac3 	bl	8002bb4 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	2b02      	cmp	r3, #2
 8004636:	d901      	bls.n	800463c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004638:	2303      	movs	r3, #3
 800463a:	e1b3      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800463c:	4b4f      	ldr	r3, [pc, #316]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800463e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1ef      	bne.n	800462a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	f000 80a6 	beq.w	80047a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004658:	2300      	movs	r3, #0
 800465a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800465c:	4b47      	ldr	r3, [pc, #284]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800465e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10d      	bne.n	8004684 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004668:	4b44      	ldr	r3, [pc, #272]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800466a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466c:	4a43      	ldr	r2, [pc, #268]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800466e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004672:	6593      	str	r3, [r2, #88]	; 0x58
 8004674:	4b41      	ldr	r3, [pc, #260]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800467c:	60bb      	str	r3, [r7, #8]
 800467e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004680:	2301      	movs	r3, #1
 8004682:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004684:	4b3e      	ldr	r3, [pc, #248]	; (8004780 <HAL_RCC_OscConfig+0x57c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468c:	2b00      	cmp	r3, #0
 800468e:	d118      	bne.n	80046c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004690:	4b3b      	ldr	r3, [pc, #236]	; (8004780 <HAL_RCC_OscConfig+0x57c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a3a      	ldr	r2, [pc, #232]	; (8004780 <HAL_RCC_OscConfig+0x57c>)
 8004696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800469c:	f7fe fa8a 	bl	8002bb4 <HAL_GetTick>
 80046a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a2:	e008      	b.n	80046b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a4:	f7fe fa86 	bl	8002bb4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	693b      	ldr	r3, [r7, #16]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e176      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046b6:	4b32      	ldr	r3, [pc, #200]	; (8004780 <HAL_RCC_OscConfig+0x57c>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d0f0      	beq.n	80046a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d108      	bne.n	80046dc <HAL_RCC_OscConfig+0x4d8>
 80046ca:	4b2c      	ldr	r3, [pc, #176]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80046cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d0:	4a2a      	ldr	r2, [pc, #168]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046da:	e024      	b.n	8004726 <HAL_RCC_OscConfig+0x522>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689b      	ldr	r3, [r3, #8]
 80046e0:	2b05      	cmp	r3, #5
 80046e2:	d110      	bne.n	8004706 <HAL_RCC_OscConfig+0x502>
 80046e4:	4b25      	ldr	r3, [pc, #148]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	4a24      	ldr	r2, [pc, #144]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80046ec:	f043 0304 	orr.w	r3, r3, #4
 80046f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046f4:	4b21      	ldr	r3, [pc, #132]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80046f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fa:	4a20      	ldr	r2, [pc, #128]	; (800477c <HAL_RCC_OscConfig+0x578>)
 80046fc:	f043 0301 	orr.w	r3, r3, #1
 8004700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004704:	e00f      	b.n	8004726 <HAL_RCC_OscConfig+0x522>
 8004706:	4b1d      	ldr	r3, [pc, #116]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	4a1b      	ldr	r2, [pc, #108]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800470e:	f023 0301 	bic.w	r3, r3, #1
 8004712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004716:	4b19      	ldr	r3, [pc, #100]	; (800477c <HAL_RCC_OscConfig+0x578>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	4a17      	ldr	r2, [pc, #92]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800471e:	f023 0304 	bic.w	r3, r3, #4
 8004722:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d016      	beq.n	800475c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800472e:	f7fe fa41 	bl	8002bb4 <HAL_GetTick>
 8004732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004734:	e00a      	b.n	800474c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004736:	f7fe fa3d 	bl	8002bb4 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	f241 3288 	movw	r2, #5000	; 0x1388
 8004744:	4293      	cmp	r3, r2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e12b      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800474c:	4b0b      	ldr	r3, [pc, #44]	; (800477c <HAL_RCC_OscConfig+0x578>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f003 0302 	and.w	r3, r3, #2
 8004756:	2b00      	cmp	r3, #0
 8004758:	d0ed      	beq.n	8004736 <HAL_RCC_OscConfig+0x532>
 800475a:	e01a      	b.n	8004792 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800475c:	f7fe fa2a 	bl	8002bb4 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004762:	e00f      	b.n	8004784 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004764:	f7fe fa26 	bl	8002bb4 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004772:	4293      	cmp	r3, r2
 8004774:	d906      	bls.n	8004784 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e114      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
 800477a:	bf00      	nop
 800477c:	40021000 	.word	0x40021000
 8004780:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004784:	4b89      	ldr	r3, [pc, #548]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d1e8      	bne.n	8004764 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004792:	7ffb      	ldrb	r3, [r7, #31]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d105      	bne.n	80047a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004798:	4b84      	ldr	r3, [pc, #528]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 800479a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479c:	4a83      	ldr	r2, [pc, #524]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 800479e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 80fa 	beq.w	80049a2 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	f040 80d0 	bne.w	8004958 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047b8:	4b7c      	ldr	r3, [pc, #496]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d130      	bne.n	800482e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	3b01      	subs	r3, #1
 80047d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047da:	429a      	cmp	r2, r3
 80047dc:	d127      	bne.n	800482e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d11f      	bne.n	800482e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047f4:	687a      	ldr	r2, [r7, #4]
 80047f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047f8:	2a07      	cmp	r2, #7
 80047fa:	bf14      	ite	ne
 80047fc:	2201      	movne	r2, #1
 80047fe:	2200      	moveq	r2, #0
 8004800:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004802:	4293      	cmp	r3, r2
 8004804:	d113      	bne.n	800482e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004810:	085b      	lsrs	r3, r3, #1
 8004812:	3b01      	subs	r3, #1
 8004814:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d109      	bne.n	800482e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004824:	085b      	lsrs	r3, r3, #1
 8004826:	3b01      	subs	r3, #1
 8004828:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800482a:	429a      	cmp	r2, r3
 800482c:	d06e      	beq.n	800490c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b0c      	cmp	r3, #12
 8004832:	d069      	beq.n	8004908 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004834:	4b5d      	ldr	r3, [pc, #372]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d105      	bne.n	800484c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004840:	4b5a      	ldr	r3, [pc, #360]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d001      	beq.n	8004850 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0a9      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004850:	4b56      	ldr	r3, [pc, #344]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a55      	ldr	r2, [pc, #340]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004856:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800485a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800485c:	f7fe f9aa 	bl	8002bb4 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fe f9a6 	bl	8002bb4 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e096      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004876:	4b4d      	ldr	r3, [pc, #308]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004882:	4b4a      	ldr	r3, [pc, #296]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004884:	68da      	ldr	r2, [r3, #12]
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_RCC_OscConfig+0x7ac>)
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004892:	3a01      	subs	r2, #1
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	4311      	orrs	r1, r2
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800489c:	0212      	lsls	r2, r2, #8
 800489e:	4311      	orrs	r1, r2
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048a4:	0852      	lsrs	r2, r2, #1
 80048a6:	3a01      	subs	r2, #1
 80048a8:	0552      	lsls	r2, r2, #21
 80048aa:	4311      	orrs	r1, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048b0:	0852      	lsrs	r2, r2, #1
 80048b2:	3a01      	subs	r2, #1
 80048b4:	0652      	lsls	r2, r2, #25
 80048b6:	4311      	orrs	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048bc:	0912      	lsrs	r2, r2, #4
 80048be:	0452      	lsls	r2, r2, #17
 80048c0:	430a      	orrs	r2, r1
 80048c2:	493a      	ldr	r1, [pc, #232]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 80048c4:	4313      	orrs	r3, r2
 80048c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048c8:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a37      	ldr	r2, [pc, #220]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 80048ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048d4:	4b35      	ldr	r3, [pc, #212]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	4a34      	ldr	r2, [pc, #208]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 80048da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048e0:	f7fe f968 	bl	8002bb4 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fe f964 	bl	8002bb4 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e054      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80048fa:	4b2c      	ldr	r3, [pc, #176]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004906:	e04c      	b.n	80049a2 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e04b      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800490c:	4b27      	ldr	r3, [pc, #156]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d144      	bne.n	80049a2 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004918:	4b24      	ldr	r3, [pc, #144]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a23      	ldr	r2, [pc, #140]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 800491e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004922:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	4a20      	ldr	r2, [pc, #128]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 800492a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800492e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004930:	f7fe f940 	bl	8002bb4 <HAL_GetTick>
 8004934:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004936:	e008      	b.n	800494a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004938:	f7fe f93c 	bl	8002bb4 <HAL_GetTick>
 800493c:	4602      	mov	r2, r0
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	2b02      	cmp	r3, #2
 8004944:	d901      	bls.n	800494a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004946:	2303      	movs	r3, #3
 8004948:	e02c      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494a:	4b18      	ldr	r3, [pc, #96]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004952:	2b00      	cmp	r3, #0
 8004954:	d0f0      	beq.n	8004938 <HAL_RCC_OscConfig+0x734>
 8004956:	e024      	b.n	80049a2 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b0c      	cmp	r3, #12
 800495c:	d01f      	beq.n	800499e <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b13      	ldr	r3, [pc, #76]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a12      	ldr	r2, [pc, #72]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004964:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7fe f923 	bl	8002bb4 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004972:	f7fe f91f 	bl	8002bb4 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e00f      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d1f0      	bne.n	8004972 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	4905      	ldr	r1, [pc, #20]	; (80049ac <HAL_RCC_OscConfig+0x7a8>)
 8004996:	4b07      	ldr	r3, [pc, #28]	; (80049b4 <HAL_RCC_OscConfig+0x7b0>)
 8004998:	4013      	ands	r3, r2
 800499a:	60cb      	str	r3, [r1, #12]
 800499c:	e001      	b.n	80049a2 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e000      	b.n	80049a4 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 80049a2:	2300      	movs	r3, #0
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3720      	adds	r7, #32
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40021000 	.word	0x40021000
 80049b0:	f99d808c 	.word	0xf99d808c
 80049b4:	feeefffc 	.word	0xfeeefffc

080049b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d101      	bne.n	80049cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e0e7      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049cc:	4b75      	ldr	r3, [pc, #468]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	683a      	ldr	r2, [r7, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d910      	bls.n	80049fc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049da:	4b72      	ldr	r3, [pc, #456]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f023 0207 	bic.w	r2, r3, #7
 80049e2:	4970      	ldr	r1, [pc, #448]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b6e      	ldr	r3, [pc, #440]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0307 	and.w	r3, r3, #7
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e0cf      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0302 	and.w	r3, r3, #2
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d010      	beq.n	8004a2a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689a      	ldr	r2, [r3, #8]
 8004a0c:	4b66      	ldr	r3, [pc, #408]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d908      	bls.n	8004a2a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a18:	4b63      	ldr	r3, [pc, #396]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	4960      	ldr	r1, [pc, #384]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0301 	and.w	r3, r3, #1
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d04c      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b03      	cmp	r3, #3
 8004a3c:	d107      	bne.n	8004a4e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a3e:	4b5a      	ldr	r3, [pc, #360]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d121      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e0a6      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d107      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a56:	4b54      	ldr	r3, [pc, #336]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d115      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e09a      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a6e:	4b4e      	ldr	r3, [pc, #312]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d109      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e08e      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a7e:	4b4a      	ldr	r3, [pc, #296]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e086      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a8e:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0203 	bic.w	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	4943      	ldr	r1, [pc, #268]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aa0:	f7fe f888 	bl	8002bb4 <HAL_GetTick>
 8004aa4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aa6:	e00a      	b.n	8004abe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa8:	f7fe f884 	bl	8002bb4 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d901      	bls.n	8004abe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004aba:	2303      	movs	r3, #3
 8004abc:	e06e      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004abe:	4b3a      	ldr	r3, [pc, #232]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f003 020c 	and.w	r2, r3, #12
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d1eb      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0302 	and.w	r3, r3, #2
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d010      	beq.n	8004afe <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689a      	ldr	r2, [r3, #8]
 8004ae0:	4b31      	ldr	r3, [pc, #196]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d208      	bcs.n	8004afe <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aec:	4b2e      	ldr	r3, [pc, #184]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	492b      	ldr	r1, [pc, #172]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004afa:	4313      	orrs	r3, r2
 8004afc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004afe:	4b29      	ldr	r3, [pc, #164]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0307 	and.w	r3, r3, #7
 8004b06:	683a      	ldr	r2, [r7, #0]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d210      	bcs.n	8004b2e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0c:	4b25      	ldr	r3, [pc, #148]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f023 0207 	bic.w	r2, r3, #7
 8004b14:	4923      	ldr	r1, [pc, #140]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1c:	4b21      	ldr	r3, [pc, #132]	; (8004ba4 <HAL_RCC_ClockConfig+0x1ec>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e036      	b.n	8004b9c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d008      	beq.n	8004b4c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3a:	4b1b      	ldr	r3, [pc, #108]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	4918      	ldr	r1, [pc, #96]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f003 0308 	and.w	r3, r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d009      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b58:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	00db      	lsls	r3, r3, #3
 8004b66:	4910      	ldr	r1, [pc, #64]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b6c:	f000 f824 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8004b70:	4602      	mov	r2, r0
 8004b72:	4b0d      	ldr	r3, [pc, #52]	; (8004ba8 <HAL_RCC_ClockConfig+0x1f0>)
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	091b      	lsrs	r3, r3, #4
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	490b      	ldr	r1, [pc, #44]	; (8004bac <HAL_RCC_ClockConfig+0x1f4>)
 8004b7e:	5ccb      	ldrb	r3, [r1, r3]
 8004b80:	f003 031f 	and.w	r3, r3, #31
 8004b84:	fa22 f303 	lsr.w	r3, r2, r3
 8004b88:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x1f8>)
 8004b8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b8c:	4b09      	ldr	r3, [pc, #36]	; (8004bb4 <HAL_RCC_ClockConfig+0x1fc>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7fd ffbf 	bl	8002b14 <HAL_InitTick>
 8004b96:	4603      	mov	r3, r0
 8004b98:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b9a:	7afb      	ldrb	r3, [r7, #11]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40022000 	.word	0x40022000
 8004ba8:	40021000 	.word	0x40021000
 8004bac:	08009f48 	.word	0x08009f48
 8004bb0:	200000e4 	.word	0x200000e4
 8004bb4:	20000144 	.word	0x20000144

08004bb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b089      	sub	sp, #36	; 0x24
 8004bbc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61fb      	str	r3, [r7, #28]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc6:	4b3e      	ldr	r3, [pc, #248]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f003 030c 	and.w	r3, r3, #12
 8004bce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bd0:	4b3b      	ldr	r3, [pc, #236]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	f003 0303 	and.w	r3, r3, #3
 8004bd8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_RCC_GetSysClockFreq+0x34>
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d121      	bne.n	8004c2a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d11e      	bne.n	8004c2a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004bec:	4b34      	ldr	r3, [pc, #208]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d107      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bf8:	4b31      	ldr	r3, [pc, #196]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004bfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfe:	0a1b      	lsrs	r3, r3, #8
 8004c00:	f003 030f 	and.w	r3, r3, #15
 8004c04:	61fb      	str	r3, [r7, #28]
 8004c06:	e005      	b.n	8004c14 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c08:	4b2d      	ldr	r3, [pc, #180]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	091b      	lsrs	r3, r3, #4
 8004c0e:	f003 030f 	and.w	r3, r3, #15
 8004c12:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c14:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d10d      	bne.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c28:	e00a      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d102      	bne.n	8004c36 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c30:	4b25      	ldr	r3, [pc, #148]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c32:	61bb      	str	r3, [r7, #24]
 8004c34:	e004      	b.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	2b08      	cmp	r3, #8
 8004c3a:	d101      	bne.n	8004c40 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c3c:	4b23      	ldr	r3, [pc, #140]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8004c3e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	2b0c      	cmp	r3, #12
 8004c44:	d134      	bne.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c46:	4b1e      	ldr	r3, [pc, #120]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0303 	and.w	r3, r3, #3
 8004c4e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0xa6>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b03      	cmp	r3, #3
 8004c5a:	d003      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0xac>
 8004c5c:	e005      	b.n	8004c6a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c5e:	4b1a      	ldr	r3, [pc, #104]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c60:	617b      	str	r3, [r7, #20]
      break;
 8004c62:	e005      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c64:	4b19      	ldr	r3, [pc, #100]	; (8004ccc <HAL_RCC_GetSysClockFreq+0x114>)
 8004c66:	617b      	str	r3, [r7, #20]
      break;
 8004c68:	e002      	b.n	8004c70 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	617b      	str	r3, [r7, #20]
      break;
 8004c6e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c70:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	f003 0307 	and.w	r3, r3, #7
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c7e:	4b10      	ldr	r3, [pc, #64]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	fb02 f203 	mul.w	r2, r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c96:	4b0a      	ldr	r3, [pc, #40]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	0e5b      	lsrs	r3, r3, #25
 8004c9c:	f003 0303 	and.w	r3, r3, #3
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	005b      	lsls	r3, r3, #1
 8004ca4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3724      	adds	r7, #36	; 0x24
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbc:	4770      	bx	lr
 8004cbe:	bf00      	nop
 8004cc0:	40021000 	.word	0x40021000
 8004cc4:	08009f60 	.word	0x08009f60
 8004cc8:	00f42400 	.word	0x00f42400
 8004ccc:	007a1200 	.word	0x007a1200

08004cd0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b03      	ldr	r3, [pc, #12]	; (8004ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
 8004ce2:	bf00      	nop
 8004ce4:	200000e4 	.word	0x200000e4

08004ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004cec:	f7ff fff0 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cf0:	4602      	mov	r2, r0
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	f003 0307 	and.w	r3, r3, #7
 8004cfc:	4904      	ldr	r1, [pc, #16]	; (8004d10 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cfe:	5ccb      	ldrb	r3, [r1, r3]
 8004d00:	f003 031f 	and.w	r3, r3, #31
 8004d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	bd80      	pop	{r7, pc}
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	08009f58 	.word	0x08009f58

08004d14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d18:	f7ff ffda 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b06      	ldr	r3, [pc, #24]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0adb      	lsrs	r3, r3, #11
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4904      	ldr	r1, [pc, #16]	; (8004d3c <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	f003 031f 	and.w	r3, r3, #31
 8004d30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	bd80      	pop	{r7, pc}
 8004d38:	40021000 	.word	0x40021000
 8004d3c:	08009f58 	.word	0x08009f58

08004d40 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b086      	sub	sp, #24
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d48:	2300      	movs	r3, #0
 8004d4a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d4c:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d58:	f7ff f9f0 	bl	800413c <HAL_PWREx_GetVoltageRange>
 8004d5c:	6178      	str	r0, [r7, #20]
 8004d5e:	e014      	b.n	8004d8a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d64:	4a24      	ldr	r2, [pc, #144]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d6c:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d74:	60fb      	str	r3, [r7, #12]
 8004d76:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d78:	f7ff f9e0 	bl	800413c <HAL_PWREx_GetVoltageRange>
 8004d7c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d7e:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d82:	4a1d      	ldr	r2, [pc, #116]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d90:	d10b      	bne.n	8004daa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b80      	cmp	r3, #128	; 0x80
 8004d96:	d919      	bls.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2ba0      	cmp	r3, #160	; 0xa0
 8004d9c:	d902      	bls.n	8004da4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d9e:	2302      	movs	r3, #2
 8004da0:	613b      	str	r3, [r7, #16]
 8004da2:	e013      	b.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004da4:	2301      	movs	r3, #1
 8004da6:	613b      	str	r3, [r7, #16]
 8004da8:	e010      	b.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b80      	cmp	r3, #128	; 0x80
 8004dae:	d902      	bls.n	8004db6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004db0:	2303      	movs	r3, #3
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	e00a      	b.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2b80      	cmp	r3, #128	; 0x80
 8004dba:	d102      	bne.n	8004dc2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	613b      	str	r3, [r7, #16]
 8004dc0:	e004      	b.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b70      	cmp	r3, #112	; 0x70
 8004dc6:	d101      	bne.n	8004dcc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dc8:	2301      	movs	r3, #1
 8004dca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f023 0207 	bic.w	r2, r3, #7
 8004dd4:	4909      	ldr	r1, [pc, #36]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ddc:	4b07      	ldr	r3, [pc, #28]	; (8004dfc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0307 	and.w	r3, r3, #7
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d001      	beq.n	8004dee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e000      	b.n	8004df0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3718      	adds	r7, #24
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}
 8004df8:	40021000 	.word	0x40021000
 8004dfc:	40022000 	.word	0x40022000

08004e00 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b086      	sub	sp, #24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d041      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e20:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e24:	d02a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e26:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e2a:	d824      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e30:	d008      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e32:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e36:	d81e      	bhi.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d00a      	beq.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e40:	d010      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e42:	e018      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e44:	4b86      	ldr	r3, [pc, #536]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	4a85      	ldr	r2, [pc, #532]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e50:	e015      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3304      	adds	r3, #4
 8004e56:	2100      	movs	r1, #0
 8004e58:	4618      	mov	r0, r3
 8004e5a:	f000 fabb 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e62:	e00c      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	3320      	adds	r3, #32
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f000 fba6 	bl	80055bc <RCCEx_PLLSAI2_Config>
 8004e70:	4603      	mov	r3, r0
 8004e72:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e74:	e003      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	74fb      	strb	r3, [r7, #19]
      break;
 8004e7a:	e000      	b.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e7e:	7cfb      	ldrb	r3, [r7, #19]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10b      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e84:	4b76      	ldr	r3, [pc, #472]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e92:	4973      	ldr	r1, [pc, #460]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e9a:	e001      	b.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	7cfb      	ldrb	r3, [r7, #19]
 8004e9e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d041      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eb0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eb4:	d02a      	beq.n	8004f0c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004eb6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eba:	d824      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ebc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ec0:	d008      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ec2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ec6:	d81e      	bhi.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ed0:	d010      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ed2:	e018      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ed4:	4b62      	ldr	r3, [pc, #392]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4a61      	ldr	r2, [pc, #388]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ede:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ee0:	e015      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	4618      	mov	r0, r3
 8004eea:	f000 fa73 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004ef2:	e00c      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	3320      	adds	r3, #32
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 fb5e 	bl	80055bc <RCCEx_PLLSAI2_Config>
 8004f00:	4603      	mov	r3, r0
 8004f02:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f04:	e003      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	74fb      	strb	r3, [r7, #19]
      break;
 8004f0a:	e000      	b.n	8004f0e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0e:	7cfb      	ldrb	r3, [r7, #19]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d10b      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f14:	4b52      	ldr	r3, [pc, #328]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f22:	494f      	ldr	r1, [pc, #316]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f2a:	e001      	b.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f2c:	7cfb      	ldrb	r3, [r7, #19]
 8004f2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	f000 80a0 	beq.w	800507e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f42:	4b47      	ldr	r3, [pc, #284]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d101      	bne.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e000      	b.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f52:	2300      	movs	r3, #0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d00d      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f58:	4b41      	ldr	r3, [pc, #260]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5c:	4a40      	ldr	r2, [pc, #256]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f62:	6593      	str	r3, [r2, #88]	; 0x58
 8004f64:	4b3e      	ldr	r3, [pc, #248]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f70:	2301      	movs	r3, #1
 8004f72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f74:	4b3b      	ldr	r3, [pc, #236]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a3a      	ldr	r2, [pc, #232]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f80:	f7fd fe18 	bl	8002bb4 <HAL_GetTick>
 8004f84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f86:	e009      	b.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f88:	f7fd fe14 	bl	8002bb4 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d902      	bls.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	74fb      	strb	r3, [r7, #19]
        break;
 8004f9a:	e005      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f9c:	4b31      	ldr	r3, [pc, #196]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d0ef      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fa8:	7cfb      	ldrb	r3, [r7, #19]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d15c      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fae:	4b2c      	ldr	r3, [pc, #176]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d01f      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc6:	697a      	ldr	r2, [r7, #20]
 8004fc8:	429a      	cmp	r2, r3
 8004fca:	d019      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fcc:	4b24      	ldr	r3, [pc, #144]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fd8:	4b21      	ldr	r3, [pc, #132]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fde:	4a20      	ldr	r2, [pc, #128]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe8:	4b1d      	ldr	r3, [pc, #116]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fee:	4a1c      	ldr	r2, [pc, #112]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ff8:	4a19      	ldr	r2, [pc, #100]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d016      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800500a:	f7fd fdd3 	bl	8002bb4 <HAL_GetTick>
 800500e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005010:	e00b      	b.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fd fdcf 	bl	8002bb4 <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d902      	bls.n	800502a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	74fb      	strb	r3, [r7, #19]
            break;
 8005028:	e006      	b.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800502a:	4b0d      	ldr	r3, [pc, #52]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d0ec      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005038:	7cfb      	ldrb	r3, [r7, #19]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10c      	bne.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800503e:	4b08      	ldr	r3, [pc, #32]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504e:	4904      	ldr	r1, [pc, #16]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005056:	e009      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005058:	7cfb      	ldrb	r3, [r7, #19]
 800505a:	74bb      	strb	r3, [r7, #18]
 800505c:	e006      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800505e:	bf00      	nop
 8005060:	40021000 	.word	0x40021000
 8005064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005068:	7cfb      	ldrb	r3, [r7, #19]
 800506a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800506c:	7c7b      	ldrb	r3, [r7, #17]
 800506e:	2b01      	cmp	r3, #1
 8005070:	d105      	bne.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005072:	4b9e      	ldr	r3, [pc, #632]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005076:	4a9d      	ldr	r2, [pc, #628]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005078:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800507c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800508a:	4b98      	ldr	r3, [pc, #608]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005090:	f023 0203 	bic.w	r2, r3, #3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	4994      	ldr	r1, [pc, #592]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0302 	and.w	r3, r3, #2
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050ac:	4b8f      	ldr	r3, [pc, #572]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 020c 	bic.w	r2, r3, #12
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	498c      	ldr	r1, [pc, #560]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0304 	and.w	r3, r3, #4
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00a      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ce:	4b87      	ldr	r3, [pc, #540]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050dc:	4983      	ldr	r1, [pc, #524]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0308 	and.w	r3, r3, #8
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00a      	beq.n	8005106 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050f0:	4b7e      	ldr	r3, [pc, #504]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fe:	497b      	ldr	r1, [pc, #492]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005100:	4313      	orrs	r3, r2
 8005102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0310 	and.w	r3, r3, #16
 800510e:	2b00      	cmp	r3, #0
 8005110:	d00a      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005112:	4b76      	ldr	r3, [pc, #472]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005118:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005120:	4972      	ldr	r1, [pc, #456]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005122:	4313      	orrs	r3, r2
 8005124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0320 	and.w	r3, r3, #32
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005134:	4b6d      	ldr	r3, [pc, #436]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005142:	496a      	ldr	r1, [pc, #424]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00a      	beq.n	800516c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005156:	4b65      	ldr	r3, [pc, #404]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005164:	4961      	ldr	r1, [pc, #388]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005166:	4313      	orrs	r3, r2
 8005168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005174:	2b00      	cmp	r3, #0
 8005176:	d00a      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005178:	4b5c      	ldr	r3, [pc, #368]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800517a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005186:	4959      	ldr	r1, [pc, #356]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005188:	4313      	orrs	r3, r2
 800518a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00a      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800519a:	4b54      	ldr	r3, [pc, #336]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a8:	4950      	ldr	r1, [pc, #320]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d00a      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051bc:	4b4b      	ldr	r3, [pc, #300]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ca:	4948      	ldr	r1, [pc, #288]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051cc:	4313      	orrs	r3, r2
 80051ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00a      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051de:	4b43      	ldr	r3, [pc, #268]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051ec:	493f      	ldr	r1, [pc, #252]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ee:	4313      	orrs	r3, r2
 80051f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d028      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005200:	4b3a      	ldr	r3, [pc, #232]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005206:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520e:	4937      	ldr	r1, [pc, #220]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005210:	4313      	orrs	r3, r2
 8005212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521e:	d106      	bne.n	800522e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005220:	4b32      	ldr	r3, [pc, #200]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	4a31      	ldr	r2, [pc, #196]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005226:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800522a:	60d3      	str	r3, [r2, #12]
 800522c:	e011      	b.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005232:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005236:	d10c      	bne.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3304      	adds	r3, #4
 800523c:	2101      	movs	r1, #1
 800523e:	4618      	mov	r0, r3
 8005240:	f000 f8c8 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8005244:	4603      	mov	r3, r0
 8005246:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005248:	7cfb      	ldrb	r3, [r7, #19]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800524e:	7cfb      	ldrb	r3, [r7, #19]
 8005250:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d028      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800525e:	4b23      	ldr	r3, [pc, #140]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005264:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800526c:	491f      	ldr	r1, [pc, #124]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526e:	4313      	orrs	r3, r2
 8005270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005278:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800527c:	d106      	bne.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527e:	4b1b      	ldr	r3, [pc, #108]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4a1a      	ldr	r2, [pc, #104]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005288:	60d3      	str	r3, [r2, #12]
 800528a:	e011      	b.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005290:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005294:	d10c      	bne.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3304      	adds	r3, #4
 800529a:	2101      	movs	r1, #1
 800529c:	4618      	mov	r0, r3
 800529e:	f000 f899 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 80052a2:	4603      	mov	r3, r0
 80052a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a6:	7cfb      	ldrb	r3, [r7, #19]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052ac:	7cfb      	ldrb	r3, [r7, #19]
 80052ae:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d02b      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052bc:	4b0b      	ldr	r3, [pc, #44]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	4908      	ldr	r1, [pc, #32]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052cc:	4313      	orrs	r3, r2
 80052ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052da:	d109      	bne.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	4a02      	ldr	r2, [pc, #8]	; (80052ec <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e6:	60d3      	str	r3, [r2, #12]
 80052e8:	e014      	b.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80052ea:	bf00      	nop
 80052ec:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f8:	d10c      	bne.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	3304      	adds	r3, #4
 80052fe:	2101      	movs	r1, #1
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f867 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 8005306:	4603      	mov	r3, r0
 8005308:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800530a:	7cfb      	ldrb	r3, [r7, #19]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d001      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005310:	7cfb      	ldrb	r3, [r7, #19]
 8005312:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d02f      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005320:	4b2b      	ldr	r3, [pc, #172]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005326:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532e:	4928      	ldr	r1, [pc, #160]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800533a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800533e:	d10d      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	3304      	adds	r3, #4
 8005344:	2102      	movs	r1, #2
 8005346:	4618      	mov	r0, r3
 8005348:	f000 f844 	bl	80053d4 <RCCEx_PLLSAI1_Config>
 800534c:	4603      	mov	r3, r0
 800534e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d014      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005356:	7cfb      	ldrb	r3, [r7, #19]
 8005358:	74bb      	strb	r3, [r7, #18]
 800535a:	e011      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3320      	adds	r3, #32
 800536a:	2102      	movs	r1, #2
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f925 	bl	80055bc <RCCEx_PLLSAI2_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800538c:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539a:	490d      	ldr	r1, [pc, #52]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00b      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ae:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053be:	4904      	ldr	r1, [pc, #16]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053c6:	7cbb      	ldrb	r3, [r7, #18]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3718      	adds	r7, #24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40021000 	.word	0x40021000

080053d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
 80053dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053de:	2300      	movs	r3, #0
 80053e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053e2:	4b75      	ldr	r3, [pc, #468]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	f003 0303 	and.w	r3, r3, #3
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d018      	beq.n	8005420 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80053ee:	4b72      	ldr	r3, [pc, #456]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	f003 0203 	and.w	r2, r3, #3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	429a      	cmp	r2, r3
 80053fc:	d10d      	bne.n	800541a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
       ||
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005406:	4b6c      	ldr	r3, [pc, #432]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	091b      	lsrs	r3, r3, #4
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
       ||
 8005416:	429a      	cmp	r2, r3
 8005418:	d047      	beq.n	80054aa <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	73fb      	strb	r3, [r7, #15]
 800541e:	e044      	b.n	80054aa <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2b03      	cmp	r3, #3
 8005426:	d018      	beq.n	800545a <RCCEx_PLLSAI1_Config+0x86>
 8005428:	2b03      	cmp	r3, #3
 800542a:	d825      	bhi.n	8005478 <RCCEx_PLLSAI1_Config+0xa4>
 800542c:	2b01      	cmp	r3, #1
 800542e:	d002      	beq.n	8005436 <RCCEx_PLLSAI1_Config+0x62>
 8005430:	2b02      	cmp	r3, #2
 8005432:	d009      	beq.n	8005448 <RCCEx_PLLSAI1_Config+0x74>
 8005434:	e020      	b.n	8005478 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005436:	4b60      	ldr	r3, [pc, #384]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d11d      	bne.n	800547e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005446:	e01a      	b.n	800547e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005448:	4b5b      	ldr	r3, [pc, #364]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005450:	2b00      	cmp	r3, #0
 8005452:	d116      	bne.n	8005482 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005454:	2301      	movs	r3, #1
 8005456:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005458:	e013      	b.n	8005482 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800545a:	4b57      	ldr	r3, [pc, #348]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10f      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005466:	4b54      	ldr	r3, [pc, #336]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d109      	bne.n	8005486 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005476:	e006      	b.n	8005486 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005478:	2301      	movs	r3, #1
 800547a:	73fb      	strb	r3, [r7, #15]
      break;
 800547c:	e004      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800547e:	bf00      	nop
 8005480:	e002      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005482:	bf00      	nop
 8005484:	e000      	b.n	8005488 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005486:	bf00      	nop
    }

    if(status == HAL_OK)
 8005488:	7bfb      	ldrb	r3, [r7, #15]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d10d      	bne.n	80054aa <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800548e:	4b4a      	ldr	r3, [pc, #296]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6819      	ldr	r1, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	3b01      	subs	r3, #1
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	430b      	orrs	r3, r1
 80054a4:	4944      	ldr	r1, [pc, #272]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054aa:	7bfb      	ldrb	r3, [r7, #15]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d17d      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054b0:	4b41      	ldr	r3, [pc, #260]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a40      	ldr	r2, [pc, #256]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054bc:	f7fd fb7a 	bl	8002bb4 <HAL_GetTick>
 80054c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054c2:	e009      	b.n	80054d8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054c4:	f7fd fb76 	bl	8002bb4 <HAL_GetTick>
 80054c8:	4602      	mov	r2, r0
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	1ad3      	subs	r3, r2, r3
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d902      	bls.n	80054d8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	73fb      	strb	r3, [r7, #15]
        break;
 80054d6:	e005      	b.n	80054e4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054d8:	4b37      	ldr	r3, [pc, #220]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1ef      	bne.n	80054c4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80054e4:	7bfb      	ldrb	r3, [r7, #15]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d160      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80054f0:	4b31      	ldr	r3, [pc, #196]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80054f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fc:	687a      	ldr	r2, [r7, #4]
 80054fe:	6892      	ldr	r2, [r2, #8]
 8005500:	0211      	lsls	r1, r2, #8
 8005502:	687a      	ldr	r2, [r7, #4]
 8005504:	68d2      	ldr	r2, [r2, #12]
 8005506:	0912      	lsrs	r2, r2, #4
 8005508:	0452      	lsls	r2, r2, #17
 800550a:	430a      	orrs	r2, r1
 800550c:	492a      	ldr	r1, [pc, #168]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550e:	4313      	orrs	r3, r2
 8005510:	610b      	str	r3, [r1, #16]
 8005512:	e027      	b.n	8005564 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d112      	bne.n	8005540 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800551a:	4b27      	ldr	r3, [pc, #156]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005522:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	6892      	ldr	r2, [r2, #8]
 800552a:	0211      	lsls	r1, r2, #8
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	6912      	ldr	r2, [r2, #16]
 8005530:	0852      	lsrs	r2, r2, #1
 8005532:	3a01      	subs	r2, #1
 8005534:	0552      	lsls	r2, r2, #21
 8005536:	430a      	orrs	r2, r1
 8005538:	491f      	ldr	r1, [pc, #124]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800553a:	4313      	orrs	r3, r2
 800553c:	610b      	str	r3, [r1, #16]
 800553e:	e011      	b.n	8005564 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005540:	4b1d      	ldr	r3, [pc, #116]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005548:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	6892      	ldr	r2, [r2, #8]
 8005550:	0211      	lsls	r1, r2, #8
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	6952      	ldr	r2, [r2, #20]
 8005556:	0852      	lsrs	r2, r2, #1
 8005558:	3a01      	subs	r2, #1
 800555a:	0652      	lsls	r2, r2, #25
 800555c:	430a      	orrs	r2, r1
 800555e:	4916      	ldr	r1, [pc, #88]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005560:	4313      	orrs	r3, r2
 8005562:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005564:	4b14      	ldr	r3, [pc, #80]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a13      	ldr	r2, [pc, #76]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800556e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005570:	f7fd fb20 	bl	8002bb4 <HAL_GetTick>
 8005574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005576:	e009      	b.n	800558c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005578:	f7fd fb1c 	bl	8002bb4 <HAL_GetTick>
 800557c:	4602      	mov	r2, r0
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	2b02      	cmp	r3, #2
 8005584:	d902      	bls.n	800558c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	73fb      	strb	r3, [r7, #15]
          break;
 800558a:	e005      	b.n	8005598 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800558c:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d0ef      	beq.n	8005578 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005598:	7bfb      	ldrb	r3, [r7, #15]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d106      	bne.n	80055ac <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	691a      	ldr	r2, [r3, #16]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	699b      	ldr	r3, [r3, #24]
 80055a6:	4904      	ldr	r1, [pc, #16]	; (80055b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}
 80055b6:	bf00      	nop
 80055b8:	40021000 	.word	0x40021000

080055bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055ca:	4b6a      	ldr	r3, [pc, #424]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d018      	beq.n	8005608 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055d6:	4b67      	ldr	r3, [pc, #412]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	f003 0203 	and.w	r2, r3, #3
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d10d      	bne.n	8005602 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
       ||
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80055ee:	4b61      	ldr	r3, [pc, #388]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	091b      	lsrs	r3, r3, #4
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	1c5a      	adds	r2, r3, #1
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	685b      	ldr	r3, [r3, #4]
       ||
 80055fe:	429a      	cmp	r2, r3
 8005600:	d047      	beq.n	8005692 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	73fb      	strb	r3, [r7, #15]
 8005606:	e044      	b.n	8005692 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b03      	cmp	r3, #3
 800560e:	d018      	beq.n	8005642 <RCCEx_PLLSAI2_Config+0x86>
 8005610:	2b03      	cmp	r3, #3
 8005612:	d825      	bhi.n	8005660 <RCCEx_PLLSAI2_Config+0xa4>
 8005614:	2b01      	cmp	r3, #1
 8005616:	d002      	beq.n	800561e <RCCEx_PLLSAI2_Config+0x62>
 8005618:	2b02      	cmp	r3, #2
 800561a:	d009      	beq.n	8005630 <RCCEx_PLLSAI2_Config+0x74>
 800561c:	e020      	b.n	8005660 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800561e:	4b55      	ldr	r3, [pc, #340]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11d      	bne.n	8005666 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800562e:	e01a      	b.n	8005666 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005630:	4b50      	ldr	r3, [pc, #320]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005638:	2b00      	cmp	r3, #0
 800563a:	d116      	bne.n	800566a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800563c:	2301      	movs	r3, #1
 800563e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005640:	e013      	b.n	800566a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005642:	4b4c      	ldr	r3, [pc, #304]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d10f      	bne.n	800566e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800564e:	4b49      	ldr	r3, [pc, #292]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d109      	bne.n	800566e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800565e:	e006      	b.n	800566e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
      break;
 8005664:	e004      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005666:	bf00      	nop
 8005668:	e002      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800566a:	bf00      	nop
 800566c:	e000      	b.n	8005670 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800566e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005670:	7bfb      	ldrb	r3, [r7, #15]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d10d      	bne.n	8005692 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005676:	4b3f      	ldr	r3, [pc, #252]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	430b      	orrs	r3, r1
 800568c:	4939      	ldr	r1, [pc, #228]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568e:	4313      	orrs	r3, r2
 8005690:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005692:	7bfb      	ldrb	r3, [r7, #15]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d167      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005698:	4b36      	ldr	r3, [pc, #216]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a35      	ldr	r2, [pc, #212]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800569e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056a4:	f7fd fa86 	bl	8002bb4 <HAL_GetTick>
 80056a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056aa:	e009      	b.n	80056c0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056ac:	f7fd fa82 	bl	8002bb4 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d902      	bls.n	80056c0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	73fb      	strb	r3, [r7, #15]
        break;
 80056be:	e005      	b.n	80056cc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056c0:	4b2c      	ldr	r3, [pc, #176]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d1ef      	bne.n	80056ac <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056cc:	7bfb      	ldrb	r3, [r7, #15]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d14a      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d111      	bne.n	80056fc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056d8:	4b26      	ldr	r3, [pc, #152]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056da:	695b      	ldr	r3, [r3, #20]
 80056dc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	6892      	ldr	r2, [r2, #8]
 80056e8:	0211      	lsls	r1, r2, #8
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	68d2      	ldr	r2, [r2, #12]
 80056ee:	0912      	lsrs	r2, r2, #4
 80056f0:	0452      	lsls	r2, r2, #17
 80056f2:	430a      	orrs	r2, r1
 80056f4:	491f      	ldr	r1, [pc, #124]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f6:	4313      	orrs	r3, r2
 80056f8:	614b      	str	r3, [r1, #20]
 80056fa:	e011      	b.n	8005720 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056fc:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005704:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6892      	ldr	r2, [r2, #8]
 800570c:	0211      	lsls	r1, r2, #8
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6912      	ldr	r2, [r2, #16]
 8005712:	0852      	lsrs	r2, r2, #1
 8005714:	3a01      	subs	r2, #1
 8005716:	0652      	lsls	r2, r2, #25
 8005718:	430a      	orrs	r2, r1
 800571a:	4916      	ldr	r1, [pc, #88]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571c:	4313      	orrs	r3, r2
 800571e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005720:	4b14      	ldr	r3, [pc, #80]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a13      	ldr	r2, [pc, #76]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800572c:	f7fd fa42 	bl	8002bb4 <HAL_GetTick>
 8005730:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005732:	e009      	b.n	8005748 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005734:	f7fd fa3e 	bl	8002bb4 <HAL_GetTick>
 8005738:	4602      	mov	r2, r0
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	1ad3      	subs	r3, r2, r3
 800573e:	2b02      	cmp	r3, #2
 8005740:	d902      	bls.n	8005748 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	73fb      	strb	r3, [r7, #15]
          break;
 8005746:	e005      	b.n	8005754 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005748:	4b0a      	ldr	r3, [pc, #40]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005750:	2b00      	cmp	r3, #0
 8005752:	d0ef      	beq.n	8005734 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005754:	7bfb      	ldrb	r3, [r7, #15]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d106      	bne.n	8005768 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575c:	695a      	ldr	r2, [r3, #20]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	4904      	ldr	r1, [pc, #16]	; (8005774 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005764:	4313      	orrs	r3, r2
 8005766:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005768:	7bfb      	ldrb	r3, [r7, #15]
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40021000 	.word	0x40021000

08005778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e040      	b.n	800580c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800578e:	2b00      	cmp	r3, #0
 8005790:	d106      	bne.n	80057a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fc f9c2 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2224      	movs	r2, #36	; 0x24
 80057a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	681a      	ldr	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 0201 	bic.w	r2, r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057b6:	6878      	ldr	r0, [r7, #4]
 80057b8:	f000 fc86 	bl	80060c8 <UART_SetConfig>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d101      	bne.n	80057c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e022      	b.n	800580c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d002      	beq.n	80057d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 ff04 	bl	80065dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f042 0201 	orr.w	r2, r2, #1
 8005802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 ff8b 	bl	8006720 <UART_CheckIdleState>
 800580a:	4603      	mov	r3, r0
}
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08a      	sub	sp, #40	; 0x28
 8005818:	af02      	add	r7, sp, #8
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	603b      	str	r3, [r7, #0]
 8005820:	4613      	mov	r3, r2
 8005822:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005828:	2b20      	cmp	r3, #32
 800582a:	f040 8082 	bne.w	8005932 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d002      	beq.n	800583a <HAL_UART_Transmit+0x26>
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d101      	bne.n	800583e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800583a:	2301      	movs	r3, #1
 800583c:	e07a      	b.n	8005934 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_UART_Transmit+0x38>
 8005848:	2302      	movs	r3, #2
 800584a:	e073      	b.n	8005934 <HAL_UART_Transmit+0x120>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2200      	movs	r2, #0
 8005858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2221      	movs	r2, #33	; 0x21
 8005860:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005862:	f7fd f9a7 	bl	8002bb4 <HAL_GetTick>
 8005866:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	88fa      	ldrh	r2, [r7, #6]
 800586c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	88fa      	ldrh	r2, [r7, #6]
 8005874:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005880:	d108      	bne.n	8005894 <HAL_UART_Transmit+0x80>
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	691b      	ldr	r3, [r3, #16]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d104      	bne.n	8005894 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800588a:	2300      	movs	r3, #0
 800588c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	61bb      	str	r3, [r7, #24]
 8005892:	e003      	b.n	800589c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005898:	2300      	movs	r3, #0
 800589a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80058a4:	e02d      	b.n	8005902 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	9300      	str	r3, [sp, #0]
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	2200      	movs	r2, #0
 80058ae:	2180      	movs	r1, #128	; 0x80
 80058b0:	68f8      	ldr	r0, [r7, #12]
 80058b2:	f000 ff7e 	bl	80067b2 <UART_WaitOnFlagUntilTimeout>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d001      	beq.n	80058c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80058bc:	2303      	movs	r3, #3
 80058be:	e039      	b.n	8005934 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	881a      	ldrh	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058d2:	b292      	uxth	r2, r2
 80058d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058d6:	69bb      	ldr	r3, [r7, #24]
 80058d8:	3302      	adds	r3, #2
 80058da:	61bb      	str	r3, [r7, #24]
 80058dc:	e008      	b.n	80058f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	781a      	ldrb	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	b292      	uxth	r2, r2
 80058e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	3301      	adds	r3, #1
 80058ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	3b01      	subs	r3, #1
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005908:	b29b      	uxth	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1cb      	bne.n	80058a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	9300      	str	r3, [sp, #0]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	2140      	movs	r1, #64	; 0x40
 8005918:	68f8      	ldr	r0, [r7, #12]
 800591a:	f000 ff4a 	bl	80067b2 <UART_WaitOnFlagUntilTimeout>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e005      	b.n	8005934 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2220      	movs	r2, #32
 800592c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800592e:	2300      	movs	r3, #0
 8005930:	e000      	b.n	8005934 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005932:	2302      	movs	r3, #2
  }
}
 8005934:	4618      	mov	r0, r3
 8005936:	3720      	adds	r7, #32
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800593c:	b480      	push	{r7}
 800593e:	b08b      	sub	sp, #44	; 0x2c
 8005940:	af00      	add	r7, sp, #0
 8005942:	60f8      	str	r0, [r7, #12]
 8005944:	60b9      	str	r1, [r7, #8]
 8005946:	4613      	mov	r3, r2
 8005948:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800594e:	2b20      	cmp	r3, #32
 8005950:	d156      	bne.n	8005a00 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d002      	beq.n	800595e <HAL_UART_Transmit_IT+0x22>
 8005958:	88fb      	ldrh	r3, [r7, #6]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800595e:	2301      	movs	r3, #1
 8005960:	e04f      	b.n	8005a02 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_UART_Transmit_IT+0x34>
 800596c:	2302      	movs	r3, #2
 800596e:	e048      	b.n	8005a02 <HAL_UART_Transmit_IT+0xc6>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	88fa      	ldrh	r2, [r7, #6]
 8005982:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	88fa      	ldrh	r2, [r7, #6]
 800598a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2200      	movs	r2, #0
 8005998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2221      	movs	r2, #33	; 0x21
 80059a0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059aa:	d107      	bne.n	80059bc <HAL_UART_Transmit_IT+0x80>
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	691b      	ldr	r3, [r3, #16]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d103      	bne.n	80059bc <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	4a16      	ldr	r2, [pc, #88]	; (8005a10 <HAL_UART_Transmit_IT+0xd4>)
 80059b8:	669a      	str	r2, [r3, #104]	; 0x68
 80059ba:	e002      	b.n	80059c2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4a15      	ldr	r2, [pc, #84]	; (8005a14 <HAL_UART_Transmit_IT+0xd8>)
 80059c0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	613b      	str	r3, [r7, #16]
   return(result);
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059de:	627b      	str	r3, [r7, #36]	; 0x24
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	461a      	mov	r2, r3
 80059e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e8:	623b      	str	r3, [r7, #32]
 80059ea:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	69f9      	ldr	r1, [r7, #28]
 80059ee:	6a3a      	ldr	r2, [r7, #32]
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e6      	bne.n	80059ca <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	e000      	b.n	8005a02 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8005a00:	2302      	movs	r3, #2
  }
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	372c      	adds	r7, #44	; 0x2c
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	08006c7b 	.word	0x08006c7b
 8005a14:	08006bc3 	.word	0x08006bc3

08005a18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08a      	sub	sp, #40	; 0x28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	4613      	mov	r3, r2
 8005a24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	d142      	bne.n	8005ab4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_UART_Receive_IT+0x22>
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e03b      	b.n	8005ab6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Receive_IT+0x34>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e034      	b.n	8005ab6 <HAL_UART_Receive_IT+0x9e>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a18      	ldr	r2, [pc, #96]	; (8005ac0 <HAL_UART_Receive_IT+0xa8>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d01f      	beq.n	8005aa4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d018      	beq.n	8005aa4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	e853 3f00 	ldrex	r3, [r3]
 8005a7e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	623b      	str	r3, [r7, #32]
 8005a92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a94:	69f9      	ldr	r1, [r7, #28]
 8005a96:	6a3a      	ldr	r2, [r7, #32]
 8005a98:	e841 2300 	strex	r3, r2, [r1]
 8005a9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1e6      	bne.n	8005a72 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005aa4:	88fb      	ldrh	r3, [r7, #6]
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	68b9      	ldr	r1, [r7, #8]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	f000 ff46 	bl	800693c <UART_Start_Receive_IT>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	e000      	b.n	8005ab6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8005ab4:	2302      	movs	r3, #2
  }
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3728      	adds	r7, #40	; 0x28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40008000 	.word	0x40008000

08005ac4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b0ba      	sub	sp, #232	; 0xe8
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005aea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005aee:	f640 030f 	movw	r3, #2063	; 0x80f
 8005af2:	4013      	ands	r3, r2
 8005af4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005af8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d115      	bne.n	8005b2c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b04:	f003 0320 	and.w	r3, r3, #32
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00f      	beq.n	8005b2c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b10:	f003 0320 	and.w	r3, r3, #32
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d009      	beq.n	8005b2c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 82a6 	beq.w	800606e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
      }
      return;
 8005b2a:	e2a0      	b.n	800606e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005b2c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8117 	beq.w	8005d64 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b3a:	f003 0301 	and.w	r3, r3, #1
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005b42:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005b46:	4b85      	ldr	r3, [pc, #532]	; (8005d5c <HAL_UART_IRQHandler+0x298>)
 8005b48:	4013      	ands	r3, r2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 810a 	beq.w	8005d64 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d011      	beq.n	8005b80 <HAL_UART_IRQHandler+0xbc>
 8005b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d00b      	beq.n	8005b80 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b76:	f043 0201 	orr.w	r2, r3, #1
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d011      	beq.n	8005bb0 <HAL_UART_IRQHandler+0xec>
 8005b8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00b      	beq.n	8005bb0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	2202      	movs	r2, #2
 8005b9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ba6:	f043 0204 	orr.w	r2, r3, #4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bb4:	f003 0304 	and.w	r3, r3, #4
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d011      	beq.n	8005be0 <HAL_UART_IRQHandler+0x11c>
 8005bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00b      	beq.n	8005be0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2204      	movs	r2, #4
 8005bce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005bd6:	f043 0202 	orr.w	r2, r3, #2
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005be4:	f003 0308 	and.w	r3, r3, #8
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d017      	beq.n	8005c1c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf0:	f003 0320 	and.w	r3, r3, #32
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005bf8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bfc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	2208      	movs	r2, #8
 8005c0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c12:	f043 0208 	orr.w	r2, r3, #8
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d012      	beq.n	8005c4e <HAL_UART_IRQHandler+0x18a>
 8005c28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d00c      	beq.n	8005c4e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c44:	f043 0220 	orr.w	r2, r3, #32
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 820c 	beq.w	8006072 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c5e:	f003 0320 	and.w	r3, r3, #32
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00d      	beq.n	8005c82 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c6a:	f003 0320 	and.w	r3, r3, #32
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d007      	beq.n	8005c82 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d003      	beq.n	8005c82 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b40      	cmp	r3, #64	; 0x40
 8005c98:	d005      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005c9e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d04f      	beq.n	8005d46 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 ff12 	bl	8006ad0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb6:	2b40      	cmp	r3, #64	; 0x40
 8005cb8:	d141      	bne.n	8005d3e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	3308      	adds	r3, #8
 8005cc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005cd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	3308      	adds	r3, #8
 8005ce2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ce6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005cf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005cf6:	e841 2300 	strex	r3, r2, [r1]
 8005cfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005cfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d1d9      	bne.n	8005cba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d013      	beq.n	8005d36 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	4a13      	ldr	r2, [pc, #76]	; (8005d60 <HAL_UART_IRQHandler+0x29c>)
 8005d14:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7fd f8c9 	bl	8002eb2 <HAL_DMA_Abort_IT>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d017      	beq.n	8005d56 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005d30:	4610      	mov	r0, r2
 8005d32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d34:	e00f      	b.n	8005d56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 f9b0 	bl	800609c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	e00b      	b.n	8005d56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	f000 f9ac 	bl	800609c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d44:	e007      	b.n	8005d56 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f9a8 	bl	800609c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005d54:	e18d      	b.n	8006072 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d56:	bf00      	nop
    return;
 8005d58:	e18b      	b.n	8006072 <HAL_UART_IRQHandler+0x5ae>
 8005d5a:	bf00      	nop
 8005d5c:	04000120 	.word	0x04000120
 8005d60:	08006b97 	.word	0x08006b97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	f040 8146 	bne.w	8005ffa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 813f 	beq.w	8005ffa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005d7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	f000 8138 	beq.w	8005ffa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2210      	movs	r2, #16
 8005d90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	f040 80b4 	bne.w	8005f0a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005dae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	f000 815f 	beq.w	8006076 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005dbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	f080 8157 	bcs.w	8006076 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005dce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f040 8085 	bne.w	8005eee <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005df8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e1e:	e841 2300 	strex	r3, r2, [r1]
 8005e22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d1da      	bne.n	8005de4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3308      	adds	r3, #8
 8005e34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e40:	f023 0301 	bic.w	r3, r3, #1
 8005e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3308      	adds	r3, #8
 8005e4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005e52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005e56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005e5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005e5e:	e841 2300 	strex	r3, r2, [r1]
 8005e62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005e64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d1e1      	bne.n	8005e2e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	3308      	adds	r3, #8
 8005e70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005e7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	3308      	adds	r3, #8
 8005e8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005e90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005e94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005e9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e3      	bne.n	8005e6a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2220      	movs	r2, #32
 8005ea6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eb6:	e853 3f00 	ldrex	r3, [r3]
 8005eba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ebe:	f023 0310 	bic.w	r3, r3, #16
 8005ec2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	461a      	mov	r2, r3
 8005ecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ed0:	65bb      	str	r3, [r7, #88]	; 0x58
 8005ed2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ed4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ed6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ed8:	e841 2300 	strex	r3, r2, [r1]
 8005edc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1e4      	bne.n	8005eae <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fc ffa4 	bl	8002e36 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	4619      	mov	r1, r3
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 f8d4 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f08:	e0b5      	b.n	8006076 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f16:	b29b      	uxth	r3, r3
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 80a7 	beq.w	800607a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8005f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80a2 	beq.w	800607a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3e:	e853 3f00 	ldrex	r3, [r3]
 8005f42:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f4a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	461a      	mov	r2, r3
 8005f54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f60:	e841 2300 	strex	r3, r2, [r1]
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d1e4      	bne.n	8005f36 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3308      	adds	r3, #8
 8005f72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f76:	e853 3f00 	ldrex	r3, [r3]
 8005f7a:	623b      	str	r3, [r7, #32]
   return(result);
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	f023 0301 	bic.w	r3, r3, #1
 8005f82:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005f90:	633a      	str	r2, [r7, #48]	; 0x30
 8005f92:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f98:	e841 2300 	strex	r3, r2, [r1]
 8005f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d1e3      	bne.n	8005f6c <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2220      	movs	r2, #32
 8005fa8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	e853 3f00 	ldrex	r3, [r3]
 8005fc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	f023 0310 	bic.w	r3, r3, #16
 8005fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fd8:	61fb      	str	r3, [r7, #28]
 8005fda:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	69b9      	ldr	r1, [r7, #24]
 8005fde:	69fa      	ldr	r2, [r7, #28]
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e4      	bne.n	8005fb6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005fec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f85c 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ff8:	e03f      	b.n	800607a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ffa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00e      	beq.n	8006024 <HAL_UART_IRQHandler+0x560>
 8006006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800600a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800601a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f001 f816 	bl	800704e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006022:	e02d      	b.n	8006080 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006028:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800602c:	2b00      	cmp	r3, #0
 800602e:	d00e      	beq.n	800604e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006030:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006034:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006038:	2b00      	cmp	r3, #0
 800603a:	d008      	beq.n	800604e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006040:	2b00      	cmp	r3, #0
 8006042:	d01c      	beq.n	800607e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	4798      	blx	r3
    }
    return;
 800604c:	e017      	b.n	800607e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006056:	2b00      	cmp	r3, #0
 8006058:	d012      	beq.n	8006080 <HAL_UART_IRQHandler+0x5bc>
 800605a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00c      	beq.n	8006080 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fe67 	bl	8006d3a <UART_EndTransmit_IT>
    return;
 800606c:	e008      	b.n	8006080 <HAL_UART_IRQHandler+0x5bc>
      return;
 800606e:	bf00      	nop
 8006070:	e006      	b.n	8006080 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006072:	bf00      	nop
 8006074:	e004      	b.n	8006080 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006076:	bf00      	nop
 8006078:	e002      	b.n	8006080 <HAL_UART_IRQHandler+0x5bc>
      return;
 800607a:	bf00      	nop
 800607c:	e000      	b.n	8006080 <HAL_UART_IRQHandler+0x5bc>
    return;
 800607e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006080:	37e8      	adds	r7, #232	; 0xe8
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}
 8006086:	bf00      	nop

08006088 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006088:	b480      	push	{r7}
 800608a:	b083      	sub	sp, #12
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006090:	bf00      	nop
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800609c:	b480      	push	{r7}
 800609e:	b083      	sub	sp, #12
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060a4:	bf00      	nop
 80060a6:	370c      	adds	r7, #12
 80060a8:	46bd      	mov	sp, r7
 80060aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ae:	4770      	bx	lr

080060b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060b0:	b480      	push	{r7}
 80060b2:	b083      	sub	sp, #12
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	6078      	str	r0, [r7, #4]
 80060b8:	460b      	mov	r3, r1
 80060ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060bc:	bf00      	nop
 80060be:	370c      	adds	r7, #12
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c8:	b5b0      	push	{r4, r5, r7, lr}
 80060ca:	b088      	sub	sp, #32
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060d0:	2300      	movs	r3, #0
 80060d2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	689a      	ldr	r2, [r3, #8]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	431a      	orrs	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	431a      	orrs	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69db      	ldr	r3, [r3, #28]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4bad      	ldr	r3, [pc, #692]	; (80063a8 <UART_SetConfig+0x2e0>)
 80060f4:	4013      	ands	r3, r2
 80060f6:	687a      	ldr	r2, [r7, #4]
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	69f9      	ldr	r1, [r7, #28]
 80060fc:	430b      	orrs	r3, r1
 80060fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	68da      	ldr	r2, [r3, #12]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	430a      	orrs	r2, r1
 8006114:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4aa2      	ldr	r2, [pc, #648]	; (80063ac <UART_SetConfig+0x2e4>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d004      	beq.n	8006130 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	69fa      	ldr	r2, [r7, #28]
 800612c:	4313      	orrs	r3, r2
 800612e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	689b      	ldr	r3, [r3, #8]
 8006136:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	430a      	orrs	r2, r1
 8006142:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a99      	ldr	r2, [pc, #612]	; (80063b0 <UART_SetConfig+0x2e8>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d121      	bne.n	8006192 <UART_SetConfig+0xca>
 800614e:	4b99      	ldr	r3, [pc, #612]	; (80063b4 <UART_SetConfig+0x2ec>)
 8006150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006154:	f003 0303 	and.w	r3, r3, #3
 8006158:	2b03      	cmp	r3, #3
 800615a:	d817      	bhi.n	800618c <UART_SetConfig+0xc4>
 800615c:	a201      	add	r2, pc, #4	; (adr r2, 8006164 <UART_SetConfig+0x9c>)
 800615e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006162:	bf00      	nop
 8006164:	08006175 	.word	0x08006175
 8006168:	08006181 	.word	0x08006181
 800616c:	0800617b 	.word	0x0800617b
 8006170:	08006187 	.word	0x08006187
 8006174:	2301      	movs	r3, #1
 8006176:	76fb      	strb	r3, [r7, #27]
 8006178:	e0e7      	b.n	800634a <UART_SetConfig+0x282>
 800617a:	2302      	movs	r3, #2
 800617c:	76fb      	strb	r3, [r7, #27]
 800617e:	e0e4      	b.n	800634a <UART_SetConfig+0x282>
 8006180:	2304      	movs	r3, #4
 8006182:	76fb      	strb	r3, [r7, #27]
 8006184:	e0e1      	b.n	800634a <UART_SetConfig+0x282>
 8006186:	2308      	movs	r3, #8
 8006188:	76fb      	strb	r3, [r7, #27]
 800618a:	e0de      	b.n	800634a <UART_SetConfig+0x282>
 800618c:	2310      	movs	r3, #16
 800618e:	76fb      	strb	r3, [r7, #27]
 8006190:	e0db      	b.n	800634a <UART_SetConfig+0x282>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a88      	ldr	r2, [pc, #544]	; (80063b8 <UART_SetConfig+0x2f0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d132      	bne.n	8006202 <UART_SetConfig+0x13a>
 800619c:	4b85      	ldr	r3, [pc, #532]	; (80063b4 <UART_SetConfig+0x2ec>)
 800619e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b0c      	cmp	r3, #12
 80061a8:	d828      	bhi.n	80061fc <UART_SetConfig+0x134>
 80061aa:	a201      	add	r2, pc, #4	; (adr r2, 80061b0 <UART_SetConfig+0xe8>)
 80061ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b0:	080061e5 	.word	0x080061e5
 80061b4:	080061fd 	.word	0x080061fd
 80061b8:	080061fd 	.word	0x080061fd
 80061bc:	080061fd 	.word	0x080061fd
 80061c0:	080061f1 	.word	0x080061f1
 80061c4:	080061fd 	.word	0x080061fd
 80061c8:	080061fd 	.word	0x080061fd
 80061cc:	080061fd 	.word	0x080061fd
 80061d0:	080061eb 	.word	0x080061eb
 80061d4:	080061fd 	.word	0x080061fd
 80061d8:	080061fd 	.word	0x080061fd
 80061dc:	080061fd 	.word	0x080061fd
 80061e0:	080061f7 	.word	0x080061f7
 80061e4:	2300      	movs	r3, #0
 80061e6:	76fb      	strb	r3, [r7, #27]
 80061e8:	e0af      	b.n	800634a <UART_SetConfig+0x282>
 80061ea:	2302      	movs	r3, #2
 80061ec:	76fb      	strb	r3, [r7, #27]
 80061ee:	e0ac      	b.n	800634a <UART_SetConfig+0x282>
 80061f0:	2304      	movs	r3, #4
 80061f2:	76fb      	strb	r3, [r7, #27]
 80061f4:	e0a9      	b.n	800634a <UART_SetConfig+0x282>
 80061f6:	2308      	movs	r3, #8
 80061f8:	76fb      	strb	r3, [r7, #27]
 80061fa:	e0a6      	b.n	800634a <UART_SetConfig+0x282>
 80061fc:	2310      	movs	r3, #16
 80061fe:	76fb      	strb	r3, [r7, #27]
 8006200:	e0a3      	b.n	800634a <UART_SetConfig+0x282>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	4a6d      	ldr	r2, [pc, #436]	; (80063bc <UART_SetConfig+0x2f4>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d120      	bne.n	800624e <UART_SetConfig+0x186>
 800620c:	4b69      	ldr	r3, [pc, #420]	; (80063b4 <UART_SetConfig+0x2ec>)
 800620e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006212:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006216:	2b30      	cmp	r3, #48	; 0x30
 8006218:	d013      	beq.n	8006242 <UART_SetConfig+0x17a>
 800621a:	2b30      	cmp	r3, #48	; 0x30
 800621c:	d814      	bhi.n	8006248 <UART_SetConfig+0x180>
 800621e:	2b20      	cmp	r3, #32
 8006220:	d009      	beq.n	8006236 <UART_SetConfig+0x16e>
 8006222:	2b20      	cmp	r3, #32
 8006224:	d810      	bhi.n	8006248 <UART_SetConfig+0x180>
 8006226:	2b00      	cmp	r3, #0
 8006228:	d002      	beq.n	8006230 <UART_SetConfig+0x168>
 800622a:	2b10      	cmp	r3, #16
 800622c:	d006      	beq.n	800623c <UART_SetConfig+0x174>
 800622e:	e00b      	b.n	8006248 <UART_SetConfig+0x180>
 8006230:	2300      	movs	r3, #0
 8006232:	76fb      	strb	r3, [r7, #27]
 8006234:	e089      	b.n	800634a <UART_SetConfig+0x282>
 8006236:	2302      	movs	r3, #2
 8006238:	76fb      	strb	r3, [r7, #27]
 800623a:	e086      	b.n	800634a <UART_SetConfig+0x282>
 800623c:	2304      	movs	r3, #4
 800623e:	76fb      	strb	r3, [r7, #27]
 8006240:	e083      	b.n	800634a <UART_SetConfig+0x282>
 8006242:	2308      	movs	r3, #8
 8006244:	76fb      	strb	r3, [r7, #27]
 8006246:	e080      	b.n	800634a <UART_SetConfig+0x282>
 8006248:	2310      	movs	r3, #16
 800624a:	76fb      	strb	r3, [r7, #27]
 800624c:	e07d      	b.n	800634a <UART_SetConfig+0x282>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a5b      	ldr	r2, [pc, #364]	; (80063c0 <UART_SetConfig+0x2f8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d120      	bne.n	800629a <UART_SetConfig+0x1d2>
 8006258:	4b56      	ldr	r3, [pc, #344]	; (80063b4 <UART_SetConfig+0x2ec>)
 800625a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006262:	2bc0      	cmp	r3, #192	; 0xc0
 8006264:	d013      	beq.n	800628e <UART_SetConfig+0x1c6>
 8006266:	2bc0      	cmp	r3, #192	; 0xc0
 8006268:	d814      	bhi.n	8006294 <UART_SetConfig+0x1cc>
 800626a:	2b80      	cmp	r3, #128	; 0x80
 800626c:	d009      	beq.n	8006282 <UART_SetConfig+0x1ba>
 800626e:	2b80      	cmp	r3, #128	; 0x80
 8006270:	d810      	bhi.n	8006294 <UART_SetConfig+0x1cc>
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <UART_SetConfig+0x1b4>
 8006276:	2b40      	cmp	r3, #64	; 0x40
 8006278:	d006      	beq.n	8006288 <UART_SetConfig+0x1c0>
 800627a:	e00b      	b.n	8006294 <UART_SetConfig+0x1cc>
 800627c:	2300      	movs	r3, #0
 800627e:	76fb      	strb	r3, [r7, #27]
 8006280:	e063      	b.n	800634a <UART_SetConfig+0x282>
 8006282:	2302      	movs	r3, #2
 8006284:	76fb      	strb	r3, [r7, #27]
 8006286:	e060      	b.n	800634a <UART_SetConfig+0x282>
 8006288:	2304      	movs	r3, #4
 800628a:	76fb      	strb	r3, [r7, #27]
 800628c:	e05d      	b.n	800634a <UART_SetConfig+0x282>
 800628e:	2308      	movs	r3, #8
 8006290:	76fb      	strb	r3, [r7, #27]
 8006292:	e05a      	b.n	800634a <UART_SetConfig+0x282>
 8006294:	2310      	movs	r3, #16
 8006296:	76fb      	strb	r3, [r7, #27]
 8006298:	e057      	b.n	800634a <UART_SetConfig+0x282>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a49      	ldr	r2, [pc, #292]	; (80063c4 <UART_SetConfig+0x2fc>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d125      	bne.n	80062f0 <UART_SetConfig+0x228>
 80062a4:	4b43      	ldr	r3, [pc, #268]	; (80063b4 <UART_SetConfig+0x2ec>)
 80062a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b2:	d017      	beq.n	80062e4 <UART_SetConfig+0x21c>
 80062b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062b8:	d817      	bhi.n	80062ea <UART_SetConfig+0x222>
 80062ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062be:	d00b      	beq.n	80062d8 <UART_SetConfig+0x210>
 80062c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80062c4:	d811      	bhi.n	80062ea <UART_SetConfig+0x222>
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d003      	beq.n	80062d2 <UART_SetConfig+0x20a>
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d006      	beq.n	80062de <UART_SetConfig+0x216>
 80062d0:	e00b      	b.n	80062ea <UART_SetConfig+0x222>
 80062d2:	2300      	movs	r3, #0
 80062d4:	76fb      	strb	r3, [r7, #27]
 80062d6:	e038      	b.n	800634a <UART_SetConfig+0x282>
 80062d8:	2302      	movs	r3, #2
 80062da:	76fb      	strb	r3, [r7, #27]
 80062dc:	e035      	b.n	800634a <UART_SetConfig+0x282>
 80062de:	2304      	movs	r3, #4
 80062e0:	76fb      	strb	r3, [r7, #27]
 80062e2:	e032      	b.n	800634a <UART_SetConfig+0x282>
 80062e4:	2308      	movs	r3, #8
 80062e6:	76fb      	strb	r3, [r7, #27]
 80062e8:	e02f      	b.n	800634a <UART_SetConfig+0x282>
 80062ea:	2310      	movs	r3, #16
 80062ec:	76fb      	strb	r3, [r7, #27]
 80062ee:	e02c      	b.n	800634a <UART_SetConfig+0x282>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a2d      	ldr	r2, [pc, #180]	; (80063ac <UART_SetConfig+0x2e4>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d125      	bne.n	8006346 <UART_SetConfig+0x27e>
 80062fa:	4b2e      	ldr	r3, [pc, #184]	; (80063b4 <UART_SetConfig+0x2ec>)
 80062fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006300:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006304:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006308:	d017      	beq.n	800633a <UART_SetConfig+0x272>
 800630a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800630e:	d817      	bhi.n	8006340 <UART_SetConfig+0x278>
 8006310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006314:	d00b      	beq.n	800632e <UART_SetConfig+0x266>
 8006316:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800631a:	d811      	bhi.n	8006340 <UART_SetConfig+0x278>
 800631c:	2b00      	cmp	r3, #0
 800631e:	d003      	beq.n	8006328 <UART_SetConfig+0x260>
 8006320:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006324:	d006      	beq.n	8006334 <UART_SetConfig+0x26c>
 8006326:	e00b      	b.n	8006340 <UART_SetConfig+0x278>
 8006328:	2300      	movs	r3, #0
 800632a:	76fb      	strb	r3, [r7, #27]
 800632c:	e00d      	b.n	800634a <UART_SetConfig+0x282>
 800632e:	2302      	movs	r3, #2
 8006330:	76fb      	strb	r3, [r7, #27]
 8006332:	e00a      	b.n	800634a <UART_SetConfig+0x282>
 8006334:	2304      	movs	r3, #4
 8006336:	76fb      	strb	r3, [r7, #27]
 8006338:	e007      	b.n	800634a <UART_SetConfig+0x282>
 800633a:	2308      	movs	r3, #8
 800633c:	76fb      	strb	r3, [r7, #27]
 800633e:	e004      	b.n	800634a <UART_SetConfig+0x282>
 8006340:	2310      	movs	r3, #16
 8006342:	76fb      	strb	r3, [r7, #27]
 8006344:	e001      	b.n	800634a <UART_SetConfig+0x282>
 8006346:	2310      	movs	r3, #16
 8006348:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a17      	ldr	r2, [pc, #92]	; (80063ac <UART_SetConfig+0x2e4>)
 8006350:	4293      	cmp	r3, r2
 8006352:	f040 8087 	bne.w	8006464 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006356:	7efb      	ldrb	r3, [r7, #27]
 8006358:	2b08      	cmp	r3, #8
 800635a:	d837      	bhi.n	80063cc <UART_SetConfig+0x304>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x29c>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	08006389 	.word	0x08006389
 8006368:	080063cd 	.word	0x080063cd
 800636c:	08006391 	.word	0x08006391
 8006370:	080063cd 	.word	0x080063cd
 8006374:	08006397 	.word	0x08006397
 8006378:	080063cd 	.word	0x080063cd
 800637c:	080063cd 	.word	0x080063cd
 8006380:	080063cd 	.word	0x080063cd
 8006384:	0800639f 	.word	0x0800639f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fe fcae 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 800638c:	6178      	str	r0, [r7, #20]
        break;
 800638e:	e022      	b.n	80063d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006390:	4b0d      	ldr	r3, [pc, #52]	; (80063c8 <UART_SetConfig+0x300>)
 8006392:	617b      	str	r3, [r7, #20]
        break;
 8006394:	e01f      	b.n	80063d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006396:	f7fe fc0f 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 800639a:	6178      	str	r0, [r7, #20]
        break;
 800639c:	e01b      	b.n	80063d6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	617b      	str	r3, [r7, #20]
        break;
 80063a4:	e017      	b.n	80063d6 <UART_SetConfig+0x30e>
 80063a6:	bf00      	nop
 80063a8:	efff69f3 	.word	0xefff69f3
 80063ac:	40008000 	.word	0x40008000
 80063b0:	40013800 	.word	0x40013800
 80063b4:	40021000 	.word	0x40021000
 80063b8:	40004400 	.word	0x40004400
 80063bc:	40004800 	.word	0x40004800
 80063c0:	40004c00 	.word	0x40004c00
 80063c4:	40005000 	.word	0x40005000
 80063c8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063d0:	2301      	movs	r3, #1
 80063d2:	76bb      	strb	r3, [r7, #26]
        break;
 80063d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f000 80f1 	beq.w	80065c0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	4613      	mov	r3, r2
 80063e4:	005b      	lsls	r3, r3, #1
 80063e6:	4413      	add	r3, r2
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d305      	bcc.n	80063fa <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80063f4:	697a      	ldr	r2, [r7, #20]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	d902      	bls.n	8006400 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	76bb      	strb	r3, [r7, #26]
 80063fe:	e0df      	b.n	80065c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	4618      	mov	r0, r3
 8006404:	f04f 0100 	mov.w	r1, #0
 8006408:	f04f 0200 	mov.w	r2, #0
 800640c:	f04f 0300 	mov.w	r3, #0
 8006410:	020b      	lsls	r3, r1, #8
 8006412:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006416:	0202      	lsls	r2, r0, #8
 8006418:	6879      	ldr	r1, [r7, #4]
 800641a:	6849      	ldr	r1, [r1, #4]
 800641c:	0849      	lsrs	r1, r1, #1
 800641e:	4608      	mov	r0, r1
 8006420:	f04f 0100 	mov.w	r1, #0
 8006424:	1814      	adds	r4, r2, r0
 8006426:	eb43 0501 	adc.w	r5, r3, r1
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	461a      	mov	r2, r3
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	4620      	mov	r0, r4
 8006436:	4629      	mov	r1, r5
 8006438:	f7fa fbb6 	bl	8000ba8 <__aeabi_uldivmod>
 800643c:	4602      	mov	r2, r0
 800643e:	460b      	mov	r3, r1
 8006440:	4613      	mov	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800644a:	d308      	bcc.n	800645e <UART_SetConfig+0x396>
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006452:	d204      	bcs.n	800645e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	60da      	str	r2, [r3, #12]
 800645c:	e0b0      	b.n	80065c0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	76bb      	strb	r3, [r7, #26]
 8006462:	e0ad      	b.n	80065c0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	69db      	ldr	r3, [r3, #28]
 8006468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800646c:	d15b      	bne.n	8006526 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800646e:	7efb      	ldrb	r3, [r7, #27]
 8006470:	2b08      	cmp	r3, #8
 8006472:	d828      	bhi.n	80064c6 <UART_SetConfig+0x3fe>
 8006474:	a201      	add	r2, pc, #4	; (adr r2, 800647c <UART_SetConfig+0x3b4>)
 8006476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647a:	bf00      	nop
 800647c:	080064a1 	.word	0x080064a1
 8006480:	080064a9 	.word	0x080064a9
 8006484:	080064b1 	.word	0x080064b1
 8006488:	080064c7 	.word	0x080064c7
 800648c:	080064b7 	.word	0x080064b7
 8006490:	080064c7 	.word	0x080064c7
 8006494:	080064c7 	.word	0x080064c7
 8006498:	080064c7 	.word	0x080064c7
 800649c:	080064bf 	.word	0x080064bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a0:	f7fe fc22 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 80064a4:	6178      	str	r0, [r7, #20]
        break;
 80064a6:	e013      	b.n	80064d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064a8:	f7fe fc34 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 80064ac:	6178      	str	r0, [r7, #20]
        break;
 80064ae:	e00f      	b.n	80064d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b0:	4b49      	ldr	r3, [pc, #292]	; (80065d8 <UART_SetConfig+0x510>)
 80064b2:	617b      	str	r3, [r7, #20]
        break;
 80064b4:	e00c      	b.n	80064d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064b6:	f7fe fb7f 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 80064ba:	6178      	str	r0, [r7, #20]
        break;
 80064bc:	e008      	b.n	80064d0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064c2:	617b      	str	r3, [r7, #20]
        break;
 80064c4:	e004      	b.n	80064d0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	76bb      	strb	r3, [r7, #26]
        break;
 80064ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d074      	beq.n	80065c0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	005a      	lsls	r2, r3, #1
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	085b      	lsrs	r3, r3, #1
 80064e0:	441a      	add	r2, r3
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ea:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	2b0f      	cmp	r3, #15
 80064f0:	d916      	bls.n	8006520 <UART_SetConfig+0x458>
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064f8:	d212      	bcs.n	8006520 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	f023 030f 	bic.w	r3, r3, #15
 8006502:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	085b      	lsrs	r3, r3, #1
 8006508:	b29b      	uxth	r3, r3
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	b29a      	uxth	r2, r3
 8006510:	89fb      	ldrh	r3, [r7, #14]
 8006512:	4313      	orrs	r3, r2
 8006514:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	89fa      	ldrh	r2, [r7, #14]
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	e04f      	b.n	80065c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	76bb      	strb	r3, [r7, #26]
 8006524:	e04c      	b.n	80065c0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006526:	7efb      	ldrb	r3, [r7, #27]
 8006528:	2b08      	cmp	r3, #8
 800652a:	d828      	bhi.n	800657e <UART_SetConfig+0x4b6>
 800652c:	a201      	add	r2, pc, #4	; (adr r2, 8006534 <UART_SetConfig+0x46c>)
 800652e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006532:	bf00      	nop
 8006534:	08006559 	.word	0x08006559
 8006538:	08006561 	.word	0x08006561
 800653c:	08006569 	.word	0x08006569
 8006540:	0800657f 	.word	0x0800657f
 8006544:	0800656f 	.word	0x0800656f
 8006548:	0800657f 	.word	0x0800657f
 800654c:	0800657f 	.word	0x0800657f
 8006550:	0800657f 	.word	0x0800657f
 8006554:	08006577 	.word	0x08006577
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006558:	f7fe fbc6 	bl	8004ce8 <HAL_RCC_GetPCLK1Freq>
 800655c:	6178      	str	r0, [r7, #20]
        break;
 800655e:	e013      	b.n	8006588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006560:	f7fe fbd8 	bl	8004d14 <HAL_RCC_GetPCLK2Freq>
 8006564:	6178      	str	r0, [r7, #20]
        break;
 8006566:	e00f      	b.n	8006588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006568:	4b1b      	ldr	r3, [pc, #108]	; (80065d8 <UART_SetConfig+0x510>)
 800656a:	617b      	str	r3, [r7, #20]
        break;
 800656c:	e00c      	b.n	8006588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800656e:	f7fe fb23 	bl	8004bb8 <HAL_RCC_GetSysClockFreq>
 8006572:	6178      	str	r0, [r7, #20]
        break;
 8006574:	e008      	b.n	8006588 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006576:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800657a:	617b      	str	r3, [r7, #20]
        break;
 800657c:	e004      	b.n	8006588 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006582:	2301      	movs	r3, #1
 8006584:	76bb      	strb	r3, [r7, #26]
        break;
 8006586:	bf00      	nop
    }

    if (pclk != 0U)
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d018      	beq.n	80065c0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	085a      	lsrs	r2, r3, #1
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	441a      	add	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	2b0f      	cmp	r3, #15
 80065a6:	d909      	bls.n	80065bc <UART_SetConfig+0x4f4>
 80065a8:	693b      	ldr	r3, [r7, #16]
 80065aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065ae:	d205      	bcs.n	80065bc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	b29a      	uxth	r2, r3
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60da      	str	r2, [r3, #12]
 80065ba:	e001      	b.n	80065c0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2200      	movs	r2, #0
 80065c4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2200      	movs	r2, #0
 80065ca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065cc:	7ebb      	ldrb	r3, [r7, #26]
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3720      	adds	r7, #32
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bdb0      	pop	{r4, r5, r7, pc}
 80065d6:	bf00      	nop
 80065d8:	00f42400 	.word	0x00f42400

080065dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	f003 0301 	and.w	r3, r3, #1
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00a      	beq.n	8006606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	430a      	orrs	r2, r1
 8006604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b00      	cmp	r3, #0
 8006610:	d00a      	beq.n	8006628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	430a      	orrs	r2, r1
 8006626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662c:	f003 0304 	and.w	r3, r3, #4
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d01a      	beq.n	80066f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066da:	d10a      	bne.n	80066f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	605a      	str	r2, [r3, #4]
  }
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b086      	sub	sp, #24
 8006724:	af02      	add	r7, sp, #8
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006730:	f7fc fa40 	bl	8002bb4 <HAL_GetTick>
 8006734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f003 0308 	and.w	r3, r3, #8
 8006740:	2b08      	cmp	r3, #8
 8006742:	d10e      	bne.n	8006762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006748:	9300      	str	r3, [sp, #0]
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f000 f82d 	bl	80067b2 <UART_WaitOnFlagUntilTimeout>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e023      	b.n	80067aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f003 0304 	and.w	r3, r3, #4
 800676c:	2b04      	cmp	r3, #4
 800676e:	d10e      	bne.n	800678e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006774:	9300      	str	r3, [sp, #0]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f000 f817 	bl	80067b2 <UART_WaitOnFlagUntilTimeout>
 8006784:	4603      	mov	r3, r0
 8006786:	2b00      	cmp	r3, #0
 8006788:	d001      	beq.n	800678e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e00d      	b.n	80067aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2220      	movs	r2, #32
 8006792:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2220      	movs	r2, #32
 8006798:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b09c      	sub	sp, #112	; 0x70
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	603b      	str	r3, [r7, #0]
 80067be:	4613      	mov	r3, r2
 80067c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c2:	e0a5      	b.n	8006910 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ca:	f000 80a1 	beq.w	8006910 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ce:	f7fc f9f1 	bl	8002bb4 <HAL_GetTick>
 80067d2:	4602      	mov	r2, r0
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	1ad3      	subs	r3, r2, r3
 80067d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067da:	429a      	cmp	r2, r3
 80067dc:	d302      	bcc.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80067de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d13e      	bne.n	8006862 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ec:	e853 3f00 	ldrex	r3, [r3]
 80067f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067f8:	667b      	str	r3, [r7, #100]	; 0x64
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	461a      	mov	r2, r3
 8006800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006804:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006808:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e6      	bne.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	3308      	adds	r3, #8
 800681c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006828:	f023 0301 	bic.w	r3, r3, #1
 800682c:	663b      	str	r3, [r7, #96]	; 0x60
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3308      	adds	r3, #8
 8006834:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006836:	64ba      	str	r2, [r7, #72]	; 0x48
 8006838:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800683c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e5      	bne.n	8006816 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2220      	movs	r2, #32
 800684e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800685e:	2303      	movs	r3, #3
 8006860:	e067      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f003 0304 	and.w	r3, r3, #4
 800686c:	2b00      	cmp	r3, #0
 800686e:	d04f      	beq.n	8006910 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800687a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800687e:	d147      	bne.n	8006910 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006888:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006892:	e853 3f00 	ldrex	r3, [r3]
 8006896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800689e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	461a      	mov	r2, r3
 80068a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068a8:	637b      	str	r3, [r7, #52]	; 0x34
 80068aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e6      	bne.n	800688a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	e853 3f00 	ldrex	r3, [r3]
 80068ca:	613b      	str	r3, [r7, #16]
   return(result);
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	3308      	adds	r3, #8
 80068da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068dc:	623a      	str	r2, [r7, #32]
 80068de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	69f9      	ldr	r1, [r7, #28]
 80068e2:	6a3a      	ldr	r2, [r7, #32]
 80068e4:	e841 2300 	strex	r3, r2, [r1]
 80068e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ea:	69bb      	ldr	r3, [r7, #24]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1e5      	bne.n	80068bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2220      	movs	r2, #32
 80068fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800690c:	2303      	movs	r3, #3
 800690e:	e010      	b.n	8006932 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	69da      	ldr	r2, [r3, #28]
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	4013      	ands	r3, r2
 800691a:	68ba      	ldr	r2, [r7, #8]
 800691c:	429a      	cmp	r2, r3
 800691e:	bf0c      	ite	eq
 8006920:	2301      	moveq	r3, #1
 8006922:	2300      	movne	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	461a      	mov	r2, r3
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	429a      	cmp	r2, r3
 800692c:	f43f af4a 	beq.w	80067c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006930:	2300      	movs	r3, #0
}
 8006932:	4618      	mov	r0, r3
 8006934:	3770      	adds	r7, #112	; 0x70
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}
	...

0800693c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800693c:	b480      	push	{r7}
 800693e:	b097      	sub	sp, #92	; 0x5c
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4613      	mov	r3, r2
 8006948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	68ba      	ldr	r2, [r7, #8]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	88fa      	ldrh	r2, [r7, #6]
 8006954:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	88fa      	ldrh	r2, [r7, #6]
 800695c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696e:	d10e      	bne.n	800698e <UART_Start_Receive_IT+0x52>
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	691b      	ldr	r3, [r3, #16]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d105      	bne.n	8006984 <UART_Start_Receive_IT+0x48>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800697e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006982:	e02d      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	22ff      	movs	r2, #255	; 0xff
 8006988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800698c:	e028      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d10d      	bne.n	80069b2 <UART_Start_Receive_IT+0x76>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d104      	bne.n	80069a8 <UART_Start_Receive_IT+0x6c>
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	22ff      	movs	r2, #255	; 0xff
 80069a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069a6:	e01b      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	227f      	movs	r2, #127	; 0x7f
 80069ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069b0:	e016      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ba:	d10d      	bne.n	80069d8 <UART_Start_Receive_IT+0x9c>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	691b      	ldr	r3, [r3, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d104      	bne.n	80069ce <UART_Start_Receive_IT+0x92>
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	227f      	movs	r2, #127	; 0x7f
 80069c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069cc:	e008      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	223f      	movs	r2, #63	; 0x3f
 80069d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069d6:	e003      	b.n	80069e0 <UART_Start_Receive_IT+0xa4>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2222      	movs	r2, #34	; 0x22
 80069ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3308      	adds	r3, #8
 80069f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f8:	e853 3f00 	ldrex	r3, [r3]
 80069fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a00:	f043 0301 	orr.w	r3, r3, #1
 8006a04:	657b      	str	r3, [r7, #84]	; 0x54
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006a10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a16:	e841 2300 	strex	r3, r2, [r1]
 8006a1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d1e5      	bne.n	80069ee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a2a:	d107      	bne.n	8006a3c <UART_Start_Receive_IT+0x100>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	691b      	ldr	r3, [r3, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4a24      	ldr	r2, [pc, #144]	; (8006ac8 <UART_Start_Receive_IT+0x18c>)
 8006a38:	665a      	str	r2, [r3, #100]	; 0x64
 8006a3a:	e002      	b.n	8006a42 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4a23      	ldr	r2, [pc, #140]	; (8006acc <UART_Start_Receive_IT+0x190>)
 8006a40:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d019      	beq.n	8006a86 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a70:	637b      	str	r3, [r7, #52]	; 0x34
 8006a72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <UART_Start_Receive_IT+0x116>
 8006a84:	e018      	b.n	8006ab8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	613b      	str	r3, [r7, #16]
   return(result);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	f043 0320 	orr.w	r3, r3, #32
 8006a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa4:	623b      	str	r3, [r7, #32]
 8006aa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	69f9      	ldr	r1, [r7, #28]
 8006aaa:	6a3a      	ldr	r2, [r7, #32]
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	375c      	adds	r7, #92	; 0x5c
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	08006eef 	.word	0x08006eef
 8006acc:	08006d8f 	.word	0x08006d8f

08006ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b095      	sub	sp, #84	; 0x54
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006af6:	643b      	str	r3, [r7, #64]	; 0x40
 8006af8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e6      	bne.n	8006ad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6a3b      	ldr	r3, [r7, #32]
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e5      	bne.n	8006b0a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d118      	bne.n	8006b78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f023 0310 	bic.w	r3, r3, #16
 8006b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	461a      	mov	r2, r3
 8006b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b64:	61bb      	str	r3, [r7, #24]
 8006b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	613b      	str	r3, [r7, #16]
   return(result);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e6      	bne.n	8006b46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b8a:	bf00      	nop
 8006b8c:	3754      	adds	r7, #84	; 0x54
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr

08006b96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b084      	sub	sp, #16
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fa71 	bl	800609c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bba:	bf00      	nop
 8006bbc:	3710      	adds	r7, #16
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}

08006bc2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006bc2:	b480      	push	{r7}
 8006bc4:	b08f      	sub	sp, #60	; 0x3c
 8006bc6:	af00      	add	r7, sp, #0
 8006bc8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006bce:	2b21      	cmp	r3, #33	; 0x21
 8006bd0:	d14d      	bne.n	8006c6e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d132      	bne.n	8006c44 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6a3b      	ldr	r3, [r7, #32]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bfe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	e853 3f00 	ldrex	r3, [r3]
 8006c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c24:	633b      	str	r3, [r7, #48]	; 0x30
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c2e:	61bb      	str	r3, [r7, #24]
 8006c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	6979      	ldr	r1, [r7, #20]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	e841 2300 	strex	r3, r2, [r1]
 8006c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1e6      	bne.n	8006c10 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006c42:	e014      	b.n	8006c6e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c48:	781a      	ldrb	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	b292      	uxth	r2, r2
 8006c50:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	3b01      	subs	r3, #1
 8006c66:	b29a      	uxth	r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006c6e:	bf00      	nop
 8006c70:	373c      	adds	r7, #60	; 0x3c
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b091      	sub	sp, #68	; 0x44
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c86:	2b21      	cmp	r3, #33	; 0x21
 8006c88:	d151      	bne.n	8006d2e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c90:	b29b      	uxth	r3, r3
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d132      	bne.n	8006cfc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9e:	e853 3f00 	ldrex	r3, [r3]
 8006ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8006ca4:	6a3b      	ldr	r3, [r7, #32]
 8006ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8006cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cbc:	e841 2300 	strex	r3, r2, [r1]
 8006cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d1e6      	bne.n	8006c96 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	e853 3f00 	ldrex	r3, [r3]
 8006cd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ce6:	61fb      	str	r3, [r7, #28]
 8006ce8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cea:	69b9      	ldr	r1, [r7, #24]
 8006cec:	69fa      	ldr	r2, [r7, #28]
 8006cee:	e841 2300 	strex	r3, r2, [r1]
 8006cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1e6      	bne.n	8006cc8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006cfa:	e018      	b.n	8006d2e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d04:	881a      	ldrh	r2, [r3, #0]
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d0e:	b292      	uxth	r2, r2
 8006d10:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d16:	1c9a      	adds	r2, r3, #2
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8006d2e:	bf00      	nop
 8006d30:	3744      	adds	r7, #68	; 0x44
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b088      	sub	sp, #32
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	e853 3f00 	ldrex	r3, [r3]
 8006d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	69fb      	ldr	r3, [r7, #28]
 8006d60:	61bb      	str	r3, [r7, #24]
 8006d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d64:	6979      	ldr	r1, [r7, #20]
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	e841 2300 	strex	r3, r2, [r1]
 8006d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1e6      	bne.n	8006d42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2220      	movs	r2, #32
 8006d78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f7ff f981 	bl	8006088 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d86:	bf00      	nop
 8006d88:	3720      	adds	r7, #32
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	bd80      	pop	{r7, pc}

08006d8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d8e:	b580      	push	{r7, lr}
 8006d90:	b096      	sub	sp, #88	; 0x58
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006da4:	2b22      	cmp	r3, #34	; 0x22
 8006da6:	f040 8094 	bne.w	8006ed2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006db0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006db4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006db8:	b2d9      	uxtb	r1, r3
 8006dba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006dbe:	b2da      	uxtb	r2, r3
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dc4:	400a      	ands	r2, r1
 8006dc6:	b2d2      	uxtb	r2, r2
 8006dc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dda:	b29b      	uxth	r3, r3
 8006ddc:	3b01      	subs	r3, #1
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d179      	bne.n	8006ee6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e06:	653b      	str	r3, [r7, #80]	; 0x50
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e10:	647b      	str	r3, [r7, #68]	; 0x44
 8006e12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e6      	bne.n	8006df2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	e853 3f00 	ldrex	r3, [r3]
 8006e32:	623b      	str	r3, [r7, #32]
   return(result);
 8006e34:	6a3b      	ldr	r3, [r7, #32]
 8006e36:	f023 0301 	bic.w	r3, r3, #1
 8006e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	3308      	adds	r3, #8
 8006e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e44:	633a      	str	r2, [r7, #48]	; 0x30
 8006e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e4c:	e841 2300 	strex	r3, r2, [r1]
 8006e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d1e5      	bne.n	8006e24 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d12e      	bne.n	8006eca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	e853 3f00 	ldrex	r3, [r3]
 8006e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0310 	bic.w	r3, r3, #16
 8006e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e90:	61fb      	str	r3, [r7, #28]
 8006e92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e94:	69b9      	ldr	r1, [r7, #24]
 8006e96:	69fa      	ldr	r2, [r7, #28]
 8006e98:	e841 2300 	strex	r3, r2, [r1]
 8006e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e9e:	697b      	ldr	r3, [r7, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d1e6      	bne.n	8006e72 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	69db      	ldr	r3, [r3, #28]
 8006eaa:	f003 0310 	and.w	r3, r3, #16
 8006eae:	2b10      	cmp	r3, #16
 8006eb0:	d103      	bne.n	8006eba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	2210      	movs	r2, #16
 8006eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f7ff f8f4 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ec8:	e00d      	b.n	8006ee6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006eca:	6878      	ldr	r0, [r7, #4]
 8006ecc:	f7fa fd46 	bl	800195c <HAL_UART_RxCpltCallback>
}
 8006ed0:	e009      	b.n	8006ee6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	8b1b      	ldrh	r3, [r3, #24]
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0208 	orr.w	r2, r2, #8
 8006ee2:	b292      	uxth	r2, r2
 8006ee4:	831a      	strh	r2, [r3, #24]
}
 8006ee6:	bf00      	nop
 8006ee8:	3758      	adds	r7, #88	; 0x58
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd80      	pop	{r7, pc}

08006eee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006eee:	b580      	push	{r7, lr}
 8006ef0:	b096      	sub	sp, #88	; 0x58
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006efc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f04:	2b22      	cmp	r3, #34	; 0x22
 8006f06:	f040 8094 	bne.w	8007032 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006f10:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f18:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f1a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006f1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006f22:	4013      	ands	r3, r2
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f2e:	1c9a      	adds	r2, r3, #2
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	3b01      	subs	r3, #1
 8006f3e:	b29a      	uxth	r2, r3
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d179      	bne.n	8007046 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f5a:	e853 3f00 	ldrex	r3, [r3]
 8006f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f70:	643b      	str	r3, [r7, #64]	; 0x40
 8006f72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f78:	e841 2300 	strex	r3, r2, [r1]
 8006f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d1e6      	bne.n	8006f52 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	3308      	adds	r3, #8
 8006f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6a3b      	ldr	r3, [r7, #32]
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	3308      	adds	r3, #8
 8006fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fac:	e841 2300 	strex	r3, r2, [r1]
 8006fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d1e5      	bne.n	8006f84 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2220      	movs	r2, #32
 8006fbc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d12e      	bne.n	800702a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	e853 3f00 	ldrex	r3, [r3]
 8006fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f023 0310 	bic.w	r3, r3, #16
 8006fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	461a      	mov	r2, r3
 8006fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ff0:	61bb      	str	r3, [r7, #24]
 8006ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff4:	6979      	ldr	r1, [r7, #20]
 8006ff6:	69ba      	ldr	r2, [r7, #24]
 8006ff8:	e841 2300 	strex	r3, r2, [r1]
 8006ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d1e6      	bne.n	8006fd2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f003 0310 	and.w	r3, r3, #16
 800700e:	2b10      	cmp	r3, #16
 8007010:	d103      	bne.n	800701a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	2210      	movs	r2, #16
 8007018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007020:	4619      	mov	r1, r3
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f7ff f844 	bl	80060b0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007028:	e00d      	b.n	8007046 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f7fa fc96 	bl	800195c <HAL_UART_RxCpltCallback>
}
 8007030:	e009      	b.n	8007046 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	8b1b      	ldrh	r3, [r3, #24]
 8007038:	b29a      	uxth	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f042 0208 	orr.w	r2, r2, #8
 8007042:	b292      	uxth	r2, r2
 8007044:	831a      	strh	r2, [r3, #24]
}
 8007046:	bf00      	nop
 8007048:	3758      	adds	r7, #88	; 0x58
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800704e:	b480      	push	{r7}
 8007050:	b083      	sub	sp, #12
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007056:	bf00      	nop
 8007058:	370c      	adds	r7, #12
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr
	...

08007064 <__errno>:
 8007064:	4b01      	ldr	r3, [pc, #4]	; (800706c <__errno+0x8>)
 8007066:	6818      	ldr	r0, [r3, #0]
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	2000014c 	.word	0x2000014c

08007070 <__libc_init_array>:
 8007070:	b570      	push	{r4, r5, r6, lr}
 8007072:	4d0d      	ldr	r5, [pc, #52]	; (80070a8 <__libc_init_array+0x38>)
 8007074:	4c0d      	ldr	r4, [pc, #52]	; (80070ac <__libc_init_array+0x3c>)
 8007076:	1b64      	subs	r4, r4, r5
 8007078:	10a4      	asrs	r4, r4, #2
 800707a:	2600      	movs	r6, #0
 800707c:	42a6      	cmp	r6, r4
 800707e:	d109      	bne.n	8007094 <__libc_init_array+0x24>
 8007080:	4d0b      	ldr	r5, [pc, #44]	; (80070b0 <__libc_init_array+0x40>)
 8007082:	4c0c      	ldr	r4, [pc, #48]	; (80070b4 <__libc_init_array+0x44>)
 8007084:	f002 fec8 	bl	8009e18 <_init>
 8007088:	1b64      	subs	r4, r4, r5
 800708a:	10a4      	asrs	r4, r4, #2
 800708c:	2600      	movs	r6, #0
 800708e:	42a6      	cmp	r6, r4
 8007090:	d105      	bne.n	800709e <__libc_init_array+0x2e>
 8007092:	bd70      	pop	{r4, r5, r6, pc}
 8007094:	f855 3b04 	ldr.w	r3, [r5], #4
 8007098:	4798      	blx	r3
 800709a:	3601      	adds	r6, #1
 800709c:	e7ee      	b.n	800707c <__libc_init_array+0xc>
 800709e:	f855 3b04 	ldr.w	r3, [r5], #4
 80070a2:	4798      	blx	r3
 80070a4:	3601      	adds	r6, #1
 80070a6:	e7f2      	b.n	800708e <__libc_init_array+0x1e>
 80070a8:	0800a37c 	.word	0x0800a37c
 80070ac:	0800a37c 	.word	0x0800a37c
 80070b0:	0800a37c 	.word	0x0800a37c
 80070b4:	0800a380 	.word	0x0800a380

080070b8 <memcpy>:
 80070b8:	440a      	add	r2, r1
 80070ba:	4291      	cmp	r1, r2
 80070bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80070c0:	d100      	bne.n	80070c4 <memcpy+0xc>
 80070c2:	4770      	bx	lr
 80070c4:	b510      	push	{r4, lr}
 80070c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ce:	4291      	cmp	r1, r2
 80070d0:	d1f9      	bne.n	80070c6 <memcpy+0xe>
 80070d2:	bd10      	pop	{r4, pc}

080070d4 <memset>:
 80070d4:	4402      	add	r2, r0
 80070d6:	4603      	mov	r3, r0
 80070d8:	4293      	cmp	r3, r2
 80070da:	d100      	bne.n	80070de <memset+0xa>
 80070dc:	4770      	bx	lr
 80070de:	f803 1b01 	strb.w	r1, [r3], #1
 80070e2:	e7f9      	b.n	80070d8 <memset+0x4>

080070e4 <__cvt>:
 80070e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80070e8:	ec55 4b10 	vmov	r4, r5, d0
 80070ec:	2d00      	cmp	r5, #0
 80070ee:	460e      	mov	r6, r1
 80070f0:	4619      	mov	r1, r3
 80070f2:	462b      	mov	r3, r5
 80070f4:	bfbb      	ittet	lt
 80070f6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80070fa:	461d      	movlt	r5, r3
 80070fc:	2300      	movge	r3, #0
 80070fe:	232d      	movlt	r3, #45	; 0x2d
 8007100:	700b      	strb	r3, [r1, #0]
 8007102:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007104:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007108:	4691      	mov	r9, r2
 800710a:	f023 0820 	bic.w	r8, r3, #32
 800710e:	bfbc      	itt	lt
 8007110:	4622      	movlt	r2, r4
 8007112:	4614      	movlt	r4, r2
 8007114:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007118:	d005      	beq.n	8007126 <__cvt+0x42>
 800711a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800711e:	d100      	bne.n	8007122 <__cvt+0x3e>
 8007120:	3601      	adds	r6, #1
 8007122:	2102      	movs	r1, #2
 8007124:	e000      	b.n	8007128 <__cvt+0x44>
 8007126:	2103      	movs	r1, #3
 8007128:	ab03      	add	r3, sp, #12
 800712a:	9301      	str	r3, [sp, #4]
 800712c:	ab02      	add	r3, sp, #8
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	ec45 4b10 	vmov	d0, r4, r5
 8007134:	4653      	mov	r3, sl
 8007136:	4632      	mov	r2, r6
 8007138:	f000 fcfe 	bl	8007b38 <_dtoa_r>
 800713c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007140:	4607      	mov	r7, r0
 8007142:	d102      	bne.n	800714a <__cvt+0x66>
 8007144:	f019 0f01 	tst.w	r9, #1
 8007148:	d022      	beq.n	8007190 <__cvt+0xac>
 800714a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800714e:	eb07 0906 	add.w	r9, r7, r6
 8007152:	d110      	bne.n	8007176 <__cvt+0x92>
 8007154:	783b      	ldrb	r3, [r7, #0]
 8007156:	2b30      	cmp	r3, #48	; 0x30
 8007158:	d10a      	bne.n	8007170 <__cvt+0x8c>
 800715a:	2200      	movs	r2, #0
 800715c:	2300      	movs	r3, #0
 800715e:	4620      	mov	r0, r4
 8007160:	4629      	mov	r1, r5
 8007162:	f7f9 fcb1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007166:	b918      	cbnz	r0, 8007170 <__cvt+0x8c>
 8007168:	f1c6 0601 	rsb	r6, r6, #1
 800716c:	f8ca 6000 	str.w	r6, [sl]
 8007170:	f8da 3000 	ldr.w	r3, [sl]
 8007174:	4499      	add	r9, r3
 8007176:	2200      	movs	r2, #0
 8007178:	2300      	movs	r3, #0
 800717a:	4620      	mov	r0, r4
 800717c:	4629      	mov	r1, r5
 800717e:	f7f9 fca3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007182:	b108      	cbz	r0, 8007188 <__cvt+0xa4>
 8007184:	f8cd 900c 	str.w	r9, [sp, #12]
 8007188:	2230      	movs	r2, #48	; 0x30
 800718a:	9b03      	ldr	r3, [sp, #12]
 800718c:	454b      	cmp	r3, r9
 800718e:	d307      	bcc.n	80071a0 <__cvt+0xbc>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007194:	1bdb      	subs	r3, r3, r7
 8007196:	4638      	mov	r0, r7
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	b004      	add	sp, #16
 800719c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071a0:	1c59      	adds	r1, r3, #1
 80071a2:	9103      	str	r1, [sp, #12]
 80071a4:	701a      	strb	r2, [r3, #0]
 80071a6:	e7f0      	b.n	800718a <__cvt+0xa6>

080071a8 <__exponent>:
 80071a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071aa:	4603      	mov	r3, r0
 80071ac:	2900      	cmp	r1, #0
 80071ae:	bfb8      	it	lt
 80071b0:	4249      	neglt	r1, r1
 80071b2:	f803 2b02 	strb.w	r2, [r3], #2
 80071b6:	bfb4      	ite	lt
 80071b8:	222d      	movlt	r2, #45	; 0x2d
 80071ba:	222b      	movge	r2, #43	; 0x2b
 80071bc:	2909      	cmp	r1, #9
 80071be:	7042      	strb	r2, [r0, #1]
 80071c0:	dd2a      	ble.n	8007218 <__exponent+0x70>
 80071c2:	f10d 0407 	add.w	r4, sp, #7
 80071c6:	46a4      	mov	ip, r4
 80071c8:	270a      	movs	r7, #10
 80071ca:	46a6      	mov	lr, r4
 80071cc:	460a      	mov	r2, r1
 80071ce:	fb91 f6f7 	sdiv	r6, r1, r7
 80071d2:	fb07 1516 	mls	r5, r7, r6, r1
 80071d6:	3530      	adds	r5, #48	; 0x30
 80071d8:	2a63      	cmp	r2, #99	; 0x63
 80071da:	f104 34ff 	add.w	r4, r4, #4294967295
 80071de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80071e2:	4631      	mov	r1, r6
 80071e4:	dcf1      	bgt.n	80071ca <__exponent+0x22>
 80071e6:	3130      	adds	r1, #48	; 0x30
 80071e8:	f1ae 0502 	sub.w	r5, lr, #2
 80071ec:	f804 1c01 	strb.w	r1, [r4, #-1]
 80071f0:	1c44      	adds	r4, r0, #1
 80071f2:	4629      	mov	r1, r5
 80071f4:	4561      	cmp	r1, ip
 80071f6:	d30a      	bcc.n	800720e <__exponent+0x66>
 80071f8:	f10d 0209 	add.w	r2, sp, #9
 80071fc:	eba2 020e 	sub.w	r2, r2, lr
 8007200:	4565      	cmp	r5, ip
 8007202:	bf88      	it	hi
 8007204:	2200      	movhi	r2, #0
 8007206:	4413      	add	r3, r2
 8007208:	1a18      	subs	r0, r3, r0
 800720a:	b003      	add	sp, #12
 800720c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800720e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007212:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007216:	e7ed      	b.n	80071f4 <__exponent+0x4c>
 8007218:	2330      	movs	r3, #48	; 0x30
 800721a:	3130      	adds	r1, #48	; 0x30
 800721c:	7083      	strb	r3, [r0, #2]
 800721e:	70c1      	strb	r1, [r0, #3]
 8007220:	1d03      	adds	r3, r0, #4
 8007222:	e7f1      	b.n	8007208 <__exponent+0x60>

08007224 <_printf_float>:
 8007224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007228:	ed2d 8b02 	vpush	{d8}
 800722c:	b08d      	sub	sp, #52	; 0x34
 800722e:	460c      	mov	r4, r1
 8007230:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007234:	4616      	mov	r6, r2
 8007236:	461f      	mov	r7, r3
 8007238:	4605      	mov	r5, r0
 800723a:	f001 fa69 	bl	8008710 <_localeconv_r>
 800723e:	f8d0 a000 	ldr.w	sl, [r0]
 8007242:	4650      	mov	r0, sl
 8007244:	f7f8 ffc4 	bl	80001d0 <strlen>
 8007248:	2300      	movs	r3, #0
 800724a:	930a      	str	r3, [sp, #40]	; 0x28
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	9305      	str	r3, [sp, #20]
 8007250:	f8d8 3000 	ldr.w	r3, [r8]
 8007254:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007258:	3307      	adds	r3, #7
 800725a:	f023 0307 	bic.w	r3, r3, #7
 800725e:	f103 0208 	add.w	r2, r3, #8
 8007262:	f8c8 2000 	str.w	r2, [r8]
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800726e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007276:	9307      	str	r3, [sp, #28]
 8007278:	f8cd 8018 	str.w	r8, [sp, #24]
 800727c:	ee08 0a10 	vmov	s16, r0
 8007280:	4b9f      	ldr	r3, [pc, #636]	; (8007500 <_printf_float+0x2dc>)
 8007282:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007286:	f04f 32ff 	mov.w	r2, #4294967295
 800728a:	f7f9 fc4f 	bl	8000b2c <__aeabi_dcmpun>
 800728e:	bb88      	cbnz	r0, 80072f4 <_printf_float+0xd0>
 8007290:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007294:	4b9a      	ldr	r3, [pc, #616]	; (8007500 <_printf_float+0x2dc>)
 8007296:	f04f 32ff 	mov.w	r2, #4294967295
 800729a:	f7f9 fc29 	bl	8000af0 <__aeabi_dcmple>
 800729e:	bb48      	cbnz	r0, 80072f4 <_printf_float+0xd0>
 80072a0:	2200      	movs	r2, #0
 80072a2:	2300      	movs	r3, #0
 80072a4:	4640      	mov	r0, r8
 80072a6:	4649      	mov	r1, r9
 80072a8:	f7f9 fc18 	bl	8000adc <__aeabi_dcmplt>
 80072ac:	b110      	cbz	r0, 80072b4 <_printf_float+0x90>
 80072ae:	232d      	movs	r3, #45	; 0x2d
 80072b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072b4:	4b93      	ldr	r3, [pc, #588]	; (8007504 <_printf_float+0x2e0>)
 80072b6:	4894      	ldr	r0, [pc, #592]	; (8007508 <_printf_float+0x2e4>)
 80072b8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80072bc:	bf94      	ite	ls
 80072be:	4698      	movls	r8, r3
 80072c0:	4680      	movhi	r8, r0
 80072c2:	2303      	movs	r3, #3
 80072c4:	6123      	str	r3, [r4, #16]
 80072c6:	9b05      	ldr	r3, [sp, #20]
 80072c8:	f023 0204 	bic.w	r2, r3, #4
 80072cc:	6022      	str	r2, [r4, #0]
 80072ce:	f04f 0900 	mov.w	r9, #0
 80072d2:	9700      	str	r7, [sp, #0]
 80072d4:	4633      	mov	r3, r6
 80072d6:	aa0b      	add	r2, sp, #44	; 0x2c
 80072d8:	4621      	mov	r1, r4
 80072da:	4628      	mov	r0, r5
 80072dc:	f000 f9d8 	bl	8007690 <_printf_common>
 80072e0:	3001      	adds	r0, #1
 80072e2:	f040 8090 	bne.w	8007406 <_printf_float+0x1e2>
 80072e6:	f04f 30ff 	mov.w	r0, #4294967295
 80072ea:	b00d      	add	sp, #52	; 0x34
 80072ec:	ecbd 8b02 	vpop	{d8}
 80072f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f4:	4642      	mov	r2, r8
 80072f6:	464b      	mov	r3, r9
 80072f8:	4640      	mov	r0, r8
 80072fa:	4649      	mov	r1, r9
 80072fc:	f7f9 fc16 	bl	8000b2c <__aeabi_dcmpun>
 8007300:	b140      	cbz	r0, 8007314 <_printf_float+0xf0>
 8007302:	464b      	mov	r3, r9
 8007304:	2b00      	cmp	r3, #0
 8007306:	bfbc      	itt	lt
 8007308:	232d      	movlt	r3, #45	; 0x2d
 800730a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800730e:	487f      	ldr	r0, [pc, #508]	; (800750c <_printf_float+0x2e8>)
 8007310:	4b7f      	ldr	r3, [pc, #508]	; (8007510 <_printf_float+0x2ec>)
 8007312:	e7d1      	b.n	80072b8 <_printf_float+0x94>
 8007314:	6863      	ldr	r3, [r4, #4]
 8007316:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800731a:	9206      	str	r2, [sp, #24]
 800731c:	1c5a      	adds	r2, r3, #1
 800731e:	d13f      	bne.n	80073a0 <_printf_float+0x17c>
 8007320:	2306      	movs	r3, #6
 8007322:	6063      	str	r3, [r4, #4]
 8007324:	9b05      	ldr	r3, [sp, #20]
 8007326:	6861      	ldr	r1, [r4, #4]
 8007328:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800732c:	2300      	movs	r3, #0
 800732e:	9303      	str	r3, [sp, #12]
 8007330:	ab0a      	add	r3, sp, #40	; 0x28
 8007332:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007336:	ab09      	add	r3, sp, #36	; 0x24
 8007338:	ec49 8b10 	vmov	d0, r8, r9
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	6022      	str	r2, [r4, #0]
 8007340:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007344:	4628      	mov	r0, r5
 8007346:	f7ff fecd 	bl	80070e4 <__cvt>
 800734a:	9b06      	ldr	r3, [sp, #24]
 800734c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800734e:	2b47      	cmp	r3, #71	; 0x47
 8007350:	4680      	mov	r8, r0
 8007352:	d108      	bne.n	8007366 <_printf_float+0x142>
 8007354:	1cc8      	adds	r0, r1, #3
 8007356:	db02      	blt.n	800735e <_printf_float+0x13a>
 8007358:	6863      	ldr	r3, [r4, #4]
 800735a:	4299      	cmp	r1, r3
 800735c:	dd41      	ble.n	80073e2 <_printf_float+0x1be>
 800735e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007362:	fa5f fb8b 	uxtb.w	fp, fp
 8007366:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800736a:	d820      	bhi.n	80073ae <_printf_float+0x18a>
 800736c:	3901      	subs	r1, #1
 800736e:	465a      	mov	r2, fp
 8007370:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007374:	9109      	str	r1, [sp, #36]	; 0x24
 8007376:	f7ff ff17 	bl	80071a8 <__exponent>
 800737a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800737c:	1813      	adds	r3, r2, r0
 800737e:	2a01      	cmp	r2, #1
 8007380:	4681      	mov	r9, r0
 8007382:	6123      	str	r3, [r4, #16]
 8007384:	dc02      	bgt.n	800738c <_printf_float+0x168>
 8007386:	6822      	ldr	r2, [r4, #0]
 8007388:	07d2      	lsls	r2, r2, #31
 800738a:	d501      	bpl.n	8007390 <_printf_float+0x16c>
 800738c:	3301      	adds	r3, #1
 800738e:	6123      	str	r3, [r4, #16]
 8007390:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007394:	2b00      	cmp	r3, #0
 8007396:	d09c      	beq.n	80072d2 <_printf_float+0xae>
 8007398:	232d      	movs	r3, #45	; 0x2d
 800739a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800739e:	e798      	b.n	80072d2 <_printf_float+0xae>
 80073a0:	9a06      	ldr	r2, [sp, #24]
 80073a2:	2a47      	cmp	r2, #71	; 0x47
 80073a4:	d1be      	bne.n	8007324 <_printf_float+0x100>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d1bc      	bne.n	8007324 <_printf_float+0x100>
 80073aa:	2301      	movs	r3, #1
 80073ac:	e7b9      	b.n	8007322 <_printf_float+0xfe>
 80073ae:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80073b2:	d118      	bne.n	80073e6 <_printf_float+0x1c2>
 80073b4:	2900      	cmp	r1, #0
 80073b6:	6863      	ldr	r3, [r4, #4]
 80073b8:	dd0b      	ble.n	80073d2 <_printf_float+0x1ae>
 80073ba:	6121      	str	r1, [r4, #16]
 80073bc:	b913      	cbnz	r3, 80073c4 <_printf_float+0x1a0>
 80073be:	6822      	ldr	r2, [r4, #0]
 80073c0:	07d0      	lsls	r0, r2, #31
 80073c2:	d502      	bpl.n	80073ca <_printf_float+0x1a6>
 80073c4:	3301      	adds	r3, #1
 80073c6:	440b      	add	r3, r1
 80073c8:	6123      	str	r3, [r4, #16]
 80073ca:	65a1      	str	r1, [r4, #88]	; 0x58
 80073cc:	f04f 0900 	mov.w	r9, #0
 80073d0:	e7de      	b.n	8007390 <_printf_float+0x16c>
 80073d2:	b913      	cbnz	r3, 80073da <_printf_float+0x1b6>
 80073d4:	6822      	ldr	r2, [r4, #0]
 80073d6:	07d2      	lsls	r2, r2, #31
 80073d8:	d501      	bpl.n	80073de <_printf_float+0x1ba>
 80073da:	3302      	adds	r3, #2
 80073dc:	e7f4      	b.n	80073c8 <_printf_float+0x1a4>
 80073de:	2301      	movs	r3, #1
 80073e0:	e7f2      	b.n	80073c8 <_printf_float+0x1a4>
 80073e2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80073e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e8:	4299      	cmp	r1, r3
 80073ea:	db05      	blt.n	80073f8 <_printf_float+0x1d4>
 80073ec:	6823      	ldr	r3, [r4, #0]
 80073ee:	6121      	str	r1, [r4, #16]
 80073f0:	07d8      	lsls	r0, r3, #31
 80073f2:	d5ea      	bpl.n	80073ca <_printf_float+0x1a6>
 80073f4:	1c4b      	adds	r3, r1, #1
 80073f6:	e7e7      	b.n	80073c8 <_printf_float+0x1a4>
 80073f8:	2900      	cmp	r1, #0
 80073fa:	bfd4      	ite	le
 80073fc:	f1c1 0202 	rsble	r2, r1, #2
 8007400:	2201      	movgt	r2, #1
 8007402:	4413      	add	r3, r2
 8007404:	e7e0      	b.n	80073c8 <_printf_float+0x1a4>
 8007406:	6823      	ldr	r3, [r4, #0]
 8007408:	055a      	lsls	r2, r3, #21
 800740a:	d407      	bmi.n	800741c <_printf_float+0x1f8>
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	4642      	mov	r2, r8
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	d12c      	bne.n	8007474 <_printf_float+0x250>
 800741a:	e764      	b.n	80072e6 <_printf_float+0xc2>
 800741c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007420:	f240 80e0 	bls.w	80075e4 <_printf_float+0x3c0>
 8007424:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007428:	2200      	movs	r2, #0
 800742a:	2300      	movs	r3, #0
 800742c:	f7f9 fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007430:	2800      	cmp	r0, #0
 8007432:	d034      	beq.n	800749e <_printf_float+0x27a>
 8007434:	4a37      	ldr	r2, [pc, #220]	; (8007514 <_printf_float+0x2f0>)
 8007436:	2301      	movs	r3, #1
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	f43f af51 	beq.w	80072e6 <_printf_float+0xc2>
 8007444:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007448:	429a      	cmp	r2, r3
 800744a:	db02      	blt.n	8007452 <_printf_float+0x22e>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	07d8      	lsls	r0, r3, #31
 8007450:	d510      	bpl.n	8007474 <_printf_float+0x250>
 8007452:	ee18 3a10 	vmov	r3, s16
 8007456:	4652      	mov	r2, sl
 8007458:	4631      	mov	r1, r6
 800745a:	4628      	mov	r0, r5
 800745c:	47b8      	blx	r7
 800745e:	3001      	adds	r0, #1
 8007460:	f43f af41 	beq.w	80072e6 <_printf_float+0xc2>
 8007464:	f04f 0800 	mov.w	r8, #0
 8007468:	f104 091a 	add.w	r9, r4, #26
 800746c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800746e:	3b01      	subs	r3, #1
 8007470:	4543      	cmp	r3, r8
 8007472:	dc09      	bgt.n	8007488 <_printf_float+0x264>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	079b      	lsls	r3, r3, #30
 8007478:	f100 8105 	bmi.w	8007686 <_printf_float+0x462>
 800747c:	68e0      	ldr	r0, [r4, #12]
 800747e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007480:	4298      	cmp	r0, r3
 8007482:	bfb8      	it	lt
 8007484:	4618      	movlt	r0, r3
 8007486:	e730      	b.n	80072ea <_printf_float+0xc6>
 8007488:	2301      	movs	r3, #1
 800748a:	464a      	mov	r2, r9
 800748c:	4631      	mov	r1, r6
 800748e:	4628      	mov	r0, r5
 8007490:	47b8      	blx	r7
 8007492:	3001      	adds	r0, #1
 8007494:	f43f af27 	beq.w	80072e6 <_printf_float+0xc2>
 8007498:	f108 0801 	add.w	r8, r8, #1
 800749c:	e7e6      	b.n	800746c <_printf_float+0x248>
 800749e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	dc39      	bgt.n	8007518 <_printf_float+0x2f4>
 80074a4:	4a1b      	ldr	r2, [pc, #108]	; (8007514 <_printf_float+0x2f0>)
 80074a6:	2301      	movs	r3, #1
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	47b8      	blx	r7
 80074ae:	3001      	adds	r0, #1
 80074b0:	f43f af19 	beq.w	80072e6 <_printf_float+0xc2>
 80074b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074b8:	4313      	orrs	r3, r2
 80074ba:	d102      	bne.n	80074c2 <_printf_float+0x29e>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	07d9      	lsls	r1, r3, #31
 80074c0:	d5d8      	bpl.n	8007474 <_printf_float+0x250>
 80074c2:	ee18 3a10 	vmov	r3, s16
 80074c6:	4652      	mov	r2, sl
 80074c8:	4631      	mov	r1, r6
 80074ca:	4628      	mov	r0, r5
 80074cc:	47b8      	blx	r7
 80074ce:	3001      	adds	r0, #1
 80074d0:	f43f af09 	beq.w	80072e6 <_printf_float+0xc2>
 80074d4:	f04f 0900 	mov.w	r9, #0
 80074d8:	f104 0a1a 	add.w	sl, r4, #26
 80074dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074de:	425b      	negs	r3, r3
 80074e0:	454b      	cmp	r3, r9
 80074e2:	dc01      	bgt.n	80074e8 <_printf_float+0x2c4>
 80074e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074e6:	e792      	b.n	800740e <_printf_float+0x1ea>
 80074e8:	2301      	movs	r3, #1
 80074ea:	4652      	mov	r2, sl
 80074ec:	4631      	mov	r1, r6
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b8      	blx	r7
 80074f2:	3001      	adds	r0, #1
 80074f4:	f43f aef7 	beq.w	80072e6 <_printf_float+0xc2>
 80074f8:	f109 0901 	add.w	r9, r9, #1
 80074fc:	e7ee      	b.n	80074dc <_printf_float+0x2b8>
 80074fe:	bf00      	nop
 8007500:	7fefffff 	.word	0x7fefffff
 8007504:	08009f94 	.word	0x08009f94
 8007508:	08009f98 	.word	0x08009f98
 800750c:	08009fa0 	.word	0x08009fa0
 8007510:	08009f9c 	.word	0x08009f9c
 8007514:	08009fa4 	.word	0x08009fa4
 8007518:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800751a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800751c:	429a      	cmp	r2, r3
 800751e:	bfa8      	it	ge
 8007520:	461a      	movge	r2, r3
 8007522:	2a00      	cmp	r2, #0
 8007524:	4691      	mov	r9, r2
 8007526:	dc37      	bgt.n	8007598 <_printf_float+0x374>
 8007528:	f04f 0b00 	mov.w	fp, #0
 800752c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007530:	f104 021a 	add.w	r2, r4, #26
 8007534:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007536:	9305      	str	r3, [sp, #20]
 8007538:	eba3 0309 	sub.w	r3, r3, r9
 800753c:	455b      	cmp	r3, fp
 800753e:	dc33      	bgt.n	80075a8 <_printf_float+0x384>
 8007540:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007544:	429a      	cmp	r2, r3
 8007546:	db3b      	blt.n	80075c0 <_printf_float+0x39c>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	07da      	lsls	r2, r3, #31
 800754c:	d438      	bmi.n	80075c0 <_printf_float+0x39c>
 800754e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007550:	9b05      	ldr	r3, [sp, #20]
 8007552:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007554:	1ad3      	subs	r3, r2, r3
 8007556:	eba2 0901 	sub.w	r9, r2, r1
 800755a:	4599      	cmp	r9, r3
 800755c:	bfa8      	it	ge
 800755e:	4699      	movge	r9, r3
 8007560:	f1b9 0f00 	cmp.w	r9, #0
 8007564:	dc35      	bgt.n	80075d2 <_printf_float+0x3ae>
 8007566:	f04f 0800 	mov.w	r8, #0
 800756a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800756e:	f104 0a1a 	add.w	sl, r4, #26
 8007572:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007576:	1a9b      	subs	r3, r3, r2
 8007578:	eba3 0309 	sub.w	r3, r3, r9
 800757c:	4543      	cmp	r3, r8
 800757e:	f77f af79 	ble.w	8007474 <_printf_float+0x250>
 8007582:	2301      	movs	r3, #1
 8007584:	4652      	mov	r2, sl
 8007586:	4631      	mov	r1, r6
 8007588:	4628      	mov	r0, r5
 800758a:	47b8      	blx	r7
 800758c:	3001      	adds	r0, #1
 800758e:	f43f aeaa 	beq.w	80072e6 <_printf_float+0xc2>
 8007592:	f108 0801 	add.w	r8, r8, #1
 8007596:	e7ec      	b.n	8007572 <_printf_float+0x34e>
 8007598:	4613      	mov	r3, r2
 800759a:	4631      	mov	r1, r6
 800759c:	4642      	mov	r2, r8
 800759e:	4628      	mov	r0, r5
 80075a0:	47b8      	blx	r7
 80075a2:	3001      	adds	r0, #1
 80075a4:	d1c0      	bne.n	8007528 <_printf_float+0x304>
 80075a6:	e69e      	b.n	80072e6 <_printf_float+0xc2>
 80075a8:	2301      	movs	r3, #1
 80075aa:	4631      	mov	r1, r6
 80075ac:	4628      	mov	r0, r5
 80075ae:	9205      	str	r2, [sp, #20]
 80075b0:	47b8      	blx	r7
 80075b2:	3001      	adds	r0, #1
 80075b4:	f43f ae97 	beq.w	80072e6 <_printf_float+0xc2>
 80075b8:	9a05      	ldr	r2, [sp, #20]
 80075ba:	f10b 0b01 	add.w	fp, fp, #1
 80075be:	e7b9      	b.n	8007534 <_printf_float+0x310>
 80075c0:	ee18 3a10 	vmov	r3, s16
 80075c4:	4652      	mov	r2, sl
 80075c6:	4631      	mov	r1, r6
 80075c8:	4628      	mov	r0, r5
 80075ca:	47b8      	blx	r7
 80075cc:	3001      	adds	r0, #1
 80075ce:	d1be      	bne.n	800754e <_printf_float+0x32a>
 80075d0:	e689      	b.n	80072e6 <_printf_float+0xc2>
 80075d2:	9a05      	ldr	r2, [sp, #20]
 80075d4:	464b      	mov	r3, r9
 80075d6:	4442      	add	r2, r8
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	d1c1      	bne.n	8007566 <_printf_float+0x342>
 80075e2:	e680      	b.n	80072e6 <_printf_float+0xc2>
 80075e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e6:	2a01      	cmp	r2, #1
 80075e8:	dc01      	bgt.n	80075ee <_printf_float+0x3ca>
 80075ea:	07db      	lsls	r3, r3, #31
 80075ec:	d538      	bpl.n	8007660 <_printf_float+0x43c>
 80075ee:	2301      	movs	r3, #1
 80075f0:	4642      	mov	r2, r8
 80075f2:	4631      	mov	r1, r6
 80075f4:	4628      	mov	r0, r5
 80075f6:	47b8      	blx	r7
 80075f8:	3001      	adds	r0, #1
 80075fa:	f43f ae74 	beq.w	80072e6 <_printf_float+0xc2>
 80075fe:	ee18 3a10 	vmov	r3, s16
 8007602:	4652      	mov	r2, sl
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f ae6b 	beq.w	80072e6 <_printf_float+0xc2>
 8007610:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007614:	2200      	movs	r2, #0
 8007616:	2300      	movs	r3, #0
 8007618:	f7f9 fa56 	bl	8000ac8 <__aeabi_dcmpeq>
 800761c:	b9d8      	cbnz	r0, 8007656 <_printf_float+0x432>
 800761e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007620:	f108 0201 	add.w	r2, r8, #1
 8007624:	3b01      	subs	r3, #1
 8007626:	4631      	mov	r1, r6
 8007628:	4628      	mov	r0, r5
 800762a:	47b8      	blx	r7
 800762c:	3001      	adds	r0, #1
 800762e:	d10e      	bne.n	800764e <_printf_float+0x42a>
 8007630:	e659      	b.n	80072e6 <_printf_float+0xc2>
 8007632:	2301      	movs	r3, #1
 8007634:	4652      	mov	r2, sl
 8007636:	4631      	mov	r1, r6
 8007638:	4628      	mov	r0, r5
 800763a:	47b8      	blx	r7
 800763c:	3001      	adds	r0, #1
 800763e:	f43f ae52 	beq.w	80072e6 <_printf_float+0xc2>
 8007642:	f108 0801 	add.w	r8, r8, #1
 8007646:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007648:	3b01      	subs	r3, #1
 800764a:	4543      	cmp	r3, r8
 800764c:	dcf1      	bgt.n	8007632 <_printf_float+0x40e>
 800764e:	464b      	mov	r3, r9
 8007650:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007654:	e6dc      	b.n	8007410 <_printf_float+0x1ec>
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	f104 0a1a 	add.w	sl, r4, #26
 800765e:	e7f2      	b.n	8007646 <_printf_float+0x422>
 8007660:	2301      	movs	r3, #1
 8007662:	4642      	mov	r2, r8
 8007664:	e7df      	b.n	8007626 <_printf_float+0x402>
 8007666:	2301      	movs	r3, #1
 8007668:	464a      	mov	r2, r9
 800766a:	4631      	mov	r1, r6
 800766c:	4628      	mov	r0, r5
 800766e:	47b8      	blx	r7
 8007670:	3001      	adds	r0, #1
 8007672:	f43f ae38 	beq.w	80072e6 <_printf_float+0xc2>
 8007676:	f108 0801 	add.w	r8, r8, #1
 800767a:	68e3      	ldr	r3, [r4, #12]
 800767c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800767e:	1a5b      	subs	r3, r3, r1
 8007680:	4543      	cmp	r3, r8
 8007682:	dcf0      	bgt.n	8007666 <_printf_float+0x442>
 8007684:	e6fa      	b.n	800747c <_printf_float+0x258>
 8007686:	f04f 0800 	mov.w	r8, #0
 800768a:	f104 0919 	add.w	r9, r4, #25
 800768e:	e7f4      	b.n	800767a <_printf_float+0x456>

08007690 <_printf_common>:
 8007690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007694:	4616      	mov	r6, r2
 8007696:	4699      	mov	r9, r3
 8007698:	688a      	ldr	r2, [r1, #8]
 800769a:	690b      	ldr	r3, [r1, #16]
 800769c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076a0:	4293      	cmp	r3, r2
 80076a2:	bfb8      	it	lt
 80076a4:	4613      	movlt	r3, r2
 80076a6:	6033      	str	r3, [r6, #0]
 80076a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80076ac:	4607      	mov	r7, r0
 80076ae:	460c      	mov	r4, r1
 80076b0:	b10a      	cbz	r2, 80076b6 <_printf_common+0x26>
 80076b2:	3301      	adds	r3, #1
 80076b4:	6033      	str	r3, [r6, #0]
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	0699      	lsls	r1, r3, #26
 80076ba:	bf42      	ittt	mi
 80076bc:	6833      	ldrmi	r3, [r6, #0]
 80076be:	3302      	addmi	r3, #2
 80076c0:	6033      	strmi	r3, [r6, #0]
 80076c2:	6825      	ldr	r5, [r4, #0]
 80076c4:	f015 0506 	ands.w	r5, r5, #6
 80076c8:	d106      	bne.n	80076d8 <_printf_common+0x48>
 80076ca:	f104 0a19 	add.w	sl, r4, #25
 80076ce:	68e3      	ldr	r3, [r4, #12]
 80076d0:	6832      	ldr	r2, [r6, #0]
 80076d2:	1a9b      	subs	r3, r3, r2
 80076d4:	42ab      	cmp	r3, r5
 80076d6:	dc26      	bgt.n	8007726 <_printf_common+0x96>
 80076d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076dc:	1e13      	subs	r3, r2, #0
 80076de:	6822      	ldr	r2, [r4, #0]
 80076e0:	bf18      	it	ne
 80076e2:	2301      	movne	r3, #1
 80076e4:	0692      	lsls	r2, r2, #26
 80076e6:	d42b      	bmi.n	8007740 <_printf_common+0xb0>
 80076e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076ec:	4649      	mov	r1, r9
 80076ee:	4638      	mov	r0, r7
 80076f0:	47c0      	blx	r8
 80076f2:	3001      	adds	r0, #1
 80076f4:	d01e      	beq.n	8007734 <_printf_common+0xa4>
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	68e5      	ldr	r5, [r4, #12]
 80076fa:	6832      	ldr	r2, [r6, #0]
 80076fc:	f003 0306 	and.w	r3, r3, #6
 8007700:	2b04      	cmp	r3, #4
 8007702:	bf08      	it	eq
 8007704:	1aad      	subeq	r5, r5, r2
 8007706:	68a3      	ldr	r3, [r4, #8]
 8007708:	6922      	ldr	r2, [r4, #16]
 800770a:	bf0c      	ite	eq
 800770c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007710:	2500      	movne	r5, #0
 8007712:	4293      	cmp	r3, r2
 8007714:	bfc4      	itt	gt
 8007716:	1a9b      	subgt	r3, r3, r2
 8007718:	18ed      	addgt	r5, r5, r3
 800771a:	2600      	movs	r6, #0
 800771c:	341a      	adds	r4, #26
 800771e:	42b5      	cmp	r5, r6
 8007720:	d11a      	bne.n	8007758 <_printf_common+0xc8>
 8007722:	2000      	movs	r0, #0
 8007724:	e008      	b.n	8007738 <_printf_common+0xa8>
 8007726:	2301      	movs	r3, #1
 8007728:	4652      	mov	r2, sl
 800772a:	4649      	mov	r1, r9
 800772c:	4638      	mov	r0, r7
 800772e:	47c0      	blx	r8
 8007730:	3001      	adds	r0, #1
 8007732:	d103      	bne.n	800773c <_printf_common+0xac>
 8007734:	f04f 30ff 	mov.w	r0, #4294967295
 8007738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773c:	3501      	adds	r5, #1
 800773e:	e7c6      	b.n	80076ce <_printf_common+0x3e>
 8007740:	18e1      	adds	r1, r4, r3
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	2030      	movs	r0, #48	; 0x30
 8007746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800774a:	4422      	add	r2, r4
 800774c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007754:	3302      	adds	r3, #2
 8007756:	e7c7      	b.n	80076e8 <_printf_common+0x58>
 8007758:	2301      	movs	r3, #1
 800775a:	4622      	mov	r2, r4
 800775c:	4649      	mov	r1, r9
 800775e:	4638      	mov	r0, r7
 8007760:	47c0      	blx	r8
 8007762:	3001      	adds	r0, #1
 8007764:	d0e6      	beq.n	8007734 <_printf_common+0xa4>
 8007766:	3601      	adds	r6, #1
 8007768:	e7d9      	b.n	800771e <_printf_common+0x8e>
	...

0800776c <_printf_i>:
 800776c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007770:	460c      	mov	r4, r1
 8007772:	4691      	mov	r9, r2
 8007774:	7e27      	ldrb	r7, [r4, #24]
 8007776:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007778:	2f78      	cmp	r7, #120	; 0x78
 800777a:	4680      	mov	r8, r0
 800777c:	469a      	mov	sl, r3
 800777e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007782:	d807      	bhi.n	8007794 <_printf_i+0x28>
 8007784:	2f62      	cmp	r7, #98	; 0x62
 8007786:	d80a      	bhi.n	800779e <_printf_i+0x32>
 8007788:	2f00      	cmp	r7, #0
 800778a:	f000 80d8 	beq.w	800793e <_printf_i+0x1d2>
 800778e:	2f58      	cmp	r7, #88	; 0x58
 8007790:	f000 80a3 	beq.w	80078da <_printf_i+0x16e>
 8007794:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800779c:	e03a      	b.n	8007814 <_printf_i+0xa8>
 800779e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077a2:	2b15      	cmp	r3, #21
 80077a4:	d8f6      	bhi.n	8007794 <_printf_i+0x28>
 80077a6:	a001      	add	r0, pc, #4	; (adr r0, 80077ac <_printf_i+0x40>)
 80077a8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80077ac:	08007805 	.word	0x08007805
 80077b0:	08007819 	.word	0x08007819
 80077b4:	08007795 	.word	0x08007795
 80077b8:	08007795 	.word	0x08007795
 80077bc:	08007795 	.word	0x08007795
 80077c0:	08007795 	.word	0x08007795
 80077c4:	08007819 	.word	0x08007819
 80077c8:	08007795 	.word	0x08007795
 80077cc:	08007795 	.word	0x08007795
 80077d0:	08007795 	.word	0x08007795
 80077d4:	08007795 	.word	0x08007795
 80077d8:	08007925 	.word	0x08007925
 80077dc:	08007849 	.word	0x08007849
 80077e0:	08007907 	.word	0x08007907
 80077e4:	08007795 	.word	0x08007795
 80077e8:	08007795 	.word	0x08007795
 80077ec:	08007947 	.word	0x08007947
 80077f0:	08007795 	.word	0x08007795
 80077f4:	08007849 	.word	0x08007849
 80077f8:	08007795 	.word	0x08007795
 80077fc:	08007795 	.word	0x08007795
 8007800:	0800790f 	.word	0x0800790f
 8007804:	680b      	ldr	r3, [r1, #0]
 8007806:	1d1a      	adds	r2, r3, #4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	600a      	str	r2, [r1, #0]
 800780c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007814:	2301      	movs	r3, #1
 8007816:	e0a3      	b.n	8007960 <_printf_i+0x1f4>
 8007818:	6825      	ldr	r5, [r4, #0]
 800781a:	6808      	ldr	r0, [r1, #0]
 800781c:	062e      	lsls	r6, r5, #24
 800781e:	f100 0304 	add.w	r3, r0, #4
 8007822:	d50a      	bpl.n	800783a <_printf_i+0xce>
 8007824:	6805      	ldr	r5, [r0, #0]
 8007826:	600b      	str	r3, [r1, #0]
 8007828:	2d00      	cmp	r5, #0
 800782a:	da03      	bge.n	8007834 <_printf_i+0xc8>
 800782c:	232d      	movs	r3, #45	; 0x2d
 800782e:	426d      	negs	r5, r5
 8007830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007834:	485e      	ldr	r0, [pc, #376]	; (80079b0 <_printf_i+0x244>)
 8007836:	230a      	movs	r3, #10
 8007838:	e019      	b.n	800786e <_printf_i+0x102>
 800783a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800783e:	6805      	ldr	r5, [r0, #0]
 8007840:	600b      	str	r3, [r1, #0]
 8007842:	bf18      	it	ne
 8007844:	b22d      	sxthne	r5, r5
 8007846:	e7ef      	b.n	8007828 <_printf_i+0xbc>
 8007848:	680b      	ldr	r3, [r1, #0]
 800784a:	6825      	ldr	r5, [r4, #0]
 800784c:	1d18      	adds	r0, r3, #4
 800784e:	6008      	str	r0, [r1, #0]
 8007850:	0628      	lsls	r0, r5, #24
 8007852:	d501      	bpl.n	8007858 <_printf_i+0xec>
 8007854:	681d      	ldr	r5, [r3, #0]
 8007856:	e002      	b.n	800785e <_printf_i+0xf2>
 8007858:	0669      	lsls	r1, r5, #25
 800785a:	d5fb      	bpl.n	8007854 <_printf_i+0xe8>
 800785c:	881d      	ldrh	r5, [r3, #0]
 800785e:	4854      	ldr	r0, [pc, #336]	; (80079b0 <_printf_i+0x244>)
 8007860:	2f6f      	cmp	r7, #111	; 0x6f
 8007862:	bf0c      	ite	eq
 8007864:	2308      	moveq	r3, #8
 8007866:	230a      	movne	r3, #10
 8007868:	2100      	movs	r1, #0
 800786a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800786e:	6866      	ldr	r6, [r4, #4]
 8007870:	60a6      	str	r6, [r4, #8]
 8007872:	2e00      	cmp	r6, #0
 8007874:	bfa2      	ittt	ge
 8007876:	6821      	ldrge	r1, [r4, #0]
 8007878:	f021 0104 	bicge.w	r1, r1, #4
 800787c:	6021      	strge	r1, [r4, #0]
 800787e:	b90d      	cbnz	r5, 8007884 <_printf_i+0x118>
 8007880:	2e00      	cmp	r6, #0
 8007882:	d04d      	beq.n	8007920 <_printf_i+0x1b4>
 8007884:	4616      	mov	r6, r2
 8007886:	fbb5 f1f3 	udiv	r1, r5, r3
 800788a:	fb03 5711 	mls	r7, r3, r1, r5
 800788e:	5dc7      	ldrb	r7, [r0, r7]
 8007890:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007894:	462f      	mov	r7, r5
 8007896:	42bb      	cmp	r3, r7
 8007898:	460d      	mov	r5, r1
 800789a:	d9f4      	bls.n	8007886 <_printf_i+0x11a>
 800789c:	2b08      	cmp	r3, #8
 800789e:	d10b      	bne.n	80078b8 <_printf_i+0x14c>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	07df      	lsls	r7, r3, #31
 80078a4:	d508      	bpl.n	80078b8 <_printf_i+0x14c>
 80078a6:	6923      	ldr	r3, [r4, #16]
 80078a8:	6861      	ldr	r1, [r4, #4]
 80078aa:	4299      	cmp	r1, r3
 80078ac:	bfde      	ittt	le
 80078ae:	2330      	movle	r3, #48	; 0x30
 80078b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078b4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078b8:	1b92      	subs	r2, r2, r6
 80078ba:	6122      	str	r2, [r4, #16]
 80078bc:	f8cd a000 	str.w	sl, [sp]
 80078c0:	464b      	mov	r3, r9
 80078c2:	aa03      	add	r2, sp, #12
 80078c4:	4621      	mov	r1, r4
 80078c6:	4640      	mov	r0, r8
 80078c8:	f7ff fee2 	bl	8007690 <_printf_common>
 80078cc:	3001      	adds	r0, #1
 80078ce:	d14c      	bne.n	800796a <_printf_i+0x1fe>
 80078d0:	f04f 30ff 	mov.w	r0, #4294967295
 80078d4:	b004      	add	sp, #16
 80078d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078da:	4835      	ldr	r0, [pc, #212]	; (80079b0 <_printf_i+0x244>)
 80078dc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	680e      	ldr	r6, [r1, #0]
 80078e4:	061f      	lsls	r7, r3, #24
 80078e6:	f856 5b04 	ldr.w	r5, [r6], #4
 80078ea:	600e      	str	r6, [r1, #0]
 80078ec:	d514      	bpl.n	8007918 <_printf_i+0x1ac>
 80078ee:	07d9      	lsls	r1, r3, #31
 80078f0:	bf44      	itt	mi
 80078f2:	f043 0320 	orrmi.w	r3, r3, #32
 80078f6:	6023      	strmi	r3, [r4, #0]
 80078f8:	b91d      	cbnz	r5, 8007902 <_printf_i+0x196>
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	f023 0320 	bic.w	r3, r3, #32
 8007900:	6023      	str	r3, [r4, #0]
 8007902:	2310      	movs	r3, #16
 8007904:	e7b0      	b.n	8007868 <_printf_i+0xfc>
 8007906:	6823      	ldr	r3, [r4, #0]
 8007908:	f043 0320 	orr.w	r3, r3, #32
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	2378      	movs	r3, #120	; 0x78
 8007910:	4828      	ldr	r0, [pc, #160]	; (80079b4 <_printf_i+0x248>)
 8007912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007916:	e7e3      	b.n	80078e0 <_printf_i+0x174>
 8007918:	065e      	lsls	r6, r3, #25
 800791a:	bf48      	it	mi
 800791c:	b2ad      	uxthmi	r5, r5
 800791e:	e7e6      	b.n	80078ee <_printf_i+0x182>
 8007920:	4616      	mov	r6, r2
 8007922:	e7bb      	b.n	800789c <_printf_i+0x130>
 8007924:	680b      	ldr	r3, [r1, #0]
 8007926:	6826      	ldr	r6, [r4, #0]
 8007928:	6960      	ldr	r0, [r4, #20]
 800792a:	1d1d      	adds	r5, r3, #4
 800792c:	600d      	str	r5, [r1, #0]
 800792e:	0635      	lsls	r5, r6, #24
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	d501      	bpl.n	8007938 <_printf_i+0x1cc>
 8007934:	6018      	str	r0, [r3, #0]
 8007936:	e002      	b.n	800793e <_printf_i+0x1d2>
 8007938:	0671      	lsls	r1, r6, #25
 800793a:	d5fb      	bpl.n	8007934 <_printf_i+0x1c8>
 800793c:	8018      	strh	r0, [r3, #0]
 800793e:	2300      	movs	r3, #0
 8007940:	6123      	str	r3, [r4, #16]
 8007942:	4616      	mov	r6, r2
 8007944:	e7ba      	b.n	80078bc <_printf_i+0x150>
 8007946:	680b      	ldr	r3, [r1, #0]
 8007948:	1d1a      	adds	r2, r3, #4
 800794a:	600a      	str	r2, [r1, #0]
 800794c:	681e      	ldr	r6, [r3, #0]
 800794e:	6862      	ldr	r2, [r4, #4]
 8007950:	2100      	movs	r1, #0
 8007952:	4630      	mov	r0, r6
 8007954:	f7f8 fc44 	bl	80001e0 <memchr>
 8007958:	b108      	cbz	r0, 800795e <_printf_i+0x1f2>
 800795a:	1b80      	subs	r0, r0, r6
 800795c:	6060      	str	r0, [r4, #4]
 800795e:	6863      	ldr	r3, [r4, #4]
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	2300      	movs	r3, #0
 8007964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007968:	e7a8      	b.n	80078bc <_printf_i+0x150>
 800796a:	6923      	ldr	r3, [r4, #16]
 800796c:	4632      	mov	r2, r6
 800796e:	4649      	mov	r1, r9
 8007970:	4640      	mov	r0, r8
 8007972:	47d0      	blx	sl
 8007974:	3001      	adds	r0, #1
 8007976:	d0ab      	beq.n	80078d0 <_printf_i+0x164>
 8007978:	6823      	ldr	r3, [r4, #0]
 800797a:	079b      	lsls	r3, r3, #30
 800797c:	d413      	bmi.n	80079a6 <_printf_i+0x23a>
 800797e:	68e0      	ldr	r0, [r4, #12]
 8007980:	9b03      	ldr	r3, [sp, #12]
 8007982:	4298      	cmp	r0, r3
 8007984:	bfb8      	it	lt
 8007986:	4618      	movlt	r0, r3
 8007988:	e7a4      	b.n	80078d4 <_printf_i+0x168>
 800798a:	2301      	movs	r3, #1
 800798c:	4632      	mov	r2, r6
 800798e:	4649      	mov	r1, r9
 8007990:	4640      	mov	r0, r8
 8007992:	47d0      	blx	sl
 8007994:	3001      	adds	r0, #1
 8007996:	d09b      	beq.n	80078d0 <_printf_i+0x164>
 8007998:	3501      	adds	r5, #1
 800799a:	68e3      	ldr	r3, [r4, #12]
 800799c:	9903      	ldr	r1, [sp, #12]
 800799e:	1a5b      	subs	r3, r3, r1
 80079a0:	42ab      	cmp	r3, r5
 80079a2:	dcf2      	bgt.n	800798a <_printf_i+0x21e>
 80079a4:	e7eb      	b.n	800797e <_printf_i+0x212>
 80079a6:	2500      	movs	r5, #0
 80079a8:	f104 0619 	add.w	r6, r4, #25
 80079ac:	e7f5      	b.n	800799a <_printf_i+0x22e>
 80079ae:	bf00      	nop
 80079b0:	08009fa6 	.word	0x08009fa6
 80079b4:	08009fb7 	.word	0x08009fb7

080079b8 <sniprintf>:
 80079b8:	b40c      	push	{r2, r3}
 80079ba:	b530      	push	{r4, r5, lr}
 80079bc:	4b17      	ldr	r3, [pc, #92]	; (8007a1c <sniprintf+0x64>)
 80079be:	1e0c      	subs	r4, r1, #0
 80079c0:	681d      	ldr	r5, [r3, #0]
 80079c2:	b09d      	sub	sp, #116	; 0x74
 80079c4:	da08      	bge.n	80079d8 <sniprintf+0x20>
 80079c6:	238b      	movs	r3, #139	; 0x8b
 80079c8:	602b      	str	r3, [r5, #0]
 80079ca:	f04f 30ff 	mov.w	r0, #4294967295
 80079ce:	b01d      	add	sp, #116	; 0x74
 80079d0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80079d4:	b002      	add	sp, #8
 80079d6:	4770      	bx	lr
 80079d8:	f44f 7302 	mov.w	r3, #520	; 0x208
 80079dc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80079e0:	bf14      	ite	ne
 80079e2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80079e6:	4623      	moveq	r3, r4
 80079e8:	9304      	str	r3, [sp, #16]
 80079ea:	9307      	str	r3, [sp, #28]
 80079ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80079f0:	9002      	str	r0, [sp, #8]
 80079f2:	9006      	str	r0, [sp, #24]
 80079f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80079f8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80079fa:	ab21      	add	r3, sp, #132	; 0x84
 80079fc:	a902      	add	r1, sp, #8
 80079fe:	4628      	mov	r0, r5
 8007a00:	9301      	str	r3, [sp, #4]
 8007a02:	f001 fb25 	bl	8009050 <_svfiprintf_r>
 8007a06:	1c43      	adds	r3, r0, #1
 8007a08:	bfbc      	itt	lt
 8007a0a:	238b      	movlt	r3, #139	; 0x8b
 8007a0c:	602b      	strlt	r3, [r5, #0]
 8007a0e:	2c00      	cmp	r4, #0
 8007a10:	d0dd      	beq.n	80079ce <sniprintf+0x16>
 8007a12:	9b02      	ldr	r3, [sp, #8]
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
 8007a18:	e7d9      	b.n	80079ce <sniprintf+0x16>
 8007a1a:	bf00      	nop
 8007a1c:	2000014c 	.word	0x2000014c

08007a20 <quorem>:
 8007a20:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	6903      	ldr	r3, [r0, #16]
 8007a26:	690c      	ldr	r4, [r1, #16]
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	4607      	mov	r7, r0
 8007a2c:	f2c0 8081 	blt.w	8007b32 <quorem+0x112>
 8007a30:	3c01      	subs	r4, #1
 8007a32:	f101 0814 	add.w	r8, r1, #20
 8007a36:	f100 0514 	add.w	r5, r0, #20
 8007a3a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007a3e:	9301      	str	r3, [sp, #4]
 8007a40:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007a44:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007a50:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007a54:	fbb2 f6f3 	udiv	r6, r2, r3
 8007a58:	d331      	bcc.n	8007abe <quorem+0x9e>
 8007a5a:	f04f 0e00 	mov.w	lr, #0
 8007a5e:	4640      	mov	r0, r8
 8007a60:	46ac      	mov	ip, r5
 8007a62:	46f2      	mov	sl, lr
 8007a64:	f850 2b04 	ldr.w	r2, [r0], #4
 8007a68:	b293      	uxth	r3, r2
 8007a6a:	fb06 e303 	mla	r3, r6, r3, lr
 8007a6e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	ebaa 0303 	sub.w	r3, sl, r3
 8007a78:	0c12      	lsrs	r2, r2, #16
 8007a7a:	f8dc a000 	ldr.w	sl, [ip]
 8007a7e:	fb06 e202 	mla	r2, r6, r2, lr
 8007a82:	fa13 f38a 	uxtah	r3, r3, sl
 8007a86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007a8a:	fa1f fa82 	uxth.w	sl, r2
 8007a8e:	f8dc 2000 	ldr.w	r2, [ip]
 8007a92:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007a96:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007aa0:	4581      	cmp	r9, r0
 8007aa2:	f84c 3b04 	str.w	r3, [ip], #4
 8007aa6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007aaa:	d2db      	bcs.n	8007a64 <quorem+0x44>
 8007aac:	f855 300b 	ldr.w	r3, [r5, fp]
 8007ab0:	b92b      	cbnz	r3, 8007abe <quorem+0x9e>
 8007ab2:	9b01      	ldr	r3, [sp, #4]
 8007ab4:	3b04      	subs	r3, #4
 8007ab6:	429d      	cmp	r5, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	d32e      	bcc.n	8007b1a <quorem+0xfa>
 8007abc:	613c      	str	r4, [r7, #16]
 8007abe:	4638      	mov	r0, r7
 8007ac0:	f001 f8b0 	bl	8008c24 <__mcmp>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	db24      	blt.n	8007b12 <quorem+0xf2>
 8007ac8:	3601      	adds	r6, #1
 8007aca:	4628      	mov	r0, r5
 8007acc:	f04f 0c00 	mov.w	ip, #0
 8007ad0:	f858 2b04 	ldr.w	r2, [r8], #4
 8007ad4:	f8d0 e000 	ldr.w	lr, [r0]
 8007ad8:	b293      	uxth	r3, r2
 8007ada:	ebac 0303 	sub.w	r3, ip, r3
 8007ade:	0c12      	lsrs	r2, r2, #16
 8007ae0:	fa13 f38e 	uxtah	r3, r3, lr
 8007ae4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007ae8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007af2:	45c1      	cmp	r9, r8
 8007af4:	f840 3b04 	str.w	r3, [r0], #4
 8007af8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007afc:	d2e8      	bcs.n	8007ad0 <quorem+0xb0>
 8007afe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007b02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007b06:	b922      	cbnz	r2, 8007b12 <quorem+0xf2>
 8007b08:	3b04      	subs	r3, #4
 8007b0a:	429d      	cmp	r5, r3
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	d30a      	bcc.n	8007b26 <quorem+0x106>
 8007b10:	613c      	str	r4, [r7, #16]
 8007b12:	4630      	mov	r0, r6
 8007b14:	b003      	add	sp, #12
 8007b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b1a:	6812      	ldr	r2, [r2, #0]
 8007b1c:	3b04      	subs	r3, #4
 8007b1e:	2a00      	cmp	r2, #0
 8007b20:	d1cc      	bne.n	8007abc <quorem+0x9c>
 8007b22:	3c01      	subs	r4, #1
 8007b24:	e7c7      	b.n	8007ab6 <quorem+0x96>
 8007b26:	6812      	ldr	r2, [r2, #0]
 8007b28:	3b04      	subs	r3, #4
 8007b2a:	2a00      	cmp	r2, #0
 8007b2c:	d1f0      	bne.n	8007b10 <quorem+0xf0>
 8007b2e:	3c01      	subs	r4, #1
 8007b30:	e7eb      	b.n	8007b0a <quorem+0xea>
 8007b32:	2000      	movs	r0, #0
 8007b34:	e7ee      	b.n	8007b14 <quorem+0xf4>
	...

08007b38 <_dtoa_r>:
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ed2d 8b02 	vpush	{d8}
 8007b40:	ec57 6b10 	vmov	r6, r7, d0
 8007b44:	b095      	sub	sp, #84	; 0x54
 8007b46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007b48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007b4c:	9105      	str	r1, [sp, #20]
 8007b4e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8007b52:	4604      	mov	r4, r0
 8007b54:	9209      	str	r2, [sp, #36]	; 0x24
 8007b56:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b58:	b975      	cbnz	r5, 8007b78 <_dtoa_r+0x40>
 8007b5a:	2010      	movs	r0, #16
 8007b5c:	f000 fddc 	bl	8008718 <malloc>
 8007b60:	4602      	mov	r2, r0
 8007b62:	6260      	str	r0, [r4, #36]	; 0x24
 8007b64:	b920      	cbnz	r0, 8007b70 <_dtoa_r+0x38>
 8007b66:	4bb2      	ldr	r3, [pc, #712]	; (8007e30 <_dtoa_r+0x2f8>)
 8007b68:	21ea      	movs	r1, #234	; 0xea
 8007b6a:	48b2      	ldr	r0, [pc, #712]	; (8007e34 <_dtoa_r+0x2fc>)
 8007b6c:	f001 fb80 	bl	8009270 <__assert_func>
 8007b70:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007b74:	6005      	str	r5, [r0, #0]
 8007b76:	60c5      	str	r5, [r0, #12]
 8007b78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b7a:	6819      	ldr	r1, [r3, #0]
 8007b7c:	b151      	cbz	r1, 8007b94 <_dtoa_r+0x5c>
 8007b7e:	685a      	ldr	r2, [r3, #4]
 8007b80:	604a      	str	r2, [r1, #4]
 8007b82:	2301      	movs	r3, #1
 8007b84:	4093      	lsls	r3, r2
 8007b86:	608b      	str	r3, [r1, #8]
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 fe0d 	bl	80087a8 <_Bfree>
 8007b8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	1e3b      	subs	r3, r7, #0
 8007b96:	bfb9      	ittee	lt
 8007b98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007b9c:	9303      	strlt	r3, [sp, #12]
 8007b9e:	2300      	movge	r3, #0
 8007ba0:	f8c8 3000 	strge.w	r3, [r8]
 8007ba4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007ba8:	4ba3      	ldr	r3, [pc, #652]	; (8007e38 <_dtoa_r+0x300>)
 8007baa:	bfbc      	itt	lt
 8007bac:	2201      	movlt	r2, #1
 8007bae:	f8c8 2000 	strlt.w	r2, [r8]
 8007bb2:	ea33 0309 	bics.w	r3, r3, r9
 8007bb6:	d11b      	bne.n	8007bf0 <_dtoa_r+0xb8>
 8007bb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007bba:	f242 730f 	movw	r3, #9999	; 0x270f
 8007bbe:	6013      	str	r3, [r2, #0]
 8007bc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bc4:	4333      	orrs	r3, r6
 8007bc6:	f000 857a 	beq.w	80086be <_dtoa_r+0xb86>
 8007bca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007bcc:	b963      	cbnz	r3, 8007be8 <_dtoa_r+0xb0>
 8007bce:	4b9b      	ldr	r3, [pc, #620]	; (8007e3c <_dtoa_r+0x304>)
 8007bd0:	e024      	b.n	8007c1c <_dtoa_r+0xe4>
 8007bd2:	4b9b      	ldr	r3, [pc, #620]	; (8007e40 <_dtoa_r+0x308>)
 8007bd4:	9300      	str	r3, [sp, #0]
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007bda:	6013      	str	r3, [r2, #0]
 8007bdc:	9800      	ldr	r0, [sp, #0]
 8007bde:	b015      	add	sp, #84	; 0x54
 8007be0:	ecbd 8b02 	vpop	{d8}
 8007be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007be8:	4b94      	ldr	r3, [pc, #592]	; (8007e3c <_dtoa_r+0x304>)
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	3303      	adds	r3, #3
 8007bee:	e7f3      	b.n	8007bd8 <_dtoa_r+0xa0>
 8007bf0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	ec51 0b17 	vmov	r0, r1, d7
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007c00:	f7f8 ff62 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c04:	4680      	mov	r8, r0
 8007c06:	b158      	cbz	r0, 8007c20 <_dtoa_r+0xe8>
 8007c08:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	6013      	str	r3, [r2, #0]
 8007c0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	f000 8551 	beq.w	80086b8 <_dtoa_r+0xb80>
 8007c16:	488b      	ldr	r0, [pc, #556]	; (8007e44 <_dtoa_r+0x30c>)
 8007c18:	6018      	str	r0, [r3, #0]
 8007c1a:	1e43      	subs	r3, r0, #1
 8007c1c:	9300      	str	r3, [sp, #0]
 8007c1e:	e7dd      	b.n	8007bdc <_dtoa_r+0xa4>
 8007c20:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007c24:	aa12      	add	r2, sp, #72	; 0x48
 8007c26:	a913      	add	r1, sp, #76	; 0x4c
 8007c28:	4620      	mov	r0, r4
 8007c2a:	f001 f89f 	bl	8008d6c <__d2b>
 8007c2e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007c32:	4683      	mov	fp, r0
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	d07c      	beq.n	8007d32 <_dtoa_r+0x1fa>
 8007c38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c3a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8007c3e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007c42:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8007c46:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007c4a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007c4e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007c52:	4b7d      	ldr	r3, [pc, #500]	; (8007e48 <_dtoa_r+0x310>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	4630      	mov	r0, r6
 8007c58:	4639      	mov	r1, r7
 8007c5a:	f7f8 fb15 	bl	8000288 <__aeabi_dsub>
 8007c5e:	a36e      	add	r3, pc, #440	; (adr r3, 8007e18 <_dtoa_r+0x2e0>)
 8007c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c64:	f7f8 fcc8 	bl	80005f8 <__aeabi_dmul>
 8007c68:	a36d      	add	r3, pc, #436	; (adr r3, 8007e20 <_dtoa_r+0x2e8>)
 8007c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6e:	f7f8 fb0d 	bl	800028c <__adddf3>
 8007c72:	4606      	mov	r6, r0
 8007c74:	4628      	mov	r0, r5
 8007c76:	460f      	mov	r7, r1
 8007c78:	f7f8 fc54 	bl	8000524 <__aeabi_i2d>
 8007c7c:	a36a      	add	r3, pc, #424	; (adr r3, 8007e28 <_dtoa_r+0x2f0>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fcb9 	bl	80005f8 <__aeabi_dmul>
 8007c86:	4602      	mov	r2, r0
 8007c88:	460b      	mov	r3, r1
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	f7f8 fafd 	bl	800028c <__adddf3>
 8007c92:	4606      	mov	r6, r0
 8007c94:	460f      	mov	r7, r1
 8007c96:	f7f8 ff5f 	bl	8000b58 <__aeabi_d2iz>
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	4682      	mov	sl, r0
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 ff1a 	bl	8000adc <__aeabi_dcmplt>
 8007ca8:	b148      	cbz	r0, 8007cbe <_dtoa_r+0x186>
 8007caa:	4650      	mov	r0, sl
 8007cac:	f7f8 fc3a 	bl	8000524 <__aeabi_i2d>
 8007cb0:	4632      	mov	r2, r6
 8007cb2:	463b      	mov	r3, r7
 8007cb4:	f7f8 ff08 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cb8:	b908      	cbnz	r0, 8007cbe <_dtoa_r+0x186>
 8007cba:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cbe:	f1ba 0f16 	cmp.w	sl, #22
 8007cc2:	d854      	bhi.n	8007d6e <_dtoa_r+0x236>
 8007cc4:	4b61      	ldr	r3, [pc, #388]	; (8007e4c <_dtoa_r+0x314>)
 8007cc6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007cd2:	f7f8 ff03 	bl	8000adc <__aeabi_dcmplt>
 8007cd6:	2800      	cmp	r0, #0
 8007cd8:	d04b      	beq.n	8007d72 <_dtoa_r+0x23a>
 8007cda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cde:	2300      	movs	r3, #0
 8007ce0:	930e      	str	r3, [sp, #56]	; 0x38
 8007ce2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007ce4:	1b5d      	subs	r5, r3, r5
 8007ce6:	1e6b      	subs	r3, r5, #1
 8007ce8:	9304      	str	r3, [sp, #16]
 8007cea:	bf43      	ittte	mi
 8007cec:	2300      	movmi	r3, #0
 8007cee:	f1c5 0801 	rsbmi	r8, r5, #1
 8007cf2:	9304      	strmi	r3, [sp, #16]
 8007cf4:	f04f 0800 	movpl.w	r8, #0
 8007cf8:	f1ba 0f00 	cmp.w	sl, #0
 8007cfc:	db3b      	blt.n	8007d76 <_dtoa_r+0x23e>
 8007cfe:	9b04      	ldr	r3, [sp, #16]
 8007d00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007d04:	4453      	add	r3, sl
 8007d06:	9304      	str	r3, [sp, #16]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9306      	str	r3, [sp, #24]
 8007d0c:	9b05      	ldr	r3, [sp, #20]
 8007d0e:	2b09      	cmp	r3, #9
 8007d10:	d869      	bhi.n	8007de6 <_dtoa_r+0x2ae>
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	bfc4      	itt	gt
 8007d16:	3b04      	subgt	r3, #4
 8007d18:	9305      	strgt	r3, [sp, #20]
 8007d1a:	9b05      	ldr	r3, [sp, #20]
 8007d1c:	f1a3 0302 	sub.w	r3, r3, #2
 8007d20:	bfcc      	ite	gt
 8007d22:	2500      	movgt	r5, #0
 8007d24:	2501      	movle	r5, #1
 8007d26:	2b03      	cmp	r3, #3
 8007d28:	d869      	bhi.n	8007dfe <_dtoa_r+0x2c6>
 8007d2a:	e8df f003 	tbb	[pc, r3]
 8007d2e:	4e2c      	.short	0x4e2c
 8007d30:	5a4c      	.short	0x5a4c
 8007d32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8007d36:	441d      	add	r5, r3
 8007d38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007d3c:	2b20      	cmp	r3, #32
 8007d3e:	bfc1      	itttt	gt
 8007d40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007d44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007d48:	fa09 f303 	lslgt.w	r3, r9, r3
 8007d4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007d50:	bfda      	itte	le
 8007d52:	f1c3 0320 	rsble	r3, r3, #32
 8007d56:	fa06 f003 	lslle.w	r0, r6, r3
 8007d5a:	4318      	orrgt	r0, r3
 8007d5c:	f7f8 fbd2 	bl	8000504 <__aeabi_ui2d>
 8007d60:	2301      	movs	r3, #1
 8007d62:	4606      	mov	r6, r0
 8007d64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007d68:	3d01      	subs	r5, #1
 8007d6a:	9310      	str	r3, [sp, #64]	; 0x40
 8007d6c:	e771      	b.n	8007c52 <_dtoa_r+0x11a>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	e7b6      	b.n	8007ce0 <_dtoa_r+0x1a8>
 8007d72:	900e      	str	r0, [sp, #56]	; 0x38
 8007d74:	e7b5      	b.n	8007ce2 <_dtoa_r+0x1aa>
 8007d76:	f1ca 0300 	rsb	r3, sl, #0
 8007d7a:	9306      	str	r3, [sp, #24]
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	eba8 080a 	sub.w	r8, r8, sl
 8007d82:	930d      	str	r3, [sp, #52]	; 0x34
 8007d84:	e7c2      	b.n	8007d0c <_dtoa_r+0x1d4>
 8007d86:	2300      	movs	r3, #0
 8007d88:	9308      	str	r3, [sp, #32]
 8007d8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	dc39      	bgt.n	8007e04 <_dtoa_r+0x2cc>
 8007d90:	f04f 0901 	mov.w	r9, #1
 8007d94:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d98:	464b      	mov	r3, r9
 8007d9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007d9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007da0:	2200      	movs	r2, #0
 8007da2:	6042      	str	r2, [r0, #4]
 8007da4:	2204      	movs	r2, #4
 8007da6:	f102 0614 	add.w	r6, r2, #20
 8007daa:	429e      	cmp	r6, r3
 8007dac:	6841      	ldr	r1, [r0, #4]
 8007dae:	d92f      	bls.n	8007e10 <_dtoa_r+0x2d8>
 8007db0:	4620      	mov	r0, r4
 8007db2:	f000 fcb9 	bl	8008728 <_Balloc>
 8007db6:	9000      	str	r0, [sp, #0]
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d14b      	bne.n	8007e54 <_dtoa_r+0x31c>
 8007dbc:	4b24      	ldr	r3, [pc, #144]	; (8007e50 <_dtoa_r+0x318>)
 8007dbe:	4602      	mov	r2, r0
 8007dc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007dc4:	e6d1      	b.n	8007b6a <_dtoa_r+0x32>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e7de      	b.n	8007d88 <_dtoa_r+0x250>
 8007dca:	2300      	movs	r3, #0
 8007dcc:	9308      	str	r3, [sp, #32]
 8007dce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dd0:	eb0a 0903 	add.w	r9, sl, r3
 8007dd4:	f109 0301 	add.w	r3, r9, #1
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	9301      	str	r3, [sp, #4]
 8007ddc:	bfb8      	it	lt
 8007dde:	2301      	movlt	r3, #1
 8007de0:	e7dd      	b.n	8007d9e <_dtoa_r+0x266>
 8007de2:	2301      	movs	r3, #1
 8007de4:	e7f2      	b.n	8007dcc <_dtoa_r+0x294>
 8007de6:	2501      	movs	r5, #1
 8007de8:	2300      	movs	r3, #0
 8007dea:	9305      	str	r3, [sp, #20]
 8007dec:	9508      	str	r5, [sp, #32]
 8007dee:	f04f 39ff 	mov.w	r9, #4294967295
 8007df2:	2200      	movs	r2, #0
 8007df4:	f8cd 9004 	str.w	r9, [sp, #4]
 8007df8:	2312      	movs	r3, #18
 8007dfa:	9209      	str	r2, [sp, #36]	; 0x24
 8007dfc:	e7cf      	b.n	8007d9e <_dtoa_r+0x266>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	9308      	str	r3, [sp, #32]
 8007e02:	e7f4      	b.n	8007dee <_dtoa_r+0x2b6>
 8007e04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007e08:	f8cd 9004 	str.w	r9, [sp, #4]
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	e7c6      	b.n	8007d9e <_dtoa_r+0x266>
 8007e10:	3101      	adds	r1, #1
 8007e12:	6041      	str	r1, [r0, #4]
 8007e14:	0052      	lsls	r2, r2, #1
 8007e16:	e7c6      	b.n	8007da6 <_dtoa_r+0x26e>
 8007e18:	636f4361 	.word	0x636f4361
 8007e1c:	3fd287a7 	.word	0x3fd287a7
 8007e20:	8b60c8b3 	.word	0x8b60c8b3
 8007e24:	3fc68a28 	.word	0x3fc68a28
 8007e28:	509f79fb 	.word	0x509f79fb
 8007e2c:	3fd34413 	.word	0x3fd34413
 8007e30:	08009fd5 	.word	0x08009fd5
 8007e34:	08009fec 	.word	0x08009fec
 8007e38:	7ff00000 	.word	0x7ff00000
 8007e3c:	08009fd1 	.word	0x08009fd1
 8007e40:	08009fc8 	.word	0x08009fc8
 8007e44:	08009fa5 	.word	0x08009fa5
 8007e48:	3ff80000 	.word	0x3ff80000
 8007e4c:	0800a0e8 	.word	0x0800a0e8
 8007e50:	0800a04b 	.word	0x0800a04b
 8007e54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e56:	9a00      	ldr	r2, [sp, #0]
 8007e58:	601a      	str	r2, [r3, #0]
 8007e5a:	9b01      	ldr	r3, [sp, #4]
 8007e5c:	2b0e      	cmp	r3, #14
 8007e5e:	f200 80ad 	bhi.w	8007fbc <_dtoa_r+0x484>
 8007e62:	2d00      	cmp	r5, #0
 8007e64:	f000 80aa 	beq.w	8007fbc <_dtoa_r+0x484>
 8007e68:	f1ba 0f00 	cmp.w	sl, #0
 8007e6c:	dd36      	ble.n	8007edc <_dtoa_r+0x3a4>
 8007e6e:	4ac3      	ldr	r2, [pc, #780]	; (800817c <_dtoa_r+0x644>)
 8007e70:	f00a 030f 	and.w	r3, sl, #15
 8007e74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007e78:	ed93 7b00 	vldr	d7, [r3]
 8007e7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8007e80:	ea4f 172a 	mov.w	r7, sl, asr #4
 8007e84:	eeb0 8a47 	vmov.f32	s16, s14
 8007e88:	eef0 8a67 	vmov.f32	s17, s15
 8007e8c:	d016      	beq.n	8007ebc <_dtoa_r+0x384>
 8007e8e:	4bbc      	ldr	r3, [pc, #752]	; (8008180 <_dtoa_r+0x648>)
 8007e90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007e94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007e98:	f7f8 fcd8 	bl	800084c <__aeabi_ddiv>
 8007e9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea0:	f007 070f 	and.w	r7, r7, #15
 8007ea4:	2503      	movs	r5, #3
 8007ea6:	4eb6      	ldr	r6, [pc, #728]	; (8008180 <_dtoa_r+0x648>)
 8007ea8:	b957      	cbnz	r7, 8007ec0 <_dtoa_r+0x388>
 8007eaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007eae:	ec53 2b18 	vmov	r2, r3, d8
 8007eb2:	f7f8 fccb 	bl	800084c <__aeabi_ddiv>
 8007eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007eba:	e029      	b.n	8007f10 <_dtoa_r+0x3d8>
 8007ebc:	2502      	movs	r5, #2
 8007ebe:	e7f2      	b.n	8007ea6 <_dtoa_r+0x36e>
 8007ec0:	07f9      	lsls	r1, r7, #31
 8007ec2:	d508      	bpl.n	8007ed6 <_dtoa_r+0x39e>
 8007ec4:	ec51 0b18 	vmov	r0, r1, d8
 8007ec8:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ecc:	f7f8 fb94 	bl	80005f8 <__aeabi_dmul>
 8007ed0:	ec41 0b18 	vmov	d8, r0, r1
 8007ed4:	3501      	adds	r5, #1
 8007ed6:	107f      	asrs	r7, r7, #1
 8007ed8:	3608      	adds	r6, #8
 8007eda:	e7e5      	b.n	8007ea8 <_dtoa_r+0x370>
 8007edc:	f000 80a6 	beq.w	800802c <_dtoa_r+0x4f4>
 8007ee0:	f1ca 0600 	rsb	r6, sl, #0
 8007ee4:	4ba5      	ldr	r3, [pc, #660]	; (800817c <_dtoa_r+0x644>)
 8007ee6:	4fa6      	ldr	r7, [pc, #664]	; (8008180 <_dtoa_r+0x648>)
 8007ee8:	f006 020f 	and.w	r2, r6, #15
 8007eec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007ef8:	f7f8 fb7e 	bl	80005f8 <__aeabi_dmul>
 8007efc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f00:	1136      	asrs	r6, r6, #4
 8007f02:	2300      	movs	r3, #0
 8007f04:	2502      	movs	r5, #2
 8007f06:	2e00      	cmp	r6, #0
 8007f08:	f040 8085 	bne.w	8008016 <_dtoa_r+0x4de>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1d2      	bne.n	8007eb6 <_dtoa_r+0x37e>
 8007f10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 808c 	beq.w	8008030 <_dtoa_r+0x4f8>
 8007f18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f1c:	4b99      	ldr	r3, [pc, #612]	; (8008184 <_dtoa_r+0x64c>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	4630      	mov	r0, r6
 8007f22:	4639      	mov	r1, r7
 8007f24:	f7f8 fdda 	bl	8000adc <__aeabi_dcmplt>
 8007f28:	2800      	cmp	r0, #0
 8007f2a:	f000 8081 	beq.w	8008030 <_dtoa_r+0x4f8>
 8007f2e:	9b01      	ldr	r3, [sp, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d07d      	beq.n	8008030 <_dtoa_r+0x4f8>
 8007f34:	f1b9 0f00 	cmp.w	r9, #0
 8007f38:	dd3c      	ble.n	8007fb4 <_dtoa_r+0x47c>
 8007f3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007f3e:	9307      	str	r3, [sp, #28]
 8007f40:	2200      	movs	r2, #0
 8007f42:	4b91      	ldr	r3, [pc, #580]	; (8008188 <_dtoa_r+0x650>)
 8007f44:	4630      	mov	r0, r6
 8007f46:	4639      	mov	r1, r7
 8007f48:	f7f8 fb56 	bl	80005f8 <__aeabi_dmul>
 8007f4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f50:	3501      	adds	r5, #1
 8007f52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8007f56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007f5a:	4628      	mov	r0, r5
 8007f5c:	f7f8 fae2 	bl	8000524 <__aeabi_i2d>
 8007f60:	4632      	mov	r2, r6
 8007f62:	463b      	mov	r3, r7
 8007f64:	f7f8 fb48 	bl	80005f8 <__aeabi_dmul>
 8007f68:	4b88      	ldr	r3, [pc, #544]	; (800818c <_dtoa_r+0x654>)
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f7f8 f98e 	bl	800028c <__adddf3>
 8007f70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8007f74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f78:	9303      	str	r3, [sp, #12]
 8007f7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d15c      	bne.n	800803a <_dtoa_r+0x502>
 8007f80:	4b83      	ldr	r3, [pc, #524]	; (8008190 <_dtoa_r+0x658>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	4630      	mov	r0, r6
 8007f86:	4639      	mov	r1, r7
 8007f88:	f7f8 f97e 	bl	8000288 <__aeabi_dsub>
 8007f8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f90:	4606      	mov	r6, r0
 8007f92:	460f      	mov	r7, r1
 8007f94:	f7f8 fdc0 	bl	8000b18 <__aeabi_dcmpgt>
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	f040 8296 	bne.w	80084ca <_dtoa_r+0x992>
 8007f9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fa8:	4639      	mov	r1, r7
 8007faa:	f7f8 fd97 	bl	8000adc <__aeabi_dcmplt>
 8007fae:	2800      	cmp	r0, #0
 8007fb0:	f040 8288 	bne.w	80084c4 <_dtoa_r+0x98c>
 8007fb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007fb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	f2c0 8158 	blt.w	8008274 <_dtoa_r+0x73c>
 8007fc4:	f1ba 0f0e 	cmp.w	sl, #14
 8007fc8:	f300 8154 	bgt.w	8008274 <_dtoa_r+0x73c>
 8007fcc:	4b6b      	ldr	r3, [pc, #428]	; (800817c <_dtoa_r+0x644>)
 8007fce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007fd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	f280 80e3 	bge.w	80081a4 <_dtoa_r+0x66c>
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f300 80df 	bgt.w	80081a4 <_dtoa_r+0x66c>
 8007fe6:	f040 826d 	bne.w	80084c4 <_dtoa_r+0x98c>
 8007fea:	4b69      	ldr	r3, [pc, #420]	; (8008190 <_dtoa_r+0x658>)
 8007fec:	2200      	movs	r2, #0
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 fb01 	bl	80005f8 <__aeabi_dmul>
 8007ff6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ffa:	f7f8 fd83 	bl	8000b04 <__aeabi_dcmpge>
 8007ffe:	9e01      	ldr	r6, [sp, #4]
 8008000:	4637      	mov	r7, r6
 8008002:	2800      	cmp	r0, #0
 8008004:	f040 8243 	bne.w	800848e <_dtoa_r+0x956>
 8008008:	9d00      	ldr	r5, [sp, #0]
 800800a:	2331      	movs	r3, #49	; 0x31
 800800c:	f805 3b01 	strb.w	r3, [r5], #1
 8008010:	f10a 0a01 	add.w	sl, sl, #1
 8008014:	e23f      	b.n	8008496 <_dtoa_r+0x95e>
 8008016:	07f2      	lsls	r2, r6, #31
 8008018:	d505      	bpl.n	8008026 <_dtoa_r+0x4ee>
 800801a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800801e:	f7f8 faeb 	bl	80005f8 <__aeabi_dmul>
 8008022:	3501      	adds	r5, #1
 8008024:	2301      	movs	r3, #1
 8008026:	1076      	asrs	r6, r6, #1
 8008028:	3708      	adds	r7, #8
 800802a:	e76c      	b.n	8007f06 <_dtoa_r+0x3ce>
 800802c:	2502      	movs	r5, #2
 800802e:	e76f      	b.n	8007f10 <_dtoa_r+0x3d8>
 8008030:	9b01      	ldr	r3, [sp, #4]
 8008032:	f8cd a01c 	str.w	sl, [sp, #28]
 8008036:	930c      	str	r3, [sp, #48]	; 0x30
 8008038:	e78d      	b.n	8007f56 <_dtoa_r+0x41e>
 800803a:	9900      	ldr	r1, [sp, #0]
 800803c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800803e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008040:	4b4e      	ldr	r3, [pc, #312]	; (800817c <_dtoa_r+0x644>)
 8008042:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008046:	4401      	add	r1, r0
 8008048:	9102      	str	r1, [sp, #8]
 800804a:	9908      	ldr	r1, [sp, #32]
 800804c:	eeb0 8a47 	vmov.f32	s16, s14
 8008050:	eef0 8a67 	vmov.f32	s17, s15
 8008054:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008058:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800805c:	2900      	cmp	r1, #0
 800805e:	d045      	beq.n	80080ec <_dtoa_r+0x5b4>
 8008060:	494c      	ldr	r1, [pc, #304]	; (8008194 <_dtoa_r+0x65c>)
 8008062:	2000      	movs	r0, #0
 8008064:	f7f8 fbf2 	bl	800084c <__aeabi_ddiv>
 8008068:	ec53 2b18 	vmov	r2, r3, d8
 800806c:	f7f8 f90c 	bl	8000288 <__aeabi_dsub>
 8008070:	9d00      	ldr	r5, [sp, #0]
 8008072:	ec41 0b18 	vmov	d8, r0, r1
 8008076:	4639      	mov	r1, r7
 8008078:	4630      	mov	r0, r6
 800807a:	f7f8 fd6d 	bl	8000b58 <__aeabi_d2iz>
 800807e:	900c      	str	r0, [sp, #48]	; 0x30
 8008080:	f7f8 fa50 	bl	8000524 <__aeabi_i2d>
 8008084:	4602      	mov	r2, r0
 8008086:	460b      	mov	r3, r1
 8008088:	4630      	mov	r0, r6
 800808a:	4639      	mov	r1, r7
 800808c:	f7f8 f8fc 	bl	8000288 <__aeabi_dsub>
 8008090:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008092:	3330      	adds	r3, #48	; 0x30
 8008094:	f805 3b01 	strb.w	r3, [r5], #1
 8008098:	ec53 2b18 	vmov	r2, r3, d8
 800809c:	4606      	mov	r6, r0
 800809e:	460f      	mov	r7, r1
 80080a0:	f7f8 fd1c 	bl	8000adc <__aeabi_dcmplt>
 80080a4:	2800      	cmp	r0, #0
 80080a6:	d165      	bne.n	8008174 <_dtoa_r+0x63c>
 80080a8:	4632      	mov	r2, r6
 80080aa:	463b      	mov	r3, r7
 80080ac:	4935      	ldr	r1, [pc, #212]	; (8008184 <_dtoa_r+0x64c>)
 80080ae:	2000      	movs	r0, #0
 80080b0:	f7f8 f8ea 	bl	8000288 <__aeabi_dsub>
 80080b4:	ec53 2b18 	vmov	r2, r3, d8
 80080b8:	f7f8 fd10 	bl	8000adc <__aeabi_dcmplt>
 80080bc:	2800      	cmp	r0, #0
 80080be:	f040 80b9 	bne.w	8008234 <_dtoa_r+0x6fc>
 80080c2:	9b02      	ldr	r3, [sp, #8]
 80080c4:	429d      	cmp	r5, r3
 80080c6:	f43f af75 	beq.w	8007fb4 <_dtoa_r+0x47c>
 80080ca:	4b2f      	ldr	r3, [pc, #188]	; (8008188 <_dtoa_r+0x650>)
 80080cc:	ec51 0b18 	vmov	r0, r1, d8
 80080d0:	2200      	movs	r2, #0
 80080d2:	f7f8 fa91 	bl	80005f8 <__aeabi_dmul>
 80080d6:	4b2c      	ldr	r3, [pc, #176]	; (8008188 <_dtoa_r+0x650>)
 80080d8:	ec41 0b18 	vmov	d8, r0, r1
 80080dc:	2200      	movs	r2, #0
 80080de:	4630      	mov	r0, r6
 80080e0:	4639      	mov	r1, r7
 80080e2:	f7f8 fa89 	bl	80005f8 <__aeabi_dmul>
 80080e6:	4606      	mov	r6, r0
 80080e8:	460f      	mov	r7, r1
 80080ea:	e7c4      	b.n	8008076 <_dtoa_r+0x53e>
 80080ec:	ec51 0b17 	vmov	r0, r1, d7
 80080f0:	f7f8 fa82 	bl	80005f8 <__aeabi_dmul>
 80080f4:	9b02      	ldr	r3, [sp, #8]
 80080f6:	9d00      	ldr	r5, [sp, #0]
 80080f8:	930c      	str	r3, [sp, #48]	; 0x30
 80080fa:	ec41 0b18 	vmov	d8, r0, r1
 80080fe:	4639      	mov	r1, r7
 8008100:	4630      	mov	r0, r6
 8008102:	f7f8 fd29 	bl	8000b58 <__aeabi_d2iz>
 8008106:	9011      	str	r0, [sp, #68]	; 0x44
 8008108:	f7f8 fa0c 	bl	8000524 <__aeabi_i2d>
 800810c:	4602      	mov	r2, r0
 800810e:	460b      	mov	r3, r1
 8008110:	4630      	mov	r0, r6
 8008112:	4639      	mov	r1, r7
 8008114:	f7f8 f8b8 	bl	8000288 <__aeabi_dsub>
 8008118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800811a:	3330      	adds	r3, #48	; 0x30
 800811c:	f805 3b01 	strb.w	r3, [r5], #1
 8008120:	9b02      	ldr	r3, [sp, #8]
 8008122:	429d      	cmp	r5, r3
 8008124:	4606      	mov	r6, r0
 8008126:	460f      	mov	r7, r1
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	d134      	bne.n	8008198 <_dtoa_r+0x660>
 800812e:	4b19      	ldr	r3, [pc, #100]	; (8008194 <_dtoa_r+0x65c>)
 8008130:	ec51 0b18 	vmov	r0, r1, d8
 8008134:	f7f8 f8aa 	bl	800028c <__adddf3>
 8008138:	4602      	mov	r2, r0
 800813a:	460b      	mov	r3, r1
 800813c:	4630      	mov	r0, r6
 800813e:	4639      	mov	r1, r7
 8008140:	f7f8 fcea 	bl	8000b18 <__aeabi_dcmpgt>
 8008144:	2800      	cmp	r0, #0
 8008146:	d175      	bne.n	8008234 <_dtoa_r+0x6fc>
 8008148:	ec53 2b18 	vmov	r2, r3, d8
 800814c:	4911      	ldr	r1, [pc, #68]	; (8008194 <_dtoa_r+0x65c>)
 800814e:	2000      	movs	r0, #0
 8008150:	f7f8 f89a 	bl	8000288 <__aeabi_dsub>
 8008154:	4602      	mov	r2, r0
 8008156:	460b      	mov	r3, r1
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f7f8 fcbe 	bl	8000adc <__aeabi_dcmplt>
 8008160:	2800      	cmp	r0, #0
 8008162:	f43f af27 	beq.w	8007fb4 <_dtoa_r+0x47c>
 8008166:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008168:	1e6b      	subs	r3, r5, #1
 800816a:	930c      	str	r3, [sp, #48]	; 0x30
 800816c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008170:	2b30      	cmp	r3, #48	; 0x30
 8008172:	d0f8      	beq.n	8008166 <_dtoa_r+0x62e>
 8008174:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8008178:	e04a      	b.n	8008210 <_dtoa_r+0x6d8>
 800817a:	bf00      	nop
 800817c:	0800a0e8 	.word	0x0800a0e8
 8008180:	0800a0c0 	.word	0x0800a0c0
 8008184:	3ff00000 	.word	0x3ff00000
 8008188:	40240000 	.word	0x40240000
 800818c:	401c0000 	.word	0x401c0000
 8008190:	40140000 	.word	0x40140000
 8008194:	3fe00000 	.word	0x3fe00000
 8008198:	4baf      	ldr	r3, [pc, #700]	; (8008458 <_dtoa_r+0x920>)
 800819a:	f7f8 fa2d 	bl	80005f8 <__aeabi_dmul>
 800819e:	4606      	mov	r6, r0
 80081a0:	460f      	mov	r7, r1
 80081a2:	e7ac      	b.n	80080fe <_dtoa_r+0x5c6>
 80081a4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80081a8:	9d00      	ldr	r5, [sp, #0]
 80081aa:	4642      	mov	r2, r8
 80081ac:	464b      	mov	r3, r9
 80081ae:	4630      	mov	r0, r6
 80081b0:	4639      	mov	r1, r7
 80081b2:	f7f8 fb4b 	bl	800084c <__aeabi_ddiv>
 80081b6:	f7f8 fccf 	bl	8000b58 <__aeabi_d2iz>
 80081ba:	9002      	str	r0, [sp, #8]
 80081bc:	f7f8 f9b2 	bl	8000524 <__aeabi_i2d>
 80081c0:	4642      	mov	r2, r8
 80081c2:	464b      	mov	r3, r9
 80081c4:	f7f8 fa18 	bl	80005f8 <__aeabi_dmul>
 80081c8:	4602      	mov	r2, r0
 80081ca:	460b      	mov	r3, r1
 80081cc:	4630      	mov	r0, r6
 80081ce:	4639      	mov	r1, r7
 80081d0:	f7f8 f85a 	bl	8000288 <__aeabi_dsub>
 80081d4:	9e02      	ldr	r6, [sp, #8]
 80081d6:	9f01      	ldr	r7, [sp, #4]
 80081d8:	3630      	adds	r6, #48	; 0x30
 80081da:	f805 6b01 	strb.w	r6, [r5], #1
 80081de:	9e00      	ldr	r6, [sp, #0]
 80081e0:	1bae      	subs	r6, r5, r6
 80081e2:	42b7      	cmp	r7, r6
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	d137      	bne.n	800825a <_dtoa_r+0x722>
 80081ea:	f7f8 f84f 	bl	800028c <__adddf3>
 80081ee:	4642      	mov	r2, r8
 80081f0:	464b      	mov	r3, r9
 80081f2:	4606      	mov	r6, r0
 80081f4:	460f      	mov	r7, r1
 80081f6:	f7f8 fc8f 	bl	8000b18 <__aeabi_dcmpgt>
 80081fa:	b9c8      	cbnz	r0, 8008230 <_dtoa_r+0x6f8>
 80081fc:	4642      	mov	r2, r8
 80081fe:	464b      	mov	r3, r9
 8008200:	4630      	mov	r0, r6
 8008202:	4639      	mov	r1, r7
 8008204:	f7f8 fc60 	bl	8000ac8 <__aeabi_dcmpeq>
 8008208:	b110      	cbz	r0, 8008210 <_dtoa_r+0x6d8>
 800820a:	9b02      	ldr	r3, [sp, #8]
 800820c:	07d9      	lsls	r1, r3, #31
 800820e:	d40f      	bmi.n	8008230 <_dtoa_r+0x6f8>
 8008210:	4620      	mov	r0, r4
 8008212:	4659      	mov	r1, fp
 8008214:	f000 fac8 	bl	80087a8 <_Bfree>
 8008218:	2300      	movs	r3, #0
 800821a:	702b      	strb	r3, [r5, #0]
 800821c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800821e:	f10a 0001 	add.w	r0, sl, #1
 8008222:	6018      	str	r0, [r3, #0]
 8008224:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008226:	2b00      	cmp	r3, #0
 8008228:	f43f acd8 	beq.w	8007bdc <_dtoa_r+0xa4>
 800822c:	601d      	str	r5, [r3, #0]
 800822e:	e4d5      	b.n	8007bdc <_dtoa_r+0xa4>
 8008230:	f8cd a01c 	str.w	sl, [sp, #28]
 8008234:	462b      	mov	r3, r5
 8008236:	461d      	mov	r5, r3
 8008238:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800823c:	2a39      	cmp	r2, #57	; 0x39
 800823e:	d108      	bne.n	8008252 <_dtoa_r+0x71a>
 8008240:	9a00      	ldr	r2, [sp, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d1f7      	bne.n	8008236 <_dtoa_r+0x6fe>
 8008246:	9a07      	ldr	r2, [sp, #28]
 8008248:	9900      	ldr	r1, [sp, #0]
 800824a:	3201      	adds	r2, #1
 800824c:	9207      	str	r2, [sp, #28]
 800824e:	2230      	movs	r2, #48	; 0x30
 8008250:	700a      	strb	r2, [r1, #0]
 8008252:	781a      	ldrb	r2, [r3, #0]
 8008254:	3201      	adds	r2, #1
 8008256:	701a      	strb	r2, [r3, #0]
 8008258:	e78c      	b.n	8008174 <_dtoa_r+0x63c>
 800825a:	4b7f      	ldr	r3, [pc, #508]	; (8008458 <_dtoa_r+0x920>)
 800825c:	2200      	movs	r2, #0
 800825e:	f7f8 f9cb 	bl	80005f8 <__aeabi_dmul>
 8008262:	2200      	movs	r2, #0
 8008264:	2300      	movs	r3, #0
 8008266:	4606      	mov	r6, r0
 8008268:	460f      	mov	r7, r1
 800826a:	f7f8 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800826e:	2800      	cmp	r0, #0
 8008270:	d09b      	beq.n	80081aa <_dtoa_r+0x672>
 8008272:	e7cd      	b.n	8008210 <_dtoa_r+0x6d8>
 8008274:	9a08      	ldr	r2, [sp, #32]
 8008276:	2a00      	cmp	r2, #0
 8008278:	f000 80c4 	beq.w	8008404 <_dtoa_r+0x8cc>
 800827c:	9a05      	ldr	r2, [sp, #20]
 800827e:	2a01      	cmp	r2, #1
 8008280:	f300 80a8 	bgt.w	80083d4 <_dtoa_r+0x89c>
 8008284:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008286:	2a00      	cmp	r2, #0
 8008288:	f000 80a0 	beq.w	80083cc <_dtoa_r+0x894>
 800828c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008290:	9e06      	ldr	r6, [sp, #24]
 8008292:	4645      	mov	r5, r8
 8008294:	9a04      	ldr	r2, [sp, #16]
 8008296:	2101      	movs	r1, #1
 8008298:	441a      	add	r2, r3
 800829a:	4620      	mov	r0, r4
 800829c:	4498      	add	r8, r3
 800829e:	9204      	str	r2, [sp, #16]
 80082a0:	f000 fb3e 	bl	8008920 <__i2b>
 80082a4:	4607      	mov	r7, r0
 80082a6:	2d00      	cmp	r5, #0
 80082a8:	dd0b      	ble.n	80082c2 <_dtoa_r+0x78a>
 80082aa:	9b04      	ldr	r3, [sp, #16]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	dd08      	ble.n	80082c2 <_dtoa_r+0x78a>
 80082b0:	42ab      	cmp	r3, r5
 80082b2:	9a04      	ldr	r2, [sp, #16]
 80082b4:	bfa8      	it	ge
 80082b6:	462b      	movge	r3, r5
 80082b8:	eba8 0803 	sub.w	r8, r8, r3
 80082bc:	1aed      	subs	r5, r5, r3
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	9304      	str	r3, [sp, #16]
 80082c2:	9b06      	ldr	r3, [sp, #24]
 80082c4:	b1fb      	cbz	r3, 8008306 <_dtoa_r+0x7ce>
 80082c6:	9b08      	ldr	r3, [sp, #32]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 809f 	beq.w	800840c <_dtoa_r+0x8d4>
 80082ce:	2e00      	cmp	r6, #0
 80082d0:	dd11      	ble.n	80082f6 <_dtoa_r+0x7be>
 80082d2:	4639      	mov	r1, r7
 80082d4:	4632      	mov	r2, r6
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 fbde 	bl	8008a98 <__pow5mult>
 80082dc:	465a      	mov	r2, fp
 80082de:	4601      	mov	r1, r0
 80082e0:	4607      	mov	r7, r0
 80082e2:	4620      	mov	r0, r4
 80082e4:	f000 fb32 	bl	800894c <__multiply>
 80082e8:	4659      	mov	r1, fp
 80082ea:	9007      	str	r0, [sp, #28]
 80082ec:	4620      	mov	r0, r4
 80082ee:	f000 fa5b 	bl	80087a8 <_Bfree>
 80082f2:	9b07      	ldr	r3, [sp, #28]
 80082f4:	469b      	mov	fp, r3
 80082f6:	9b06      	ldr	r3, [sp, #24]
 80082f8:	1b9a      	subs	r2, r3, r6
 80082fa:	d004      	beq.n	8008306 <_dtoa_r+0x7ce>
 80082fc:	4659      	mov	r1, fp
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 fbca 	bl	8008a98 <__pow5mult>
 8008304:	4683      	mov	fp, r0
 8008306:	2101      	movs	r1, #1
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fb09 	bl	8008920 <__i2b>
 800830e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008310:	2b00      	cmp	r3, #0
 8008312:	4606      	mov	r6, r0
 8008314:	dd7c      	ble.n	8008410 <_dtoa_r+0x8d8>
 8008316:	461a      	mov	r2, r3
 8008318:	4601      	mov	r1, r0
 800831a:	4620      	mov	r0, r4
 800831c:	f000 fbbc 	bl	8008a98 <__pow5mult>
 8008320:	9b05      	ldr	r3, [sp, #20]
 8008322:	2b01      	cmp	r3, #1
 8008324:	4606      	mov	r6, r0
 8008326:	dd76      	ble.n	8008416 <_dtoa_r+0x8de>
 8008328:	2300      	movs	r3, #0
 800832a:	9306      	str	r3, [sp, #24]
 800832c:	6933      	ldr	r3, [r6, #16]
 800832e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008332:	6918      	ldr	r0, [r3, #16]
 8008334:	f000 faa4 	bl	8008880 <__hi0bits>
 8008338:	f1c0 0020 	rsb	r0, r0, #32
 800833c:	9b04      	ldr	r3, [sp, #16]
 800833e:	4418      	add	r0, r3
 8008340:	f010 001f 	ands.w	r0, r0, #31
 8008344:	f000 8086 	beq.w	8008454 <_dtoa_r+0x91c>
 8008348:	f1c0 0320 	rsb	r3, r0, #32
 800834c:	2b04      	cmp	r3, #4
 800834e:	dd7f      	ble.n	8008450 <_dtoa_r+0x918>
 8008350:	f1c0 001c 	rsb	r0, r0, #28
 8008354:	9b04      	ldr	r3, [sp, #16]
 8008356:	4403      	add	r3, r0
 8008358:	4480      	add	r8, r0
 800835a:	4405      	add	r5, r0
 800835c:	9304      	str	r3, [sp, #16]
 800835e:	f1b8 0f00 	cmp.w	r8, #0
 8008362:	dd05      	ble.n	8008370 <_dtoa_r+0x838>
 8008364:	4659      	mov	r1, fp
 8008366:	4642      	mov	r2, r8
 8008368:	4620      	mov	r0, r4
 800836a:	f000 fbef 	bl	8008b4c <__lshift>
 800836e:	4683      	mov	fp, r0
 8008370:	9b04      	ldr	r3, [sp, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	dd05      	ble.n	8008382 <_dtoa_r+0x84a>
 8008376:	4631      	mov	r1, r6
 8008378:	461a      	mov	r2, r3
 800837a:	4620      	mov	r0, r4
 800837c:	f000 fbe6 	bl	8008b4c <__lshift>
 8008380:	4606      	mov	r6, r0
 8008382:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008384:	2b00      	cmp	r3, #0
 8008386:	d069      	beq.n	800845c <_dtoa_r+0x924>
 8008388:	4631      	mov	r1, r6
 800838a:	4658      	mov	r0, fp
 800838c:	f000 fc4a 	bl	8008c24 <__mcmp>
 8008390:	2800      	cmp	r0, #0
 8008392:	da63      	bge.n	800845c <_dtoa_r+0x924>
 8008394:	2300      	movs	r3, #0
 8008396:	4659      	mov	r1, fp
 8008398:	220a      	movs	r2, #10
 800839a:	4620      	mov	r0, r4
 800839c:	f000 fa26 	bl	80087ec <__multadd>
 80083a0:	9b08      	ldr	r3, [sp, #32]
 80083a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083a6:	4683      	mov	fp, r0
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	f000 818f 	beq.w	80086cc <_dtoa_r+0xb94>
 80083ae:	4639      	mov	r1, r7
 80083b0:	2300      	movs	r3, #0
 80083b2:	220a      	movs	r2, #10
 80083b4:	4620      	mov	r0, r4
 80083b6:	f000 fa19 	bl	80087ec <__multadd>
 80083ba:	f1b9 0f00 	cmp.w	r9, #0
 80083be:	4607      	mov	r7, r0
 80083c0:	f300 808e 	bgt.w	80084e0 <_dtoa_r+0x9a8>
 80083c4:	9b05      	ldr	r3, [sp, #20]
 80083c6:	2b02      	cmp	r3, #2
 80083c8:	dc50      	bgt.n	800846c <_dtoa_r+0x934>
 80083ca:	e089      	b.n	80084e0 <_dtoa_r+0x9a8>
 80083cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80083d2:	e75d      	b.n	8008290 <_dtoa_r+0x758>
 80083d4:	9b01      	ldr	r3, [sp, #4]
 80083d6:	1e5e      	subs	r6, r3, #1
 80083d8:	9b06      	ldr	r3, [sp, #24]
 80083da:	42b3      	cmp	r3, r6
 80083dc:	bfbf      	itttt	lt
 80083de:	9b06      	ldrlt	r3, [sp, #24]
 80083e0:	9606      	strlt	r6, [sp, #24]
 80083e2:	1af2      	sublt	r2, r6, r3
 80083e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 80083e6:	bfb6      	itet	lt
 80083e8:	189b      	addlt	r3, r3, r2
 80083ea:	1b9e      	subge	r6, r3, r6
 80083ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 80083ee:	9b01      	ldr	r3, [sp, #4]
 80083f0:	bfb8      	it	lt
 80083f2:	2600      	movlt	r6, #0
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	bfb5      	itete	lt
 80083f8:	eba8 0503 	sublt.w	r5, r8, r3
 80083fc:	9b01      	ldrge	r3, [sp, #4]
 80083fe:	2300      	movlt	r3, #0
 8008400:	4645      	movge	r5, r8
 8008402:	e747      	b.n	8008294 <_dtoa_r+0x75c>
 8008404:	9e06      	ldr	r6, [sp, #24]
 8008406:	9f08      	ldr	r7, [sp, #32]
 8008408:	4645      	mov	r5, r8
 800840a:	e74c      	b.n	80082a6 <_dtoa_r+0x76e>
 800840c:	9a06      	ldr	r2, [sp, #24]
 800840e:	e775      	b.n	80082fc <_dtoa_r+0x7c4>
 8008410:	9b05      	ldr	r3, [sp, #20]
 8008412:	2b01      	cmp	r3, #1
 8008414:	dc18      	bgt.n	8008448 <_dtoa_r+0x910>
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	b9b3      	cbnz	r3, 8008448 <_dtoa_r+0x910>
 800841a:	9b03      	ldr	r3, [sp, #12]
 800841c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008420:	b9a3      	cbnz	r3, 800844c <_dtoa_r+0x914>
 8008422:	9b03      	ldr	r3, [sp, #12]
 8008424:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008428:	0d1b      	lsrs	r3, r3, #20
 800842a:	051b      	lsls	r3, r3, #20
 800842c:	b12b      	cbz	r3, 800843a <_dtoa_r+0x902>
 800842e:	9b04      	ldr	r3, [sp, #16]
 8008430:	3301      	adds	r3, #1
 8008432:	9304      	str	r3, [sp, #16]
 8008434:	f108 0801 	add.w	r8, r8, #1
 8008438:	2301      	movs	r3, #1
 800843a:	9306      	str	r3, [sp, #24]
 800843c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800843e:	2b00      	cmp	r3, #0
 8008440:	f47f af74 	bne.w	800832c <_dtoa_r+0x7f4>
 8008444:	2001      	movs	r0, #1
 8008446:	e779      	b.n	800833c <_dtoa_r+0x804>
 8008448:	2300      	movs	r3, #0
 800844a:	e7f6      	b.n	800843a <_dtoa_r+0x902>
 800844c:	9b02      	ldr	r3, [sp, #8]
 800844e:	e7f4      	b.n	800843a <_dtoa_r+0x902>
 8008450:	d085      	beq.n	800835e <_dtoa_r+0x826>
 8008452:	4618      	mov	r0, r3
 8008454:	301c      	adds	r0, #28
 8008456:	e77d      	b.n	8008354 <_dtoa_r+0x81c>
 8008458:	40240000 	.word	0x40240000
 800845c:	9b01      	ldr	r3, [sp, #4]
 800845e:	2b00      	cmp	r3, #0
 8008460:	dc38      	bgt.n	80084d4 <_dtoa_r+0x99c>
 8008462:	9b05      	ldr	r3, [sp, #20]
 8008464:	2b02      	cmp	r3, #2
 8008466:	dd35      	ble.n	80084d4 <_dtoa_r+0x99c>
 8008468:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800846c:	f1b9 0f00 	cmp.w	r9, #0
 8008470:	d10d      	bne.n	800848e <_dtoa_r+0x956>
 8008472:	4631      	mov	r1, r6
 8008474:	464b      	mov	r3, r9
 8008476:	2205      	movs	r2, #5
 8008478:	4620      	mov	r0, r4
 800847a:	f000 f9b7 	bl	80087ec <__multadd>
 800847e:	4601      	mov	r1, r0
 8008480:	4606      	mov	r6, r0
 8008482:	4658      	mov	r0, fp
 8008484:	f000 fbce 	bl	8008c24 <__mcmp>
 8008488:	2800      	cmp	r0, #0
 800848a:	f73f adbd 	bgt.w	8008008 <_dtoa_r+0x4d0>
 800848e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008490:	9d00      	ldr	r5, [sp, #0]
 8008492:	ea6f 0a03 	mvn.w	sl, r3
 8008496:	f04f 0800 	mov.w	r8, #0
 800849a:	4631      	mov	r1, r6
 800849c:	4620      	mov	r0, r4
 800849e:	f000 f983 	bl	80087a8 <_Bfree>
 80084a2:	2f00      	cmp	r7, #0
 80084a4:	f43f aeb4 	beq.w	8008210 <_dtoa_r+0x6d8>
 80084a8:	f1b8 0f00 	cmp.w	r8, #0
 80084ac:	d005      	beq.n	80084ba <_dtoa_r+0x982>
 80084ae:	45b8      	cmp	r8, r7
 80084b0:	d003      	beq.n	80084ba <_dtoa_r+0x982>
 80084b2:	4641      	mov	r1, r8
 80084b4:	4620      	mov	r0, r4
 80084b6:	f000 f977 	bl	80087a8 <_Bfree>
 80084ba:	4639      	mov	r1, r7
 80084bc:	4620      	mov	r0, r4
 80084be:	f000 f973 	bl	80087a8 <_Bfree>
 80084c2:	e6a5      	b.n	8008210 <_dtoa_r+0x6d8>
 80084c4:	2600      	movs	r6, #0
 80084c6:	4637      	mov	r7, r6
 80084c8:	e7e1      	b.n	800848e <_dtoa_r+0x956>
 80084ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80084cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80084d0:	4637      	mov	r7, r6
 80084d2:	e599      	b.n	8008008 <_dtoa_r+0x4d0>
 80084d4:	9b08      	ldr	r3, [sp, #32]
 80084d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 80fd 	beq.w	80086da <_dtoa_r+0xba2>
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	dd05      	ble.n	80084f0 <_dtoa_r+0x9b8>
 80084e4:	4639      	mov	r1, r7
 80084e6:	462a      	mov	r2, r5
 80084e8:	4620      	mov	r0, r4
 80084ea:	f000 fb2f 	bl	8008b4c <__lshift>
 80084ee:	4607      	mov	r7, r0
 80084f0:	9b06      	ldr	r3, [sp, #24]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d05c      	beq.n	80085b0 <_dtoa_r+0xa78>
 80084f6:	6879      	ldr	r1, [r7, #4]
 80084f8:	4620      	mov	r0, r4
 80084fa:	f000 f915 	bl	8008728 <_Balloc>
 80084fe:	4605      	mov	r5, r0
 8008500:	b928      	cbnz	r0, 800850e <_dtoa_r+0x9d6>
 8008502:	4b80      	ldr	r3, [pc, #512]	; (8008704 <_dtoa_r+0xbcc>)
 8008504:	4602      	mov	r2, r0
 8008506:	f240 21ea 	movw	r1, #746	; 0x2ea
 800850a:	f7ff bb2e 	b.w	8007b6a <_dtoa_r+0x32>
 800850e:	693a      	ldr	r2, [r7, #16]
 8008510:	3202      	adds	r2, #2
 8008512:	0092      	lsls	r2, r2, #2
 8008514:	f107 010c 	add.w	r1, r7, #12
 8008518:	300c      	adds	r0, #12
 800851a:	f7fe fdcd 	bl	80070b8 <memcpy>
 800851e:	2201      	movs	r2, #1
 8008520:	4629      	mov	r1, r5
 8008522:	4620      	mov	r0, r4
 8008524:	f000 fb12 	bl	8008b4c <__lshift>
 8008528:	9b00      	ldr	r3, [sp, #0]
 800852a:	3301      	adds	r3, #1
 800852c:	9301      	str	r3, [sp, #4]
 800852e:	9b00      	ldr	r3, [sp, #0]
 8008530:	444b      	add	r3, r9
 8008532:	9307      	str	r3, [sp, #28]
 8008534:	9b02      	ldr	r3, [sp, #8]
 8008536:	f003 0301 	and.w	r3, r3, #1
 800853a:	46b8      	mov	r8, r7
 800853c:	9306      	str	r3, [sp, #24]
 800853e:	4607      	mov	r7, r0
 8008540:	9b01      	ldr	r3, [sp, #4]
 8008542:	4631      	mov	r1, r6
 8008544:	3b01      	subs	r3, #1
 8008546:	4658      	mov	r0, fp
 8008548:	9302      	str	r3, [sp, #8]
 800854a:	f7ff fa69 	bl	8007a20 <quorem>
 800854e:	4603      	mov	r3, r0
 8008550:	3330      	adds	r3, #48	; 0x30
 8008552:	9004      	str	r0, [sp, #16]
 8008554:	4641      	mov	r1, r8
 8008556:	4658      	mov	r0, fp
 8008558:	9308      	str	r3, [sp, #32]
 800855a:	f000 fb63 	bl	8008c24 <__mcmp>
 800855e:	463a      	mov	r2, r7
 8008560:	4681      	mov	r9, r0
 8008562:	4631      	mov	r1, r6
 8008564:	4620      	mov	r0, r4
 8008566:	f000 fb79 	bl	8008c5c <__mdiff>
 800856a:	68c2      	ldr	r2, [r0, #12]
 800856c:	9b08      	ldr	r3, [sp, #32]
 800856e:	4605      	mov	r5, r0
 8008570:	bb02      	cbnz	r2, 80085b4 <_dtoa_r+0xa7c>
 8008572:	4601      	mov	r1, r0
 8008574:	4658      	mov	r0, fp
 8008576:	f000 fb55 	bl	8008c24 <__mcmp>
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	4602      	mov	r2, r0
 800857e:	4629      	mov	r1, r5
 8008580:	4620      	mov	r0, r4
 8008582:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8008586:	f000 f90f 	bl	80087a8 <_Bfree>
 800858a:	9b05      	ldr	r3, [sp, #20]
 800858c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800858e:	9d01      	ldr	r5, [sp, #4]
 8008590:	ea43 0102 	orr.w	r1, r3, r2
 8008594:	9b06      	ldr	r3, [sp, #24]
 8008596:	430b      	orrs	r3, r1
 8008598:	9b08      	ldr	r3, [sp, #32]
 800859a:	d10d      	bne.n	80085b8 <_dtoa_r+0xa80>
 800859c:	2b39      	cmp	r3, #57	; 0x39
 800859e:	d029      	beq.n	80085f4 <_dtoa_r+0xabc>
 80085a0:	f1b9 0f00 	cmp.w	r9, #0
 80085a4:	dd01      	ble.n	80085aa <_dtoa_r+0xa72>
 80085a6:	9b04      	ldr	r3, [sp, #16]
 80085a8:	3331      	adds	r3, #49	; 0x31
 80085aa:	9a02      	ldr	r2, [sp, #8]
 80085ac:	7013      	strb	r3, [r2, #0]
 80085ae:	e774      	b.n	800849a <_dtoa_r+0x962>
 80085b0:	4638      	mov	r0, r7
 80085b2:	e7b9      	b.n	8008528 <_dtoa_r+0x9f0>
 80085b4:	2201      	movs	r2, #1
 80085b6:	e7e2      	b.n	800857e <_dtoa_r+0xa46>
 80085b8:	f1b9 0f00 	cmp.w	r9, #0
 80085bc:	db06      	blt.n	80085cc <_dtoa_r+0xa94>
 80085be:	9905      	ldr	r1, [sp, #20]
 80085c0:	ea41 0909 	orr.w	r9, r1, r9
 80085c4:	9906      	ldr	r1, [sp, #24]
 80085c6:	ea59 0101 	orrs.w	r1, r9, r1
 80085ca:	d120      	bne.n	800860e <_dtoa_r+0xad6>
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	ddec      	ble.n	80085aa <_dtoa_r+0xa72>
 80085d0:	4659      	mov	r1, fp
 80085d2:	2201      	movs	r2, #1
 80085d4:	4620      	mov	r0, r4
 80085d6:	9301      	str	r3, [sp, #4]
 80085d8:	f000 fab8 	bl	8008b4c <__lshift>
 80085dc:	4631      	mov	r1, r6
 80085de:	4683      	mov	fp, r0
 80085e0:	f000 fb20 	bl	8008c24 <__mcmp>
 80085e4:	2800      	cmp	r0, #0
 80085e6:	9b01      	ldr	r3, [sp, #4]
 80085e8:	dc02      	bgt.n	80085f0 <_dtoa_r+0xab8>
 80085ea:	d1de      	bne.n	80085aa <_dtoa_r+0xa72>
 80085ec:	07da      	lsls	r2, r3, #31
 80085ee:	d5dc      	bpl.n	80085aa <_dtoa_r+0xa72>
 80085f0:	2b39      	cmp	r3, #57	; 0x39
 80085f2:	d1d8      	bne.n	80085a6 <_dtoa_r+0xa6e>
 80085f4:	9a02      	ldr	r2, [sp, #8]
 80085f6:	2339      	movs	r3, #57	; 0x39
 80085f8:	7013      	strb	r3, [r2, #0]
 80085fa:	462b      	mov	r3, r5
 80085fc:	461d      	mov	r5, r3
 80085fe:	3b01      	subs	r3, #1
 8008600:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008604:	2a39      	cmp	r2, #57	; 0x39
 8008606:	d050      	beq.n	80086aa <_dtoa_r+0xb72>
 8008608:	3201      	adds	r2, #1
 800860a:	701a      	strb	r2, [r3, #0]
 800860c:	e745      	b.n	800849a <_dtoa_r+0x962>
 800860e:	2a00      	cmp	r2, #0
 8008610:	dd03      	ble.n	800861a <_dtoa_r+0xae2>
 8008612:	2b39      	cmp	r3, #57	; 0x39
 8008614:	d0ee      	beq.n	80085f4 <_dtoa_r+0xabc>
 8008616:	3301      	adds	r3, #1
 8008618:	e7c7      	b.n	80085aa <_dtoa_r+0xa72>
 800861a:	9a01      	ldr	r2, [sp, #4]
 800861c:	9907      	ldr	r1, [sp, #28]
 800861e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008622:	428a      	cmp	r2, r1
 8008624:	d02a      	beq.n	800867c <_dtoa_r+0xb44>
 8008626:	4659      	mov	r1, fp
 8008628:	2300      	movs	r3, #0
 800862a:	220a      	movs	r2, #10
 800862c:	4620      	mov	r0, r4
 800862e:	f000 f8dd 	bl	80087ec <__multadd>
 8008632:	45b8      	cmp	r8, r7
 8008634:	4683      	mov	fp, r0
 8008636:	f04f 0300 	mov.w	r3, #0
 800863a:	f04f 020a 	mov.w	r2, #10
 800863e:	4641      	mov	r1, r8
 8008640:	4620      	mov	r0, r4
 8008642:	d107      	bne.n	8008654 <_dtoa_r+0xb1c>
 8008644:	f000 f8d2 	bl	80087ec <__multadd>
 8008648:	4680      	mov	r8, r0
 800864a:	4607      	mov	r7, r0
 800864c:	9b01      	ldr	r3, [sp, #4]
 800864e:	3301      	adds	r3, #1
 8008650:	9301      	str	r3, [sp, #4]
 8008652:	e775      	b.n	8008540 <_dtoa_r+0xa08>
 8008654:	f000 f8ca 	bl	80087ec <__multadd>
 8008658:	4639      	mov	r1, r7
 800865a:	4680      	mov	r8, r0
 800865c:	2300      	movs	r3, #0
 800865e:	220a      	movs	r2, #10
 8008660:	4620      	mov	r0, r4
 8008662:	f000 f8c3 	bl	80087ec <__multadd>
 8008666:	4607      	mov	r7, r0
 8008668:	e7f0      	b.n	800864c <_dtoa_r+0xb14>
 800866a:	f1b9 0f00 	cmp.w	r9, #0
 800866e:	9a00      	ldr	r2, [sp, #0]
 8008670:	bfcc      	ite	gt
 8008672:	464d      	movgt	r5, r9
 8008674:	2501      	movle	r5, #1
 8008676:	4415      	add	r5, r2
 8008678:	f04f 0800 	mov.w	r8, #0
 800867c:	4659      	mov	r1, fp
 800867e:	2201      	movs	r2, #1
 8008680:	4620      	mov	r0, r4
 8008682:	9301      	str	r3, [sp, #4]
 8008684:	f000 fa62 	bl	8008b4c <__lshift>
 8008688:	4631      	mov	r1, r6
 800868a:	4683      	mov	fp, r0
 800868c:	f000 faca 	bl	8008c24 <__mcmp>
 8008690:	2800      	cmp	r0, #0
 8008692:	dcb2      	bgt.n	80085fa <_dtoa_r+0xac2>
 8008694:	d102      	bne.n	800869c <_dtoa_r+0xb64>
 8008696:	9b01      	ldr	r3, [sp, #4]
 8008698:	07db      	lsls	r3, r3, #31
 800869a:	d4ae      	bmi.n	80085fa <_dtoa_r+0xac2>
 800869c:	462b      	mov	r3, r5
 800869e:	461d      	mov	r5, r3
 80086a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80086a4:	2a30      	cmp	r2, #48	; 0x30
 80086a6:	d0fa      	beq.n	800869e <_dtoa_r+0xb66>
 80086a8:	e6f7      	b.n	800849a <_dtoa_r+0x962>
 80086aa:	9a00      	ldr	r2, [sp, #0]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	d1a5      	bne.n	80085fc <_dtoa_r+0xac4>
 80086b0:	f10a 0a01 	add.w	sl, sl, #1
 80086b4:	2331      	movs	r3, #49	; 0x31
 80086b6:	e779      	b.n	80085ac <_dtoa_r+0xa74>
 80086b8:	4b13      	ldr	r3, [pc, #76]	; (8008708 <_dtoa_r+0xbd0>)
 80086ba:	f7ff baaf 	b.w	8007c1c <_dtoa_r+0xe4>
 80086be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	f47f aa86 	bne.w	8007bd2 <_dtoa_r+0x9a>
 80086c6:	4b11      	ldr	r3, [pc, #68]	; (800870c <_dtoa_r+0xbd4>)
 80086c8:	f7ff baa8 	b.w	8007c1c <_dtoa_r+0xe4>
 80086cc:	f1b9 0f00 	cmp.w	r9, #0
 80086d0:	dc03      	bgt.n	80086da <_dtoa_r+0xba2>
 80086d2:	9b05      	ldr	r3, [sp, #20]
 80086d4:	2b02      	cmp	r3, #2
 80086d6:	f73f aec9 	bgt.w	800846c <_dtoa_r+0x934>
 80086da:	9d00      	ldr	r5, [sp, #0]
 80086dc:	4631      	mov	r1, r6
 80086de:	4658      	mov	r0, fp
 80086e0:	f7ff f99e 	bl	8007a20 <quorem>
 80086e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80086e8:	f805 3b01 	strb.w	r3, [r5], #1
 80086ec:	9a00      	ldr	r2, [sp, #0]
 80086ee:	1aaa      	subs	r2, r5, r2
 80086f0:	4591      	cmp	r9, r2
 80086f2:	ddba      	ble.n	800866a <_dtoa_r+0xb32>
 80086f4:	4659      	mov	r1, fp
 80086f6:	2300      	movs	r3, #0
 80086f8:	220a      	movs	r2, #10
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 f876 	bl	80087ec <__multadd>
 8008700:	4683      	mov	fp, r0
 8008702:	e7eb      	b.n	80086dc <_dtoa_r+0xba4>
 8008704:	0800a04b 	.word	0x0800a04b
 8008708:	08009fa4 	.word	0x08009fa4
 800870c:	08009fc8 	.word	0x08009fc8

08008710 <_localeconv_r>:
 8008710:	4800      	ldr	r0, [pc, #0]	; (8008714 <_localeconv_r+0x4>)
 8008712:	4770      	bx	lr
 8008714:	200002a0 	.word	0x200002a0

08008718 <malloc>:
 8008718:	4b02      	ldr	r3, [pc, #8]	; (8008724 <malloc+0xc>)
 800871a:	4601      	mov	r1, r0
 800871c:	6818      	ldr	r0, [r3, #0]
 800871e:	f000 bbe1 	b.w	8008ee4 <_malloc_r>
 8008722:	bf00      	nop
 8008724:	2000014c 	.word	0x2000014c

08008728 <_Balloc>:
 8008728:	b570      	push	{r4, r5, r6, lr}
 800872a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800872c:	4604      	mov	r4, r0
 800872e:	460d      	mov	r5, r1
 8008730:	b976      	cbnz	r6, 8008750 <_Balloc+0x28>
 8008732:	2010      	movs	r0, #16
 8008734:	f7ff fff0 	bl	8008718 <malloc>
 8008738:	4602      	mov	r2, r0
 800873a:	6260      	str	r0, [r4, #36]	; 0x24
 800873c:	b920      	cbnz	r0, 8008748 <_Balloc+0x20>
 800873e:	4b18      	ldr	r3, [pc, #96]	; (80087a0 <_Balloc+0x78>)
 8008740:	4818      	ldr	r0, [pc, #96]	; (80087a4 <_Balloc+0x7c>)
 8008742:	2166      	movs	r1, #102	; 0x66
 8008744:	f000 fd94 	bl	8009270 <__assert_func>
 8008748:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800874c:	6006      	str	r6, [r0, #0]
 800874e:	60c6      	str	r6, [r0, #12]
 8008750:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008752:	68f3      	ldr	r3, [r6, #12]
 8008754:	b183      	cbz	r3, 8008778 <_Balloc+0x50>
 8008756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008758:	68db      	ldr	r3, [r3, #12]
 800875a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800875e:	b9b8      	cbnz	r0, 8008790 <_Balloc+0x68>
 8008760:	2101      	movs	r1, #1
 8008762:	fa01 f605 	lsl.w	r6, r1, r5
 8008766:	1d72      	adds	r2, r6, #5
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	4620      	mov	r0, r4
 800876c:	f000 fb5a 	bl	8008e24 <_calloc_r>
 8008770:	b160      	cbz	r0, 800878c <_Balloc+0x64>
 8008772:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008776:	e00e      	b.n	8008796 <_Balloc+0x6e>
 8008778:	2221      	movs	r2, #33	; 0x21
 800877a:	2104      	movs	r1, #4
 800877c:	4620      	mov	r0, r4
 800877e:	f000 fb51 	bl	8008e24 <_calloc_r>
 8008782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008784:	60f0      	str	r0, [r6, #12]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e4      	bne.n	8008756 <_Balloc+0x2e>
 800878c:	2000      	movs	r0, #0
 800878e:	bd70      	pop	{r4, r5, r6, pc}
 8008790:	6802      	ldr	r2, [r0, #0]
 8008792:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008796:	2300      	movs	r3, #0
 8008798:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800879c:	e7f7      	b.n	800878e <_Balloc+0x66>
 800879e:	bf00      	nop
 80087a0:	08009fd5 	.word	0x08009fd5
 80087a4:	0800a05c 	.word	0x0800a05c

080087a8 <_Bfree>:
 80087a8:	b570      	push	{r4, r5, r6, lr}
 80087aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087ac:	4605      	mov	r5, r0
 80087ae:	460c      	mov	r4, r1
 80087b0:	b976      	cbnz	r6, 80087d0 <_Bfree+0x28>
 80087b2:	2010      	movs	r0, #16
 80087b4:	f7ff ffb0 	bl	8008718 <malloc>
 80087b8:	4602      	mov	r2, r0
 80087ba:	6268      	str	r0, [r5, #36]	; 0x24
 80087bc:	b920      	cbnz	r0, 80087c8 <_Bfree+0x20>
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <_Bfree+0x3c>)
 80087c0:	4809      	ldr	r0, [pc, #36]	; (80087e8 <_Bfree+0x40>)
 80087c2:	218a      	movs	r1, #138	; 0x8a
 80087c4:	f000 fd54 	bl	8009270 <__assert_func>
 80087c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087cc:	6006      	str	r6, [r0, #0]
 80087ce:	60c6      	str	r6, [r0, #12]
 80087d0:	b13c      	cbz	r4, 80087e2 <_Bfree+0x3a>
 80087d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087d4:	6862      	ldr	r2, [r4, #4]
 80087d6:	68db      	ldr	r3, [r3, #12]
 80087d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087dc:	6021      	str	r1, [r4, #0]
 80087de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80087e2:	bd70      	pop	{r4, r5, r6, pc}
 80087e4:	08009fd5 	.word	0x08009fd5
 80087e8:	0800a05c 	.word	0x0800a05c

080087ec <__multadd>:
 80087ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087f0:	690e      	ldr	r6, [r1, #16]
 80087f2:	4607      	mov	r7, r0
 80087f4:	4698      	mov	r8, r3
 80087f6:	460c      	mov	r4, r1
 80087f8:	f101 0014 	add.w	r0, r1, #20
 80087fc:	2300      	movs	r3, #0
 80087fe:	6805      	ldr	r5, [r0, #0]
 8008800:	b2a9      	uxth	r1, r5
 8008802:	fb02 8101 	mla	r1, r2, r1, r8
 8008806:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800880a:	0c2d      	lsrs	r5, r5, #16
 800880c:	fb02 c505 	mla	r5, r2, r5, ip
 8008810:	b289      	uxth	r1, r1
 8008812:	3301      	adds	r3, #1
 8008814:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008818:	429e      	cmp	r6, r3
 800881a:	f840 1b04 	str.w	r1, [r0], #4
 800881e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8008822:	dcec      	bgt.n	80087fe <__multadd+0x12>
 8008824:	f1b8 0f00 	cmp.w	r8, #0
 8008828:	d022      	beq.n	8008870 <__multadd+0x84>
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	42b3      	cmp	r3, r6
 800882e:	dc19      	bgt.n	8008864 <__multadd+0x78>
 8008830:	6861      	ldr	r1, [r4, #4]
 8008832:	4638      	mov	r0, r7
 8008834:	3101      	adds	r1, #1
 8008836:	f7ff ff77 	bl	8008728 <_Balloc>
 800883a:	4605      	mov	r5, r0
 800883c:	b928      	cbnz	r0, 800884a <__multadd+0x5e>
 800883e:	4602      	mov	r2, r0
 8008840:	4b0d      	ldr	r3, [pc, #52]	; (8008878 <__multadd+0x8c>)
 8008842:	480e      	ldr	r0, [pc, #56]	; (800887c <__multadd+0x90>)
 8008844:	21b5      	movs	r1, #181	; 0xb5
 8008846:	f000 fd13 	bl	8009270 <__assert_func>
 800884a:	6922      	ldr	r2, [r4, #16]
 800884c:	3202      	adds	r2, #2
 800884e:	f104 010c 	add.w	r1, r4, #12
 8008852:	0092      	lsls	r2, r2, #2
 8008854:	300c      	adds	r0, #12
 8008856:	f7fe fc2f 	bl	80070b8 <memcpy>
 800885a:	4621      	mov	r1, r4
 800885c:	4638      	mov	r0, r7
 800885e:	f7ff ffa3 	bl	80087a8 <_Bfree>
 8008862:	462c      	mov	r4, r5
 8008864:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8008868:	3601      	adds	r6, #1
 800886a:	f8c3 8014 	str.w	r8, [r3, #20]
 800886e:	6126      	str	r6, [r4, #16]
 8008870:	4620      	mov	r0, r4
 8008872:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008876:	bf00      	nop
 8008878:	0800a04b 	.word	0x0800a04b
 800887c:	0800a05c 	.word	0x0800a05c

08008880 <__hi0bits>:
 8008880:	0c03      	lsrs	r3, r0, #16
 8008882:	041b      	lsls	r3, r3, #16
 8008884:	b9d3      	cbnz	r3, 80088bc <__hi0bits+0x3c>
 8008886:	0400      	lsls	r0, r0, #16
 8008888:	2310      	movs	r3, #16
 800888a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800888e:	bf04      	itt	eq
 8008890:	0200      	lsleq	r0, r0, #8
 8008892:	3308      	addeq	r3, #8
 8008894:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8008898:	bf04      	itt	eq
 800889a:	0100      	lsleq	r0, r0, #4
 800889c:	3304      	addeq	r3, #4
 800889e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088a2:	bf04      	itt	eq
 80088a4:	0080      	lsleq	r0, r0, #2
 80088a6:	3302      	addeq	r3, #2
 80088a8:	2800      	cmp	r0, #0
 80088aa:	db05      	blt.n	80088b8 <__hi0bits+0x38>
 80088ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088b0:	f103 0301 	add.w	r3, r3, #1
 80088b4:	bf08      	it	eq
 80088b6:	2320      	moveq	r3, #32
 80088b8:	4618      	mov	r0, r3
 80088ba:	4770      	bx	lr
 80088bc:	2300      	movs	r3, #0
 80088be:	e7e4      	b.n	800888a <__hi0bits+0xa>

080088c0 <__lo0bits>:
 80088c0:	6803      	ldr	r3, [r0, #0]
 80088c2:	f013 0207 	ands.w	r2, r3, #7
 80088c6:	4601      	mov	r1, r0
 80088c8:	d00b      	beq.n	80088e2 <__lo0bits+0x22>
 80088ca:	07da      	lsls	r2, r3, #31
 80088cc:	d424      	bmi.n	8008918 <__lo0bits+0x58>
 80088ce:	0798      	lsls	r0, r3, #30
 80088d0:	bf49      	itett	mi
 80088d2:	085b      	lsrmi	r3, r3, #1
 80088d4:	089b      	lsrpl	r3, r3, #2
 80088d6:	2001      	movmi	r0, #1
 80088d8:	600b      	strmi	r3, [r1, #0]
 80088da:	bf5c      	itt	pl
 80088dc:	600b      	strpl	r3, [r1, #0]
 80088de:	2002      	movpl	r0, #2
 80088e0:	4770      	bx	lr
 80088e2:	b298      	uxth	r0, r3
 80088e4:	b9b0      	cbnz	r0, 8008914 <__lo0bits+0x54>
 80088e6:	0c1b      	lsrs	r3, r3, #16
 80088e8:	2010      	movs	r0, #16
 80088ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 80088ee:	bf04      	itt	eq
 80088f0:	0a1b      	lsreq	r3, r3, #8
 80088f2:	3008      	addeq	r0, #8
 80088f4:	071a      	lsls	r2, r3, #28
 80088f6:	bf04      	itt	eq
 80088f8:	091b      	lsreq	r3, r3, #4
 80088fa:	3004      	addeq	r0, #4
 80088fc:	079a      	lsls	r2, r3, #30
 80088fe:	bf04      	itt	eq
 8008900:	089b      	lsreq	r3, r3, #2
 8008902:	3002      	addeq	r0, #2
 8008904:	07da      	lsls	r2, r3, #31
 8008906:	d403      	bmi.n	8008910 <__lo0bits+0x50>
 8008908:	085b      	lsrs	r3, r3, #1
 800890a:	f100 0001 	add.w	r0, r0, #1
 800890e:	d005      	beq.n	800891c <__lo0bits+0x5c>
 8008910:	600b      	str	r3, [r1, #0]
 8008912:	4770      	bx	lr
 8008914:	4610      	mov	r0, r2
 8008916:	e7e8      	b.n	80088ea <__lo0bits+0x2a>
 8008918:	2000      	movs	r0, #0
 800891a:	4770      	bx	lr
 800891c:	2020      	movs	r0, #32
 800891e:	4770      	bx	lr

08008920 <__i2b>:
 8008920:	b510      	push	{r4, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	2101      	movs	r1, #1
 8008926:	f7ff feff 	bl	8008728 <_Balloc>
 800892a:	4602      	mov	r2, r0
 800892c:	b928      	cbnz	r0, 800893a <__i2b+0x1a>
 800892e:	4b05      	ldr	r3, [pc, #20]	; (8008944 <__i2b+0x24>)
 8008930:	4805      	ldr	r0, [pc, #20]	; (8008948 <__i2b+0x28>)
 8008932:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008936:	f000 fc9b 	bl	8009270 <__assert_func>
 800893a:	2301      	movs	r3, #1
 800893c:	6144      	str	r4, [r0, #20]
 800893e:	6103      	str	r3, [r0, #16]
 8008940:	bd10      	pop	{r4, pc}
 8008942:	bf00      	nop
 8008944:	0800a04b 	.word	0x0800a04b
 8008948:	0800a05c 	.word	0x0800a05c

0800894c <__multiply>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	4614      	mov	r4, r2
 8008952:	690a      	ldr	r2, [r1, #16]
 8008954:	6923      	ldr	r3, [r4, #16]
 8008956:	429a      	cmp	r2, r3
 8008958:	bfb8      	it	lt
 800895a:	460b      	movlt	r3, r1
 800895c:	460d      	mov	r5, r1
 800895e:	bfbc      	itt	lt
 8008960:	4625      	movlt	r5, r4
 8008962:	461c      	movlt	r4, r3
 8008964:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8008968:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800896c:	68ab      	ldr	r3, [r5, #8]
 800896e:	6869      	ldr	r1, [r5, #4]
 8008970:	eb0a 0709 	add.w	r7, sl, r9
 8008974:	42bb      	cmp	r3, r7
 8008976:	b085      	sub	sp, #20
 8008978:	bfb8      	it	lt
 800897a:	3101      	addlt	r1, #1
 800897c:	f7ff fed4 	bl	8008728 <_Balloc>
 8008980:	b930      	cbnz	r0, 8008990 <__multiply+0x44>
 8008982:	4602      	mov	r2, r0
 8008984:	4b42      	ldr	r3, [pc, #264]	; (8008a90 <__multiply+0x144>)
 8008986:	4843      	ldr	r0, [pc, #268]	; (8008a94 <__multiply+0x148>)
 8008988:	f240 115d 	movw	r1, #349	; 0x15d
 800898c:	f000 fc70 	bl	8009270 <__assert_func>
 8008990:	f100 0614 	add.w	r6, r0, #20
 8008994:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8008998:	4633      	mov	r3, r6
 800899a:	2200      	movs	r2, #0
 800899c:	4543      	cmp	r3, r8
 800899e:	d31e      	bcc.n	80089de <__multiply+0x92>
 80089a0:	f105 0c14 	add.w	ip, r5, #20
 80089a4:	f104 0314 	add.w	r3, r4, #20
 80089a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80089ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80089b0:	9202      	str	r2, [sp, #8]
 80089b2:	ebac 0205 	sub.w	r2, ip, r5
 80089b6:	3a15      	subs	r2, #21
 80089b8:	f022 0203 	bic.w	r2, r2, #3
 80089bc:	3204      	adds	r2, #4
 80089be:	f105 0115 	add.w	r1, r5, #21
 80089c2:	458c      	cmp	ip, r1
 80089c4:	bf38      	it	cc
 80089c6:	2204      	movcc	r2, #4
 80089c8:	9201      	str	r2, [sp, #4]
 80089ca:	9a02      	ldr	r2, [sp, #8]
 80089cc:	9303      	str	r3, [sp, #12]
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d808      	bhi.n	80089e4 <__multiply+0x98>
 80089d2:	2f00      	cmp	r7, #0
 80089d4:	dc55      	bgt.n	8008a82 <__multiply+0x136>
 80089d6:	6107      	str	r7, [r0, #16]
 80089d8:	b005      	add	sp, #20
 80089da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089de:	f843 2b04 	str.w	r2, [r3], #4
 80089e2:	e7db      	b.n	800899c <__multiply+0x50>
 80089e4:	f8b3 a000 	ldrh.w	sl, [r3]
 80089e8:	f1ba 0f00 	cmp.w	sl, #0
 80089ec:	d020      	beq.n	8008a30 <__multiply+0xe4>
 80089ee:	f105 0e14 	add.w	lr, r5, #20
 80089f2:	46b1      	mov	r9, r6
 80089f4:	2200      	movs	r2, #0
 80089f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 80089fa:	f8d9 b000 	ldr.w	fp, [r9]
 80089fe:	b2a1      	uxth	r1, r4
 8008a00:	fa1f fb8b 	uxth.w	fp, fp
 8008a04:	fb0a b101 	mla	r1, sl, r1, fp
 8008a08:	4411      	add	r1, r2
 8008a0a:	f8d9 2000 	ldr.w	r2, [r9]
 8008a0e:	0c24      	lsrs	r4, r4, #16
 8008a10:	0c12      	lsrs	r2, r2, #16
 8008a12:	fb0a 2404 	mla	r4, sl, r4, r2
 8008a16:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8008a1a:	b289      	uxth	r1, r1
 8008a1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008a20:	45f4      	cmp	ip, lr
 8008a22:	f849 1b04 	str.w	r1, [r9], #4
 8008a26:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8008a2a:	d8e4      	bhi.n	80089f6 <__multiply+0xaa>
 8008a2c:	9901      	ldr	r1, [sp, #4]
 8008a2e:	5072      	str	r2, [r6, r1]
 8008a30:	9a03      	ldr	r2, [sp, #12]
 8008a32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a36:	3304      	adds	r3, #4
 8008a38:	f1b9 0f00 	cmp.w	r9, #0
 8008a3c:	d01f      	beq.n	8008a7e <__multiply+0x132>
 8008a3e:	6834      	ldr	r4, [r6, #0]
 8008a40:	f105 0114 	add.w	r1, r5, #20
 8008a44:	46b6      	mov	lr, r6
 8008a46:	f04f 0a00 	mov.w	sl, #0
 8008a4a:	880a      	ldrh	r2, [r1, #0]
 8008a4c:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008a50:	fb09 b202 	mla	r2, r9, r2, fp
 8008a54:	4492      	add	sl, r2
 8008a56:	b2a4      	uxth	r4, r4
 8008a58:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008a5c:	f84e 4b04 	str.w	r4, [lr], #4
 8008a60:	f851 4b04 	ldr.w	r4, [r1], #4
 8008a64:	f8be 2000 	ldrh.w	r2, [lr]
 8008a68:	0c24      	lsrs	r4, r4, #16
 8008a6a:	fb09 2404 	mla	r4, r9, r4, r2
 8008a6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008a72:	458c      	cmp	ip, r1
 8008a74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a78:	d8e7      	bhi.n	8008a4a <__multiply+0xfe>
 8008a7a:	9a01      	ldr	r2, [sp, #4]
 8008a7c:	50b4      	str	r4, [r6, r2]
 8008a7e:	3604      	adds	r6, #4
 8008a80:	e7a3      	b.n	80089ca <__multiply+0x7e>
 8008a82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d1a5      	bne.n	80089d6 <__multiply+0x8a>
 8008a8a:	3f01      	subs	r7, #1
 8008a8c:	e7a1      	b.n	80089d2 <__multiply+0x86>
 8008a8e:	bf00      	nop
 8008a90:	0800a04b 	.word	0x0800a04b
 8008a94:	0800a05c 	.word	0x0800a05c

08008a98 <__pow5mult>:
 8008a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a9c:	4615      	mov	r5, r2
 8008a9e:	f012 0203 	ands.w	r2, r2, #3
 8008aa2:	4606      	mov	r6, r0
 8008aa4:	460f      	mov	r7, r1
 8008aa6:	d007      	beq.n	8008ab8 <__pow5mult+0x20>
 8008aa8:	4c25      	ldr	r4, [pc, #148]	; (8008b40 <__pow5mult+0xa8>)
 8008aaa:	3a01      	subs	r2, #1
 8008aac:	2300      	movs	r3, #0
 8008aae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ab2:	f7ff fe9b 	bl	80087ec <__multadd>
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	10ad      	asrs	r5, r5, #2
 8008aba:	d03d      	beq.n	8008b38 <__pow5mult+0xa0>
 8008abc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008abe:	b97c      	cbnz	r4, 8008ae0 <__pow5mult+0x48>
 8008ac0:	2010      	movs	r0, #16
 8008ac2:	f7ff fe29 	bl	8008718 <malloc>
 8008ac6:	4602      	mov	r2, r0
 8008ac8:	6270      	str	r0, [r6, #36]	; 0x24
 8008aca:	b928      	cbnz	r0, 8008ad8 <__pow5mult+0x40>
 8008acc:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <__pow5mult+0xac>)
 8008ace:	481e      	ldr	r0, [pc, #120]	; (8008b48 <__pow5mult+0xb0>)
 8008ad0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008ad4:	f000 fbcc 	bl	8009270 <__assert_func>
 8008ad8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008adc:	6004      	str	r4, [r0, #0]
 8008ade:	60c4      	str	r4, [r0, #12]
 8008ae0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ae4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008ae8:	b94c      	cbnz	r4, 8008afe <__pow5mult+0x66>
 8008aea:	f240 2171 	movw	r1, #625	; 0x271
 8008aee:	4630      	mov	r0, r6
 8008af0:	f7ff ff16 	bl	8008920 <__i2b>
 8008af4:	2300      	movs	r3, #0
 8008af6:	f8c8 0008 	str.w	r0, [r8, #8]
 8008afa:	4604      	mov	r4, r0
 8008afc:	6003      	str	r3, [r0, #0]
 8008afe:	f04f 0900 	mov.w	r9, #0
 8008b02:	07eb      	lsls	r3, r5, #31
 8008b04:	d50a      	bpl.n	8008b1c <__pow5mult+0x84>
 8008b06:	4639      	mov	r1, r7
 8008b08:	4622      	mov	r2, r4
 8008b0a:	4630      	mov	r0, r6
 8008b0c:	f7ff ff1e 	bl	800894c <__multiply>
 8008b10:	4639      	mov	r1, r7
 8008b12:	4680      	mov	r8, r0
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff fe47 	bl	80087a8 <_Bfree>
 8008b1a:	4647      	mov	r7, r8
 8008b1c:	106d      	asrs	r5, r5, #1
 8008b1e:	d00b      	beq.n	8008b38 <__pow5mult+0xa0>
 8008b20:	6820      	ldr	r0, [r4, #0]
 8008b22:	b938      	cbnz	r0, 8008b34 <__pow5mult+0x9c>
 8008b24:	4622      	mov	r2, r4
 8008b26:	4621      	mov	r1, r4
 8008b28:	4630      	mov	r0, r6
 8008b2a:	f7ff ff0f 	bl	800894c <__multiply>
 8008b2e:	6020      	str	r0, [r4, #0]
 8008b30:	f8c0 9000 	str.w	r9, [r0]
 8008b34:	4604      	mov	r4, r0
 8008b36:	e7e4      	b.n	8008b02 <__pow5mult+0x6a>
 8008b38:	4638      	mov	r0, r7
 8008b3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b3e:	bf00      	nop
 8008b40:	0800a1b0 	.word	0x0800a1b0
 8008b44:	08009fd5 	.word	0x08009fd5
 8008b48:	0800a05c 	.word	0x0800a05c

08008b4c <__lshift>:
 8008b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b50:	460c      	mov	r4, r1
 8008b52:	6849      	ldr	r1, [r1, #4]
 8008b54:	6923      	ldr	r3, [r4, #16]
 8008b56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b5a:	68a3      	ldr	r3, [r4, #8]
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	4691      	mov	r9, r2
 8008b60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b64:	f108 0601 	add.w	r6, r8, #1
 8008b68:	42b3      	cmp	r3, r6
 8008b6a:	db0b      	blt.n	8008b84 <__lshift+0x38>
 8008b6c:	4638      	mov	r0, r7
 8008b6e:	f7ff fddb 	bl	8008728 <_Balloc>
 8008b72:	4605      	mov	r5, r0
 8008b74:	b948      	cbnz	r0, 8008b8a <__lshift+0x3e>
 8008b76:	4602      	mov	r2, r0
 8008b78:	4b28      	ldr	r3, [pc, #160]	; (8008c1c <__lshift+0xd0>)
 8008b7a:	4829      	ldr	r0, [pc, #164]	; (8008c20 <__lshift+0xd4>)
 8008b7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008b80:	f000 fb76 	bl	8009270 <__assert_func>
 8008b84:	3101      	adds	r1, #1
 8008b86:	005b      	lsls	r3, r3, #1
 8008b88:	e7ee      	b.n	8008b68 <__lshift+0x1c>
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	f100 0114 	add.w	r1, r0, #20
 8008b90:	f100 0210 	add.w	r2, r0, #16
 8008b94:	4618      	mov	r0, r3
 8008b96:	4553      	cmp	r3, sl
 8008b98:	db33      	blt.n	8008c02 <__lshift+0xb6>
 8008b9a:	6920      	ldr	r0, [r4, #16]
 8008b9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ba0:	f104 0314 	add.w	r3, r4, #20
 8008ba4:	f019 091f 	ands.w	r9, r9, #31
 8008ba8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bb0:	d02b      	beq.n	8008c0a <__lshift+0xbe>
 8008bb2:	f1c9 0e20 	rsb	lr, r9, #32
 8008bb6:	468a      	mov	sl, r1
 8008bb8:	2200      	movs	r2, #0
 8008bba:	6818      	ldr	r0, [r3, #0]
 8008bbc:	fa00 f009 	lsl.w	r0, r0, r9
 8008bc0:	4302      	orrs	r2, r0
 8008bc2:	f84a 2b04 	str.w	r2, [sl], #4
 8008bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bca:	459c      	cmp	ip, r3
 8008bcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008bd0:	d8f3      	bhi.n	8008bba <__lshift+0x6e>
 8008bd2:	ebac 0304 	sub.w	r3, ip, r4
 8008bd6:	3b15      	subs	r3, #21
 8008bd8:	f023 0303 	bic.w	r3, r3, #3
 8008bdc:	3304      	adds	r3, #4
 8008bde:	f104 0015 	add.w	r0, r4, #21
 8008be2:	4584      	cmp	ip, r0
 8008be4:	bf38      	it	cc
 8008be6:	2304      	movcc	r3, #4
 8008be8:	50ca      	str	r2, [r1, r3]
 8008bea:	b10a      	cbz	r2, 8008bf0 <__lshift+0xa4>
 8008bec:	f108 0602 	add.w	r6, r8, #2
 8008bf0:	3e01      	subs	r6, #1
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	612e      	str	r6, [r5, #16]
 8008bf6:	4621      	mov	r1, r4
 8008bf8:	f7ff fdd6 	bl	80087a8 <_Bfree>
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c02:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c06:	3301      	adds	r3, #1
 8008c08:	e7c5      	b.n	8008b96 <__lshift+0x4a>
 8008c0a:	3904      	subs	r1, #4
 8008c0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c10:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c14:	459c      	cmp	ip, r3
 8008c16:	d8f9      	bhi.n	8008c0c <__lshift+0xc0>
 8008c18:	e7ea      	b.n	8008bf0 <__lshift+0xa4>
 8008c1a:	bf00      	nop
 8008c1c:	0800a04b 	.word	0x0800a04b
 8008c20:	0800a05c 	.word	0x0800a05c

08008c24 <__mcmp>:
 8008c24:	b530      	push	{r4, r5, lr}
 8008c26:	6902      	ldr	r2, [r0, #16]
 8008c28:	690c      	ldr	r4, [r1, #16]
 8008c2a:	1b12      	subs	r2, r2, r4
 8008c2c:	d10e      	bne.n	8008c4c <__mcmp+0x28>
 8008c2e:	f100 0314 	add.w	r3, r0, #20
 8008c32:	3114      	adds	r1, #20
 8008c34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c44:	42a5      	cmp	r5, r4
 8008c46:	d003      	beq.n	8008c50 <__mcmp+0x2c>
 8008c48:	d305      	bcc.n	8008c56 <__mcmp+0x32>
 8008c4a:	2201      	movs	r2, #1
 8008c4c:	4610      	mov	r0, r2
 8008c4e:	bd30      	pop	{r4, r5, pc}
 8008c50:	4283      	cmp	r3, r0
 8008c52:	d3f3      	bcc.n	8008c3c <__mcmp+0x18>
 8008c54:	e7fa      	b.n	8008c4c <__mcmp+0x28>
 8008c56:	f04f 32ff 	mov.w	r2, #4294967295
 8008c5a:	e7f7      	b.n	8008c4c <__mcmp+0x28>

08008c5c <__mdiff>:
 8008c5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c60:	460c      	mov	r4, r1
 8008c62:	4606      	mov	r6, r0
 8008c64:	4611      	mov	r1, r2
 8008c66:	4620      	mov	r0, r4
 8008c68:	4617      	mov	r7, r2
 8008c6a:	f7ff ffdb 	bl	8008c24 <__mcmp>
 8008c6e:	1e05      	subs	r5, r0, #0
 8008c70:	d110      	bne.n	8008c94 <__mdiff+0x38>
 8008c72:	4629      	mov	r1, r5
 8008c74:	4630      	mov	r0, r6
 8008c76:	f7ff fd57 	bl	8008728 <_Balloc>
 8008c7a:	b930      	cbnz	r0, 8008c8a <__mdiff+0x2e>
 8008c7c:	4b39      	ldr	r3, [pc, #228]	; (8008d64 <__mdiff+0x108>)
 8008c7e:	4602      	mov	r2, r0
 8008c80:	f240 2132 	movw	r1, #562	; 0x232
 8008c84:	4838      	ldr	r0, [pc, #224]	; (8008d68 <__mdiff+0x10c>)
 8008c86:	f000 faf3 	bl	8009270 <__assert_func>
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c94:	bfa4      	itt	ge
 8008c96:	463b      	movge	r3, r7
 8008c98:	4627      	movge	r7, r4
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	6879      	ldr	r1, [r7, #4]
 8008c9e:	bfa6      	itte	ge
 8008ca0:	461c      	movge	r4, r3
 8008ca2:	2500      	movge	r5, #0
 8008ca4:	2501      	movlt	r5, #1
 8008ca6:	f7ff fd3f 	bl	8008728 <_Balloc>
 8008caa:	b920      	cbnz	r0, 8008cb6 <__mdiff+0x5a>
 8008cac:	4b2d      	ldr	r3, [pc, #180]	; (8008d64 <__mdiff+0x108>)
 8008cae:	4602      	mov	r2, r0
 8008cb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cb4:	e7e6      	b.n	8008c84 <__mdiff+0x28>
 8008cb6:	693e      	ldr	r6, [r7, #16]
 8008cb8:	60c5      	str	r5, [r0, #12]
 8008cba:	6925      	ldr	r5, [r4, #16]
 8008cbc:	f107 0114 	add.w	r1, r7, #20
 8008cc0:	f104 0914 	add.w	r9, r4, #20
 8008cc4:	f100 0e14 	add.w	lr, r0, #20
 8008cc8:	f107 0210 	add.w	r2, r7, #16
 8008ccc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008cd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008cd4:	46f2      	mov	sl, lr
 8008cd6:	2700      	movs	r7, #0
 8008cd8:	f859 3b04 	ldr.w	r3, [r9], #4
 8008cdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008ce0:	fa1f f883 	uxth.w	r8, r3
 8008ce4:	fa17 f78b 	uxtah	r7, r7, fp
 8008ce8:	0c1b      	lsrs	r3, r3, #16
 8008cea:	eba7 0808 	sub.w	r8, r7, r8
 8008cee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008cf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008cf6:	fa1f f888 	uxth.w	r8, r8
 8008cfa:	141f      	asrs	r7, r3, #16
 8008cfc:	454d      	cmp	r5, r9
 8008cfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d02:	f84a 3b04 	str.w	r3, [sl], #4
 8008d06:	d8e7      	bhi.n	8008cd8 <__mdiff+0x7c>
 8008d08:	1b2b      	subs	r3, r5, r4
 8008d0a:	3b15      	subs	r3, #21
 8008d0c:	f023 0303 	bic.w	r3, r3, #3
 8008d10:	3304      	adds	r3, #4
 8008d12:	3415      	adds	r4, #21
 8008d14:	42a5      	cmp	r5, r4
 8008d16:	bf38      	it	cc
 8008d18:	2304      	movcc	r3, #4
 8008d1a:	4419      	add	r1, r3
 8008d1c:	4473      	add	r3, lr
 8008d1e:	469e      	mov	lr, r3
 8008d20:	460d      	mov	r5, r1
 8008d22:	4565      	cmp	r5, ip
 8008d24:	d30e      	bcc.n	8008d44 <__mdiff+0xe8>
 8008d26:	f10c 0203 	add.w	r2, ip, #3
 8008d2a:	1a52      	subs	r2, r2, r1
 8008d2c:	f022 0203 	bic.w	r2, r2, #3
 8008d30:	3903      	subs	r1, #3
 8008d32:	458c      	cmp	ip, r1
 8008d34:	bf38      	it	cc
 8008d36:	2200      	movcc	r2, #0
 8008d38:	441a      	add	r2, r3
 8008d3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d3e:	b17b      	cbz	r3, 8008d60 <__mdiff+0x104>
 8008d40:	6106      	str	r6, [r0, #16]
 8008d42:	e7a5      	b.n	8008c90 <__mdiff+0x34>
 8008d44:	f855 8b04 	ldr.w	r8, [r5], #4
 8008d48:	fa17 f488 	uxtah	r4, r7, r8
 8008d4c:	1422      	asrs	r2, r4, #16
 8008d4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008d52:	b2a4      	uxth	r4, r4
 8008d54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008d58:	f84e 4b04 	str.w	r4, [lr], #4
 8008d5c:	1417      	asrs	r7, r2, #16
 8008d5e:	e7e0      	b.n	8008d22 <__mdiff+0xc6>
 8008d60:	3e01      	subs	r6, #1
 8008d62:	e7ea      	b.n	8008d3a <__mdiff+0xde>
 8008d64:	0800a04b 	.word	0x0800a04b
 8008d68:	0800a05c 	.word	0x0800a05c

08008d6c <__d2b>:
 8008d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d70:	4689      	mov	r9, r1
 8008d72:	2101      	movs	r1, #1
 8008d74:	ec57 6b10 	vmov	r6, r7, d0
 8008d78:	4690      	mov	r8, r2
 8008d7a:	f7ff fcd5 	bl	8008728 <_Balloc>
 8008d7e:	4604      	mov	r4, r0
 8008d80:	b930      	cbnz	r0, 8008d90 <__d2b+0x24>
 8008d82:	4602      	mov	r2, r0
 8008d84:	4b25      	ldr	r3, [pc, #148]	; (8008e1c <__d2b+0xb0>)
 8008d86:	4826      	ldr	r0, [pc, #152]	; (8008e20 <__d2b+0xb4>)
 8008d88:	f240 310a 	movw	r1, #778	; 0x30a
 8008d8c:	f000 fa70 	bl	8009270 <__assert_func>
 8008d90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008d94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008d98:	bb35      	cbnz	r5, 8008de8 <__d2b+0x7c>
 8008d9a:	2e00      	cmp	r6, #0
 8008d9c:	9301      	str	r3, [sp, #4]
 8008d9e:	d028      	beq.n	8008df2 <__d2b+0x86>
 8008da0:	4668      	mov	r0, sp
 8008da2:	9600      	str	r6, [sp, #0]
 8008da4:	f7ff fd8c 	bl	80088c0 <__lo0bits>
 8008da8:	9900      	ldr	r1, [sp, #0]
 8008daa:	b300      	cbz	r0, 8008dee <__d2b+0x82>
 8008dac:	9a01      	ldr	r2, [sp, #4]
 8008dae:	f1c0 0320 	rsb	r3, r0, #32
 8008db2:	fa02 f303 	lsl.w	r3, r2, r3
 8008db6:	430b      	orrs	r3, r1
 8008db8:	40c2      	lsrs	r2, r0
 8008dba:	6163      	str	r3, [r4, #20]
 8008dbc:	9201      	str	r2, [sp, #4]
 8008dbe:	9b01      	ldr	r3, [sp, #4]
 8008dc0:	61a3      	str	r3, [r4, #24]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	bf14      	ite	ne
 8008dc6:	2202      	movne	r2, #2
 8008dc8:	2201      	moveq	r2, #1
 8008dca:	6122      	str	r2, [r4, #16]
 8008dcc:	b1d5      	cbz	r5, 8008e04 <__d2b+0x98>
 8008dce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008dd2:	4405      	add	r5, r0
 8008dd4:	f8c9 5000 	str.w	r5, [r9]
 8008dd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008ddc:	f8c8 0000 	str.w	r0, [r8]
 8008de0:	4620      	mov	r0, r4
 8008de2:	b003      	add	sp, #12
 8008de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008dec:	e7d5      	b.n	8008d9a <__d2b+0x2e>
 8008dee:	6161      	str	r1, [r4, #20]
 8008df0:	e7e5      	b.n	8008dbe <__d2b+0x52>
 8008df2:	a801      	add	r0, sp, #4
 8008df4:	f7ff fd64 	bl	80088c0 <__lo0bits>
 8008df8:	9b01      	ldr	r3, [sp, #4]
 8008dfa:	6163      	str	r3, [r4, #20]
 8008dfc:	2201      	movs	r2, #1
 8008dfe:	6122      	str	r2, [r4, #16]
 8008e00:	3020      	adds	r0, #32
 8008e02:	e7e3      	b.n	8008dcc <__d2b+0x60>
 8008e04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e0c:	f8c9 0000 	str.w	r0, [r9]
 8008e10:	6918      	ldr	r0, [r3, #16]
 8008e12:	f7ff fd35 	bl	8008880 <__hi0bits>
 8008e16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e1a:	e7df      	b.n	8008ddc <__d2b+0x70>
 8008e1c:	0800a04b 	.word	0x0800a04b
 8008e20:	0800a05c 	.word	0x0800a05c

08008e24 <_calloc_r>:
 8008e24:	b513      	push	{r0, r1, r4, lr}
 8008e26:	434a      	muls	r2, r1
 8008e28:	4611      	mov	r1, r2
 8008e2a:	9201      	str	r2, [sp, #4]
 8008e2c:	f000 f85a 	bl	8008ee4 <_malloc_r>
 8008e30:	4604      	mov	r4, r0
 8008e32:	b118      	cbz	r0, 8008e3c <_calloc_r+0x18>
 8008e34:	9a01      	ldr	r2, [sp, #4]
 8008e36:	2100      	movs	r1, #0
 8008e38:	f7fe f94c 	bl	80070d4 <memset>
 8008e3c:	4620      	mov	r0, r4
 8008e3e:	b002      	add	sp, #8
 8008e40:	bd10      	pop	{r4, pc}
	...

08008e44 <_free_r>:
 8008e44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e46:	2900      	cmp	r1, #0
 8008e48:	d048      	beq.n	8008edc <_free_r+0x98>
 8008e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e4e:	9001      	str	r0, [sp, #4]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	f1a1 0404 	sub.w	r4, r1, #4
 8008e56:	bfb8      	it	lt
 8008e58:	18e4      	addlt	r4, r4, r3
 8008e5a:	f000 fa65 	bl	8009328 <__malloc_lock>
 8008e5e:	4a20      	ldr	r2, [pc, #128]	; (8008ee0 <_free_r+0x9c>)
 8008e60:	9801      	ldr	r0, [sp, #4]
 8008e62:	6813      	ldr	r3, [r2, #0]
 8008e64:	4615      	mov	r5, r2
 8008e66:	b933      	cbnz	r3, 8008e76 <_free_r+0x32>
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	6014      	str	r4, [r2, #0]
 8008e6c:	b003      	add	sp, #12
 8008e6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008e72:	f000 ba5f 	b.w	8009334 <__malloc_unlock>
 8008e76:	42a3      	cmp	r3, r4
 8008e78:	d90b      	bls.n	8008e92 <_free_r+0x4e>
 8008e7a:	6821      	ldr	r1, [r4, #0]
 8008e7c:	1862      	adds	r2, r4, r1
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	bf04      	itt	eq
 8008e82:	681a      	ldreq	r2, [r3, #0]
 8008e84:	685b      	ldreq	r3, [r3, #4]
 8008e86:	6063      	str	r3, [r4, #4]
 8008e88:	bf04      	itt	eq
 8008e8a:	1852      	addeq	r2, r2, r1
 8008e8c:	6022      	streq	r2, [r4, #0]
 8008e8e:	602c      	str	r4, [r5, #0]
 8008e90:	e7ec      	b.n	8008e6c <_free_r+0x28>
 8008e92:	461a      	mov	r2, r3
 8008e94:	685b      	ldr	r3, [r3, #4]
 8008e96:	b10b      	cbz	r3, 8008e9c <_free_r+0x58>
 8008e98:	42a3      	cmp	r3, r4
 8008e9a:	d9fa      	bls.n	8008e92 <_free_r+0x4e>
 8008e9c:	6811      	ldr	r1, [r2, #0]
 8008e9e:	1855      	adds	r5, r2, r1
 8008ea0:	42a5      	cmp	r5, r4
 8008ea2:	d10b      	bne.n	8008ebc <_free_r+0x78>
 8008ea4:	6824      	ldr	r4, [r4, #0]
 8008ea6:	4421      	add	r1, r4
 8008ea8:	1854      	adds	r4, r2, r1
 8008eaa:	42a3      	cmp	r3, r4
 8008eac:	6011      	str	r1, [r2, #0]
 8008eae:	d1dd      	bne.n	8008e6c <_free_r+0x28>
 8008eb0:	681c      	ldr	r4, [r3, #0]
 8008eb2:	685b      	ldr	r3, [r3, #4]
 8008eb4:	6053      	str	r3, [r2, #4]
 8008eb6:	4421      	add	r1, r4
 8008eb8:	6011      	str	r1, [r2, #0]
 8008eba:	e7d7      	b.n	8008e6c <_free_r+0x28>
 8008ebc:	d902      	bls.n	8008ec4 <_free_r+0x80>
 8008ebe:	230c      	movs	r3, #12
 8008ec0:	6003      	str	r3, [r0, #0]
 8008ec2:	e7d3      	b.n	8008e6c <_free_r+0x28>
 8008ec4:	6825      	ldr	r5, [r4, #0]
 8008ec6:	1961      	adds	r1, r4, r5
 8008ec8:	428b      	cmp	r3, r1
 8008eca:	bf04      	itt	eq
 8008ecc:	6819      	ldreq	r1, [r3, #0]
 8008ece:	685b      	ldreq	r3, [r3, #4]
 8008ed0:	6063      	str	r3, [r4, #4]
 8008ed2:	bf04      	itt	eq
 8008ed4:	1949      	addeq	r1, r1, r5
 8008ed6:	6021      	streq	r1, [r4, #0]
 8008ed8:	6054      	str	r4, [r2, #4]
 8008eda:	e7c7      	b.n	8008e6c <_free_r+0x28>
 8008edc:	b003      	add	sp, #12
 8008ede:	bd30      	pop	{r4, r5, pc}
 8008ee0:	200004f4 	.word	0x200004f4

08008ee4 <_malloc_r>:
 8008ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ee6:	1ccd      	adds	r5, r1, #3
 8008ee8:	f025 0503 	bic.w	r5, r5, #3
 8008eec:	3508      	adds	r5, #8
 8008eee:	2d0c      	cmp	r5, #12
 8008ef0:	bf38      	it	cc
 8008ef2:	250c      	movcc	r5, #12
 8008ef4:	2d00      	cmp	r5, #0
 8008ef6:	4606      	mov	r6, r0
 8008ef8:	db01      	blt.n	8008efe <_malloc_r+0x1a>
 8008efa:	42a9      	cmp	r1, r5
 8008efc:	d903      	bls.n	8008f06 <_malloc_r+0x22>
 8008efe:	230c      	movs	r3, #12
 8008f00:	6033      	str	r3, [r6, #0]
 8008f02:	2000      	movs	r0, #0
 8008f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f06:	f000 fa0f 	bl	8009328 <__malloc_lock>
 8008f0a:	4921      	ldr	r1, [pc, #132]	; (8008f90 <_malloc_r+0xac>)
 8008f0c:	680a      	ldr	r2, [r1, #0]
 8008f0e:	4614      	mov	r4, r2
 8008f10:	b99c      	cbnz	r4, 8008f3a <_malloc_r+0x56>
 8008f12:	4f20      	ldr	r7, [pc, #128]	; (8008f94 <_malloc_r+0xb0>)
 8008f14:	683b      	ldr	r3, [r7, #0]
 8008f16:	b923      	cbnz	r3, 8008f22 <_malloc_r+0x3e>
 8008f18:	4621      	mov	r1, r4
 8008f1a:	4630      	mov	r0, r6
 8008f1c:	f000 f998 	bl	8009250 <_sbrk_r>
 8008f20:	6038      	str	r0, [r7, #0]
 8008f22:	4629      	mov	r1, r5
 8008f24:	4630      	mov	r0, r6
 8008f26:	f000 f993 	bl	8009250 <_sbrk_r>
 8008f2a:	1c43      	adds	r3, r0, #1
 8008f2c:	d123      	bne.n	8008f76 <_malloc_r+0x92>
 8008f2e:	230c      	movs	r3, #12
 8008f30:	6033      	str	r3, [r6, #0]
 8008f32:	4630      	mov	r0, r6
 8008f34:	f000 f9fe 	bl	8009334 <__malloc_unlock>
 8008f38:	e7e3      	b.n	8008f02 <_malloc_r+0x1e>
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	1b5b      	subs	r3, r3, r5
 8008f3e:	d417      	bmi.n	8008f70 <_malloc_r+0x8c>
 8008f40:	2b0b      	cmp	r3, #11
 8008f42:	d903      	bls.n	8008f4c <_malloc_r+0x68>
 8008f44:	6023      	str	r3, [r4, #0]
 8008f46:	441c      	add	r4, r3
 8008f48:	6025      	str	r5, [r4, #0]
 8008f4a:	e004      	b.n	8008f56 <_malloc_r+0x72>
 8008f4c:	6863      	ldr	r3, [r4, #4]
 8008f4e:	42a2      	cmp	r2, r4
 8008f50:	bf0c      	ite	eq
 8008f52:	600b      	streq	r3, [r1, #0]
 8008f54:	6053      	strne	r3, [r2, #4]
 8008f56:	4630      	mov	r0, r6
 8008f58:	f000 f9ec 	bl	8009334 <__malloc_unlock>
 8008f5c:	f104 000b 	add.w	r0, r4, #11
 8008f60:	1d23      	adds	r3, r4, #4
 8008f62:	f020 0007 	bic.w	r0, r0, #7
 8008f66:	1ac2      	subs	r2, r0, r3
 8008f68:	d0cc      	beq.n	8008f04 <_malloc_r+0x20>
 8008f6a:	1a1b      	subs	r3, r3, r0
 8008f6c:	50a3      	str	r3, [r4, r2]
 8008f6e:	e7c9      	b.n	8008f04 <_malloc_r+0x20>
 8008f70:	4622      	mov	r2, r4
 8008f72:	6864      	ldr	r4, [r4, #4]
 8008f74:	e7cc      	b.n	8008f10 <_malloc_r+0x2c>
 8008f76:	1cc4      	adds	r4, r0, #3
 8008f78:	f024 0403 	bic.w	r4, r4, #3
 8008f7c:	42a0      	cmp	r0, r4
 8008f7e:	d0e3      	beq.n	8008f48 <_malloc_r+0x64>
 8008f80:	1a21      	subs	r1, r4, r0
 8008f82:	4630      	mov	r0, r6
 8008f84:	f000 f964 	bl	8009250 <_sbrk_r>
 8008f88:	3001      	adds	r0, #1
 8008f8a:	d1dd      	bne.n	8008f48 <_malloc_r+0x64>
 8008f8c:	e7cf      	b.n	8008f2e <_malloc_r+0x4a>
 8008f8e:	bf00      	nop
 8008f90:	200004f4 	.word	0x200004f4
 8008f94:	200004f8 	.word	0x200004f8

08008f98 <__ssputs_r>:
 8008f98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f9c:	688e      	ldr	r6, [r1, #8]
 8008f9e:	429e      	cmp	r6, r3
 8008fa0:	4682      	mov	sl, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	4690      	mov	r8, r2
 8008fa6:	461f      	mov	r7, r3
 8008fa8:	d838      	bhi.n	800901c <__ssputs_r+0x84>
 8008faa:	898a      	ldrh	r2, [r1, #12]
 8008fac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008fb0:	d032      	beq.n	8009018 <__ssputs_r+0x80>
 8008fb2:	6825      	ldr	r5, [r4, #0]
 8008fb4:	6909      	ldr	r1, [r1, #16]
 8008fb6:	eba5 0901 	sub.w	r9, r5, r1
 8008fba:	6965      	ldr	r5, [r4, #20]
 8008fbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008fc4:	3301      	adds	r3, #1
 8008fc6:	444b      	add	r3, r9
 8008fc8:	106d      	asrs	r5, r5, #1
 8008fca:	429d      	cmp	r5, r3
 8008fcc:	bf38      	it	cc
 8008fce:	461d      	movcc	r5, r3
 8008fd0:	0553      	lsls	r3, r2, #21
 8008fd2:	d531      	bpl.n	8009038 <__ssputs_r+0xa0>
 8008fd4:	4629      	mov	r1, r5
 8008fd6:	f7ff ff85 	bl	8008ee4 <_malloc_r>
 8008fda:	4606      	mov	r6, r0
 8008fdc:	b950      	cbnz	r0, 8008ff4 <__ssputs_r+0x5c>
 8008fde:	230c      	movs	r3, #12
 8008fe0:	f8ca 3000 	str.w	r3, [sl]
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff4:	6921      	ldr	r1, [r4, #16]
 8008ff6:	464a      	mov	r2, r9
 8008ff8:	f7fe f85e 	bl	80070b8 <memcpy>
 8008ffc:	89a3      	ldrh	r3, [r4, #12]
 8008ffe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009006:	81a3      	strh	r3, [r4, #12]
 8009008:	6126      	str	r6, [r4, #16]
 800900a:	6165      	str	r5, [r4, #20]
 800900c:	444e      	add	r6, r9
 800900e:	eba5 0509 	sub.w	r5, r5, r9
 8009012:	6026      	str	r6, [r4, #0]
 8009014:	60a5      	str	r5, [r4, #8]
 8009016:	463e      	mov	r6, r7
 8009018:	42be      	cmp	r6, r7
 800901a:	d900      	bls.n	800901e <__ssputs_r+0x86>
 800901c:	463e      	mov	r6, r7
 800901e:	4632      	mov	r2, r6
 8009020:	6820      	ldr	r0, [r4, #0]
 8009022:	4641      	mov	r1, r8
 8009024:	f000 f966 	bl	80092f4 <memmove>
 8009028:	68a3      	ldr	r3, [r4, #8]
 800902a:	6822      	ldr	r2, [r4, #0]
 800902c:	1b9b      	subs	r3, r3, r6
 800902e:	4432      	add	r2, r6
 8009030:	60a3      	str	r3, [r4, #8]
 8009032:	6022      	str	r2, [r4, #0]
 8009034:	2000      	movs	r0, #0
 8009036:	e7db      	b.n	8008ff0 <__ssputs_r+0x58>
 8009038:	462a      	mov	r2, r5
 800903a:	f000 f981 	bl	8009340 <_realloc_r>
 800903e:	4606      	mov	r6, r0
 8009040:	2800      	cmp	r0, #0
 8009042:	d1e1      	bne.n	8009008 <__ssputs_r+0x70>
 8009044:	6921      	ldr	r1, [r4, #16]
 8009046:	4650      	mov	r0, sl
 8009048:	f7ff fefc 	bl	8008e44 <_free_r>
 800904c:	e7c7      	b.n	8008fde <__ssputs_r+0x46>
	...

08009050 <_svfiprintf_r>:
 8009050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009054:	4698      	mov	r8, r3
 8009056:	898b      	ldrh	r3, [r1, #12]
 8009058:	061b      	lsls	r3, r3, #24
 800905a:	b09d      	sub	sp, #116	; 0x74
 800905c:	4607      	mov	r7, r0
 800905e:	460d      	mov	r5, r1
 8009060:	4614      	mov	r4, r2
 8009062:	d50e      	bpl.n	8009082 <_svfiprintf_r+0x32>
 8009064:	690b      	ldr	r3, [r1, #16]
 8009066:	b963      	cbnz	r3, 8009082 <_svfiprintf_r+0x32>
 8009068:	2140      	movs	r1, #64	; 0x40
 800906a:	f7ff ff3b 	bl	8008ee4 <_malloc_r>
 800906e:	6028      	str	r0, [r5, #0]
 8009070:	6128      	str	r0, [r5, #16]
 8009072:	b920      	cbnz	r0, 800907e <_svfiprintf_r+0x2e>
 8009074:	230c      	movs	r3, #12
 8009076:	603b      	str	r3, [r7, #0]
 8009078:	f04f 30ff 	mov.w	r0, #4294967295
 800907c:	e0d1      	b.n	8009222 <_svfiprintf_r+0x1d2>
 800907e:	2340      	movs	r3, #64	; 0x40
 8009080:	616b      	str	r3, [r5, #20]
 8009082:	2300      	movs	r3, #0
 8009084:	9309      	str	r3, [sp, #36]	; 0x24
 8009086:	2320      	movs	r3, #32
 8009088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800908c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009090:	2330      	movs	r3, #48	; 0x30
 8009092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800923c <_svfiprintf_r+0x1ec>
 8009096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800909a:	f04f 0901 	mov.w	r9, #1
 800909e:	4623      	mov	r3, r4
 80090a0:	469a      	mov	sl, r3
 80090a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090a6:	b10a      	cbz	r2, 80090ac <_svfiprintf_r+0x5c>
 80090a8:	2a25      	cmp	r2, #37	; 0x25
 80090aa:	d1f9      	bne.n	80090a0 <_svfiprintf_r+0x50>
 80090ac:	ebba 0b04 	subs.w	fp, sl, r4
 80090b0:	d00b      	beq.n	80090ca <_svfiprintf_r+0x7a>
 80090b2:	465b      	mov	r3, fp
 80090b4:	4622      	mov	r2, r4
 80090b6:	4629      	mov	r1, r5
 80090b8:	4638      	mov	r0, r7
 80090ba:	f7ff ff6d 	bl	8008f98 <__ssputs_r>
 80090be:	3001      	adds	r0, #1
 80090c0:	f000 80aa 	beq.w	8009218 <_svfiprintf_r+0x1c8>
 80090c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c6:	445a      	add	r2, fp
 80090c8:	9209      	str	r2, [sp, #36]	; 0x24
 80090ca:	f89a 3000 	ldrb.w	r3, [sl]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 80a2 	beq.w	8009218 <_svfiprintf_r+0x1c8>
 80090d4:	2300      	movs	r3, #0
 80090d6:	f04f 32ff 	mov.w	r2, #4294967295
 80090da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090de:	f10a 0a01 	add.w	sl, sl, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	9307      	str	r3, [sp, #28]
 80090e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090ea:	931a      	str	r3, [sp, #104]	; 0x68
 80090ec:	4654      	mov	r4, sl
 80090ee:	2205      	movs	r2, #5
 80090f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090f4:	4851      	ldr	r0, [pc, #324]	; (800923c <_svfiprintf_r+0x1ec>)
 80090f6:	f7f7 f873 	bl	80001e0 <memchr>
 80090fa:	9a04      	ldr	r2, [sp, #16]
 80090fc:	b9d8      	cbnz	r0, 8009136 <_svfiprintf_r+0xe6>
 80090fe:	06d0      	lsls	r0, r2, #27
 8009100:	bf44      	itt	mi
 8009102:	2320      	movmi	r3, #32
 8009104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009108:	0711      	lsls	r1, r2, #28
 800910a:	bf44      	itt	mi
 800910c:	232b      	movmi	r3, #43	; 0x2b
 800910e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009112:	f89a 3000 	ldrb.w	r3, [sl]
 8009116:	2b2a      	cmp	r3, #42	; 0x2a
 8009118:	d015      	beq.n	8009146 <_svfiprintf_r+0xf6>
 800911a:	9a07      	ldr	r2, [sp, #28]
 800911c:	4654      	mov	r4, sl
 800911e:	2000      	movs	r0, #0
 8009120:	f04f 0c0a 	mov.w	ip, #10
 8009124:	4621      	mov	r1, r4
 8009126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800912a:	3b30      	subs	r3, #48	; 0x30
 800912c:	2b09      	cmp	r3, #9
 800912e:	d94e      	bls.n	80091ce <_svfiprintf_r+0x17e>
 8009130:	b1b0      	cbz	r0, 8009160 <_svfiprintf_r+0x110>
 8009132:	9207      	str	r2, [sp, #28]
 8009134:	e014      	b.n	8009160 <_svfiprintf_r+0x110>
 8009136:	eba0 0308 	sub.w	r3, r0, r8
 800913a:	fa09 f303 	lsl.w	r3, r9, r3
 800913e:	4313      	orrs	r3, r2
 8009140:	9304      	str	r3, [sp, #16]
 8009142:	46a2      	mov	sl, r4
 8009144:	e7d2      	b.n	80090ec <_svfiprintf_r+0x9c>
 8009146:	9b03      	ldr	r3, [sp, #12]
 8009148:	1d19      	adds	r1, r3, #4
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	9103      	str	r1, [sp, #12]
 800914e:	2b00      	cmp	r3, #0
 8009150:	bfbb      	ittet	lt
 8009152:	425b      	neglt	r3, r3
 8009154:	f042 0202 	orrlt.w	r2, r2, #2
 8009158:	9307      	strge	r3, [sp, #28]
 800915a:	9307      	strlt	r3, [sp, #28]
 800915c:	bfb8      	it	lt
 800915e:	9204      	strlt	r2, [sp, #16]
 8009160:	7823      	ldrb	r3, [r4, #0]
 8009162:	2b2e      	cmp	r3, #46	; 0x2e
 8009164:	d10c      	bne.n	8009180 <_svfiprintf_r+0x130>
 8009166:	7863      	ldrb	r3, [r4, #1]
 8009168:	2b2a      	cmp	r3, #42	; 0x2a
 800916a:	d135      	bne.n	80091d8 <_svfiprintf_r+0x188>
 800916c:	9b03      	ldr	r3, [sp, #12]
 800916e:	1d1a      	adds	r2, r3, #4
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	9203      	str	r2, [sp, #12]
 8009174:	2b00      	cmp	r3, #0
 8009176:	bfb8      	it	lt
 8009178:	f04f 33ff 	movlt.w	r3, #4294967295
 800917c:	3402      	adds	r4, #2
 800917e:	9305      	str	r3, [sp, #20]
 8009180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800924c <_svfiprintf_r+0x1fc>
 8009184:	7821      	ldrb	r1, [r4, #0]
 8009186:	2203      	movs	r2, #3
 8009188:	4650      	mov	r0, sl
 800918a:	f7f7 f829 	bl	80001e0 <memchr>
 800918e:	b140      	cbz	r0, 80091a2 <_svfiprintf_r+0x152>
 8009190:	2340      	movs	r3, #64	; 0x40
 8009192:	eba0 000a 	sub.w	r0, r0, sl
 8009196:	fa03 f000 	lsl.w	r0, r3, r0
 800919a:	9b04      	ldr	r3, [sp, #16]
 800919c:	4303      	orrs	r3, r0
 800919e:	3401      	adds	r4, #1
 80091a0:	9304      	str	r3, [sp, #16]
 80091a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a6:	4826      	ldr	r0, [pc, #152]	; (8009240 <_svfiprintf_r+0x1f0>)
 80091a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80091ac:	2206      	movs	r2, #6
 80091ae:	f7f7 f817 	bl	80001e0 <memchr>
 80091b2:	2800      	cmp	r0, #0
 80091b4:	d038      	beq.n	8009228 <_svfiprintf_r+0x1d8>
 80091b6:	4b23      	ldr	r3, [pc, #140]	; (8009244 <_svfiprintf_r+0x1f4>)
 80091b8:	bb1b      	cbnz	r3, 8009202 <_svfiprintf_r+0x1b2>
 80091ba:	9b03      	ldr	r3, [sp, #12]
 80091bc:	3307      	adds	r3, #7
 80091be:	f023 0307 	bic.w	r3, r3, #7
 80091c2:	3308      	adds	r3, #8
 80091c4:	9303      	str	r3, [sp, #12]
 80091c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091c8:	4433      	add	r3, r6
 80091ca:	9309      	str	r3, [sp, #36]	; 0x24
 80091cc:	e767      	b.n	800909e <_svfiprintf_r+0x4e>
 80091ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80091d2:	460c      	mov	r4, r1
 80091d4:	2001      	movs	r0, #1
 80091d6:	e7a5      	b.n	8009124 <_svfiprintf_r+0xd4>
 80091d8:	2300      	movs	r3, #0
 80091da:	3401      	adds	r4, #1
 80091dc:	9305      	str	r3, [sp, #20]
 80091de:	4619      	mov	r1, r3
 80091e0:	f04f 0c0a 	mov.w	ip, #10
 80091e4:	4620      	mov	r0, r4
 80091e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80091ea:	3a30      	subs	r2, #48	; 0x30
 80091ec:	2a09      	cmp	r2, #9
 80091ee:	d903      	bls.n	80091f8 <_svfiprintf_r+0x1a8>
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d0c5      	beq.n	8009180 <_svfiprintf_r+0x130>
 80091f4:	9105      	str	r1, [sp, #20]
 80091f6:	e7c3      	b.n	8009180 <_svfiprintf_r+0x130>
 80091f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80091fc:	4604      	mov	r4, r0
 80091fe:	2301      	movs	r3, #1
 8009200:	e7f0      	b.n	80091e4 <_svfiprintf_r+0x194>
 8009202:	ab03      	add	r3, sp, #12
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	462a      	mov	r2, r5
 8009208:	4b0f      	ldr	r3, [pc, #60]	; (8009248 <_svfiprintf_r+0x1f8>)
 800920a:	a904      	add	r1, sp, #16
 800920c:	4638      	mov	r0, r7
 800920e:	f7fe f809 	bl	8007224 <_printf_float>
 8009212:	1c42      	adds	r2, r0, #1
 8009214:	4606      	mov	r6, r0
 8009216:	d1d6      	bne.n	80091c6 <_svfiprintf_r+0x176>
 8009218:	89ab      	ldrh	r3, [r5, #12]
 800921a:	065b      	lsls	r3, r3, #25
 800921c:	f53f af2c 	bmi.w	8009078 <_svfiprintf_r+0x28>
 8009220:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009222:	b01d      	add	sp, #116	; 0x74
 8009224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009228:	ab03      	add	r3, sp, #12
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	462a      	mov	r2, r5
 800922e:	4b06      	ldr	r3, [pc, #24]	; (8009248 <_svfiprintf_r+0x1f8>)
 8009230:	a904      	add	r1, sp, #16
 8009232:	4638      	mov	r0, r7
 8009234:	f7fe fa9a 	bl	800776c <_printf_i>
 8009238:	e7eb      	b.n	8009212 <_svfiprintf_r+0x1c2>
 800923a:	bf00      	nop
 800923c:	0800a1bc 	.word	0x0800a1bc
 8009240:	0800a1c6 	.word	0x0800a1c6
 8009244:	08007225 	.word	0x08007225
 8009248:	08008f99 	.word	0x08008f99
 800924c:	0800a1c2 	.word	0x0800a1c2

08009250 <_sbrk_r>:
 8009250:	b538      	push	{r3, r4, r5, lr}
 8009252:	4d06      	ldr	r5, [pc, #24]	; (800926c <_sbrk_r+0x1c>)
 8009254:	2300      	movs	r3, #0
 8009256:	4604      	mov	r4, r0
 8009258:	4608      	mov	r0, r1
 800925a:	602b      	str	r3, [r5, #0]
 800925c:	f7f8 fe34 	bl	8001ec8 <_sbrk>
 8009260:	1c43      	adds	r3, r0, #1
 8009262:	d102      	bne.n	800926a <_sbrk_r+0x1a>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	b103      	cbz	r3, 800926a <_sbrk_r+0x1a>
 8009268:	6023      	str	r3, [r4, #0]
 800926a:	bd38      	pop	{r3, r4, r5, pc}
 800926c:	2000074c 	.word	0x2000074c

08009270 <__assert_func>:
 8009270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009272:	4614      	mov	r4, r2
 8009274:	461a      	mov	r2, r3
 8009276:	4b09      	ldr	r3, [pc, #36]	; (800929c <__assert_func+0x2c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4605      	mov	r5, r0
 800927c:	68d8      	ldr	r0, [r3, #12]
 800927e:	b14c      	cbz	r4, 8009294 <__assert_func+0x24>
 8009280:	4b07      	ldr	r3, [pc, #28]	; (80092a0 <__assert_func+0x30>)
 8009282:	9100      	str	r1, [sp, #0]
 8009284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009288:	4906      	ldr	r1, [pc, #24]	; (80092a4 <__assert_func+0x34>)
 800928a:	462b      	mov	r3, r5
 800928c:	f000 f80e 	bl	80092ac <fiprintf>
 8009290:	f000 faa4 	bl	80097dc <abort>
 8009294:	4b04      	ldr	r3, [pc, #16]	; (80092a8 <__assert_func+0x38>)
 8009296:	461c      	mov	r4, r3
 8009298:	e7f3      	b.n	8009282 <__assert_func+0x12>
 800929a:	bf00      	nop
 800929c:	2000014c 	.word	0x2000014c
 80092a0:	0800a1cd 	.word	0x0800a1cd
 80092a4:	0800a1da 	.word	0x0800a1da
 80092a8:	0800a208 	.word	0x0800a208

080092ac <fiprintf>:
 80092ac:	b40e      	push	{r1, r2, r3}
 80092ae:	b503      	push	{r0, r1, lr}
 80092b0:	4601      	mov	r1, r0
 80092b2:	ab03      	add	r3, sp, #12
 80092b4:	4805      	ldr	r0, [pc, #20]	; (80092cc <fiprintf+0x20>)
 80092b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80092ba:	6800      	ldr	r0, [r0, #0]
 80092bc:	9301      	str	r3, [sp, #4]
 80092be:	f000 f88f 	bl	80093e0 <_vfiprintf_r>
 80092c2:	b002      	add	sp, #8
 80092c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80092c8:	b003      	add	sp, #12
 80092ca:	4770      	bx	lr
 80092cc:	2000014c 	.word	0x2000014c

080092d0 <__ascii_mbtowc>:
 80092d0:	b082      	sub	sp, #8
 80092d2:	b901      	cbnz	r1, 80092d6 <__ascii_mbtowc+0x6>
 80092d4:	a901      	add	r1, sp, #4
 80092d6:	b142      	cbz	r2, 80092ea <__ascii_mbtowc+0x1a>
 80092d8:	b14b      	cbz	r3, 80092ee <__ascii_mbtowc+0x1e>
 80092da:	7813      	ldrb	r3, [r2, #0]
 80092dc:	600b      	str	r3, [r1, #0]
 80092de:	7812      	ldrb	r2, [r2, #0]
 80092e0:	1e10      	subs	r0, r2, #0
 80092e2:	bf18      	it	ne
 80092e4:	2001      	movne	r0, #1
 80092e6:	b002      	add	sp, #8
 80092e8:	4770      	bx	lr
 80092ea:	4610      	mov	r0, r2
 80092ec:	e7fb      	b.n	80092e6 <__ascii_mbtowc+0x16>
 80092ee:	f06f 0001 	mvn.w	r0, #1
 80092f2:	e7f8      	b.n	80092e6 <__ascii_mbtowc+0x16>

080092f4 <memmove>:
 80092f4:	4288      	cmp	r0, r1
 80092f6:	b510      	push	{r4, lr}
 80092f8:	eb01 0402 	add.w	r4, r1, r2
 80092fc:	d902      	bls.n	8009304 <memmove+0x10>
 80092fe:	4284      	cmp	r4, r0
 8009300:	4623      	mov	r3, r4
 8009302:	d807      	bhi.n	8009314 <memmove+0x20>
 8009304:	1e43      	subs	r3, r0, #1
 8009306:	42a1      	cmp	r1, r4
 8009308:	d008      	beq.n	800931c <memmove+0x28>
 800930a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800930e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009312:	e7f8      	b.n	8009306 <memmove+0x12>
 8009314:	4402      	add	r2, r0
 8009316:	4601      	mov	r1, r0
 8009318:	428a      	cmp	r2, r1
 800931a:	d100      	bne.n	800931e <memmove+0x2a>
 800931c:	bd10      	pop	{r4, pc}
 800931e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009326:	e7f7      	b.n	8009318 <memmove+0x24>

08009328 <__malloc_lock>:
 8009328:	4801      	ldr	r0, [pc, #4]	; (8009330 <__malloc_lock+0x8>)
 800932a:	f000 bc17 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 800932e:	bf00      	nop
 8009330:	20000754 	.word	0x20000754

08009334 <__malloc_unlock>:
 8009334:	4801      	ldr	r0, [pc, #4]	; (800933c <__malloc_unlock+0x8>)
 8009336:	f000 bc12 	b.w	8009b5e <__retarget_lock_release_recursive>
 800933a:	bf00      	nop
 800933c:	20000754 	.word	0x20000754

08009340 <_realloc_r>:
 8009340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009342:	4607      	mov	r7, r0
 8009344:	4614      	mov	r4, r2
 8009346:	460e      	mov	r6, r1
 8009348:	b921      	cbnz	r1, 8009354 <_realloc_r+0x14>
 800934a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800934e:	4611      	mov	r1, r2
 8009350:	f7ff bdc8 	b.w	8008ee4 <_malloc_r>
 8009354:	b922      	cbnz	r2, 8009360 <_realloc_r+0x20>
 8009356:	f7ff fd75 	bl	8008e44 <_free_r>
 800935a:	4625      	mov	r5, r4
 800935c:	4628      	mov	r0, r5
 800935e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009360:	f000 fc62 	bl	8009c28 <_malloc_usable_size_r>
 8009364:	42a0      	cmp	r0, r4
 8009366:	d20f      	bcs.n	8009388 <_realloc_r+0x48>
 8009368:	4621      	mov	r1, r4
 800936a:	4638      	mov	r0, r7
 800936c:	f7ff fdba 	bl	8008ee4 <_malloc_r>
 8009370:	4605      	mov	r5, r0
 8009372:	2800      	cmp	r0, #0
 8009374:	d0f2      	beq.n	800935c <_realloc_r+0x1c>
 8009376:	4631      	mov	r1, r6
 8009378:	4622      	mov	r2, r4
 800937a:	f7fd fe9d 	bl	80070b8 <memcpy>
 800937e:	4631      	mov	r1, r6
 8009380:	4638      	mov	r0, r7
 8009382:	f7ff fd5f 	bl	8008e44 <_free_r>
 8009386:	e7e9      	b.n	800935c <_realloc_r+0x1c>
 8009388:	4635      	mov	r5, r6
 800938a:	e7e7      	b.n	800935c <_realloc_r+0x1c>

0800938c <__sfputc_r>:
 800938c:	6893      	ldr	r3, [r2, #8]
 800938e:	3b01      	subs	r3, #1
 8009390:	2b00      	cmp	r3, #0
 8009392:	b410      	push	{r4}
 8009394:	6093      	str	r3, [r2, #8]
 8009396:	da08      	bge.n	80093aa <__sfputc_r+0x1e>
 8009398:	6994      	ldr	r4, [r2, #24]
 800939a:	42a3      	cmp	r3, r4
 800939c:	db01      	blt.n	80093a2 <__sfputc_r+0x16>
 800939e:	290a      	cmp	r1, #10
 80093a0:	d103      	bne.n	80093aa <__sfputc_r+0x1e>
 80093a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093a6:	f000 b94b 	b.w	8009640 <__swbuf_r>
 80093aa:	6813      	ldr	r3, [r2, #0]
 80093ac:	1c58      	adds	r0, r3, #1
 80093ae:	6010      	str	r0, [r2, #0]
 80093b0:	7019      	strb	r1, [r3, #0]
 80093b2:	4608      	mov	r0, r1
 80093b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <__sfputs_r>:
 80093ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093bc:	4606      	mov	r6, r0
 80093be:	460f      	mov	r7, r1
 80093c0:	4614      	mov	r4, r2
 80093c2:	18d5      	adds	r5, r2, r3
 80093c4:	42ac      	cmp	r4, r5
 80093c6:	d101      	bne.n	80093cc <__sfputs_r+0x12>
 80093c8:	2000      	movs	r0, #0
 80093ca:	e007      	b.n	80093dc <__sfputs_r+0x22>
 80093cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093d0:	463a      	mov	r2, r7
 80093d2:	4630      	mov	r0, r6
 80093d4:	f7ff ffda 	bl	800938c <__sfputc_r>
 80093d8:	1c43      	adds	r3, r0, #1
 80093da:	d1f3      	bne.n	80093c4 <__sfputs_r+0xa>
 80093dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080093e0 <_vfiprintf_r>:
 80093e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e4:	460d      	mov	r5, r1
 80093e6:	b09d      	sub	sp, #116	; 0x74
 80093e8:	4614      	mov	r4, r2
 80093ea:	4698      	mov	r8, r3
 80093ec:	4606      	mov	r6, r0
 80093ee:	b118      	cbz	r0, 80093f8 <_vfiprintf_r+0x18>
 80093f0:	6983      	ldr	r3, [r0, #24]
 80093f2:	b90b      	cbnz	r3, 80093f8 <_vfiprintf_r+0x18>
 80093f4:	f000 fb14 	bl	8009a20 <__sinit>
 80093f8:	4b89      	ldr	r3, [pc, #548]	; (8009620 <_vfiprintf_r+0x240>)
 80093fa:	429d      	cmp	r5, r3
 80093fc:	d11b      	bne.n	8009436 <_vfiprintf_r+0x56>
 80093fe:	6875      	ldr	r5, [r6, #4]
 8009400:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009402:	07d9      	lsls	r1, r3, #31
 8009404:	d405      	bmi.n	8009412 <_vfiprintf_r+0x32>
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	059a      	lsls	r2, r3, #22
 800940a:	d402      	bmi.n	8009412 <_vfiprintf_r+0x32>
 800940c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800940e:	f000 fba5 	bl	8009b5c <__retarget_lock_acquire_recursive>
 8009412:	89ab      	ldrh	r3, [r5, #12]
 8009414:	071b      	lsls	r3, r3, #28
 8009416:	d501      	bpl.n	800941c <_vfiprintf_r+0x3c>
 8009418:	692b      	ldr	r3, [r5, #16]
 800941a:	b9eb      	cbnz	r3, 8009458 <_vfiprintf_r+0x78>
 800941c:	4629      	mov	r1, r5
 800941e:	4630      	mov	r0, r6
 8009420:	f000 f96e 	bl	8009700 <__swsetup_r>
 8009424:	b1c0      	cbz	r0, 8009458 <_vfiprintf_r+0x78>
 8009426:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009428:	07dc      	lsls	r4, r3, #31
 800942a:	d50e      	bpl.n	800944a <_vfiprintf_r+0x6a>
 800942c:	f04f 30ff 	mov.w	r0, #4294967295
 8009430:	b01d      	add	sp, #116	; 0x74
 8009432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009436:	4b7b      	ldr	r3, [pc, #492]	; (8009624 <_vfiprintf_r+0x244>)
 8009438:	429d      	cmp	r5, r3
 800943a:	d101      	bne.n	8009440 <_vfiprintf_r+0x60>
 800943c:	68b5      	ldr	r5, [r6, #8]
 800943e:	e7df      	b.n	8009400 <_vfiprintf_r+0x20>
 8009440:	4b79      	ldr	r3, [pc, #484]	; (8009628 <_vfiprintf_r+0x248>)
 8009442:	429d      	cmp	r5, r3
 8009444:	bf08      	it	eq
 8009446:	68f5      	ldreq	r5, [r6, #12]
 8009448:	e7da      	b.n	8009400 <_vfiprintf_r+0x20>
 800944a:	89ab      	ldrh	r3, [r5, #12]
 800944c:	0598      	lsls	r0, r3, #22
 800944e:	d4ed      	bmi.n	800942c <_vfiprintf_r+0x4c>
 8009450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009452:	f000 fb84 	bl	8009b5e <__retarget_lock_release_recursive>
 8009456:	e7e9      	b.n	800942c <_vfiprintf_r+0x4c>
 8009458:	2300      	movs	r3, #0
 800945a:	9309      	str	r3, [sp, #36]	; 0x24
 800945c:	2320      	movs	r3, #32
 800945e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009462:	f8cd 800c 	str.w	r8, [sp, #12]
 8009466:	2330      	movs	r3, #48	; 0x30
 8009468:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800962c <_vfiprintf_r+0x24c>
 800946c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009470:	f04f 0901 	mov.w	r9, #1
 8009474:	4623      	mov	r3, r4
 8009476:	469a      	mov	sl, r3
 8009478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800947c:	b10a      	cbz	r2, 8009482 <_vfiprintf_r+0xa2>
 800947e:	2a25      	cmp	r2, #37	; 0x25
 8009480:	d1f9      	bne.n	8009476 <_vfiprintf_r+0x96>
 8009482:	ebba 0b04 	subs.w	fp, sl, r4
 8009486:	d00b      	beq.n	80094a0 <_vfiprintf_r+0xc0>
 8009488:	465b      	mov	r3, fp
 800948a:	4622      	mov	r2, r4
 800948c:	4629      	mov	r1, r5
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ff93 	bl	80093ba <__sfputs_r>
 8009494:	3001      	adds	r0, #1
 8009496:	f000 80aa 	beq.w	80095ee <_vfiprintf_r+0x20e>
 800949a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800949c:	445a      	add	r2, fp
 800949e:	9209      	str	r2, [sp, #36]	; 0x24
 80094a0:	f89a 3000 	ldrb.w	r3, [sl]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 80a2 	beq.w	80095ee <_vfiprintf_r+0x20e>
 80094aa:	2300      	movs	r3, #0
 80094ac:	f04f 32ff 	mov.w	r2, #4294967295
 80094b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094b4:	f10a 0a01 	add.w	sl, sl, #1
 80094b8:	9304      	str	r3, [sp, #16]
 80094ba:	9307      	str	r3, [sp, #28]
 80094bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094c0:	931a      	str	r3, [sp, #104]	; 0x68
 80094c2:	4654      	mov	r4, sl
 80094c4:	2205      	movs	r2, #5
 80094c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094ca:	4858      	ldr	r0, [pc, #352]	; (800962c <_vfiprintf_r+0x24c>)
 80094cc:	f7f6 fe88 	bl	80001e0 <memchr>
 80094d0:	9a04      	ldr	r2, [sp, #16]
 80094d2:	b9d8      	cbnz	r0, 800950c <_vfiprintf_r+0x12c>
 80094d4:	06d1      	lsls	r1, r2, #27
 80094d6:	bf44      	itt	mi
 80094d8:	2320      	movmi	r3, #32
 80094da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094de:	0713      	lsls	r3, r2, #28
 80094e0:	bf44      	itt	mi
 80094e2:	232b      	movmi	r3, #43	; 0x2b
 80094e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e8:	f89a 3000 	ldrb.w	r3, [sl]
 80094ec:	2b2a      	cmp	r3, #42	; 0x2a
 80094ee:	d015      	beq.n	800951c <_vfiprintf_r+0x13c>
 80094f0:	9a07      	ldr	r2, [sp, #28]
 80094f2:	4654      	mov	r4, sl
 80094f4:	2000      	movs	r0, #0
 80094f6:	f04f 0c0a 	mov.w	ip, #10
 80094fa:	4621      	mov	r1, r4
 80094fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009500:	3b30      	subs	r3, #48	; 0x30
 8009502:	2b09      	cmp	r3, #9
 8009504:	d94e      	bls.n	80095a4 <_vfiprintf_r+0x1c4>
 8009506:	b1b0      	cbz	r0, 8009536 <_vfiprintf_r+0x156>
 8009508:	9207      	str	r2, [sp, #28]
 800950a:	e014      	b.n	8009536 <_vfiprintf_r+0x156>
 800950c:	eba0 0308 	sub.w	r3, r0, r8
 8009510:	fa09 f303 	lsl.w	r3, r9, r3
 8009514:	4313      	orrs	r3, r2
 8009516:	9304      	str	r3, [sp, #16]
 8009518:	46a2      	mov	sl, r4
 800951a:	e7d2      	b.n	80094c2 <_vfiprintf_r+0xe2>
 800951c:	9b03      	ldr	r3, [sp, #12]
 800951e:	1d19      	adds	r1, r3, #4
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	9103      	str	r1, [sp, #12]
 8009524:	2b00      	cmp	r3, #0
 8009526:	bfbb      	ittet	lt
 8009528:	425b      	neglt	r3, r3
 800952a:	f042 0202 	orrlt.w	r2, r2, #2
 800952e:	9307      	strge	r3, [sp, #28]
 8009530:	9307      	strlt	r3, [sp, #28]
 8009532:	bfb8      	it	lt
 8009534:	9204      	strlt	r2, [sp, #16]
 8009536:	7823      	ldrb	r3, [r4, #0]
 8009538:	2b2e      	cmp	r3, #46	; 0x2e
 800953a:	d10c      	bne.n	8009556 <_vfiprintf_r+0x176>
 800953c:	7863      	ldrb	r3, [r4, #1]
 800953e:	2b2a      	cmp	r3, #42	; 0x2a
 8009540:	d135      	bne.n	80095ae <_vfiprintf_r+0x1ce>
 8009542:	9b03      	ldr	r3, [sp, #12]
 8009544:	1d1a      	adds	r2, r3, #4
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	9203      	str	r2, [sp, #12]
 800954a:	2b00      	cmp	r3, #0
 800954c:	bfb8      	it	lt
 800954e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009552:	3402      	adds	r4, #2
 8009554:	9305      	str	r3, [sp, #20]
 8009556:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800963c <_vfiprintf_r+0x25c>
 800955a:	7821      	ldrb	r1, [r4, #0]
 800955c:	2203      	movs	r2, #3
 800955e:	4650      	mov	r0, sl
 8009560:	f7f6 fe3e 	bl	80001e0 <memchr>
 8009564:	b140      	cbz	r0, 8009578 <_vfiprintf_r+0x198>
 8009566:	2340      	movs	r3, #64	; 0x40
 8009568:	eba0 000a 	sub.w	r0, r0, sl
 800956c:	fa03 f000 	lsl.w	r0, r3, r0
 8009570:	9b04      	ldr	r3, [sp, #16]
 8009572:	4303      	orrs	r3, r0
 8009574:	3401      	adds	r4, #1
 8009576:	9304      	str	r3, [sp, #16]
 8009578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800957c:	482c      	ldr	r0, [pc, #176]	; (8009630 <_vfiprintf_r+0x250>)
 800957e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009582:	2206      	movs	r2, #6
 8009584:	f7f6 fe2c 	bl	80001e0 <memchr>
 8009588:	2800      	cmp	r0, #0
 800958a:	d03f      	beq.n	800960c <_vfiprintf_r+0x22c>
 800958c:	4b29      	ldr	r3, [pc, #164]	; (8009634 <_vfiprintf_r+0x254>)
 800958e:	bb1b      	cbnz	r3, 80095d8 <_vfiprintf_r+0x1f8>
 8009590:	9b03      	ldr	r3, [sp, #12]
 8009592:	3307      	adds	r3, #7
 8009594:	f023 0307 	bic.w	r3, r3, #7
 8009598:	3308      	adds	r3, #8
 800959a:	9303      	str	r3, [sp, #12]
 800959c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959e:	443b      	add	r3, r7
 80095a0:	9309      	str	r3, [sp, #36]	; 0x24
 80095a2:	e767      	b.n	8009474 <_vfiprintf_r+0x94>
 80095a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80095a8:	460c      	mov	r4, r1
 80095aa:	2001      	movs	r0, #1
 80095ac:	e7a5      	b.n	80094fa <_vfiprintf_r+0x11a>
 80095ae:	2300      	movs	r3, #0
 80095b0:	3401      	adds	r4, #1
 80095b2:	9305      	str	r3, [sp, #20]
 80095b4:	4619      	mov	r1, r3
 80095b6:	f04f 0c0a 	mov.w	ip, #10
 80095ba:	4620      	mov	r0, r4
 80095bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095c0:	3a30      	subs	r2, #48	; 0x30
 80095c2:	2a09      	cmp	r2, #9
 80095c4:	d903      	bls.n	80095ce <_vfiprintf_r+0x1ee>
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d0c5      	beq.n	8009556 <_vfiprintf_r+0x176>
 80095ca:	9105      	str	r1, [sp, #20]
 80095cc:	e7c3      	b.n	8009556 <_vfiprintf_r+0x176>
 80095ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80095d2:	4604      	mov	r4, r0
 80095d4:	2301      	movs	r3, #1
 80095d6:	e7f0      	b.n	80095ba <_vfiprintf_r+0x1da>
 80095d8:	ab03      	add	r3, sp, #12
 80095da:	9300      	str	r3, [sp, #0]
 80095dc:	462a      	mov	r2, r5
 80095de:	4b16      	ldr	r3, [pc, #88]	; (8009638 <_vfiprintf_r+0x258>)
 80095e0:	a904      	add	r1, sp, #16
 80095e2:	4630      	mov	r0, r6
 80095e4:	f7fd fe1e 	bl	8007224 <_printf_float>
 80095e8:	4607      	mov	r7, r0
 80095ea:	1c78      	adds	r0, r7, #1
 80095ec:	d1d6      	bne.n	800959c <_vfiprintf_r+0x1bc>
 80095ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095f0:	07d9      	lsls	r1, r3, #31
 80095f2:	d405      	bmi.n	8009600 <_vfiprintf_r+0x220>
 80095f4:	89ab      	ldrh	r3, [r5, #12]
 80095f6:	059a      	lsls	r2, r3, #22
 80095f8:	d402      	bmi.n	8009600 <_vfiprintf_r+0x220>
 80095fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095fc:	f000 faaf 	bl	8009b5e <__retarget_lock_release_recursive>
 8009600:	89ab      	ldrh	r3, [r5, #12]
 8009602:	065b      	lsls	r3, r3, #25
 8009604:	f53f af12 	bmi.w	800942c <_vfiprintf_r+0x4c>
 8009608:	9809      	ldr	r0, [sp, #36]	; 0x24
 800960a:	e711      	b.n	8009430 <_vfiprintf_r+0x50>
 800960c:	ab03      	add	r3, sp, #12
 800960e:	9300      	str	r3, [sp, #0]
 8009610:	462a      	mov	r2, r5
 8009612:	4b09      	ldr	r3, [pc, #36]	; (8009638 <_vfiprintf_r+0x258>)
 8009614:	a904      	add	r1, sp, #16
 8009616:	4630      	mov	r0, r6
 8009618:	f7fe f8a8 	bl	800776c <_printf_i>
 800961c:	e7e4      	b.n	80095e8 <_vfiprintf_r+0x208>
 800961e:	bf00      	nop
 8009620:	0800a334 	.word	0x0800a334
 8009624:	0800a354 	.word	0x0800a354
 8009628:	0800a314 	.word	0x0800a314
 800962c:	0800a1bc 	.word	0x0800a1bc
 8009630:	0800a1c6 	.word	0x0800a1c6
 8009634:	08007225 	.word	0x08007225
 8009638:	080093bb 	.word	0x080093bb
 800963c:	0800a1c2 	.word	0x0800a1c2

08009640 <__swbuf_r>:
 8009640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009642:	460e      	mov	r6, r1
 8009644:	4614      	mov	r4, r2
 8009646:	4605      	mov	r5, r0
 8009648:	b118      	cbz	r0, 8009652 <__swbuf_r+0x12>
 800964a:	6983      	ldr	r3, [r0, #24]
 800964c:	b90b      	cbnz	r3, 8009652 <__swbuf_r+0x12>
 800964e:	f000 f9e7 	bl	8009a20 <__sinit>
 8009652:	4b21      	ldr	r3, [pc, #132]	; (80096d8 <__swbuf_r+0x98>)
 8009654:	429c      	cmp	r4, r3
 8009656:	d12b      	bne.n	80096b0 <__swbuf_r+0x70>
 8009658:	686c      	ldr	r4, [r5, #4]
 800965a:	69a3      	ldr	r3, [r4, #24]
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	89a3      	ldrh	r3, [r4, #12]
 8009660:	071a      	lsls	r2, r3, #28
 8009662:	d52f      	bpl.n	80096c4 <__swbuf_r+0x84>
 8009664:	6923      	ldr	r3, [r4, #16]
 8009666:	b36b      	cbz	r3, 80096c4 <__swbuf_r+0x84>
 8009668:	6923      	ldr	r3, [r4, #16]
 800966a:	6820      	ldr	r0, [r4, #0]
 800966c:	1ac0      	subs	r0, r0, r3
 800966e:	6963      	ldr	r3, [r4, #20]
 8009670:	b2f6      	uxtb	r6, r6
 8009672:	4283      	cmp	r3, r0
 8009674:	4637      	mov	r7, r6
 8009676:	dc04      	bgt.n	8009682 <__swbuf_r+0x42>
 8009678:	4621      	mov	r1, r4
 800967a:	4628      	mov	r0, r5
 800967c:	f000 f93c 	bl	80098f8 <_fflush_r>
 8009680:	bb30      	cbnz	r0, 80096d0 <__swbuf_r+0x90>
 8009682:	68a3      	ldr	r3, [r4, #8]
 8009684:	3b01      	subs	r3, #1
 8009686:	60a3      	str	r3, [r4, #8]
 8009688:	6823      	ldr	r3, [r4, #0]
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	6022      	str	r2, [r4, #0]
 800968e:	701e      	strb	r6, [r3, #0]
 8009690:	6963      	ldr	r3, [r4, #20]
 8009692:	3001      	adds	r0, #1
 8009694:	4283      	cmp	r3, r0
 8009696:	d004      	beq.n	80096a2 <__swbuf_r+0x62>
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	07db      	lsls	r3, r3, #31
 800969c:	d506      	bpl.n	80096ac <__swbuf_r+0x6c>
 800969e:	2e0a      	cmp	r6, #10
 80096a0:	d104      	bne.n	80096ac <__swbuf_r+0x6c>
 80096a2:	4621      	mov	r1, r4
 80096a4:	4628      	mov	r0, r5
 80096a6:	f000 f927 	bl	80098f8 <_fflush_r>
 80096aa:	b988      	cbnz	r0, 80096d0 <__swbuf_r+0x90>
 80096ac:	4638      	mov	r0, r7
 80096ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096b0:	4b0a      	ldr	r3, [pc, #40]	; (80096dc <__swbuf_r+0x9c>)
 80096b2:	429c      	cmp	r4, r3
 80096b4:	d101      	bne.n	80096ba <__swbuf_r+0x7a>
 80096b6:	68ac      	ldr	r4, [r5, #8]
 80096b8:	e7cf      	b.n	800965a <__swbuf_r+0x1a>
 80096ba:	4b09      	ldr	r3, [pc, #36]	; (80096e0 <__swbuf_r+0xa0>)
 80096bc:	429c      	cmp	r4, r3
 80096be:	bf08      	it	eq
 80096c0:	68ec      	ldreq	r4, [r5, #12]
 80096c2:	e7ca      	b.n	800965a <__swbuf_r+0x1a>
 80096c4:	4621      	mov	r1, r4
 80096c6:	4628      	mov	r0, r5
 80096c8:	f000 f81a 	bl	8009700 <__swsetup_r>
 80096cc:	2800      	cmp	r0, #0
 80096ce:	d0cb      	beq.n	8009668 <__swbuf_r+0x28>
 80096d0:	f04f 37ff 	mov.w	r7, #4294967295
 80096d4:	e7ea      	b.n	80096ac <__swbuf_r+0x6c>
 80096d6:	bf00      	nop
 80096d8:	0800a334 	.word	0x0800a334
 80096dc:	0800a354 	.word	0x0800a354
 80096e0:	0800a314 	.word	0x0800a314

080096e4 <__ascii_wctomb>:
 80096e4:	b149      	cbz	r1, 80096fa <__ascii_wctomb+0x16>
 80096e6:	2aff      	cmp	r2, #255	; 0xff
 80096e8:	bf85      	ittet	hi
 80096ea:	238a      	movhi	r3, #138	; 0x8a
 80096ec:	6003      	strhi	r3, [r0, #0]
 80096ee:	700a      	strbls	r2, [r1, #0]
 80096f0:	f04f 30ff 	movhi.w	r0, #4294967295
 80096f4:	bf98      	it	ls
 80096f6:	2001      	movls	r0, #1
 80096f8:	4770      	bx	lr
 80096fa:	4608      	mov	r0, r1
 80096fc:	4770      	bx	lr
	...

08009700 <__swsetup_r>:
 8009700:	4b32      	ldr	r3, [pc, #200]	; (80097cc <__swsetup_r+0xcc>)
 8009702:	b570      	push	{r4, r5, r6, lr}
 8009704:	681d      	ldr	r5, [r3, #0]
 8009706:	4606      	mov	r6, r0
 8009708:	460c      	mov	r4, r1
 800970a:	b125      	cbz	r5, 8009716 <__swsetup_r+0x16>
 800970c:	69ab      	ldr	r3, [r5, #24]
 800970e:	b913      	cbnz	r3, 8009716 <__swsetup_r+0x16>
 8009710:	4628      	mov	r0, r5
 8009712:	f000 f985 	bl	8009a20 <__sinit>
 8009716:	4b2e      	ldr	r3, [pc, #184]	; (80097d0 <__swsetup_r+0xd0>)
 8009718:	429c      	cmp	r4, r3
 800971a:	d10f      	bne.n	800973c <__swsetup_r+0x3c>
 800971c:	686c      	ldr	r4, [r5, #4]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009724:	0719      	lsls	r1, r3, #28
 8009726:	d42c      	bmi.n	8009782 <__swsetup_r+0x82>
 8009728:	06dd      	lsls	r5, r3, #27
 800972a:	d411      	bmi.n	8009750 <__swsetup_r+0x50>
 800972c:	2309      	movs	r3, #9
 800972e:	6033      	str	r3, [r6, #0]
 8009730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009734:	81a3      	strh	r3, [r4, #12]
 8009736:	f04f 30ff 	mov.w	r0, #4294967295
 800973a:	e03e      	b.n	80097ba <__swsetup_r+0xba>
 800973c:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <__swsetup_r+0xd4>)
 800973e:	429c      	cmp	r4, r3
 8009740:	d101      	bne.n	8009746 <__swsetup_r+0x46>
 8009742:	68ac      	ldr	r4, [r5, #8]
 8009744:	e7eb      	b.n	800971e <__swsetup_r+0x1e>
 8009746:	4b24      	ldr	r3, [pc, #144]	; (80097d8 <__swsetup_r+0xd8>)
 8009748:	429c      	cmp	r4, r3
 800974a:	bf08      	it	eq
 800974c:	68ec      	ldreq	r4, [r5, #12]
 800974e:	e7e6      	b.n	800971e <__swsetup_r+0x1e>
 8009750:	0758      	lsls	r0, r3, #29
 8009752:	d512      	bpl.n	800977a <__swsetup_r+0x7a>
 8009754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009756:	b141      	cbz	r1, 800976a <__swsetup_r+0x6a>
 8009758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800975c:	4299      	cmp	r1, r3
 800975e:	d002      	beq.n	8009766 <__swsetup_r+0x66>
 8009760:	4630      	mov	r0, r6
 8009762:	f7ff fb6f 	bl	8008e44 <_free_r>
 8009766:	2300      	movs	r3, #0
 8009768:	6363      	str	r3, [r4, #52]	; 0x34
 800976a:	89a3      	ldrh	r3, [r4, #12]
 800976c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009770:	81a3      	strh	r3, [r4, #12]
 8009772:	2300      	movs	r3, #0
 8009774:	6063      	str	r3, [r4, #4]
 8009776:	6923      	ldr	r3, [r4, #16]
 8009778:	6023      	str	r3, [r4, #0]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	f043 0308 	orr.w	r3, r3, #8
 8009780:	81a3      	strh	r3, [r4, #12]
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	b94b      	cbnz	r3, 800979a <__swsetup_r+0x9a>
 8009786:	89a3      	ldrh	r3, [r4, #12]
 8009788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800978c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009790:	d003      	beq.n	800979a <__swsetup_r+0x9a>
 8009792:	4621      	mov	r1, r4
 8009794:	4630      	mov	r0, r6
 8009796:	f000 fa07 	bl	8009ba8 <__smakebuf_r>
 800979a:	89a0      	ldrh	r0, [r4, #12]
 800979c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097a0:	f010 0301 	ands.w	r3, r0, #1
 80097a4:	d00a      	beq.n	80097bc <__swsetup_r+0xbc>
 80097a6:	2300      	movs	r3, #0
 80097a8:	60a3      	str	r3, [r4, #8]
 80097aa:	6963      	ldr	r3, [r4, #20]
 80097ac:	425b      	negs	r3, r3
 80097ae:	61a3      	str	r3, [r4, #24]
 80097b0:	6923      	ldr	r3, [r4, #16]
 80097b2:	b943      	cbnz	r3, 80097c6 <__swsetup_r+0xc6>
 80097b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80097b8:	d1ba      	bne.n	8009730 <__swsetup_r+0x30>
 80097ba:	bd70      	pop	{r4, r5, r6, pc}
 80097bc:	0781      	lsls	r1, r0, #30
 80097be:	bf58      	it	pl
 80097c0:	6963      	ldrpl	r3, [r4, #20]
 80097c2:	60a3      	str	r3, [r4, #8]
 80097c4:	e7f4      	b.n	80097b0 <__swsetup_r+0xb0>
 80097c6:	2000      	movs	r0, #0
 80097c8:	e7f7      	b.n	80097ba <__swsetup_r+0xba>
 80097ca:	bf00      	nop
 80097cc:	2000014c 	.word	0x2000014c
 80097d0:	0800a334 	.word	0x0800a334
 80097d4:	0800a354 	.word	0x0800a354
 80097d8:	0800a314 	.word	0x0800a314

080097dc <abort>:
 80097dc:	b508      	push	{r3, lr}
 80097de:	2006      	movs	r0, #6
 80097e0:	f000 fa52 	bl	8009c88 <raise>
 80097e4:	2001      	movs	r0, #1
 80097e6:	f7f8 faf7 	bl	8001dd8 <_exit>
	...

080097ec <__sflush_r>:
 80097ec:	898a      	ldrh	r2, [r1, #12]
 80097ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097f2:	4605      	mov	r5, r0
 80097f4:	0710      	lsls	r0, r2, #28
 80097f6:	460c      	mov	r4, r1
 80097f8:	d458      	bmi.n	80098ac <__sflush_r+0xc0>
 80097fa:	684b      	ldr	r3, [r1, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	dc05      	bgt.n	800980c <__sflush_r+0x20>
 8009800:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009802:	2b00      	cmp	r3, #0
 8009804:	dc02      	bgt.n	800980c <__sflush_r+0x20>
 8009806:	2000      	movs	r0, #0
 8009808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800980c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800980e:	2e00      	cmp	r6, #0
 8009810:	d0f9      	beq.n	8009806 <__sflush_r+0x1a>
 8009812:	2300      	movs	r3, #0
 8009814:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009818:	682f      	ldr	r7, [r5, #0]
 800981a:	602b      	str	r3, [r5, #0]
 800981c:	d032      	beq.n	8009884 <__sflush_r+0x98>
 800981e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009820:	89a3      	ldrh	r3, [r4, #12]
 8009822:	075a      	lsls	r2, r3, #29
 8009824:	d505      	bpl.n	8009832 <__sflush_r+0x46>
 8009826:	6863      	ldr	r3, [r4, #4]
 8009828:	1ac0      	subs	r0, r0, r3
 800982a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800982c:	b10b      	cbz	r3, 8009832 <__sflush_r+0x46>
 800982e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009830:	1ac0      	subs	r0, r0, r3
 8009832:	2300      	movs	r3, #0
 8009834:	4602      	mov	r2, r0
 8009836:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009838:	6a21      	ldr	r1, [r4, #32]
 800983a:	4628      	mov	r0, r5
 800983c:	47b0      	blx	r6
 800983e:	1c43      	adds	r3, r0, #1
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	d106      	bne.n	8009852 <__sflush_r+0x66>
 8009844:	6829      	ldr	r1, [r5, #0]
 8009846:	291d      	cmp	r1, #29
 8009848:	d82c      	bhi.n	80098a4 <__sflush_r+0xb8>
 800984a:	4a2a      	ldr	r2, [pc, #168]	; (80098f4 <__sflush_r+0x108>)
 800984c:	40ca      	lsrs	r2, r1
 800984e:	07d6      	lsls	r6, r2, #31
 8009850:	d528      	bpl.n	80098a4 <__sflush_r+0xb8>
 8009852:	2200      	movs	r2, #0
 8009854:	6062      	str	r2, [r4, #4]
 8009856:	04d9      	lsls	r1, r3, #19
 8009858:	6922      	ldr	r2, [r4, #16]
 800985a:	6022      	str	r2, [r4, #0]
 800985c:	d504      	bpl.n	8009868 <__sflush_r+0x7c>
 800985e:	1c42      	adds	r2, r0, #1
 8009860:	d101      	bne.n	8009866 <__sflush_r+0x7a>
 8009862:	682b      	ldr	r3, [r5, #0]
 8009864:	b903      	cbnz	r3, 8009868 <__sflush_r+0x7c>
 8009866:	6560      	str	r0, [r4, #84]	; 0x54
 8009868:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800986a:	602f      	str	r7, [r5, #0]
 800986c:	2900      	cmp	r1, #0
 800986e:	d0ca      	beq.n	8009806 <__sflush_r+0x1a>
 8009870:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009874:	4299      	cmp	r1, r3
 8009876:	d002      	beq.n	800987e <__sflush_r+0x92>
 8009878:	4628      	mov	r0, r5
 800987a:	f7ff fae3 	bl	8008e44 <_free_r>
 800987e:	2000      	movs	r0, #0
 8009880:	6360      	str	r0, [r4, #52]	; 0x34
 8009882:	e7c1      	b.n	8009808 <__sflush_r+0x1c>
 8009884:	6a21      	ldr	r1, [r4, #32]
 8009886:	2301      	movs	r3, #1
 8009888:	4628      	mov	r0, r5
 800988a:	47b0      	blx	r6
 800988c:	1c41      	adds	r1, r0, #1
 800988e:	d1c7      	bne.n	8009820 <__sflush_r+0x34>
 8009890:	682b      	ldr	r3, [r5, #0]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0c4      	beq.n	8009820 <__sflush_r+0x34>
 8009896:	2b1d      	cmp	r3, #29
 8009898:	d001      	beq.n	800989e <__sflush_r+0xb2>
 800989a:	2b16      	cmp	r3, #22
 800989c:	d101      	bne.n	80098a2 <__sflush_r+0xb6>
 800989e:	602f      	str	r7, [r5, #0]
 80098a0:	e7b1      	b.n	8009806 <__sflush_r+0x1a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	e7ad      	b.n	8009808 <__sflush_r+0x1c>
 80098ac:	690f      	ldr	r7, [r1, #16]
 80098ae:	2f00      	cmp	r7, #0
 80098b0:	d0a9      	beq.n	8009806 <__sflush_r+0x1a>
 80098b2:	0793      	lsls	r3, r2, #30
 80098b4:	680e      	ldr	r6, [r1, #0]
 80098b6:	bf08      	it	eq
 80098b8:	694b      	ldreq	r3, [r1, #20]
 80098ba:	600f      	str	r7, [r1, #0]
 80098bc:	bf18      	it	ne
 80098be:	2300      	movne	r3, #0
 80098c0:	eba6 0807 	sub.w	r8, r6, r7
 80098c4:	608b      	str	r3, [r1, #8]
 80098c6:	f1b8 0f00 	cmp.w	r8, #0
 80098ca:	dd9c      	ble.n	8009806 <__sflush_r+0x1a>
 80098cc:	6a21      	ldr	r1, [r4, #32]
 80098ce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80098d0:	4643      	mov	r3, r8
 80098d2:	463a      	mov	r2, r7
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b0      	blx	r6
 80098d8:	2800      	cmp	r0, #0
 80098da:	dc06      	bgt.n	80098ea <__sflush_r+0xfe>
 80098dc:	89a3      	ldrh	r3, [r4, #12]
 80098de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e2:	81a3      	strh	r3, [r4, #12]
 80098e4:	f04f 30ff 	mov.w	r0, #4294967295
 80098e8:	e78e      	b.n	8009808 <__sflush_r+0x1c>
 80098ea:	4407      	add	r7, r0
 80098ec:	eba8 0800 	sub.w	r8, r8, r0
 80098f0:	e7e9      	b.n	80098c6 <__sflush_r+0xda>
 80098f2:	bf00      	nop
 80098f4:	20400001 	.word	0x20400001

080098f8 <_fflush_r>:
 80098f8:	b538      	push	{r3, r4, r5, lr}
 80098fa:	690b      	ldr	r3, [r1, #16]
 80098fc:	4605      	mov	r5, r0
 80098fe:	460c      	mov	r4, r1
 8009900:	b913      	cbnz	r3, 8009908 <_fflush_r+0x10>
 8009902:	2500      	movs	r5, #0
 8009904:	4628      	mov	r0, r5
 8009906:	bd38      	pop	{r3, r4, r5, pc}
 8009908:	b118      	cbz	r0, 8009912 <_fflush_r+0x1a>
 800990a:	6983      	ldr	r3, [r0, #24]
 800990c:	b90b      	cbnz	r3, 8009912 <_fflush_r+0x1a>
 800990e:	f000 f887 	bl	8009a20 <__sinit>
 8009912:	4b14      	ldr	r3, [pc, #80]	; (8009964 <_fflush_r+0x6c>)
 8009914:	429c      	cmp	r4, r3
 8009916:	d11b      	bne.n	8009950 <_fflush_r+0x58>
 8009918:	686c      	ldr	r4, [r5, #4]
 800991a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0ef      	beq.n	8009902 <_fflush_r+0xa>
 8009922:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009924:	07d0      	lsls	r0, r2, #31
 8009926:	d404      	bmi.n	8009932 <_fflush_r+0x3a>
 8009928:	0599      	lsls	r1, r3, #22
 800992a:	d402      	bmi.n	8009932 <_fflush_r+0x3a>
 800992c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992e:	f000 f915 	bl	8009b5c <__retarget_lock_acquire_recursive>
 8009932:	4628      	mov	r0, r5
 8009934:	4621      	mov	r1, r4
 8009936:	f7ff ff59 	bl	80097ec <__sflush_r>
 800993a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800993c:	07da      	lsls	r2, r3, #31
 800993e:	4605      	mov	r5, r0
 8009940:	d4e0      	bmi.n	8009904 <_fflush_r+0xc>
 8009942:	89a3      	ldrh	r3, [r4, #12]
 8009944:	059b      	lsls	r3, r3, #22
 8009946:	d4dd      	bmi.n	8009904 <_fflush_r+0xc>
 8009948:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800994a:	f000 f908 	bl	8009b5e <__retarget_lock_release_recursive>
 800994e:	e7d9      	b.n	8009904 <_fflush_r+0xc>
 8009950:	4b05      	ldr	r3, [pc, #20]	; (8009968 <_fflush_r+0x70>)
 8009952:	429c      	cmp	r4, r3
 8009954:	d101      	bne.n	800995a <_fflush_r+0x62>
 8009956:	68ac      	ldr	r4, [r5, #8]
 8009958:	e7df      	b.n	800991a <_fflush_r+0x22>
 800995a:	4b04      	ldr	r3, [pc, #16]	; (800996c <_fflush_r+0x74>)
 800995c:	429c      	cmp	r4, r3
 800995e:	bf08      	it	eq
 8009960:	68ec      	ldreq	r4, [r5, #12]
 8009962:	e7da      	b.n	800991a <_fflush_r+0x22>
 8009964:	0800a334 	.word	0x0800a334
 8009968:	0800a354 	.word	0x0800a354
 800996c:	0800a314 	.word	0x0800a314

08009970 <std>:
 8009970:	2300      	movs	r3, #0
 8009972:	b510      	push	{r4, lr}
 8009974:	4604      	mov	r4, r0
 8009976:	e9c0 3300 	strd	r3, r3, [r0]
 800997a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800997e:	6083      	str	r3, [r0, #8]
 8009980:	8181      	strh	r1, [r0, #12]
 8009982:	6643      	str	r3, [r0, #100]	; 0x64
 8009984:	81c2      	strh	r2, [r0, #14]
 8009986:	6183      	str	r3, [r0, #24]
 8009988:	4619      	mov	r1, r3
 800998a:	2208      	movs	r2, #8
 800998c:	305c      	adds	r0, #92	; 0x5c
 800998e:	f7fd fba1 	bl	80070d4 <memset>
 8009992:	4b05      	ldr	r3, [pc, #20]	; (80099a8 <std+0x38>)
 8009994:	6263      	str	r3, [r4, #36]	; 0x24
 8009996:	4b05      	ldr	r3, [pc, #20]	; (80099ac <std+0x3c>)
 8009998:	62a3      	str	r3, [r4, #40]	; 0x28
 800999a:	4b05      	ldr	r3, [pc, #20]	; (80099b0 <std+0x40>)
 800999c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800999e:	4b05      	ldr	r3, [pc, #20]	; (80099b4 <std+0x44>)
 80099a0:	6224      	str	r4, [r4, #32]
 80099a2:	6323      	str	r3, [r4, #48]	; 0x30
 80099a4:	bd10      	pop	{r4, pc}
 80099a6:	bf00      	nop
 80099a8:	08009cc1 	.word	0x08009cc1
 80099ac:	08009ce3 	.word	0x08009ce3
 80099b0:	08009d1b 	.word	0x08009d1b
 80099b4:	08009d3f 	.word	0x08009d3f

080099b8 <_cleanup_r>:
 80099b8:	4901      	ldr	r1, [pc, #4]	; (80099c0 <_cleanup_r+0x8>)
 80099ba:	f000 b8af 	b.w	8009b1c <_fwalk_reent>
 80099be:	bf00      	nop
 80099c0:	080098f9 	.word	0x080098f9

080099c4 <__sfmoreglue>:
 80099c4:	b570      	push	{r4, r5, r6, lr}
 80099c6:	1e4a      	subs	r2, r1, #1
 80099c8:	2568      	movs	r5, #104	; 0x68
 80099ca:	4355      	muls	r5, r2
 80099cc:	460e      	mov	r6, r1
 80099ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80099d2:	f7ff fa87 	bl	8008ee4 <_malloc_r>
 80099d6:	4604      	mov	r4, r0
 80099d8:	b140      	cbz	r0, 80099ec <__sfmoreglue+0x28>
 80099da:	2100      	movs	r1, #0
 80099dc:	e9c0 1600 	strd	r1, r6, [r0]
 80099e0:	300c      	adds	r0, #12
 80099e2:	60a0      	str	r0, [r4, #8]
 80099e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80099e8:	f7fd fb74 	bl	80070d4 <memset>
 80099ec:	4620      	mov	r0, r4
 80099ee:	bd70      	pop	{r4, r5, r6, pc}

080099f0 <__sfp_lock_acquire>:
 80099f0:	4801      	ldr	r0, [pc, #4]	; (80099f8 <__sfp_lock_acquire+0x8>)
 80099f2:	f000 b8b3 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 80099f6:	bf00      	nop
 80099f8:	20000758 	.word	0x20000758

080099fc <__sfp_lock_release>:
 80099fc:	4801      	ldr	r0, [pc, #4]	; (8009a04 <__sfp_lock_release+0x8>)
 80099fe:	f000 b8ae 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009a02:	bf00      	nop
 8009a04:	20000758 	.word	0x20000758

08009a08 <__sinit_lock_acquire>:
 8009a08:	4801      	ldr	r0, [pc, #4]	; (8009a10 <__sinit_lock_acquire+0x8>)
 8009a0a:	f000 b8a7 	b.w	8009b5c <__retarget_lock_acquire_recursive>
 8009a0e:	bf00      	nop
 8009a10:	20000753 	.word	0x20000753

08009a14 <__sinit_lock_release>:
 8009a14:	4801      	ldr	r0, [pc, #4]	; (8009a1c <__sinit_lock_release+0x8>)
 8009a16:	f000 b8a2 	b.w	8009b5e <__retarget_lock_release_recursive>
 8009a1a:	bf00      	nop
 8009a1c:	20000753 	.word	0x20000753

08009a20 <__sinit>:
 8009a20:	b510      	push	{r4, lr}
 8009a22:	4604      	mov	r4, r0
 8009a24:	f7ff fff0 	bl	8009a08 <__sinit_lock_acquire>
 8009a28:	69a3      	ldr	r3, [r4, #24]
 8009a2a:	b11b      	cbz	r3, 8009a34 <__sinit+0x14>
 8009a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009a30:	f7ff bff0 	b.w	8009a14 <__sinit_lock_release>
 8009a34:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009a38:	6523      	str	r3, [r4, #80]	; 0x50
 8009a3a:	4b13      	ldr	r3, [pc, #76]	; (8009a88 <__sinit+0x68>)
 8009a3c:	4a13      	ldr	r2, [pc, #76]	; (8009a8c <__sinit+0x6c>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	62a2      	str	r2, [r4, #40]	; 0x28
 8009a42:	42a3      	cmp	r3, r4
 8009a44:	bf04      	itt	eq
 8009a46:	2301      	moveq	r3, #1
 8009a48:	61a3      	streq	r3, [r4, #24]
 8009a4a:	4620      	mov	r0, r4
 8009a4c:	f000 f820 	bl	8009a90 <__sfp>
 8009a50:	6060      	str	r0, [r4, #4]
 8009a52:	4620      	mov	r0, r4
 8009a54:	f000 f81c 	bl	8009a90 <__sfp>
 8009a58:	60a0      	str	r0, [r4, #8]
 8009a5a:	4620      	mov	r0, r4
 8009a5c:	f000 f818 	bl	8009a90 <__sfp>
 8009a60:	2200      	movs	r2, #0
 8009a62:	60e0      	str	r0, [r4, #12]
 8009a64:	2104      	movs	r1, #4
 8009a66:	6860      	ldr	r0, [r4, #4]
 8009a68:	f7ff ff82 	bl	8009970 <std>
 8009a6c:	68a0      	ldr	r0, [r4, #8]
 8009a6e:	2201      	movs	r2, #1
 8009a70:	2109      	movs	r1, #9
 8009a72:	f7ff ff7d 	bl	8009970 <std>
 8009a76:	68e0      	ldr	r0, [r4, #12]
 8009a78:	2202      	movs	r2, #2
 8009a7a:	2112      	movs	r1, #18
 8009a7c:	f7ff ff78 	bl	8009970 <std>
 8009a80:	2301      	movs	r3, #1
 8009a82:	61a3      	str	r3, [r4, #24]
 8009a84:	e7d2      	b.n	8009a2c <__sinit+0xc>
 8009a86:	bf00      	nop
 8009a88:	08009f90 	.word	0x08009f90
 8009a8c:	080099b9 	.word	0x080099b9

08009a90 <__sfp>:
 8009a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a92:	4607      	mov	r7, r0
 8009a94:	f7ff ffac 	bl	80099f0 <__sfp_lock_acquire>
 8009a98:	4b1e      	ldr	r3, [pc, #120]	; (8009b14 <__sfp+0x84>)
 8009a9a:	681e      	ldr	r6, [r3, #0]
 8009a9c:	69b3      	ldr	r3, [r6, #24]
 8009a9e:	b913      	cbnz	r3, 8009aa6 <__sfp+0x16>
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	f7ff ffbd 	bl	8009a20 <__sinit>
 8009aa6:	3648      	adds	r6, #72	; 0x48
 8009aa8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009aac:	3b01      	subs	r3, #1
 8009aae:	d503      	bpl.n	8009ab8 <__sfp+0x28>
 8009ab0:	6833      	ldr	r3, [r6, #0]
 8009ab2:	b30b      	cbz	r3, 8009af8 <__sfp+0x68>
 8009ab4:	6836      	ldr	r6, [r6, #0]
 8009ab6:	e7f7      	b.n	8009aa8 <__sfp+0x18>
 8009ab8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009abc:	b9d5      	cbnz	r5, 8009af4 <__sfp+0x64>
 8009abe:	4b16      	ldr	r3, [pc, #88]	; (8009b18 <__sfp+0x88>)
 8009ac0:	60e3      	str	r3, [r4, #12]
 8009ac2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009ac6:	6665      	str	r5, [r4, #100]	; 0x64
 8009ac8:	f000 f847 	bl	8009b5a <__retarget_lock_init_recursive>
 8009acc:	f7ff ff96 	bl	80099fc <__sfp_lock_release>
 8009ad0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009ad4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009ad8:	6025      	str	r5, [r4, #0]
 8009ada:	61a5      	str	r5, [r4, #24]
 8009adc:	2208      	movs	r2, #8
 8009ade:	4629      	mov	r1, r5
 8009ae0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009ae4:	f7fd faf6 	bl	80070d4 <memset>
 8009ae8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009aec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009af0:	4620      	mov	r0, r4
 8009af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009af4:	3468      	adds	r4, #104	; 0x68
 8009af6:	e7d9      	b.n	8009aac <__sfp+0x1c>
 8009af8:	2104      	movs	r1, #4
 8009afa:	4638      	mov	r0, r7
 8009afc:	f7ff ff62 	bl	80099c4 <__sfmoreglue>
 8009b00:	4604      	mov	r4, r0
 8009b02:	6030      	str	r0, [r6, #0]
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d1d5      	bne.n	8009ab4 <__sfp+0x24>
 8009b08:	f7ff ff78 	bl	80099fc <__sfp_lock_release>
 8009b0c:	230c      	movs	r3, #12
 8009b0e:	603b      	str	r3, [r7, #0]
 8009b10:	e7ee      	b.n	8009af0 <__sfp+0x60>
 8009b12:	bf00      	nop
 8009b14:	08009f90 	.word	0x08009f90
 8009b18:	ffff0001 	.word	0xffff0001

08009b1c <_fwalk_reent>:
 8009b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b20:	4606      	mov	r6, r0
 8009b22:	4688      	mov	r8, r1
 8009b24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009b28:	2700      	movs	r7, #0
 8009b2a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009b2e:	f1b9 0901 	subs.w	r9, r9, #1
 8009b32:	d505      	bpl.n	8009b40 <_fwalk_reent+0x24>
 8009b34:	6824      	ldr	r4, [r4, #0]
 8009b36:	2c00      	cmp	r4, #0
 8009b38:	d1f7      	bne.n	8009b2a <_fwalk_reent+0xe>
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b40:	89ab      	ldrh	r3, [r5, #12]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d907      	bls.n	8009b56 <_fwalk_reent+0x3a>
 8009b46:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	d003      	beq.n	8009b56 <_fwalk_reent+0x3a>
 8009b4e:	4629      	mov	r1, r5
 8009b50:	4630      	mov	r0, r6
 8009b52:	47c0      	blx	r8
 8009b54:	4307      	orrs	r7, r0
 8009b56:	3568      	adds	r5, #104	; 0x68
 8009b58:	e7e9      	b.n	8009b2e <_fwalk_reent+0x12>

08009b5a <__retarget_lock_init_recursive>:
 8009b5a:	4770      	bx	lr

08009b5c <__retarget_lock_acquire_recursive>:
 8009b5c:	4770      	bx	lr

08009b5e <__retarget_lock_release_recursive>:
 8009b5e:	4770      	bx	lr

08009b60 <__swhatbuf_r>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	460e      	mov	r6, r1
 8009b64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b68:	2900      	cmp	r1, #0
 8009b6a:	b096      	sub	sp, #88	; 0x58
 8009b6c:	4614      	mov	r4, r2
 8009b6e:	461d      	mov	r5, r3
 8009b70:	da07      	bge.n	8009b82 <__swhatbuf_r+0x22>
 8009b72:	2300      	movs	r3, #0
 8009b74:	602b      	str	r3, [r5, #0]
 8009b76:	89b3      	ldrh	r3, [r6, #12]
 8009b78:	061a      	lsls	r2, r3, #24
 8009b7a:	d410      	bmi.n	8009b9e <__swhatbuf_r+0x3e>
 8009b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009b80:	e00e      	b.n	8009ba0 <__swhatbuf_r+0x40>
 8009b82:	466a      	mov	r2, sp
 8009b84:	f000 f902 	bl	8009d8c <_fstat_r>
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	dbf2      	blt.n	8009b72 <__swhatbuf_r+0x12>
 8009b8c:	9a01      	ldr	r2, [sp, #4]
 8009b8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009b92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009b96:	425a      	negs	r2, r3
 8009b98:	415a      	adcs	r2, r3
 8009b9a:	602a      	str	r2, [r5, #0]
 8009b9c:	e7ee      	b.n	8009b7c <__swhatbuf_r+0x1c>
 8009b9e:	2340      	movs	r3, #64	; 0x40
 8009ba0:	2000      	movs	r0, #0
 8009ba2:	6023      	str	r3, [r4, #0]
 8009ba4:	b016      	add	sp, #88	; 0x58
 8009ba6:	bd70      	pop	{r4, r5, r6, pc}

08009ba8 <__smakebuf_r>:
 8009ba8:	898b      	ldrh	r3, [r1, #12]
 8009baa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009bac:	079d      	lsls	r5, r3, #30
 8009bae:	4606      	mov	r6, r0
 8009bb0:	460c      	mov	r4, r1
 8009bb2:	d507      	bpl.n	8009bc4 <__smakebuf_r+0x1c>
 8009bb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009bb8:	6023      	str	r3, [r4, #0]
 8009bba:	6123      	str	r3, [r4, #16]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	6163      	str	r3, [r4, #20]
 8009bc0:	b002      	add	sp, #8
 8009bc2:	bd70      	pop	{r4, r5, r6, pc}
 8009bc4:	ab01      	add	r3, sp, #4
 8009bc6:	466a      	mov	r2, sp
 8009bc8:	f7ff ffca 	bl	8009b60 <__swhatbuf_r>
 8009bcc:	9900      	ldr	r1, [sp, #0]
 8009bce:	4605      	mov	r5, r0
 8009bd0:	4630      	mov	r0, r6
 8009bd2:	f7ff f987 	bl	8008ee4 <_malloc_r>
 8009bd6:	b948      	cbnz	r0, 8009bec <__smakebuf_r+0x44>
 8009bd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bdc:	059a      	lsls	r2, r3, #22
 8009bde:	d4ef      	bmi.n	8009bc0 <__smakebuf_r+0x18>
 8009be0:	f023 0303 	bic.w	r3, r3, #3
 8009be4:	f043 0302 	orr.w	r3, r3, #2
 8009be8:	81a3      	strh	r3, [r4, #12]
 8009bea:	e7e3      	b.n	8009bb4 <__smakebuf_r+0xc>
 8009bec:	4b0d      	ldr	r3, [pc, #52]	; (8009c24 <__smakebuf_r+0x7c>)
 8009bee:	62b3      	str	r3, [r6, #40]	; 0x28
 8009bf0:	89a3      	ldrh	r3, [r4, #12]
 8009bf2:	6020      	str	r0, [r4, #0]
 8009bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bf8:	81a3      	strh	r3, [r4, #12]
 8009bfa:	9b00      	ldr	r3, [sp, #0]
 8009bfc:	6163      	str	r3, [r4, #20]
 8009bfe:	9b01      	ldr	r3, [sp, #4]
 8009c00:	6120      	str	r0, [r4, #16]
 8009c02:	b15b      	cbz	r3, 8009c1c <__smakebuf_r+0x74>
 8009c04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c08:	4630      	mov	r0, r6
 8009c0a:	f000 f8d1 	bl	8009db0 <_isatty_r>
 8009c0e:	b128      	cbz	r0, 8009c1c <__smakebuf_r+0x74>
 8009c10:	89a3      	ldrh	r3, [r4, #12]
 8009c12:	f023 0303 	bic.w	r3, r3, #3
 8009c16:	f043 0301 	orr.w	r3, r3, #1
 8009c1a:	81a3      	strh	r3, [r4, #12]
 8009c1c:	89a0      	ldrh	r0, [r4, #12]
 8009c1e:	4305      	orrs	r5, r0
 8009c20:	81a5      	strh	r5, [r4, #12]
 8009c22:	e7cd      	b.n	8009bc0 <__smakebuf_r+0x18>
 8009c24:	080099b9 	.word	0x080099b9

08009c28 <_malloc_usable_size_r>:
 8009c28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009c2c:	1f18      	subs	r0, r3, #4
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	bfbc      	itt	lt
 8009c32:	580b      	ldrlt	r3, [r1, r0]
 8009c34:	18c0      	addlt	r0, r0, r3
 8009c36:	4770      	bx	lr

08009c38 <_raise_r>:
 8009c38:	291f      	cmp	r1, #31
 8009c3a:	b538      	push	{r3, r4, r5, lr}
 8009c3c:	4604      	mov	r4, r0
 8009c3e:	460d      	mov	r5, r1
 8009c40:	d904      	bls.n	8009c4c <_raise_r+0x14>
 8009c42:	2316      	movs	r3, #22
 8009c44:	6003      	str	r3, [r0, #0]
 8009c46:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4a:	bd38      	pop	{r3, r4, r5, pc}
 8009c4c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c4e:	b112      	cbz	r2, 8009c56 <_raise_r+0x1e>
 8009c50:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c54:	b94b      	cbnz	r3, 8009c6a <_raise_r+0x32>
 8009c56:	4620      	mov	r0, r4
 8009c58:	f000 f830 	bl	8009cbc <_getpid_r>
 8009c5c:	462a      	mov	r2, r5
 8009c5e:	4601      	mov	r1, r0
 8009c60:	4620      	mov	r0, r4
 8009c62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c66:	f000 b817 	b.w	8009c98 <_kill_r>
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	d00a      	beq.n	8009c84 <_raise_r+0x4c>
 8009c6e:	1c59      	adds	r1, r3, #1
 8009c70:	d103      	bne.n	8009c7a <_raise_r+0x42>
 8009c72:	2316      	movs	r3, #22
 8009c74:	6003      	str	r3, [r0, #0]
 8009c76:	2001      	movs	r0, #1
 8009c78:	e7e7      	b.n	8009c4a <_raise_r+0x12>
 8009c7a:	2400      	movs	r4, #0
 8009c7c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c80:	4628      	mov	r0, r5
 8009c82:	4798      	blx	r3
 8009c84:	2000      	movs	r0, #0
 8009c86:	e7e0      	b.n	8009c4a <_raise_r+0x12>

08009c88 <raise>:
 8009c88:	4b02      	ldr	r3, [pc, #8]	; (8009c94 <raise+0xc>)
 8009c8a:	4601      	mov	r1, r0
 8009c8c:	6818      	ldr	r0, [r3, #0]
 8009c8e:	f7ff bfd3 	b.w	8009c38 <_raise_r>
 8009c92:	bf00      	nop
 8009c94:	2000014c 	.word	0x2000014c

08009c98 <_kill_r>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	4d07      	ldr	r5, [pc, #28]	; (8009cb8 <_kill_r+0x20>)
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	4608      	mov	r0, r1
 8009ca2:	4611      	mov	r1, r2
 8009ca4:	602b      	str	r3, [r5, #0]
 8009ca6:	f7f8 f887 	bl	8001db8 <_kill>
 8009caa:	1c43      	adds	r3, r0, #1
 8009cac:	d102      	bne.n	8009cb4 <_kill_r+0x1c>
 8009cae:	682b      	ldr	r3, [r5, #0]
 8009cb0:	b103      	cbz	r3, 8009cb4 <_kill_r+0x1c>
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	bd38      	pop	{r3, r4, r5, pc}
 8009cb6:	bf00      	nop
 8009cb8:	2000074c 	.word	0x2000074c

08009cbc <_getpid_r>:
 8009cbc:	f7f8 b874 	b.w	8001da8 <_getpid>

08009cc0 <__sread>:
 8009cc0:	b510      	push	{r4, lr}
 8009cc2:	460c      	mov	r4, r1
 8009cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cc8:	f000 f894 	bl	8009df4 <_read_r>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	bfab      	itete	ge
 8009cd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cd2:	89a3      	ldrhlt	r3, [r4, #12]
 8009cd4:	181b      	addge	r3, r3, r0
 8009cd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cda:	bfac      	ite	ge
 8009cdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cde:	81a3      	strhlt	r3, [r4, #12]
 8009ce0:	bd10      	pop	{r4, pc}

08009ce2 <__swrite>:
 8009ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ce6:	461f      	mov	r7, r3
 8009ce8:	898b      	ldrh	r3, [r1, #12]
 8009cea:	05db      	lsls	r3, r3, #23
 8009cec:	4605      	mov	r5, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	4616      	mov	r6, r2
 8009cf2:	d505      	bpl.n	8009d00 <__swrite+0x1e>
 8009cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	f000 f868 	bl	8009dd0 <_lseek_r>
 8009d00:	89a3      	ldrh	r3, [r4, #12]
 8009d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	4632      	mov	r2, r6
 8009d0e:	463b      	mov	r3, r7
 8009d10:	4628      	mov	r0, r5
 8009d12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d16:	f000 b817 	b.w	8009d48 <_write_r>

08009d1a <__sseek>:
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	460c      	mov	r4, r1
 8009d1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d22:	f000 f855 	bl	8009dd0 <_lseek_r>
 8009d26:	1c43      	adds	r3, r0, #1
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	bf15      	itete	ne
 8009d2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d36:	81a3      	strheq	r3, [r4, #12]
 8009d38:	bf18      	it	ne
 8009d3a:	81a3      	strhne	r3, [r4, #12]
 8009d3c:	bd10      	pop	{r4, pc}

08009d3e <__sclose>:
 8009d3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d42:	f000 b813 	b.w	8009d6c <_close_r>
	...

08009d48 <_write_r>:
 8009d48:	b538      	push	{r3, r4, r5, lr}
 8009d4a:	4d07      	ldr	r5, [pc, #28]	; (8009d68 <_write_r+0x20>)
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	4608      	mov	r0, r1
 8009d50:	4611      	mov	r1, r2
 8009d52:	2200      	movs	r2, #0
 8009d54:	602a      	str	r2, [r5, #0]
 8009d56:	461a      	mov	r2, r3
 8009d58:	f7f8 f865 	bl	8001e26 <_write>
 8009d5c:	1c43      	adds	r3, r0, #1
 8009d5e:	d102      	bne.n	8009d66 <_write_r+0x1e>
 8009d60:	682b      	ldr	r3, [r5, #0]
 8009d62:	b103      	cbz	r3, 8009d66 <_write_r+0x1e>
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	bd38      	pop	{r3, r4, r5, pc}
 8009d68:	2000074c 	.word	0x2000074c

08009d6c <_close_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d06      	ldr	r5, [pc, #24]	; (8009d88 <_close_r+0x1c>)
 8009d70:	2300      	movs	r3, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f8 f871 	bl	8001e5e <_close>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_close_r+0x1a>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_close_r+0x1a>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	2000074c 	.word	0x2000074c

08009d8c <_fstat_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d07      	ldr	r5, [pc, #28]	; (8009dac <_fstat_r+0x20>)
 8009d90:	2300      	movs	r3, #0
 8009d92:	4604      	mov	r4, r0
 8009d94:	4608      	mov	r0, r1
 8009d96:	4611      	mov	r1, r2
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	f7f8 f86c 	bl	8001e76 <_fstat>
 8009d9e:	1c43      	adds	r3, r0, #1
 8009da0:	d102      	bne.n	8009da8 <_fstat_r+0x1c>
 8009da2:	682b      	ldr	r3, [r5, #0]
 8009da4:	b103      	cbz	r3, 8009da8 <_fstat_r+0x1c>
 8009da6:	6023      	str	r3, [r4, #0]
 8009da8:	bd38      	pop	{r3, r4, r5, pc}
 8009daa:	bf00      	nop
 8009dac:	2000074c 	.word	0x2000074c

08009db0 <_isatty_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d06      	ldr	r5, [pc, #24]	; (8009dcc <_isatty_r+0x1c>)
 8009db4:	2300      	movs	r3, #0
 8009db6:	4604      	mov	r4, r0
 8009db8:	4608      	mov	r0, r1
 8009dba:	602b      	str	r3, [r5, #0]
 8009dbc:	f7f8 f86b 	bl	8001e96 <_isatty>
 8009dc0:	1c43      	adds	r3, r0, #1
 8009dc2:	d102      	bne.n	8009dca <_isatty_r+0x1a>
 8009dc4:	682b      	ldr	r3, [r5, #0]
 8009dc6:	b103      	cbz	r3, 8009dca <_isatty_r+0x1a>
 8009dc8:	6023      	str	r3, [r4, #0]
 8009dca:	bd38      	pop	{r3, r4, r5, pc}
 8009dcc:	2000074c 	.word	0x2000074c

08009dd0 <_lseek_r>:
 8009dd0:	b538      	push	{r3, r4, r5, lr}
 8009dd2:	4d07      	ldr	r5, [pc, #28]	; (8009df0 <_lseek_r+0x20>)
 8009dd4:	4604      	mov	r4, r0
 8009dd6:	4608      	mov	r0, r1
 8009dd8:	4611      	mov	r1, r2
 8009dda:	2200      	movs	r2, #0
 8009ddc:	602a      	str	r2, [r5, #0]
 8009dde:	461a      	mov	r2, r3
 8009de0:	f7f8 f864 	bl	8001eac <_lseek>
 8009de4:	1c43      	adds	r3, r0, #1
 8009de6:	d102      	bne.n	8009dee <_lseek_r+0x1e>
 8009de8:	682b      	ldr	r3, [r5, #0]
 8009dea:	b103      	cbz	r3, 8009dee <_lseek_r+0x1e>
 8009dec:	6023      	str	r3, [r4, #0]
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	2000074c 	.word	0x2000074c

08009df4 <_read_r>:
 8009df4:	b538      	push	{r3, r4, r5, lr}
 8009df6:	4d07      	ldr	r5, [pc, #28]	; (8009e14 <_read_r+0x20>)
 8009df8:	4604      	mov	r4, r0
 8009dfa:	4608      	mov	r0, r1
 8009dfc:	4611      	mov	r1, r2
 8009dfe:	2200      	movs	r2, #0
 8009e00:	602a      	str	r2, [r5, #0]
 8009e02:	461a      	mov	r2, r3
 8009e04:	f7f7 fff2 	bl	8001dec <_read>
 8009e08:	1c43      	adds	r3, r0, #1
 8009e0a:	d102      	bne.n	8009e12 <_read_r+0x1e>
 8009e0c:	682b      	ldr	r3, [r5, #0]
 8009e0e:	b103      	cbz	r3, 8009e12 <_read_r+0x1e>
 8009e10:	6023      	str	r3, [r4, #0]
 8009e12:	bd38      	pop	{r3, r4, r5, pc}
 8009e14:	2000074c 	.word	0x2000074c

08009e18 <_init>:
 8009e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e1a:	bf00      	nop
 8009e1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1e:	bc08      	pop	{r3}
 8009e20:	469e      	mov	lr, r3
 8009e22:	4770      	bx	lr

08009e24 <_fini>:
 8009e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e26:	bf00      	nop
 8009e28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e2a:	bc08      	pop	{r3}
 8009e2c:	469e      	mov	lr, r3
 8009e2e:	4770      	bx	lr
