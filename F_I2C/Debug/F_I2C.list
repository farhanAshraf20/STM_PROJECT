
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010820  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c14  080109b0  080109b0  000209b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080115c4  080115c4  00030820  2**0
                  CONTENTS
  4 .ARM          00000008  080115c4  080115c4  000215c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080115cc  080115cc  00030820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080115cc  080115cc  000215cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080115d0  080115d0  000215d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000820  20000000  080115d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20000820  08011df4  00030820  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000e20  08011df4  00030e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030820  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b36c  00000000  00000000  00030850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a76  00000000  00000000  0005bbbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001cd0  00000000  00000000  00060638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ac8  00000000  00000000  00062308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c800  00000000  00000000  00063dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022bb4  00000000  00000000  000905d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00103833  00000000  00000000  000b3184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001b69b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a18  00000000  00000000  001b6a0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000820 	.word	0x20000820
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010998 	.word	0x08010998

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000824 	.word	0x20000824
 80001cc:	08010998 	.word	0x08010998

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <Proximity_Test>:
/**/
/**
  * @brief  Test of VL53L0X proximity sensor.
  */
void Proximity_Test(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
	if(flag_pro)
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <Proximity_Test+0x48>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d01a      	beq.n	8000ee2 <Proximity_Test+0x42>
	{
		prox_value = VL53L0X_PROXIMITY_GetDistance();
 8000eac:	f000 f87e 	bl	8000fac <VL53L0X_PROXIMITY_GetDistance>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <Proximity_Test+0x4c>)
 8000eb6:	801a      	strh	r2, [r3, #0]
		snprintf(str_pro,100," \033\143 Distance = %d mm\r", prox_value);
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <Proximity_Test+0x4c>)
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <Proximity_Test+0x50>)
 8000ebe:	2164      	movs	r1, #100	; 0x64
 8000ec0:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <Proximity_Test+0x54>)
 8000ec2:	f00d fb31 	bl	800e528 <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_pro,sizeof(str_pro),10);
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	2264      	movs	r2, #100	; 0x64
 8000eca:	490a      	ldr	r1, [pc, #40]	; (8000ef4 <Proximity_Test+0x54>)
 8000ecc:	480a      	ldr	r0, [pc, #40]	; (8000ef8 <Proximity_Test+0x58>)
 8000ece:	f00b f9cb 	bl	800c268 <HAL_UART_Transmit>
		memset(str_pro, 0, sizeof(str_pro));
 8000ed2:	2264      	movs	r2, #100	; 0x64
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <Proximity_Test+0x54>)
 8000ed8:	f00c fe26 	bl	800db28 <memset>
		flag_pro=0;
 8000edc:	4b02      	ldr	r3, [pc, #8]	; (8000ee8 <Proximity_Test+0x48>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	701a      	strb	r2, [r3, #0]
	}

}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	200002c0 	.word	0x200002c0
 8000eec:	20000a5c 	.word	0x20000a5c
 8000ef0:	080109b0 	.word	0x080109b0
 8000ef4:	20000a60 	.word	0x20000a60
 8000ef8:	20000b94 	.word	0x20000b94

08000efc <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
static void VL53L0X_PROXIMITY_Init(void)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b0f9      	sub	sp, #484	; 0x1e4
 8000f00:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0;
 8000f02:	2300      	movs	r3, #0
 8000f04:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

  /* Initialize IO interface */
  SENSOR_IO_Init();
 8000f08:	f001 fcfc 	bl	8002904 <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 8000f0c:	f000 f85e 	bl	8000fcc <VL53L0X_PROXIMITY_MspInit>

  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8000f10:	463b      	mov	r3, r7
 8000f12:	2263      	movs	r2, #99	; 0x63
 8000f14:	2100      	movs	r1, #0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f00c fe06 	bl	800db28 <memset>

  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481e      	ldr	r0, [pc, #120]	; (8000f9c <VL53L0X_PROXIMITY_Init+0xa0>)
 8000f22:	f001 fec9 	bl	8002cb8 <VL53L0X_GetDeviceInfo>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d12f      	bne.n	8000f8c <VL53L0X_PROXIMITY_Init+0x90>
  {
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 8000f2c:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8000f30:	461a      	mov	r2, r3
 8000f32:	21c0      	movs	r1, #192	; 0xc0
 8000f34:	4819      	ldr	r0, [pc, #100]	; (8000f9c <VL53L0X_PROXIMITY_Init+0xa0>)
 8000f36:	f006 fdeb 	bl	8007b10 <VL53L0X_RdWord>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d121      	bne.n	8000f84 <VL53L0X_PROXIMITY_Init+0x88>
    {
      if (vl53l0x_id == VL53L0X_ID)
 8000f40:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8000f44:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d122      	bne.n	8000f92 <VL53L0X_PROXIMITY_Init+0x96>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 8000f4c:	4813      	ldr	r0, [pc, #76]	; (8000f9c <VL53L0X_PROXIMITY_Init+0xa0>)
 8000f4e:	f001 fed9 	bl	8002d04 <VL53L0X_DataInit>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d111      	bne.n	8000f7c <VL53L0X_PROXIMITY_Init+0x80>
        {
          Dev.Present = 1;
 8000f58:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <VL53L0X_PROXIMITY_Init+0xa0>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(Dev);
 8000f60:	4c0e      	ldr	r4, [pc, #56]	; (8000f9c <VL53L0X_PROXIMITY_Init+0xa0>)
 8000f62:	4668      	mov	r0, sp
 8000f64:	f104 0310 	add.w	r3, r4, #16
 8000f68:	f44f 72bc 	mov.w	r2, #376	; 0x178
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f00c fdcd 	bl	800db0c <memcpy>
 8000f72:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f76:	f006 fed1 	bl	8007d1c <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }
}
 8000f7a:	e00a      	b.n	8000f92 <VL53L0X_PROXIMITY_Init+0x96>
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <VL53L0X_PROXIMITY_Init+0xa4>)
 8000f7e:	f00d facb 	bl	800e518 <puts>
}
 8000f82:	e006      	b.n	8000f92 <VL53L0X_PROXIMITY_Init+0x96>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8000f84:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <VL53L0X_PROXIMITY_Init+0xa8>)
 8000f86:	f00d fac7 	bl	800e518 <puts>
}
 8000f8a:	e002      	b.n	8000f92 <VL53L0X_PROXIMITY_Init+0x96>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 8000f8c:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <VL53L0X_PROXIMITY_Init+0xac>)
 8000f8e:	f00d fac3 	bl	800e518 <puts>
}
 8000f92:	bf00      	nop
 8000f94:	376c      	adds	r7, #108	; 0x6c
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd90      	pop	{r4, r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	080109c8 	.word	0x080109c8
 8000fa4:	080109f8 	.word	0x080109f8
 8000fa8:	08010a28 	.word	0x08010a28

08000fac <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b088      	sub	sp, #32
 8000fb0:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4804      	ldr	r0, [pc, #16]	; (8000fc8 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 8000fb8:	f003 f8ee 	bl	8004198 <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
 8000fbc:	89bb      	ldrh	r3, [r7, #12]
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3720      	adds	r7, #32
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000000 	.word	0x20000000

08000fcc <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
static void VL53L0X_PROXIMITY_MspInit(void)
{/*
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
*/

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	2140      	movs	r1, #64	; 0x40
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <VL53L0X_PROXIMITY_MspInit+0x1c>)
 8000fd6:	f008 f9e1 	bl	800939c <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f007 fd73 	bl	8008ac8 <HAL_Delay>
 // HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_RESET);

  //printf("............................test......................\n");

}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	48000800 	.word	0x48000800

08000fec <f_Temperature>:
/**/
/************************************** This function use for extracting Temperature data **********************************************/
void f_Temperature(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af02      	add	r7, sp, #8
	//printf("Flag state  :%d\n",flag);
	if(flag_temp)
 8000ff2:	4b20      	ldr	r3, [pc, #128]	; (8001074 <f_Temperature+0x88>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d038      	beq.n	800106c <f_Temperature+0x80>
	{

		if(BSP_TSENSOR_Init())
 8000ffa:	f001 fe33 	bl	8002c64 <BSP_TSENSOR_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d010      	beq.n	8001026 <f_Temperature+0x3a>
		{
			snprintf(str_tmp,100,"\033\143 Not Taking TEMPERATURE Data\r");
 8001004:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <f_Temperature+0x8c>)
 8001006:	2164      	movs	r1, #100	; 0x64
 8001008:	481c      	ldr	r0, [pc, #112]	; (800107c <f_Temperature+0x90>)
 800100a:	f00d fa8d 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 800100e:	230a      	movs	r3, #10
 8001010:	2264      	movs	r2, #100	; 0x64
 8001012:	491a      	ldr	r1, [pc, #104]	; (800107c <f_Temperature+0x90>)
 8001014:	481a      	ldr	r0, [pc, #104]	; (8001080 <f_Temperature+0x94>)
 8001016:	f00b f927 	bl	800c268 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 800101a:	2264      	movs	r2, #100	; 0x64
 800101c:	2100      	movs	r1, #0
 800101e:	4817      	ldr	r0, [pc, #92]	; (800107c <f_Temperature+0x90>)
 8001020:	f00c fd82 	bl	800db28 <memset>
		}


	}

}
 8001024:	e022      	b.n	800106c <f_Temperature+0x80>
			temp_value = BSP_TSENSOR_ReadTemp();
 8001026:	f001 fe39 	bl	8002c9c <BSP_TSENSOR_ReadTemp>
 800102a:	eef0 7a40 	vmov.f32	s15, s0
 800102e:	4b15      	ldr	r3, [pc, #84]	; (8001084 <f_Temperature+0x98>)
 8001030:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_tmp,100," \033\143 TEMPERATURE = %.2f \r", temp_value);
 8001034:	4b13      	ldr	r3, [pc, #76]	; (8001084 <f_Temperature+0x98>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fa85 	bl	8000548 <__aeabi_f2d>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	e9cd 2300 	strd	r2, r3, [sp]
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <f_Temperature+0x9c>)
 8001048:	2164      	movs	r1, #100	; 0x64
 800104a:	480c      	ldr	r0, [pc, #48]	; (800107c <f_Temperature+0x90>)
 800104c:	f00d fa6c 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8001050:	230a      	movs	r3, #10
 8001052:	2264      	movs	r2, #100	; 0x64
 8001054:	4909      	ldr	r1, [pc, #36]	; (800107c <f_Temperature+0x90>)
 8001056:	480a      	ldr	r0, [pc, #40]	; (8001080 <f_Temperature+0x94>)
 8001058:	f00b f906 	bl	800c268 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 800105c:	2264      	movs	r2, #100	; 0x64
 800105e:	2100      	movs	r1, #0
 8001060:	4806      	ldr	r0, [pc, #24]	; (800107c <f_Temperature+0x90>)
 8001062:	f00c fd61 	bl	800db28 <memset>
			flag_temp=0;
 8001066:	4b03      	ldr	r3, [pc, #12]	; (8001074 <f_Temperature+0x88>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200002ba 	.word	0x200002ba
 8001078:	08010a54 	.word	0x08010a54
 800107c:	20000848 	.word	0x20000848
 8001080:	20000b94 	.word	0x20000b94
 8001084:	2000083c 	.word	0x2000083c
 8001088:	08010a74 	.word	0x08010a74

0800108c <f_Humidity>:
/*********************************************************** END **************************************************************************/

/*This function use for extracting Humidity data */
void f_Humidity(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af02      	add	r7, sp, #8
	if(flag_humi)
 8001092:	4b20      	ldr	r3, [pc, #128]	; (8001114 <f_Humidity+0x88>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d038      	beq.n	800110c <f_Humidity+0x80>
	{
		if(BSP_HSENSOR_Init())
 800109a:	f001 fd43 	bl	8002b24 <BSP_HSENSOR_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d010      	beq.n	80010c6 <f_Humidity+0x3a>
		{
			snprintf(str_humi,100,"\033\143 Not Taking HUMIDITY Data \r");
 80010a4:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <f_Humidity+0x8c>)
 80010a6:	2164      	movs	r1, #100	; 0x64
 80010a8:	481c      	ldr	r0, [pc, #112]	; (800111c <f_Humidity+0x90>)
 80010aa:	f00d fa3d 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 80010ae:	230a      	movs	r3, #10
 80010b0:	2264      	movs	r2, #100	; 0x64
 80010b2:	491a      	ldr	r1, [pc, #104]	; (800111c <f_Humidity+0x90>)
 80010b4:	481a      	ldr	r0, [pc, #104]	; (8001120 <f_Humidity+0x94>)
 80010b6:	f00b f8d7 	bl	800c268 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 80010ba:	2264      	movs	r2, #100	; 0x64
 80010bc:	2100      	movs	r1, #0
 80010be:	4817      	ldr	r0, [pc, #92]	; (800111c <f_Humidity+0x90>)
 80010c0:	f00c fd32 	bl	800db28 <memset>
			memset(str_humi, 0, sizeof(str_humi));
			flag_humi=0;
		}

	}
}
 80010c4:	e022      	b.n	800110c <f_Humidity+0x80>
			humi_value = BSP_HSENSOR_ReadHumidity();
 80010c6:	f001 fd4d 	bl	8002b64 <BSP_HSENSOR_ReadHumidity>
 80010ca:	eef0 7a40 	vmov.f32	s15, s0
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <f_Humidity+0x98>)
 80010d0:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_humi,100,"\033\143 HUMIDITY = %.2f \r", humi_value);
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <f_Humidity+0x98>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa35 	bl	8000548 <__aeabi_f2d>
 80010de:	4602      	mov	r2, r0
 80010e0:	460b      	mov	r3, r1
 80010e2:	e9cd 2300 	strd	r2, r3, [sp]
 80010e6:	4a10      	ldr	r2, [pc, #64]	; (8001128 <f_Humidity+0x9c>)
 80010e8:	2164      	movs	r1, #100	; 0x64
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <f_Humidity+0x90>)
 80010ec:	f00d fa1c 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 80010f0:	230a      	movs	r3, #10
 80010f2:	2264      	movs	r2, #100	; 0x64
 80010f4:	4909      	ldr	r1, [pc, #36]	; (800111c <f_Humidity+0x90>)
 80010f6:	480a      	ldr	r0, [pc, #40]	; (8001120 <f_Humidity+0x94>)
 80010f8:	f00b f8b6 	bl	800c268 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 80010fc:	2264      	movs	r2, #100	; 0x64
 80010fe:	2100      	movs	r1, #0
 8001100:	4806      	ldr	r0, [pc, #24]	; (800111c <f_Humidity+0x90>)
 8001102:	f00c fd11 	bl	800db28 <memset>
			flag_humi=0;
 8001106:	4b03      	ldr	r3, [pc, #12]	; (8001114 <f_Humidity+0x88>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	200002bb 	.word	0x200002bb
 8001118:	08010a90 	.word	0x08010a90
 800111c:	200008ac 	.word	0x200008ac
 8001120:	20000b94 	.word	0x20000b94
 8001124:	20000840 	.word	0x20000840
 8001128:	08010ab0 	.word	0x08010ab0

0800112c <f_Pressure>:
/*********************************************************** END **************************************************************************/

/************************************* This function use for extracting Pressure data *****************************************************/
void f_Pressure(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af02      	add	r7, sp, #8
	if(flag_pre)
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <f_Pressure+0x88>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d038      	beq.n	80011ac <f_Pressure+0x80>
	{
		if(BSP_PSENSOR_Init())
 800113a:	f001 fd65 	bl	8002c08 <BSP_PSENSOR_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d010      	beq.n	8001166 <f_Pressure+0x3a>
		{
			snprintf(str_pre,100,"\033\143 Not Taking PRESSURE Data \r");
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <f_Pressure+0x8c>)
 8001146:	2164      	movs	r1, #100	; 0x64
 8001148:	481c      	ldr	r0, [pc, #112]	; (80011bc <f_Pressure+0x90>)
 800114a:	f00d f9ed 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 800114e:	230a      	movs	r3, #10
 8001150:	2264      	movs	r2, #100	; 0x64
 8001152:	491a      	ldr	r1, [pc, #104]	; (80011bc <f_Pressure+0x90>)
 8001154:	481a      	ldr	r0, [pc, #104]	; (80011c0 <f_Pressure+0x94>)
 8001156:	f00b f887 	bl	800c268 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 800115a:	2264      	movs	r2, #100	; 0x64
 800115c:	2100      	movs	r1, #0
 800115e:	4817      	ldr	r0, [pc, #92]	; (80011bc <f_Pressure+0x90>)
 8001160:	f00c fce2 	bl	800db28 <memset>
			flag_pre=0;
		}

	}

}
 8001164:	e022      	b.n	80011ac <f_Pressure+0x80>
			pre_value = BSP_PSENSOR_ReadPressure();
 8001166:	f001 fd6f 	bl	8002c48 <BSP_PSENSOR_ReadPressure>
 800116a:	eef0 7a40 	vmov.f32	s15, s0
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <f_Pressure+0x98>)
 8001170:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_pre,100,"\033\143 PRESSURE = %.2f \r", pre_value);
 8001174:	4b13      	ldr	r3, [pc, #76]	; (80011c4 <f_Pressure+0x98>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff f9e5 	bl	8000548 <__aeabi_f2d>
 800117e:	4602      	mov	r2, r0
 8001180:	460b      	mov	r3, r1
 8001182:	e9cd 2300 	strd	r2, r3, [sp]
 8001186:	4a10      	ldr	r2, [pc, #64]	; (80011c8 <f_Pressure+0x9c>)
 8001188:	2164      	movs	r1, #100	; 0x64
 800118a:	480c      	ldr	r0, [pc, #48]	; (80011bc <f_Pressure+0x90>)
 800118c:	f00d f9cc 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8001190:	230a      	movs	r3, #10
 8001192:	2264      	movs	r2, #100	; 0x64
 8001194:	4909      	ldr	r1, [pc, #36]	; (80011bc <f_Pressure+0x90>)
 8001196:	480a      	ldr	r0, [pc, #40]	; (80011c0 <f_Pressure+0x94>)
 8001198:	f00b f866 	bl	800c268 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 800119c:	2264      	movs	r2, #100	; 0x64
 800119e:	2100      	movs	r1, #0
 80011a0:	4806      	ldr	r0, [pc, #24]	; (80011bc <f_Pressure+0x90>)
 80011a2:	f00c fcc1 	bl	800db28 <memset>
			flag_pre=0;
 80011a6:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <f_Pressure+0x88>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200002bc 	.word	0x200002bc
 80011b8:	08010ac8 	.word	0x08010ac8
 80011bc:	20000910 	.word	0x20000910
 80011c0:	20000b94 	.word	0x20000b94
 80011c4:	20000844 	.word	0x20000844
 80011c8:	08010ae8 	.word	0x08010ae8

080011cc <f_ACCELEROMETER>:
/*********************************************************** END **************************************************************************/

/********************************************** This function use for extracting ACCELEROMETER data ***************************************/
void f_ACCELEROMETER(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af02      	add	r7, sp, #8
	if(flag_acce)
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <f_ACCELEROMETER+0x90>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d03c      	beq.n	8001254 <f_ACCELEROMETER+0x88>
	{
		if(BSP_ACCELERO_Init())
 80011da:	f001 fbf3 	bl	80029c4 <BSP_ACCELERO_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d013      	beq.n	800120c <f_ACCELEROMETER+0x40>
		{
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 80011e4:	481e      	ldr	r0, [pc, #120]	; (8001260 <f_ACCELEROMETER+0x94>)
 80011e6:	f001 fc2b 	bl	8002a40 <BSP_ACCELERO_AccGetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <f_ACCELEROMETER+0x98>)
 80011ec:	2164      	movs	r1, #100	; 0x64
 80011ee:	481e      	ldr	r0, [pc, #120]	; (8001268 <f_ACCELEROMETER+0x9c>)
 80011f0:	f00d f99a 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 80011f4:	230a      	movs	r3, #10
 80011f6:	2264      	movs	r2, #100	; 0x64
 80011f8:	491b      	ldr	r1, [pc, #108]	; (8001268 <f_ACCELEROMETER+0x9c>)
 80011fa:	481c      	ldr	r0, [pc, #112]	; (800126c <f_ACCELEROMETER+0xa0>)
 80011fc:	f00b f834 	bl	800c268 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8001200:	2264      	movs	r2, #100	; 0x64
 8001202:	2100      	movs	r1, #0
 8001204:	4818      	ldr	r0, [pc, #96]	; (8001268 <f_ACCELEROMETER+0x9c>)
 8001206:	f00c fc8f 	bl	800db28 <memset>
			flag_acce = 0;
		}

	}

}
 800120a:	e023      	b.n	8001254 <f_ACCELEROMETER+0x88>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 800120c:	4814      	ldr	r0, [pc, #80]	; (8001260 <f_ACCELEROMETER+0x94>)
 800120e:	f001 fc17 	bl	8002a40 <BSP_ACCELERO_AccGetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <f_ACCELEROMETER+0x94>)
 8001214:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001218:	4619      	mov	r1, r3
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <f_ACCELEROMETER+0x94>)
 800121c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001220:	461a      	mov	r2, r3
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <f_ACCELEROMETER+0x94>)
 8001224:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	9200      	str	r2, [sp, #0]
 800122c:	460b      	mov	r3, r1
 800122e:	4a10      	ldr	r2, [pc, #64]	; (8001270 <f_ACCELEROMETER+0xa4>)
 8001230:	2164      	movs	r1, #100	; 0x64
 8001232:	480d      	ldr	r0, [pc, #52]	; (8001268 <f_ACCELEROMETER+0x9c>)
 8001234:	f00d f978 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8001238:	230a      	movs	r3, #10
 800123a:	2264      	movs	r2, #100	; 0x64
 800123c:	490a      	ldr	r1, [pc, #40]	; (8001268 <f_ACCELEROMETER+0x9c>)
 800123e:	480b      	ldr	r0, [pc, #44]	; (800126c <f_ACCELEROMETER+0xa0>)
 8001240:	f00b f812 	bl	800c268 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8001244:	2264      	movs	r2, #100	; 0x64
 8001246:	2100      	movs	r1, #0
 8001248:	4807      	ldr	r0, [pc, #28]	; (8001268 <f_ACCELEROMETER+0x9c>)
 800124a:	f00c fc6d 	bl	800db28 <memset>
			flag_acce = 0;
 800124e:	4b03      	ldr	r3, [pc, #12]	; (800125c <f_ACCELEROMETER+0x90>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200002bd 	.word	0x200002bd
 8001260:	20000a3c 	.word	0x20000a3c
 8001264:	08010b00 	.word	0x08010b00
 8001268:	200009d8 	.word	0x200009d8
 800126c:	20000b94 	.word	0x20000b94
 8001270:	08010b2c 	.word	0x08010b2c

08001274 <f_GYRO>:
/*********************************************************** END **************************************************************************/

/************************************************* This function use for extracting GYRO data *********************************************/
void f_GYRO(void)
{
 8001274:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af06      	add	r7, sp, #24
	if(flag_gyro)
 800127c:	4b28      	ldr	r3, [pc, #160]	; (8001320 <f_GYRO+0xac>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d049      	beq.n	8001318 <f_GYRO+0xa4>
	{
		if(BSP_GYRO_Init())
 8001284:	f001 fbf4 	bl	8002a70 <BSP_GYRO_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d013      	beq.n	80012b6 <f_GYRO+0x42>
		{
			BSP_GYRO_GetXYZ(pfData);
 800128e:	4825      	ldr	r0, [pc, #148]	; (8001324 <f_GYRO+0xb0>)
 8001290:	f001 fc30 	bl	8002af4 <BSP_GYRO_GetXYZ>

			snprintf(str_gyro,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8001294:	4a24      	ldr	r2, [pc, #144]	; (8001328 <f_GYRO+0xb4>)
 8001296:	2164      	movs	r1, #100	; 0x64
 8001298:	4824      	ldr	r0, [pc, #144]	; (800132c <f_GYRO+0xb8>)
 800129a:	f00d f945 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 800129e:	230a      	movs	r3, #10
 80012a0:	2264      	movs	r2, #100	; 0x64
 80012a2:	4922      	ldr	r1, [pc, #136]	; (800132c <f_GYRO+0xb8>)
 80012a4:	4822      	ldr	r0, [pc, #136]	; (8001330 <f_GYRO+0xbc>)
 80012a6:	f00a ffdf 	bl	800c268 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 80012aa:	2264      	movs	r2, #100	; 0x64
 80012ac:	2100      	movs	r1, #0
 80012ae:	481f      	ldr	r0, [pc, #124]	; (800132c <f_GYRO+0xb8>)
 80012b0:	f00c fc3a 	bl	800db28 <memset>
			memset(str_gyro, 0, sizeof(str_gyro));
			flag_gyro = 0;
		}
	}

}
 80012b4:	e030      	b.n	8001318 <f_GYRO+0xa4>
			BSP_GYRO_GetXYZ(pfData);
 80012b6:	481b      	ldr	r0, [pc, #108]	; (8001324 <f_GYRO+0xb0>)
 80012b8:	f001 fc1c 	bl	8002af4 <BSP_GYRO_GetXYZ>
			snprintf(str_gyro,100,"\033\143 X-axis = %.2f      Y-axis = %.2f      Z-axis = %.2f \r", pfData[0],pfData[1],pfData[2]);
 80012bc:	4b19      	ldr	r3, [pc, #100]	; (8001324 <f_GYRO+0xb0>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff f941 	bl	8000548 <__aeabi_f2d>
 80012c6:	4604      	mov	r4, r0
 80012c8:	460d      	mov	r5, r1
 80012ca:	4b16      	ldr	r3, [pc, #88]	; (8001324 <f_GYRO+0xb0>)
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f93a 	bl	8000548 <__aeabi_f2d>
 80012d4:	4680      	mov	r8, r0
 80012d6:	4689      	mov	r9, r1
 80012d8:	4b12      	ldr	r3, [pc, #72]	; (8001324 <f_GYRO+0xb0>)
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff f933 	bl	8000548 <__aeabi_f2d>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80012ea:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80012ee:	e9cd 4500 	strd	r4, r5, [sp]
 80012f2:	4a10      	ldr	r2, [pc, #64]	; (8001334 <f_GYRO+0xc0>)
 80012f4:	2164      	movs	r1, #100	; 0x64
 80012f6:	480d      	ldr	r0, [pc, #52]	; (800132c <f_GYRO+0xb8>)
 80012f8:	f00d f916 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 80012fc:	230a      	movs	r3, #10
 80012fe:	2264      	movs	r2, #100	; 0x64
 8001300:	490a      	ldr	r1, [pc, #40]	; (800132c <f_GYRO+0xb8>)
 8001302:	480b      	ldr	r0, [pc, #44]	; (8001330 <f_GYRO+0xbc>)
 8001304:	f00a ffb0 	bl	800c268 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 8001308:	2264      	movs	r2, #100	; 0x64
 800130a:	2100      	movs	r1, #0
 800130c:	4807      	ldr	r0, [pc, #28]	; (800132c <f_GYRO+0xb8>)
 800130e:	f00c fc0b 	bl	800db28 <memset>
			flag_gyro = 0;
 8001312:	4b03      	ldr	r3, [pc, #12]	; (8001320 <f_GYRO+0xac>)
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001320:	200002be 	.word	0x200002be
 8001324:	20000a44 	.word	0x20000a44
 8001328:	08010b00 	.word	0x08010b00
 800132c:	20000974 	.word	0x20000974
 8001330:	20000b94 	.word	0x20000b94
 8001334:	08010b60 	.word	0x08010b60

08001338 <f_MAGNETOMETERR>:
/*********************************************************** END **************************************************************************/

/******************************************This function use for extracting MAGNETOMETER data *********************************************/
void f_MAGNETOMETERR(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af02      	add	r7, sp, #8
	if(flag_mag)
 800133e:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <f_MAGNETOMETERR+0x90>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d03c      	beq.n	80013c0 <f_MAGNETOMETERR+0x88>
	{
		if(BSP_MAGNETO_Init())
 8001346:	f001 fc1b 	bl	8002b80 <BSP_MAGNETO_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <f_MAGNETOMETERR+0x40>
		{
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 8001350:	481e      	ldr	r0, [pc, #120]	; (80013cc <f_MAGNETOMETERR+0x94>)
 8001352:	f001 fc41 	bl	8002bd8 <BSP_MAGNETO_GetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8001356:	4a1e      	ldr	r2, [pc, #120]	; (80013d0 <f_MAGNETOMETERR+0x98>)
 8001358:	2164      	movs	r1, #100	; 0x64
 800135a:	481e      	ldr	r0, [pc, #120]	; (80013d4 <f_MAGNETOMETERR+0x9c>)
 800135c:	f00d f8e4 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8001360:	230a      	movs	r3, #10
 8001362:	2264      	movs	r2, #100	; 0x64
 8001364:	491b      	ldr	r1, [pc, #108]	; (80013d4 <f_MAGNETOMETERR+0x9c>)
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <f_MAGNETOMETERR+0xa0>)
 8001368:	f00a ff7e 	bl	800c268 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	2100      	movs	r1, #0
 8001370:	4818      	ldr	r0, [pc, #96]	; (80013d4 <f_MAGNETOMETERR+0x9c>)
 8001372:	f00c fbd9 	bl	800db28 <memset>
			flag_mag = 0;
		}

	}

}
 8001376:	e023      	b.n	80013c0 <f_MAGNETOMETERR+0x88>
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 8001378:	4814      	ldr	r0, [pc, #80]	; (80013cc <f_MAGNETOMETERR+0x94>)
 800137a:	f001 fc2d 	bl	8002bd8 <BSP_MAGNETO_GetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 800137e:	4b13      	ldr	r3, [pc, #76]	; (80013cc <f_MAGNETOMETERR+0x94>)
 8001380:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001384:	4619      	mov	r1, r3
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <f_MAGNETOMETERR+0x94>)
 8001388:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800138c:	461a      	mov	r2, r3
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <f_MAGNETOMETERR+0x94>)
 8001390:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	9200      	str	r2, [sp, #0]
 8001398:	460b      	mov	r3, r1
 800139a:	4a10      	ldr	r2, [pc, #64]	; (80013dc <f_MAGNETOMETERR+0xa4>)
 800139c:	2164      	movs	r1, #100	; 0x64
 800139e:	480d      	ldr	r0, [pc, #52]	; (80013d4 <f_MAGNETOMETERR+0x9c>)
 80013a0:	f00d f8c2 	bl	800e528 <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 80013a4:	230a      	movs	r3, #10
 80013a6:	2264      	movs	r2, #100	; 0x64
 80013a8:	490a      	ldr	r1, [pc, #40]	; (80013d4 <f_MAGNETOMETERR+0x9c>)
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <f_MAGNETOMETERR+0xa0>)
 80013ac:	f00a ff5c 	bl	800c268 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 80013b0:	2264      	movs	r2, #100	; 0x64
 80013b2:	2100      	movs	r1, #0
 80013b4:	4807      	ldr	r0, [pc, #28]	; (80013d4 <f_MAGNETOMETERR+0x9c>)
 80013b6:	f00c fbb7 	bl	800db28 <memset>
			flag_mag = 0;
 80013ba:	4b03      	ldr	r3, [pc, #12]	; (80013c8 <f_MAGNETOMETERR+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	701a      	strb	r2, [r3, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200002bf 	.word	0x200002bf
 80013cc:	20000a3c 	.word	0x20000a3c
 80013d0:	08010b00 	.word	0x08010b00
 80013d4:	200009d8 	.word	0x200009d8
 80013d8:	20000b94 	.word	0x20000b94
 80013dc:	08010b2c 	.word	0x08010b2c

080013e0 <f_cur_mov>:
/*********************************************************** END **************************************************************************/


/*********************************************************** This function use for Cursor Move ********************************************/
void f_cur_mov(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	f_INT_count++;
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <f_cur_mov+0x3c>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	3301      	adds	r3, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <f_cur_mov+0x3c>)
 80013ee:	701a      	strb	r2, [r3, #0]

	if(f_INT_count <= 7)
 80013f0:	4b0a      	ldr	r3, [pc, #40]	; (800141c <f_cur_mov+0x3c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b07      	cmp	r3, #7
 80013f6:	d806      	bhi.n	8001406 <f_cur_mov+0x26>
	{
		HAL_UART_Transmit(&huart1,com_dn,sizeof(com_dn),10);
 80013f8:	230a      	movs	r3, #10
 80013fa:	2204      	movs	r2, #4
 80013fc:	4908      	ldr	r1, [pc, #32]	; (8001420 <f_cur_mov+0x40>)
 80013fe:	4809      	ldr	r0, [pc, #36]	; (8001424 <f_cur_mov+0x44>)
 8001400:	f00a ff32 	bl	800c268 <HAL_UART_Transmit>
	{
		HAL_UART_Transmit(&huart1,com_up,sizeof(com_up),10);
		f_INT_count=1;
	}

}
 8001404:	e008      	b.n	8001418 <f_cur_mov+0x38>
		HAL_UART_Transmit(&huart1,com_up,sizeof(com_up),10);
 8001406:	230a      	movs	r3, #10
 8001408:	2205      	movs	r2, #5
 800140a:	4907      	ldr	r1, [pc, #28]	; (8001428 <f_cur_mov+0x48>)
 800140c:	4805      	ldr	r0, [pc, #20]	; (8001424 <f_cur_mov+0x44>)
 800140e:	f00a ff2b 	bl	800c268 <HAL_UART_Transmit>
		f_INT_count=1;
 8001412:	4b02      	ldr	r3, [pc, #8]	; (800141c <f_cur_mov+0x3c>)
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	200002b9 	.word	0x200002b9
 8001420:	20000290 	.word	0x20000290
 8001424:	20000b94 	.word	0x20000b94
 8001428:	20000288 	.word	0x20000288

0800142c <f_cur_sel>:
/*********************************************************** END **************************************************************************/

/*********************************************** This function use for Cursor Select ******************************************************/
void f_cur_sel(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
	switch(f_INT_count)
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <f_cur_sel+0x70>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	3b01      	subs	r3, #1
 8001436:	2b06      	cmp	r3, #6
 8001438:	d82b      	bhi.n	8001492 <f_cur_sel+0x66>
 800143a:	a201      	add	r2, pc, #4	; (adr r2, 8001440 <f_cur_sel+0x14>)
 800143c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001440:	0800145d 	.word	0x0800145d
 8001444:	08001465 	.word	0x08001465
 8001448:	0800146d 	.word	0x0800146d
 800144c:	08001475 	.word	0x08001475
 8001450:	0800147d 	.word	0x0800147d
 8001454:	08001485 	.word	0x08001485
 8001458:	0800148b 	.word	0x0800148b
	{
		case 1:
		{
			s_case = f_One;
 800145c:	4b10      	ldr	r3, [pc, #64]	; (80014a0 <f_cur_sel+0x74>)
 800145e:	2231      	movs	r2, #49	; 0x31
 8001460:	701a      	strb	r2, [r3, #0]
			break;
 8001462:	e016      	b.n	8001492 <f_cur_sel+0x66>
		}
		case 2:
		{
			s_case =  f_Two;
 8001464:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <f_cur_sel+0x74>)
 8001466:	2232      	movs	r2, #50	; 0x32
 8001468:	701a      	strb	r2, [r3, #0]
			break;
 800146a:	e012      	b.n	8001492 <f_cur_sel+0x66>
		}
		case 3:
		{
			s_case = f_Three;
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <f_cur_sel+0x74>)
 800146e:	2233      	movs	r2, #51	; 0x33
 8001470:	701a      	strb	r2, [r3, #0]
			break;
 8001472:	e00e      	b.n	8001492 <f_cur_sel+0x66>
		}
		case 4:
		{
			s_case = f_Four;
 8001474:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <f_cur_sel+0x74>)
 8001476:	2234      	movs	r2, #52	; 0x34
 8001478:	701a      	strb	r2, [r3, #0]
			break;
 800147a:	e00a      	b.n	8001492 <f_cur_sel+0x66>
		}
		case 5:
		{
			s_case = f_Five;
 800147c:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <f_cur_sel+0x74>)
 800147e:	2235      	movs	r2, #53	; 0x35
 8001480:	701a      	strb	r2, [r3, #0]
			break;
 8001482:	e006      	b.n	8001492 <f_cur_sel+0x66>
		}
		case 6:
		{
			s_case = f_Six;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <f_cur_sel+0x74>)
 8001486:	2236      	movs	r2, #54	; 0x36
 8001488:	701a      	strb	r2, [r3, #0]
		}
		case 7:
		{
			s_case = f_Seven;
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <f_cur_sel+0x74>)
 800148c:	2237      	movs	r2, #55	; 0x37
 800148e:	701a      	strb	r2, [r3, #0]
		}

	}
}
 8001490:	e7ff      	b.n	8001492 <f_cur_sel+0x66>
 8001492:	bf00      	nop
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	200002b9 	.word	0x200002b9
 80014a0:	20000a57 	.word	0x20000a57

080014a4 <f_Switch>:
/*********************************************************** END **************************************************************************/

/************************************************ This function use for Switch  ***********************************************************/
int f_Switch(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0

	f_reading = HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin);
 80014a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ac:	485d      	ldr	r0, [pc, #372]	; (8001624 <f_Switch+0x180>)
 80014ae:	f007 ff5d 	bl	800936c <HAL_GPIO_ReadPin>
 80014b2:	4603      	mov	r3, r0
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b5c      	ldr	r3, [pc, #368]	; (8001628 <f_Switch+0x184>)
 80014b8:	801a      	strh	r2, [r3, #0]

	if (f_reading != f_lastButtonState)
 80014ba:	4b5b      	ldr	r3, [pc, #364]	; (8001628 <f_Switch+0x184>)
 80014bc:	881b      	ldrh	r3, [r3, #0]
 80014be:	461a      	mov	r2, r3
 80014c0:	4b5a      	ldr	r3, [pc, #360]	; (800162c <f_Switch+0x188>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d009      	beq.n	80014dc <f_Switch+0x38>
	{
		// reset the debouncing timer
		f_lastDebounceTime = (__HAL_TIM_GET_COUNTER(&htim17)/10);//millis
 80014c8:	4b59      	ldr	r3, [pc, #356]	; (8001630 <f_Switch+0x18c>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ce:	4a59      	ldr	r2, [pc, #356]	; (8001634 <f_Switch+0x190>)
 80014d0:	fba2 2303 	umull	r2, r3, r2, r3
 80014d4:	08db      	lsrs	r3, r3, #3
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b57      	ldr	r3, [pc, #348]	; (8001638 <f_Switch+0x194>)
 80014da:	801a      	strh	r2, [r3, #0]
	}
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10) - f_lastDebounceTime) > f_debounceDelay)
 80014dc:	4b54      	ldr	r3, [pc, #336]	; (8001630 <f_Switch+0x18c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e2:	4a54      	ldr	r2, [pc, #336]	; (8001634 <f_Switch+0x190>)
 80014e4:	fba2 2303 	umull	r2, r3, r2, r3
 80014e8:	08db      	lsrs	r3, r3, #3
 80014ea:	4a53      	ldr	r2, [pc, #332]	; (8001638 <f_Switch+0x194>)
 80014ec:	8812      	ldrh	r2, [r2, #0]
 80014ee:	1a9b      	subs	r3, r3, r2
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <f_Switch+0x198>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d90f      	bls.n	8001518 <f_Switch+0x74>
	{
	  // if the button state has changed:
	  if (f_reading != f_buttonState)
 80014f8:	4b51      	ldr	r3, [pc, #324]	; (8001640 <f_Switch+0x19c>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <f_Switch+0x184>)
 8001500:	881b      	ldrh	r3, [r3, #0]
 8001502:	429a      	cmp	r2, r3
 8001504:	d008      	beq.n	8001518 <f_Switch+0x74>
	  {
		f_buttonState = f_reading;
 8001506:	4b48      	ldr	r3, [pc, #288]	; (8001628 <f_Switch+0x184>)
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	2b00      	cmp	r3, #0
 800150c:	bf14      	ite	ne
 800150e:	2301      	movne	r3, #1
 8001510:	2300      	moveq	r3, #0
 8001512:	b2da      	uxtb	r2, r3
 8001514:	4b4a      	ldr	r3, [pc, #296]	; (8001640 <f_Switch+0x19c>)
 8001516:	701a      	strb	r2, [r3, #0]
	  }
	}
	//printf("button stage : %d\n",f_buttonState)  //when switch is pressed


	if ((f_buttonState == 0) && (f_flag2 == 0))
 8001518:	4b49      	ldr	r3, [pc, #292]	; (8001640 <f_Switch+0x19c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	f083 0301 	eor.w	r3, r3, #1
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b00      	cmp	r3, #0
 8001524:	d01c      	beq.n	8001560 <f_Switch+0xbc>
 8001526:	4b47      	ldr	r3, [pc, #284]	; (8001644 <f_Switch+0x1a0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d015      	beq.n	8001560 <f_Switch+0xbc>
	{
	  f_presstime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //press time in millis
 8001534:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <f_Switch+0x18c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	4a3e      	ldr	r2, [pc, #248]	; (8001634 <f_Switch+0x190>)
 800153c:	fba2 2303 	umull	r2, r3, r2, r3
 8001540:	08db      	lsrs	r3, r3, #3
 8001542:	b29a      	uxth	r2, r3
 8001544:	4b40      	ldr	r3, [pc, #256]	; (8001648 <f_Switch+0x1a4>)
 8001546:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 0;
 8001548:	4b40      	ldr	r3, [pc, #256]	; (800164c <f_Switch+0x1a8>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 1;
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <f_Switch+0x1a0>)
 8001550:	2201      	movs	r2, #1
 8001552:	701a      	strb	r2, [r3, #0]
	  f_tapCounter++; //tap counter will increase by 1
 8001554:	4b3e      	ldr	r3, [pc, #248]	; (8001650 <f_Switch+0x1ac>)
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	3301      	adds	r3, #1
 800155a:	b2da      	uxtb	r2, r3
 800155c:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <f_Switch+0x1ac>)
 800155e:	701a      	strb	r2, [r3, #0]
	  //printf("Button Press : %d\n",f_tapCounter);
	}


	//when button is released
	if ((f_buttonState == 1) && (f_flag1 == 0))
 8001560:	4b37      	ldr	r3, [pc, #220]	; (8001640 <f_Switch+0x19c>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d01e      	beq.n	80015a6 <f_Switch+0x102>
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <f_Switch+0x1a8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	f083 0301 	eor.w	r3, r3, #1
 8001570:	b2db      	uxtb	r3, r3
 8001572:	2b00      	cmp	r3, #0
 8001574:	d017      	beq.n	80015a6 <f_Switch+0x102>
	{
	  f_releasetime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //release time in millis
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <f_Switch+0x18c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	4a2d      	ldr	r2, [pc, #180]	; (8001634 <f_Switch+0x190>)
 800157e:	fba2 2303 	umull	r2, r3, r2, r3
 8001582:	08db      	lsrs	r3, r3, #3
 8001584:	b29a      	uxth	r2, r3
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <f_Switch+0x1b0>)
 8001588:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 1;
 800158a:	4b30      	ldr	r3, [pc, #192]	; (800164c <f_Switch+0x1a8>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 0;
 8001590:	4b2c      	ldr	r3, [pc, #176]	; (8001644 <f_Switch+0x1a0>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]
	  f_timediff = f_releasetime - f_presstime; //the time gap between press and release
 8001596:	4b2f      	ldr	r3, [pc, #188]	; (8001654 <f_Switch+0x1b0>)
 8001598:	881a      	ldrh	r2, [r3, #0]
 800159a:	4b2b      	ldr	r3, [pc, #172]	; (8001648 <f_Switch+0x1a4>)
 800159c:	881b      	ldrh	r3, [r3, #0]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	4b2d      	ldr	r3, [pc, #180]	; (8001658 <f_Switch+0x1b4>)
 80015a4:	801a      	strh	r2, [r3, #0]
	  //printf(" Time gap between Button press and release : %d\n",f_timediff);
	}


  //wait for some time and if sw is in release position
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10)- f_presstime) > 400 && f_buttonState == 1)
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <f_Switch+0x18c>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <f_Switch+0x190>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	4a24      	ldr	r2, [pc, #144]	; (8001648 <f_Switch+0x1a4>)
 80015b6:	8812      	ldrh	r2, [r2, #0]
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015be:	d929      	bls.n	8001614 <f_Switch+0x170>
 80015c0:	4b1f      	ldr	r3, [pc, #124]	; (8001640 <f_Switch+0x19c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d025      	beq.n	8001614 <f_Switch+0x170>
	{
		  if (f_tapCounter == 1) //if tap counter is 1
 80015c8:	4b21      	ldr	r3, [pc, #132]	; (8001650 <f_Switch+0x1ac>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d114      	bne.n	80015fa <f_Switch+0x156>
		  {
			if (f_timediff >= 400) //if time diff is larger than 400 then its a hold
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <f_Switch+0x1b4>)
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80015d8:	d305      	bcc.n	80015e6 <f_Switch+0x142>
			{
				printf("Long press\n");
 80015da:	4820      	ldr	r0, [pc, #128]	; (800165c <f_Switch+0x1b8>)
 80015dc:	f00c ff9c 	bl	800e518 <puts>
				f_cur_sel();
 80015e0:	f7ff ff24 	bl	800142c <f_cur_sel>
 80015e4:	e013      	b.n	800160e <f_Switch+0x16a>
			}
			else //if timediff is less than 400 then its a single tap
			{
				printf("single tap\n");
 80015e6:	481e      	ldr	r0, [pc, #120]	; (8001660 <f_Switch+0x1bc>)
 80015e8:	f00c ff96 	bl	800e518 <puts>
				if(sw_flag)
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <f_Switch+0x1c0>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d00c      	beq.n	800160e <f_Switch+0x16a>
				{
					f_cur_mov();
 80015f4:	f7ff fef4 	bl	80013e0 <f_cur_mov>
 80015f8:	e009      	b.n	800160e <f_Switch+0x16a>
				}
			}
		  }
		  else if (f_tapCounter == 2 ) //if tapcounter is 2
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <f_Switch+0x1ac>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d105      	bne.n	800160e <f_Switch+0x16a>
		  {
				printf("double tap\n");
 8001602:	4819      	ldr	r0, [pc, #100]	; (8001668 <f_Switch+0x1c4>)
 8001604:	f00c ff88 	bl	800e518 <puts>
				s_case = f_escape;
 8001608:	4b18      	ldr	r3, [pc, #96]	; (800166c <f_Switch+0x1c8>)
 800160a:	221b      	movs	r2, #27
 800160c:	701a      	strb	r2, [r3, #0]

		  }

	  f_tapCounter = 0;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <f_Switch+0x1ac>)
 8001610:	2200      	movs	r2, #0
 8001612:	701a      	strb	r2, [r3, #0]
	}

	f_lastButtonState = f_reading;
 8001614:	4b04      	ldr	r3, [pc, #16]	; (8001628 <f_Switch+0x184>)
 8001616:	881b      	ldrh	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <f_Switch+0x188>)
 800161c:	601a      	str	r2, [r3, #0]

	return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	bd80      	pop	{r7, pc}
 8001624:	48000800 	.word	0x48000800
 8001628:	20000a54 	.word	0x20000a54
 800162c:	200002b4 	.word	0x200002b4
 8001630:	20000b44 	.word	0x20000b44
 8001634:	cccccccd 	.word	0xcccccccd
 8001638:	20000a50 	.word	0x20000a50
 800163c:	200002b2 	.word	0x200002b2
 8001640:	200002b8 	.word	0x200002b8
 8001644:	20000aec 	.word	0x20000aec
 8001648:	20000b90 	.word	0x20000b90
 800164c:	20000c1d 	.word	0x20000c1d
 8001650:	20000a52 	.word	0x20000a52
 8001654:	20000cf0 	.word	0x20000cf0
 8001658:	20000aea 	.word	0x20000aea
 800165c:	08010b9c 	.word	0x08010b9c
 8001660:	08010ba8 	.word	0x08010ba8
 8001664:	20000a56 	.word	0x20000a56
 8001668:	08010bb4 	.word	0x08010bb4
 800166c:	20000a57 	.word	0x20000a57

08001670 <f_Menu>:
/*********************************************************** END **************************************************************************/

/****************************************** This function use for Printing MENU ***********************************************************/
int f_Menu(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),100);
 8001674:	2364      	movs	r3, #100	; 0x64
 8001676:	22b2      	movs	r2, #178	; 0xb2
 8001678:	4907      	ldr	r1, [pc, #28]	; (8001698 <f_Menu+0x28>)
 800167a:	4808      	ldr	r0, [pc, #32]	; (800169c <f_Menu+0x2c>)
 800167c:	f00a fdf4 	bl	800c268 <HAL_UART_Transmit>
	f_INT_count=1;
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <f_Menu+0x30>)
 8001682:	2201      	movs	r2, #1
 8001684:	701a      	strb	r2, [r3, #0]
	sw_flag = 1;
 8001686:	4b07      	ldr	r3, [pc, #28]	; (80016a4 <f_Menu+0x34>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
	s_case = 0;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <f_Menu+0x38>)
 800168e:	2200      	movs	r2, #0
 8001690:	701a      	strb	r2, [r3, #0]

	return 0;
 8001692:	2300      	movs	r3, #0
}
 8001694:	4618      	mov	r0, r3
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200001d4 	.word	0x200001d4
 800169c:	20000b94 	.word	0x20000b94
 80016a0:	200002b9 	.word	0x200002b9
 80016a4:	20000a56 	.word	0x20000a56
 80016a8:	20000a57 	.word	0x20000a57

080016ac <f_Invalid>:
/*********************************************************** END **************************************************************************/

/******************************************** This function use for Printing Invalid ******************************************************/
int f_Invalid(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0

	if(flag_error)
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <f_Invalid+0x2c>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d00c      	beq.n	80016d2 <f_Invalid+0x26>
	{
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)Invalid,strlen(Invalid));
 80016b8:	4808      	ldr	r0, [pc, #32]	; (80016dc <f_Invalid+0x30>)
 80016ba:	f7fe fd89 	bl	80001d0 <strlen>
 80016be:	4603      	mov	r3, r0
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	461a      	mov	r2, r3
 80016c4:	4905      	ldr	r1, [pc, #20]	; (80016dc <f_Invalid+0x30>)
 80016c6:	4806      	ldr	r0, [pc, #24]	; (80016e0 <f_Invalid+0x34>)
 80016c8:	f00a fe62 	bl	800c390 <HAL_UART_Transmit_IT>
		flag_error = 0;
 80016cc:	4b02      	ldr	r3, [pc, #8]	; (80016d8 <f_Invalid+0x2c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
	}

return 0;
 80016d2:	2300      	movs	r3, #0
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200002c1 	.word	0x200002c1
 80016dc:	20000294 	.word	0x20000294
 80016e0:	20000b94 	.word	0x20000b94

080016e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016e8:	f007 f97a 	bl	80089e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016ec:	f000 f924 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f0:	f000 fa64 	bl	8001bbc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80016f4:	f000 fa32 	bl	8001b5c <MX_USART1_UART_Init>
  MX_UART4_Init();
 80016f8:	f000 fa00 	bl	8001afc <MX_UART4_Init>
  MX_I2C2_Init();
 80016fc:	f000 f96e 	bl	80019dc <MX_I2C2_Init>
  MX_TIM16_Init();
 8001700:	f000 f9ac 	bl	8001a5c <MX_TIM16_Init>
  MX_TIM17_Init();
 8001704:	f000 f9d2 	bl	8001aac <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	// Start timer
	HAL_TIM_Base_Start_IT(&htim16);
 8001708:	487f      	ldr	r0, [pc, #508]	; (8001908 <main+0x224>)
 800170a:	f00a faef 	bl	800bcec <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim17);
 800170e:	487f      	ldr	r0, [pc, #508]	; (800190c <main+0x228>)
 8001710:	f00a fa84 	bl	800bc1c <HAL_TIM_Base_Start>

	BSP_TSENSOR_Init();
 8001714:	f001 faa6 	bl	8002c64 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 8001718:	f001 fa04 	bl	8002b24 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 800171c:	f001 fa74 	bl	8002c08 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 8001720:	f001 f950 	bl	80029c4 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 8001724:	f001 f9a4 	bl	8002a70 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 8001728:	f001 fa2a 	bl	8002b80 <BSP_MAGNETO_Init>
	VL53L0X_PROXIMITY_Init();
 800172c:	f7ff fbe6 	bl	8000efc <VL53L0X_PROXIMITY_Init>


	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8001730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001734:	222e      	movs	r2, #46	; 0x2e
 8001736:	4976      	ldr	r1, [pc, #472]	; (8001910 <main+0x22c>)
 8001738:	4876      	ldr	r0, [pc, #472]	; (8001914 <main+0x230>)
 800173a:	f00a fd95 	bl	800c268 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	2219      	movs	r2, #25
 8001744:	4974      	ldr	r1, [pc, #464]	; (8001918 <main+0x234>)
 8001746:	4873      	ldr	r0, [pc, #460]	; (8001914 <main+0x230>)
 8001748:	f00a fd8e 	bl	800c268 <HAL_UART_Transmit>

	s_case = f_escape;
 800174c:	4b73      	ldr	r3, [pc, #460]	; (800191c <main+0x238>)
 800174e:	221b      	movs	r2, #27
 8001750:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1,rxData,1);
 8001752:	2201      	movs	r2, #1
 8001754:	4972      	ldr	r1, [pc, #456]	; (8001920 <main+0x23c>)
 8001756:	486f      	ldr	r0, [pc, #444]	; (8001914 <main+0x230>)
 8001758:	f00a fe88 	bl	800c46c <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  f_Switch();
 800175c:	f7ff fea2 	bl	80014a4 <f_Switch>

	  /*  This if condition is use for UART1 (Interrupt based) */
		if(newMsg)
 8001760:	4b70      	ldr	r3, [pc, #448]	; (8001924 <main+0x240>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <main+0xc6>
		{

			size = strlen(rxBuffer);
 8001768:	486f      	ldr	r0, [pc, #444]	; (8001928 <main+0x244>)
 800176a:	f7fe fd31 	bl	80001d0 <strlen>
 800176e:	4603      	mov	r3, r0
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4b6e      	ldr	r3, [pc, #440]	; (800192c <main+0x248>)
 8001774:	701a      	strb	r2, [r3, #0]

			if(size == f_size)
 8001776:	4b6d      	ldr	r3, [pc, #436]	; (800192c <main+0x248>)
 8001778:	781b      	ldrb	r3, [r3, #0]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d10a      	bne.n	8001794 <main+0xb0>
			{
				s_case= rxBuffer[0];
 800177e:	4b6a      	ldr	r3, [pc, #424]	; (8001928 <main+0x244>)
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	4b66      	ldr	r3, [pc, #408]	; (800191c <main+0x238>)
 8001784:	701a      	strb	r2, [r3, #0]
				printf("%d\n",s_case);
 8001786:	4b65      	ldr	r3, [pc, #404]	; (800191c <main+0x238>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4619      	mov	r1, r3
 800178c:	4868      	ldr	r0, [pc, #416]	; (8001930 <main+0x24c>)
 800178e:	f00c fe3d 	bl	800e40c <iprintf>
 8001792:	e002      	b.n	800179a <main+0xb6>
			}
			else
			{
				s_case = f_error;
 8001794:	4b61      	ldr	r3, [pc, #388]	; (800191c <main+0x238>)
 8001796:	2238      	movs	r2, #56	; 0x38
 8001798:	701a      	strb	r2, [r3, #0]
			}

			memset(rxBuffer, 0, sizeof(rxBuffer));
 800179a:	2205      	movs	r2, #5
 800179c:	2100      	movs	r1, #0
 800179e:	4862      	ldr	r0, [pc, #392]	; (8001928 <main+0x244>)
 80017a0:	f00c f9c2 	bl	800db28 <memset>
			newMsg=0;
 80017a4:	4b5f      	ldr	r3, [pc, #380]	; (8001924 <main+0x240>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
		}



		/* This switch case is using for calling Sensor functions */
		switch(s_case)
 80017aa:	4b5c      	ldr	r3, [pc, #368]	; (800191c <main+0x238>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b37      	cmp	r3, #55	; 0x37
 80017b0:	f200 80a4 	bhi.w	80018fc <main+0x218>
 80017b4:	a201      	add	r2, pc, #4	; (adr r2, 80017bc <main+0xd8>)
 80017b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ba:	bf00      	nop
 80017bc:	08001903 	.word	0x08001903
 80017c0:	080018fd 	.word	0x080018fd
 80017c4:	080018fd 	.word	0x080018fd
 80017c8:	080018fd 	.word	0x080018fd
 80017cc:	080018fd 	.word	0x080018fd
 80017d0:	080018fd 	.word	0x080018fd
 80017d4:	080018fd 	.word	0x080018fd
 80017d8:	080018fd 	.word	0x080018fd
 80017dc:	080018fd 	.word	0x080018fd
 80017e0:	080018fd 	.word	0x080018fd
 80017e4:	080018fd 	.word	0x080018fd
 80017e8:	080018fd 	.word	0x080018fd
 80017ec:	080018fd 	.word	0x080018fd
 80017f0:	080018fd 	.word	0x080018fd
 80017f4:	080018fd 	.word	0x080018fd
 80017f8:	080018fd 	.word	0x080018fd
 80017fc:	080018fd 	.word	0x080018fd
 8001800:	080018fd 	.word	0x080018fd
 8001804:	080018fd 	.word	0x080018fd
 8001808:	080018fd 	.word	0x080018fd
 800180c:	080018fd 	.word	0x080018fd
 8001810:	080018fd 	.word	0x080018fd
 8001814:	080018fd 	.word	0x080018fd
 8001818:	080018fd 	.word	0x080018fd
 800181c:	080018fd 	.word	0x080018fd
 8001820:	080018fd 	.word	0x080018fd
 8001824:	080018fd 	.word	0x080018fd
 8001828:	080018f1 	.word	0x080018f1
 800182c:	080018fd 	.word	0x080018fd
 8001830:	080018fd 	.word	0x080018fd
 8001834:	080018fd 	.word	0x080018fd
 8001838:	080018fd 	.word	0x080018fd
 800183c:	080018fd 	.word	0x080018fd
 8001840:	080018fd 	.word	0x080018fd
 8001844:	080018fd 	.word	0x080018fd
 8001848:	080018fd 	.word	0x080018fd
 800184c:	080018fd 	.word	0x080018fd
 8001850:	080018fd 	.word	0x080018fd
 8001854:	080018fd 	.word	0x080018fd
 8001858:	080018fd 	.word	0x080018fd
 800185c:	080018fd 	.word	0x080018fd
 8001860:	080018fd 	.word	0x080018fd
 8001864:	080018fd 	.word	0x080018fd
 8001868:	080018fd 	.word	0x080018fd
 800186c:	080018fd 	.word	0x080018fd
 8001870:	080018fd 	.word	0x080018fd
 8001874:	080018fd 	.word	0x080018fd
 8001878:	080018fd 	.word	0x080018fd
 800187c:	080018fd 	.word	0x080018fd
 8001880:	0800189d 	.word	0x0800189d
 8001884:	080018a9 	.word	0x080018a9
 8001888:	080018b5 	.word	0x080018b5
 800188c:	080018c1 	.word	0x080018c1
 8001890:	080018cd 	.word	0x080018cd
 8001894:	080018d9 	.word	0x080018d9
 8001898:	080018e5 	.word	0x080018e5
			{
				break;
			}
			case f_One:
			{
				sw_flag=0;
 800189c:	4b25      	ldr	r3, [pc, #148]	; (8001934 <main+0x250>)
 800189e:	2200      	movs	r2, #0
 80018a0:	701a      	strb	r2, [r3, #0]
				f_Temperature();
 80018a2:	f7ff fba3 	bl	8000fec <f_Temperature>
				break;
 80018a6:	e02d      	b.n	8001904 <main+0x220>
			}
			case f_Two:
			{
				sw_flag=0;
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <main+0x250>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	701a      	strb	r2, [r3, #0]
				f_Humidity();
 80018ae:	f7ff fbed 	bl	800108c <f_Humidity>
				break;
 80018b2:	e027      	b.n	8001904 <main+0x220>
			}
			case f_Three:
			{

				sw_flag=0;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <main+0x250>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
				f_Pressure();
 80018ba:	f7ff fc37 	bl	800112c <f_Pressure>
				break;
 80018be:	e021      	b.n	8001904 <main+0x220>
			}
			case f_Four:
			{
				sw_flag=0;
 80018c0:	4b1c      	ldr	r3, [pc, #112]	; (8001934 <main+0x250>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	701a      	strb	r2, [r3, #0]
				f_ACCELEROMETER();
 80018c6:	f7ff fc81 	bl	80011cc <f_ACCELEROMETER>
				break;
 80018ca:	e01b      	b.n	8001904 <main+0x220>
			}
			case f_Five:
			{
				sw_flag=0;
 80018cc:	4b19      	ldr	r3, [pc, #100]	; (8001934 <main+0x250>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	701a      	strb	r2, [r3, #0]
				f_GYRO();
 80018d2:	f7ff fccf 	bl	8001274 <f_GYRO>
				break;
 80018d6:	e015      	b.n	8001904 <main+0x220>
			}
			case f_Six:
			{
				sw_flag=0;
 80018d8:	4b16      	ldr	r3, [pc, #88]	; (8001934 <main+0x250>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
				f_MAGNETOMETERR();
 80018de:	f7ff fd2b 	bl	8001338 <f_MAGNETOMETERR>
				break;
 80018e2:	e00f      	b.n	8001904 <main+0x220>
			}
			case f_Seven:
			{
				sw_flag=0;
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <main+0x250>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	701a      	strb	r2, [r3, #0]
				Proximity_Test();
 80018ea:	f7ff fad9 	bl	8000ea0 <Proximity_Test>
				break;
 80018ee:	e009      	b.n	8001904 <main+0x220>
			}
			case f_escape:
			{
				sw_flag=0;
 80018f0:	4b10      	ldr	r3, [pc, #64]	; (8001934 <main+0x250>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
				f_Menu();
 80018f6:	f7ff febb 	bl	8001670 <f_Menu>
				break;
 80018fa:	e003      	b.n	8001904 <main+0x220>
			}
			default :
			{
				f_Invalid();
 80018fc:	f7ff fed6 	bl	80016ac <f_Invalid>
 8001900:	e72c      	b.n	800175c <main+0x78>
				break;
 8001902:	bf00      	nop
	  f_Switch();
 8001904:	e72a      	b.n	800175c <main+0x78>
 8001906:	bf00      	nop
 8001908:	20000ca4 	.word	0x20000ca4
 800190c:	20000b44 	.word	0x20000b44
 8001910:	20000188 	.word	0x20000188
 8001914:	20000b94 	.word	0x20000b94
 8001918:	200001b8 	.word	0x200001b8
 800191c:	20000a57 	.word	0x20000a57
 8001920:	20000ae8 	.word	0x20000ae8
 8001924:	20000a58 	.word	0x20000a58
 8001928:	20000c18 	.word	0x20000c18
 800192c:	20000a5a 	.word	0x20000a5a
 8001930:	08010bc0 	.word	0x08010bc0
 8001934:	20000a56 	.word	0x20000a56

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b096      	sub	sp, #88	; 0x58
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	2244      	movs	r2, #68	; 0x44
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f00c f8ee 	bl	800db28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	463b      	mov	r3, r7
 800194e:	2200      	movs	r2, #0
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	605a      	str	r2, [r3, #4]
 8001954:	609a      	str	r2, [r3, #8]
 8001956:	60da      	str	r2, [r3, #12]
 8001958:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800195a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800195e:	f008 fdf5 	bl	800a54c <HAL_PWREx_ControlVoltageScaling>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001968:	f000 fbac 	bl	80020c4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800196c:	2310      	movs	r3, #16
 800196e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001970:	2301      	movs	r3, #1
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001974:	2300      	movs	r3, #0
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001978:	2360      	movs	r3, #96	; 0x60
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800197c:	2302      	movs	r3, #2
 800197e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001980:	2301      	movs	r3, #1
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001984:	2301      	movs	r3, #1
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001988:	2328      	movs	r3, #40	; 0x28
 800198a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800198c:	2307      	movs	r3, #7
 800198e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001990:	2302      	movs	r3, #2
 8001992:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001994:	2302      	movs	r3, #2
 8001996:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4618      	mov	r0, r3
 800199e:	f008 fe2b 	bl	800a5f8 <HAL_RCC_OscConfig>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <SystemClock_Config+0x74>
  {
    Error_Handler();
 80019a8:	f000 fb8c 	bl	80020c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ac:	230f      	movs	r3, #15
 80019ae:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019b0:	2303      	movs	r3, #3
 80019b2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80019c0:	463b      	mov	r3, r7
 80019c2:	2104      	movs	r1, #4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f009 f9f1 	bl	800adac <HAL_RCC_ClockConfig>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80019d0:	f000 fb78 	bl	80020c4 <Error_Handler>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3758      	adds	r7, #88	; 0x58
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_I2C2_Init+0x74>)
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <MX_I2C2_Init+0x78>)
 80019e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_I2C2_Init+0x74>)
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <MX_I2C2_Init+0x7c>)
 80019ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_I2C2_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <MX_I2C2_Init+0x74>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_I2C2_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_I2C2_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C2_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C2_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C2_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a16:	480e      	ldr	r0, [pc, #56]	; (8001a50 <MX_I2C2_Init+0x74>)
 8001a18:	f007 fcfb 	bl	8009412 <HAL_I2C_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001a22:	f000 fb4f 	bl	80020c4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <MX_I2C2_Init+0x74>)
 8001a2a:	f008 fce9 	bl	800a400 <HAL_I2CEx_ConfigAnalogFilter>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001a34:	f000 fb46 	bl	80020c4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_I2C2_Init+0x74>)
 8001a3c:	f008 fd2b 	bl	800a496 <HAL_I2CEx_ConfigDigitalFilter>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001a46:	f000 fb3d 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000af0 	.word	0x20000af0
 8001a54:	40005800 	.word	0x40005800
 8001a58:	10909cec 	.word	0x10909cec

08001a5c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001a60:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a62:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <MX_TIM16_Init+0x4c>)
 8001a64:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 8001a66:	4b0f      	ldr	r3, [pc, #60]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a68:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001a6c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6e:	4b0d      	ldr	r3, [pc, #52]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = f_count;
 8001a74:	4b0b      	ldr	r3, [pc, #44]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a76:	f242 7210 	movw	r2, #10000	; 0x2710
 8001a7a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001a82:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a88:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	; (8001aa4 <MX_TIM16_Init+0x48>)
 8001a90:	f00a f86c 	bl	800bb6c <HAL_TIM_Base_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8001a9a:	f000 fb13 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000ca4 	.word	0x20000ca4
 8001aa8:	40014400 	.word	0x40014400

08001aac <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001ab0:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ab2:	4a11      	ldr	r2, [pc, #68]	; (8001af8 <MX_TIM17_Init+0x4c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 8001ab6:	4b0f      	ldr	r3, [pc, #60]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ab8:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001abc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aca:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001acc:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001ad2:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001ade:	4805      	ldr	r0, [pc, #20]	; (8001af4 <MX_TIM17_Init+0x48>)
 8001ae0:	f00a f844 	bl	800bb6c <HAL_TIM_Base_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8001aea:	f000 faeb 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000b44 	.word	0x20000b44
 8001af8:	40014800 	.word	0x40014800

08001afc <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001b00:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b02:	4a15      	ldr	r2, [pc, #84]	; (8001b58 <MX_UART4_Init+0x5c>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001b06:	4b13      	ldr	r3, [pc, #76]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b0f      	ldr	r3, [pc, #60]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b0c      	ldr	r3, [pc, #48]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b09      	ldr	r3, [pc, #36]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001b3e:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_UART4_Init+0x58>)
 8001b40:	f00a fb44 	bl	800c1cc <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8001b4a:	f000 fabb 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000c20 	.word	0x20000c20
 8001b58:	40004c00 	.word	0x40004c00

08001b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b60:	4b14      	ldr	r3, [pc, #80]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b62:	4a15      	ldr	r2, [pc, #84]	; (8001bb8 <MX_USART1_UART_Init+0x5c>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b0f      	ldr	r3, [pc, #60]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_USART1_UART_Init+0x58>)
 8001ba0:	f00a fb14 	bl	800c1cc <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001baa:	f000 fa8b 	bl	80020c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000b94 	.word	0x20000b94
 8001bb8:	40013800 	.word	0x40013800

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001bd2:	4bbc      	ldr	r3, [pc, #752]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd6:	4abb      	ldr	r2, [pc, #748]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001bd8:	f043 0310 	orr.w	r3, r3, #16
 8001bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bde:	4bb9      	ldr	r3, [pc, #740]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001be2:	f003 0310 	and.w	r3, r3, #16
 8001be6:	613b      	str	r3, [r7, #16]
 8001be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bea:	4bb6      	ldr	r3, [pc, #728]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bee:	4ab5      	ldr	r2, [pc, #724]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf6:	4bb3      	ldr	r3, [pc, #716]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	4bb0      	ldr	r3, [pc, #704]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c06:	4aaf      	ldr	r2, [pc, #700]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c0e:	4bad      	ldr	r3, [pc, #692]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	4baa      	ldr	r3, [pc, #680]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1e:	4aa9      	ldr	r2, [pc, #676]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c20:	f043 0302 	orr.w	r3, r3, #2
 8001c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c26:	4ba7      	ldr	r3, [pc, #668]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	607b      	str	r3, [r7, #4]
 8001c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c32:	4ba4      	ldr	r3, [pc, #656]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c36:	4aa3      	ldr	r2, [pc, #652]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c38:	f043 0308 	orr.w	r3, r3, #8
 8001c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c3e:	4ba1      	ldr	r3, [pc, #644]	; (8001ec4 <MX_GPIO_Init+0x308>)
 8001c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c42:	f003 0308 	and.w	r3, r3, #8
 8001c46:	603b      	str	r3, [r7, #0]
 8001c48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001c50:	489d      	ldr	r0, [pc, #628]	; (8001ec8 <MX_GPIO_Init+0x30c>)
 8001c52:	f007 fba3 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8001c56:	2200      	movs	r2, #0
 8001c58:	f248 1104 	movw	r1, #33028	; 0x8104
 8001c5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c60:	f007 fb9c 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001c64:	2200      	movs	r2, #0
 8001c66:	f24f 0114 	movw	r1, #61460	; 0xf014
 8001c6a:	4898      	ldr	r0, [pc, #608]	; (8001ecc <MX_GPIO_Init+0x310>)
 8001c6c:	f007 fb96 	bl	800939c <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8001c70:	2200      	movs	r2, #0
 8001c72:	f241 0181 	movw	r1, #4225	; 0x1081
 8001c76:	4896      	ldr	r0, [pc, #600]	; (8001ed0 <MX_GPIO_Init+0x314>)
 8001c78:	f007 fb90 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001c82:	4893      	ldr	r0, [pc, #588]	; (8001ed0 <MX_GPIO_Init+0x314>)
 8001c84:	f007 fb8a 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001c8e:	4891      	ldr	r0, [pc, #580]	; (8001ed4 <MX_GPIO_Init+0x318>)
 8001c90:	f007 fb84 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c94:	2201      	movs	r2, #1
 8001c96:	2120      	movs	r1, #32
 8001c98:	488c      	ldr	r0, [pc, #560]	; (8001ecc <MX_GPIO_Init+0x310>)
 8001c9a:	f007 fb7f 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	4889      	ldr	r0, [pc, #548]	; (8001ec8 <MX_GPIO_Init+0x30c>)
 8001ca4:	f007 fb7a 	bl	800939c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8001ca8:	f240 1315 	movw	r3, #277	; 0x115
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4881      	ldr	r0, [pc, #516]	; (8001ec8 <MX_GPIO_Init+0x30c>)
 8001cc2:	f007 f8b5 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8001cc6:	236a      	movs	r3, #106	; 0x6a
 8001cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	487b      	ldr	r0, [pc, #492]	; (8001ec8 <MX_GPIO_Init+0x30c>)
 8001cdc:	f007 f8a8 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : f_sw13_Pin */
  GPIO_InitStruct.Pin = f_sw13_Pin;
 8001ce0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(f_sw13_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 0314 	add.w	r3, r7, #20
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4877      	ldr	r0, [pc, #476]	; (8001ed4 <MX_GPIO_Init+0x318>)
 8001cf6:	f007 f89b 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8001cfa:	233f      	movs	r3, #63	; 0x3f
 8001cfc:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cfe:	230b      	movs	r3, #11
 8001d00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4871      	ldr	r0, [pc, #452]	; (8001ed4 <MX_GPIO_Init+0x318>)
 8001d0e:	f007 f88f 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8001d12:	f248 1304 	movw	r3, #33028	; 0x8104
 8001d16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d20:	2300      	movs	r3, #0
 8001d22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d2e:	f007 f87f 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8001d32:	2308      	movs	r3, #8
 8001d34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001d42:	2301      	movs	r3, #1
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d50:	f007 f86e 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8001d54:	2310      	movs	r3, #16
 8001d56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001d58:	230b      	movs	r3, #11
 8001d5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	4619      	mov	r1, r3
 8001d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6a:	f007 f861 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8001d6e:	23e0      	movs	r3, #224	; 0xe0
 8001d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d72:	2302      	movs	r3, #2
 8001d74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d7e:	2305      	movs	r3, #5
 8001d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d82:	f107 0314 	add.w	r3, r7, #20
 8001d86:	4619      	mov	r1, r3
 8001d88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d8c:	f007 f850 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001d90:	2301      	movs	r3, #1
 8001d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d94:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001d98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4619      	mov	r1, r3
 8001da4:	4849      	ldr	r0, [pc, #292]	; (8001ecc <MX_GPIO_Init+0x310>)
 8001da6:	f007 f843 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8001daa:	2302      	movs	r3, #2
 8001dac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001dae:	230b      	movs	r3, #11
 8001db0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4843      	ldr	r0, [pc, #268]	; (8001ecc <MX_GPIO_Init+0x310>)
 8001dbe:	f007 f837 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001dc2:	f24f 0334 	movw	r3, #61492	; 0xf034
 8001dc6:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd4:	f107 0314 	add.w	r3, r7, #20
 8001dd8:	4619      	mov	r1, r3
 8001dda:	483c      	ldr	r0, [pc, #240]	; (8001ecc <MX_GPIO_Init+0x310>)
 8001ddc:	f007 f828 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001de0:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001de4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001df2:	2306      	movs	r3, #6
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001df6:	f107 0314 	add.w	r3, r7, #20
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4832      	ldr	r0, [pc, #200]	; (8001ec8 <MX_GPIO_Init+0x30c>)
 8001dfe:	f007 f817 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8001e02:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001e06:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e08:	2302      	movs	r3, #2
 8001e0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e10:	2303      	movs	r3, #3
 8001e12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001e14:	230a      	movs	r3, #10
 8001e16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	482a      	ldr	r0, [pc, #168]	; (8001ec8 <MX_GPIO_Init+0x30c>)
 8001e20:	f007 f806 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001e24:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e32:	2303      	movs	r3, #3
 8001e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001e36:	2307      	movs	r3, #7
 8001e38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e3a:	f107 0314 	add.w	r3, r7, #20
 8001e3e:	4619      	mov	r1, r3
 8001e40:	4823      	ldr	r0, [pc, #140]	; (8001ed0 <MX_GPIO_Init+0x314>)
 8001e42:	f006 fff5 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001e46:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001e4a:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e4c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	481c      	ldr	r0, [pc, #112]	; (8001ed0 <MX_GPIO_Init+0x314>)
 8001e5e:	f006 ffe7 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001e62:	f243 0381 	movw	r3, #12417	; 0x3081
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4815      	ldr	r0, [pc, #84]	; (8001ed0 <MX_GPIO_Init+0x314>)
 8001e7c:	f006 ffd8 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8001e80:	2340      	movs	r3, #64	; 0x40
 8001e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e84:	2301      	movs	r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e8c:	2302      	movs	r3, #2
 8001e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8001e90:	f107 0314 	add.w	r3, r7, #20
 8001e94:	4619      	mov	r1, r3
 8001e96:	480f      	ldr	r0, [pc, #60]	; (8001ed4 <MX_GPIO_Init+0x318>)
 8001e98:	f006 ffca 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8001e9c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001ea0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ea2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001ea6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eac:	f107 0314 	add.w	r3, r7, #20
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <MX_GPIO_Init+0x318>)
 8001eb4:	f006 ffbc 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = LED3_WIFI__LED4_BLE_Pin;
 8001eb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	61bb      	str	r3, [r7, #24]
 8001ec2:	e009      	b.n	8001ed8 <MX_GPIO_Init+0x31c>
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	48001000 	.word	0x48001000
 8001ecc:	48000400 	.word	0x48000400
 8001ed0:	48000c00 	.word	0x48000c00
 8001ed4:	48000800 	.word	0x48000800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_WIFI__LED4_BLE_GPIO_Port, &GPIO_InitStruct);
 8001ee0:	f107 0314 	add.w	r3, r7, #20
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	483c      	ldr	r0, [pc, #240]	; (8001fd8 <MX_GPIO_Init+0x41c>)
 8001ee8:	f006 ffa2 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001eec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ef0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f04:	f006 ff94 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001f08:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f16:	2303      	movs	r3, #3
 8001f18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001f1a:	230a      	movs	r3, #10
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f1e:	f107 0314 	add.w	r3, r7, #20
 8001f22:	4619      	mov	r1, r3
 8001f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f28:	f006 ff82 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8001f2c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f32:	2302      	movs	r3, #2
 8001f34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f3e:	2306      	movs	r3, #6
 8001f40:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f42:	f107 0314 	add.w	r3, r7, #20
 8001f46:	4619      	mov	r1, r3
 8001f48:	4823      	ldr	r0, [pc, #140]	; (8001fd8 <MX_GPIO_Init+0x41c>)
 8001f4a:	f006 ff71 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f5e:	2305      	movs	r3, #5
 8001f60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8001f62:	f107 0314 	add.w	r3, r7, #20
 8001f66:	4619      	mov	r1, r3
 8001f68:	481c      	ldr	r0, [pc, #112]	; (8001fdc <MX_GPIO_Init+0x420>)
 8001f6a:	f006 ff61 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8001f6e:	2378      	movs	r3, #120	; 0x78
 8001f70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f7e:	2307      	movs	r3, #7
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	4814      	ldr	r0, [pc, #80]	; (8001fdc <MX_GPIO_Init+0x420>)
 8001f8a:	f006 ff51 	bl	8008e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f94:	2312      	movs	r3, #18
 8001f96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa0:	2304      	movs	r3, #4
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	480d      	ldr	r0, [pc, #52]	; (8001fe0 <MX_GPIO_Init+0x424>)
 8001fac:	f006 ff40 	bl	8008e30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	2017      	movs	r0, #23
 8001fb6:	f006 fe86 	bl	8008cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001fba:	2017      	movs	r0, #23
 8001fbc:	f006 fe9f 	bl	8008cfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	2028      	movs	r0, #40	; 0x28
 8001fc6:	f006 fe7e 	bl	8008cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001fca:	2028      	movs	r0, #40	; 0x28
 8001fcc:	f006 fe97 	bl	8008cfe <HAL_NVIC_EnableIRQ>

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48000c00 	.word	0x48000c00
 8001fe0:	48000400 	.word	0x48000400

08001fe4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a11      	ldr	r2, [pc, #68]	; (8002038 <HAL_UART_RxCpltCallback+0x54>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d11c      	bne.n	8002030 <HAL_UART_RxCpltCallback+0x4c>
    {
    	if(rxData[0]!='\r')
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_UART_RxCpltCallback+0x58>)
 8001ff8:	781b      	ldrb	r3, [r3, #0]
 8001ffa:	2b0d      	cmp	r3, #13
 8001ffc:	d00d      	beq.n	800201a <HAL_UART_RxCpltCallback+0x36>
        {
            rxBuffer[rxIndex]=rxData[0];
 8001ffe:	4b10      	ldr	r3, [pc, #64]	; (8002040 <HAL_UART_RxCpltCallback+0x5c>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_UART_RxCpltCallback+0x58>)
 8002006:	7819      	ldrb	r1, [r3, #0]
 8002008:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_UART_RxCpltCallback+0x60>)
 800200a:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 800200c:	4b0c      	ldr	r3, [pc, #48]	; (8002040 <HAL_UART_RxCpltCallback+0x5c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	3301      	adds	r3, #1
 8002012:	b2da      	uxtb	r2, r3
 8002014:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_UART_RxCpltCallback+0x5c>)
 8002016:	701a      	strb	r2, [r3, #0]
 8002018:	e005      	b.n	8002026 <HAL_UART_RxCpltCallback+0x42>
        }
        else
        {
            newMsg=1;
 800201a:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_UART_RxCpltCallback+0x64>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 8002020:	4b07      	ldr	r3, [pc, #28]	; (8002040 <HAL_UART_RxCpltCallback+0x5c>)
 8002022:	2200      	movs	r2, #0
 8002024:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8002026:	2201      	movs	r2, #1
 8002028:	4904      	ldr	r1, [pc, #16]	; (800203c <HAL_UART_RxCpltCallback+0x58>)
 800202a:	4808      	ldr	r0, [pc, #32]	; (800204c <HAL_UART_RxCpltCallback+0x68>)
 800202c:	f00a fa1e 	bl	800c46c <HAL_UART_Receive_IT>
    }

}
 8002030:	bf00      	nop
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	40013800 	.word	0x40013800
 800203c:	20000ae8 	.word	0x20000ae8
 8002040:	20000a59 	.word	0x20000a59
 8002044:	20000c18 	.word	0x20000c18
 8002048:	20000a58 	.word	0x20000a58
 800204c:	20000b94 	.word	0x20000b94

08002050 <HAL_TIM_PeriodElapsedCallback>:
/*This Callback function use for generating Timer(timer 16) delay  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  // Check the timer triggered this callback
	if(htim -> Instance == TIM16)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a10      	ldr	r2, [pc, #64]	; (80020a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d117      	bne.n	8002092 <HAL_TIM_PeriodElapsedCallback+0x42>
	{
		flag_temp  = 1;							//checking the timer callback
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
		flag_humi  = 1;
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
		flag_pre   = 1;
 800206e:	4b0f      	ldr	r3, [pc, #60]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
		flag_acce  = 1;
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
		flag_gyro  = 1;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
		flag_mag   = 1;
 8002080:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
		flag_pro   = 1;
 8002086:	4b0d      	ldr	r3, [pc, #52]	; (80020bc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002088:	2201      	movs	r2, #1
 800208a:	701a      	strb	r2, [r3, #0]
		flag_error = 1;
 800208c:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800208e:	2201      	movs	r2, #1
 8002090:	701a      	strb	r2, [r3, #0]
	}
}
 8002092:	bf00      	nop
 8002094:	370c      	adds	r7, #12
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	40014400 	.word	0x40014400
 80020a4:	200002ba 	.word	0x200002ba
 80020a8:	200002bb 	.word	0x200002bb
 80020ac:	200002bc 	.word	0x200002bc
 80020b0:	200002bd 	.word	0x200002bd
 80020b4:	200002be 	.word	0x200002be
 80020b8:	200002bf 	.word	0x200002bf
 80020bc:	200002c0 	.word	0x200002c0
 80020c0:	200002c1 	.word	0x200002c1

080020c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020c8:	b672      	cpsid	i
}
 80020ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020cc:	e7fe      	b.n	80020cc <Error_Handler+0x8>
	...

080020d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <HAL_MspInit+0x44>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020da:	4a0e      	ldr	r2, [pc, #56]	; (8002114 <HAL_MspInit+0x44>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6613      	str	r3, [r2, #96]	; 0x60
 80020e2:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_MspInit+0x44>)
 80020e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	607b      	str	r3, [r7, #4]
 80020ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b09      	ldr	r3, [pc, #36]	; (8002114 <HAL_MspInit+0x44>)
 80020f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f2:	4a08      	ldr	r2, [pc, #32]	; (8002114 <HAL_MspInit+0x44>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6593      	str	r3, [r2, #88]	; 0x58
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_MspInit+0x44>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000

08002118 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b0ac      	sub	sp, #176	; 0xb0
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002120:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2288      	movs	r2, #136	; 0x88
 8002136:	2100      	movs	r1, #0
 8002138:	4618      	mov	r0, r3
 800213a:	f00b fcf5 	bl	800db28 <memset>
  if(hi2c->Instance==I2C2)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a21      	ldr	r2, [pc, #132]	; (80021c8 <HAL_I2C_MspInit+0xb0>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d13b      	bne.n	80021c0 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002148:	2380      	movs	r3, #128	; 0x80
 800214a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800214c:	2300      	movs	r3, #0
 800214e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4618      	mov	r0, r3
 8002156:	f009 f84d 	bl	800b1f4 <HAL_RCCEx_PeriphCLKConfig>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002160:	f7ff ffb0 	bl	80020c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_I2C_MspInit+0xb4>)
 8002166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002168:	4a18      	ldr	r2, [pc, #96]	; (80021cc <HAL_I2C_MspInit+0xb4>)
 800216a:	f043 0302 	orr.w	r3, r3, #2
 800216e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002170:	4b16      	ldr	r3, [pc, #88]	; (80021cc <HAL_I2C_MspInit+0xb4>)
 8002172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 800217c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002184:	2312      	movs	r3, #18
 8002186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002190:	2303      	movs	r3, #3
 8002192:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002196:	2304      	movs	r3, #4
 8002198:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800219c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021a0:	4619      	mov	r1, r3
 80021a2:	480b      	ldr	r0, [pc, #44]	; (80021d0 <HAL_I2C_MspInit+0xb8>)
 80021a4:	f006 fe44 	bl	8008e30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021a8:	4b08      	ldr	r3, [pc, #32]	; (80021cc <HAL_I2C_MspInit+0xb4>)
 80021aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ac:	4a07      	ldr	r2, [pc, #28]	; (80021cc <HAL_I2C_MspInit+0xb4>)
 80021ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021b2:	6593      	str	r3, [r2, #88]	; 0x58
 80021b4:	4b05      	ldr	r3, [pc, #20]	; (80021cc <HAL_I2C_MspInit+0xb4>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021bc:	60fb      	str	r3, [r7, #12]
 80021be:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021c0:	bf00      	nop
 80021c2:	37b0      	adds	r7, #176	; 0xb0
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40005800 	.word	0x40005800
 80021cc:	40021000 	.word	0x40021000
 80021d0:	48000400 	.word	0x48000400

080021d4 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a0b      	ldr	r2, [pc, #44]	; (8002210 <HAL_I2C_MspDeInit+0x3c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d10f      	bne.n	8002206 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80021e6:	4b0b      	ldr	r3, [pc, #44]	; (8002214 <HAL_I2C_MspDeInit+0x40>)
 80021e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <HAL_I2C_MspDeInit+0x40>)
 80021ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80021f0:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 80021f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80021f6:	4808      	ldr	r0, [pc, #32]	; (8002218 <HAL_I2C_MspDeInit+0x44>)
 80021f8:	f006 ffc4 	bl	8009184 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 80021fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002200:	4805      	ldr	r0, [pc, #20]	; (8002218 <HAL_I2C_MspDeInit+0x44>)
 8002202:	f006 ffbf 	bl	8009184 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8002206:	bf00      	nop
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40005800 	.word	0x40005800
 8002214:	40021000 	.word	0x40021000
 8002218:	48000400 	.word	0x48000400

0800221c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a16      	ldr	r2, [pc, #88]	; (8002284 <HAL_TIM_Base_MspInit+0x68>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d114      	bne.n	8002258 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 800222e:	4b16      	ldr	r3, [pc, #88]	; (8002288 <HAL_TIM_Base_MspInit+0x6c>)
 8002230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002232:	4a15      	ldr	r2, [pc, #84]	; (8002288 <HAL_TIM_Base_MspInit+0x6c>)
 8002234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002238:	6613      	str	r3, [r2, #96]	; 0x60
 800223a:	4b13      	ldr	r3, [pc, #76]	; (8002288 <HAL_TIM_Base_MspInit+0x6c>)
 800223c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800223e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002246:	2200      	movs	r2, #0
 8002248:	2100      	movs	r1, #0
 800224a:	2019      	movs	r0, #25
 800224c:	f006 fd3b 	bl	8008cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002250:	2019      	movs	r0, #25
 8002252:	f006 fd54 	bl	8008cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8002256:	e010      	b.n	800227a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_TIM_Base_MspInit+0x70>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10b      	bne.n	800227a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002262:	4b09      	ldr	r3, [pc, #36]	; (8002288 <HAL_TIM_Base_MspInit+0x6c>)
 8002264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002266:	4a08      	ldr	r2, [pc, #32]	; (8002288 <HAL_TIM_Base_MspInit+0x6c>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6613      	str	r3, [r2, #96]	; 0x60
 800226e:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_TIM_Base_MspInit+0x6c>)
 8002270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002272:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002276:	60bb      	str	r3, [r7, #8]
 8002278:	68bb      	ldr	r3, [r7, #8]
}
 800227a:	bf00      	nop
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	40014400 	.word	0x40014400
 8002288:	40021000 	.word	0x40021000
 800228c:	40014800 	.word	0x40014800

08002290 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b0ae      	sub	sp, #184	; 0xb8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	f107 031c 	add.w	r3, r7, #28
 80022ac:	2288      	movs	r2, #136	; 0x88
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b fc39 	bl	800db28 <memset>
  if(huart->Instance==UART4)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a4a      	ldr	r2, [pc, #296]	; (80023e4 <HAL_UART_MspInit+0x154>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d144      	bne.n	800234a <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80022c0:	2308      	movs	r3, #8
 80022c2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80022c4:	2300      	movs	r3, #0
 80022c6:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022c8:	f107 031c 	add.w	r3, r7, #28
 80022cc:	4618      	mov	r0, r3
 80022ce:	f008 ff91 	bl	800b1f4 <HAL_RCCEx_PeriphCLKConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022d8:	f7ff fef4 	bl	80020c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80022dc:	4b42      	ldr	r3, [pc, #264]	; (80023e8 <HAL_UART_MspInit+0x158>)
 80022de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e0:	4a41      	ldr	r2, [pc, #260]	; (80023e8 <HAL_UART_MspInit+0x158>)
 80022e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80022e6:	6593      	str	r3, [r2, #88]	; 0x58
 80022e8:	4b3f      	ldr	r3, [pc, #252]	; (80023e8 <HAL_UART_MspInit+0x158>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f4:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_UART_MspInit+0x158>)
 80022f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f8:	4a3b      	ldr	r2, [pc, #236]	; (80023e8 <HAL_UART_MspInit+0x158>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002300:	4b39      	ldr	r3, [pc, #228]	; (80023e8 <HAL_UART_MspInit+0x158>)
 8002302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 800230c:	2303      	movs	r3, #3
 800230e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002324:	2308      	movs	r3, #8
 8002326:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800232a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800232e:	4619      	mov	r1, r3
 8002330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002334:	f006 fd7c 	bl	8008e30 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8002338:	2200      	movs	r2, #0
 800233a:	2100      	movs	r1, #0
 800233c:	2034      	movs	r0, #52	; 0x34
 800233e:	f006 fcc2 	bl	8008cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002342:	2034      	movs	r0, #52	; 0x34
 8002344:	f006 fcdb 	bl	8008cfe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002348:	e047      	b.n	80023da <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a27      	ldr	r2, [pc, #156]	; (80023ec <HAL_UART_MspInit+0x15c>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d142      	bne.n	80023da <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002354:	2301      	movs	r3, #1
 8002356:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002358:	2300      	movs	r3, #0
 800235a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800235c:	f107 031c 	add.w	r3, r7, #28
 8002360:	4618      	mov	r0, r3
 8002362:	f008 ff47 	bl	800b1f4 <HAL_RCCEx_PeriphCLKConfig>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800236c:	f7ff feaa 	bl	80020c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002370:	4b1d      	ldr	r3, [pc, #116]	; (80023e8 <HAL_UART_MspInit+0x158>)
 8002372:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002374:	4a1c      	ldr	r2, [pc, #112]	; (80023e8 <HAL_UART_MspInit+0x158>)
 8002376:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800237a:	6613      	str	r3, [r2, #96]	; 0x60
 800237c:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_UART_MspInit+0x158>)
 800237e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002380:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002388:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_UART_MspInit+0x158>)
 800238a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238c:	4a16      	ldr	r2, [pc, #88]	; (80023e8 <HAL_UART_MspInit+0x158>)
 800238e:	f043 0302 	orr.w	r3, r3, #2
 8002392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002394:	4b14      	ldr	r3, [pc, #80]	; (80023e8 <HAL_UART_MspInit+0x158>)
 8002396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 80023a0:	23c0      	movs	r3, #192	; 0xc0
 80023a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023b2:	2303      	movs	r3, #3
 80023b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023b8:	2307      	movs	r3, #7
 80023ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80023c2:	4619      	mov	r1, r3
 80023c4:	480a      	ldr	r0, [pc, #40]	; (80023f0 <HAL_UART_MspInit+0x160>)
 80023c6:	f006 fd33 	bl	8008e30 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2025      	movs	r0, #37	; 0x25
 80023d0:	f006 fc79 	bl	8008cc6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023d4:	2025      	movs	r0, #37	; 0x25
 80023d6:	f006 fc92 	bl	8008cfe <HAL_NVIC_EnableIRQ>
}
 80023da:	bf00      	nop
 80023dc:	37b8      	adds	r7, #184	; 0xb8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40004c00 	.word	0x40004c00
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40013800 	.word	0x40013800
 80023f0:	48000400 	.word	0x48000400

080023f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023f8:	e7fe      	b.n	80023f8 <NMI_Handler+0x4>

080023fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fa:	b480      	push	{r7}
 80023fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023fe:	e7fe      	b.n	80023fe <HardFault_Handler+0x4>

08002400 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002400:	b480      	push	{r7}
 8002402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002404:	e7fe      	b.n	8002404 <MemManage_Handler+0x4>

08002406 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800240a:	e7fe      	b.n	800240a <BusFault_Handler+0x4>

0800240c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002410:	e7fe      	b.n	8002410 <UsageFault_Handler+0x4>

08002412 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002416:	bf00      	nop
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002424:	bf00      	nop
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr

0800243c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002440:	f006 fb22 	bl	8008a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002444:	bf00      	nop
 8002446:	bd80      	pop	{r7, pc}

08002448 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800244c:	2020      	movs	r0, #32
 800244e:	f006 ffbd 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002452:	2040      	movs	r0, #64	; 0x40
 8002454:	f006 ffba 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002458:	2080      	movs	r0, #128	; 0x80
 800245a:	f006 ffb7 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 800245e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002462:	f006 ffb3 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
	...

0800246c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002470:	4802      	ldr	r0, [pc, #8]	; (800247c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002472:	f009 fcab 	bl	800bdcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002476:	bf00      	nop
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000ca4 	.word	0x20000ca4

08002480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002484:	4802      	ldr	r0, [pc, #8]	; (8002490 <USART1_IRQHandler+0x10>)
 8002486:	f00a f847 	bl	800c518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800248a:	bf00      	nop
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	20000b94 	.word	0x20000b94

08002494 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002498:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800249c:	f006 ff96 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024a0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024a4:	f006 ff92 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80024a8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80024ac:	f006 ff8e 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80024b0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80024b4:	f006 ff8a 	bl	80093cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <UART4_IRQHandler+0x10>)
 80024c2:	f00a f829 	bl	800c518 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000c20 	.word	0x20000c20

080024d0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80024da:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <ITM_SendChar+0x48>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a0e      	ldr	r2, [pc, #56]	; (8002518 <ITM_SendChar+0x48>)
 80024e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024e4:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80024e6:	4b0d      	ldr	r3, [pc, #52]	; (800251c <ITM_SendChar+0x4c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a0c      	ldr	r2, [pc, #48]	; (800251c <ITM_SendChar+0x4c>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80024f2:	bf00      	nop
 80024f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f8      	beq.n	80024f4 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8002502:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	6013      	str	r3, [r2, #0]
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop
 8002518:	e000edfc 	.word	0xe000edfc
 800251c:	e0000e00 	.word	0xe0000e00

08002520 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
	return 1;
 8002524:	2301      	movs	r3, #1
}
 8002526:	4618      	mov	r0, r3
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <_kill>:

int _kill(int pid, int sig)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800253a:	f00b fabd 	bl	800dab8 <__errno>
 800253e:	4603      	mov	r3, r0
 8002540:	2216      	movs	r2, #22
 8002542:	601a      	str	r2, [r3, #0]
	return -1;
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <_exit>:

void _exit (int status)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002558:	f04f 31ff 	mov.w	r1, #4294967295
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ffe7 	bl	8002530 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002562:	e7fe      	b.n	8002562 <_exit+0x12>

08002564 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
 8002574:	e00a      	b.n	800258c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002576:	f3af 8000 	nop.w
 800257a:	4601      	mov	r1, r0
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	60ba      	str	r2, [r7, #8]
 8002582:	b2ca      	uxtb	r2, r1
 8002584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3301      	adds	r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697a      	ldr	r2, [r7, #20]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	429a      	cmp	r2, r3
 8002592:	dbf0      	blt.n	8002576 <_read+0x12>
	}

return len;
 8002594:	687b      	ldr	r3, [r7, #4]
}
 8002596:	4618      	mov	r0, r3
 8002598:	3718      	adds	r7, #24
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}

0800259e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	b086      	sub	sp, #24
 80025a2:	af00      	add	r7, sp, #0
 80025a4:	60f8      	str	r0, [r7, #12]
 80025a6:	60b9      	str	r1, [r7, #8]
 80025a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e009      	b.n	80025c4 <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	60ba      	str	r2, [r7, #8]
 80025b6:	781b      	ldrb	r3, [r3, #0]
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7ff ff89 	bl	80024d0 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	3301      	adds	r3, #1
 80025c2:	617b      	str	r3, [r7, #20]
 80025c4:	697a      	ldr	r2, [r7, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	429a      	cmp	r2, r3
 80025ca:	dbf1      	blt.n	80025b0 <_write+0x12>
	}
	return len;
 80025cc:	687b      	ldr	r3, [r7, #4]
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <_close>:

int _close(int file)
{
 80025d6:	b480      	push	{r7}
 80025d8:	b083      	sub	sp, #12
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
	return -1;
 80025de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr

080025ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025ee:	b480      	push	{r7}
 80025f0:	b083      	sub	sp, #12
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025fe:	605a      	str	r2, [r3, #4]
	return 0;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_isatty>:

int _isatty(int file)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
	return 1;
 8002616:	2301      	movs	r3, #1
}
 8002618:	4618      	mov	r0, r3
 800261a:	370c      	adds	r7, #12
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr

08002624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
	return 0;
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
	...

08002640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b086      	sub	sp, #24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002648:	4a14      	ldr	r2, [pc, #80]	; (800269c <_sbrk+0x5c>)
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <_sbrk+0x60>)
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002654:	4b13      	ldr	r3, [pc, #76]	; (80026a4 <_sbrk+0x64>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d102      	bne.n	8002662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800265c:	4b11      	ldr	r3, [pc, #68]	; (80026a4 <_sbrk+0x64>)
 800265e:	4a12      	ldr	r2, [pc, #72]	; (80026a8 <_sbrk+0x68>)
 8002660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <_sbrk+0x64>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4413      	add	r3, r2
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	429a      	cmp	r2, r3
 800266e:	d207      	bcs.n	8002680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002670:	f00b fa22 	bl	800dab8 <__errno>
 8002674:	4603      	mov	r3, r0
 8002676:	220c      	movs	r2, #12
 8002678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800267a:	f04f 33ff 	mov.w	r3, #4294967295
 800267e:	e009      	b.n	8002694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <_sbrk+0x64>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002686:	4b07      	ldr	r3, [pc, #28]	; (80026a4 <_sbrk+0x64>)
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4413      	add	r3, r2
 800268e:	4a05      	ldr	r2, [pc, #20]	; (80026a4 <_sbrk+0x64>)
 8002690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002692:	68fb      	ldr	r3, [r7, #12]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3718      	adds	r7, #24
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	20018000 	.word	0x20018000
 80026a0:	00000400 	.word	0x00000400
 80026a4:	20000ac4 	.word	0x20000ac4
 80026a8:	20000e20 	.word	0x20000e20

080026ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80026b0:	4b06      	ldr	r3, [pc, #24]	; (80026cc <SystemInit+0x20>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	4a05      	ldr	r2, [pc, #20]	; (80026cc <SystemInit+0x20>)
 80026b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80026c0:	bf00      	nop
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	e000ed00 	.word	0xe000ed00

080026d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80026d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002708 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80026d4:	f7ff ffea 	bl	80026ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026d8:	480c      	ldr	r0, [pc, #48]	; (800270c <LoopForever+0x6>)
  ldr r1, =_edata
 80026da:	490d      	ldr	r1, [pc, #52]	; (8002710 <LoopForever+0xa>)
  ldr r2, =_sidata
 80026dc:	4a0d      	ldr	r2, [pc, #52]	; (8002714 <LoopForever+0xe>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e0:	e002      	b.n	80026e8 <LoopCopyDataInit>

080026e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026e6:	3304      	adds	r3, #4

080026e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026ec:	d3f9      	bcc.n	80026e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026ee:	4a0a      	ldr	r2, [pc, #40]	; (8002718 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026f0:	4c0a      	ldr	r4, [pc, #40]	; (800271c <LoopForever+0x16>)
  movs r3, #0
 80026f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f4:	e001      	b.n	80026fa <LoopFillZerobss>

080026f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026f8:	3204      	adds	r2, #4

080026fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026fc:	d3fb      	bcc.n	80026f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026fe:	f00b f9e1 	bl	800dac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002702:	f7fe ffef 	bl	80016e4 <main>

08002706 <LoopForever>:

LoopForever:
    b LoopForever
 8002706:	e7fe      	b.n	8002706 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002708:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800270c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002710:	20000820 	.word	0x20000820
  ldr r2, =_sidata
 8002714:	080115d4 	.word	0x080115d4
  ldr r2, =_sbss
 8002718:	20000820 	.word	0x20000820
  ldr r4, =_ebss
 800271c:	20000e20 	.word	0x20000e20

08002720 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002720:	e7fe      	b.n	8002720 <ADC1_2_IRQHandler>
	...

08002724 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b08a      	sub	sp, #40	; 0x28
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800272c:	4b27      	ldr	r3, [pc, #156]	; (80027cc <I2Cx_MspInit+0xa8>)
 800272e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002730:	4a26      	ldr	r2, [pc, #152]	; (80027cc <I2Cx_MspInit+0xa8>)
 8002732:	f043 0302 	orr.w	r3, r3, #2
 8002736:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002738:	4b24      	ldr	r3, [pc, #144]	; (80027cc <I2Cx_MspInit+0xa8>)
 800273a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273c:	f003 0302 	and.w	r3, r3, #2
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 8002744:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002748:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800274a:	2312      	movs	r3, #18
 800274c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800274e:	2301      	movs	r3, #1
 8002750:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002752:	2303      	movs	r3, #3
 8002754:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8002756:	2304      	movs	r3, #4
 8002758:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	4619      	mov	r1, r3
 8002760:	481b      	ldr	r0, [pc, #108]	; (80027d0 <I2Cx_MspInit+0xac>)
 8002762:	f006 fb65 	bl	8008e30 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002766:	f107 0314 	add.w	r3, r7, #20
 800276a:	4619      	mov	r1, r3
 800276c:	4818      	ldr	r0, [pc, #96]	; (80027d0 <I2Cx_MspInit+0xac>)
 800276e:	f006 fb5f 	bl	8008e30 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8002772:	4b16      	ldr	r3, [pc, #88]	; (80027cc <I2Cx_MspInit+0xa8>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	4a15      	ldr	r2, [pc, #84]	; (80027cc <I2Cx_MspInit+0xa8>)
 8002778:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800277c:	6593      	str	r3, [r2, #88]	; 0x58
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <I2Cx_MspInit+0xa8>)
 8002780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <I2Cx_MspInit+0xa8>)
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	4a0f      	ldr	r2, [pc, #60]	; (80027cc <I2Cx_MspInit+0xa8>)
 8002790:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002794:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8002796:	4b0d      	ldr	r3, [pc, #52]	; (80027cc <I2Cx_MspInit+0xa8>)
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <I2Cx_MspInit+0xa8>)
 800279c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80027a0:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80027a2:	2200      	movs	r2, #0
 80027a4:	210f      	movs	r1, #15
 80027a6:	2021      	movs	r0, #33	; 0x21
 80027a8:	f006 fa8d 	bl	8008cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 80027ac:	2021      	movs	r0, #33	; 0x21
 80027ae:	f006 faa6 	bl	8008cfe <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	210f      	movs	r1, #15
 80027b6:	2022      	movs	r0, #34	; 0x22
 80027b8:	f006 fa85 	bl	8008cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 80027bc:	2022      	movs	r0, #34	; 0x22
 80027be:	f006 fa9e 	bl	8008cfe <HAL_NVIC_EnableIRQ>
}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	48000400 	.word	0x48000400

080027d4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a12      	ldr	r2, [pc, #72]	; (8002828 <I2Cx_Init+0x54>)
 80027e0:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4a11      	ldr	r2, [pc, #68]	; (800282c <I2Cx_Init+0x58>)
 80027e6:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff ff89 	bl	8002724 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f006 fdfd 	bl	8009412 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8002818:	2100      	movs	r1, #0
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f007 fdf0 	bl	800a400 <HAL_I2CEx_ConfigAnalogFilter>
}
 8002820:	bf00      	nop
 8002822:	3708      	adds	r7, #8
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40005800 	.word	0x40005800
 800282c:	00702681 	.word	0x00702681

08002830 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af04      	add	r7, sp, #16
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	4608      	mov	r0, r1
 800283a:	4611      	mov	r1, r2
 800283c:	461a      	mov	r2, r3
 800283e:	4603      	mov	r3, r0
 8002840:	72fb      	strb	r3, [r7, #11]
 8002842:	460b      	mov	r3, r1
 8002844:	813b      	strh	r3, [r7, #8]
 8002846:	4613      	mov	r3, r2
 8002848:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800284e:	7afb      	ldrb	r3, [r7, #11]
 8002850:	b299      	uxth	r1, r3
 8002852:	88f8      	ldrh	r0, [r7, #6]
 8002854:	893a      	ldrh	r2, [r7, #8]
 8002856:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285a:	9302      	str	r3, [sp, #8]
 800285c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800285e:	9301      	str	r3, [sp, #4]
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4603      	mov	r3, r0
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f007 f990 	bl	8009b8c <HAL_I2C_Mem_Read>
 800286c:	4603      	mov	r3, r0
 800286e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002870:	7dfb      	ldrb	r3, [r7, #23]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d004      	beq.n	8002880 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002876:	7afb      	ldrb	r3, [r7, #11]
 8002878:	4619      	mov	r1, r3
 800287a:	68f8      	ldr	r0, [r7, #12]
 800287c:	f000 f832 	bl	80028e4 <I2Cx_Error>
  }
  return status;
 8002880:	7dfb      	ldrb	r3, [r7, #23]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3718      	adds	r7, #24
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}

0800288a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800288a:	b580      	push	{r7, lr}
 800288c:	b08a      	sub	sp, #40	; 0x28
 800288e:	af04      	add	r7, sp, #16
 8002890:	60f8      	str	r0, [r7, #12]
 8002892:	4608      	mov	r0, r1
 8002894:	4611      	mov	r1, r2
 8002896:	461a      	mov	r2, r3
 8002898:	4603      	mov	r3, r0
 800289a:	72fb      	strb	r3, [r7, #11]
 800289c:	460b      	mov	r3, r1
 800289e:	813b      	strh	r3, [r7, #8]
 80028a0:	4613      	mov	r3, r2
 80028a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80028a4:	2300      	movs	r3, #0
 80028a6:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80028a8:	7afb      	ldrb	r3, [r7, #11]
 80028aa:	b299      	uxth	r1, r3
 80028ac:	88f8      	ldrh	r0, [r7, #6]
 80028ae:	893a      	ldrh	r2, [r7, #8]
 80028b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028b4:	9302      	str	r3, [sp, #8]
 80028b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4603      	mov	r3, r0
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f007 f84f 	bl	8009964 <HAL_I2C_Mem_Write>
 80028c6:	4603      	mov	r3, r0
 80028c8:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80028ca:	7dfb      	ldrb	r3, [r7, #23]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d004      	beq.n	80028da <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80028d0:	7afb      	ldrb	r3, [r7, #11]
 80028d2:	4619      	mov	r1, r3
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f805 	bl	80028e4 <I2Cx_Error>
  }
  return status;
 80028da:	7dfb      	ldrb	r3, [r7, #23]
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3718      	adds	r7, #24
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	460b      	mov	r3, r1
 80028ee:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f006 fe1d 	bl	8009530 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff ff6c 	bl	80027d4 <I2Cx_Init>
}
 80028fc:	bf00      	nop
 80028fe:	3708      	adds	r7, #8
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8002908:	4802      	ldr	r0, [pc, #8]	; (8002914 <SENSOR_IO_Init+0x10>)
 800290a:	f7ff ff63 	bl	80027d4 <I2Cx_Init>
}
 800290e:	bf00      	nop
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	20000d78 	.word	0x20000d78

08002918 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af02      	add	r7, sp, #8
 800291e:	4603      	mov	r3, r0
 8002920:	71fb      	strb	r3, [r7, #7]
 8002922:	460b      	mov	r3, r1
 8002924:	71bb      	strb	r3, [r7, #6]
 8002926:	4613      	mov	r3, r2
 8002928:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800292a:	79bb      	ldrb	r3, [r7, #6]
 800292c:	b29a      	uxth	r2, r3
 800292e:	79f9      	ldrb	r1, [r7, #7]
 8002930:	2301      	movs	r3, #1
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	1d7b      	adds	r3, r7, #5
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	2301      	movs	r3, #1
 800293a:	4803      	ldr	r0, [pc, #12]	; (8002948 <SENSOR_IO_Write+0x30>)
 800293c:	f7ff ffa5 	bl	800288a <I2Cx_WriteMultiple>
}
 8002940:	bf00      	nop
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	20000d78 	.word	0x20000d78

0800294c <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af02      	add	r7, sp, #8
 8002952:	4603      	mov	r3, r0
 8002954:	460a      	mov	r2, r1
 8002956:	71fb      	strb	r3, [r7, #7]
 8002958:	4613      	mov	r3, r2
 800295a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002960:	79bb      	ldrb	r3, [r7, #6]
 8002962:	b29a      	uxth	r2, r3
 8002964:	79f9      	ldrb	r1, [r7, #7]
 8002966:	2301      	movs	r3, #1
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	f107 030f 	add.w	r3, r7, #15
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2301      	movs	r3, #1
 8002972:	4804      	ldr	r0, [pc, #16]	; (8002984 <SENSOR_IO_Read+0x38>)
 8002974:	f7ff ff5c 	bl	8002830 <I2Cx_ReadMultiple>

  return read_value;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000d78 	.word	0x20000d78

08002988 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af02      	add	r7, sp, #8
 800298e:	603a      	str	r2, [r7, #0]
 8002990:	461a      	mov	r2, r3
 8002992:	4603      	mov	r3, r0
 8002994:	71fb      	strb	r3, [r7, #7]
 8002996:	460b      	mov	r3, r1
 8002998:	71bb      	strb	r3, [r7, #6]
 800299a:	4613      	mov	r3, r2
 800299c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800299e:	79bb      	ldrb	r3, [r7, #6]
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	79f9      	ldrb	r1, [r7, #7]
 80029a4:	88bb      	ldrh	r3, [r7, #4]
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	2301      	movs	r3, #1
 80029ae:	4804      	ldr	r0, [pc, #16]	; (80029c0 <SENSOR_IO_ReadMultiple+0x38>)
 80029b0:	f7ff ff3e 	bl	8002830 <I2Cx_ReadMultiple>
 80029b4:	4603      	mov	r3, r0
 80029b6:	b29b      	uxth	r3, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3708      	adds	r7, #8
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	20000d78 	.word	0x20000d78

080029c4 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80029ce:	2300      	movs	r3, #0
 80029d0:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80029d2:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <BSP_ACCELERO_Init+0x74>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	4798      	blx	r3
 80029d8:	4603      	mov	r3, r0
 80029da:	2b6a      	cmp	r3, #106	; 0x6a
 80029dc:	d002      	beq.n	80029e4 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	e024      	b.n	8002a2e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 80029e4:	4b15      	ldr	r3, [pc, #84]	; (8002a3c <BSP_ACCELERO_Init+0x78>)
 80029e6:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <BSP_ACCELERO_Init+0x74>)
 80029e8:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 80029ea:	2330      	movs	r3, #48	; 0x30
 80029ec:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 80029f2:	2300      	movs	r3, #0
 80029f4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80029f6:	2340      	movs	r3, #64	; 0x40
 80029f8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80029fa:	2300      	movs	r3, #0
 80029fc:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80029fe:	2300      	movs	r3, #0
 8002a00:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8002a02:	797a      	ldrb	r2, [r7, #5]
 8002a04:	7abb      	ldrb	r3, [r7, #10]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002a0c:	7a3b      	ldrb	r3, [r7, #8]
 8002a0e:	f043 0304 	orr.w	r3, r3, #4
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	021b      	lsls	r3, r3, #8
 8002a16:	b21a      	sxth	r2, r3
 8002a18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	b21b      	sxth	r3, r3
 8002a20:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <BSP_ACCELERO_Init+0x78>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	89ba      	ldrh	r2, [r7, #12]
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4798      	blx	r3
  }  

  return ret;
 8002a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3710      	adds	r7, #16
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200005e0 	.word	0x200005e0
 8002a3c:	20000ac8 	.word	0x20000ac8

08002a40 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8002a48:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d009      	beq.n	8002a64 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8002a50:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d004      	beq.n	8002a64 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	4798      	blx	r3
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000ac8 	.word	0x20000ac8

08002a70 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8002a7e:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <BSP_GYRO_Init+0x7c>)
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	4798      	blx	r3
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b6a      	cmp	r3, #106	; 0x6a
 8002a88:	d002      	beq.n	8002a90 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	73fb      	strb	r3, [r7, #15]
 8002a8e:	e028      	b.n	8002ae2 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 8002a90:	4b17      	ldr	r3, [pc, #92]	; (8002af0 <BSP_GYRO_Init+0x80>)
 8002a92:	4a16      	ldr	r2, [pc, #88]	; (8002aec <BSP_GYRO_Init+0x7c>)
 8002a94:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 8002a96:	2300      	movs	r3, #0
 8002a98:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 8002a9a:	2330      	movs	r3, #48	; 0x30
 8002a9c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8002aa6:	2340      	movs	r3, #64	; 0x40
 8002aa8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 8002aae:	230c      	movs	r3, #12
 8002ab0:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 8002ab2:	7aba      	ldrb	r2, [r7, #10]
 8002ab4:	797b      	ldrb	r3, [r7, #5]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8002abc:	7a3b      	ldrb	r3, [r7, #8]
 8002abe:	f043 0304 	orr.w	r3, r3, #4
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	021b      	lsls	r3, r3, #8
 8002ac6:	b21a      	sxth	r2, r3
 8002ac8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8002ad2:	4b07      	ldr	r3, [pc, #28]	; (8002af0 <BSP_GYRO_Init+0x80>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	89ba      	ldrh	r2, [r7, #12]
 8002ada:	4610      	mov	r0, r2
 8002adc:	4798      	blx	r3
    
    ret = GYRO_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3710      	adds	r7, #16
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	20000614 	.word	0x20000614
 8002af0:	20000acc 	.word	0x20000acc

08002af4 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <BSP_GYRO_GetXYZ+0x2c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d009      	beq.n	8002b18 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8002b04:	4b06      	ldr	r3, [pc, #24]	; (8002b20 <BSP_GYRO_GetXYZ+0x2c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d004      	beq.n	8002b18 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 8002b0e:	4b04      	ldr	r3, [pc, #16]	; (8002b20 <BSP_GYRO_GetXYZ+0x2c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	4798      	blx	r3
    }
  }
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000acc 	.word	0x20000acc

08002b24 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <BSP_HSENSOR_Init+0x38>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	20be      	movs	r0, #190	; 0xbe
 8002b30:	4798      	blx	r3
 8002b32:	4603      	mov	r3, r0
 8002b34:	2bbc      	cmp	r3, #188	; 0xbc
 8002b36:	d002      	beq.n	8002b3e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	e009      	b.n	8002b52 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 8002b3e:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <BSP_HSENSOR_Init+0x3c>)
 8002b40:	4a06      	ldr	r2, [pc, #24]	; (8002b5c <BSP_HSENSOR_Init+0x38>)
 8002b42:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8002b44:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <BSP_HSENSOR_Init+0x3c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	20be      	movs	r0, #190	; 0xbe
 8002b4c:	4798      	blx	r3
    ret = HSENSOR_OK;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002b52:	687b      	ldr	r3, [r7, #4]
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000584 	.word	0x20000584
 8002b60:	20000ad0 	.word	0x20000ad0

08002b64 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 8002b68:	4b04      	ldr	r3, [pc, #16]	; (8002b7c <BSP_HSENSOR_ReadHumidity+0x18>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	20be      	movs	r0, #190	; 0xbe
 8002b70:	4798      	blx	r3
 8002b72:	eef0 7a40 	vmov.f32	s15, s0
}
 8002b76:	eeb0 0a67 	vmov.f32	s0, s15
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	20000ad0 	.word	0x20000ad0

08002b80 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 8002b86:	2300      	movs	r3, #0
 8002b88:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 8002b8a:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <BSP_MAGNETO_Init+0x50>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	4798      	blx	r3
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b3d      	cmp	r3, #61	; 0x3d
 8002b94:	d002      	beq.n	8002b9c <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	71fb      	strb	r3, [r7, #7]
 8002b9a:	e013      	b.n	8002bc4 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 8002b9c:	4b0d      	ldr	r3, [pc, #52]	; (8002bd4 <BSP_MAGNETO_Init+0x54>)
 8002b9e:	4a0c      	ldr	r2, [pc, #48]	; (8002bd0 <BSP_MAGNETO_Init+0x50>)
 8002ba0:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 8002ba2:	2358      	movs	r3, #88	; 0x58
 8002ba4:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 8002bae:	2308      	movs	r3, #8
 8002bb0:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 8002bb6:	4b07      	ldr	r3, [pc, #28]	; (8002bd4 <BSP_MAGNETO_Init+0x54>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	463a      	mov	r2, r7
 8002bbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002bc2:	4798      	blx	r3
  } 

  return ret;  
 8002bc4:	79fb      	ldrb	r3, [r7, #7]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3708      	adds	r7, #8
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	200005a0 	.word	0x200005a0
 8002bd4:	20000ad4 	.word	0x20000ad4

08002bd8 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8002be0:	4b08      	ldr	r3, [pc, #32]	; (8002c04 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d009      	beq.n	8002bfc <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8002be8:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d004      	beq.n	8002bfc <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8002bf2:	4b04      	ldr	r3, [pc, #16]	; (8002c04 <BSP_MAGNETO_GetXYZ+0x2c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
    }
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	20000ad4 	.word	0x20000ad4

08002c08 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <BSP_PSENSOR_Init+0x38>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	20ba      	movs	r0, #186	; 0xba
 8002c14:	4798      	blx	r3
 8002c16:	4603      	mov	r3, r0
 8002c18:	2bb1      	cmp	r3, #177	; 0xb1
 8002c1a:	d002      	beq.n	8002c22 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	607b      	str	r3, [r7, #4]
 8002c20:	e009      	b.n	8002c36 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8002c22:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <BSP_PSENSOR_Init+0x3c>)
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <BSP_PSENSOR_Init+0x38>)
 8002c26:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <BSP_PSENSOR_Init+0x3c>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	20ba      	movs	r0, #186	; 0xba
 8002c30:	4798      	blx	r3
    ret = PSENSOR_OK;
 8002c32:	2300      	movs	r3, #0
 8002c34:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8002c36:	687b      	ldr	r3, [r7, #4]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3708      	adds	r7, #8
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	200005d4 	.word	0x200005d4
 8002c44:	20000ad8 	.word	0x20000ad8

08002c48 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8002c4c:	4b04      	ldr	r3, [pc, #16]	; (8002c60 <BSP_PSENSOR_ReadPressure+0x18>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	20ba      	movs	r0, #186	; 0xba
 8002c54:	4798      	blx	r3
 8002c56:	eef0 7a40 	vmov.f32	s15, s0
}
 8002c5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	20000ad8 	.word	0x20000ad8

08002c64 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8002c6e:	4b09      	ldr	r3, [pc, #36]	; (8002c94 <BSP_TSENSOR_Init+0x30>)
 8002c70:	4a09      	ldr	r2, [pc, #36]	; (8002c98 <BSP_TSENSOR_Init+0x34>)
 8002c72:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8002c74:	f7ff fe46 	bl	8002904 <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8002c78:	4b06      	ldr	r3, [pc, #24]	; (8002c94 <BSP_TSENSOR_Init+0x30>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2100      	movs	r1, #0
 8002c80:	20be      	movs	r0, #190	; 0xbe
 8002c82:	4798      	blx	r3

  ret = TSENSOR_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8002c88:	79fb      	ldrb	r3, [r7, #7]
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000adc 	.word	0x20000adc
 8002c98:	20000590 	.word	0x20000590

08002c9c <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8002ca0:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <BSP_TSENSOR_ReadTemp+0x18>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	20be      	movs	r0, #190	; 0xbe
 8002ca8:	4798      	blx	r3
 8002caa:	eef0 7a40 	vmov.f32	s15, s0
}
 8002cae:	eeb0 0a67 	vmov.f32	s0, s15
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20000adc 	.word	0x20000adc

08002cb8 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8002cc6:	6839      	ldr	r1, [r7, #0]
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f004 fdd5 	bl	8007878 <VL53L0X_get_device_info>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8002cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
 8002ce6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8002cec:	6839      	ldr	r1, [r7, #0]
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f001 fc53 	bl	800459a <VL53L0X_get_offset_calibration_data_micro_meter>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8002cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8002d04:	b5b0      	push	{r4, r5, r7, lr}
 8002d06:	b094      	sub	sp, #80	; 0x50
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8002d12:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d107      	bne.n	8002d2a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	2188      	movs	r1, #136	; 0x88
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f004 ff6a 	bl	8007bf8 <VL53L0X_WrByte>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002d38:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002d42:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a71      	ldr	r2, [pc, #452]	; (8002f10 <VL53L0X_DataInit+0x20c>)
 8002d4a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a70      	ldr	r2, [pc, #448]	; (8002f14 <VL53L0X_DataInit+0x210>)
 8002d52:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8002d5c:	f107 0308 	add.w	r3, r7, #8
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f000 fa5a 	bl	800321c <VL53L0X_GetDeviceParameters>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8002d6e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d112      	bne.n	8002d9c <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8002d76:	2300      	movs	r3, #0
 8002d78:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f103 0410 	add.w	r4, r3, #16
 8002d84:	f107 0508 	add.w	r5, r7, #8
 8002d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d8e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2264      	movs	r2, #100	; 0x64
 8002da0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8002daa:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002db4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002dbe:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002dca:	2300      	movs	r3, #0
 8002dcc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dce:	e014      	b.n	8002dfa <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8002dd0:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d114      	bne.n	8002e02 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8002dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 fd67 	bl	80038b4 <VL53L0X_SetLimitCheckEnable>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	3301      	adds	r3, #1
 8002df8:	64bb      	str	r3, [r7, #72]	; 0x48
 8002dfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dfc:	2b05      	cmp	r3, #5
 8002dfe:	dde7      	ble.n	8002dd0 <VL53L0X_DataInit+0xcc>
 8002e00:	e000      	b.n	8002e04 <VL53L0X_DataInit+0x100>
		else
			break;
 8002e02:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8002e04:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	2102      	movs	r1, #2
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fd4f 	bl	80038b4 <VL53L0X_SetLimitCheckEnable>
 8002e16:	4603      	mov	r3, r0
 8002e18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002e1c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d107      	bne.n	8002e34 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e24:	2200      	movs	r2, #0
 8002e26:	2103      	movs	r1, #3
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 fd43 	bl	80038b4 <VL53L0X_SetLimitCheckEnable>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002e34:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2104      	movs	r1, #4
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fd37 	bl	80038b4 <VL53L0X_SetLimitCheckEnable>
 8002e46:	4603      	mov	r3, r0
 8002e48:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8002e4c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d107      	bne.n	8002e64 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8002e54:	2200      	movs	r2, #0
 8002e56:	2105      	movs	r1, #5
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f000 fd2b 	bl	80038b4 <VL53L0X_SetLimitCheckEnable>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8002e64:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d108      	bne.n	8002e7e <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002e6c:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8002e70:	2100      	movs	r1, #0
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fdce 	bl	8003a14 <VL53L0X_SetLimitCheckValue>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8002e7e:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d108      	bne.n	8002e98 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002e86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 fdc1 	bl	8003a14 <VL53L0X_SetLimitCheckValue>
 8002e92:	4603      	mov	r3, r0
 8002e94:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002e98:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002ea0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8002ea4:	2102      	movs	r1, #2
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 fdb4 	bl	8003a14 <VL53L0X_SetLimitCheckValue>
 8002eac:	4603      	mov	r3, r0
 8002eae:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002eb2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d107      	bne.n	8002eca <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2103      	movs	r1, #3
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fda8 	bl	8003a14 <VL53L0X_SetLimitCheckValue>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8002eca:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	22ff      	movs	r2, #255	; 0xff
 8002ed6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8002eda:	22ff      	movs	r2, #255	; 0xff
 8002edc:	2101      	movs	r1, #1
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f004 fe8a 	bl	8007bf8 <VL53L0X_WrByte>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2201      	movs	r2, #1
 8002eee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8002ef2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d103      	bne.n	8002f02 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8002f02:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3750      	adds	r7, #80	; 0x50
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	00016b85 	.word	0x00016b85
 8002f14:	000970a4 	.word	0x000970a4

08002f18 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8002f18:	b5b0      	push	{r4, r5, r7, lr}
 8002f1a:	b09e      	sub	sp, #120	; 0x78
 8002f1c:	af02      	add	r7, sp, #8
 8002f1e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8002f20:	2300      	movs	r3, #0
 8002f22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8002f26:	f107 031c 	add.w	r3, r7, #28
 8002f2a:	2240      	movs	r2, #64	; 0x40
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f00a fdfa 	bl	800db28 <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8002f42:	2300      	movs	r3, #0
 8002f44:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8002f46:	2300      	movs	r3, #0
 8002f48:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8002f54:	2101      	movs	r1, #1
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f002 fa72 	bl	8005440 <VL53L0X_get_info_from_device>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8002f68:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8002f70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8002f74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d80d      	bhi.n	8002f98 <VL53L0X_StaticInit+0x80>
 8002f7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d102      	bne.n	8002f8a <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8002f84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f86:	2b20      	cmp	r3, #32
 8002f88:	d806      	bhi.n	8002f98 <VL53L0X_StaticInit+0x80>
 8002f8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10e      	bne.n	8002fb0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8002f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f94:	2b0c      	cmp	r3, #12
 8002f96:	d90b      	bls.n	8002fb0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8002f98:	f107 0218 	add.w	r2, r7, #24
 8002f9c:	f107 0314 	add.w	r3, r7, #20
 8002fa0:	4619      	mov	r1, r3
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f001 fcf4 	bl	8004990 <VL53L0X_perform_ref_spad_management>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002fae:	e009      	b.n	8002fc4 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8002fb0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f001 fef5 	bl	8004da8 <VL53L0X_set_reference_spads>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8002fc4:	4b94      	ldr	r3, [pc, #592]	; (8003218 <VL53L0X_StaticInit+0x300>)
 8002fc6:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8002fc8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10f      	bne.n	8002ff0 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8002fd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8002fda:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d104      	bne.n	8002fec <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002fe8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fea:	e001      	b.n	8002ff0 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8002fec:	4b8a      	ldr	r3, [pc, #552]	; (8003218 <VL53L0X_StaticInit+0x300>)
 8002fee:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8002ff0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d106      	bne.n	8003006 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8002ff8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f003 fdca 	bl	8006b94 <VL53L0X_load_tuning_settings>
 8003000:	4603      	mov	r3, r0
 8003002:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8003006:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 800300e:	2300      	movs	r3, #0
 8003010:	9300      	str	r3, [sp, #0]
 8003012:	2304      	movs	r3, #4
 8003014:	2200      	movs	r2, #0
 8003016:	2100      	movs	r1, #0
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f001 f8ed 	bl	80041f8 <VL53L0X_SetGpioConfig>
 800301e:	4603      	mov	r3, r0
 8003020:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003024:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003028:	2b00      	cmp	r3, #0
 800302a:	d121      	bne.n	8003070 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800302c:	2201      	movs	r2, #1
 800302e:	21ff      	movs	r1, #255	; 0xff
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f004 fde1 	bl	8007bf8 <VL53L0X_WrByte>
 8003036:	4603      	mov	r3, r0
 8003038:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 800303c:	f107 031a 	add.w	r3, r7, #26
 8003040:	461a      	mov	r2, r3
 8003042:	2184      	movs	r1, #132	; 0x84
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f004 fd63 	bl	8007b10 <VL53L0X_RdWord>
 800304a:	4603      	mov	r3, r0
 800304c:	461a      	mov	r2, r3
 800304e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003052:	4313      	orrs	r3, r2
 8003054:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003058:	2200      	movs	r2, #0
 800305a:	21ff      	movs	r1, #255	; 0xff
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f004 fdcb 	bl	8007bf8 <VL53L0X_WrByte>
 8003062:	4603      	mov	r3, r0
 8003064:	461a      	mov	r2, r3
 8003066:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800306a:	4313      	orrs	r3, r2
 800306c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003070:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003074:	2b00      	cmp	r3, #0
 8003076:	d105      	bne.n	8003084 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8003078:	8b7b      	ldrh	r3, [r7, #26]
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	461a      	mov	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8003084:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003088:	2b00      	cmp	r3, #0
 800308a:	d108      	bne.n	800309e <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	4619      	mov	r1, r3
 8003092:	6878      	ldr	r0, [r7, #4]
 8003094:	f000 f8c2 	bl	800321c <VL53L0X_GetDeviceParameters>
 8003098:	4603      	mov	r3, r0
 800309a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 800309e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d110      	bne.n	80030c8 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 80030a6:	f107 0319 	add.w	r3, r7, #25
 80030aa:	4619      	mov	r1, r3
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f984 	bl	80033ba <VL53L0X_GetFractionEnable>
 80030b2:	4603      	mov	r3, r0
 80030b4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 80030b8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d103      	bne.n	80030c8 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 80030c0:	7e7a      	ldrb	r2, [r7, #25]
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 80030c8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d10e      	bne.n	80030ee <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	f103 0410 	add.w	r4, r3, #16
 80030d6:	f107 051c 	add.w	r5, r7, #28
 80030da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80030e6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80030ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 80030ee:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d111      	bne.n	800311a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 80030f6:	f107 0319 	add.w	r3, r7, #25
 80030fa:	461a      	mov	r2, r3
 80030fc:	2101      	movs	r1, #1
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f004 fc7f 	bl	8007a02 <VL53L0X_RdByte>
 8003104:	4603      	mov	r3, r0
 8003106:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 800310a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800310e:	2b00      	cmp	r3, #0
 8003110:	d103      	bne.n	800311a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8003112:	7e7a      	ldrb	r2, [r7, #25]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 800311a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800311e:	2b00      	cmp	r3, #0
 8003120:	d107      	bne.n	8003132 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8003122:	2200      	movs	r2, #0
 8003124:	2100      	movs	r1, #0
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f9bc 	bl	80034a4 <VL53L0X_SetSequenceStepEnable>
 800312c:	4603      	mov	r3, r0
 800312e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8003132:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8003136:	2b00      	cmp	r3, #0
 8003138:	d107      	bne.n	800314a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 800313a:	2200      	movs	r2, #0
 800313c:	2102      	movs	r1, #2
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 f9b0 	bl	80034a4 <VL53L0X_SetSequenceStepEnable>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 800314a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800314e:	2b00      	cmp	r3, #0
 8003150:	d103      	bne.n	800315a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2203      	movs	r2, #3
 8003156:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 800315a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8003162:	f107 0313 	add.w	r3, r7, #19
 8003166:	461a      	mov	r2, r3
 8003168:	2100      	movs	r1, #0
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f982 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003176:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800317a:	2b00      	cmp	r3, #0
 800317c:	d103      	bne.n	8003186 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800317e:	7cfa      	ldrb	r2, [r7, #19]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8003186:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 800318e:	f107 0313 	add.w	r3, r7, #19
 8003192:	461a      	mov	r2, r3
 8003194:	2101      	movs	r1, #1
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f96c 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80031a2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d103      	bne.n	80031b2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031aa:	7cfa      	ldrb	r2, [r7, #19]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80031b2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d109      	bne.n	80031ce <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 80031ba:	f107 030c 	add.w	r3, r7, #12
 80031be:	461a      	mov	r2, r3
 80031c0:	2103      	movs	r1, #3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 faba 	bl	800373c <VL53L0X_GetSequenceStepTimeout>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80031ce:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d103      	bne.n	80031de <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 80031d6:	68fa      	ldr	r2, [r7, #12]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 80031de:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d109      	bne.n	80031fa <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 80031e6:	f107 030c 	add.w	r3, r7, #12
 80031ea:	461a      	mov	r2, r3
 80031ec:	2104      	movs	r1, #4
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f000 faa4 	bl	800373c <VL53L0X_GetSequenceStepTimeout>
 80031f4:	4603      	mov	r3, r0
 80031f6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80031fa:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d103      	bne.n	800320a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800320a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800320e:	4618      	mov	r0, r3
 8003210:	3770      	adds	r7, #112	; 0x70
 8003212:	46bd      	mov	sp, r7
 8003214:	bdb0      	pop	{r4, r5, r7, pc}
 8003216:	bf00      	nop
 8003218:	200002c8 	.word	0x200002c8

0800321c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003226:	2300      	movs	r3, #0
 8003228:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	4619      	mov	r1, r3
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f8b0 	bl	8003394 <VL53L0X_GetDeviceMode>
 8003234:	4603      	mov	r3, r0
 8003236:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8003238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	3308      	adds	r3, #8
 8003244:	4619      	mov	r1, r3
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fab8 	bl	80037bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800324c:	4603      	mov	r3, r0
 800324e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8003250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d102      	bne.n	800325e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	2200      	movs	r2, #0
 800325c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d107      	bne.n	8003276 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	3310      	adds	r3, #16
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f000 faee 	bl	800384e <VL53L0X_GetXTalkCompensationRateMegaCps>
 8003272:	4603      	mov	r3, r0
 8003274:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d107      	bne.n	800328e <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	3314      	adds	r3, #20
 8003282:	4619      	mov	r1, r3
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff fd2a 	bl	8002cde <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 800328a:	4603      	mov	r3, r0
 800328c:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 800328e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d134      	bne.n	8003300 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8003296:	2300      	movs	r3, #0
 8003298:	60bb      	str	r3, [r7, #8]
 800329a:	e02a      	b.n	80032f2 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800329c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d12a      	bne.n	80032fa <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	b299      	uxth	r1, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	3308      	adds	r3, #8
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	4413      	add	r3, r2
 80032b2:	3304      	adds	r3, #4
 80032b4:	461a      	mov	r2, r3
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f000 fc0e 	bl	8003ad8 <VL53L0X_GetLimitCheckValue>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d117      	bne.n	80032fe <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	b299      	uxth	r1, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	3318      	adds	r3, #24
 80032d6:	683a      	ldr	r2, [r7, #0]
 80032d8:	4413      	add	r3, r2
 80032da:	461a      	mov	r2, r3
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f000 fb75 	bl	80039cc <VL53L0X_GetLimitCheckEnable>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	7bfb      	ldrb	r3, [r7, #15]
 80032e8:	4313      	orrs	r3, r2
 80032ea:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	3301      	adds	r3, #1
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b05      	cmp	r3, #5
 80032f6:	ddd1      	ble.n	800329c <VL53L0X_GetDeviceParameters+0x80>
 80032f8:	e002      	b.n	8003300 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 80032fa:	bf00      	nop
 80032fc:	e000      	b.n	8003300 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 80032fe:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d107      	bne.n	8003318 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	333c      	adds	r3, #60	; 0x3c
 800330c:	4619      	mov	r1, r3
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fc70 	bl	8003bf4 <VL53L0X_GetWrapAroundCheckEnable>
 8003314:	4603      	mov	r3, r0
 8003316:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8003318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d107      	bne.n	8003330 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f879 	bl	800341e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800332c:	4603      	mov	r3, r0
 800332e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003348:	2300      	movs	r3, #0
 800334a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800334c:	78fb      	ldrb	r3, [r7, #3]
 800334e:	2b15      	cmp	r3, #21
 8003350:	bf8c      	ite	hi
 8003352:	2201      	movhi	r2, #1
 8003354:	2200      	movls	r2, #0
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	2a00      	cmp	r2, #0
 800335a:	d10e      	bne.n	800337a <VL53L0X_SetDeviceMode+0x3e>
 800335c:	2201      	movs	r2, #1
 800335e:	409a      	lsls	r2, r3
 8003360:	4b0b      	ldr	r3, [pc, #44]	; (8003390 <VL53L0X_SetDeviceMode+0x54>)
 8003362:	4013      	ands	r3, r2
 8003364:	2b00      	cmp	r3, #0
 8003366:	bf14      	ite	ne
 8003368:	2301      	movne	r3, #1
 800336a:	2300      	moveq	r3, #0
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d003      	beq.n	800337a <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	741a      	strb	r2, [r3, #16]
		break;
 8003378:	e001      	b.n	800337e <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 800337a:	23f8      	movs	r3, #248	; 0xf8
 800337c:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	0030000b 	.word	0x0030000b

08003394 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800339e:	2300      	movs	r3, #0
 80033a0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	7c1a      	ldrb	r2, [r3, #16]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80033aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3714      	adds	r7, #20
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80033ba:	b580      	push	{r7, lr}
 80033bc:	b084      	sub	sp, #16
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	2109      	movs	r1, #9
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f004 fb18 	bl	8007a02 <VL53L0X_RdByte>
 80033d2:	4603      	mov	r3, r0
 80033d4:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80033d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80033ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003402:	2300      	movs	r3, #0
 8003404:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8003406:	6839      	ldr	r1, [r7, #0]
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f003 fa32 	bl	8006872 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800340e:	4603      	mov	r3, r0
 8003410:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8003412:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}

0800341e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
 8003426:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f003 faff 	bl	8006a32 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8003434:	4603      	mov	r3, r0
 8003436:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8003438:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3710      	adds	r7, #16
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	70fb      	strb	r3, [r7, #3]
 8003450:	4613      	mov	r3, r2
 8003452:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003454:	2300      	movs	r3, #0
 8003456:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8003458:	78ba      	ldrb	r2, [r7, #2]
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f002 ff47 	bl	80062f2 <VL53L0X_set_vcsel_pulse_period>
 8003464:	4603      	mov	r3, r0
 8003466:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003468:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3710      	adds	r7, #16
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	460b      	mov	r3, r1
 800347e:	607a      	str	r2, [r7, #4]
 8003480:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003482:	2300      	movs	r3, #0
 8003484:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	4619      	mov	r1, r3
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f003 f9b9 	bl	8006804 <VL53L0X_get_vcsel_pulse_period>
 8003492:	4603      	mov	r3, r0
 8003494:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 8003496:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
	...

080034a4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b086      	sub	sp, #24
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	70fb      	strb	r3, [r7, #3]
 80034b0:	4613      	mov	r3, r2
 80034b2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80034b4:	2300      	movs	r3, #0
 80034b6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80034bc:	2300      	movs	r3, #0
 80034be:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80034c0:	f107 030f 	add.w	r3, r7, #15
 80034c4:	461a      	mov	r2, r3
 80034c6:	2101      	movs	r1, #1
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f004 fa9a 	bl	8007a02 <VL53L0X_RdByte>
 80034ce:	4603      	mov	r3, r0
 80034d0:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
 80034d4:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 80034d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d15a      	bne.n	8003594 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 80034de:	78bb      	ldrb	r3, [r7, #2]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d12b      	bne.n	800353c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 80034e4:	78fb      	ldrb	r3, [r7, #3]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d825      	bhi.n	8003536 <VL53L0X_SetSequenceStepEnable+0x92>
 80034ea:	a201      	add	r2, pc, #4	; (adr r2, 80034f0 <VL53L0X_SetSequenceStepEnable+0x4c>)
 80034ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f0:	08003505 	.word	0x08003505
 80034f4:	0800350f 	.word	0x0800350f
 80034f8:	08003519 	.word	0x08003519
 80034fc:	08003523 	.word	0x08003523
 8003500:	0800352d 	.word	0x0800352d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8003504:	7dbb      	ldrb	r3, [r7, #22]
 8003506:	f043 0310 	orr.w	r3, r3, #16
 800350a:	75bb      	strb	r3, [r7, #22]
				break;
 800350c:	e043      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800350e:	7dbb      	ldrb	r3, [r7, #22]
 8003510:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8003514:	75bb      	strb	r3, [r7, #22]
				break;
 8003516:	e03e      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8003518:	7dbb      	ldrb	r3, [r7, #22]
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	75bb      	strb	r3, [r7, #22]
				break;
 8003520:	e039      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8003522:	7dbb      	ldrb	r3, [r7, #22]
 8003524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003528:	75bb      	strb	r3, [r7, #22]
				break;
 800352a:	e034      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800352c:	7dbb      	ldrb	r3, [r7, #22]
 800352e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003532:	75bb      	strb	r3, [r7, #22]
				break;
 8003534:	e02f      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003536:	23fc      	movs	r3, #252	; 0xfc
 8003538:	75fb      	strb	r3, [r7, #23]
 800353a:	e02c      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800353c:	78fb      	ldrb	r3, [r7, #3]
 800353e:	2b04      	cmp	r3, #4
 8003540:	d825      	bhi.n	800358e <VL53L0X_SetSequenceStepEnable+0xea>
 8003542:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	0800355d 	.word	0x0800355d
 800354c:	08003567 	.word	0x08003567
 8003550:	08003571 	.word	0x08003571
 8003554:	0800357b 	.word	0x0800357b
 8003558:	08003585 	.word	0x08003585
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800355c:	7dbb      	ldrb	r3, [r7, #22]
 800355e:	f023 0310 	bic.w	r3, r3, #16
 8003562:	75bb      	strb	r3, [r7, #22]
				break;
 8003564:	e017      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 8003566:	7dbb      	ldrb	r3, [r7, #22]
 8003568:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800356c:	75bb      	strb	r3, [r7, #22]
				break;
 800356e:	e012      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 8003570:	7dbb      	ldrb	r3, [r7, #22]
 8003572:	f023 0304 	bic.w	r3, r3, #4
 8003576:	75bb      	strb	r3, [r7, #22]
				break;
 8003578:	e00d      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 800357a:	7dbb      	ldrb	r3, [r7, #22]
 800357c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003580:	75bb      	strb	r3, [r7, #22]
				break;
 8003582:	e008      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 8003584:	7dbb      	ldrb	r3, [r7, #22]
 8003586:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800358a:	75bb      	strb	r3, [r7, #22]
				break;
 800358c:	e003      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800358e:	23fc      	movs	r3, #252	; 0xfc
 8003590:	75fb      	strb	r3, [r7, #23]
 8003592:	e000      	b.n	8003596 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 8003594:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 8003596:	7bfb      	ldrb	r3, [r7, #15]
 8003598:	7dba      	ldrb	r2, [r7, #22]
 800359a:	429a      	cmp	r2, r3
 800359c:	d01e      	beq.n	80035dc <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 800359e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d107      	bne.n	80035b6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80035a6:	7dbb      	ldrb	r3, [r7, #22]
 80035a8:	461a      	mov	r2, r3
 80035aa:	2101      	movs	r1, #1
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f004 fb23 	bl	8007bf8 <VL53L0X_WrByte>
 80035b2:	4603      	mov	r3, r0
 80035b4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80035b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d103      	bne.n	80035c6 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	7dba      	ldrb	r2, [r7, #22]
 80035c2:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 80035c6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d106      	bne.n	80035dc <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	695b      	ldr	r3, [r3, #20]
 80035d2:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80035d4:	6939      	ldr	r1, [r7, #16]
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ff0e 	bl	80033f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 80035dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3718      	adds	r7, #24
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b087      	sub	sp, #28
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	72fb      	strb	r3, [r7, #11]
 80035f6:	4613      	mov	r3, r2
 80035f8:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8003604:	7afb      	ldrb	r3, [r7, #11]
 8003606:	2b04      	cmp	r3, #4
 8003608:	d836      	bhi.n	8003678 <sequence_step_enabled+0x90>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <sequence_step_enabled+0x28>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003625 	.word	0x08003625
 8003614:	08003637 	.word	0x08003637
 8003618:	08003649 	.word	0x08003649
 800361c:	0800365b 	.word	0x0800365b
 8003620:	0800366d 	.word	0x0800366d
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8003624:	7abb      	ldrb	r3, [r7, #10]
 8003626:	111b      	asrs	r3, r3, #4
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f003 0301 	and.w	r3, r3, #1
 800362e:	b2da      	uxtb	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	701a      	strb	r2, [r3, #0]
		break;
 8003634:	e022      	b.n	800367c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8003636:	7abb      	ldrb	r3, [r7, #10]
 8003638:	10db      	asrs	r3, r3, #3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	b2da      	uxtb	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	701a      	strb	r2, [r3, #0]
		break;
 8003646:	e019      	b.n	800367c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8003648:	7abb      	ldrb	r3, [r7, #10]
 800364a:	109b      	asrs	r3, r3, #2
 800364c:	b2db      	uxtb	r3, r3
 800364e:	f003 0301 	and.w	r3, r3, #1
 8003652:	b2da      	uxtb	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	701a      	strb	r2, [r3, #0]
		break;
 8003658:	e010      	b.n	800367c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800365a:	7abb      	ldrb	r3, [r7, #10]
 800365c:	119b      	asrs	r3, r3, #6
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	b2da      	uxtb	r2, r3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	701a      	strb	r2, [r3, #0]
		break;
 800366a:	e007      	b.n	800367c <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 800366c:	7abb      	ldrb	r3, [r7, #10]
 800366e:	09db      	lsrs	r3, r3, #7
 8003670:	b2da      	uxtb	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	701a      	strb	r2, [r3, #0]
		break;
 8003676:	e001      	b.n	800367c <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003678:	23fc      	movs	r3, #252	; 0xfc
 800367a:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800367c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003680:	4618      	mov	r0, r3
 8003682:	371c      	adds	r7, #28
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003696:	2300      	movs	r3, #0
 8003698:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800369e:	f107 030e 	add.w	r3, r7, #14
 80036a2:	461a      	mov	r2, r3
 80036a4:	2101      	movs	r1, #1
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f004 f9ab 	bl	8007a02 <VL53L0X_RdByte>
 80036ac:	4603      	mov	r3, r0
 80036ae:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80036b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d107      	bne.n	80036c8 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80036b8:	7bba      	ldrb	r2, [r7, #14]
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	2100      	movs	r1, #0
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7ff ff92 	bl	80035e8 <sequence_step_enabled>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80036c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d108      	bne.n	80036e2 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 80036d0:	7bba      	ldrb	r2, [r7, #14]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	3302      	adds	r3, #2
 80036d6:	2101      	movs	r1, #1
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7ff ff85 	bl	80035e8 <sequence_step_enabled>
 80036de:	4603      	mov	r3, r0
 80036e0:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d108      	bne.n	80036fc <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 80036ea:	7bba      	ldrb	r2, [r7, #14]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	2102      	movs	r1, #2
 80036f2:	6878      	ldr	r0, [r7, #4]
 80036f4:	f7ff ff78 	bl	80035e8 <sequence_step_enabled>
 80036f8:	4603      	mov	r3, r0
 80036fa:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 80036fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d108      	bne.n	8003716 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8003704:	7bba      	ldrb	r2, [r7, #14]
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	3303      	adds	r3, #3
 800370a:	2103      	movs	r1, #3
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f7ff ff6b 	bl	80035e8 <sequence_step_enabled>
 8003712:	4603      	mov	r3, r0
 8003714:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d108      	bne.n	8003730 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800371e:	7bba      	ldrb	r2, [r7, #14]
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	3304      	adds	r3, #4
 8003724:	2104      	movs	r1, #4
 8003726:	6878      	ldr	r0, [r7, #4]
 8003728:	f7ff ff5e 	bl	80035e8 <sequence_step_enabled>
 800372c:	4603      	mov	r3, r0
 800372e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003730:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	460b      	mov	r3, r1
 8003746:	607a      	str	r2, [r7, #4]
 8003748:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800374a:	2300      	movs	r3, #0
 800374c:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800374e:	2300      	movs	r3, #0
 8003750:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8003752:	2300      	movs	r3, #0
 8003754:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8003756:	f107 0210 	add.w	r2, r7, #16
 800375a:	7afb      	ldrb	r3, [r7, #11]
 800375c:	4619      	mov	r1, r3
 800375e:	68f8      	ldr	r0, [r7, #12]
 8003760:	f002 fbf2 	bl	8005f48 <get_sequence_step_timeout>
 8003764:	4603      	mov	r3, r0
 8003766:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 8003768:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d11c      	bne.n	80037aa <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	4a11      	ldr	r2, [pc, #68]	; (80037b8 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 8003774:	fba2 2303 	umull	r2, r3, r2, r3
 8003778:	099b      	lsrs	r3, r3, #6
 800377a:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003784:	fb01 f303 	mul.w	r3, r1, r3
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4613      	mov	r3, r2
 8003794:	041b      	lsls	r3, r3, #16
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800379c:	4a06      	ldr	r2, [pc, #24]	; (80037b8 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 800379e:	fba2 2303 	umull	r2, r3, r2, r3
 80037a2:	099b      	lsrs	r3, r3, #6
 80037a4:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80037aa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3720      	adds	r7, #32
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	10624dd3 	.word	0x10624dd3

080037bc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80037c6:	2300      	movs	r3, #0
 80037c8:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 80037ca:	f107 030c 	add.w	r3, r7, #12
 80037ce:	461a      	mov	r2, r3
 80037d0:	21f8      	movs	r1, #248	; 0xf8
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f004 f99c 	bl	8007b10 <VL53L0X_RdWord>
 80037d8:	4603      	mov	r3, r0
 80037da:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 80037dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d108      	bne.n	80037f6 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 80037e4:	f107 0308 	add.w	r3, r7, #8
 80037e8:	461a      	mov	r2, r3
 80037ea:	2104      	movs	r1, #4
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f004 f9c7 	bl	8007b80 <VL53L0X_RdDWord>
 80037f2:	4603      	mov	r3, r0
 80037f4:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 80037f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10c      	bne.n	8003818 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 80037fe:	89bb      	ldrh	r3, [r7, #12]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d005      	beq.n	8003810 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	89ba      	ldrh	r2, [r7, #12]
 8003808:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003818:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	7f1b      	ldrb	r3, [r3, #28]
 8003836:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	7bba      	ldrb	r2, [r7, #14]
 800383c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800383e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr

0800384e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b086      	sub	sp, #24
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003858:	2300      	movs	r3, #0
 800385a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800385c:	f107 030e 	add.w	r3, r7, #14
 8003860:	461a      	mov	r2, r3
 8003862:	2120      	movs	r1, #32
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f004 f953 	bl	8007b10 <VL53L0X_RdWord>
 800386a:	4603      	mov	r3, r0
 800386c:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 800386e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d118      	bne.n	80038a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 8003876:	89fb      	ldrh	r3, [r7, #14]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d109      	bne.n	8003890 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a1b      	ldr	r3, [r3, #32]
 8003880:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	693a      	ldr	r2, [r7, #16]
 8003886:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	771a      	strb	r2, [r3, #28]
 800388e:	e00b      	b.n	80038a8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 8003890:	89fb      	ldrh	r3, [r7, #14]
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80038a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	3718      	adds	r7, #24
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	460b      	mov	r3, r1
 80038be:	807b      	strh	r3, [r7, #2]
 80038c0:	4613      	mov	r3, r2
 80038c2:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80038c4:	2300      	movs	r3, #0
 80038c6:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 80038cc:	2300      	movs	r3, #0
 80038ce:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d902      	bls.n	80038e0 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80038da:	23fc      	movs	r3, #252	; 0xfc
 80038dc:	75fb      	strb	r3, [r7, #23]
 80038de:	e05b      	b.n	8003998 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 80038e0:	787b      	ldrb	r3, [r7, #1]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 80038ee:	2301      	movs	r3, #1
 80038f0:	73bb      	strb	r3, [r7, #14]
 80038f2:	e00a      	b.n	800390a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80038f4:	887b      	ldrh	r3, [r7, #2]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	330c      	adds	r3, #12
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8003906:	2301      	movs	r3, #1
 8003908:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800390a:	887b      	ldrh	r3, [r7, #2]
 800390c:	2b05      	cmp	r3, #5
 800390e:	d841      	bhi.n	8003994 <VL53L0X_SetLimitCheckEnable+0xe0>
 8003910:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <VL53L0X_SetLimitCheckEnable+0x64>)
 8003912:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003916:	bf00      	nop
 8003918:	08003931 	.word	0x08003931
 800391c:	0800393b 	.word	0x0800393b
 8003920:	08003951 	.word	0x08003951
 8003924:	0800395b 	.word	0x0800395b
 8003928:	08003965 	.word	0x08003965
 800392c:	0800397d 	.word	0x0800397d

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8003938:	e02e      	b.n	8003998 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800393e:	b29b      	uxth	r3, r3
 8003940:	461a      	mov	r2, r3
 8003942:	2144      	movs	r1, #68	; 0x44
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f004 f97b 	bl	8007c40 <VL53L0X_WrWord>
 800394a:	4603      	mov	r3, r0
 800394c:	75fb      	strb	r3, [r7, #23]

			break;
 800394e:	e023      	b.n	8003998 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8003958:	e01e      	b.n	8003998 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 8003962:	e019      	b.n	8003998 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 8003964:	7bbb      	ldrb	r3, [r7, #14]
 8003966:	005b      	lsls	r3, r3, #1
 8003968:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 800396a:	7b7b      	ldrb	r3, [r7, #13]
 800396c:	22fe      	movs	r2, #254	; 0xfe
 800396e:	2160      	movs	r1, #96	; 0x60
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f004 f98f 	bl	8007c94 <VL53L0X_UpdateByte>
 8003976:	4603      	mov	r3, r0
 8003978:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 800397a:	e00d      	b.n	8003998 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 800397c:	7bbb      	ldrb	r3, [r7, #14]
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 8003982:	7b7b      	ldrb	r3, [r7, #13]
 8003984:	22ef      	movs	r2, #239	; 0xef
 8003986:	2160      	movs	r1, #96	; 0x60
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f004 f983 	bl	8007c94 <VL53L0X_UpdateByte>
 800398e:	4603      	mov	r3, r0
 8003990:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 8003992:	e001      	b.n	8003998 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003994:	23fc      	movs	r3, #252	; 0xfc
 8003996:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003998:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d10f      	bne.n	80039c0 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80039a0:	787b      	ldrb	r3, [r7, #1]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80039a6:	887b      	ldrh	r3, [r7, #2]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	4413      	add	r3, r2
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80039b2:	e005      	b.n	80039c0 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80039b4:	887b      	ldrh	r3, [r7, #2]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4413      	add	r3, r2
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80039c0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3718      	adds	r7, #24
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	460b      	mov	r3, r1
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80039da:	2300      	movs	r3, #0
 80039dc:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 80039de:	897b      	ldrh	r3, [r7, #10]
 80039e0:	2b05      	cmp	r3, #5
 80039e2:	d905      	bls.n	80039f0 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80039e4:	23fc      	movs	r3, #252	; 0xfc
 80039e6:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2200      	movs	r2, #0
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e008      	b.n	8003a02 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80039f0:	897b      	ldrh	r3, [r7, #10]
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	4413      	add	r3, r2
 80039f6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039fa:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	7dba      	ldrb	r2, [r7, #22]
 8003a00:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003a02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	371c      	adds	r7, #28
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b086      	sub	sp, #24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	607a      	str	r2, [r7, #4]
 8003a20:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003a22:	2300      	movs	r3, #0
 8003a24:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8003a26:	897b      	ldrh	r3, [r7, #10]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a30:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8003a32:	7dbb      	ldrb	r3, [r7, #22]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d107      	bne.n	8003a48 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a38:	897b      	ldrh	r3, [r7, #10]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	605a      	str	r2, [r3, #4]
 8003a46:	e040      	b.n	8003aca <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8003a48:	897b      	ldrh	r3, [r7, #10]
 8003a4a:	2b05      	cmp	r3, #5
 8003a4c:	d830      	bhi.n	8003ab0 <VL53L0X_SetLimitCheckValue+0x9c>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <VL53L0X_SetLimitCheckValue+0x40>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a6d 	.word	0x08003a6d
 8003a58:	08003a75 	.word	0x08003a75
 8003a5c:	08003a8b 	.word	0x08003a8b
 8003a60:	08003a93 	.word	0x08003a93
 8003a64:	08003a9b 	.word	0x08003a9b
 8003a68:	08003a9b 	.word	0x08003a9b

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 8003a72:	e01f      	b.n	8003ab4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2144      	movs	r1, #68	; 0x44
 8003a7e:	68f8      	ldr	r0, [r7, #12]
 8003a80:	f004 f8de 	bl	8007c40 <VL53L0X_WrWord>
 8003a84:	4603      	mov	r3, r0
 8003a86:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003a88:	e014      	b.n	8003ab4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 8003a90:	e010      	b.n	8003ab4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 8003a98:	e00c      	b.n	8003ab4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2164      	movs	r1, #100	; 0x64
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f004 f8cb 	bl	8007c40 <VL53L0X_WrWord>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 8003aae:	e001      	b.n	8003ab4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003ab0:	23fc      	movs	r3, #252	; 0xfc
 8003ab2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 8003ab4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d106      	bne.n	8003aca <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003abc:	897b      	ldrh	r3, [r7, #10]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	330c      	adds	r3, #12
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	4413      	add	r3, r2
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003aca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3718      	adds	r7, #24
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop

08003ad8 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 8003aea:	2300      	movs	r3, #0
 8003aec:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 8003aee:	897b      	ldrh	r3, [r7, #10]
 8003af0:	2b05      	cmp	r3, #5
 8003af2:	d847      	bhi.n	8003b84 <VL53L0X_GetLimitCheckValue+0xac>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <VL53L0X_GetLimitCheckValue+0x24>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b15 	.word	0x08003b15
 8003b00:	08003b21 	.word	0x08003b21
 8003b04:	08003b47 	.word	0x08003b47
 8003b08:	08003b53 	.word	0x08003b53
 8003b0c:	08003b5f 	.word	0x08003b5f
 8003b10:	08003b5f 	.word	0x08003b5f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	77bb      	strb	r3, [r7, #30]
		break;
 8003b1e:	e033      	b.n	8003b88 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003b20:	f107 0316 	add.w	r3, r7, #22
 8003b24:	461a      	mov	r2, r3
 8003b26:	2144      	movs	r1, #68	; 0x44
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f003 fff1 	bl	8007b10 <VL53L0X_RdWord>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003b32:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d102      	bne.n	8003b40 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003b3a:	8afb      	ldrh	r3, [r7, #22]
 8003b3c:	025b      	lsls	r3, r3, #9
 8003b3e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8003b40:	2301      	movs	r3, #1
 8003b42:	77bb      	strb	r3, [r7, #30]
		break;
 8003b44:	e020      	b.n	8003b88 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b4a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	77bb      	strb	r3, [r7, #30]
		break;
 8003b50:	e01a      	b.n	8003b88 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	77bb      	strb	r3, [r7, #30]
		break;
 8003b5c:	e014      	b.n	8003b88 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8003b5e:	f107 0316 	add.w	r3, r7, #22
 8003b62:	461a      	mov	r2, r3
 8003b64:	2164      	movs	r1, #100	; 0x64
 8003b66:	68f8      	ldr	r0, [r7, #12]
 8003b68:	f003 ffd2 	bl	8007b10 <VL53L0X_RdWord>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8003b70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 8003b78:	8afb      	ldrh	r3, [r7, #22]
 8003b7a:	025b      	lsls	r3, r3, #9
 8003b7c:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	77bb      	strb	r3, [r7, #30]
		break;
 8003b82:	e001      	b.n	8003b88 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8003b84:	23fc      	movs	r3, #252	; 0xfc
 8003b86:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8003b88:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d12a      	bne.n	8003be6 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 8003b90:	7fbb      	ldrb	r3, [r7, #30]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d124      	bne.n	8003be0 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d110      	bne.n	8003bbe <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 8003b9c:	897b      	ldrh	r3, [r7, #10]
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	330c      	adds	r3, #12
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	4413      	add	r3, r2
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003bb0:	897b      	ldrh	r3, [r7, #10]
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003bbc:	e013      	b.n	8003be6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	330c      	adds	r3, #12
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	4413      	add	r3, r2
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8003bd2:	897b      	ldrh	r3, [r7, #10]
 8003bd4:	68fa      	ldr	r2, [r7, #12]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	2201      	movs	r2, #1
 8003bda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003bde:	e002      	b.n	8003be6 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003be6:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8003bea:	4618      	mov	r0, r3
 8003bec:	3720      	adds	r7, #32
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}
 8003bf2:	bf00      	nop

08003bf4 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b084      	sub	sp, #16
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8003c02:	f107 030e 	add.w	r3, r7, #14
 8003c06:	461a      	mov	r2, r3
 8003c08:	2101      	movs	r1, #1
 8003c0a:	6878      	ldr	r0, [r7, #4]
 8003c0c:	f003 fef9 	bl	8007a02 <VL53L0X_RdByte>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8003c14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10e      	bne.n	8003c3a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8003c1c:	7bba      	ldrb	r2, [r7, #14]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8003c24:	7bbb      	ldrb	r3, [r7, #14]
 8003c26:	b25b      	sxtb	r3, r3
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	da03      	bge.n	8003c34 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	701a      	strb	r2, [r3, #0]
 8003c32:	e002      	b.n	8003c3a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2200      	movs	r2, #0
 8003c38:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8003c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d104      	bne.n	8003c4c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781a      	ldrb	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003c4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003c60:	2300      	movs	r3, #0
 8003c62:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003c64:	f107 030e 	add.w	r3, r7, #14
 8003c68:	4619      	mov	r1, r3
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f7ff fb92 	bl	8003394 <VL53L0X_GetDeviceMode>
 8003c70:	4603      	mov	r3, r0
 8003c72:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d107      	bne.n	8003c8c <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003c7c:	7bbb      	ldrb	r3, [r7, #14]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d104      	bne.n	8003c8c <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f898 	bl	8003db8 <VL53L0X_StartMeasurement>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8003c8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d104      	bne.n	8003c9e <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f001 fb09 	bl	80052ac <VL53L0X_measurement_poll_for_completion>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8003c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d106      	bne.n	8003cb4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8003ca6:	7bbb      	ldrb	r3, [r7, #14]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d103      	bne.n	8003cb4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2203      	movs	r2, #3
 8003cb0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8003cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3710      	adds	r7, #16
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b086      	sub	sp, #24
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	68b9      	ldr	r1, [r7, #8]
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f001 faab 	bl	8005232 <VL53L0X_perform_ref_calibration>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8003ce0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3718      	adds	r7, #24
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003d02:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8003d04:	7dbb      	ldrb	r3, [r7, #22]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d005      	beq.n	8003d16 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8003d0a:	7dbb      	ldrb	r3, [r7, #22]
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d002      	beq.n	8003d16 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8003d10:	7dbb      	ldrb	r3, [r7, #22]
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d147      	bne.n	8003da6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8003d16:	f107 030c 	add.w	r3, r7, #12
 8003d1a:	f107 0210 	add.w	r2, r7, #16
 8003d1e:	2101      	movs	r1, #1
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fb8d 	bl	8004440 <VL53L0X_GetInterruptThresholds>
 8003d26:	4603      	mov	r3, r0
 8003d28:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003d30:	d803      	bhi.n	8003d3a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8003d32:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8003d34:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8003d38:	d935      	bls.n	8003da6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8003d3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d131      	bne.n	8003da6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d006      	beq.n	8003d56 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8003d48:	491a      	ldr	r1, [pc, #104]	; (8003db4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f002 ff22 	bl	8006b94 <VL53L0X_load_tuning_settings>
 8003d50:	4603      	mov	r3, r0
 8003d52:	75fb      	strb	r3, [r7, #23]
 8003d54:	e027      	b.n	8003da6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8003d56:	2204      	movs	r2, #4
 8003d58:	21ff      	movs	r1, #255	; 0xff
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f003 ff4c 	bl	8007bf8 <VL53L0X_WrByte>
 8003d60:	4603      	mov	r3, r0
 8003d62:	461a      	mov	r2, r3
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2170      	movs	r1, #112	; 0x70
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f003 ff42 	bl	8007bf8 <VL53L0X_WrByte>
 8003d74:	4603      	mov	r3, r0
 8003d76:	461a      	mov	r2, r3
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8003d7e:	2200      	movs	r2, #0
 8003d80:	21ff      	movs	r1, #255	; 0xff
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f003 ff38 	bl	8007bf8 <VL53L0X_WrByte>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	7dfb      	ldrb	r3, [r7, #23]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8003d92:	2200      	movs	r2, #0
 8003d94:	2180      	movs	r1, #128	; 0x80
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f003 ff2e 	bl	8007bf8 <VL53L0X_WrByte>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	461a      	mov	r2, r3
 8003da0:	7dfb      	ldrb	r3, [r7, #23]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8003da6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3718      	adds	r7, #24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	200003bc 	.word	0x200003bc

08003db8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b086      	sub	sp, #24
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8003dc8:	f107 030e 	add.w	r3, r7, #14
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff fae0 	bl	8003394 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8003dd4:	7bbb      	ldrb	r3, [r7, #14]
 8003dd6:	2b03      	cmp	r3, #3
 8003dd8:	d052      	beq.n	8003e80 <VL53L0X_StartMeasurement+0xc8>
 8003dda:	2b03      	cmp	r3, #3
 8003ddc:	dc6a      	bgt.n	8003eb4 <VL53L0X_StartMeasurement+0xfc>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <VL53L0X_StartMeasurement+0x30>
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d032      	beq.n	8003e4c <VL53L0X_StartMeasurement+0x94>
 8003de6:	e065      	b.n	8003eb4 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8003de8:	2201      	movs	r2, #1
 8003dea:	2100      	movs	r1, #0
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f003 ff03 	bl	8007bf8 <VL53L0X_WrByte>
 8003df2:	4603      	mov	r3, r0
 8003df4:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8003df6:	7bfb      	ldrb	r3, [r7, #15]
 8003df8:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8003dfa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d15b      	bne.n	8003eba <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8003e02:	2300      	movs	r3, #0
 8003e04:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8003e0c:	f107 030d 	add.w	r3, r7, #13
 8003e10:	461a      	mov	r2, r3
 8003e12:	2100      	movs	r1, #0
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f003 fdf4 	bl	8007a02 <VL53L0X_RdByte>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3301      	adds	r3, #1
 8003e22:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8003e24:	7b7a      	ldrb	r2, [r7, #13]
 8003e26:	7bfb      	ldrb	r3, [r7, #15]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d106      	bne.n	8003e40 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 8003e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d102      	bne.n	8003e40 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	2bc7      	cmp	r3, #199	; 0xc7
 8003e3e:	d9e2      	bls.n	8003e06 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	2bc7      	cmp	r3, #199	; 0xc7
 8003e44:	d939      	bls.n	8003eba <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8003e46:	23f9      	movs	r3, #249	; 0xf9
 8003e48:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8003e4a:	e036      	b.n	8003eba <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d105      	bne.n	8003e60 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e54:	2101      	movs	r1, #1
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7ff ff48 	bl	8003cec <VL53L0X_CheckAndLoadInterruptSettings>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003e60:	2202      	movs	r2, #2
 8003e62:	2100      	movs	r1, #0
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f003 fec7 	bl	8007bf8 <VL53L0X_WrByte>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8003e6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d123      	bne.n	8003ebe <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2204      	movs	r2, #4
 8003e7a:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003e7e:	e01e      	b.n	8003ebe <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8003e80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d105      	bne.n	8003e94 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8003e88:	2101      	movs	r1, #1
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff ff2e 	bl	8003cec <VL53L0X_CheckAndLoadInterruptSettings>
 8003e90:	4603      	mov	r3, r0
 8003e92:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8003e94:	2204      	movs	r2, #4
 8003e96:	2100      	movs	r1, #0
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f003 fead 	bl	8007bf8 <VL53L0X_WrByte>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8003ea2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d10b      	bne.n	8003ec2 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2204      	movs	r2, #4
 8003eae:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8003eb2:	e006      	b.n	8003ec2 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8003eb4:	23f8      	movs	r3, #248	; 0xf8
 8003eb6:	75fb      	strb	r3, [r7, #23]
 8003eb8:	e004      	b.n	8003ec4 <VL53L0X_StartMeasurement+0x10c>
		break;
 8003eba:	bf00      	nop
 8003ebc:	e002      	b.n	8003ec4 <VL53L0X_StartMeasurement+0x10c>
		break;
 8003ebe:	bf00      	nop
 8003ec0:	e000      	b.n	8003ec4 <VL53L0X_StartMeasurement+0x10c>
		break;
 8003ec2:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8003ec4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8003ee4:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8003ee6:	7bbb      	ldrb	r3, [r7, #14]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d112      	bne.n	8003f12 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8003eec:	f107 0308 	add.w	r3, r7, #8
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 fb1a 	bl	800452c <VL53L0X_GetInterruptMaskStatus>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	d103      	bne.n	8003f0a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	2201      	movs	r2, #1
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	e01c      	b.n	8003f44 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	e018      	b.n	8003f44 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8003f12:	f107 030d 	add.w	r3, r7, #13
 8003f16:	461a      	mov	r2, r3
 8003f18:	2114      	movs	r1, #20
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f003 fd71 	bl	8007a02 <VL53L0X_RdByte>
 8003f20:	4603      	mov	r3, r0
 8003f22:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8003f24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d10b      	bne.n	8003f44 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8003f2c:	7b7b      	ldrb	r3, [r7, #13]
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e002      	b.n	8003f44 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	2200      	movs	r2, #0
 8003f42:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8003f44:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8003f50:	b5b0      	push	{r4, r5, r7, lr}
 8003f52:	b096      	sub	sp, #88	; 0x58
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8003f60:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003f64:	230c      	movs	r3, #12
 8003f66:	2114      	movs	r1, #20
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f003 fda5 	bl	8007ab8 <VL53L0X_ReadMulti>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8003f74:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	f040 80d1 	bne.w	8004120 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8003f8a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	021b      	lsls	r3, r3, #8
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8003fa6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8003faa:	b29b      	uxth	r3, r3
 8003fac:	021b      	lsls	r3, r3, #8
 8003fae:	b29a      	uxth	r2, r3
 8003fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	4413      	add	r3, r2
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	025b      	lsls	r3, r3, #9
 8003fbc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fc2:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8003fc4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	b29a      	uxth	r2, r3
 8003fce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8003fda:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003fde:	025b      	lsls	r3, r3, #9
 8003fe0:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8003fe6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	021b      	lsls	r3, r3, #8
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ff4:	b29b      	uxth	r3, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004002:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8004004:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004008:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8004012:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 800401a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 800401e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004020:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004024:	d046      	beq.n	80040b4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8004026:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004028:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800402c:	fb02 f303 	mul.w	r3, r2, r3
 8004030:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8004034:	4a57      	ldr	r2, [pc, #348]	; (8004194 <VL53L0X_GetRangingMeasurementData+0x244>)
 8004036:	fb82 1203 	smull	r1, r2, r2, r3
 800403a:	1192      	asrs	r2, r2, #6
 800403c:	17db      	asrs	r3, r3, #31
 800403e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8004040:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a1b      	ldr	r3, [r3, #32]
 8004048:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	7f1b      	ldrb	r3, [r3, #28]
 800404e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8004052:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004056:	2b00      	cmp	r3, #0
 8004058:	d02c      	beq.n	80040b4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 800405a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800405c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8004060:	fb02 f303 	mul.w	r3, r2, r3
 8004064:	121a      	asrs	r2, r3, #8
					<= 0) {
 8004066:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8004068:	429a      	cmp	r2, r3
 800406a:	d10d      	bne.n	8004088 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 800406c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004070:	2b00      	cmp	r3, #0
 8004072:	d004      	beq.n	800407e <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8004074:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8004078:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800407c:	e016      	b.n	80040ac <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 800407e:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8004082:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004086:	e011      	b.n	80040ac <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8004088:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800408c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800408e:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8004092:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004094:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8004098:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 800409c:	121b      	asrs	r3, r3, #8
 800409e:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 80040a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 80040a4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 80040a8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 80040ac:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80040b0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 80040b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00d      	beq.n	80040d8 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 80040bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 80040c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	019b      	lsls	r3, r3, #6
 80040d0:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	75da      	strb	r2, [r3, #23]
 80040d6:	e006      	b.n	80040e6 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80040de:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	2200      	movs	r2, #0
 80040e4:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 80040e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80040ea:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80040ee:	f107 0336 	add.w	r3, r7, #54	; 0x36
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040fc:	6878      	ldr	r0, [r7, #4]
 80040fe:	f003 f9ab 	bl	8007458 <VL53L0X_get_pal_range_status>
 8004102:	4603      	mov	r3, r0
 8004104:	461a      	mov	r2, r3
 8004106:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800410a:	4313      	orrs	r3, r2
 800410c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8004110:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8004118:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004120:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8004124:	2b00      	cmp	r3, #0
 8004126:	d12f      	bne.n	8004188 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f107 040c 	add.w	r4, r7, #12
 800412e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8004132:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004134:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004136:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800413a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8004142:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8004148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8004150:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8004156:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 800415c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8004162:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8004168:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 800416e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8004178:	f107 050c 	add.w	r5, r7, #12
 800417c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800417e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004180:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004184:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004188:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 800418c:	4618      	mov	r0, r3
 800418e:	3750      	adds	r7, #80	; 0x50
 8004190:	46bd      	mov	sp, r7
 8004192:	bdb0      	pop	{r4, r5, r7, pc}
 8004194:	10624dd3 	.word	0x10624dd3

08004198 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80041a2:	2300      	movs	r3, #0
 80041a4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 80041a6:	2100      	movs	r1, #0
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff f8c7 	bl	800333c <VL53L0X_SetDeviceMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 80041b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d104      	bne.n	80041c4 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	f7ff fd4c 	bl	8003c58 <VL53L0X_PerformSingleMeasurement>
 80041c0:	4603      	mov	r3, r0
 80041c2:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 80041c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d105      	bne.n	80041d8 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 80041cc:	6839      	ldr	r1, [r7, #0]
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f7ff febe 	bl	8003f50 <VL53L0X_GetRangingMeasurementData>
 80041d4:	4603      	mov	r3, r0
 80041d6:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 80041d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d105      	bne.n	80041ec <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 80041e0:	2100      	movs	r1, #0
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f962 	bl	80044ac <VL53L0X_ClearInterruptMask>
 80041e8:	4603      	mov	r3, r0
 80041ea:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 80041ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	4608      	mov	r0, r1
 8004202:	4611      	mov	r1, r2
 8004204:	461a      	mov	r2, r3
 8004206:	4603      	mov	r3, r0
 8004208:	70fb      	strb	r3, [r7, #3]
 800420a:	460b      	mov	r3, r1
 800420c:	70bb      	strb	r3, [r7, #2]
 800420e:	4613      	mov	r3, r2
 8004210:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004212:	2300      	movs	r3, #0
 8004214:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8004216:	78fb      	ldrb	r3, [r7, #3]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d002      	beq.n	8004222 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800421c:	23f6      	movs	r3, #246	; 0xf6
 800421e:	73fb      	strb	r3, [r7, #15]
 8004220:	e107      	b.n	8004432 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8004222:	78bb      	ldrb	r3, [r7, #2]
 8004224:	2b14      	cmp	r3, #20
 8004226:	d110      	bne.n	800424a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8004228:	7e3b      	ldrb	r3, [r7, #24]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d102      	bne.n	8004234 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800422e:	2310      	movs	r3, #16
 8004230:	73bb      	strb	r3, [r7, #14]
 8004232:	e001      	b.n	8004238 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8004234:	2301      	movs	r3, #1
 8004236:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8004238:	7bbb      	ldrb	r3, [r7, #14]
 800423a:	461a      	mov	r2, r3
 800423c:	2184      	movs	r1, #132	; 0x84
 800423e:	6878      	ldr	r0, [r7, #4]
 8004240:	f003 fcda 	bl	8007bf8 <VL53L0X_WrByte>
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	e0f3      	b.n	8004432 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800424a:	78bb      	ldrb	r3, [r7, #2]
 800424c:	2b15      	cmp	r3, #21
 800424e:	f040 8097 	bne.w	8004380 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004252:	2201      	movs	r2, #1
 8004254:	21ff      	movs	r1, #255	; 0xff
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f003 fcce 	bl	8007bf8 <VL53L0X_WrByte>
 800425c:	4603      	mov	r3, r0
 800425e:	461a      	mov	r2, r3
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	4313      	orrs	r3, r2
 8004264:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004266:	2200      	movs	r2, #0
 8004268:	2100      	movs	r1, #0
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f003 fcc4 	bl	8007bf8 <VL53L0X_WrByte>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	7bfb      	ldrb	r3, [r7, #15]
 8004276:	4313      	orrs	r3, r2
 8004278:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800427a:	2200      	movs	r2, #0
 800427c:	21ff      	movs	r1, #255	; 0xff
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f003 fcba 	bl	8007bf8 <VL53L0X_WrByte>
 8004284:	4603      	mov	r3, r0
 8004286:	461a      	mov	r2, r3
 8004288:	7bfb      	ldrb	r3, [r7, #15]
 800428a:	4313      	orrs	r3, r2
 800428c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800428e:	2201      	movs	r2, #1
 8004290:	2180      	movs	r1, #128	; 0x80
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f003 fcb0 	bl	8007bf8 <VL53L0X_WrByte>
 8004298:	4603      	mov	r3, r0
 800429a:	461a      	mov	r2, r3
 800429c:	7bfb      	ldrb	r3, [r7, #15]
 800429e:	4313      	orrs	r3, r2
 80042a0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80042a2:	2202      	movs	r2, #2
 80042a4:	2185      	movs	r1, #133	; 0x85
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f003 fca6 	bl	8007bf8 <VL53L0X_WrByte>
 80042ac:	4603      	mov	r3, r0
 80042ae:	461a      	mov	r2, r3
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80042b6:	2204      	movs	r2, #4
 80042b8:	21ff      	movs	r1, #255	; 0xff
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	f003 fc9c 	bl	8007bf8 <VL53L0X_WrByte>
 80042c0:	4603      	mov	r3, r0
 80042c2:	461a      	mov	r2, r3
 80042c4:	7bfb      	ldrb	r3, [r7, #15]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 80042ca:	2200      	movs	r2, #0
 80042cc:	21cd      	movs	r1, #205	; 0xcd
 80042ce:	6878      	ldr	r0, [r7, #4]
 80042d0:	f003 fc92 	bl	8007bf8 <VL53L0X_WrByte>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	7bfb      	ldrb	r3, [r7, #15]
 80042da:	4313      	orrs	r3, r2
 80042dc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 80042de:	2211      	movs	r2, #17
 80042e0:	21cc      	movs	r1, #204	; 0xcc
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f003 fc88 	bl	8007bf8 <VL53L0X_WrByte>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	7bfb      	ldrb	r3, [r7, #15]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 80042f2:	2207      	movs	r2, #7
 80042f4:	21ff      	movs	r1, #255	; 0xff
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f003 fc7e 	bl	8007bf8 <VL53L0X_WrByte>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	7bfb      	ldrb	r3, [r7, #15]
 8004302:	4313      	orrs	r3, r2
 8004304:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8004306:	2200      	movs	r2, #0
 8004308:	21be      	movs	r1, #190	; 0xbe
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f003 fc74 	bl	8007bf8 <VL53L0X_WrByte>
 8004310:	4603      	mov	r3, r0
 8004312:	461a      	mov	r2, r3
 8004314:	7bfb      	ldrb	r3, [r7, #15]
 8004316:	4313      	orrs	r3, r2
 8004318:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800431a:	2206      	movs	r2, #6
 800431c:	21ff      	movs	r1, #255	; 0xff
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f003 fc6a 	bl	8007bf8 <VL53L0X_WrByte>
 8004324:	4603      	mov	r3, r0
 8004326:	461a      	mov	r2, r3
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	4313      	orrs	r3, r2
 800432c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800432e:	2209      	movs	r2, #9
 8004330:	21cc      	movs	r1, #204	; 0xcc
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f003 fc60 	bl	8007bf8 <VL53L0X_WrByte>
 8004338:	4603      	mov	r3, r0
 800433a:	461a      	mov	r2, r3
 800433c:	7bfb      	ldrb	r3, [r7, #15]
 800433e:	4313      	orrs	r3, r2
 8004340:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8004342:	2200      	movs	r2, #0
 8004344:	21ff      	movs	r1, #255	; 0xff
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f003 fc56 	bl	8007bf8 <VL53L0X_WrByte>
 800434c:	4603      	mov	r3, r0
 800434e:	461a      	mov	r2, r3
 8004350:	7bfb      	ldrb	r3, [r7, #15]
 8004352:	4313      	orrs	r3, r2
 8004354:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8004356:	2201      	movs	r2, #1
 8004358:	21ff      	movs	r1, #255	; 0xff
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f003 fc4c 	bl	8007bf8 <VL53L0X_WrByte>
 8004360:	4603      	mov	r3, r0
 8004362:	461a      	mov	r2, r3
 8004364:	7bfb      	ldrb	r3, [r7, #15]
 8004366:	4313      	orrs	r3, r2
 8004368:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800436a:	2200      	movs	r2, #0
 800436c:	2100      	movs	r1, #0
 800436e:	6878      	ldr	r0, [r7, #4]
 8004370:	f003 fc42 	bl	8007bf8 <VL53L0X_WrByte>
 8004374:	4603      	mov	r3, r0
 8004376:	461a      	mov	r2, r3
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	4313      	orrs	r3, r2
 800437c:	73fb      	strb	r3, [r7, #15]
 800437e:	e058      	b.n	8004432 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 8004380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d121      	bne.n	80043cc <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 8004388:	787b      	ldrb	r3, [r7, #1]
 800438a:	2b04      	cmp	r3, #4
 800438c:	d81b      	bhi.n	80043c6 <VL53L0X_SetGpioConfig+0x1ce>
 800438e:	a201      	add	r2, pc, #4	; (adr r2, 8004394 <VL53L0X_SetGpioConfig+0x19c>)
 8004390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004394:	080043a9 	.word	0x080043a9
 8004398:	080043af 	.word	0x080043af
 800439c:	080043b5 	.word	0x080043b5
 80043a0:	080043bb 	.word	0x080043bb
 80043a4:	080043c1 	.word	0x080043c1
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80043a8:	2300      	movs	r3, #0
 80043aa:	73bb      	strb	r3, [r7, #14]
				break;
 80043ac:	e00f      	b.n	80043ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80043ae:	2301      	movs	r3, #1
 80043b0:	73bb      	strb	r3, [r7, #14]
				break;
 80043b2:	e00c      	b.n	80043ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80043b4:	2302      	movs	r3, #2
 80043b6:	73bb      	strb	r3, [r7, #14]
				break;
 80043b8:	e009      	b.n	80043ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80043ba:	2303      	movs	r3, #3
 80043bc:	73bb      	strb	r3, [r7, #14]
				break;
 80043be:	e006      	b.n	80043ce <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 80043c0:	2304      	movs	r3, #4
 80043c2:	73bb      	strb	r3, [r7, #14]
				break;
 80043c4:	e003      	b.n	80043ce <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 80043c6:	23f5      	movs	r3, #245	; 0xf5
 80043c8:	73fb      	strb	r3, [r7, #15]
 80043ca:	e000      	b.n	80043ce <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 80043cc:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 80043ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d107      	bne.n	80043e6 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 80043d6:	7bbb      	ldrb	r3, [r7, #14]
 80043d8:	461a      	mov	r2, r3
 80043da:	210a      	movs	r1, #10
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f003 fc0b 	bl	8007bf8 <VL53L0X_WrByte>
 80043e2:	4603      	mov	r3, r0
 80043e4:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 80043e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 80043ee:	7e3b      	ldrb	r3, [r7, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 80043f4:	2300      	movs	r3, #0
 80043f6:	73bb      	strb	r3, [r7, #14]
 80043f8:	e001      	b.n	80043fe <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 80043fa:	2310      	movs	r3, #16
 80043fc:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 80043fe:	7bbb      	ldrb	r3, [r7, #14]
 8004400:	22ef      	movs	r2, #239	; 0xef
 8004402:	2184      	movs	r1, #132	; 0x84
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f003 fc45 	bl	8007c94 <VL53L0X_UpdateByte>
 800440a:	4603      	mov	r3, r0
 800440c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800440e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d103      	bne.n	800441e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	787a      	ldrb	r2, [r7, #1]
 800441a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800441e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d105      	bne.n	8004432 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004426:	2100      	movs	r1, #0
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f000 f83f 	bl	80044ac <VL53L0X_ClearInterruptMask>
 800442e:	4603      	mov	r3, r0
 8004430:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8004432:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3710      	adds	r7, #16
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop

08004440 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	607a      	str	r2, [r7, #4]
 800444a:	603b      	str	r3, [r7, #0]
 800444c:	460b      	mov	r3, r1
 800444e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004450:	2300      	movs	r3, #0
 8004452:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8004454:	f107 0314 	add.w	r3, r7, #20
 8004458:	461a      	mov	r2, r3
 800445a:	210e      	movs	r1, #14
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f003 fb57 	bl	8007b10 <VL53L0X_RdWord>
 8004462:	4603      	mov	r3, r0
 8004464:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 8004466:	8abb      	ldrh	r3, [r7, #20]
 8004468:	045b      	lsls	r3, r3, #17
 800446a:	461a      	mov	r2, r3
 800446c:	4b0e      	ldr	r3, [pc, #56]	; (80044a8 <VL53L0X_GetInterruptThresholds+0x68>)
 800446e:	4013      	ands	r3, r2
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 8004474:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10f      	bne.n	800449c <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	461a      	mov	r2, r3
 8004482:	210c      	movs	r1, #12
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f003 fb43 	bl	8007b10 <VL53L0X_RdWord>
 800448a:	4603      	mov	r3, r0
 800448c:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 800448e:	8abb      	ldrh	r3, [r7, #20]
 8004490:	045b      	lsls	r3, r3, #17
 8004492:	461a      	mov	r2, r3
 8004494:	4b04      	ldr	r3, [pc, #16]	; (80044a8 <VL53L0X_GetInterruptThresholds+0x68>)
 8004496:	4013      	ands	r3, r2
		*pThresholdHigh =
 8004498:	683a      	ldr	r2, [r7, #0]
 800449a:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800449c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3718      	adds	r7, #24
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	1ffe0000 	.word	0x1ffe0000

080044ac <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80044b6:	2300      	movs	r3, #0
 80044b8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80044ba:	2300      	movs	r3, #0
 80044bc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80044be:	2201      	movs	r2, #1
 80044c0:	210b      	movs	r1, #11
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f003 fb98 	bl	8007bf8 <VL53L0X_WrByte>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 80044cc:	2200      	movs	r2, #0
 80044ce:	210b      	movs	r1, #11
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f003 fb91 	bl	8007bf8 <VL53L0X_WrByte>
 80044d6:	4603      	mov	r3, r0
 80044d8:	461a      	mov	r2, r3
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	4313      	orrs	r3, r2
 80044de:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 80044e0:	f107 030d 	add.w	r3, r7, #13
 80044e4:	461a      	mov	r2, r3
 80044e6:	2113      	movs	r1, #19
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f003 fa8a 	bl	8007a02 <VL53L0X_RdByte>
 80044ee:	4603      	mov	r3, r0
 80044f0:	461a      	mov	r2, r3
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 80044f8:	7bbb      	ldrb	r3, [r7, #14]
 80044fa:	3301      	adds	r3, #1
 80044fc:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 80044fe:	7b7b      	ldrb	r3, [r7, #13]
 8004500:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8004504:	2b00      	cmp	r3, #0
 8004506:	d006      	beq.n	8004516 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8004508:	7bbb      	ldrb	r3, [r7, #14]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d803      	bhi.n	8004516 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800450e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0d3      	beq.n	80044be <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8004516:	7bbb      	ldrb	r3, [r7, #14]
 8004518:	2b02      	cmp	r3, #2
 800451a:	d901      	bls.n	8004520 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800451c:	23f4      	movs	r3, #244	; 0xf4
 800451e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004520:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004536:	2300      	movs	r3, #0
 8004538:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800453a:	f107 030e 	add.w	r3, r7, #14
 800453e:	461a      	mov	r2, r3
 8004540:	2113      	movs	r1, #19
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f003 fa5d 	bl	8007a02 <VL53L0X_RdByte>
 8004548:	4603      	mov	r3, r0
 800454a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800454c:	7bbb      	ldrb	r3, [r7, #14]
 800454e:	f003 0207 	and.w	r2, r3, #7
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8004556:	7bbb      	ldrb	r3, [r7, #14]
 8004558:	f003 0318 	and.w	r3, r3, #24
 800455c:	2b00      	cmp	r3, #0
 800455e:	d001      	beq.n	8004564 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 8004560:	23fa      	movs	r3, #250	; 0xfa
 8004562:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8004564:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004568:	4618      	mov	r0, r3
 800456a:	3710      	adds	r7, #16
 800456c:	46bd      	mov	sp, r7
 800456e:	bd80      	pop	{r7, pc}

08004570 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b086      	sub	sp, #24
 8004574:	af00      	add	r7, sp, #0
 8004576:	60f8      	str	r0, [r7, #12]
 8004578:	60b9      	str	r1, [r7, #8]
 800457a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800457c:	2300      	movs	r3, #0
 800457e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	68b9      	ldr	r1, [r7, #8]
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fa03 	bl	8004990 <VL53L0X_perform_ref_spad_management>
 800458a:	4603      	mov	r3, r0
 800458c:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 800458e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8004592:	4618      	mov	r0, r3
 8004594:	3718      	adds	r7, #24
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b084      	sub	sp, #16
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80045a4:	2300      	movs	r3, #0
 80045a6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80045a8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80045ac:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80045ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045b2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80045b4:	f107 0308 	add.w	r3, r7, #8
 80045b8:	461a      	mov	r2, r3
 80045ba:	2128      	movs	r1, #40	; 0x28
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f003 faa7 	bl	8007b10 <VL53L0X_RdWord>
 80045c2:	4603      	mov	r3, r0
 80045c4:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 80045c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d11e      	bne.n	800460c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 80045ce:	893b      	ldrh	r3, [r7, #8]
 80045d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d4:	b29b      	uxth	r3, r3
 80045d6:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 80045d8:	893b      	ldrh	r3, [r7, #8]
 80045da:	461a      	mov	r2, r3
 80045dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	dd0b      	ble.n	80045fc <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 80045e4:	893a      	ldrh	r2, [r7, #8]
 80045e6:	897b      	ldrh	r3, [r7, #10]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	b21b      	sxth	r3, r3
 80045ee:	461a      	mov	r2, r3
					* 250;
 80045f0:	23fa      	movs	r3, #250	; 0xfa
 80045f2:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	e007      	b.n	800460c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 80045fc:	893b      	ldrh	r3, [r7, #8]
 80045fe:	b21b      	sxth	r3, r3
 8004600:	461a      	mov	r2, r3
 8004602:	23fa      	movs	r3, #250	; 0xfa
 8004604:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800460c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8004618:	b480      	push	{r7}
 800461a:	b08b      	sub	sp, #44	; 0x2c
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]
 8004624:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8004626:	2308      	movs	r3, #8
 8004628:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	f04f 32ff 	mov.w	r2, #4294967295
 8004634:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8004636:	687a      	ldr	r2, [r7, #4]
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	fbb2 f3f3 	udiv	r3, r2, r3
 800463e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69ba      	ldr	r2, [r7, #24]
 8004644:	fbb3 f2f2 	udiv	r2, r3, r2
 8004648:	69b9      	ldr	r1, [r7, #24]
 800464a:	fb01 f202 	mul.w	r2, r1, r2
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	e030      	b.n	80046ba <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800465c:	68fa      	ldr	r2, [r7, #12]
 800465e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004660:	4413      	add	r3, r2
 8004662:	781b      	ldrb	r3, [r3, #0]
 8004664:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 8004666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	429a      	cmp	r2, r3
 800466c:	d11e      	bne.n	80046ac <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 800466e:	7ffa      	ldrb	r2, [r7, #31]
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	fa42 f303 	asr.w	r3, r2, r3
 8004676:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 800467c:	e016      	b.n	80046ac <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 800467e:	7ffb      	ldrb	r3, [r7, #31]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00b      	beq.n	80046a0 <get_next_good_spad+0x88>
				success = 1;
 8004688:	2301      	movs	r3, #1
 800468a:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 800468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468e:	69ba      	ldr	r2, [r7, #24]
 8004690:	fb02 f203 	mul.w	r2, r2, r3
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	4413      	add	r3, r2
 8004698:	461a      	mov	r2, r3
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	601a      	str	r2, [r3, #0]
				break;
 800469e:	e009      	b.n	80046b4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80046a0:	7ffb      	ldrb	r3, [r7, #31]
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	3301      	adds	r3, #1
 80046aa:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80046ac:	6a3a      	ldr	r2, [r7, #32]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3e4      	bcc.n	800467e <get_next_good_spad+0x66>
				coarseIndex++) {
 80046b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b6:	3301      	adds	r3, #1
 80046b8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80046ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d202      	bcs.n	80046c8 <get_next_good_spad+0xb0>
 80046c2:	7fbb      	ldrb	r3, [r7, #30]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d0c7      	beq.n	8004658 <get_next_good_spad+0x40>
		}
	}
}
 80046c8:	bf00      	nop
 80046ca:	372c      	adds	r7, #44	; 0x2c
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 80046dc:	2301      	movs	r3, #1
 80046de:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 80046e6:	4a07      	ldr	r2, [pc, #28]	; (8004704 <is_aperture+0x30>)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <is_aperture+0x22>
		isAperture = 0;
 80046f2:	2300      	movs	r3, #0
 80046f4:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 80046f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3714      	adds	r7, #20
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	20000574 	.word	0x20000574

08004708 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8004714:	2300      	movs	r3, #0
 8004716:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8004718:	2308      	movs	r3, #8
 800471a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	fbb2 f3f3 	udiv	r3, r2, r3
 8004724:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	fbb3 f2f2 	udiv	r2, r3, r2
 800472e:	69b9      	ldr	r1, [r7, #24]
 8004730:	fb01 f202 	mul.w	r2, r1, r2
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	429a      	cmp	r2, r3
 800473e:	d302      	bcc.n	8004746 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004740:	23ce      	movs	r3, #206	; 0xce
 8004742:	77fb      	strb	r3, [r7, #31]
 8004744:	e010      	b.n	8004768 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8004746:	68fa      	ldr	r2, [r7, #12]
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	4413      	add	r3, r2
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	b25a      	sxtb	r2, r3
 8004750:	2101      	movs	r1, #1
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	fa01 f303 	lsl.w	r3, r1, r3
 8004758:	b25b      	sxtb	r3, r3
 800475a:	4313      	orrs	r3, r2
 800475c:	b259      	sxtb	r1, r3
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	4413      	add	r3, r2
 8004764:	b2ca      	uxtb	r2, r1
 8004766:	701a      	strb	r2, [r3, #0]

	return status;
 8004768:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800476c:	4618      	mov	r0, r3
 800476e:	3724      	adds	r7, #36	; 0x24
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
 8004780:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 8004782:	2306      	movs	r3, #6
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	21b0      	movs	r1, #176	; 0xb0
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f003 f965 	bl	8007a58 <VL53L0X_WriteMulti>
 800478e:	4603      	mov	r3, r0
 8004790:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 8004792:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004796:	4618      	mov	r0, r3
 8004798:	3710      	adds	r7, #16
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b084      	sub	sp, #16
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
 80047a6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80047a8:	2306      	movs	r3, #6
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	21b0      	movs	r1, #176	; 0xb0
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f003 f982 	bl	8007ab8 <VL53L0X_ReadMulti>
 80047b4:	4603      	mov	r3, r0
 80047b6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80047b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b08c      	sub	sp, #48	; 0x30
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	60f8      	str	r0, [r7, #12]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	460b      	mov	r3, r1
 80047d2:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 80047da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047dc:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 80047de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e0:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 80047e2:	2300      	movs	r3, #0
 80047e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047e6:	e02b      	b.n	8004840 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 80047e8:	f107 031c 	add.w	r3, r7, #28
 80047ec:	6a3a      	ldr	r2, [r7, #32]
 80047ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff ff11 	bl	8004618 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047fc:	d103      	bne.n	8004806 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 80047fe:	23ce      	movs	r3, #206	; 0xce
 8004800:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004804:	e020      	b.n	8004848 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8004806:	69fb      	ldr	r3, [r7, #28]
 8004808:	461a      	mov	r2, r3
 800480a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800480c:	4413      	add	r3, r2
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff ff60 	bl	80046d4 <is_aperture>
 8004814:	4603      	mov	r3, r0
 8004816:	461a      	mov	r2, r3
 8004818:	7afb      	ldrb	r3, [r7, #11]
 800481a:	4293      	cmp	r3, r2
 800481c:	d003      	beq.n	8004826 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800481e:	23ce      	movs	r3, #206	; 0xce
 8004820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8004824:	e010      	b.n	8004848 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800482a:	6a3a      	ldr	r2, [r7, #32]
 800482c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800482e:	6838      	ldr	r0, [r7, #0]
 8004830:	f7ff ff6a 	bl	8004708 <enable_spad_bit>
		currentSpad++;
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	3301      	adds	r3, #1
 8004838:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800483a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483c:	3301      	adds	r3, #1
 800483e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004840:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004844:	429a      	cmp	r2, r3
 8004846:	d3cf      	bcc.n	80047e8 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8004848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800484a:	6a3a      	ldr	r2, [r7, #32]
 800484c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800484e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004852:	2b00      	cmp	r3, #0
 8004854:	d106      	bne.n	8004864 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8004856:	6839      	ldr	r1, [r7, #0]
 8004858:	68f8      	ldr	r0, [r7, #12]
 800485a:	f7ff ff8d 	bl	8004778 <set_ref_spad_map>
 800485e:	4603      	mov	r3, r0
 8004860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 8004864:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004868:	2b00      	cmp	r3, #0
 800486a:	d121      	bne.n	80048b0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 800486c:	f107 0314 	add.w	r3, r7, #20
 8004870:	4619      	mov	r1, r3
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff ff93 	bl	800479e <get_ref_spad_map>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 8004882:	e011      	b.n	80048a8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 8004884:	683a      	ldr	r2, [r7, #0]
 8004886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004888:	4413      	add	r3, r2
 800488a:	781a      	ldrb	r2, [r3, #0]
 800488c:	f107 0114 	add.w	r1, r7, #20
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	440b      	add	r3, r1
 8004894:	781b      	ldrb	r3, [r3, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d003      	beq.n	80048a2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 800489a:	23ce      	movs	r3, #206	; 0xce
 800489c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80048a0:	e006      	b.n	80048b0 <enable_ref_spads+0xec>
			}
			i++;
 80048a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a4:	3301      	adds	r3, #1
 80048a6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80048a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d3e9      	bcc.n	8004884 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80048b0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3730      	adds	r7, #48	; 0x30
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	; 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 80048c6:	2300      	movs	r3, #0
 80048c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80048d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 80048dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d107      	bne.n	80048f4 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 80048e4:	22c0      	movs	r2, #192	; 0xc0
 80048e6:	2101      	movs	r1, #1
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f003 f985 	bl	8007bf8 <VL53L0X_WrByte>
 80048ee:	4603      	mov	r3, r0
 80048f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 80048f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d108      	bne.n	800490e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 80048fc:	f107 0308 	add.w	r3, r7, #8
 8004900:	4619      	mov	r1, r3
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7ff fc48 	bl	8004198 <VL53L0X_PerformSingleRangingMeasurement>
 8004908:	4603      	mov	r3, r0
 800490a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800490e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004912:	2b00      	cmp	r3, #0
 8004914:	d107      	bne.n	8004926 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004916:	2201      	movs	r2, #1
 8004918:	21ff      	movs	r1, #255	; 0xff
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f003 f96c 	bl	8007bf8 <VL53L0X_WrByte>
 8004920:	4603      	mov	r3, r0
 8004922:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8004926:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800492a:	2b00      	cmp	r3, #0
 800492c:	d107      	bne.n	800493e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	21b6      	movs	r1, #182	; 0xb6
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f003 f8ec 	bl	8007b10 <VL53L0X_RdWord>
 8004938:	4603      	mov	r3, r0
 800493a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800493e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004946:	2200      	movs	r2, #0
 8004948:	21ff      	movs	r1, #255	; 0xff
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f003 f954 	bl	8007bf8 <VL53L0X_WrByte>
 8004950:	4603      	mov	r3, r0
 8004952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8004956:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800495a:	2b00      	cmp	r3, #0
 800495c:	d112      	bne.n	8004984 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800495e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004962:	461a      	mov	r2, r3
 8004964:	2101      	movs	r1, #1
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f003 f946 	bl	8007bf8 <VL53L0X_WrByte>
 800496c:	4603      	mov	r3, r0
 800496e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 8004972:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004976:	2b00      	cmp	r3, #0
 8004978:	d104      	bne.n	8004984 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8004980:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 8004984:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004988:	4618      	mov	r0, r3
 800498a:	3728      	adds	r7, #40	; 0x28
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 8004990:	b590      	push	{r4, r7, lr}
 8004992:	b09d      	sub	sp, #116	; 0x74
 8004994:	af06      	add	r7, sp, #24
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800499c:	2300      	movs	r3, #0
 800499e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80049a2:	23b4      	movs	r3, #180	; 0xb4
 80049a4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80049a8:	2303      	movs	r3, #3
 80049aa:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80049ac:	232c      	movs	r3, #44	; 0x2c
 80049ae:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80049b0:	2300      	movs	r3, #0
 80049b2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80049b4:	2300      	movs	r3, #0
 80049b6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80049b8:	2300      	movs	r3, #0
 80049ba:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80049bc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80049c0:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 80049c2:	2300      	movs	r3, #0
 80049c4:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 80049c6:	2300      	movs	r3, #0
 80049c8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 80049ca:	2306      	movs	r3, #6
 80049cc:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 80049ce:	2300      	movs	r3, #0
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 80049d2:	2300      	movs	r3, #0
 80049d4:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 80049d6:	2300      	movs	r3, #0
 80049d8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 80049e0:	2300      	movs	r3, #0
 80049e2:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 80049e8:	2300      	movs	r3, #0
 80049ea:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 80049f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 80049f6:	2300      	movs	r3, #0
 80049f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80049fa:	e009      	b.n	8004a10 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 80049fc:	68fa      	ldr	r2, [r7, #12]
 80049fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004a0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d3f1      	bcc.n	80049fc <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004a18:	2201      	movs	r2, #1
 8004a1a:	21ff      	movs	r1, #255	; 0xff
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f003 f8eb 	bl	8007bf8 <VL53L0X_WrByte>
 8004a22:	4603      	mov	r3, r0
 8004a24:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004a28:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d107      	bne.n	8004a40 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8004a30:	2200      	movs	r2, #0
 8004a32:	214f      	movs	r1, #79	; 0x4f
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f003 f8df 	bl	8007bf8 <VL53L0X_WrByte>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004a40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8004a48:	222c      	movs	r2, #44	; 0x2c
 8004a4a:	214e      	movs	r1, #78	; 0x4e
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f003 f8d3 	bl	8007bf8 <VL53L0X_WrByte>
 8004a52:	4603      	mov	r3, r0
 8004a54:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004a58:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d107      	bne.n	8004a70 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004a60:	2200      	movs	r2, #0
 8004a62:	21ff      	movs	r1, #255	; 0xff
 8004a64:	68f8      	ldr	r0, [r7, #12]
 8004a66:	f003 f8c7 	bl	8007bf8 <VL53L0X_WrByte>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8004a70:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d109      	bne.n	8004a8c <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 8004a78:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	21b6      	movs	r1, #182	; 0xb6
 8004a80:	68f8      	ldr	r0, [r7, #12]
 8004a82:	f003 f8b9 	bl	8007bf8 <VL53L0X_WrByte>
 8004a86:	4603      	mov	r3, r0
 8004a88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 8004a8c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 8004a94:	2200      	movs	r2, #0
 8004a96:	2180      	movs	r1, #128	; 0x80
 8004a98:	68f8      	ldr	r0, [r7, #12]
 8004a9a:	f003 f8ad 	bl	8007bf8 <VL53L0X_WrByte>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 8004aa4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 8004aac:	f107 0210 	add.w	r2, r7, #16
 8004ab0:	f107 0111 	add.w	r1, r7, #17
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	68f8      	ldr	r0, [r7, #12]
 8004ab8:	f000 fbbb 	bl	8005232 <VL53L0X_perform_ref_calibration>
 8004abc:	4603      	mov	r3, r0
 8004abe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8004ac2:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d121      	bne.n	8004b0e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 8004aca:	2300      	movs	r3, #0
 8004acc:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 8004ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad0:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8004ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8004ae6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004aea:	f107 0218 	add.w	r2, r7, #24
 8004aee:	9204      	str	r2, [sp, #16]
 8004af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004af2:	9203      	str	r2, [sp, #12]
 8004af4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004af6:	9202      	str	r2, [sp, #8]
 8004af8:	9301      	str	r3, [sp, #4]
 8004afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	4623      	mov	r3, r4
 8004b00:	4602      	mov	r2, r0
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7ff fe5e 	bl	80047c4 <enable_ref_spads>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004b0e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d174      	bne.n	8004c00 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 8004b1a:	f107 0312 	add.w	r3, r7, #18
 8004b1e:	4619      	mov	r1, r3
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff fecb 	bl	80048bc <perform_ref_signal_measurement>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004b2c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d161      	bne.n	8004bf8 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8004b34:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8004b36:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d25d      	bcs.n	8004bf8 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b40:	e009      	b.n	8004b56 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8004b50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b52:	3301      	adds	r3, #1
 8004b54:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3f1      	bcc.n	8004b42 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 8004b5e:	e002      	b.n	8004b66 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 8004b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b62:	3301      	adds	r3, #1
 8004b64:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 8004b66:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 8004b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b6c:	4413      	add	r3, r2
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7ff fdb0 	bl	80046d4 <is_aperture>
 8004b74:	4603      	mov	r3, r0
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d103      	bne.n	8004b82 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 8004b7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d3ee      	bcc.n	8004b60 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 8004b82:	2301      	movs	r3, #1
 8004b84:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 8004b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b88:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 8004b96:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004b9a:	f107 0218 	add.w	r2, r7, #24
 8004b9e:	9204      	str	r2, [sp, #16]
 8004ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ba2:	9203      	str	r2, [sp, #12]
 8004ba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ba6:	9202      	str	r2, [sp, #8]
 8004ba8:	9301      	str	r3, [sp, #4]
 8004baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	4623      	mov	r3, r4
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f7ff fe06 	bl	80047c4 <enable_ref_spads>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004bbe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d11b      	bne.n	8004bfe <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8004bca:	f107 0312 	add.w	r3, r7, #18
 8004bce:	4619      	mov	r1, r3
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f7ff fe73 	bl	80048bc <perform_ref_signal_measurement>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8004bdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10c      	bne.n	8004bfe <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8004be4:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8004be6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d208      	bcs.n	8004bfe <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8004bec:	2301      	movs	r3, #1
 8004bee:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8004bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8004bf6:	e002      	b.n	8004bfe <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bfc:	e000      	b.n	8004c00 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8004bfe:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8004c00:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f040 80af 	bne.w	8004d68 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8004c0a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8004c0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	f240 80aa 	bls.w	8004d68 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8004c14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c16:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8004c24:	f107 031c 	add.w	r3, r7, #28
 8004c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	f008 ff6e 	bl	800db0c <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8004c30:	8a7b      	ldrh	r3, [r7, #18]
 8004c32:	461a      	mov	r2, r3
 8004c34:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004c36:	1ad3      	subs	r3, r2, r3
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bfb8      	it	lt
 8004c3c:	425b      	neglt	r3, r3
 8004c3e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8004c46:	e086      	b.n	8004d56 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c56:	f7ff fcdf 	bl	8004618 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c60:	d103      	bne.n	8004c6a <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004c62:	23ce      	movs	r3, #206	; 0xce
 8004c64:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004c68:	e07e      	b.n	8004d68 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8004c6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8004c70:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	4413      	add	r3, r2
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f7ff fd2b 	bl	80046d4 <is_aperture>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	461a      	mov	r2, r3
 8004c82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8004c88:	23ce      	movs	r3, #206	; 0xce
 8004c8a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8004c8e:	e06b      	b.n	8004d68 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8004c9a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004c9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7ff fd32 	bl	8004708 <enable_spad_bit>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8004caa:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10c      	bne.n	8004ccc <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8004cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff fd59 	bl	8004778 <set_ref_spad_map>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8004ccc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d146      	bne.n	8004d62 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8004cd4:	f107 0312 	add.w	r3, r7, #18
 8004cd8:	4619      	mov	r1, r3
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f7ff fdee 	bl	80048bc <perform_ref_signal_measurement>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8004ce6:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d13b      	bne.n	8004d66 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8004cee:	8a7b      	ldrh	r3, [r7, #18]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004cf4:	1ad3      	subs	r3, r2, r3
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bfb8      	it	lt
 8004cfa:	425b      	neglt	r3, r3
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8004cfe:	8a7b      	ldrh	r3, [r7, #18]
 8004d00:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d21c      	bcs.n	8004d40 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d0a:	429a      	cmp	r2, r3
 8004d0c:	d914      	bls.n	8004d38 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8004d0e:	f107 031c 	add.w	r3, r7, #28
 8004d12:	4619      	mov	r1, r3
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7ff fd2f 	bl	8004778 <set_ref_spad_map>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8004d26:	f107 011c 	add.w	r1, r7, #28
 8004d2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f008 feed 	bl	800db0c <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8004d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d34:	3b01      	subs	r3, #1
 8004d36:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004d3e:	e00a      	b.n	8004d56 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8004d4a:	f107 031c 	add.w	r3, r7, #28
 8004d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d50:	4618      	mov	r0, r3
 8004d52:	f008 fedb 	bl	800db0c <memcpy>
		while (!complete) {
 8004d56:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f43f af74 	beq.w	8004c48 <VL53L0X_perform_ref_spad_management+0x2b8>
 8004d60:	e002      	b.n	8004d68 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004d62:	bf00      	nop
 8004d64:	e000      	b.n	8004d68 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8004d66:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8004d68:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d115      	bne.n	8004d9c <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d74:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8004d7c:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2201      	movs	r2, #1
 8004d82:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	b2da      	uxtb	r2, r3
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	781a      	ldrb	r2, [r3, #0]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8004d9c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	375c      	adds	r7, #92	; 0x5c
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd90      	pop	{r4, r7, pc}

08004da8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8004da8:	b590      	push	{r4, r7, lr}
 8004daa:	b093      	sub	sp, #76	; 0x4c
 8004dac:	af06      	add	r7, sp, #24
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	4613      	mov	r3, r2
 8004db4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004db6:	2300      	movs	r3, #0
 8004db8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8004dc0:	23b4      	movs	r3, #180	; 0xb4
 8004dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8004dc6:	2306      	movs	r3, #6
 8004dc8:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8004dca:	232c      	movs	r3, #44	; 0x2c
 8004dcc:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004dce:	2201      	movs	r2, #1
 8004dd0:	21ff      	movs	r1, #255	; 0xff
 8004dd2:	68f8      	ldr	r0, [r7, #12]
 8004dd4:	f002 ff10 	bl	8007bf8 <VL53L0X_WrByte>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004dde:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d107      	bne.n	8004df6 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8004de6:	2200      	movs	r2, #0
 8004de8:	214f      	movs	r1, #79	; 0x4f
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	f002 ff04 	bl	8007bf8 <VL53L0X_WrByte>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8004df6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d107      	bne.n	8004e0e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8004dfe:	222c      	movs	r2, #44	; 0x2c
 8004e00:	214e      	movs	r1, #78	; 0x4e
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f002 fef8 	bl	8007bf8 <VL53L0X_WrByte>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8004e0e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d107      	bne.n	8004e26 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004e16:	2200      	movs	r2, #0
 8004e18:	21ff      	movs	r1, #255	; 0xff
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f002 feec 	bl	8007bf8 <VL53L0X_WrByte>
 8004e20:	4603      	mov	r3, r0
 8004e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8004e26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d109      	bne.n	8004e42 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8004e2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e32:	461a      	mov	r2, r3
 8004e34:	21b6      	movs	r1, #182	; 0xb6
 8004e36:	68f8      	ldr	r0, [r7, #12]
 8004e38:	f002 fede 	bl	8007bf8 <VL53L0X_WrByte>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8004e42:	2300      	movs	r3, #0
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
 8004e46:	e009      	b.n	8004e5c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	4413      	add	r3, r2
 8004e4e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8004e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e58:	3301      	adds	r3, #1
 8004e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d3f1      	bcc.n	8004e48 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8004e64:	79fb      	ldrb	r3, [r7, #7]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d011      	beq.n	8004e8e <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e6a:	e002      	b.n	8004e72 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8004e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e6e:	3301      	adds	r3, #1
 8004e70:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8004e72:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8004e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e78:	4413      	add	r3, r2
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff fc2a 	bl	80046d4 <is_aperture>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <VL53L0X_set_reference_spads+0xe6>
 8004e86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d3ee      	bcc.n	8004e6c <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8004e9a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004e9e:	79f9      	ldrb	r1, [r7, #7]
 8004ea0:	f107 0214 	add.w	r2, r7, #20
 8004ea4:	9204      	str	r2, [sp, #16]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	9203      	str	r2, [sp, #12]
 8004eaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eac:	9202      	str	r2, [sp, #8]
 8004eae:	9301      	str	r3, [sp, #4]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	9300      	str	r3, [sp, #0]
 8004eb4:	4623      	mov	r3, r4
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f7ff fc83 	bl	80047c4 <enable_ref_spads>
 8004ebe:	4603      	mov	r3, r0
 8004ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8004ec4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d10c      	bne.n	8004ee6 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	b2da      	uxtb	r2, r3
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	79fa      	ldrb	r2, [r7, #7]
 8004ee2:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8004ee6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3734      	adds	r7, #52	; 0x34
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd90      	pop	{r4, r7, pc}

08004ef2 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d10a      	bne.n	8004f20 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8004f0a:	78fb      	ldrb	r3, [r7, #3]
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	b2db      	uxtb	r3, r3
 8004f12:	461a      	mov	r2, r3
 8004f14:	2100      	movs	r1, #0
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f002 fe6e 	bl	8007bf8 <VL53L0X_WrByte>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8004f20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f9bf 	bl	80052ac <VL53L0X_measurement_poll_for_completion>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d105      	bne.n	8004f46 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7ff fab5 	bl	80044ac <VL53L0X_ClearInterruptMask>
 8004f42:	4603      	mov	r3, r0
 8004f44:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8004f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2100      	movs	r1, #0
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f002 fe50 	bl	8007bf8 <VL53L0X_WrByte>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8004f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3710      	adds	r7, #16
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	4608      	mov	r0, r1
 8004f72:	4611      	mov	r1, r2
 8004f74:	461a      	mov	r2, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	70fb      	strb	r3, [r7, #3]
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	70bb      	strb	r3, [r7, #2]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8004f82:	2300      	movs	r3, #0
 8004f84:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8004f86:	2300      	movs	r3, #0
 8004f88:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	21ff      	movs	r1, #255	; 0xff
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f002 fe32 	bl	8007bf8 <VL53L0X_WrByte>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f002 fe28 	bl	8007bf8 <VL53L0X_WrByte>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	461a      	mov	r2, r3
 8004fac:	7bfb      	ldrb	r3, [r7, #15]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	21ff      	movs	r1, #255	; 0xff
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f002 fe1e 	bl	8007bf8 <VL53L0X_WrByte>
 8004fbc:	4603      	mov	r3, r0
 8004fbe:	461a      	mov	r2, r3
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8004fc6:	78fb      	ldrb	r3, [r7, #3]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d01e      	beq.n	800500a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8004fcc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d009      	beq.n	8004fe8 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	21cb      	movs	r1, #203	; 0xcb
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f002 fd12 	bl	8007a02 <VL53L0X_RdByte>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	461a      	mov	r2, r3
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8004fe8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d02a      	beq.n	8005046 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8004ff0:	f107 030e 	add.w	r3, r7, #14
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	21ee      	movs	r1, #238	; 0xee
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f002 fd02 	bl	8007a02 <VL53L0X_RdByte>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	4313      	orrs	r3, r2
 8005006:	73fb      	strb	r3, [r7, #15]
 8005008:	e01d      	b.n	8005046 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 800500a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d00a      	beq.n	8005028 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8005012:	78bb      	ldrb	r3, [r7, #2]
 8005014:	461a      	mov	r2, r3
 8005016:	21cb      	movs	r1, #203	; 0xcb
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f002 fded 	bl	8007bf8 <VL53L0X_WrByte>
 800501e:	4603      	mov	r3, r0
 8005020:	461a      	mov	r2, r3
 8005022:	7bfb      	ldrb	r3, [r7, #15]
 8005024:	4313      	orrs	r3, r2
 8005026:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8005028:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8005030:	787b      	ldrb	r3, [r7, #1]
 8005032:	2280      	movs	r2, #128	; 0x80
 8005034:	21ee      	movs	r1, #238	; 0xee
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f002 fe2c 	bl	8007c94 <VL53L0X_UpdateByte>
 800503c:	4603      	mov	r3, r0
 800503e:	461a      	mov	r2, r3
 8005040:	7bfb      	ldrb	r3, [r7, #15]
 8005042:	4313      	orrs	r3, r2
 8005044:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005046:	2201      	movs	r2, #1
 8005048:	21ff      	movs	r1, #255	; 0xff
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f002 fdd4 	bl	8007bf8 <VL53L0X_WrByte>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	4313      	orrs	r3, r2
 8005058:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800505a:	2201      	movs	r2, #1
 800505c:	2100      	movs	r1, #0
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f002 fdca 	bl	8007bf8 <VL53L0X_WrByte>
 8005064:	4603      	mov	r3, r0
 8005066:	461a      	mov	r2, r3
 8005068:	7bfb      	ldrb	r3, [r7, #15]
 800506a:	4313      	orrs	r3, r2
 800506c:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800506e:	2200      	movs	r2, #0
 8005070:	21ff      	movs	r1, #255	; 0xff
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f002 fdc0 	bl	8007bf8 <VL53L0X_WrByte>
 8005078:	4603      	mov	r3, r0
 800507a:	461a      	mov	r2, r3
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	4313      	orrs	r3, r2
 8005080:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8005082:	7bbb      	ldrb	r3, [r7, #14]
 8005084:	f023 0310 	bic.w	r3, r3, #16
 8005088:	b2da      	uxtb	r2, r3
 800508a:	69fb      	ldr	r3, [r7, #28]
 800508c:	701a      	strb	r2, [r3, #0]

	return Status;
 800508e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b08a      	sub	sp, #40	; 0x28
 800509e:	af04      	add	r7, sp, #16
 80050a0:	60f8      	str	r0, [r7, #12]
 80050a2:	60b9      	str	r1, [r7, #8]
 80050a4:	4611      	mov	r1, r2
 80050a6:	461a      	mov	r2, r3
 80050a8:	460b      	mov	r3, r1
 80050aa:	71fb      	strb	r3, [r7, #7]
 80050ac:	4613      	mov	r3, r2
 80050ae:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80050b0:	2300      	movs	r3, #0
 80050b2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80050b4:	2300      	movs	r3, #0
 80050b6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 80050b8:	2300      	movs	r3, #0
 80050ba:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 80050c4:	79bb      	ldrb	r3, [r7, #6]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d003      	beq.n	80050d2 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80050d0:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 80050d2:	2201      	movs	r2, #1
 80050d4:	2101      	movs	r1, #1
 80050d6:	68f8      	ldr	r0, [r7, #12]
 80050d8:	f002 fd8e 	bl	8007bf8 <VL53L0X_WrByte>
 80050dc:	4603      	mov	r3, r0
 80050de:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80050e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d105      	bne.n	80050f4 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 80050e8:	2140      	movs	r1, #64	; 0x40
 80050ea:	68f8      	ldr	r0, [r7, #12]
 80050ec:	f7ff ff01 	bl	8004ef2 <VL53L0X_perform_single_ref_calibration>
 80050f0:	4603      	mov	r3, r0
 80050f2:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80050f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d115      	bne.n	8005128 <VL53L0X_perform_vhv_calibration+0x8e>
 80050fc:	79fb      	ldrb	r3, [r7, #7]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d112      	bne.n	8005128 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8005102:	7d39      	ldrb	r1, [r7, #20]
 8005104:	7d7a      	ldrb	r2, [r7, #21]
 8005106:	2300      	movs	r3, #0
 8005108:	9303      	str	r3, [sp, #12]
 800510a:	2301      	movs	r3, #1
 800510c:	9302      	str	r3, [sp, #8]
 800510e:	f107 0313 	add.w	r3, r7, #19
 8005112:	9301      	str	r3, [sp, #4]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	460b      	mov	r3, r1
 800511a:	2101      	movs	r1, #1
 800511c:	68f8      	ldr	r0, [r7, #12]
 800511e:	f7ff ff23 	bl	8004f68 <VL53L0X_ref_calibration_io>
 8005122:	4603      	mov	r3, r0
 8005124:	75fb      	strb	r3, [r7, #23]
 8005126:	e002      	b.n	800512e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800512e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d112      	bne.n	800515c <VL53L0X_perform_vhv_calibration+0xc2>
 8005136:	79bb      	ldrb	r3, [r7, #6]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00f      	beq.n	800515c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800513c:	7dbb      	ldrb	r3, [r7, #22]
 800513e:	461a      	mov	r2, r3
 8005140:	2101      	movs	r1, #1
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f002 fd58 	bl	8007bf8 <VL53L0X_WrByte>
 8005148:	4603      	mov	r3, r0
 800514a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800514c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d103      	bne.n	800515c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	7dba      	ldrb	r2, [r7, #22]
 8005158:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800515c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005160:	4618      	mov	r0, r3
 8005162:	3718      	adds	r7, #24
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b08a      	sub	sp, #40	; 0x28
 800516c:	af04      	add	r7, sp, #16
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	4611      	mov	r1, r2
 8005174:	461a      	mov	r2, r3
 8005176:	460b      	mov	r3, r1
 8005178:	71fb      	strb	r3, [r7, #7]
 800517a:	4613      	mov	r3, r2
 800517c:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800517e:	2300      	movs	r3, #0
 8005180:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005182:	2300      	movs	r3, #0
 8005184:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8005186:	2300      	movs	r3, #0
 8005188:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 800518a:	2300      	movs	r3, #0
 800518c:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 800518e:	79bb      	ldrb	r3, [r7, #6]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d003      	beq.n	800519c <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800519a:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 800519c:	2202      	movs	r2, #2
 800519e:	2101      	movs	r1, #1
 80051a0:	68f8      	ldr	r0, [r7, #12]
 80051a2:	f002 fd29 	bl	8007bf8 <VL53L0X_WrByte>
 80051a6:	4603      	mov	r3, r0
 80051a8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 80051aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d105      	bne.n	80051be <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 80051b2:	2100      	movs	r1, #0
 80051b4:	68f8      	ldr	r0, [r7, #12]
 80051b6:	f7ff fe9c 	bl	8004ef2 <VL53L0X_perform_single_ref_calibration>
 80051ba:	4603      	mov	r3, r0
 80051bc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 80051be:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d115      	bne.n	80051f2 <VL53L0X_perform_phase_calibration+0x8a>
 80051c6:	79fb      	ldrb	r3, [r7, #7]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d112      	bne.n	80051f2 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 80051cc:	7d39      	ldrb	r1, [r7, #20]
 80051ce:	7d7a      	ldrb	r2, [r7, #21]
 80051d0:	2301      	movs	r3, #1
 80051d2:	9303      	str	r3, [sp, #12]
 80051d4:	2300      	movs	r3, #0
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	9301      	str	r3, [sp, #4]
 80051dc:	f107 0313 	add.w	r3, r7, #19
 80051e0:	9300      	str	r3, [sp, #0]
 80051e2:	460b      	mov	r3, r1
 80051e4:	2101      	movs	r1, #1
 80051e6:	68f8      	ldr	r0, [r7, #12]
 80051e8:	f7ff febe 	bl	8004f68 <VL53L0X_ref_calibration_io>
 80051ec:	4603      	mov	r3, r0
 80051ee:	75fb      	strb	r3, [r7, #23]
 80051f0:	e002      	b.n	80051f8 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	2200      	movs	r2, #0
 80051f6:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 80051f8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d112      	bne.n	8005226 <VL53L0X_perform_phase_calibration+0xbe>
 8005200:	79bb      	ldrb	r3, [r7, #6]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00f      	beq.n	8005226 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005206:	7dbb      	ldrb	r3, [r7, #22]
 8005208:	461a      	mov	r2, r3
 800520a:	2101      	movs	r1, #1
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f002 fcf3 	bl	8007bf8 <VL53L0X_WrByte>
 8005212:	4603      	mov	r3, r0
 8005214:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d103      	bne.n	8005226 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	7dba      	ldrb	r2, [r7, #22]
 8005222:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8005226:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800522a:	4618      	mov	r0, r3
 800522c:	3718      	adds	r7, #24
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b086      	sub	sp, #24
 8005236:	af00      	add	r7, sp, #0
 8005238:	60f8      	str	r0, [r7, #12]
 800523a:	60b9      	str	r1, [r7, #8]
 800523c:	607a      	str	r2, [r7, #4]
 800523e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005240:	2300      	movs	r3, #0
 8005242:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800524e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 8005250:	78fa      	ldrb	r2, [r7, #3]
 8005252:	2300      	movs	r3, #0
 8005254:	68b9      	ldr	r1, [r7, #8]
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f7ff ff1f 	bl	800509a <VL53L0X_perform_vhv_calibration>
 800525c:	4603      	mov	r3, r0
 800525e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8005260:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d107      	bne.n	8005278 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 8005268:	78fa      	ldrb	r2, [r7, #3]
 800526a:	2300      	movs	r3, #0
 800526c:	6879      	ldr	r1, [r7, #4]
 800526e:	68f8      	ldr	r0, [r7, #12]
 8005270:	f7ff ff7a 	bl	8005168 <VL53L0X_perform_phase_calibration>
 8005274:	4603      	mov	r3, r0
 8005276:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 8005278:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d10f      	bne.n	80052a0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8005280:	7dbb      	ldrb	r3, [r7, #22]
 8005282:	461a      	mov	r2, r3
 8005284:	2101      	movs	r1, #1
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	f002 fcb6 	bl	8007bf8 <VL53L0X_WrByte>
 800528c:	4603      	mov	r3, r0
 800528e:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8005290:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005294:	2b00      	cmp	r3, #0
 8005296:	d103      	bne.n	80052a0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	7dba      	ldrb	r2, [r7, #22]
 800529c:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 80052a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80052b4:	2300      	movs	r3, #0
 80052b6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 80052b8:	2300      	movs	r3, #0
 80052ba:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 80052bc:	2300      	movs	r3, #0
 80052be:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80052c0:	f107 030f 	add.w	r3, r7, #15
 80052c4:	4619      	mov	r1, r3
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f7fe fe02 	bl	8003ed0 <VL53L0X_GetMeasurementDataReady>
 80052cc:	4603      	mov	r3, r0
 80052ce:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 80052d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10f      	bne.n	80052f8 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 80052d8:	7bfb      	ldrb	r3, [r7, #15]
 80052da:	2b01      	cmp	r3, #1
 80052dc:	d00e      	beq.n	80052fc <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	3301      	adds	r3, #1
 80052e2:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	2bc7      	cmp	r3, #199	; 0xc7
 80052e8:	d902      	bls.n	80052f0 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 80052ea:	23f9      	movs	r3, #249	; 0xf9
 80052ec:	75fb      	strb	r3, [r7, #23]
			break;
 80052ee:	e006      	b.n	80052fe <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f002 fd03 	bl	8007cfc <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 80052f6:	e7e3      	b.n	80052c0 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 80052f8:	bf00      	nop
 80052fa:	e000      	b.n	80052fe <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 80052fc:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 80052fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3718      	adds	r7, #24
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}

0800530a <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800530a:	b480      	push	{r7}
 800530c:	b085      	sub	sp, #20
 800530e:	af00      	add	r7, sp, #0
 8005310:	4603      	mov	r3, r0
 8005312:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	3301      	adds	r3, #1
 800531c:	b2db      	uxtb	r3, r3
 800531e:	005b      	lsls	r3, r3, #1
 8005320:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 8005322:	7bfb      	ldrb	r3, [r7, #15]
}
 8005324:	4618      	mov	r0, r3
 8005326:	3714      	adds	r7, #20
 8005328:	46bd      	mov	sp, r7
 800532a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532e:	4770      	bx	lr

08005330 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 8005330:	b480      	push	{r7}
 8005332:	b085      	sub	sp, #20
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	085b      	lsrs	r3, r3, #1
 8005342:	b2db      	uxtb	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 8005348:	7bfb      	ldrb	r3, [r7, #15]
}
 800534a:	4618      	mov	r0, r3
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 8005356:	b480      	push	{r7}
 8005358:	b085      	sub	sp, #20
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800535e:	2300      	movs	r3, #0
 8005360:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 8005362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005366:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 8005368:	e002      	b.n	8005370 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	089b      	lsrs	r3, r3, #2
 800536e:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 8005370:	68ba      	ldr	r2, [r7, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	429a      	cmp	r2, r3
 8005376:	d8f8      	bhi.n	800536a <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 8005378:	e017      	b.n	80053aa <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	4413      	add	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	429a      	cmp	r2, r3
 8005384:	d30b      	bcc.n	800539e <VL53L0X_isqrt+0x48>
			num -= res + bit;
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	4413      	add	r3, r2
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	1ad3      	subs	r3, r2, r3
 8005390:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	085b      	lsrs	r3, r3, #1
 8005396:	68ba      	ldr	r2, [r7, #8]
 8005398:	4413      	add	r3, r2
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	e002      	b.n	80053a4 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	085b      	lsrs	r3, r3, #1
 80053a2:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d1e4      	bne.n	800537a <VL53L0X_isqrt+0x24>
	}

	return res;
 80053b0:	68fb      	ldr	r3, [r7, #12]
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr

080053be <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 80053be:	b580      	push	{r7, lr}
 80053c0:	b086      	sub	sp, #24
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2183      	movs	r1, #131	; 0x83
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f002 fc12 	bl	8007bf8 <VL53L0X_WrByte>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	4313      	orrs	r3, r2
 80053dc:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 80053de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d11c      	bne.n	8005420 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 80053ea:	f107 030f 	add.w	r3, r7, #15
 80053ee:	461a      	mov	r2, r3
 80053f0:	2183      	movs	r1, #131	; 0x83
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f002 fb05 	bl	8007a02 <VL53L0X_RdByte>
 80053f8:	4603      	mov	r3, r0
 80053fa:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <VL53L0X_device_read_strobe+0x58>
 8005402:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d105      	bne.n	8005416 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	3301      	adds	r3, #1
 800540e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	2bc7      	cmp	r3, #199	; 0xc7
 8005414:	d9e9      	bls.n	80053ea <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	2bc7      	cmp	r3, #199	; 0xc7
 800541a:	d901      	bls.n	8005420 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 800541c:	23f9      	movs	r3, #249	; 0xf9
 800541e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 8005420:	2201      	movs	r2, #1
 8005422:	2183      	movs	r1, #131	; 0x83
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f002 fbe7 	bl	8007bf8 <VL53L0X_WrByte>
 800542a:	4603      	mov	r3, r0
 800542c:	461a      	mov	r2, r3
 800542e:	7dfb      	ldrb	r3, [r7, #23]
 8005430:	4313      	orrs	r3, r2
 8005432:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 8005434:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8005438:	4618      	mov	r0, r3
 800543a:	3718      	adds	r7, #24
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b098      	sub	sp, #96	; 0x60
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	460b      	mov	r3, r1
 800544a:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800544c:	2300      	movs	r3, #0
 800544e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800545e:	2300      	movs	r3, #0
 8005460:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 8005462:	2300      	movs	r3, #0
 8005464:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800546a:	2300      	movs	r3, #0
 800546c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 8005470:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005474:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 8005476:	2300      	movs	r3, #0
 8005478:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800547a:	2300      	movs	r3, #0
 800547c:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800547e:	2300      	movs	r3, #0
 8005480:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 8005488:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800548c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005490:	2b07      	cmp	r3, #7
 8005492:	f000 8408 	beq.w	8005ca6 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005496:	2201      	movs	r2, #1
 8005498:	2180      	movs	r1, #128	; 0x80
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f002 fbac 	bl	8007bf8 <VL53L0X_WrByte>
 80054a0:	4603      	mov	r3, r0
 80054a2:	461a      	mov	r2, r3
 80054a4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054a8:	4313      	orrs	r3, r2
 80054aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 80054ae:	2201      	movs	r2, #1
 80054b0:	21ff      	movs	r1, #255	; 0xff
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f002 fba0 	bl	8007bf8 <VL53L0X_WrByte>
 80054b8:	4603      	mov	r3, r0
 80054ba:	461a      	mov	r2, r3
 80054bc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054c0:	4313      	orrs	r3, r2
 80054c2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80054c6:	2200      	movs	r2, #0
 80054c8:	2100      	movs	r1, #0
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f002 fb94 	bl	8007bf8 <VL53L0X_WrByte>
 80054d0:	4603      	mov	r3, r0
 80054d2:	461a      	mov	r2, r3
 80054d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054d8:	4313      	orrs	r3, r2
 80054da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 80054de:	2206      	movs	r2, #6
 80054e0:	21ff      	movs	r1, #255	; 0xff
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f002 fb88 	bl	8007bf8 <VL53L0X_WrByte>
 80054e8:	4603      	mov	r3, r0
 80054ea:	461a      	mov	r2, r3
 80054ec:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80054f0:	4313      	orrs	r3, r2
 80054f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 80054f6:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80054fa:	461a      	mov	r2, r3
 80054fc:	2183      	movs	r1, #131	; 0x83
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f002 fa7f 	bl	8007a02 <VL53L0X_RdByte>
 8005504:	4603      	mov	r3, r0
 8005506:	461a      	mov	r2, r3
 8005508:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800550c:	4313      	orrs	r3, r2
 800550e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 8005512:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005516:	f043 0304 	orr.w	r3, r3, #4
 800551a:	b2db      	uxtb	r3, r3
 800551c:	461a      	mov	r2, r3
 800551e:	2183      	movs	r1, #131	; 0x83
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f002 fb69 	bl	8007bf8 <VL53L0X_WrByte>
 8005526:	4603      	mov	r3, r0
 8005528:	461a      	mov	r2, r3
 800552a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800552e:	4313      	orrs	r3, r2
 8005530:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 8005534:	2207      	movs	r2, #7
 8005536:	21ff      	movs	r1, #255	; 0xff
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f002 fb5d 	bl	8007bf8 <VL53L0X_WrByte>
 800553e:	4603      	mov	r3, r0
 8005540:	461a      	mov	r2, r3
 8005542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005546:	4313      	orrs	r3, r2
 8005548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800554c:	2201      	movs	r2, #1
 800554e:	2181      	movs	r1, #129	; 0x81
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f002 fb51 	bl	8007bf8 <VL53L0X_WrByte>
 8005556:	4603      	mov	r3, r0
 8005558:	461a      	mov	r2, r3
 800555a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800555e:	4313      	orrs	r3, r2
 8005560:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f002 fbc9 	bl	8007cfc <VL53L0X_PollingDelay>
 800556a:	4603      	mov	r3, r0
 800556c:	461a      	mov	r2, r3
 800556e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005572:	4313      	orrs	r3, r2
 8005574:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 8005578:	2201      	movs	r2, #1
 800557a:	2180      	movs	r1, #128	; 0x80
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f002 fb3b 	bl	8007bf8 <VL53L0X_WrByte>
 8005582:	4603      	mov	r3, r0
 8005584:	461a      	mov	r2, r3
 8005586:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800558a:	4313      	orrs	r3, r2
 800558c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 8005590:	78fb      	ldrb	r3, [r7, #3]
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	f000 8098 	beq.w	80056cc <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800559c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80055a0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f040 8091 	bne.w	80056cc <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 80055aa:	226b      	movs	r2, #107	; 0x6b
 80055ac:	2194      	movs	r1, #148	; 0x94
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f002 fb22 	bl	8007bf8 <VL53L0X_WrByte>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055bc:	4313      	orrs	r3, r2
 80055be:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fefb 	bl	80053be <VL53L0X_device_read_strobe>
 80055c8:	4603      	mov	r3, r0
 80055ca:	461a      	mov	r2, r3
 80055cc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055d0:	4313      	orrs	r3, r2
 80055d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80055d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80055da:	461a      	mov	r2, r3
 80055dc:	2190      	movs	r1, #144	; 0x90
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f002 face 	bl	8007b80 <VL53L0X_RdDWord>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 80055f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f4:	0a1b      	lsrs	r3, r3, #8
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055fc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 8005600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005602:	0bdb      	lsrs	r3, r3, #15
 8005604:	b2db      	uxtb	r3, r3
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800560e:	2224      	movs	r2, #36	; 0x24
 8005610:	2194      	movs	r1, #148	; 0x94
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f002 faf0 	bl	8007bf8 <VL53L0X_WrByte>
 8005618:	4603      	mov	r3, r0
 800561a:	461a      	mov	r2, r3
 800561c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005620:	4313      	orrs	r3, r2
 8005622:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7ff fec9 	bl	80053be <VL53L0X_device_read_strobe>
 800562c:	4603      	mov	r3, r0
 800562e:	461a      	mov	r2, r3
 8005630:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005634:	4313      	orrs	r3, r2
 8005636:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800563a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800563e:	461a      	mov	r2, r3
 8005640:	2190      	movs	r1, #144	; 0x90
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f002 fa9c 	bl	8007b80 <VL53L0X_RdDWord>
 8005648:	4603      	mov	r3, r0
 800564a:	461a      	mov	r2, r3
 800564c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005650:	4313      	orrs	r3, r2
 8005652:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	0e1b      	lsrs	r3, r3, #24
 800565a:	b2db      	uxtb	r3, r3
 800565c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800565e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005660:	0c1b      	lsrs	r3, r3, #16
 8005662:	b2db      	uxtb	r3, r3
 8005664:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	0a1b      	lsrs	r3, r3, #8
 800566a:	b2db      	uxtb	r3, r3
 800566c:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	b2db      	uxtb	r3, r3
 8005672:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 8005674:	2225      	movs	r2, #37	; 0x25
 8005676:	2194      	movs	r1, #148	; 0x94
 8005678:	6878      	ldr	r0, [r7, #4]
 800567a:	f002 fabd 	bl	8007bf8 <VL53L0X_WrByte>
 800567e:	4603      	mov	r3, r0
 8005680:	461a      	mov	r2, r3
 8005682:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005686:	4313      	orrs	r3, r2
 8005688:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fe96 	bl	80053be <VL53L0X_device_read_strobe>
 8005692:	4603      	mov	r3, r0
 8005694:	461a      	mov	r2, r3
 8005696:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800569a:	4313      	orrs	r3, r2
 800569c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80056a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80056a4:	461a      	mov	r2, r3
 80056a6:	2190      	movs	r1, #144	; 0x90
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f002 fa69 	bl	8007b80 <VL53L0X_RdDWord>
 80056ae:	4603      	mov	r3, r0
 80056b0:	461a      	mov	r2, r3
 80056b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 80056bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056be:	0e1b      	lsrs	r3, r3, #24
 80056c0:	b2db      	uxtb	r3, r3
 80056c2:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 80056c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c6:	0c1b      	lsrs	r3, r3, #16
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 80056cc:	78fb      	ldrb	r3, [r7, #3]
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f000 8189 	beq.w	80059ea <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 80056d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80056dc:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	f040 8182 	bne.w	80059ea <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 80056e6:	2202      	movs	r2, #2
 80056e8:	2194      	movs	r1, #148	; 0x94
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f002 fa84 	bl	8007bf8 <VL53L0X_WrByte>
 80056f0:	4603      	mov	r3, r0
 80056f2:	461a      	mov	r2, r3
 80056f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80056f8:	4313      	orrs	r3, r2
 80056fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7ff fe5d 	bl	80053be <VL53L0X_device_read_strobe>
 8005704:	4603      	mov	r3, r0
 8005706:	461a      	mov	r2, r3
 8005708:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800570c:	4313      	orrs	r3, r2
 800570e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 8005712:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8005716:	461a      	mov	r2, r3
 8005718:	2190      	movs	r1, #144	; 0x90
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f002 f971 	bl	8007a02 <VL53L0X_RdByte>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005728:	4313      	orrs	r3, r2
 800572a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800572e:	227b      	movs	r2, #123	; 0x7b
 8005730:	2194      	movs	r1, #148	; 0x94
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f002 fa60 	bl	8007bf8 <VL53L0X_WrByte>
 8005738:	4603      	mov	r3, r0
 800573a:	461a      	mov	r2, r3
 800573c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005740:	4313      	orrs	r3, r2
 8005742:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7ff fe39 	bl	80053be <VL53L0X_device_read_strobe>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005754:	4313      	orrs	r3, r2
 8005756:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800575a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800575e:	461a      	mov	r2, r3
 8005760:	2190      	movs	r1, #144	; 0x90
 8005762:	6878      	ldr	r0, [r7, #4]
 8005764:	f002 f94d 	bl	8007a02 <VL53L0X_RdByte>
 8005768:	4603      	mov	r3, r0
 800576a:	461a      	mov	r2, r3
 800576c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005770:	4313      	orrs	r3, r2
 8005772:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 8005776:	2277      	movs	r2, #119	; 0x77
 8005778:	2194      	movs	r1, #148	; 0x94
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f002 fa3c 	bl	8007bf8 <VL53L0X_WrByte>
 8005780:	4603      	mov	r3, r0
 8005782:	461a      	mov	r2, r3
 8005784:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005788:	4313      	orrs	r3, r2
 800578a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	f7ff fe15 	bl	80053be <VL53L0X_device_read_strobe>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800579c:	4313      	orrs	r3, r2
 800579e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80057a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80057a6:	461a      	mov	r2, r3
 80057a8:	2190      	movs	r1, #144	; 0x90
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f002 f9e8 	bl	8007b80 <VL53L0X_RdDWord>
 80057b0:	4603      	mov	r3, r0
 80057b2:	461a      	mov	r2, r3
 80057b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80057b8:	4313      	orrs	r3, r2
 80057ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 80057be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c0:	0e5b      	lsrs	r3, r3, #25
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	0c9b      	lsrs	r3, r3, #18
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 80057da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057dc:	0adb      	lsrs	r3, r3, #11
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	091b      	lsrs	r3, r3, #4
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 80057f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	f003 0378 	and.w	r3, r3, #120	; 0x78
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 8005808:	2278      	movs	r2, #120	; 0x78
 800580a:	2194      	movs	r1, #148	; 0x94
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f002 f9f3 	bl	8007bf8 <VL53L0X_WrByte>
 8005812:	4603      	mov	r3, r0
 8005814:	461a      	mov	r2, r3
 8005816:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800581a:	4313      	orrs	r3, r2
 800581c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f7ff fdcc 	bl	80053be <VL53L0X_device_read_strobe>
 8005826:	4603      	mov	r3, r0
 8005828:	461a      	mov	r2, r3
 800582a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800582e:	4313      	orrs	r3, r2
 8005830:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005834:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005838:	461a      	mov	r2, r3
 800583a:	2190      	movs	r1, #144	; 0x90
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f002 f99f 	bl	8007b80 <VL53L0X_RdDWord>
 8005842:	4603      	mov	r3, r0
 8005844:	461a      	mov	r2, r3
 8005846:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800584a:	4313      	orrs	r3, r2
 800584c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	0f5b      	lsrs	r3, r3, #29
 8005854:	b2db      	uxtb	r3, r3
 8005856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800585a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800585c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005860:	4413      	add	r3, r2
 8005862:	b2db      	uxtb	r3, r3
 8005864:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 8005866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005868:	0d9b      	lsrs	r3, r3, #22
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005870:	b2db      	uxtb	r3, r3
 8005872:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	0bdb      	lsrs	r3, r3, #15
 8005878:	b2db      	uxtb	r3, r3
 800587a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800587e:	b2db      	uxtb	r3, r3
 8005880:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 8005882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005884:	0a1b      	lsrs	r3, r3, #8
 8005886:	b2db      	uxtb	r3, r3
 8005888:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800588c:	b2db      	uxtb	r3, r3
 800588e:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 8005890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005892:	085b      	lsrs	r3, r3, #1
 8005894:	b2db      	uxtb	r3, r3
 8005896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800589a:	b2db      	uxtb	r3, r3
 800589c:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	b2db      	uxtb	r3, r3
 80058a2:	019b      	lsls	r3, r3, #6
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 80058b0:	2279      	movs	r2, #121	; 0x79
 80058b2:	2194      	movs	r1, #148	; 0x94
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f002 f99f 	bl	8007bf8 <VL53L0X_WrByte>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
 80058be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058c2:	4313      	orrs	r3, r2
 80058c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff fd78 	bl	80053be <VL53L0X_device_read_strobe>
 80058ce:	4603      	mov	r3, r0
 80058d0:	461a      	mov	r2, r3
 80058d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 80058dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80058e0:	461a      	mov	r2, r3
 80058e2:	2190      	movs	r1, #144	; 0x90
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f002 f94b 	bl	8007b80 <VL53L0X_RdDWord>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80058f2:	4313      	orrs	r3, r2
 80058f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	0e9b      	lsrs	r3, r3, #26
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005902:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 8005904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005908:	4413      	add	r3, r2
 800590a:	b2db      	uxtb	r3, r3
 800590c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005910:	0cdb      	lsrs	r3, r3, #19
 8005912:	b2db      	uxtb	r3, r3
 8005914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005918:	b2db      	uxtb	r3, r3
 800591a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800591c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591e:	0b1b      	lsrs	r3, r3, #12
 8005920:	b2db      	uxtb	r3, r3
 8005922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005926:	b2db      	uxtb	r3, r3
 8005928:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	b2db      	uxtb	r3, r3
 8005930:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005934:	b2db      	uxtb	r3, r3
 8005936:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	b2db      	uxtb	r3, r3
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	b2db      	uxtb	r3, r3
 8005940:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 8005944:	b2db      	uxtb	r3, r3
 8005946:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800594a:	227a      	movs	r2, #122	; 0x7a
 800594c:	2194      	movs	r1, #148	; 0x94
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f002 f952 	bl	8007bf8 <VL53L0X_WrByte>
 8005954:	4603      	mov	r3, r0
 8005956:	461a      	mov	r2, r3
 8005958:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800595c:	4313      	orrs	r3, r2
 800595e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7ff fd2b 	bl	80053be <VL53L0X_device_read_strobe>
 8005968:	4603      	mov	r3, r0
 800596a:	461a      	mov	r2, r3
 800596c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005970:	4313      	orrs	r3, r2
 8005972:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005976:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800597a:	461a      	mov	r2, r3
 800597c:	2190      	movs	r1, #144	; 0x90
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f002 f8fe 	bl	8007b80 <VL53L0X_RdDWord>
 8005984:	4603      	mov	r3, r0
 8005986:	461a      	mov	r2, r3
 8005988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800598c:	4313      	orrs	r3, r2
 800598e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 8005992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005994:	0f9b      	lsrs	r3, r3, #30
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800599c:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800599e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80059a2:	4413      	add	r3, r2
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 80059a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059aa:	0ddb      	lsrs	r3, r3, #23
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 80059b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 80059c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059c6:	0a5b      	lsrs	r3, r3, #9
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 80059d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d6:	089b      	lsrs	r3, r3, #2
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 80059e4:	2300      	movs	r3, #0
 80059e6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 80f1 	beq.w	8005bd8 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 80059f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80059fa:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	f040 80ea 	bne.w	8005bd8 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 8005a04:	227b      	movs	r2, #123	; 0x7b
 8005a06:	2194      	movs	r1, #148	; 0x94
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f002 f8f5 	bl	8007bf8 <VL53L0X_WrByte>
 8005a0e:	4603      	mov	r3, r0
 8005a10:	461a      	mov	r2, r3
 8005a12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a16:	4313      	orrs	r3, r2
 8005a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f7ff fcce 	bl	80053be <VL53L0X_device_read_strobe>
 8005a22:	4603      	mov	r3, r0
 8005a24:	461a      	mov	r2, r3
 8005a26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 8005a30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005a34:	461a      	mov	r2, r3
 8005a36:	2190      	movs	r1, #144	; 0x90
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f002 f8a1 	bl	8007b80 <VL53L0X_RdDWord>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	461a      	mov	r2, r3
 8005a42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a46:	4313      	orrs	r3, r2
 8005a48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 8005a4c:	227c      	movs	r2, #124	; 0x7c
 8005a4e:	2194      	movs	r1, #148	; 0x94
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f002 f8d1 	bl	8007bf8 <VL53L0X_WrByte>
 8005a56:	4603      	mov	r3, r0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f7ff fcaa 	bl	80053be <VL53L0X_device_read_strobe>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a72:	4313      	orrs	r3, r2
 8005a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 8005a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2190      	movs	r1, #144	; 0x90
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f002 f87d 	bl	8007b80 <VL53L0X_RdDWord>
 8005a86:	4603      	mov	r3, r0
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 8005a94:	2273      	movs	r2, #115	; 0x73
 8005a96:	2194      	movs	r1, #148	; 0x94
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f002 f8ad 	bl	8007bf8 <VL53L0X_WrByte>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	461a      	mov	r2, r3
 8005aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f7ff fc86 	bl	80053be <VL53L0X_device_read_strobe>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	461a      	mov	r2, r3
 8005ab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005aba:	4313      	orrs	r3, r2
 8005abc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005ac0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	2190      	movs	r1, #144	; 0x90
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f002 f859 	bl	8007b80 <VL53L0X_RdDWord>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 8005ae4:	2274      	movs	r2, #116	; 0x74
 8005ae6:	2194      	movs	r1, #148	; 0x94
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f002 f885 	bl	8007bf8 <VL53L0X_WrByte>
 8005aee:	4603      	mov	r3, r0
 8005af0:	461a      	mov	r2, r3
 8005af2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f7ff fc5e 	bl	80053be <VL53L0X_device_read_strobe>
 8005b02:	4603      	mov	r3, r0
 8005b04:	461a      	mov	r2, r3
 8005b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b14:	461a      	mov	r2, r3
 8005b16:	2190      	movs	r1, #144	; 0x90
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f002 f831 	bl	8007b80 <VL53L0X_RdDWord>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	461a      	mov	r2, r3
 8005b22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 8005b30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b32:	4313      	orrs	r3, r2
 8005b34:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 8005b36:	2275      	movs	r2, #117	; 0x75
 8005b38:	2194      	movs	r1, #148	; 0x94
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f002 f85c 	bl	8007bf8 <VL53L0X_WrByte>
 8005b40:	4603      	mov	r3, r0
 8005b42:	461a      	mov	r2, r3
 8005b44:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fc35 	bl	80053be <VL53L0X_device_read_strobe>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005b62:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005b66:	461a      	mov	r2, r3
 8005b68:	2190      	movs	r1, #144	; 0x90
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f002 f808 	bl	8007b80 <VL53L0X_RdDWord>
 8005b70:	4603      	mov	r3, r0
 8005b72:	461a      	mov	r2, r3
 8005b74:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 8005b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b80:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 8005b86:	2276      	movs	r2, #118	; 0x76
 8005b88:	2194      	movs	r1, #148	; 0x94
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f002 f834 	bl	8007bf8 <VL53L0X_WrByte>
 8005b90:	4603      	mov	r3, r0
 8005b92:	461a      	mov	r2, r3
 8005b94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7ff fc0d 	bl	80053be <VL53L0X_device_read_strobe>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bac:	4313      	orrs	r3, r2
 8005bae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 8005bb2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	2190      	movs	r1, #144	; 0x90
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 ffe0 	bl	8007b80 <VL53L0X_RdDWord>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 8005bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd0:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 8005bd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 8005bd8:	2200      	movs	r2, #0
 8005bda:	2181      	movs	r1, #129	; 0x81
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f002 f80b 	bl	8007bf8 <VL53L0X_WrByte>
 8005be2:	4603      	mov	r3, r0
 8005be4:	461a      	mov	r2, r3
 8005be6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 8005bf0:	2206      	movs	r2, #6
 8005bf2:	21ff      	movs	r1, #255	; 0xff
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f001 ffff 	bl	8007bf8 <VL53L0X_WrByte>
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c02:	4313      	orrs	r3, r2
 8005c04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 8005c08:	f107 0337 	add.w	r3, r7, #55	; 0x37
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	2183      	movs	r1, #131	; 0x83
 8005c10:	6878      	ldr	r0, [r7, #4]
 8005c12:	f001 fef6 	bl	8007a02 <VL53L0X_RdByte>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 8005c24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005c28:	f023 0304 	bic.w	r3, r3, #4
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2183      	movs	r1, #131	; 0x83
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 ffe0 	bl	8007bf8 <VL53L0X_WrByte>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c40:	4313      	orrs	r3, r2
 8005c42:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8005c46:	2201      	movs	r2, #1
 8005c48:	21ff      	movs	r1, #255	; 0xff
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f001 ffd4 	bl	8007bf8 <VL53L0X_WrByte>
 8005c50:	4603      	mov	r3, r0
 8005c52:	461a      	mov	r2, r3
 8005c54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8005c5e:	2201      	movs	r2, #1
 8005c60:	2100      	movs	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f001 ffc8 	bl	8007bf8 <VL53L0X_WrByte>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	461a      	mov	r2, r3
 8005c6c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c70:	4313      	orrs	r3, r2
 8005c72:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8005c76:	2200      	movs	r2, #0
 8005c78:	21ff      	movs	r1, #255	; 0xff
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f001 ffbc 	bl	8007bf8 <VL53L0X_WrByte>
 8005c80:	4603      	mov	r3, r0
 8005c82:	461a      	mov	r2, r3
 8005c84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8005c8e:	2200      	movs	r2, #0
 8005c90:	2180      	movs	r1, #128	; 0x80
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f001 ffb0 	bl	8007bf8 <VL53L0X_WrByte>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8005ca6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f040 808f 	bne.w	8005dce <VL53L0X_get_info_from_device+0x98e>
 8005cb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cb4:	2b07      	cmp	r3, #7
 8005cb6:	f000 808a 	beq.w	8005dce <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d024      	beq.n	8005d0e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 8005cc4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005cc8:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d11e      	bne.n	8005d0e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 8005cd6:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8005ce0:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ce8:	e00e      	b.n	8005d08 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 8005cea:	f107 0208 	add.w	r2, r7, #8
 8005cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf0:	4413      	add	r3, r2
 8005cf2:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 8005cfe:	460a      	mov	r2, r1
 8005d00:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 8005d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d04:	3301      	adds	r3, #1
 8005d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	dded      	ble.n	8005cea <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 8005d0e:	78fb      	ldrb	r3, [r7, #3]
 8005d10:	f003 0302 	and.w	r3, r3, #2
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d018      	beq.n	8005d4a <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 8005d18:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d1c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d112      	bne.n	8005d4a <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d24:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d2e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	33f3      	adds	r3, #243	; 0xf3
 8005d3c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 8005d3e:	f107 0310 	add.w	r3, r7, #16
 8005d42:	4619      	mov	r1, r3
 8005d44:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d46:	f008 fc23 	bl	800e590 <strcpy>

		}

		if (((option & 4) == 4) &&
 8005d4a:	78fb      	ldrb	r3, [r7, #3]
 8005d4c:	f003 0304 	and.w	r3, r3, #4
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d030      	beq.n	8005db6 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 8005d54:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005d58:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d12a      	bne.n	8005db6 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 8005d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d72:	025b      	lsls	r3, r3, #9
 8005d74:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d7a:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 8005d84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d011      	beq.n	8005dae <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 8005d8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d8e:	1ad3      	subs	r3, r2, r3
 8005d90:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 8005d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005d98:	fb02 f303 	mul.w	r3, r2, r3
 8005d9c:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 8005d9e:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 8005da2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8005da6:	425b      	negs	r3, r3
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 8005dae:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 8005db6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8005dba:	78fb      	ldrb	r3, [r7, #3]
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 8005dc4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8005dce:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3760      	adds	r7, #96	; 0x60
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 8005dda:	b480      	push	{r7}
 8005ddc:	b087      	sub	sp, #28
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	460b      	mov	r3, r1
 8005de4:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 8005de6:	f240 6277 	movw	r2, #1655	; 0x677
 8005dea:	f04f 0300 	mov.w	r3, #0
 8005dee:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 8005df2:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8005df6:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 8005df8:	78fb      	ldrb	r3, [r7, #3]
 8005dfa:	68fa      	ldr	r2, [r7, #12]
 8005dfc:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	fb02 f303 	mul.w	r3, r2, r3
 8005e06:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 8005e08:	68bb      	ldr	r3, [r7, #8]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 8005e16:	b480      	push	{r7}
 8005e18:	b087      	sub	sp, #28
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 8005e22:	2300      	movs	r3, #0
 8005e24:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d017      	beq.n	8005e60 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005e36:	e005      	b.n	8005e44 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	085b      	lsrs	r3, r3, #1
 8005e3c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 8005e3e:	89fb      	ldrh	r3, [r7, #14]
 8005e40:	3301      	adds	r3, #1
 8005e42:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f4      	bne.n	8005e38 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 8005e4e:	89fb      	ldrh	r3, [r7, #14]
 8005e50:	021b      	lsls	r3, r3, #8
 8005e52:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 8005e5c:	4413      	add	r3, r2
 8005e5e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 8005e60:	8afb      	ldrh	r3, [r7, #22]

}
 8005e62:	4618      	mov	r0, r3
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6c:	4770      	bx	lr

08005e6e <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 8005e6e:	b480      	push	{r7}
 8005e70:	b085      	sub	sp, #20
 8005e72:	af00      	add	r7, sp, #0
 8005e74:	4603      	mov	r3, r0
 8005e76:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e7c:	88fb      	ldrh	r3, [r7, #6]
 8005e7e:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 8005e80:	88fa      	ldrh	r2, [r7, #6]
 8005e82:	0a12      	lsrs	r2, r2, #8
 8005e84:	b292      	uxth	r2, r2
 8005e86:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 8005e88:	3301      	adds	r3, #1
 8005e8a:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
	...

08005e9c <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 8005eaa:	2300      	movs	r3, #0
 8005eac:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	68f8      	ldr	r0, [r7, #12]
 8005eb4:	f7ff ff91 	bl	8005dda <VL53L0X_calc_macro_period_ps>
 8005eb8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005ec0:	4a0a      	ldr	r2, [pc, #40]	; (8005eec <VL53L0X_calc_timeout_mclks+0x50>)
 8005ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec6:	099b      	lsrs	r3, r3, #6
 8005ec8:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005ed0:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	085b      	lsrs	r3, r3, #1
 8005ed8:	441a      	add	r2, r3
	timeout_period_mclks =
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ee0:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 8005ee2:	69fb      	ldr	r3, [r7, #28]
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	10624dd3 	.word	0x10624dd3

08005ef0 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b086      	sub	sp, #24
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	460b      	mov	r3, r1
 8005efa:	807b      	strh	r3, [r7, #2]
 8005efc:	4613      	mov	r3, r2
 8005efe:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 8005f04:	787b      	ldrb	r3, [r7, #1]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff ff66 	bl	8005dda <VL53L0X_calc_macro_period_ps>
 8005f0e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8005f16:	4a0b      	ldr	r2, [pc, #44]	; (8005f44 <VL53L0X_calc_timeout_us+0x54>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	099b      	lsrs	r3, r3, #6
 8005f1e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 8005f20:	887b      	ldrh	r3, [r7, #2]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	085b      	lsrs	r3, r3, #1
 8005f2c:	4413      	add	r3, r2
	actual_timeout_period_us =
 8005f2e:	4a05      	ldr	r2, [pc, #20]	; (8005f44 <VL53L0X_calc_timeout_us+0x54>)
 8005f30:	fba2 2303 	umull	r2, r3, r2, r3
 8005f34:	099b      	lsrs	r3, r3, #6
 8005f36:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 8005f38:	697b      	ldr	r3, [r7, #20]
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3718      	adds	r7, #24
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}
 8005f42:	bf00      	nop
 8005f44:	10624dd3 	.word	0x10624dd3

08005f48 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	60f8      	str	r0, [r7, #12]
 8005f50:	460b      	mov	r3, r1
 8005f52:	607a      	str	r2, [r7, #4]
 8005f54:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 8005f62:	2300      	movs	r3, #0
 8005f64:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <get_sequence_step_timeout+0x38>
 8005f74:	7afb      	ldrb	r3, [r7, #11]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d002      	beq.n	8005f80 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 8005f7a:	7afb      	ldrb	r3, [r7, #11]
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d128      	bne.n	8005fd2 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005f80:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005f84:	461a      	mov	r2, r3
 8005f86:	2100      	movs	r1, #0
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7fd fa73 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 8005f94:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d109      	bne.n	8005fb0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 8005f9c:	f107 0320 	add.w	r3, r7, #32
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	2146      	movs	r1, #70	; 0x46
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f001 fd2c 	bl	8007a02 <VL53L0X_RdByte>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 8005fb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f7ff ff59 	bl	8005e6e <VL53L0X_decode_timeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8005fc0:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8005fc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	68f8      	ldr	r0, [r7, #12]
 8005fca:	f7ff ff91 	bl	8005ef0 <VL53L0X_calc_timeout_us>
 8005fce:	62b8      	str	r0, [r7, #40]	; 0x28
 8005fd0:	e092      	b.n	80060f8 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 8005fd2:	7afb      	ldrb	r3, [r7, #11]
 8005fd4:	2b03      	cmp	r3, #3
 8005fd6:	d135      	bne.n	8006044 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005fd8:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005fdc:	461a      	mov	r2, r3
 8005fde:	2100      	movs	r1, #0
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f7fd fa47 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 8005fec:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f040 8081 	bne.w	80060f8 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8005ff6:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	f7fd fa38 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 8006004:	4603      	mov	r3, r0
 8006006:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800600a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800600e:	2b00      	cmp	r3, #0
 8006010:	d109      	bne.n	8006026 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 8006012:	f107 031e 	add.w	r3, r7, #30
 8006016:	461a      	mov	r2, r3
 8006018:	2151      	movs	r1, #81	; 0x51
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f001 fd78 	bl	8007b10 <VL53L0X_RdWord>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006026:	8bfb      	ldrh	r3, [r7, #30]
 8006028:	4618      	mov	r0, r3
 800602a:	f7ff ff20 	bl	8005e6e <VL53L0X_decode_timeout>
 800602e:	4603      	mov	r3, r0
 8006030:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 8006032:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8006036:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006038:	4619      	mov	r1, r3
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f7ff ff58 	bl	8005ef0 <VL53L0X_calc_timeout_us>
 8006040:	62b8      	str	r0, [r7, #40]	; 0x28
 8006042:	e059      	b.n	80060f8 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	2b04      	cmp	r3, #4
 8006048:	d156      	bne.n	80060f8 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800604a:	f107 0314 	add.w	r3, r7, #20
 800604e:	4619      	mov	r1, r3
 8006050:	68f8      	ldr	r0, [r7, #12]
 8006052:	f7fd fb1b 	bl	800368c <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 8006056:	2300      	movs	r3, #0
 8006058:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800605a:	7dfb      	ldrb	r3, [r7, #23]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d01d      	beq.n	800609c <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006060:	f107 0321 	add.w	r3, r7, #33	; 0x21
 8006064:	461a      	mov	r2, r3
 8006066:	2100      	movs	r1, #0
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7fd fa03 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 8006074:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8006078:	2b00      	cmp	r3, #0
 800607a:	d10f      	bne.n	800609c <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800607c:	f107 031e 	add.w	r3, r7, #30
 8006080:	461a      	mov	r2, r3
 8006082:	2151      	movs	r1, #81	; 0x51
 8006084:	68f8      	ldr	r0, [r7, #12]
 8006086:	f001 fd43 	bl	8007b10 <VL53L0X_RdWord>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 8006090:	8bfb      	ldrh	r3, [r7, #30]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff feeb 	bl	8005e6e <VL53L0X_decode_timeout>
 8006098:	4603      	mov	r3, r0
 800609a:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800609c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d109      	bne.n	80060b8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80060a4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 80060a8:	461a      	mov	r2, r3
 80060aa:	2101      	movs	r1, #1
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7fd f9e1 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 80060b2:	4603      	mov	r3, r0
 80060b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 80060b8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d10f      	bne.n	80060e0 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 80060c0:	f107 031c 	add.w	r3, r7, #28
 80060c4:	461a      	mov	r2, r3
 80060c6:	2171      	movs	r1, #113	; 0x71
 80060c8:	68f8      	ldr	r0, [r7, #12]
 80060ca:	f001 fd21 	bl	8007b10 <VL53L0X_RdWord>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 80060d4:	8bbb      	ldrh	r3, [r7, #28]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f7ff fec9 	bl	8005e6e <VL53L0X_decode_timeout>
 80060dc:	4603      	mov	r3, r0
 80060de:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 80060e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 80060e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80060ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ee:	4619      	mov	r1, r3
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff fefd 	bl	8005ef0 <VL53L0X_calc_timeout_us>
 80060f6:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060fc:	601a      	str	r2, [r3, #0]

	return Status;
 80060fe:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8006102:	4618      	mov	r0, r3
 8006104:	3730      	adds	r7, #48	; 0x30
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b08a      	sub	sp, #40	; 0x28
 800610e:	af00      	add	r7, sp, #0
 8006110:	60f8      	str	r0, [r7, #12]
 8006112:	460b      	mov	r3, r1
 8006114:	607a      	str	r2, [r7, #4]
 8006116:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006118:	2300      	movs	r3, #0
 800611a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800611e:	7afb      	ldrb	r3, [r7, #11]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <set_sequence_step_timeout+0x26>
 8006124:	7afb      	ldrb	r3, [r7, #11]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d002      	beq.n	8006130 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800612a:	7afb      	ldrb	r3, [r7, #11]
 800612c:	2b02      	cmp	r3, #2
 800612e:	d138      	bne.n	80061a2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006130:	f107 031d 	add.w	r3, r7, #29
 8006134:	461a      	mov	r2, r3
 8006136:	2100      	movs	r1, #0
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f7fd f99b 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 800613e:	4603      	mov	r3, r0
 8006140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 8006144:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006148:	2b00      	cmp	r3, #0
 800614a:	d11a      	bne.n	8006182 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800614c:	7f7b      	ldrb	r3, [r7, #29]
 800614e:	461a      	mov	r2, r3
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fea2 	bl	8005e9c <VL53L0X_calc_timeout_mclks>
 8006158:	4603      	mov	r3, r0
 800615a:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800615c:	8bfb      	ldrh	r3, [r7, #30]
 800615e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006162:	d903      	bls.n	800616c <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 8006164:	23ff      	movs	r3, #255	; 0xff
 8006166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800616a:	e004      	b.n	8006176 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800616c:	8bfb      	ldrh	r3, [r7, #30]
 800616e:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 8006170:	3b01      	subs	r3, #1
 8006172:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8006176:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800617a:	b29a      	uxth	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 8006182:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006186:	2b00      	cmp	r3, #0
 8006188:	f040 80ad 	bne.w	80062e6 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800618c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006190:	461a      	mov	r2, r3
 8006192:	2146      	movs	r1, #70	; 0x46
 8006194:	68f8      	ldr	r0, [r7, #12]
 8006196:	f001 fd2f 	bl	8007bf8 <VL53L0X_WrByte>
 800619a:	4603      	mov	r3, r0
 800619c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 80061a0:	e0a1      	b.n	80062e6 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 80061a2:	7afb      	ldrb	r3, [r7, #11]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d135      	bne.n	8006214 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 80061a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d11b      	bne.n	80061e8 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 80061b0:	f107 031d 	add.w	r3, r7, #29
 80061b4:	461a      	mov	r2, r3
 80061b6:	2100      	movs	r1, #0
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7fd f95b 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 80061be:	4603      	mov	r3, r0
 80061c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 80061c4:	7f7b      	ldrb	r3, [r7, #29]
 80061c6:	461a      	mov	r2, r3
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f7ff fe66 	bl	8005e9c <VL53L0X_calc_timeout_mclks>
 80061d0:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 80061d2:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 80061d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061d6:	4618      	mov	r0, r3
 80061d8:	f7ff fe1d 	bl	8005e16 <VL53L0X_encode_timeout>
 80061dc:	4603      	mov	r3, r0
 80061de:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 80061e0:	8b7a      	ldrh	r2, [r7, #26]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 80061e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d108      	bne.n	8006202 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 80061f0:	8b7b      	ldrh	r3, [r7, #26]
 80061f2:	461a      	mov	r2, r3
 80061f4:	2151      	movs	r1, #81	; 0x51
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f001 fd22 	bl	8007c40 <VL53L0X_WrWord>
 80061fc:	4603      	mov	r3, r0
 80061fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 8006202:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006206:	2b00      	cmp	r3, #0
 8006208:	d16d      	bne.n	80062e6 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 8006212:	e068      	b.n	80062e6 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 8006214:	7afb      	ldrb	r3, [r7, #11]
 8006216:	2b04      	cmp	r3, #4
 8006218:	d162      	bne.n	80062e0 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800621a:	f107 0314 	add.w	r3, r7, #20
 800621e:	4619      	mov	r1, r3
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7fd fa33 	bl	800368c <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 8006226:	2300      	movs	r3, #0
 8006228:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800622a:	7dfb      	ldrb	r3, [r7, #23]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01d      	beq.n	800626c <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006230:	f107 031d 	add.w	r3, r7, #29
 8006234:	461a      	mov	r2, r3
 8006236:	2100      	movs	r1, #0
 8006238:	68f8      	ldr	r0, [r7, #12]
 800623a:	f7fd f91b 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 800623e:	4603      	mov	r3, r0
 8006240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 8006244:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10f      	bne.n	800626c <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800624c:	f107 031a 	add.w	r3, r7, #26
 8006250:	461a      	mov	r2, r3
 8006252:	2151      	movs	r1, #81	; 0x51
 8006254:	68f8      	ldr	r0, [r7, #12]
 8006256:	f001 fc5b 	bl	8007b10 <VL53L0X_RdWord>
 800625a:	4603      	mov	r3, r0
 800625c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 8006260:	8b7b      	ldrh	r3, [r7, #26]
 8006262:	4618      	mov	r0, r3
 8006264:	f7ff fe03 	bl	8005e6e <VL53L0X_decode_timeout>
 8006268:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800626a:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800626c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006270:	2b00      	cmp	r3, #0
 8006272:	d109      	bne.n	8006288 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 8006274:	f107 031d 	add.w	r3, r7, #29
 8006278:	461a      	mov	r2, r3
 800627a:	2101      	movs	r1, #1
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7fd f8f9 	bl	8003474 <VL53L0X_GetVcselPulsePeriod>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8006288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800628c:	2b00      	cmp	r3, #0
 800628e:	d12a      	bne.n	80062e6 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 8006290:	7f7b      	ldrb	r3, [r7, #29]
 8006292:	461a      	mov	r2, r3
 8006294:	6879      	ldr	r1, [r7, #4]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f7ff fe00 	bl	8005e9c <VL53L0X_calc_timeout_mclks>
 800629c:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 800629e:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 80062a0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80062a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a4:	4413      	add	r3, r2
 80062a6:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 80062a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff fdb3 	bl	8005e16 <VL53L0X_encode_timeout>
 80062b0:	4603      	mov	r3, r0
 80062b2:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 80062b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d108      	bne.n	80062ce <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 80062bc:	8c3b      	ldrh	r3, [r7, #32]
 80062be:	461a      	mov	r2, r3
 80062c0:	2171      	movs	r1, #113	; 0x71
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f001 fcbc 	bl	8007c40 <VL53L0X_WrWord>
 80062c8:	4603      	mov	r3, r0
 80062ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 80062ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d107      	bne.n	80062e6 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	687a      	ldr	r2, [r7, #4]
 80062da:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 80062de:	e002      	b.n	80062e6 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80062e0:	23fc      	movs	r3, #252	; 0xfc
 80062e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 80062e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3728      	adds	r7, #40	; 0x28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b08a      	sub	sp, #40	; 0x28
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
 80062fa:	460b      	mov	r3, r1
 80062fc:	70fb      	strb	r3, [r7, #3]
 80062fe:	4613      	mov	r3, r2
 8006300:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006302:	2300      	movs	r3, #0
 8006304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 8006308:	230c      	movs	r3, #12
 800630a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800630e:	2312      	movs	r3, #18
 8006310:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 8006314:	2308      	movs	r3, #8
 8006316:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800631a:	230e      	movs	r3, #14
 800631c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 8006320:	2300      	movs	r3, #0
 8006322:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 8006324:	78bb      	ldrb	r3, [r7, #2]
 8006326:	f003 0301 	and.w	r3, r3, #1
 800632a:	b2db      	uxtb	r3, r3
 800632c:	2b00      	cmp	r3, #0
 800632e:	d003      	beq.n	8006338 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006330:	23fc      	movs	r3, #252	; 0xfc
 8006332:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006336:	e020      	b.n	800637a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 8006338:	78fb      	ldrb	r3, [r7, #3]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d10d      	bne.n	800635a <VL53L0X_set_vcsel_pulse_period+0x68>
 800633e:	78ba      	ldrb	r2, [r7, #2]
 8006340:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006344:	429a      	cmp	r2, r3
 8006346:	d304      	bcc.n	8006352 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 8006348:	78ba      	ldrb	r2, [r7, #2]
 800634a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800634e:	429a      	cmp	r2, r3
 8006350:	d903      	bls.n	800635a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006352:	23fc      	movs	r3, #252	; 0xfc
 8006354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006358:	e00f      	b.n	800637a <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800635a:	78fb      	ldrb	r3, [r7, #3]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d10c      	bne.n	800637a <VL53L0X_set_vcsel_pulse_period+0x88>
 8006360:	78ba      	ldrb	r2, [r7, #2]
 8006362:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006366:	429a      	cmp	r2, r3
 8006368:	d304      	bcc.n	8006374 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800636a:	78ba      	ldrb	r2, [r7, #2]
 800636c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006370:	429a      	cmp	r2, r3
 8006372:	d902      	bls.n	800637a <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006374:	23fc      	movs	r3, #252	; 0xfc
 8006376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800637a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 8006382:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006386:	e239      	b.n	80067fc <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 8006388:	78fb      	ldrb	r3, [r7, #3]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d150      	bne.n	8006430 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800638e:	78bb      	ldrb	r3, [r7, #2]
 8006390:	2b0c      	cmp	r3, #12
 8006392:	d110      	bne.n	80063b6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 8006394:	2218      	movs	r2, #24
 8006396:	2157      	movs	r1, #87	; 0x57
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f001 fc2d 	bl	8007bf8 <VL53L0X_WrByte>
 800639e:	4603      	mov	r3, r0
 80063a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 80063a4:	2208      	movs	r2, #8
 80063a6:	2156      	movs	r1, #86	; 0x56
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fc25 	bl	8007bf8 <VL53L0X_WrByte>
 80063ae:	4603      	mov	r3, r0
 80063b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063b4:	e17f      	b.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 80063b6:	78bb      	ldrb	r3, [r7, #2]
 80063b8:	2b0e      	cmp	r3, #14
 80063ba:	d110      	bne.n	80063de <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 80063bc:	2230      	movs	r2, #48	; 0x30
 80063be:	2157      	movs	r1, #87	; 0x57
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f001 fc19 	bl	8007bf8 <VL53L0X_WrByte>
 80063c6:	4603      	mov	r3, r0
 80063c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 80063cc:	2208      	movs	r2, #8
 80063ce:	2156      	movs	r1, #86	; 0x56
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f001 fc11 	bl	8007bf8 <VL53L0X_WrByte>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063dc:	e16b      	b.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 80063de:	78bb      	ldrb	r3, [r7, #2]
 80063e0:	2b10      	cmp	r3, #16
 80063e2:	d110      	bne.n	8006406 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 80063e4:	2240      	movs	r2, #64	; 0x40
 80063e6:	2157      	movs	r1, #87	; 0x57
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	f001 fc05 	bl	8007bf8 <VL53L0X_WrByte>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 80063f4:	2208      	movs	r2, #8
 80063f6:	2156      	movs	r1, #86	; 0x56
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f001 fbfd 	bl	8007bf8 <VL53L0X_WrByte>
 80063fe:	4603      	mov	r3, r0
 8006400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006404:	e157      	b.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 8006406:	78bb      	ldrb	r3, [r7, #2]
 8006408:	2b12      	cmp	r3, #18
 800640a:	f040 8154 	bne.w	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800640e:	2250      	movs	r2, #80	; 0x50
 8006410:	2157      	movs	r1, #87	; 0x57
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f001 fbf0 	bl	8007bf8 <VL53L0X_WrByte>
 8006418:	4603      	mov	r3, r0
 800641a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800641e:	2208      	movs	r2, #8
 8006420:	2156      	movs	r1, #86	; 0x56
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f001 fbe8 	bl	8007bf8 <VL53L0X_WrByte>
 8006428:	4603      	mov	r3, r0
 800642a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800642e:	e142      	b.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 8006430:	78fb      	ldrb	r3, [r7, #3]
 8006432:	2b01      	cmp	r3, #1
 8006434:	f040 813f 	bne.w	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 8006438:	78bb      	ldrb	r3, [r7, #2]
 800643a:	2b08      	cmp	r3, #8
 800643c:	d14c      	bne.n	80064d8 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800643e:	2210      	movs	r2, #16
 8006440:	2148      	movs	r1, #72	; 0x48
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f001 fbd8 	bl	8007bf8 <VL53L0X_WrByte>
 8006448:	4603      	mov	r3, r0
 800644a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800644e:	2208      	movs	r2, #8
 8006450:	2147      	movs	r1, #71	; 0x47
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fbd0 	bl	8007bf8 <VL53L0X_WrByte>
 8006458:	4603      	mov	r3, r0
 800645a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800645e:	2202      	movs	r2, #2
 8006460:	2132      	movs	r1, #50	; 0x32
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f001 fbc8 	bl	8007bf8 <VL53L0X_WrByte>
 8006468:	4603      	mov	r3, r0
 800646a:	461a      	mov	r2, r3
 800646c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006470:	4313      	orrs	r3, r2
 8006472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 8006476:	220c      	movs	r2, #12
 8006478:	2130      	movs	r1, #48	; 0x30
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fbbc 	bl	8007bf8 <VL53L0X_WrByte>
 8006480:	4603      	mov	r3, r0
 8006482:	461a      	mov	r2, r3
 8006484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006488:	4313      	orrs	r3, r2
 800648a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800648e:	2201      	movs	r2, #1
 8006490:	21ff      	movs	r1, #255	; 0xff
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fbb0 	bl	8007bf8 <VL53L0X_WrByte>
 8006498:	4603      	mov	r3, r0
 800649a:	461a      	mov	r2, r3
 800649c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064a0:	4313      	orrs	r3, r2
 80064a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80064a6:	2230      	movs	r2, #48	; 0x30
 80064a8:	2130      	movs	r1, #48	; 0x30
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f001 fba4 	bl	8007bf8 <VL53L0X_WrByte>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80064be:	2200      	movs	r2, #0
 80064c0:	21ff      	movs	r1, #255	; 0xff
 80064c2:	6878      	ldr	r0, [r7, #4]
 80064c4:	f001 fb98 	bl	8007bf8 <VL53L0X_WrByte>
 80064c8:	4603      	mov	r3, r0
 80064ca:	461a      	mov	r2, r3
 80064cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064d0:	4313      	orrs	r3, r2
 80064d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064d6:	e0ee      	b.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 80064d8:	78bb      	ldrb	r3, [r7, #2]
 80064da:	2b0a      	cmp	r3, #10
 80064dc:	d14c      	bne.n	8006578 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 80064de:	2228      	movs	r2, #40	; 0x28
 80064e0:	2148      	movs	r1, #72	; 0x48
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f001 fb88 	bl	8007bf8 <VL53L0X_WrByte>
 80064e8:	4603      	mov	r3, r0
 80064ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 80064ee:	2208      	movs	r2, #8
 80064f0:	2147      	movs	r1, #71	; 0x47
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f001 fb80 	bl	8007bf8 <VL53L0X_WrByte>
 80064f8:	4603      	mov	r3, r0
 80064fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 80064fe:	2203      	movs	r2, #3
 8006500:	2132      	movs	r1, #50	; 0x32
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f001 fb78 	bl	8007bf8 <VL53L0X_WrByte>
 8006508:	4603      	mov	r3, r0
 800650a:	461a      	mov	r2, r3
 800650c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006510:	4313      	orrs	r3, r2
 8006512:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006516:	2209      	movs	r2, #9
 8006518:	2130      	movs	r1, #48	; 0x30
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f001 fb6c 	bl	8007bf8 <VL53L0X_WrByte>
 8006520:	4603      	mov	r3, r0
 8006522:	461a      	mov	r2, r3
 8006524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006528:	4313      	orrs	r3, r2
 800652a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800652e:	2201      	movs	r2, #1
 8006530:	21ff      	movs	r1, #255	; 0xff
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 fb60 	bl	8007bf8 <VL53L0X_WrByte>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006540:	4313      	orrs	r3, r2
 8006542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006546:	2220      	movs	r2, #32
 8006548:	2130      	movs	r1, #48	; 0x30
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f001 fb54 	bl	8007bf8 <VL53L0X_WrByte>
 8006550:	4603      	mov	r3, r0
 8006552:	461a      	mov	r2, r3
 8006554:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006558:	4313      	orrs	r3, r2
 800655a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800655e:	2200      	movs	r2, #0
 8006560:	21ff      	movs	r1, #255	; 0xff
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f001 fb48 	bl	8007bf8 <VL53L0X_WrByte>
 8006568:	4603      	mov	r3, r0
 800656a:	461a      	mov	r2, r3
 800656c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006570:	4313      	orrs	r3, r2
 8006572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006576:	e09e      	b.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 8006578:	78bb      	ldrb	r3, [r7, #2]
 800657a:	2b0c      	cmp	r3, #12
 800657c:	d14c      	bne.n	8006618 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800657e:	2238      	movs	r2, #56	; 0x38
 8006580:	2148      	movs	r1, #72	; 0x48
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f001 fb38 	bl	8007bf8 <VL53L0X_WrByte>
 8006588:	4603      	mov	r3, r0
 800658a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800658e:	2208      	movs	r2, #8
 8006590:	2147      	movs	r1, #71	; 0x47
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f001 fb30 	bl	8007bf8 <VL53L0X_WrByte>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800659e:	2203      	movs	r2, #3
 80065a0:	2132      	movs	r1, #50	; 0x32
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f001 fb28 	bl	8007bf8 <VL53L0X_WrByte>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065b0:	4313      	orrs	r3, r2
 80065b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 80065b6:	2208      	movs	r2, #8
 80065b8:	2130      	movs	r1, #48	; 0x30
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f001 fb1c 	bl	8007bf8 <VL53L0X_WrByte>
 80065c0:	4603      	mov	r3, r0
 80065c2:	461a      	mov	r2, r3
 80065c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065c8:	4313      	orrs	r3, r2
 80065ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 80065ce:	2201      	movs	r2, #1
 80065d0:	21ff      	movs	r1, #255	; 0xff
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f001 fb10 	bl	8007bf8 <VL53L0X_WrByte>
 80065d8:	4603      	mov	r3, r0
 80065da:	461a      	mov	r2, r3
 80065dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065e0:	4313      	orrs	r3, r2
 80065e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 80065e6:	2220      	movs	r2, #32
 80065e8:	2130      	movs	r1, #48	; 0x30
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f001 fb04 	bl	8007bf8 <VL53L0X_WrByte>
 80065f0:	4603      	mov	r3, r0
 80065f2:	461a      	mov	r2, r3
 80065f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f8:	4313      	orrs	r3, r2
 80065fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80065fe:	2200      	movs	r2, #0
 8006600:	21ff      	movs	r1, #255	; 0xff
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f001 faf8 	bl	8007bf8 <VL53L0X_WrByte>
 8006608:	4603      	mov	r3, r0
 800660a:	461a      	mov	r2, r3
 800660c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006610:	4313      	orrs	r3, r2
 8006612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006616:	e04e      	b.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 8006618:	78bb      	ldrb	r3, [r7, #2]
 800661a:	2b0e      	cmp	r3, #14
 800661c:	d14b      	bne.n	80066b6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800661e:	2248      	movs	r2, #72	; 0x48
 8006620:	2148      	movs	r1, #72	; 0x48
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f001 fae8 	bl	8007bf8 <VL53L0X_WrByte>
 8006628:	4603      	mov	r3, r0
 800662a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800662e:	2208      	movs	r2, #8
 8006630:	2147      	movs	r1, #71	; 0x47
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 fae0 	bl	8007bf8 <VL53L0X_WrByte>
 8006638:	4603      	mov	r3, r0
 800663a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800663e:	2203      	movs	r2, #3
 8006640:	2132      	movs	r1, #50	; 0x32
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 fad8 	bl	8007bf8 <VL53L0X_WrByte>
 8006648:	4603      	mov	r3, r0
 800664a:	461a      	mov	r2, r3
 800664c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006650:	4313      	orrs	r3, r2
 8006652:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 8006656:	2207      	movs	r2, #7
 8006658:	2130      	movs	r1, #48	; 0x30
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f001 facc 	bl	8007bf8 <VL53L0X_WrByte>
 8006660:	4603      	mov	r3, r0
 8006662:	461a      	mov	r2, r3
 8006664:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006668:	4313      	orrs	r3, r2
 800666a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800666e:	2201      	movs	r2, #1
 8006670:	21ff      	movs	r1, #255	; 0xff
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f001 fac0 	bl	8007bf8 <VL53L0X_WrByte>
 8006678:	4603      	mov	r3, r0
 800667a:	461a      	mov	r2, r3
 800667c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006680:	4313      	orrs	r3, r2
 8006682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 8006686:	2220      	movs	r2, #32
 8006688:	2130      	movs	r1, #48	; 0x30
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	f001 fab4 	bl	8007bf8 <VL53L0X_WrByte>
 8006690:	4603      	mov	r3, r0
 8006692:	461a      	mov	r2, r3
 8006694:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006698:	4313      	orrs	r3, r2
 800669a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800669e:	2200      	movs	r2, #0
 80066a0:	21ff      	movs	r1, #255	; 0xff
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f001 faa8 	bl	8007bf8 <VL53L0X_WrByte>
 80066a8:	4603      	mov	r3, r0
 80066aa:	461a      	mov	r2, r3
 80066ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066b0:	4313      	orrs	r3, r2
 80066b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 80066b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d17f      	bne.n	80067be <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 80066be:	78bb      	ldrb	r3, [r7, #2]
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7fe fe35 	bl	8005330 <VL53L0X_encode_vcsel_period>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 80066cc:	78fb      	ldrb	r3, [r7, #3]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d002      	beq.n	80066d8 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d045      	beq.n	8006762 <VL53L0X_set_vcsel_pulse_period+0x470>
 80066d6:	e06e      	b.n	80067b6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 80066d8:	f107 0314 	add.w	r3, r7, #20
 80066dc:	461a      	mov	r2, r3
 80066de:	2103      	movs	r1, #3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7ff fc31 	bl	8005f48 <get_sequence_step_timeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 80066ec:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d109      	bne.n	8006708 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 80066f4:	f107 0310 	add.w	r3, r7, #16
 80066f8:	461a      	mov	r2, r3
 80066fa:	2102      	movs	r1, #2
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f7ff fc23 	bl	8005f48 <get_sequence_step_timeout>
 8006702:	4603      	mov	r3, r0
 8006704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006708:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800670c:	2b00      	cmp	r3, #0
 800670e:	d109      	bne.n	8006724 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 8006710:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006714:	461a      	mov	r2, r3
 8006716:	2150      	movs	r1, #80	; 0x50
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f001 fa6d 	bl	8007bf8 <VL53L0X_WrByte>
 800671e:	4603      	mov	r3, r0
 8006720:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006728:	2b00      	cmp	r3, #0
 800672a:	d108      	bne.n	800673e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	461a      	mov	r2, r3
 8006730:	2103      	movs	r1, #3
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fce9 	bl	800610a <set_sequence_step_timeout>
 8006738:	4603      	mov	r3, r0
 800673a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800673e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006742:	2b00      	cmp	r3, #0
 8006744:	d108      	bne.n	8006758 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	461a      	mov	r2, r3
 800674a:	2102      	movs	r1, #2
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7ff fcdc 	bl	800610a <set_sequence_step_timeout>
 8006752:	4603      	mov	r3, r0
 8006754:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	78ba      	ldrb	r2, [r7, #2]
 800675c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 8006760:	e02e      	b.n	80067c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 8006762:	f107 0318 	add.w	r3, r7, #24
 8006766:	461a      	mov	r2, r3
 8006768:	2104      	movs	r1, #4
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f7ff fbec 	bl	8005f48 <get_sequence_step_timeout>
 8006770:	4603      	mov	r3, r0
 8006772:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 8006776:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800677a:	2b00      	cmp	r3, #0
 800677c:	d109      	bne.n	8006792 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800677e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006782:	461a      	mov	r2, r3
 8006784:	2170      	movs	r1, #112	; 0x70
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f001 fa36 	bl	8007bf8 <VL53L0X_WrByte>
 800678c:	4603      	mov	r3, r0
 800678e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 8006792:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006796:	2b00      	cmp	r3, #0
 8006798:	d108      	bne.n	80067ac <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	461a      	mov	r2, r3
 800679e:	2104      	movs	r1, #4
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f7ff fcb2 	bl	800610a <set_sequence_step_timeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	78ba      	ldrb	r2, [r7, #2]
 80067b0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 80067b4:	e004      	b.n	80067c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80067b6:	23fc      	movs	r3, #252	; 0xfc
 80067b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80067bc:	e000      	b.n	80067c0 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 80067be:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 80067c0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	695b      	ldr	r3, [r3, #20]
 80067cc:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 80067ce:	69f9      	ldr	r1, [r7, #28]
 80067d0:	6878      	ldr	r0, [r7, #4]
 80067d2:	f7fc fe11 	bl	80033f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 80067d6:	4603      	mov	r3, r0
 80067d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 80067dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d109      	bne.n	80067f8 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 80067e4:	f107 010f 	add.w	r1, r7, #15
 80067e8:	2301      	movs	r3, #1
 80067ea:	2200      	movs	r2, #0
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f7fe fcbb 	bl	8005168 <VL53L0X_perform_phase_calibration>
 80067f2:	4603      	mov	r3, r0
 80067f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 80067f8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3728      	adds	r7, #40	; 0x28
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	460b      	mov	r3, r1
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006812:	2300      	movs	r3, #0
 8006814:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 8006816:	7afb      	ldrb	r3, [r7, #11]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800681c:	2b01      	cmp	r3, #1
 800681e:	d00a      	beq.n	8006836 <VL53L0X_get_vcsel_pulse_period+0x32>
 8006820:	e013      	b.n	800684a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006822:	f107 0316 	add.w	r3, r7, #22
 8006826:	461a      	mov	r2, r3
 8006828:	2150      	movs	r1, #80	; 0x50
 800682a:	68f8      	ldr	r0, [r7, #12]
 800682c:	f001 f8e9 	bl	8007a02 <VL53L0X_RdByte>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006834:	e00b      	b.n	800684e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 8006836:	f107 0316 	add.w	r3, r7, #22
 800683a:	461a      	mov	r2, r3
 800683c:	2170      	movs	r1, #112	; 0x70
 800683e:	68f8      	ldr	r0, [r7, #12]
 8006840:	f001 f8df 	bl	8007a02 <VL53L0X_RdByte>
 8006844:	4603      	mov	r3, r0
 8006846:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 8006848:	e001      	b.n	800684e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800684a:	23fc      	movs	r3, #252	; 0xfc
 800684c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800684e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d107      	bne.n	8006866 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 8006856:	7dbb      	ldrb	r3, [r7, #22]
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe fd56 	bl	800530a <VL53L0X_decode_vcsel_period>
 800685e:	4603      	mov	r3, r0
 8006860:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	701a      	strb	r2, [r3, #0]

	return Status;
 8006866:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800686a:	4618      	mov	r0, r3
 800686c:	3718      	adds	r7, #24
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}

08006872 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8006872:	b580      	push	{r7, lr}
 8006874:	b092      	sub	sp, #72	; 0x48
 8006876:	af00      	add	r7, sp, #0
 8006878:	6078      	str	r0, [r7, #4]
 800687a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800687c:	2300      	movs	r3, #0
 800687e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006882:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006886:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 8006888:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800688c:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800688e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006892:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006894:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006898:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800689a:	f240 234e 	movw	r3, #590	; 0x24e
 800689e:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 80068a0:	f240 23b2 	movw	r3, #690	; 0x2b2
 80068a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 80068a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 80068aa:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 80068ac:	f240 2326 	movw	r3, #550	; 0x226
 80068b0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 80068b2:	2300      	movs	r3, #0
 80068b4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 80068b6:	f644 6320 	movw	r3, #20000	; 0x4e20
 80068ba:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 80068bc:	2300      	movs	r3, #0
 80068be:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d205      	bcs.n	80068d4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80068c8:	23fc      	movs	r3, #252	; 0xfc
 80068ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 80068ce:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80068d2:	e0aa      	b.n	8006a2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 80068d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068d8:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 80068da:	683a      	ldr	r2, [r7, #0]
 80068dc:	1ad3      	subs	r3, r2, r3
 80068de:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 80068e0:	f107 0314 	add.w	r3, r7, #20
 80068e4:	4619      	mov	r1, r3
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f7fc fed0 	bl	800368c <VL53L0X_GetSequenceStepEnables>
 80068ec:	4603      	mov	r3, r0
 80068ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 80068f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d15b      	bne.n	80069b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 80068fa:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 8006900:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 8006902:	2b00      	cmp	r3, #0
 8006904:	d102      	bne.n	800690c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 8006906:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 8006908:	2b00      	cmp	r3, #0
 800690a:	d052      	beq.n	80069b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800690c:	f107 0310 	add.w	r3, r7, #16
 8006910:	461a      	mov	r2, r3
 8006912:	2102      	movs	r1, #2
 8006914:	6878      	ldr	r0, [r7, #4]
 8006916:	f7ff fb17 	bl	8005f48 <get_sequence_step_timeout>
 800691a:	4603      	mov	r3, r0
 800691c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 8006920:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006924:	2b00      	cmp	r3, #0
 8006926:	d002      	beq.n	800692e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 8006928:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800692c:	e07d      	b.n	8006a2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800692e:	7d3b      	ldrb	r3, [r7, #20]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00f      	beq.n	8006954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 8006934:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 8006936:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006938:	4413      	add	r3, r2
 800693a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800693c:	69fa      	ldr	r2, [r7, #28]
 800693e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006940:	429a      	cmp	r2, r3
 8006942:	d204      	bcs.n	800694e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 8006944:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006946:	69fb      	ldr	r3, [r7, #28]
 8006948:	1ad3      	subs	r3, r2, r3
 800694a:	643b      	str	r3, [r7, #64]	; 0x40
 800694c:	e002      	b.n	8006954 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800694e:	23fc      	movs	r3, #252	; 0xfc
 8006950:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 8006954:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006958:	2b00      	cmp	r3, #0
 800695a:	d002      	beq.n	8006962 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800695c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8006960:	e063      	b.n	8006a2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 8006962:	7dbb      	ldrb	r3, [r7, #22]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d011      	beq.n	800698c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696c:	4413      	add	r3, r2
 800696e:	005b      	lsls	r3, r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 8006972:	69fa      	ldr	r2, [r7, #28]
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	429a      	cmp	r2, r3
 8006978:	d204      	bcs.n	8006984 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800697a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	1ad3      	subs	r3, r2, r3
 8006980:	643b      	str	r3, [r7, #64]	; 0x40
 8006982:	e016      	b.n	80069b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006984:	23fc      	movs	r3, #252	; 0xfc
 8006986:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800698a:	e012      	b.n	80069b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800698c:	7d7b      	ldrb	r3, [r7, #21]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00f      	beq.n	80069b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006996:	4413      	add	r3, r2
 8006998:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699e:	429a      	cmp	r2, r3
 80069a0:	d204      	bcs.n	80069ac <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 80069a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	643b      	str	r3, [r7, #64]	; 0x40
 80069aa:	e002      	b.n	80069b2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069ac:	23fc      	movs	r3, #252	; 0xfc
 80069ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 80069b2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d002      	beq.n	80069c0 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 80069ba:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069be:	e034      	b.n	8006a2a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 80069c0:	7dfb      	ldrb	r3, [r7, #23]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d019      	beq.n	80069fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 80069c6:	f107 030c 	add.w	r3, r7, #12
 80069ca:	461a      	mov	r2, r3
 80069cc:	2103      	movs	r1, #3
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f7ff faba 	bl	8005f48 <get_sequence_step_timeout>
 80069d4:	4603      	mov	r3, r0
 80069d6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80069de:	4413      	add	r3, r2
 80069e0:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d204      	bcs.n	80069f4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 80069ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	1ad3      	subs	r3, r2, r3
 80069f0:	643b      	str	r3, [r7, #64]	; 0x40
 80069f2:	e002      	b.n	80069fa <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80069f4:	23fc      	movs	r3, #252	; 0xfc
 80069f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 80069fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d111      	bne.n	8006a26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 8006a02:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00e      	beq.n	8006a26 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 8006a08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 8006a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a12:	2104      	movs	r1, #4
 8006a14:	6878      	ldr	r0, [r7, #4]
 8006a16:	f7ff fb78 	bl	800610a <set_sequence_step_timeout>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 8006a26:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3748      	adds	r7, #72	; 0x48
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b090      	sub	sp, #64	; 0x40
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
 8006a3a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 8006a42:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8006a46:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 8006a48:	f240 7376 	movw	r3, #1910	; 0x776
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 8006a4e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006a52:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 8006a54:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 8006a5a:	f240 234e 	movw	r3, #590	; 0x24e
 8006a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 8006a60:	f240 23b2 	movw	r3, #690	; 0x2b2
 8006a64:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 8006a66:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 8006a6c:	f240 2326 	movw	r3, #550	; 0x226
 8006a70:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 8006a76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7a:	441a      	add	r2, r3
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 8006a80:	f107 0318 	add.w	r3, r7, #24
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f7fc fe00 	bl	800368c <VL53L0X_GetSequenceStepEnables>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 8006a92:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d002      	beq.n	8006aa0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 8006a9a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006a9e:	e075      	b.n	8006b8c <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 8006aa0:	7e3b      	ldrb	r3, [r7, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d105      	bne.n	8006ab2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 8006aa6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d102      	bne.n	8006ab2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 8006aac:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d030      	beq.n	8006b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 8006ab2:	f107 0310 	add.w	r3, r7, #16
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2102      	movs	r1, #2
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f7ff fa44 	bl	8005f48 <get_sequence_step_timeout>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 8006ac6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d122      	bne.n	8006b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 8006ace:	7e3b      	ldrb	r3, [r7, #24]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d007      	beq.n	8006ae4 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006ad8:	6939      	ldr	r1, [r7, #16]
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006ade:	441a      	add	r2, r3
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 8006ae4:	7ebb      	ldrb	r3, [r7, #26]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d009      	beq.n	8006afe <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 8006aee:	6939      	ldr	r1, [r7, #16]
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	440b      	add	r3, r1
 8006af4:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006af6:	441a      	add	r2, r3
 8006af8:	683b      	ldr	r3, [r7, #0]
 8006afa:	601a      	str	r2, [r3, #0]
 8006afc:	e00a      	b.n	8006b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 8006afe:	7e7b      	ldrb	r3, [r7, #25]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 8006b08:	6939      	ldr	r1, [r7, #16]
 8006b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b0c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 8006b0e:	441a      	add	r2, r3
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b14:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d114      	bne.n	8006b46 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 8006b1c:	7efb      	ldrb	r3, [r7, #27]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d011      	beq.n	8006b46 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 8006b22:	f107 030c 	add.w	r3, r7, #12
 8006b26:	461a      	mov	r2, r3
 8006b28:	2103      	movs	r1, #3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff fa0c 	bl	8005f48 <get_sequence_step_timeout>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 8006b3a:	68f9      	ldr	r1, [r7, #12]
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b40:	441a      	add	r2, r3
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b46:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d114      	bne.n	8006b78 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 8006b4e:	7f3b      	ldrb	r3, [r7, #28]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d011      	beq.n	8006b78 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	461a      	mov	r2, r3
 8006b5a:	2104      	movs	r1, #4
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f7ff f9f3 	bl	8005f48 <get_sequence_step_timeout>
 8006b62:	4603      	mov	r3, r0
 8006b64:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 8006b6c:	6979      	ldr	r1, [r7, #20]
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 8006b72:	441a      	add	r2, r3
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8006b78:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d103      	bne.n	8006b88 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006b88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3740      	adds	r7, #64	; 0x40
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b088      	sub	sp, #32
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006ba6:	e0c6      	b.n	8006d36 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4413      	add	r3, r2
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	74fb      	strb	r3, [r7, #19]
		Index++;
 8006bb2:	697b      	ldr	r3, [r7, #20]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 8006bb8:	7cfb      	ldrb	r3, [r7, #19]
 8006bba:	2bff      	cmp	r3, #255	; 0xff
 8006bbc:	f040 808d 	bne.w	8006cda <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	4413      	add	r3, r2
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	747b      	strb	r3, [r7, #17]
			Index++;
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 8006bd0:	7c7b      	ldrb	r3, [r7, #17]
 8006bd2:	2b03      	cmp	r3, #3
 8006bd4:	d87e      	bhi.n	8006cd4 <VL53L0X_load_tuning_settings+0x140>
 8006bd6:	a201      	add	r2, pc, #4	; (adr r2, 8006bdc <VL53L0X_load_tuning_settings+0x48>)
 8006bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bdc:	08006bed 	.word	0x08006bed
 8006be0:	08006c27 	.word	0x08006c27
 8006be4:	08006c61 	.word	0x08006c61
 8006be8:	08006c9b 	.word	0x08006c9b
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	4413      	add	r3, r2
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	743b      	strb	r3, [r7, #16]
				Index++;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	4413      	add	r3, r2
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	3301      	adds	r3, #1
 8006c0a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c0c:	7c3b      	ldrb	r3, [r7, #16]
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	021b      	lsls	r3, r3, #8
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	b29b      	uxth	r3, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	89ba      	ldrh	r2, [r7, #12]
 8006c20:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 8006c24:	e087      	b.n	8006d36 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	683a      	ldr	r2, [r7, #0]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	781b      	ldrb	r3, [r3, #0]
 8006c2e:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	3301      	adds	r3, #1
 8006c34:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	4413      	add	r3, r2
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	3301      	adds	r3, #1
 8006c44:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c46:	7c3b      	ldrb	r3, [r7, #16]
 8006c48:	b29b      	uxth	r3, r3
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	b29a      	uxth	r2, r3
 8006c4e:	7bfb      	ldrb	r3, [r7, #15]
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	4413      	add	r3, r2
 8006c54:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	89ba      	ldrh	r2, [r7, #12]
 8006c5a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 8006c5e:	e06a      	b.n	8006d36 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	683a      	ldr	r2, [r7, #0]
 8006c64:	4413      	add	r3, r2
 8006c66:	781b      	ldrb	r3, [r3, #0]
 8006c68:	743b      	strb	r3, [r7, #16]
				Index++;
 8006c6a:	697b      	ldr	r3, [r7, #20]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	683a      	ldr	r2, [r7, #0]
 8006c74:	4413      	add	r3, r2
 8006c76:	781b      	ldrb	r3, [r3, #0]
 8006c78:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006c7a:	697b      	ldr	r3, [r7, #20]
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006c80:	7c3b      	ldrb	r3, [r7, #16]
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	021b      	lsls	r3, r3, #8
 8006c86:	b29a      	uxth	r2, r3
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	89ba      	ldrh	r2, [r7, #12]
 8006c94:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 8006c98:	e04d      	b.n	8006d36 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	683a      	ldr	r2, [r7, #0]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	743b      	strb	r3, [r7, #16]
				Index++;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	683a      	ldr	r2, [r7, #0]
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	73fb      	strb	r3, [r7, #15]
				Index++;
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 8006cba:	7c3b      	ldrb	r3, [r7, #16]
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	021b      	lsls	r3, r3, #8
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	7bfb      	ldrb	r3, [r7, #15]
 8006cc4:	b29b      	uxth	r3, r3
 8006cc6:	4413      	add	r3, r2
 8006cc8:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	89ba      	ldrh	r2, [r7, #12]
 8006cce:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 8006cd2:	e030      	b.n	8006d36 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006cd4:	23fc      	movs	r3, #252	; 0xfc
 8006cd6:	77fb      	strb	r3, [r7, #31]
 8006cd8:	e02d      	b.n	8006d36 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 8006cda:	7cfb      	ldrb	r3, [r7, #19]
 8006cdc:	2b04      	cmp	r3, #4
 8006cde:	d828      	bhi.n	8006d32 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	4413      	add	r3, r2
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	74bb      	strb	r3, [r7, #18]
			Index++;
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	3301      	adds	r3, #1
 8006cee:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	61bb      	str	r3, [r7, #24]
 8006cf4:	e00f      	b.n	8006d16 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	7819      	ldrb	r1, [r3, #0]
 8006cfe:	f107 0208 	add.w	r2, r7, #8
 8006d02:	69bb      	ldr	r3, [r7, #24]
 8006d04:	4413      	add	r3, r2
 8006d06:	460a      	mov	r2, r1
 8006d08:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	3301      	adds	r3, #1
 8006d14:	61bb      	str	r3, [r7, #24]
 8006d16:	7cfb      	ldrb	r3, [r7, #19]
 8006d18:	69ba      	ldr	r2, [r7, #24]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	dbeb      	blt.n	8006cf6 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 8006d1e:	7cfb      	ldrb	r3, [r7, #19]
 8006d20:	f107 0208 	add.w	r2, r7, #8
 8006d24:	7cb9      	ldrb	r1, [r7, #18]
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fe96 	bl	8007a58 <VL53L0X_WriteMulti>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	77fb      	strb	r3, [r7, #31]
 8006d30:	e001      	b.n	8006d36 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 8006d32:	23fc      	movs	r3, #252	; 0xfc
 8006d34:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 8006d36:	697b      	ldr	r3, [r7, #20]
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	4413      	add	r3, r2
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d004      	beq.n	8006d4c <VL53L0X_load_tuning_settings+0x1b8>
 8006d42:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f43f af2e 	beq.w	8006ba8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8006d4c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3720      	adds	r7, #32
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}

08006d58 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b088      	sub	sp, #32
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006d64:	2300      	movs	r3, #0
 8006d66:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 8006d6e:	f107 0313 	add.w	r3, r7, #19
 8006d72:	4619      	mov	r1, r3
 8006d74:	68f8      	ldr	r0, [r7, #12]
 8006d76:	f7fc fd55 	bl	8003824 <VL53L0X_GetXTalkCompensationEnable>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 8006d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d111      	bne.n	8006daa <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 8006d86:	7cfb      	ldrb	r3, [r7, #19]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00e      	beq.n	8006daa <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	8a9b      	ldrh	r3, [r3, #20]
 8006d96:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 8006d98:	69bb      	ldr	r3, [r7, #24]
 8006d9a:	fb02 f303 	mul.w	r3, r2, r3
 8006d9e:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	3380      	adds	r3, #128	; 0x80
 8006da4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 8006daa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	3720      	adds	r7, #32
 8006db2:	46bd      	mov	sp, r7
 8006db4:	bd80      	pop	{r7, pc}

08006db6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 8006db6:	b580      	push	{r7, lr}
 8006db8:	b086      	sub	sp, #24
 8006dba:	af00      	add	r7, sp, #0
 8006dbc:	60f8      	str	r0, [r7, #12]
 8006dbe:	60b9      	str	r1, [r7, #8]
 8006dc0:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 8006dce:	f107 0310 	add.w	r3, r7, #16
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68b9      	ldr	r1, [r7, #8]
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff ffbe 	bl	8006d58 <VL53L0X_get_total_xtalk_rate>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 8006de0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d105      	bne.n	8006df4 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	441a      	add	r2, r3
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]

	return Status;
 8006df4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3718      	adds	r7, #24
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b09a      	sub	sp, #104	; 0x68
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 8006e0e:	2312      	movs	r3, #18
 8006e10:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 8006e12:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e16:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8006e18:	2342      	movs	r3, #66	; 0x42
 8006e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 8006e1c:	2306      	movs	r3, #6
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 8006e20:	2307      	movs	r3, #7
 8006e22:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 8006e30:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8006e38:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 8006e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
 8006e42:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 8006e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e46:	3380      	adds	r3, #128	; 0x80
 8006e48:	0a1b      	lsrs	r3, r3, #8
 8006e4a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 8006e4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e50:	fb02 f303 	mul.w	r3, r2, r3
 8006e54:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d01a      	beq.n	8006e96 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 8006e60:	68bb      	ldr	r3, [r7, #8]
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 8006e6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e6c:	4413      	add	r3, r2
 8006e6e:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 8006e70:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e78:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 8006e7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	005b      	lsls	r3, r3, #1
 8006e80:	4413      	add	r3, r2
 8006e82:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 8006e84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e86:	fb03 f303 	mul.w	r3, r3, r3
 8006e8a:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 8006e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e8e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006e92:	0c1b      	lsrs	r3, r3, #16
 8006e94:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006e9a:	fb02 f303 	mul.w	r3, r2, r3
 8006e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006ea6:	0c1b      	lsrs	r3, r3, #16
 8006ea8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 8006eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eac:	fb03 f303 	mul.w	r3, r3, r3
 8006eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 8006eb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006eb8:	0c1b      	lsrs	r3, r3, #16
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 8006ebc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ebe:	085a      	lsrs	r2, r3, #1
 8006ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ec2:	441a      	add	r2, r3
 8006ec4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ec6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eca:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 8006ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ece:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ed0:	fb02 f303 	mul.w	r3, r2, r3
 8006ed4:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006edc:	d302      	bcc.n	8006ee4 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 8006ede:	4b54      	ldr	r3, [pc, #336]	; (8007030 <VL53L0X_calc_dmax+0x230>)
 8006ee0:	663b      	str	r3, [r7, #96]	; 0x60
 8006ee2:	e015      	b.n	8006f10 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 8006ee4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ee6:	085a      	lsrs	r2, r3, #1
 8006ee8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eea:	441a      	add	r2, r3
 8006eec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef2:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 8006ef4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ef8:	fb02 f303 	mul.w	r3, r2, r3
 8006efc:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 8006efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f00:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 8006f08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f0a:	fb03 f303 	mul.w	r3, r3, r3
 8006f0e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 8006f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f12:	039b      	lsls	r3, r3, #14
 8006f14:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006f18:	4a46      	ldr	r2, [pc, #280]	; (8007034 <VL53L0X_calc_dmax+0x234>)
 8006f1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f1e:	099b      	lsrs	r3, r3, #6
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f24:	fb03 f303 	mul.w	r3, r3, r3
 8006f28:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 8006f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f2c:	fb03 f303 	mul.w	r3, r3, r3
 8006f30:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	3308      	adds	r3, #8
 8006f36:	091b      	lsrs	r3, r3, #4
 8006f38:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 8006f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f44:	4613      	mov	r3, r2
 8006f46:	005b      	lsls	r3, r3, #1
 8006f48:	4413      	add	r3, r2
 8006f4a:	011b      	lsls	r3, r3, #4
 8006f4c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8006f54:	0b9b      	lsrs	r3, r3, #14
 8006f56:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 8006f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f5c:	4413      	add	r3, r2
 8006f5e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 8006f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f62:	085b      	lsrs	r3, r3, #1
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	4413      	add	r3, r2
 8006f68:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 8006f6a:	69ba      	ldr	r2, [r7, #24]
 8006f6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f72:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	039b      	lsls	r3, r3, #14
 8006f78:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	085b      	lsrs	r3, r3, #1
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	4413      	add	r3, r2
 8006f82:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 8006f84:	69ba      	ldr	r2, [r7, #24]
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f8c:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 8006f8e:	69bb      	ldr	r3, [r7, #24]
 8006f90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8006f92:	fb02 f303 	mul.w	r3, r2, r3
 8006f96:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006f9e:	4a25      	ldr	r2, [pc, #148]	; (8007034 <VL53L0X_calc_dmax+0x234>)
 8006fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8006fa4:	099b      	lsrs	r3, r3, #6
 8006fa6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 8006fae:	69bb      	ldr	r3, [r7, #24]
 8006fb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006fb4:	4a1f      	ldr	r2, [pc, #124]	; (8007034 <VL53L0X_calc_dmax+0x234>)
 8006fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fba:	099b      	lsrs	r3, r3, #6
 8006fbc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 8006fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fc0:	3380      	adds	r3, #128	; 0x80
 8006fc2:	0a1b      	lsrs	r3, r3, #8
 8006fc4:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d008      	beq.n	8006fde <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	085a      	lsrs	r2, r3, #1
 8006fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fd2:	441a      	add	r2, r3
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fda:	65bb      	str	r3, [r7, #88]	; 0x58
 8006fdc:	e001      	b.n	8006fe2 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 8006fe2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8006fe4:	f7fe f9b7 	bl	8005356 <VL53L0X_isqrt>
 8006fe8:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 8006ff0:	69bb      	ldr	r3, [r7, #24]
 8006ff2:	085a      	lsrs	r2, r3, #1
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	441a      	add	r2, r3
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007000:	e001      	b.n	8007006 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 8007002:	2300      	movs	r3, #0
 8007004:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 8007006:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8007008:	f7fe f9a5 	bl	8005356 <VL53L0X_isqrt>
 800700c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800700e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 8007014:	693a      	ldr	r2, [r7, #16]
 8007016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007018:	429a      	cmp	r2, r3
 800701a:	d902      	bls.n	8007022 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800701c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800701e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007020:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 8007022:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 8007026:	4618      	mov	r0, r3
 8007028:	3768      	adds	r7, #104	; 0x68
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	fff00000 	.word	0xfff00000
 8007034:	10624dd3 	.word	0x10624dd3

08007038 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b0b2      	sub	sp, #200	; 0xc8
 800703c:	af04      	add	r7, sp, #16
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
 8007044:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 8007046:	f44f 7348 	mov.w	r3, #800	; 0x320
 800704a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800704e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007052:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 8007056:	2342      	movs	r3, #66	; 0x42
 8007058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800705c:	f241 235c 	movw	r3, #4700	; 0x125c
 8007060:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 8007064:	4b6b      	ldr	r3, [pc, #428]	; (8007214 <VL53L0X_calc_sigma_estimate+0x1dc>)
 8007066:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800706a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800706e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 8007072:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8007076:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800707a:	fbb2 f3f3 	udiv	r3, r2, r3
 800707e:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 8007080:	4b65      	ldr	r3, [pc, #404]	; (8007218 <VL53L0X_calc_sigma_estimate+0x1e0>)
 8007082:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 8007084:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007088:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800708a:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800708e:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 8007090:	f240 6377 	movw	r3, #1655	; 0x677
 8007094:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007096:	2300      	movs	r3, #0
 8007098:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6a1b      	ldr	r3, [r3, #32]
 80070a0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	691b      	ldr	r3, [r3, #16]
 80070a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 80070ae:	0c1b      	lsrs	r3, r3, #16
 80070b0:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 80070b8:	f107 0310 	add.w	r3, r7, #16
 80070bc:	461a      	mov	r2, r3
 80070be:	68b9      	ldr	r1, [r7, #8]
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f7ff fe78 	bl	8006db6 <VL53L0X_get_total_signal_rate>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 80070cc:	f107 0314 	add.w	r3, r7, #20
 80070d0:	461a      	mov	r2, r3
 80070d2:	68b9      	ldr	r1, [r7, #8]
 80070d4:	68f8      	ldr	r0, [r7, #12]
 80070d6:	f7ff fe3f 	bl	8006d58 <VL53L0X_get_total_xtalk_rate>
 80070da:	4603      	mov	r3, r0
 80070dc:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070e6:	fb02 f303 	mul.w	r3, r2, r3
 80070ea:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 80070ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070ee:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 80070f6:	697b      	ldr	r3, [r7, #20]
 80070f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80070fc:	fb02 f303 	mul.w	r3, r2, r3
 8007100:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 8007104:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8007108:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800710a:	429a      	cmp	r2, r3
 800710c:	d902      	bls.n	8007114 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800710e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 8007114:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 8007118:	2b00      	cmp	r3, #0
 800711a:	d164      	bne.n	80071e6 <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007122:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800712a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800712e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8007132:	461a      	mov	r2, r3
 8007134:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8007136:	68f8      	ldr	r0, [r7, #12]
 8007138:	f7fe feb0 	bl	8005e9c <VL53L0X_calc_timeout_mclks>
 800713c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007144:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800714c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 8007150:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007154:	461a      	mov	r2, r3
 8007156:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007158:	68f8      	ldr	r0, [r7, #12]
 800715a:	f7fe fe9f 	bl	8005e9c <VL53L0X_calc_timeout_mclks>
 800715e:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 8007160:	2303      	movs	r3, #3
 8007162:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 8007166:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800716a:	2b08      	cmp	r3, #8
 800716c:	d102      	bne.n	8007174 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800716e:	2302      	movs	r3, #2
 8007170:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 8007174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007178:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800717a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800717e:	fb02 f303 	mul.w	r3, r2, r3
 8007182:	02db      	lsls	r3, r3, #11
 8007184:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 8007188:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800718c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8007190:	4a22      	ldr	r2, [pc, #136]	; (800721c <VL53L0X_calc_sigma_estimate+0x1e4>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	099b      	lsrs	r3, r3, #6
 8007198:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800719c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071a2:	fb02 f303 	mul.w	r3, r2, r3
 80071a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 80071aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071ae:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80071b2:	4a1a      	ldr	r2, [pc, #104]	; (800721c <VL53L0X_calc_sigma_estimate+0x1e4>)
 80071b4:	fba2 2303 	umull	r2, r3, r2, r3
 80071b8:	099b      	lsrs	r3, r3, #6
 80071ba:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 80071be:	693b      	ldr	r3, [r7, #16]
 80071c0:	3380      	adds	r3, #128	; 0x80
 80071c2:	0a1b      	lsrs	r3, r3, #8
 80071c4:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 80071c6:	693a      	ldr	r2, [r7, #16]
 80071c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80071cc:	fb02 f303 	mul.w	r3, r2, r3
 80071d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 80071d4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80071d8:	3380      	adds	r3, #128	; 0x80
 80071da:	0a1b      	lsrs	r3, r3, #8
 80071dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	021b      	lsls	r3, r3, #8
 80071e4:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 80071e6:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d002      	beq.n	80071f4 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 80071ee:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 80071f2:	e127      	b.n	8007444 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 80071f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d112      	bne.n	8007220 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007200:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007208:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2200      	movs	r2, #0
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	e115      	b.n	8007440 <VL53L0X_calc_sigma_estimate+0x408>
 8007214:	028f87ae 	.word	0x028f87ae
 8007218:	0006999a 	.word	0x0006999a
 800721c:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 8007220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007224:	2b00      	cmp	r3, #0
 8007226:	d102      	bne.n	800722e <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 8007228:	2301      	movs	r3, #1
 800722a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800722e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007232:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 8007234:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007236:	041a      	lsls	r2, r3, #16
 8007238:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800723a:	fbb2 f3f3 	udiv	r3, r2, r3
 800723e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 8007242:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007248:	429a      	cmp	r2, r3
 800724a:	d902      	bls.n	8007252 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800724c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800724e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 8007252:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007256:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800725a:	fb02 f303 	mul.w	r3, r2, r3
 800725e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 8007262:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007266:	4613      	mov	r3, r2
 8007268:	005b      	lsls	r3, r3, #1
 800726a:	4413      	add	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4618      	mov	r0, r3
 8007270:	f7fe f871 	bl	8005356 <VL53L0X_isqrt>
 8007274:	4603      	mov	r3, r0
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800727a:	68bb      	ldr	r3, [r7, #8]
 800727c:	891b      	ldrh	r3, [r3, #8]
 800727e:	461a      	mov	r2, r3
 8007280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007282:	fb02 f303 	mul.w	r3, r2, r3
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007288:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800728a:	041a      	lsls	r2, r3, #16
 800728c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007290:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 8007292:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 8007296:	4a6d      	ldr	r2, [pc, #436]	; (800744c <VL53L0X_calc_sigma_estimate+0x414>)
 8007298:	fba2 2303 	umull	r2, r3, r2, r3
 800729c:	099b      	lsrs	r3, r3, #6
 800729e:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 80072a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80072a2:	041a      	lsls	r2, r3, #16
 80072a4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80072a8:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 80072aa:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 80072ae:	4a67      	ldr	r2, [pc, #412]	; (800744c <VL53L0X_calc_sigma_estimate+0x414>)
 80072b0:	fba2 2303 	umull	r2, r3, r2, r3
 80072b4:	099b      	lsrs	r3, r3, #6
 80072b6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 80072b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ba:	021b      	lsls	r3, r3, #8
 80072bc:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 80072be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	bfb8      	it	lt
 80072ca:	425b      	neglt	r3, r3
 80072cc:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 80072d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 80072e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072e2:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 80072e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e8:	fb02 f303 	mul.w	r3, r2, r3
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 80072ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80072f2:	4413      	add	r3, r2
 80072f4:	0c1b      	lsrs	r3, r3, #16
 80072f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 80072f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072fa:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80072fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 8007300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 8007306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007308:	fb03 f303 	mul.w	r3, r3, r3
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800730e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007310:	0b9b      	lsrs	r3, r3, #14
 8007312:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 8007314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007318:	fb02 f303 	mul.w	r3, r2, r3
 800731c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8007324:	0c1b      	lsrs	r3, r3, #16
 8007326:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 8007328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800732a:	fb03 f303 	mul.w	r3, r3, r3
 800732e:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 8007330:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8007334:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 8007336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007338:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800733c:	0c1b      	lsrs	r3, r3, #16
 800733e:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	fb03 f303 	mul.w	r3, r3, r3
 8007346:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 8007348:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800734a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734c:	4413      	add	r3, r2
 800734e:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 8007350:	6a38      	ldr	r0, [r7, #32]
 8007352:	f7fe f800 	bl	8005356 <VL53L0X_isqrt>
 8007356:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 8007358:	69fb      	ldr	r3, [r7, #28]
 800735a:	041b      	lsls	r3, r3, #16
 800735c:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800735e:	69fb      	ldr	r3, [r7, #28]
 8007360:	3332      	adds	r3, #50	; 0x32
 8007362:	4a3b      	ldr	r2, [pc, #236]	; (8007450 <VL53L0X_calc_sigma_estimate+0x418>)
 8007364:	fba2 2303 	umull	r2, r3, r2, r3
 8007368:	095a      	lsrs	r2, r3, #5
 800736a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800736c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007370:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 8007374:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007378:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800737c:	fb02 f303 	mul.w	r3, r2, r3
 8007380:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 8007384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007388:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800738c:	3308      	adds	r3, #8
 800738e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 8007392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007396:	4a2f      	ldr	r2, [pc, #188]	; (8007454 <VL53L0X_calc_sigma_estimate+0x41c>)
 8007398:	fba2 2303 	umull	r2, r3, r2, r3
 800739c:	0b5b      	lsrs	r3, r3, #13
 800739e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 80073a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80073a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d903      	bls.n	80073b6 <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 80073ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80073b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 80073b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80073ba:	fb03 f303 	mul.w	r3, r3, r3
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 80073c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073c4:	fb03 f303 	mul.w	r3, r3, r3
 80073c8:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 80073ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	4413      	add	r3, r2
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7fd ffc0 	bl	8005356 <VL53L0X_isqrt>
 80073d6:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 80073d8:	69bb      	ldr	r3, [r7, #24]
 80073da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80073de:	fb02 f303 	mul.w	r3, r2, r3
 80073e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 80073e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <VL53L0X_calc_sigma_estimate+0x3c8>
 80073ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d005      	beq.n	8007400 <VL53L0X_calc_sigma_estimate+0x3c8>
 80073f4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d903      	bls.n	8007408 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 8007400:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007404:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800740e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800741a:	6939      	ldr	r1, [r7, #16]
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	9303      	str	r3, [sp, #12]
 8007420:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007424:	9302      	str	r3, [sp, #8]
 8007426:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800742a:	9301      	str	r3, [sp, #4]
 800742c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007432:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007434:	68f8      	ldr	r0, [r7, #12]
 8007436:	f7ff fce3 	bl	8006e00 <VL53L0X_calc_dmax>
 800743a:	4603      	mov	r3, r0
 800743c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007440:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 8007444:	4618      	mov	r0, r3
 8007446:	37b8      	adds	r7, #184	; 0xb8
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	10624dd3 	.word	0x10624dd3
 8007450:	51eb851f 	.word	0x51eb851f
 8007454:	d1b71759 	.word	0xd1b71759

08007458 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b090      	sub	sp, #64	; 0x40
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	461a      	mov	r2, r3
 8007464:	460b      	mov	r3, r1
 8007466:	72fb      	strb	r3, [r7, #11]
 8007468:	4613      	mov	r3, r2
 800746a:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800746c:	2300      	movs	r3, #0
 800746e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 8007472:	2300      	movs	r3, #0
 8007474:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 8007478:	2300      	movs	r3, #0
 800747a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800747e:	2300      	movs	r3, #0
 8007480:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 8007484:	2300      	movs	r3, #0
 8007486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800748a:	2300      	movs	r3, #0
 800748c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 8007490:	2300      	movs	r3, #0
 8007492:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 8007496:	2300      	movs	r3, #0
 8007498:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800749c:	2300      	movs	r3, #0
 800749e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 80074a2:	2300      	movs	r3, #0
 80074a4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	10db      	asrs	r3, r3, #3
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	f003 030f 	and.w	r3, r3, #15
 80074b4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 80074b8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x98>
 80074c0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074c4:	2b05      	cmp	r3, #5
 80074c6:	d013      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 80074c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074cc:	2b07      	cmp	r3, #7
 80074ce:	d00f      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 80074d0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074d4:	2b0c      	cmp	r3, #12
 80074d6:	d00b      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 80074d8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074dc:	2b0d      	cmp	r3, #13
 80074de:	d007      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 80074e0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074e4:	2b0e      	cmp	r3, #14
 80074e6:	d003      	beq.n	80074f0 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 80074e8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074ec:	2b0f      	cmp	r3, #15
 80074ee:	d103      	bne.n	80074f8 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 80074f0:	2301      	movs	r3, #1
 80074f2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 80074f6:	e002      	b.n	80074fe <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 80074fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007502:	2b00      	cmp	r3, #0
 8007504:	d107      	bne.n	8007516 <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007506:	2201      	movs	r2, #1
 8007508:	21ff      	movs	r1, #255	; 0xff
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fb74 	bl	8007bf8 <VL53L0X_WrByte>
 8007510:	4603      	mov	r3, r0
 8007512:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 8007516:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800751a:	2b00      	cmp	r3, #0
 800751c:	d109      	bne.n	8007532 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800751e:	f107 0316 	add.w	r3, r7, #22
 8007522:	461a      	mov	r2, r3
 8007524:	21b6      	movs	r1, #182	; 0xb6
 8007526:	68f8      	ldr	r0, [r7, #12]
 8007528:	f000 faf2 	bl	8007b10 <VL53L0X_RdWord>
 800752c:	4603      	mov	r3, r0
 800752e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 8007532:	8afb      	ldrh	r3, [r7, #22]
 8007534:	025b      	lsls	r3, r3, #9
 8007536:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 8007538:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800753c:	2b00      	cmp	r3, #0
 800753e:	d107      	bne.n	8007550 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007540:	2200      	movs	r2, #0
 8007542:	21ff      	movs	r1, #255	; 0xff
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 fb57 	bl	8007bf8 <VL53L0X_WrByte>
 800754a:	4603      	mov	r3, r0
 800754c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007554:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 8007558:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800755c:	2b00      	cmp	r3, #0
 800755e:	d109      	bne.n	8007574 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007560:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 8007564:	461a      	mov	r2, r3
 8007566:	2100      	movs	r1, #0
 8007568:	68f8      	ldr	r0, [r7, #12]
 800756a:	f7fc fa2f 	bl	80039cc <VL53L0X_GetLimitCheckEnable>
 800756e:	4603      	mov	r3, r0
 8007570:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 8007574:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007578:	2b00      	cmp	r3, #0
 800757a:	d02e      	beq.n	80075da <VL53L0X_get_pal_range_status+0x182>
 800757c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007580:	2b00      	cmp	r3, #0
 8007582:	d12a      	bne.n	80075da <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 8007584:	f107 0310 	add.w	r3, r7, #16
 8007588:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800758c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800758e:	68f8      	ldr	r0, [r7, #12]
 8007590:	f7ff fd52 	bl	8007038 <VL53L0X_calc_sigma_estimate>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800759a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d103      	bne.n	80075aa <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 80075a2:	693b      	ldr	r3, [r7, #16]
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80075a8:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 80075aa:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d113      	bne.n	80075da <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 80075b2:	f107 0320 	add.w	r3, r7, #32
 80075b6:	461a      	mov	r2, r3
 80075b8:	2100      	movs	r1, #0
 80075ba:	68f8      	ldr	r0, [r7, #12]
 80075bc:	f7fc fa8c 	bl	8003ad8 <VL53L0X_GetLimitCheckValue>
 80075c0:	4603      	mov	r3, r0
 80075c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d006      	beq.n	80075da <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 80075cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075ce:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d902      	bls.n	80075da <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 80075d4:	2301      	movs	r3, #1
 80075d6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 80075da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 80075e2:	f107 0329 	add.w	r3, r7, #41	; 0x29
 80075e6:	461a      	mov	r2, r3
 80075e8:	2102      	movs	r1, #2
 80075ea:	68f8      	ldr	r0, [r7, #12]
 80075ec:	f7fc f9ee 	bl	80039cc <VL53L0X_GetLimitCheckEnable>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 80075f6:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d017      	beq.n	800762e <VL53L0X_get_pal_range_status+0x1d6>
 80075fe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007602:	2b00      	cmp	r3, #0
 8007604:	d113      	bne.n	800762e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007606:	f107 031c 	add.w	r3, r7, #28
 800760a:	461a      	mov	r2, r3
 800760c:	2102      	movs	r1, #2
 800760e:	68f8      	ldr	r0, [r7, #12]
 8007610:	f7fc fa62 	bl	8003ad8 <VL53L0X_GetLimitCheckValue>
 8007614:	4603      	mov	r3, r0
 8007616:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d006      	beq.n	800762e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 8007620:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 8007622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007624:	429a      	cmp	r2, r3
 8007626:	d902      	bls.n	800762e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 8007628:	2301      	movs	r3, #1
 800762a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800762e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007632:	2b00      	cmp	r3, #0
 8007634:	d109      	bne.n	800764a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007636:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800763a:	461a      	mov	r2, r3
 800763c:	2103      	movs	r1, #3
 800763e:	68f8      	ldr	r0, [r7, #12]
 8007640:	f7fc f9c4 	bl	80039cc <VL53L0X_GetLimitCheckEnable>
 8007644:	4603      	mov	r3, r0
 8007646:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800764a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800764e:	2b00      	cmp	r3, #0
 8007650:	d023      	beq.n	800769a <VL53L0X_get_pal_range_status+0x242>
 8007652:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007656:	2b00      	cmp	r3, #0
 8007658:	d11f      	bne.n	800769a <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800765a:	893b      	ldrh	r3, [r7, #8]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d102      	bne.n	8007666 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 8007660:	2300      	movs	r3, #0
 8007662:	637b      	str	r3, [r7, #52]	; 0x34
 8007664:	e005      	b.n	8007672 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	021a      	lsls	r2, r3, #8
 800766a:	893b      	ldrh	r3, [r7, #8]
 800766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 8007672:	f107 0318 	add.w	r3, r7, #24
 8007676:	461a      	mov	r2, r3
 8007678:	2103      	movs	r1, #3
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f7fc fa2c 	bl	8003ad8 <VL53L0X_GetLimitCheckValue>
 8007680:	4603      	mov	r3, r0
 8007682:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d006      	beq.n	800769a <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800768c:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800768e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007690:	429a      	cmp	r2, r3
 8007692:	d202      	bcs.n	800769a <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 8007694:	2301      	movs	r3, #1
 8007696:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800769a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d14a      	bne.n	8007738 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 80076a2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80076a6:	2b01      	cmp	r3, #1
 80076a8:	d103      	bne.n	80076b2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 80076aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076ac:	22ff      	movs	r2, #255	; 0xff
 80076ae:	701a      	strb	r2, [r3, #0]
 80076b0:	e042      	b.n	8007738 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 80076b2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d007      	beq.n	80076ca <VL53L0X_get_pal_range_status+0x272>
 80076ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d003      	beq.n	80076ca <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 80076c2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d103      	bne.n	80076d2 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 80076ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076cc:	2205      	movs	r2, #5
 80076ce:	701a      	strb	r2, [r3, #0]
 80076d0:	e032      	b.n	8007738 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 80076d2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076d6:	2b06      	cmp	r3, #6
 80076d8:	d003      	beq.n	80076e2 <VL53L0X_get_pal_range_status+0x28a>
 80076da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d103      	bne.n	80076ea <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 80076e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076e4:	2204      	movs	r2, #4
 80076e6:	701a      	strb	r2, [r3, #0]
 80076e8:	e026      	b.n	8007738 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 80076ea:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076ee:	2b08      	cmp	r3, #8
 80076f0:	d007      	beq.n	8007702 <VL53L0X_get_pal_range_status+0x2aa>
 80076f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80076f6:	2b0a      	cmp	r3, #10
 80076f8:	d003      	beq.n	8007702 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 80076fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d103      	bne.n	800770a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	2203      	movs	r2, #3
 8007706:	701a      	strb	r2, [r3, #0]
 8007708:	e016      	b.n	8007738 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800770a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800770e:	2b04      	cmp	r3, #4
 8007710:	d003      	beq.n	800771a <VL53L0X_get_pal_range_status+0x2c2>
 8007712:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007716:	2b01      	cmp	r3, #1
 8007718:	d103      	bne.n	8007722 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800771a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800771c:	2202      	movs	r2, #2
 800771e:	701a      	strb	r2, [r3, #0]
 8007720:	e00a      	b.n	8007738 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 8007722:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8007726:	2b01      	cmp	r3, #1
 8007728:	d103      	bne.n	8007732 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800772a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800772c:	2201      	movs	r2, #1
 800772e:	701a      	strb	r2, [r3, #0]
 8007730:	e002      	b.n	8007738 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 8007732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007734:	2200      	movs	r2, #0
 8007736:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 8007738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d102      	bne.n	8007746 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 8007740:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007742:	2200      	movs	r2, #0
 8007744:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 8007746:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800774a:	461a      	mov	r2, r3
 800774c:	2101      	movs	r1, #1
 800774e:	68f8      	ldr	r0, [r7, #12]
 8007750:	f7fc f93c 	bl	80039cc <VL53L0X_GetLimitCheckEnable>
 8007754:	4603      	mov	r3, r0
 8007756:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800775a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800775e:	2b00      	cmp	r3, #0
 8007760:	d14f      	bne.n	8007802 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 8007762:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007766:	2b00      	cmp	r3, #0
 8007768:	d003      	beq.n	8007772 <VL53L0X_get_pal_range_status+0x31a>
 800776a:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800776e:	2b01      	cmp	r3, #1
 8007770:	d103      	bne.n	800777a <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 8007772:	2301      	movs	r3, #1
 8007774:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007778:	e002      	b.n	8007780 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007786:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800778a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800778e:	2b04      	cmp	r3, #4
 8007790:	d003      	beq.n	800779a <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 8007792:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 8007796:	2b00      	cmp	r3, #0
 8007798:	d103      	bne.n	80077a2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800779a:	2301      	movs	r3, #1
 800779c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077a0:	e002      	b.n	80077a8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 80077a2:	2300      	movs	r3, #0
 80077a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80077ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 80077b2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d003      	beq.n	80077c2 <VL53L0X_get_pal_range_status+0x36a>
 80077ba:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d103      	bne.n	80077ca <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 80077c2:	2301      	movs	r3, #1
 80077c4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077c8:	e002      	b.n	80077d0 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 80077ca:	2300      	movs	r3, #0
 80077cc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80077d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 80077da:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d003      	beq.n	80077ea <VL53L0X_get_pal_range_status+0x392>
 80077e2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d103      	bne.n	80077f2 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 80077ea:	2301      	movs	r3, #1
 80077ec:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80077f0:	e002      	b.n	80077f8 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80077fe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8007802:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 8007806:	4618      	mov	r0, r3
 8007808:	3740      	adds	r7, #64	; 0x40
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b086      	sub	sp, #24
 8007812:	af00      	add	r7, sp, #0
 8007814:	60f8      	str	r0, [r7, #12]
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800781a:	2300      	movs	r3, #0
 800781c:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800781e:	2102      	movs	r1, #2
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f7fd fe0d 	bl	8005440 <VL53L0X_get_info_from_device>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800782a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d11c      	bne.n	800786c <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 8007838:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800783a:	7dbb      	ldrb	r3, [r7, #22]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d107      	bne.n	8007850 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	2200      	movs	r2, #0
 8007844:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	3340      	adds	r3, #64	; 0x40
 800784a:	2200      	movs	r2, #0
 800784c:	701a      	strb	r2, [r3, #0]
 800784e:	e00d      	b.n	800786c <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	33f3      	adds	r3, #243	; 0xf3
 800785e:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	3340      	adds	r3, #64	; 0x40
 8007864:	6939      	ldr	r1, [r7, #16]
 8007866:	4618      	mov	r0, r3
 8007868:	f006 fe92 	bl	800e590 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800786c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3718      	adds	r7, #24
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007878:	b5b0      	push	{r4, r5, r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007882:	2300      	movs	r3, #0
 8007884:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 8007886:	f107 030d 	add.w	r3, r7, #13
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff ffbd 	bl	800780e <VL53L0X_check_part_used>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 8007898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d13b      	bne.n	8007918 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 80078a0:	7b7b      	ldrb	r3, [r7, #13]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d108      	bne.n	80078b8 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	4a30      	ldr	r2, [pc, #192]	; (800796c <VL53L0X_get_device_info+0xf4>)
 80078aa:	461c      	mov	r4, r3
 80078ac:	4613      	mov	r3, r2
 80078ae:	cb07      	ldmia	r3!, {r0, r1, r2}
 80078b0:	6020      	str	r0, [r4, #0]
 80078b2:	6061      	str	r1, [r4, #4]
 80078b4:	60a2      	str	r2, [r4, #8]
 80078b6:	e027      	b.n	8007908 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 80078b8:	7b7b      	ldrb	r3, [r7, #13]
 80078ba:	2b22      	cmp	r3, #34	; 0x22
 80078bc:	d80b      	bhi.n	80078d6 <VL53L0X_get_device_info+0x5e>
 80078be:	7b7b      	ldrb	r3, [r7, #13]
 80078c0:	2b20      	cmp	r3, #32
 80078c2:	d008      	beq.n	80078d6 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	4a2a      	ldr	r2, [pc, #168]	; (8007970 <VL53L0X_get_device_info+0xf8>)
 80078c8:	461c      	mov	r4, r3
 80078ca:	4613      	mov	r3, r2
 80078cc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80078ce:	6020      	str	r0, [r4, #0]
 80078d0:	6061      	str	r1, [r4, #4]
 80078d2:	60a2      	str	r2, [r4, #8]
 80078d4:	e018      	b.n	8007908 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 80078d6:	7b7b      	ldrb	r3, [r7, #13]
 80078d8:	2b26      	cmp	r3, #38	; 0x26
 80078da:	d808      	bhi.n	80078ee <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	4a25      	ldr	r2, [pc, #148]	; (8007974 <VL53L0X_get_device_info+0xfc>)
 80078e0:	461c      	mov	r4, r3
 80078e2:	4613      	mov	r3, r2
 80078e4:	cb07      	ldmia	r3!, {r0, r1, r2}
 80078e6:	6020      	str	r0, [r4, #0]
 80078e8:	6061      	str	r1, [r4, #4]
 80078ea:	60a2      	str	r2, [r4, #8]
 80078ec:	e00c      	b.n	8007908 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	4a21      	ldr	r2, [pc, #132]	; (8007978 <VL53L0X_get_device_info+0x100>)
 80078f2:	461d      	mov	r5, r3
 80078f4:	4614      	mov	r4, r2
 80078f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80078f8:	6028      	str	r0, [r5, #0]
 80078fa:	6069      	str	r1, [r5, #4]
 80078fc:	60aa      	str	r2, [r5, #8]
 80078fe:	60eb      	str	r3, [r5, #12]
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	6128      	str	r0, [r5, #16]
 8007904:	7923      	ldrb	r3, [r4, #4]
 8007906:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	3320      	adds	r3, #32
 800790c:	491b      	ldr	r1, [pc, #108]	; (800797c <VL53L0X_get_device_info+0x104>)
 800790e:	461a      	mov	r2, r3
 8007910:	460b      	mov	r3, r1
 8007912:	cb03      	ldmia	r3!, {r0, r1}
 8007914:	6010      	str	r0, [r2, #0]
 8007916:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007918:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d108      	bne.n	8007932 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	3360      	adds	r3, #96	; 0x60
 8007924:	461a      	mov	r2, r3
 8007926:	21c0      	movs	r1, #192	; 0xc0
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f86a 	bl	8007a02 <VL53L0X_RdByte>
 800792e:	4603      	mov	r3, r0
 8007930:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d112      	bne.n	8007960 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800793a:	f107 030e 	add.w	r3, r7, #14
 800793e:	461a      	mov	r2, r3
 8007940:	21c2      	movs	r1, #194	; 0xc2
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f85d 	bl	8007a02 <VL53L0X_RdByte>
 8007948:	4603      	mov	r3, r0
 800794a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	2201      	movs	r2, #1
 8007950:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 8007954:	7bbb      	ldrb	r3, [r7, #14]
 8007956:	091b      	lsrs	r3, r3, #4
 8007958:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 8007960:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bdb0      	pop	{r4, r5, r7, pc}
 800796c:	08010bc4 	.word	0x08010bc4
 8007970:	08010bd0 	.word	0x08010bd0
 8007974:	08010bdc 	.word	0x08010bdc
 8007978:	08010be8 	.word	0x08010be8
 800797c:	08010c00 	.word	0x08010c00

08007980 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 8007980:	b580      	push	{r7, lr}
 8007982:	b088      	sub	sp, #32
 8007984:	af02      	add	r7, sp, #8
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	330a      	adds	r3, #10
 8007990:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800799e:	b299      	uxth	r1, r3
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	b29a      	uxth	r2, r3
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4613      	mov	r3, r2
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	f001 fdf0 	bl	8009590 <HAL_I2C_Master_Transmit>
 80079b0:	4603      	mov	r3, r0
 80079b2:	613b      	str	r3, [r7, #16]
    
    return status;
 80079b4:	693b      	ldr	r3, [r7, #16]
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}

080079be <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 80079be:	b580      	push	{r7, lr}
 80079c0:	b088      	sub	sp, #32
 80079c2:	af02      	add	r7, sp, #8
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	330a      	adds	r3, #10
 80079ce:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 80079dc:	f043 0301 	orr.w	r3, r3, #1
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	b299      	uxth	r1, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	b29a      	uxth	r2, r3
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	9300      	str	r3, [sp, #0]
 80079ec:	4613      	mov	r3, r2
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	f001 fec2 	bl	8009778 <HAL_I2C_Master_Receive>
 80079f4:	4603      	mov	r3, r0
 80079f6:	613b      	str	r3, [r7, #16]
    
    return status;
 80079f8:	693b      	ldr	r3, [r7, #16]
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3718      	adds	r7, #24
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b086      	sub	sp, #24
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	607a      	str	r2, [r7, #4]
 8007a0e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007a14:	f107 030b 	add.w	r3, r7, #11
 8007a18:	2201      	movs	r2, #1
 8007a1a:	4619      	mov	r1, r3
 8007a1c:	68f8      	ldr	r0, [r7, #12]
 8007a1e:	f7ff ffaf 	bl	8007980 <_I2CWrite>
 8007a22:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 8007a24:	693b      	ldr	r3, [r7, #16]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d002      	beq.n	8007a30 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a2a:	23ec      	movs	r3, #236	; 0xec
 8007a2c:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007a2e:	e00c      	b.n	8007a4a <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 8007a30:	2201      	movs	r2, #1
 8007a32:	6879      	ldr	r1, [r7, #4]
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f7ff ffc2 	bl	80079be <_I2CRead>
 8007a3a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d002      	beq.n	8007a48 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a42:	23ec      	movs	r3, #236	; 0xec
 8007a44:	75fb      	strb	r3, [r7, #23]
 8007a46:	e000      	b.n	8007a4a <VL53L0X_RdByte+0x48>
    }
done:
 8007a48:	bf00      	nop
    return Status;
 8007a4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	3718      	adds	r7, #24
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
	...

08007a58 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	607a      	str	r2, [r7, #4]
 8007a62:	603b      	str	r3, [r7, #0]
 8007a64:	460b      	mov	r3, r1
 8007a66:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	2b3f      	cmp	r3, #63	; 0x3f
 8007a70:	d902      	bls.n	8007a78 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 8007a72:	f06f 0303 	mvn.w	r3, #3
 8007a76:	e016      	b.n	8007aa6 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 8007a78:	4a0d      	ldr	r2, [pc, #52]	; (8007ab0 <VL53L0X_WriteMulti+0x58>)
 8007a7a:	7afb      	ldrb	r3, [r7, #11]
 8007a7c:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	6879      	ldr	r1, [r7, #4]
 8007a82:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <VL53L0X_WriteMulti+0x5c>)
 8007a84:	f006 f842 	bl	800db0c <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	3301      	adds	r3, #1
 8007a8c:	461a      	mov	r2, r3
 8007a8e:	4908      	ldr	r1, [pc, #32]	; (8007ab0 <VL53L0X_WriteMulti+0x58>)
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f7ff ff75 	bl	8007980 <_I2CWrite>
 8007a96:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d001      	beq.n	8007aa2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007a9e:	23ec      	movs	r3, #236	; 0xec
 8007aa0:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 8007aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	3718      	adds	r7, #24
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bd80      	pop	{r7, pc}
 8007aae:	bf00      	nop
 8007ab0:	20000dcc 	.word	0x20000dcc
 8007ab4:	20000dcd 	.word	0x20000dcd

08007ab8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b086      	sub	sp, #24
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	607a      	str	r2, [r7, #4]
 8007ac2:	603b      	str	r3, [r7, #0]
 8007ac4:	460b      	mov	r3, r1
 8007ac6:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 8007acc:	f107 030b 	add.w	r3, r7, #11
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	68f8      	ldr	r0, [r7, #12]
 8007ad6:	f7ff ff53 	bl	8007980 <_I2CWrite>
 8007ada:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d002      	beq.n	8007ae8 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ae2:	23ec      	movs	r3, #236	; 0xec
 8007ae4:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007ae6:	e00c      	b.n	8007b02 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 8007ae8:	683a      	ldr	r2, [r7, #0]
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	68f8      	ldr	r0, [r7, #12]
 8007aee:	f7ff ff66 	bl	80079be <_I2CRead>
 8007af2:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d002      	beq.n	8007b00 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007afa:	23ec      	movs	r3, #236	; 0xec
 8007afc:	75fb      	strb	r3, [r7, #23]
 8007afe:	e000      	b.n	8007b02 <VL53L0X_ReadMulti+0x4a>
    }
done:
 8007b00:	bf00      	nop
    return Status;
 8007b02:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3718      	adds	r7, #24
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}
	...

08007b10 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b086      	sub	sp, #24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	60f8      	str	r0, [r7, #12]
 8007b18:	460b      	mov	r3, r1
 8007b1a:	607a      	str	r2, [r7, #4]
 8007b1c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b1e:	2300      	movs	r3, #0
 8007b20:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007b22:	f107 030b 	add.w	r3, r7, #11
 8007b26:	2201      	movs	r2, #1
 8007b28:	4619      	mov	r1, r3
 8007b2a:	68f8      	ldr	r0, [r7, #12]
 8007b2c:	f7ff ff28 	bl	8007980 <_I2CWrite>
 8007b30:	6138      	str	r0, [r7, #16]

    if( status_int ){
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d002      	beq.n	8007b3e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007b38:	23ec      	movs	r3, #236	; 0xec
 8007b3a:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007b3c:	e017      	b.n	8007b6e <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 8007b3e:	2202      	movs	r2, #2
 8007b40:	490e      	ldr	r1, [pc, #56]	; (8007b7c <VL53L0X_RdWord+0x6c>)
 8007b42:	68f8      	ldr	r0, [r7, #12]
 8007b44:	f7ff ff3b 	bl	80079be <_I2CRead>
 8007b48:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007b4a:	693b      	ldr	r3, [r7, #16]
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d002      	beq.n	8007b56 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007b50:	23ec      	movs	r3, #236	; 0xec
 8007b52:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007b54:	e00b      	b.n	8007b6e <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 8007b56:	4b09      	ldr	r3, [pc, #36]	; (8007b7c <VL53L0X_RdWord+0x6c>)
 8007b58:	781b      	ldrb	r3, [r3, #0]
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	021b      	lsls	r3, r3, #8
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <VL53L0X_RdWord+0x6c>)
 8007b62:	785b      	ldrb	r3, [r3, #1]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	4413      	add	r3, r2
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 8007b6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000dcc 	.word	0x20000dcc

08007b80 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 8007b92:	f107 030b 	add.w	r3, r7, #11
 8007b96:	2201      	movs	r2, #1
 8007b98:	4619      	mov	r1, r3
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f7ff fef0 	bl	8007980 <_I2CWrite>
 8007ba0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d002      	beq.n	8007bae <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007ba8:	23ec      	movs	r3, #236	; 0xec
 8007baa:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007bac:	e01b      	b.n	8007be6 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 8007bae:	2204      	movs	r2, #4
 8007bb0:	4910      	ldr	r1, [pc, #64]	; (8007bf4 <VL53L0X_RdDWord+0x74>)
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff ff03 	bl	80079be <_I2CRead>
 8007bb8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 8007bba:	693b      	ldr	r3, [r7, #16]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d002      	beq.n	8007bc6 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007bc0:	23ec      	movs	r3, #236	; 0xec
 8007bc2:	75fb      	strb	r3, [r7, #23]
        goto done;
 8007bc4:	e00f      	b.n	8007be6 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 8007bc6:	4b0b      	ldr	r3, [pc, #44]	; (8007bf4 <VL53L0X_RdDWord+0x74>)
 8007bc8:	781b      	ldrb	r3, [r3, #0]
 8007bca:	061a      	lsls	r2, r3, #24
 8007bcc:	4b09      	ldr	r3, [pc, #36]	; (8007bf4 <VL53L0X_RdDWord+0x74>)
 8007bce:	785b      	ldrb	r3, [r3, #1]
 8007bd0:	041b      	lsls	r3, r3, #16
 8007bd2:	441a      	add	r2, r3
 8007bd4:	4b07      	ldr	r3, [pc, #28]	; (8007bf4 <VL53L0X_RdDWord+0x74>)
 8007bd6:	789b      	ldrb	r3, [r3, #2]
 8007bd8:	021b      	lsls	r3, r3, #8
 8007bda:	4413      	add	r3, r2
 8007bdc:	4a05      	ldr	r2, [pc, #20]	; (8007bf4 <VL53L0X_RdDWord+0x74>)
 8007bde:	78d2      	ldrb	r2, [r2, #3]
 8007be0:	441a      	add	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	601a      	str	r2, [r3, #0]

done:
    return Status;
 8007be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3718      	adds	r7, #24
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	20000dcc 	.word	0x20000dcc

08007bf8 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	460b      	mov	r3, r1
 8007c02:	70fb      	strb	r3, [r7, #3]
 8007c04:	4613      	mov	r3, r2
 8007c06:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c08:	2300      	movs	r3, #0
 8007c0a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007c0c:	4a0b      	ldr	r2, [pc, #44]	; (8007c3c <VL53L0X_WrByte+0x44>)
 8007c0e:	78fb      	ldrb	r3, [r7, #3]
 8007c10:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 8007c12:	4a0a      	ldr	r2, [pc, #40]	; (8007c3c <VL53L0X_WrByte+0x44>)
 8007c14:	78bb      	ldrb	r3, [r7, #2]
 8007c16:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 8007c18:	2202      	movs	r2, #2
 8007c1a:	4908      	ldr	r1, [pc, #32]	; (8007c3c <VL53L0X_WrByte+0x44>)
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f7ff feaf 	bl	8007980 <_I2CWrite>
 8007c22:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d001      	beq.n	8007c2e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007c2a:	23ec      	movs	r3, #236	; 0xec
 8007c2c:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8007c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3710      	adds	r7, #16
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20000dcc 	.word	0x20000dcc

08007c40 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b084      	sub	sp, #16
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
 8007c48:	460b      	mov	r3, r1
 8007c4a:	70fb      	strb	r3, [r7, #3]
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007c50:	2300      	movs	r3, #0
 8007c52:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 8007c54:	4a0e      	ldr	r2, [pc, #56]	; (8007c90 <VL53L0X_WrWord+0x50>)
 8007c56:	78fb      	ldrb	r3, [r7, #3]
 8007c58:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 8007c5a:	883b      	ldrh	r3, [r7, #0]
 8007c5c:	0a1b      	lsrs	r3, r3, #8
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	b2da      	uxtb	r2, r3
 8007c62:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <VL53L0X_WrWord+0x50>)
 8007c64:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 8007c66:	883b      	ldrh	r3, [r7, #0]
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	4b09      	ldr	r3, [pc, #36]	; (8007c90 <VL53L0X_WrWord+0x50>)
 8007c6c:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 8007c6e:	2203      	movs	r2, #3
 8007c70:	4907      	ldr	r1, [pc, #28]	; (8007c90 <VL53L0X_WrWord+0x50>)
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f7ff fe84 	bl	8007980 <_I2CWrite>
 8007c78:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 8007c80:	23ec      	movs	r3, #236	; 0xec
 8007c82:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 8007c84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3710      	adds	r7, #16
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	20000dcc 	.word	0x20000dcc

08007c94 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b084      	sub	sp, #16
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	4608      	mov	r0, r1
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	70fb      	strb	r3, [r7, #3]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70bb      	strb	r3, [r7, #2]
 8007caa:	4613      	mov	r3, r2
 8007cac:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 8007cb2:	f107 020e 	add.w	r2, r7, #14
 8007cb6:	78fb      	ldrb	r3, [r7, #3]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f7ff fea1 	bl	8007a02 <VL53L0X_RdByte>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 8007cc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d110      	bne.n	8007cee <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 8007ccc:	7bba      	ldrb	r2, [r7, #14]
 8007cce:	78bb      	ldrb	r3, [r7, #2]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	787b      	ldrb	r3, [r7, #1]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	b2db      	uxtb	r3, r3
 8007cda:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 8007cdc:	7bba      	ldrb	r2, [r7, #14]
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7ff ff88 	bl	8007bf8 <VL53L0X_WrByte>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73fb      	strb	r3, [r7, #15]
 8007cec:	e000      	b.n	8007cf0 <VL53L0X_UpdateByte+0x5c>
        goto done;
 8007cee:	bf00      	nop
done:
    return Status;
 8007cf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}

08007cfc <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b084      	sub	sp, #16
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8007d04:	2300      	movs	r3, #0
 8007d06:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 8007d08:	2002      	movs	r0, #2
 8007d0a:	f000 fedd 	bl	8008ac8 <HAL_Delay>
    return status;
 8007d0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3710      	adds	r7, #16
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}
	...

08007d1c <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 8007d1c:	b084      	sub	sp, #16
 8007d1e:	b580      	push	{r7, lr}
 8007d20:	b088      	sub	sp, #32
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 8007d28:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 8007d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007d30:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 8007d32:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8007d36:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 8007d38:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8007d3c:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 8007d3e:	230e      	movs	r3, #14
 8007d40:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 8007d42:	230a      	movs	r3, #10
 8007d44:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 8007d46:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 80ac 	beq.w	8007ea8 <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 8007d50:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007d54:	f7fb f8e0 	bl	8002f18 <VL53L0X_StaticInit>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d002      	beq.n	8007d68 <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 8007d62:	4855      	ldr	r0, [pc, #340]	; (8007eb8 <SetupSingleShot+0x19c>)
 8007d64:	f006 fbd8 	bl	800e518 <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 8007d68:	f107 020a 	add.w	r2, r7, #10
 8007d6c:	f107 030b 	add.w	r3, r7, #11
 8007d70:	4619      	mov	r1, r3
 8007d72:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007d76:	f7fb ffa3 	bl	8003cc0 <VL53L0X_PerformRefCalibration>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 8007d84:	484d      	ldr	r0, [pc, #308]	; (8007ebc <SetupSingleShot+0x1a0>)
 8007d86:	f006 fbc7 	bl	800e518 <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 8007d8a:	1cfa      	adds	r2, r7, #3
 8007d8c:	1d3b      	adds	r3, r7, #4
 8007d8e:	4619      	mov	r1, r3
 8007d90:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007d94:	f7fc fbec 	bl	8004570 <VL53L0X_PerformRefSpadManagement>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d002      	beq.n	8007da8 <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 8007da2:	4847      	ldr	r0, [pc, #284]	; (8007ec0 <SetupSingleShot+0x1a4>)
 8007da4:	f006 fbb8 	bl	800e518 <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 8007da8:	2100      	movs	r1, #0
 8007daa:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007dae:	f7fb fac5 	bl	800333c <VL53L0X_SetDeviceMode>
 8007db2:	4603      	mov	r3, r0
 8007db4:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 8007dbc:	4841      	ldr	r0, [pc, #260]	; (8007ec4 <SetupSingleShot+0x1a8>)
 8007dbe:	f006 fbab 	bl	800e518 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	2100      	movs	r1, #0
 8007dc6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007dca:	f7fb fd73 	bl	80038b4 <VL53L0X_SetLimitCheckEnable>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d002      	beq.n	8007dde <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8007dd8:	483b      	ldr	r0, [pc, #236]	; (8007ec8 <SetupSingleShot+0x1ac>)
 8007dda:	f006 fb9d 	bl	800e518 <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 8007dde:	2201      	movs	r2, #1
 8007de0:	2101      	movs	r1, #1
 8007de2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007de6:	f7fb fd65 	bl	80038b4 <VL53L0X_SetLimitCheckEnable>
 8007dea:	4603      	mov	r3, r0
 8007dec:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d002      	beq.n	8007dfa <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 8007df4:	4834      	ldr	r0, [pc, #208]	; (8007ec8 <SetupSingleShot+0x1ac>)
 8007df6:	f006 fb8f 	bl	800e518 <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 8007dfa:	f641 1399 	movw	r3, #6553	; 0x1999
 8007dfe:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 8007e00:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8007e04:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 8007e06:	f248 03e8 	movw	r3, #33000	; 0x80e8
 8007e0a:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 8007e0c:	2312      	movs	r3, #18
 8007e0e:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 8007e10:	230e      	movs	r3, #14
 8007e12:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 8007e14:	69fa      	ldr	r2, [r7, #28]
 8007e16:	2101      	movs	r1, #1
 8007e18:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007e1c:	f7fb fdfa 	bl	8003a14 <VL53L0X_SetLimitCheckValue>
 8007e20:	4603      	mov	r3, r0
 8007e22:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d002      	beq.n	8007e30 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8007e2a:	4828      	ldr	r0, [pc, #160]	; (8007ecc <SetupSingleShot+0x1b0>)
 8007e2c:	f006 fb74 	bl	800e518 <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 8007e30:	69ba      	ldr	r2, [r7, #24]
 8007e32:	2100      	movs	r1, #0
 8007e34:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007e38:	f7fb fdec 	bl	8003a14 <VL53L0X_SetLimitCheckValue>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d002      	beq.n	8007e4c <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 8007e46:	4821      	ldr	r0, [pc, #132]	; (8007ecc <SetupSingleShot+0x1b0>)
 8007e48:	f006 fb66 	bl	800e518 <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 8007e4c:	6979      	ldr	r1, [r7, #20]
 8007e4e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007e52:	f7fb fad1 	bl	80033f8 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 8007e56:	4603      	mov	r3, r0
 8007e58:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d002      	beq.n	8007e66 <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 8007e60:	481b      	ldr	r0, [pc, #108]	; (8007ed0 <SetupSingleShot+0x1b4>)
 8007e62:	f006 fb59 	bl	800e518 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 8007e66:	7cfb      	ldrb	r3, [r7, #19]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	2100      	movs	r1, #0
 8007e6c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007e70:	f7fb fae8 	bl	8003444 <VL53L0X_SetVcselPulsePeriod>
 8007e74:	4603      	mov	r3, r0
 8007e76:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8007e7e:	4815      	ldr	r0, [pc, #84]	; (8007ed4 <SetupSingleShot+0x1b8>)
 8007e80:	f006 fb4a 	bl	800e518 <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 8007e84:	7cbb      	ldrb	r3, [r7, #18]
 8007e86:	461a      	mov	r2, r3
 8007e88:	2101      	movs	r1, #1
 8007e8a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8007e8e:	f7fb fad9 	bl	8003444 <VL53L0X_SetVcselPulsePeriod>
 8007e92:	4603      	mov	r3, r0
 8007e94:	60fb      	str	r3, [r7, #12]
    if( status ){
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d002      	beq.n	8007ea2 <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 8007e9c:	480d      	ldr	r0, [pc, #52]	; (8007ed4 <SetupSingleShot+0x1b8>)
 8007e9e:	f006 fb3b 	bl	800e518 <puts>
    }
    
    Dev.LeakyFirst=1;
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 8007ea8:	bf00      	nop
 8007eaa:	3720      	adds	r7, #32
 8007eac:	46bd      	mov	sp, r7
 8007eae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007eb2:	b004      	add	sp, #16
 8007eb4:	4770      	bx	lr
 8007eb6:	bf00      	nop
 8007eb8:	08011068 	.word	0x08011068
 8007ebc:	08011084 	.word	0x08011084
 8007ec0:	080110ac 	.word	0x080110ac
 8007ec4:	080110d4 	.word	0x080110d4
 8007ec8:	080110f4 	.word	0x080110f4
 8007ecc:	08011118 	.word	0x08011118
 8007ed0:	0801113c 	.word	0x0801113c
 8007ed4:	08011174 	.word	0x08011174

08007ed8 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	4603      	mov	r3, r0
 8007ee0:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8007ee2:	88fb      	ldrh	r3, [r7, #6]
 8007ee4:	b2db      	uxtb	r3, r3
 8007ee6:	2120      	movs	r1, #32
 8007ee8:	4618      	mov	r0, r3
 8007eea:	f7fa fd2f 	bl	800294c <SENSOR_IO_Read>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	f023 0304 	bic.w	r3, r3, #4
 8007ef8:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8007efa:	7bfb      	ldrb	r3, [r7, #15]
 8007efc:	f043 0304 	orr.w	r3, r3, #4
 8007f00:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8007f02:	7bfb      	ldrb	r3, [r7, #15]
 8007f04:	f023 0303 	bic.w	r3, r3, #3
 8007f08:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	f043 0301 	orr.w	r3, r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f18:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8007f1a:	88fb      	ldrh	r3, [r7, #6]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	7bfa      	ldrb	r2, [r7, #15]
 8007f20:	2120      	movs	r1, #32
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fa fcf8 	bl	8002918 <SENSOR_IO_Write>
}
 8007f28:	bf00      	nop
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	4603      	mov	r3, r0
 8007f38:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 8007f3e:	f7fa fce1 	bl	8002904 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 8007f42:	88fb      	ldrh	r3, [r7, #6]
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	210f      	movs	r1, #15
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fa fcff 	bl	800294c <SENSOR_IO_Read>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8007f52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b088      	sub	sp, #32
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	4603      	mov	r3, r0
 8007f64:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 8007f66:	88fb      	ldrh	r3, [r7, #6]
 8007f68:	b2d8      	uxtb	r0, r3
 8007f6a:	f107 020c 	add.w	r2, r7, #12
 8007f6e:	2302      	movs	r3, #2
 8007f70:	21b0      	movs	r1, #176	; 0xb0
 8007f72:	f7fa fd09 	bl	8002988 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 8007f76:	7b3b      	ldrb	r3, [r7, #12]
 8007f78:	085b      	lsrs	r3, r3, #1
 8007f7a:	b2db      	uxtb	r3, r3
 8007f7c:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 8007f7e:	7b7b      	ldrb	r3, [r7, #13]
 8007f80:	085b      	lsrs	r3, r3, #1
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 8007f86:	88fb      	ldrh	r3, [r7, #6]
 8007f88:	b2d8      	uxtb	r0, r3
 8007f8a:	f107 020c 	add.w	r2, r7, #12
 8007f8e:	2302      	movs	r3, #2
 8007f90:	21b6      	movs	r1, #182	; 0xb6
 8007f92:	f7fa fcf9 	bl	8002988 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8007f96:	7b7b      	ldrb	r3, [r7, #13]
 8007f98:	021b      	lsls	r3, r3, #8
 8007f9a:	b21a      	sxth	r2, r3
 8007f9c:	7b3b      	ldrb	r3, [r7, #12]
 8007f9e:	b21b      	sxth	r3, r3
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 8007fa4:	88fb      	ldrh	r3, [r7, #6]
 8007fa6:	b2d8      	uxtb	r0, r3
 8007fa8:	f107 020c 	add.w	r2, r7, #12
 8007fac:	2302      	movs	r3, #2
 8007fae:	21ba      	movs	r1, #186	; 0xba
 8007fb0:	f7fa fcea 	bl	8002988 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8007fb4:	7b7b      	ldrb	r3, [r7, #13]
 8007fb6:	021b      	lsls	r3, r3, #8
 8007fb8:	b21a      	sxth	r2, r3
 8007fba:	7b3b      	ldrb	r3, [r7, #12]
 8007fbc:	b21b      	sxth	r3, r3
 8007fbe:	4313      	orrs	r3, r2
 8007fc0:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 8007fc2:	88fb      	ldrh	r3, [r7, #6]
 8007fc4:	b2d8      	uxtb	r0, r3
 8007fc6:	f107 020c 	add.w	r2, r7, #12
 8007fca:	2302      	movs	r3, #2
 8007fcc:	21a8      	movs	r1, #168	; 0xa8
 8007fce:	f7fa fcdb 	bl	8002988 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8007fd2:	7b7b      	ldrb	r3, [r7, #13]
 8007fd4:	021b      	lsls	r3, r3, #8
 8007fd6:	b21a      	sxth	r2, r3
 8007fd8:	7b3b      	ldrb	r3, [r7, #12]
 8007fda:	b21b      	sxth	r3, r3
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 8007fe0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8007fe4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	ee07 3a90 	vmov	s15, r3
 8007fee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007ff2:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8007ff6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8007ffa:	1ad3      	subs	r3, r2, r3
 8007ffc:	ee07 3a90 	vmov	s15, r3
 8008000:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008004:	ee67 6a27 	vmul.f32	s13, s14, s15
 8008008:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800800c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8008010:	1ad3      	subs	r3, r2, r3
 8008012:	ee07 3a90 	vmov	s15, r3
 8008016:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800801a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800801e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008022:	ee07 3a90 	vmov	s15, r3
 8008026:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800802a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800802e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 8008032:	edd7 7a04 	vldr	s15, [r7, #16]
 8008036:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800803a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800803e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 8008042:	edd7 7a04 	vldr	s15, [r7, #16]
 8008046:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800808c <HTS221_H_ReadHumidity+0x130>
 800804a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800804e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008052:	dd01      	ble.n	8008058 <HTS221_H_ReadHumidity+0xfc>
 8008054:	4b0e      	ldr	r3, [pc, #56]	; (8008090 <HTS221_H_ReadHumidity+0x134>)
 8008056:	e00a      	b.n	800806e <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 8008058:	edd7 7a04 	vldr	s15, [r7, #16]
 800805c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008064:	d502      	bpl.n	800806c <HTS221_H_ReadHumidity+0x110>
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	e000      	b.n	800806e <HTS221_H_ReadHumidity+0x112>
 800806c:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800806e:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 8008070:	edd7 7a04 	vldr	s15, [r7, #16]
 8008074:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8008078:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800807c:	eef0 7a66 	vmov.f32	s15, s13
}
 8008080:	eeb0 0a67 	vmov.f32	s0, s15
 8008084:	3720      	adds	r7, #32
 8008086:	46bd      	mov	sp, r7
 8008088:	bd80      	pop	{r7, pc}
 800808a:	bf00      	nop
 800808c:	447a0000 	.word	0x447a0000
 8008090:	447a0000 	.word	0x447a0000

08008094 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8008094:	b580      	push	{r7, lr}
 8008096:	b084      	sub	sp, #16
 8008098:	af00      	add	r7, sp, #0
 800809a:	4603      	mov	r3, r0
 800809c:	6039      	str	r1, [r7, #0]
 800809e:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2120      	movs	r1, #32
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fa fc50 	bl	800294c <SENSOR_IO_Read>
 80080ac:	4603      	mov	r3, r0
 80080ae:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 80080b0:	7bfb      	ldrb	r3, [r7, #15]
 80080b2:	f023 0304 	bic.w	r3, r3, #4
 80080b6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
 80080ba:	f043 0304 	orr.w	r3, r3, #4
 80080be:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	f023 0303 	bic.w	r3, r3, #3
 80080c6:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 80080c8:	7bfb      	ldrb	r3, [r7, #15]
 80080ca:	f043 0301 	orr.w	r3, r3, #1
 80080ce:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 80080d0:	7bfb      	ldrb	r3, [r7, #15]
 80080d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80080d6:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 80080d8:	88fb      	ldrh	r3, [r7, #6]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	7bfa      	ldrb	r2, [r7, #15]
 80080de:	2120      	movs	r1, #32
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fa fc19 	bl	8002918 <SENSOR_IO_Write>
}
 80080e6:	bf00      	nop
 80080e8:	3710      	adds	r7, #16
 80080ea:	46bd      	mov	sp, r7
 80080ec:	bd80      	pop	{r7, pc}

080080ee <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 80080ee:	b580      	push	{r7, lr}
 80080f0:	b088      	sub	sp, #32
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	4603      	mov	r3, r0
 80080f6:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 80080f8:	88fb      	ldrh	r3, [r7, #6]
 80080fa:	b2d8      	uxtb	r0, r3
 80080fc:	f107 0208 	add.w	r2, r7, #8
 8008100:	2302      	movs	r3, #2
 8008102:	21b2      	movs	r1, #178	; 0xb2
 8008104:	f7fa fc40 	bl	8002988 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8008108:	88fb      	ldrh	r3, [r7, #6]
 800810a:	b2db      	uxtb	r3, r3
 800810c:	2135      	movs	r1, #53	; 0x35
 800810e:	4618      	mov	r0, r3
 8008110:	f7fa fc1c 	bl	800294c <SENSOR_IO_Read>
 8008114:	4603      	mov	r3, r0
 8008116:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8008118:	7ffb      	ldrb	r3, [r7, #31]
 800811a:	021b      	lsls	r3, r3, #8
 800811c:	b21b      	sxth	r3, r3
 800811e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008122:	b21a      	sxth	r2, r3
 8008124:	7a3b      	ldrb	r3, [r7, #8]
 8008126:	b21b      	sxth	r3, r3
 8008128:	4313      	orrs	r3, r2
 800812a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800812c:	7ffb      	ldrb	r3, [r7, #31]
 800812e:	019b      	lsls	r3, r3, #6
 8008130:	b21b      	sxth	r3, r3
 8008132:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008136:	b21a      	sxth	r2, r3
 8008138:	7a7b      	ldrb	r3, [r7, #9]
 800813a:	b21b      	sxth	r3, r3
 800813c:	4313      	orrs	r3, r2
 800813e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8008140:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8008144:	10db      	asrs	r3, r3, #3
 8008146:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8008148:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800814c:	10db      	asrs	r3, r3, #3
 800814e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8008150:	88fb      	ldrh	r3, [r7, #6]
 8008152:	b2d8      	uxtb	r0, r3
 8008154:	f107 0208 	add.w	r2, r7, #8
 8008158:	2304      	movs	r3, #4
 800815a:	21bc      	movs	r1, #188	; 0xbc
 800815c:	f7fa fc14 	bl	8002988 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8008160:	7a7b      	ldrb	r3, [r7, #9]
 8008162:	021b      	lsls	r3, r3, #8
 8008164:	b21a      	sxth	r2, r3
 8008166:	7a3b      	ldrb	r3, [r7, #8]
 8008168:	b21b      	sxth	r3, r3
 800816a:	4313      	orrs	r3, r2
 800816c:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800816e:	7afb      	ldrb	r3, [r7, #11]
 8008170:	021b      	lsls	r3, r3, #8
 8008172:	b21a      	sxth	r2, r3
 8008174:	7abb      	ldrb	r3, [r7, #10]
 8008176:	b21b      	sxth	r3, r3
 8008178:	4313      	orrs	r3, r2
 800817a:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800817c:	88fb      	ldrh	r3, [r7, #6]
 800817e:	b2d8      	uxtb	r0, r3
 8008180:	f107 0208 	add.w	r2, r7, #8
 8008184:	2302      	movs	r3, #2
 8008186:	21aa      	movs	r1, #170	; 0xaa
 8008188:	f7fa fbfe 	bl	8002988 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800818c:	7a7b      	ldrb	r3, [r7, #9]
 800818e:	021b      	lsls	r3, r3, #8
 8008190:	b21a      	sxth	r2, r3
 8008192:	7a3b      	ldrb	r3, [r7, #8]
 8008194:	b21b      	sxth	r3, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800819a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800819e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081a2:	1ad3      	subs	r3, r2, r3
 80081a4:	ee07 3a90 	vmov	s15, r3
 80081a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80081ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80081b0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80081b4:	1ad3      	subs	r3, r2, r3
 80081b6:	ee07 3a90 	vmov	s15, r3
 80081ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80081c2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80081c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80081ca:	1ad3      	subs	r3, r2, r3
 80081cc:	ee07 3a90 	vmov	s15, r3
 80081d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80081d8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80081dc:	ee07 3a90 	vmov	s15, r3
 80081e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80081e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80081e8:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	ee07 3a90 	vmov	s15, r3
}
 80081f2:	eeb0 0a67 	vmov.f32	s0, s15
 80081f6:	3720      	adds	r7, #32
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	463b      	mov	r3, r7
 8008204:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 8008208:	783b      	ldrb	r3, [r7, #0]
 800820a:	461a      	mov	r2, r3
 800820c:	2120      	movs	r1, #32
 800820e:	203c      	movs	r0, #60	; 0x3c
 8008210:	f7fa fb82 	bl	8002918 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 8008214:	787b      	ldrb	r3, [r7, #1]
 8008216:	461a      	mov	r2, r3
 8008218:	2121      	movs	r1, #33	; 0x21
 800821a:	203c      	movs	r0, #60	; 0x3c
 800821c:	f7fa fb7c 	bl	8002918 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 8008220:	78bb      	ldrb	r3, [r7, #2]
 8008222:	461a      	mov	r2, r3
 8008224:	2122      	movs	r1, #34	; 0x22
 8008226:	203c      	movs	r0, #60	; 0x3c
 8008228:	f7fa fb76 	bl	8002918 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800822c:	78fb      	ldrb	r3, [r7, #3]
 800822e:	461a      	mov	r2, r3
 8008230:	2123      	movs	r1, #35	; 0x23
 8008232:	203c      	movs	r0, #60	; 0x3c
 8008234:	f7fa fb70 	bl	8002918 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 8008238:	793b      	ldrb	r3, [r7, #4]
 800823a:	461a      	mov	r2, r3
 800823c:	2124      	movs	r1, #36	; 0x24
 800823e:	203c      	movs	r0, #60	; 0x3c
 8008240:	f7fa fb6a 	bl	8002918 <SENSOR_IO_Write>
}
 8008244:	bf00      	nop
 8008246:	3708      	adds	r7, #8
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b082      	sub	sp, #8
 8008250:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008252:	2300      	movs	r3, #0
 8008254:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 8008256:	2122      	movs	r1, #34	; 0x22
 8008258:	203c      	movs	r0, #60	; 0x3c
 800825a:	f7fa fb77 	bl	800294c <SENSOR_IO_Read>
 800825e:	4603      	mov	r3, r0
 8008260:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 8008262:	79fb      	ldrb	r3, [r7, #7]
 8008264:	f023 0303 	bic.w	r3, r3, #3
 8008268:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800826a:	79fb      	ldrb	r3, [r7, #7]
 800826c:	f043 0303 	orr.w	r3, r3, #3
 8008270:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 8008272:	79fb      	ldrb	r3, [r7, #7]
 8008274:	461a      	mov	r2, r3
 8008276:	2122      	movs	r1, #34	; 0x22
 8008278:	203c      	movs	r0, #60	; 0x3c
 800827a:	f7fa fb4d 	bl	8002918 <SENSOR_IO_Write>
}
 800827e:	bf00      	nop
 8008280:	3708      	adds	r7, #8
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}

08008286 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 8008286:	b580      	push	{r7, lr}
 8008288:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800828a:	f7fa fb3b 	bl	8002904 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800828e:	210f      	movs	r1, #15
 8008290:	203c      	movs	r0, #60	; 0x3c
 8008292:	f7fa fb5b 	bl	800294c <SENSOR_IO_Read>
 8008296:	4603      	mov	r3, r0
}
 8008298:	4618      	mov	r0, r3
 800829a:	bd80      	pop	{r7, pc}

0800829c <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	4603      	mov	r3, r0
 80082a4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 80082aa:	2122      	movs	r1, #34	; 0x22
 80082ac:	203c      	movs	r0, #60	; 0x3c
 80082ae:	f7fa fb4d 	bl	800294c <SENSOR_IO_Read>
 80082b2:	4603      	mov	r3, r0
 80082b4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 80082b6:	7bfb      	ldrb	r3, [r7, #15]
 80082b8:	f023 0320 	bic.w	r3, r3, #32
 80082bc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80082be:	88fb      	ldrh	r3, [r7, #6]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d003      	beq.n	80082cc <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	f043 0320 	orr.w	r3, r3, #32
 80082ca:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	461a      	mov	r2, r3
 80082d0:	2122      	movs	r1, #34	; 0x22
 80082d2:	203c      	movs	r0, #60	; 0x3c
 80082d4:	f7fa fb20 	bl	8002918 <SENSOR_IO_Write>
}
 80082d8:	bf00      	nop
 80082da:	3710      	adds	r7, #16
 80082dc:	46bd      	mov	sp, r7
 80082de:	bd80      	pop	{r7, pc}

080082e0 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b088      	sub	sp, #32
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80082f0:	f04f 0300 	mov.w	r3, #0
 80082f4:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 80082f6:	2121      	movs	r1, #33	; 0x21
 80082f8:	203c      	movs	r0, #60	; 0x3c
 80082fa:	f7fa fb27 	bl	800294c <SENSOR_IO_Read>
 80082fe:	4603      	mov	r3, r0
 8008300:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 8008302:	f107 0208 	add.w	r2, r7, #8
 8008306:	2306      	movs	r3, #6
 8008308:	21a8      	movs	r1, #168	; 0xa8
 800830a:	203c      	movs	r0, #60	; 0x3c
 800830c:	f7fa fb3c 	bl	8002988 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8008310:	2300      	movs	r3, #0
 8008312:	77fb      	strb	r3, [r7, #31]
 8008314:	e01f      	b.n	8008356 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8008316:	7ffb      	ldrb	r3, [r7, #31]
 8008318:	005b      	lsls	r3, r3, #1
 800831a:	3301      	adds	r3, #1
 800831c:	f107 0220 	add.w	r2, r7, #32
 8008320:	4413      	add	r3, r2
 8008322:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008326:	b29b      	uxth	r3, r3
 8008328:	021b      	lsls	r3, r3, #8
 800832a:	b29a      	uxth	r2, r3
 800832c:	7ffb      	ldrb	r3, [r7, #31]
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	f107 0120 	add.w	r1, r7, #32
 8008334:	440b      	add	r3, r1
 8008336:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800833a:	b29b      	uxth	r3, r3
 800833c:	4413      	add	r3, r2
 800833e:	b29a      	uxth	r2, r3
 8008340:	7ffb      	ldrb	r3, [r7, #31]
 8008342:	b212      	sxth	r2, r2
 8008344:	005b      	lsls	r3, r3, #1
 8008346:	f107 0120 	add.w	r1, r7, #32
 800834a:	440b      	add	r3, r1
 800834c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8008350:	7ffb      	ldrb	r3, [r7, #31]
 8008352:	3301      	adds	r3, #1
 8008354:	77fb      	strb	r3, [r7, #31]
 8008356:	7ffb      	ldrb	r3, [r7, #31]
 8008358:	2b02      	cmp	r3, #2
 800835a:	d9dc      	bls.n	8008316 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800835c:	7dfb      	ldrb	r3, [r7, #23]
 800835e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008362:	2b60      	cmp	r3, #96	; 0x60
 8008364:	d013      	beq.n	800838e <LIS3MDL_MagReadXYZ+0xae>
 8008366:	2b60      	cmp	r3, #96	; 0x60
 8008368:	dc14      	bgt.n	8008394 <LIS3MDL_MagReadXYZ+0xb4>
 800836a:	2b40      	cmp	r3, #64	; 0x40
 800836c:	d00c      	beq.n	8008388 <LIS3MDL_MagReadXYZ+0xa8>
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	dc10      	bgt.n	8008394 <LIS3MDL_MagReadXYZ+0xb4>
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <LIS3MDL_MagReadXYZ+0x9c>
 8008376:	2b20      	cmp	r3, #32
 8008378:	d003      	beq.n	8008382 <LIS3MDL_MagReadXYZ+0xa2>
 800837a:	e00b      	b.n	8008394 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800837c:	4b19      	ldr	r3, [pc, #100]	; (80083e4 <LIS3MDL_MagReadXYZ+0x104>)
 800837e:	61bb      	str	r3, [r7, #24]
    break;
 8008380:	e008      	b.n	8008394 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 8008382:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <LIS3MDL_MagReadXYZ+0x108>)
 8008384:	61bb      	str	r3, [r7, #24]
    break;
 8008386:	e005      	b.n	8008394 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 8008388:	4b18      	ldr	r3, [pc, #96]	; (80083ec <LIS3MDL_MagReadXYZ+0x10c>)
 800838a:	61bb      	str	r3, [r7, #24]
    break;
 800838c:	e002      	b.n	8008394 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800838e:	4b18      	ldr	r3, [pc, #96]	; (80083f0 <LIS3MDL_MagReadXYZ+0x110>)
 8008390:	61bb      	str	r3, [r7, #24]
    break;    
 8008392:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 8008394:	2300      	movs	r3, #0
 8008396:	77fb      	strb	r3, [r7, #31]
 8008398:	e01b      	b.n	80083d2 <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800839a:	7ffb      	ldrb	r3, [r7, #31]
 800839c:	005b      	lsls	r3, r3, #1
 800839e:	f107 0220 	add.w	r2, r7, #32
 80083a2:	4413      	add	r3, r2
 80083a4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80083a8:	ee07 3a90 	vmov	s15, r3
 80083ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80083b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80083b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b8:	7ffb      	ldrb	r3, [r7, #31]
 80083ba:	005b      	lsls	r3, r3, #1
 80083bc:	687a      	ldr	r2, [r7, #4]
 80083be:	4413      	add	r3, r2
 80083c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80083c4:	ee17 2a90 	vmov	r2, s15
 80083c8:	b212      	sxth	r2, r2
 80083ca:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 80083cc:	7ffb      	ldrb	r3, [r7, #31]
 80083ce:	3301      	adds	r3, #1
 80083d0:	77fb      	strb	r3, [r7, #31]
 80083d2:	7ffb      	ldrb	r3, [r7, #31]
 80083d4:	2b02      	cmp	r3, #2
 80083d6:	d9e0      	bls.n	800839a <LIS3MDL_MagReadXYZ+0xba>
  }
}
 80083d8:	bf00      	nop
 80083da:	bf00      	nop
 80083dc:	3720      	adds	r7, #32
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd80      	pop	{r7, pc}
 80083e2:	bf00      	nop
 80083e4:	3e0f5c29 	.word	0x3e0f5c29
 80083e8:	3e947ae1 	.word	0x3e947ae1
 80083ec:	3edc28f6 	.word	0x3edc28f6
 80083f0:	3f147ae1 	.word	0x3f147ae1

080083f4 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b082      	sub	sp, #8
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 80083fe:	88fb      	ldrh	r3, [r7, #6]
 8008400:	4618      	mov	r0, r3
 8008402:	f000 f87b 	bl	80084fc <LPS22HB_Init>
}
 8008406:	bf00      	nop
 8008408:	3708      	adds	r7, #8
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}

0800840e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800840e:	b580      	push	{r7, lr}
 8008410:	b084      	sub	sp, #16
 8008412:	af00      	add	r7, sp, #0
 8008414:	4603      	mov	r3, r0
 8008416:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008418:	2300      	movs	r3, #0
 800841a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800841c:	f7fa fa72 	bl	8002904 <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 8008420:	88fb      	ldrh	r3, [r7, #6]
 8008422:	b2db      	uxtb	r3, r3
 8008424:	210f      	movs	r1, #15
 8008426:	4618      	mov	r0, r3
 8008428:	f7fa fa90 	bl	800294c <SENSOR_IO_Read>
 800842c:	4603      	mov	r3, r0
 800842e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 8008430:	7bfb      	ldrb	r3, [r7, #15]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	4603      	mov	r3, r0
 8008444:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800844a:	2300      	movs	r3, #0
 800844c:	74fb      	strb	r3, [r7, #19]
 800844e:	e013      	b.n	8008478 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 8008450:	88fb      	ldrh	r3, [r7, #6]
 8008452:	b2da      	uxtb	r2, r3
 8008454:	7cfb      	ldrb	r3, [r7, #19]
 8008456:	3328      	adds	r3, #40	; 0x28
 8008458:	b2db      	uxtb	r3, r3
 800845a:	7cfc      	ldrb	r4, [r7, #19]
 800845c:	4619      	mov	r1, r3
 800845e:	4610      	mov	r0, r2
 8008460:	f7fa fa74 	bl	800294c <SENSOR_IO_Read>
 8008464:	4603      	mov	r3, r0
 8008466:	461a      	mov	r2, r3
 8008468:	f107 0318 	add.w	r3, r7, #24
 800846c:	4423      	add	r3, r4
 800846e:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 8008472:	7cfb      	ldrb	r3, [r7, #19]
 8008474:	3301      	adds	r3, #1
 8008476:	74fb      	strb	r3, [r7, #19]
 8008478:	7cfb      	ldrb	r3, [r7, #19]
 800847a:	2b02      	cmp	r3, #2
 800847c:	d9e8      	bls.n	8008450 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800847e:	2300      	movs	r3, #0
 8008480:	74fb      	strb	r3, [r7, #19]
 8008482:	e010      	b.n	80084a6 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 8008484:	7cfb      	ldrb	r3, [r7, #19]
 8008486:	f107 0218 	add.w	r2, r7, #24
 800848a:	4413      	add	r3, r2
 800848c:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8008490:	461a      	mov	r2, r3
 8008492:	7cfb      	ldrb	r3, [r7, #19]
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	fa02 f303 	lsl.w	r3, r2, r3
 800849a:	697a      	ldr	r2, [r7, #20]
 800849c:	4313      	orrs	r3, r2
 800849e:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 80084a0:	7cfb      	ldrb	r3, [r7, #19]
 80084a2:	3301      	adds	r3, #1
 80084a4:	74fb      	strb	r3, [r7, #19]
 80084a6:	7cfb      	ldrb	r3, [r7, #19]
 80084a8:	2b02      	cmp	r3, #2
 80084aa:	d9eb      	bls.n	8008484 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 80084ac:	697b      	ldr	r3, [r7, #20]
 80084ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d003      	beq.n	80084be <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80084bc:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2264      	movs	r2, #100	; 0x64
 80084c6:	fb02 f303 	mul.w	r3, r2, r3
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	da01      	bge.n	80084d2 <LPS22HB_P_ReadPressure+0x96>
 80084ce:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 80084d2:	131b      	asrs	r3, r3, #12
 80084d4:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	ee07 3a90 	vmov	s15, r3
 80084dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80084e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80084f8 <LPS22HB_P_ReadPressure+0xbc>
 80084e4:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80084e8:	eef0 7a66 	vmov.f32	s15, s13
}
 80084ec:	eeb0 0a67 	vmov.f32	s0, s15
 80084f0:	371c      	adds	r7, #28
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd90      	pop	{r4, r7, pc}
 80084f6:	bf00      	nop
 80084f8:	42c80000 	.word	0x42c80000

080084fc <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b084      	sub	sp, #16
 8008500:	af00      	add	r7, sp, #0
 8008502:	4603      	mov	r3, r0
 8008504:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 8008506:	88fb      	ldrh	r3, [r7, #6]
 8008508:	b2db      	uxtb	r3, r3
 800850a:	211a      	movs	r1, #26
 800850c:	4618      	mov	r0, r3
 800850e:	f7fa fa1d 	bl	800294c <SENSOR_IO_Read>
 8008512:	4603      	mov	r3, r0
 8008514:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	f023 0301 	bic.w	r3, r3, #1
 800851c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	f043 0301 	orr.w	r3, r3, #1
 8008524:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 8008526:	88fb      	ldrh	r3, [r7, #6]
 8008528:	b2db      	uxtb	r3, r3
 800852a:	7bfa      	ldrb	r2, [r7, #15]
 800852c:	211a      	movs	r1, #26
 800852e:	4618      	mov	r0, r3
 8008530:	f7fa f9f2 	bl	8002918 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 8008534:	88fb      	ldrh	r3, [r7, #6]
 8008536:	b2db      	uxtb	r3, r3
 8008538:	2110      	movs	r1, #16
 800853a:	4618      	mov	r0, r3
 800853c:	f7fa fa06 	bl	800294c <SENSOR_IO_Read>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 8008544:	7bfb      	ldrb	r3, [r7, #15]
 8008546:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800854a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800854c:	7bfb      	ldrb	r3, [r7, #15]
 800854e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8008552:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	f023 0302 	bic.w	r3, r3, #2
 800855a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	f043 0302 	orr.w	r3, r3, #2
 8008562:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 8008564:	88fb      	ldrh	r3, [r7, #6]
 8008566:	b2db      	uxtb	r3, r3
 8008568:	7bfa      	ldrb	r2, [r7, #15]
 800856a:	2110      	movs	r1, #16
 800856c:	4618      	mov	r0, r3
 800856e:	f7fa f9d3 	bl	8002918 <SENSOR_IO_Write>
}  
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}

0800857a <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800857a:	b580      	push	{r7, lr}
 800857c:	b084      	sub	sp, #16
 800857e:	af00      	add	r7, sp, #0
 8008580:	4603      	mov	r3, r0
 8008582:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008584:	2300      	movs	r3, #0
 8008586:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008588:	2110      	movs	r1, #16
 800858a:	20d4      	movs	r0, #212	; 0xd4
 800858c:	f7fa f9de 	bl	800294c <SENSOR_IO_Read>
 8008590:	4603      	mov	r3, r0
 8008592:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8008594:	88fb      	ldrh	r3, [r7, #6]
 8008596:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8008598:	7bbb      	ldrb	r3, [r7, #14]
 800859a:	f003 0303 	and.w	r3, r3, #3
 800859e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80085a0:	7bba      	ldrb	r2, [r7, #14]
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
 80085a4:	4313      	orrs	r3, r2
 80085a6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	461a      	mov	r2, r3
 80085ac:	2110      	movs	r1, #16
 80085ae:	20d4      	movs	r0, #212	; 0xd4
 80085b0:	f7fa f9b2 	bl	8002918 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80085b4:	2112      	movs	r1, #18
 80085b6:	20d4      	movs	r0, #212	; 0xd4
 80085b8:	f7fa f9c8 	bl	800294c <SENSOR_IO_Read>
 80085bc:	4603      	mov	r3, r0
 80085be:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80085c0:	88fb      	ldrh	r3, [r7, #6]
 80085c2:	0a1b      	lsrs	r3, r3, #8
 80085c4:	b29b      	uxth	r3, r3
 80085c6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80085c8:	7bbb      	ldrb	r3, [r7, #14]
 80085ca:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80085ce:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80085d0:	7bba      	ldrb	r2, [r7, #14]
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	4313      	orrs	r3, r2
 80085d6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80085d8:	7bbb      	ldrb	r3, [r7, #14]
 80085da:	461a      	mov	r2, r3
 80085dc:	2112      	movs	r1, #18
 80085de:	20d4      	movs	r0, #212	; 0xd4
 80085e0:	f7fa f99a 	bl	8002918 <SENSOR_IO_Write>
}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80085f2:	2300      	movs	r3, #0
 80085f4:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80085f6:	2110      	movs	r1, #16
 80085f8:	20d4      	movs	r0, #212	; 0xd4
 80085fa:	f7fa f9a7 	bl	800294c <SENSOR_IO_Read>
 80085fe:	4603      	mov	r3, r0
 8008600:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8008602:	79fb      	ldrb	r3, [r7, #7]
 8008604:	f003 030f 	and.w	r3, r3, #15
 8008608:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	461a      	mov	r2, r3
 800860e:	2110      	movs	r1, #16
 8008610:	20d4      	movs	r0, #212	; 0xd4
 8008612:	f7fa f981 	bl	8002918 <SENSOR_IO_Write>
}
 8008616:	bf00      	nop
 8008618:	3708      	adds	r7, #8
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800861e:	b580      	push	{r7, lr}
 8008620:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8008622:	f7fa f96f 	bl	8002904 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8008626:	210f      	movs	r1, #15
 8008628:	20d4      	movs	r0, #212	; 0xd4
 800862a:	f7fa f98f 	bl	800294c <SENSOR_IO_Read>
 800862e:	4603      	mov	r3, r0
}
 8008630:	4618      	mov	r0, r3
 8008632:	bd80      	pop	{r7, pc}

08008634 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800863e:	2300      	movs	r3, #0
 8008640:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8008642:	2115      	movs	r1, #21
 8008644:	20d4      	movs	r0, #212	; 0xd4
 8008646:	f7fa f981 	bl	800294c <SENSOR_IO_Read>
 800864a:	4603      	mov	r3, r0
 800864c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800864e:	7bfb      	ldrb	r3, [r7, #15]
 8008650:	f023 0310 	bic.w	r3, r3, #16
 8008654:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8008656:	88fb      	ldrh	r3, [r7, #6]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d003      	beq.n	8008664 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800865c:	7bfb      	ldrb	r3, [r7, #15]
 800865e:	f043 0310 	orr.w	r3, r3, #16
 8008662:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8008664:	7bfb      	ldrb	r3, [r7, #15]
 8008666:	461a      	mov	r2, r3
 8008668:	2115      	movs	r1, #21
 800866a:	20d4      	movs	r0, #212	; 0xd4
 800866c:	f7fa f954 	bl	8002918 <SENSOR_IO_Write>
}
 8008670:	bf00      	nop
 8008672:	3710      	adds	r7, #16
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b088      	sub	sp, #32
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8008680:	2300      	movs	r3, #0
 8008682:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800868e:	2110      	movs	r1, #16
 8008690:	20d4      	movs	r0, #212	; 0xd4
 8008692:	f7fa f95b 	bl	800294c <SENSOR_IO_Read>
 8008696:	4603      	mov	r3, r0
 8008698:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800869a:	f107 0208 	add.w	r2, r7, #8
 800869e:	2306      	movs	r3, #6
 80086a0:	2128      	movs	r1, #40	; 0x28
 80086a2:	20d4      	movs	r0, #212	; 0xd4
 80086a4:	f7fa f970 	bl	8002988 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80086a8:	2300      	movs	r3, #0
 80086aa:	77fb      	strb	r3, [r7, #31]
 80086ac:	e01f      	b.n	80086ee <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80086ae:	7ffb      	ldrb	r3, [r7, #31]
 80086b0:	005b      	lsls	r3, r3, #1
 80086b2:	3301      	adds	r3, #1
 80086b4:	f107 0220 	add.w	r2, r7, #32
 80086b8:	4413      	add	r3, r2
 80086ba:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80086be:	b29b      	uxth	r3, r3
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	b29a      	uxth	r2, r3
 80086c4:	7ffb      	ldrb	r3, [r7, #31]
 80086c6:	005b      	lsls	r3, r3, #1
 80086c8:	f107 0120 	add.w	r1, r7, #32
 80086cc:	440b      	add	r3, r1
 80086ce:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80086d2:	b29b      	uxth	r3, r3
 80086d4:	4413      	add	r3, r2
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	7ffb      	ldrb	r3, [r7, #31]
 80086da:	b212      	sxth	r2, r2
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	f107 0120 	add.w	r1, r7, #32
 80086e2:	440b      	add	r3, r1
 80086e4:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 80086e8:	7ffb      	ldrb	r3, [r7, #31]
 80086ea:	3301      	adds	r3, #1
 80086ec:	77fb      	strb	r3, [r7, #31]
 80086ee:	7ffb      	ldrb	r3, [r7, #31]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d9dc      	bls.n	80086ae <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 80086f4:	7dfb      	ldrb	r3, [r7, #23]
 80086f6:	f003 030c 	and.w	r3, r3, #12
 80086fa:	2b0c      	cmp	r3, #12
 80086fc:	d828      	bhi.n	8008750 <LSM6DSL_AccReadXYZ+0xd8>
 80086fe:	a201      	add	r2, pc, #4	; (adr r2, 8008704 <LSM6DSL_AccReadXYZ+0x8c>)
 8008700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008704:	08008739 	.word	0x08008739
 8008708:	08008751 	.word	0x08008751
 800870c:	08008751 	.word	0x08008751
 8008710:	08008751 	.word	0x08008751
 8008714:	0800874b 	.word	0x0800874b
 8008718:	08008751 	.word	0x08008751
 800871c:	08008751 	.word	0x08008751
 8008720:	08008751 	.word	0x08008751
 8008724:	0800873f 	.word	0x0800873f
 8008728:	08008751 	.word	0x08008751
 800872c:	08008751 	.word	0x08008751
 8008730:	08008751 	.word	0x08008751
 8008734:	08008745 	.word	0x08008745
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8008738:	4b19      	ldr	r3, [pc, #100]	; (80087a0 <LSM6DSL_AccReadXYZ+0x128>)
 800873a:	61bb      	str	r3, [r7, #24]
    break;
 800873c:	e008      	b.n	8008750 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800873e:	4b19      	ldr	r3, [pc, #100]	; (80087a4 <LSM6DSL_AccReadXYZ+0x12c>)
 8008740:	61bb      	str	r3, [r7, #24]
    break;
 8008742:	e005      	b.n	8008750 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8008744:	4b18      	ldr	r3, [pc, #96]	; (80087a8 <LSM6DSL_AccReadXYZ+0x130>)
 8008746:	61bb      	str	r3, [r7, #24]
    break;
 8008748:	e002      	b.n	8008750 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800874a:	4b18      	ldr	r3, [pc, #96]	; (80087ac <LSM6DSL_AccReadXYZ+0x134>)
 800874c:	61bb      	str	r3, [r7, #24]
    break;    
 800874e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8008750:	2300      	movs	r3, #0
 8008752:	77fb      	strb	r3, [r7, #31]
 8008754:	e01b      	b.n	800878e <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8008756:	7ffb      	ldrb	r3, [r7, #31]
 8008758:	005b      	lsls	r3, r3, #1
 800875a:	f107 0220 	add.w	r2, r7, #32
 800875e:	4413      	add	r3, r2
 8008760:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008764:	ee07 3a90 	vmov	s15, r3
 8008768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800876c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008774:	7ffb      	ldrb	r3, [r7, #31]
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	4413      	add	r3, r2
 800877c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008780:	ee17 2a90 	vmov	r2, s15
 8008784:	b212      	sxth	r2, r2
 8008786:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8008788:	7ffb      	ldrb	r3, [r7, #31]
 800878a:	3301      	adds	r3, #1
 800878c:	77fb      	strb	r3, [r7, #31]
 800878e:	7ffb      	ldrb	r3, [r7, #31]
 8008790:	2b02      	cmp	r3, #2
 8008792:	d9e0      	bls.n	8008756 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 8008794:	bf00      	nop
 8008796:	bf00      	nop
 8008798:	3720      	adds	r7, #32
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	3d79db23 	.word	0x3d79db23
 80087a4:	3df9db23 	.word	0x3df9db23
 80087a8:	3e79db23 	.word	0x3e79db23
 80087ac:	3ef9db23 	.word	0x3ef9db23

080087b0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	4603      	mov	r3, r0
 80087b8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80087ba:	2300      	movs	r3, #0
 80087bc:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80087be:	2111      	movs	r1, #17
 80087c0:	20d4      	movs	r0, #212	; 0xd4
 80087c2:	f7fa f8c3 	bl	800294c <SENSOR_IO_Read>
 80087c6:	4603      	mov	r3, r0
 80087c8:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 80087ca:	88fb      	ldrh	r3, [r7, #6]
 80087cc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 80087ce:	7bbb      	ldrb	r3, [r7, #14]
 80087d0:	f003 0303 	and.w	r3, r3, #3
 80087d4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 80087d6:	7bba      	ldrb	r2, [r7, #14]
 80087d8:	7bfb      	ldrb	r3, [r7, #15]
 80087da:	4313      	orrs	r3, r2
 80087dc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 80087de:	7bbb      	ldrb	r3, [r7, #14]
 80087e0:	461a      	mov	r2, r3
 80087e2:	2111      	movs	r1, #17
 80087e4:	20d4      	movs	r0, #212	; 0xd4
 80087e6:	f7fa f897 	bl	8002918 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80087ea:	2112      	movs	r1, #18
 80087ec:	20d4      	movs	r0, #212	; 0xd4
 80087ee:	f7fa f8ad 	bl	800294c <SENSOR_IO_Read>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80087f6:	88fb      	ldrh	r3, [r7, #6]
 80087f8:	0a1b      	lsrs	r3, r3, #8
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80087fe:	7bbb      	ldrb	r3, [r7, #14]
 8008800:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8008804:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8008806:	7bba      	ldrb	r2, [r7, #14]
 8008808:	7bfb      	ldrb	r3, [r7, #15]
 800880a:	4313      	orrs	r3, r2
 800880c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	461a      	mov	r2, r3
 8008812:	2112      	movs	r1, #18
 8008814:	20d4      	movs	r0, #212	; 0xd4
 8008816:	f7fa f87f 	bl	8002918 <SENSOR_IO_Write>
}
 800881a:	bf00      	nop
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b082      	sub	sp, #8
 8008826:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008828:	2300      	movs	r3, #0
 800882a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800882c:	2111      	movs	r1, #17
 800882e:	20d4      	movs	r0, #212	; 0xd4
 8008830:	f7fa f88c 	bl	800294c <SENSOR_IO_Read>
 8008834:	4603      	mov	r3, r0
 8008836:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8008838:	79fb      	ldrb	r3, [r7, #7]
 800883a:	f003 030f 	and.w	r3, r3, #15
 800883e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 8008840:	79fb      	ldrb	r3, [r7, #7]
 8008842:	461a      	mov	r2, r3
 8008844:	2111      	movs	r1, #17
 8008846:	20d4      	movs	r0, #212	; 0xd4
 8008848:	f7fa f866 	bl	8002918 <SENSOR_IO_Write>
}
 800884c:	bf00      	nop
 800884e:	3708      	adds	r7, #8
 8008850:	46bd      	mov	sp, r7
 8008852:	bd80      	pop	{r7, pc}

08008854 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 8008858:	f7fa f854 	bl	8002904 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800885c:	210f      	movs	r1, #15
 800885e:	20d4      	movs	r0, #212	; 0xd4
 8008860:	f7fa f874 	bl	800294c <SENSOR_IO_Read>
 8008864:	4603      	mov	r3, r0
}
 8008866:	4618      	mov	r0, r3
 8008868:	bd80      	pop	{r7, pc}

0800886a <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800886a:	b580      	push	{r7, lr}
 800886c:	b084      	sub	sp, #16
 800886e:	af00      	add	r7, sp, #0
 8008870:	4603      	mov	r3, r0
 8008872:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008874:	2300      	movs	r3, #0
 8008876:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 8008878:	2116      	movs	r1, #22
 800887a:	20d4      	movs	r0, #212	; 0xd4
 800887c:	f7fa f866 	bl	800294c <SENSOR_IO_Read>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800888a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800888c:	88fb      	ldrh	r3, [r7, #6]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d003      	beq.n	800889a <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 8008892:	7bfb      	ldrb	r3, [r7, #15]
 8008894:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008898:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800889a:	7bfb      	ldrb	r3, [r7, #15]
 800889c:	461a      	mov	r2, r3
 800889e:	2116      	movs	r1, #22
 80088a0:	20d4      	movs	r0, #212	; 0xd4
 80088a2:	f7fa f839 	bl	8002918 <SENSOR_IO_Write>
}
 80088a6:	bf00      	nop
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
	...

080088b0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b088      	sub	sp, #32
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 80088b8:	2300      	movs	r3, #0
 80088ba:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 80088bc:	2300      	movs	r3, #0
 80088be:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 80088c0:	f04f 0300 	mov.w	r3, #0
 80088c4:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 80088c6:	2111      	movs	r1, #17
 80088c8:	20d4      	movs	r0, #212	; 0xd4
 80088ca:	f7fa f83f 	bl	800294c <SENSOR_IO_Read>
 80088ce:	4603      	mov	r3, r0
 80088d0:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 80088d2:	f107 0208 	add.w	r2, r7, #8
 80088d6:	2306      	movs	r3, #6
 80088d8:	2122      	movs	r1, #34	; 0x22
 80088da:	20d4      	movs	r0, #212	; 0xd4
 80088dc:	f7fa f854 	bl	8002988 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 80088e0:	2300      	movs	r3, #0
 80088e2:	77fb      	strb	r3, [r7, #31]
 80088e4:	e01f      	b.n	8008926 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 80088e6:	7ffb      	ldrb	r3, [r7, #31]
 80088e8:	005b      	lsls	r3, r3, #1
 80088ea:	3301      	adds	r3, #1
 80088ec:	f107 0220 	add.w	r2, r7, #32
 80088f0:	4413      	add	r3, r2
 80088f2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	021b      	lsls	r3, r3, #8
 80088fa:	b29a      	uxth	r2, r3
 80088fc:	7ffb      	ldrb	r3, [r7, #31]
 80088fe:	005b      	lsls	r3, r3, #1
 8008900:	f107 0120 	add.w	r1, r7, #32
 8008904:	440b      	add	r3, r1
 8008906:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800890a:	b29b      	uxth	r3, r3
 800890c:	4413      	add	r3, r2
 800890e:	b29a      	uxth	r2, r3
 8008910:	7ffb      	ldrb	r3, [r7, #31]
 8008912:	b212      	sxth	r2, r2
 8008914:	005b      	lsls	r3, r3, #1
 8008916:	f107 0120 	add.w	r1, r7, #32
 800891a:	440b      	add	r3, r1
 800891c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8008920:	7ffb      	ldrb	r3, [r7, #31]
 8008922:	3301      	adds	r3, #1
 8008924:	77fb      	strb	r3, [r7, #31]
 8008926:	7ffb      	ldrb	r3, [r7, #31]
 8008928:	2b02      	cmp	r3, #2
 800892a:	d9dc      	bls.n	80088e6 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800892c:	7dfb      	ldrb	r3, [r7, #23]
 800892e:	f003 030c 	and.w	r3, r3, #12
 8008932:	2b0c      	cmp	r3, #12
 8008934:	d828      	bhi.n	8008988 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008971 	.word	0x08008971
 8008940:	08008989 	.word	0x08008989
 8008944:	08008989 	.word	0x08008989
 8008948:	08008989 	.word	0x08008989
 800894c:	08008977 	.word	0x08008977
 8008950:	08008989 	.word	0x08008989
 8008954:	08008989 	.word	0x08008989
 8008958:	08008989 	.word	0x08008989
 800895c:	0800897d 	.word	0x0800897d
 8008960:	08008989 	.word	0x08008989
 8008964:	08008989 	.word	0x08008989
 8008968:	08008989 	.word	0x08008989
 800896c:	08008983 	.word	0x08008983
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 8008970:	4b17      	ldr	r3, [pc, #92]	; (80089d0 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 8008972:	61bb      	str	r3, [r7, #24]
    break;
 8008974:	e008      	b.n	8008988 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 8008976:	4b17      	ldr	r3, [pc, #92]	; (80089d4 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 8008978:	61bb      	str	r3, [r7, #24]
    break;
 800897a:	e005      	b.n	8008988 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800897c:	4b16      	ldr	r3, [pc, #88]	; (80089d8 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 800897e:	61bb      	str	r3, [r7, #24]
    break;
 8008980:	e002      	b.n	8008988 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 8008982:	4b16      	ldr	r3, [pc, #88]	; (80089dc <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 8008984:	61bb      	str	r3, [r7, #24]
    break;    
 8008986:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8008988:	2300      	movs	r3, #0
 800898a:	77fb      	strb	r3, [r7, #31]
 800898c:	e017      	b.n	80089be <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800898e:	7ffb      	ldrb	r3, [r7, #31]
 8008990:	005b      	lsls	r3, r3, #1
 8008992:	f107 0220 	add.w	r2, r7, #32
 8008996:	4413      	add	r3, r2
 8008998:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800899c:	ee07 3a90 	vmov	s15, r3
 80089a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80089a4:	7ffb      	ldrb	r3, [r7, #31]
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	687a      	ldr	r2, [r7, #4]
 80089aa:	4413      	add	r3, r2
 80089ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80089b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80089b4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 80089b8:	7ffb      	ldrb	r3, [r7, #31]
 80089ba:	3301      	adds	r3, #1
 80089bc:	77fb      	strb	r3, [r7, #31]
 80089be:	7ffb      	ldrb	r3, [r7, #31]
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d9e4      	bls.n	800898e <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 80089c4:	bf00      	nop
 80089c6:	bf00      	nop
 80089c8:	3720      	adds	r7, #32
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	410c0000 	.word	0x410c0000
 80089d4:	418c0000 	.word	0x418c0000
 80089d8:	420c0000 	.word	0x420c0000
 80089dc:	428c0000 	.word	0x428c0000

080089e0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b082      	sub	sp, #8
 80089e4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80089ea:	2003      	movs	r0, #3
 80089ec:	f000 f960 	bl	8008cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80089f0:	2000      	movs	r0, #0
 80089f2:	f000 f80d 	bl	8008a10 <HAL_InitTick>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	71fb      	strb	r3, [r7, #7]
 8008a00:	e001      	b.n	8008a06 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008a02:	f7f9 fb65 	bl	80020d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008a06:	79fb      	ldrb	r3, [r7, #7]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b084      	sub	sp, #16
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8008a1c:	4b17      	ldr	r3, [pc, #92]	; (8008a7c <HAL_InitTick+0x6c>)
 8008a1e:	781b      	ldrb	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d023      	beq.n	8008a6c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8008a24:	4b16      	ldr	r3, [pc, #88]	; (8008a80 <HAL_InitTick+0x70>)
 8008a26:	681a      	ldr	r2, [r3, #0]
 8008a28:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <HAL_InitTick+0x6c>)
 8008a2a:	781b      	ldrb	r3, [r3, #0]
 8008a2c:	4619      	mov	r1, r3
 8008a2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008a32:	fbb3 f3f1 	udiv	r3, r3, r1
 8008a36:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f000 f96d 	bl	8008d1a <HAL_SYSTICK_Config>
 8008a40:	4603      	mov	r3, r0
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10f      	bne.n	8008a66 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b0f      	cmp	r3, #15
 8008a4a:	d809      	bhi.n	8008a60 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	f04f 30ff 	mov.w	r0, #4294967295
 8008a54:	f000 f937 	bl	8008cc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008a58:	4a0a      	ldr	r2, [pc, #40]	; (8008a84 <HAL_InitTick+0x74>)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6013      	str	r3, [r2, #0]
 8008a5e:	e007      	b.n	8008a70 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	73fb      	strb	r3, [r7, #15]
 8008a64:	e004      	b.n	8008a70 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008a66:	2301      	movs	r3, #1
 8008a68:	73fb      	strb	r3, [r7, #15]
 8008a6a:	e001      	b.n	8008a70 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	2000064c 	.word	0x2000064c
 8008a80:	200002c4 	.word	0x200002c4
 8008a84:	20000648 	.word	0x20000648

08008a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008a88:	b480      	push	{r7}
 8008a8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008a8c:	4b06      	ldr	r3, [pc, #24]	; (8008aa8 <HAL_IncTick+0x20>)
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	461a      	mov	r2, r3
 8008a92:	4b06      	ldr	r3, [pc, #24]	; (8008aac <HAL_IncTick+0x24>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4413      	add	r3, r2
 8008a98:	4a04      	ldr	r2, [pc, #16]	; (8008aac <HAL_IncTick+0x24>)
 8008a9a:	6013      	str	r3, [r2, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop
 8008aa8:	2000064c 	.word	0x2000064c
 8008aac:	20000e0c 	.word	0x20000e0c

08008ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8008ab4:	4b03      	ldr	r3, [pc, #12]	; (8008ac4 <HAL_GetTick+0x14>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
}
 8008ab8:	4618      	mov	r0, r3
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20000e0c 	.word	0x20000e0c

08008ac8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008ad0:	f7ff ffee 	bl	8008ab0 <HAL_GetTick>
 8008ad4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae0:	d005      	beq.n	8008aee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <HAL_Delay+0x44>)
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	461a      	mov	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4413      	add	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008aee:	bf00      	nop
 8008af0:	f7ff ffde 	bl	8008ab0 <HAL_GetTick>
 8008af4:	4602      	mov	r2, r0
 8008af6:	68bb      	ldr	r3, [r7, #8]
 8008af8:	1ad3      	subs	r3, r2, r3
 8008afa:	68fa      	ldr	r2, [r7, #12]
 8008afc:	429a      	cmp	r2, r3
 8008afe:	d8f7      	bhi.n	8008af0 <HAL_Delay+0x28>
  {
  }
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	3710      	adds	r7, #16
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd80      	pop	{r7, pc}
 8008b0a:	bf00      	nop
 8008b0c:	2000064c 	.word	0x2000064c

08008b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008b20:	4b0c      	ldr	r3, [pc, #48]	; (8008b54 <__NVIC_SetPriorityGrouping+0x44>)
 8008b22:	68db      	ldr	r3, [r3, #12]
 8008b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008b26:	68ba      	ldr	r2, [r7, #8]
 8008b28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008b38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008b42:	4a04      	ldr	r2, [pc, #16]	; (8008b54 <__NVIC_SetPriorityGrouping+0x44>)
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	60d3      	str	r3, [r2, #12]
}
 8008b48:	bf00      	nop
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	e000ed00 	.word	0xe000ed00

08008b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008b5c:	4b04      	ldr	r3, [pc, #16]	; (8008b70 <__NVIC_GetPriorityGrouping+0x18>)
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	0a1b      	lsrs	r3, r3, #8
 8008b62:	f003 0307 	and.w	r3, r3, #7
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr
 8008b70:	e000ed00 	.word	0xe000ed00

08008b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	db0b      	blt.n	8008b9e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008b86:	79fb      	ldrb	r3, [r7, #7]
 8008b88:	f003 021f 	and.w	r2, r3, #31
 8008b8c:	4907      	ldr	r1, [pc, #28]	; (8008bac <__NVIC_EnableIRQ+0x38>)
 8008b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008b92:	095b      	lsrs	r3, r3, #5
 8008b94:	2001      	movs	r0, #1
 8008b96:	fa00 f202 	lsl.w	r2, r0, r2
 8008b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	e000e100 	.word	0xe000e100

08008bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	6039      	str	r1, [r7, #0]
 8008bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	db0a      	blt.n	8008bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bc4:	683b      	ldr	r3, [r7, #0]
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	490c      	ldr	r1, [pc, #48]	; (8008bfc <__NVIC_SetPriority+0x4c>)
 8008bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008bce:	0112      	lsls	r2, r2, #4
 8008bd0:	b2d2      	uxtb	r2, r2
 8008bd2:	440b      	add	r3, r1
 8008bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008bd8:	e00a      	b.n	8008bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	4908      	ldr	r1, [pc, #32]	; (8008c00 <__NVIC_SetPriority+0x50>)
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	f003 030f 	and.w	r3, r3, #15
 8008be6:	3b04      	subs	r3, #4
 8008be8:	0112      	lsls	r2, r2, #4
 8008bea:	b2d2      	uxtb	r2, r2
 8008bec:	440b      	add	r3, r1
 8008bee:	761a      	strb	r2, [r3, #24]
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	e000e100 	.word	0xe000e100
 8008c00:	e000ed00 	.word	0xe000ed00

08008c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b089      	sub	sp, #36	; 0x24
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 0307 	and.w	r3, r3, #7
 8008c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008c18:	69fb      	ldr	r3, [r7, #28]
 8008c1a:	f1c3 0307 	rsb	r3, r3, #7
 8008c1e:	2b04      	cmp	r3, #4
 8008c20:	bf28      	it	cs
 8008c22:	2304      	movcs	r3, #4
 8008c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	3304      	adds	r3, #4
 8008c2a:	2b06      	cmp	r3, #6
 8008c2c:	d902      	bls.n	8008c34 <NVIC_EncodePriority+0x30>
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	3b03      	subs	r3, #3
 8008c32:	e000      	b.n	8008c36 <NVIC_EncodePriority+0x32>
 8008c34:	2300      	movs	r3, #0
 8008c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c38:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3c:	69bb      	ldr	r3, [r7, #24]
 8008c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c42:	43da      	mvns	r2, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	401a      	ands	r2, r3
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c50:	697b      	ldr	r3, [r7, #20]
 8008c52:	fa01 f303 	lsl.w	r3, r1, r3
 8008c56:	43d9      	mvns	r1, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008c5c:	4313      	orrs	r3, r2
         );
}
 8008c5e:	4618      	mov	r0, r3
 8008c60:	3724      	adds	r7, #36	; 0x24
 8008c62:	46bd      	mov	sp, r7
 8008c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c68:	4770      	bx	lr
	...

08008c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	3b01      	subs	r3, #1
 8008c78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008c7c:	d301      	bcc.n	8008c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e00f      	b.n	8008ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008c82:	4a0a      	ldr	r2, [pc, #40]	; (8008cac <SysTick_Config+0x40>)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	3b01      	subs	r3, #1
 8008c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008c8a:	210f      	movs	r1, #15
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	f7ff ff8e 	bl	8008bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008c94:	4b05      	ldr	r3, [pc, #20]	; (8008cac <SysTick_Config+0x40>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008c9a:	4b04      	ldr	r3, [pc, #16]	; (8008cac <SysTick_Config+0x40>)
 8008c9c:	2207      	movs	r2, #7
 8008c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3708      	adds	r7, #8
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}
 8008caa:	bf00      	nop
 8008cac:	e000e010 	.word	0xe000e010

08008cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f7ff ff29 	bl	8008b10 <__NVIC_SetPriorityGrouping>
}
 8008cbe:	bf00      	nop
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b086      	sub	sp, #24
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	4603      	mov	r3, r0
 8008cce:	60b9      	str	r1, [r7, #8]
 8008cd0:	607a      	str	r2, [r7, #4]
 8008cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008cd8:	f7ff ff3e 	bl	8008b58 <__NVIC_GetPriorityGrouping>
 8008cdc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	68b9      	ldr	r1, [r7, #8]
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	f7ff ff8e 	bl	8008c04 <NVIC_EncodePriority>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008cee:	4611      	mov	r1, r2
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f7ff ff5d 	bl	8008bb0 <__NVIC_SetPriority>
}
 8008cf6:	bf00      	nop
 8008cf8:	3718      	adds	r7, #24
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}

08008cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008cfe:	b580      	push	{r7, lr}
 8008d00:	b082      	sub	sp, #8
 8008d02:	af00      	add	r7, sp, #0
 8008d04:	4603      	mov	r3, r0
 8008d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f7ff ff31 	bl	8008b74 <__NVIC_EnableIRQ>
}
 8008d12:	bf00      	nop
 8008d14:	3708      	adds	r7, #8
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}

08008d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008d1a:	b580      	push	{r7, lr}
 8008d1c:	b082      	sub	sp, #8
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7ff ffa2 	bl	8008c6c <SysTick_Config>
 8008d28:	4603      	mov	r3, r0
}
 8008d2a:	4618      	mov	r0, r3
 8008d2c:	3708      	adds	r7, #8
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008d32:	b480      	push	{r7}
 8008d34:	b085      	sub	sp, #20
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008d44:	b2db      	uxtb	r3, r3
 8008d46:	2b02      	cmp	r3, #2
 8008d48:	d008      	beq.n	8008d5c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2204      	movs	r2, #4
 8008d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e022      	b.n	8008da2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	681a      	ldr	r2, [r3, #0]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f022 020e 	bic.w	r2, r2, #14
 8008d6a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	681a      	ldr	r2, [r3, #0]
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f022 0201 	bic.w	r2, r2, #1
 8008d7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d80:	f003 021c 	and.w	r2, r3, #28
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d88:	2101      	movs	r1, #1
 8008d8a:	fa01 f202 	lsl.w	r2, r1, r2
 8008d8e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2201      	movs	r2, #1
 8008d94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8008da0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3714      	adds	r7, #20
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b02      	cmp	r3, #2
 8008dc4:	d005      	beq.n	8008dd2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	2204      	movs	r2, #4
 8008dca:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
 8008dd0:	e029      	b.n	8008e26 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 020e 	bic.w	r2, r2, #14
 8008de0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f022 0201 	bic.w	r2, r2, #1
 8008df0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df6:	f003 021c 	and.w	r2, r3, #28
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dfe:	2101      	movs	r1, #1
 8008e00:	fa01 f202 	lsl.w	r2, r1, r2
 8008e04:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d003      	beq.n	8008e26 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	4798      	blx	r3
    }
  }
  return status;
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	3710      	adds	r7, #16
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	bd80      	pop	{r7, pc}

08008e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008e30:	b480      	push	{r7}
 8008e32:	b087      	sub	sp, #28
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
 8008e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008e3e:	e17f      	b.n	8009140 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	681a      	ldr	r2, [r3, #0]
 8008e44:	2101      	movs	r1, #1
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	fa01 f303 	lsl.w	r3, r1, r3
 8008e4c:	4013      	ands	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f000 8171 	beq.w	800913a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008e58:	683b      	ldr	r3, [r7, #0]
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d005      	beq.n	8008e70 <HAL_GPIO_Init+0x40>
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	f003 0303 	and.w	r3, r3, #3
 8008e6c:	2b02      	cmp	r3, #2
 8008e6e:	d130      	bne.n	8008ed2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	689b      	ldr	r3, [r3, #8]
 8008e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	005b      	lsls	r3, r3, #1
 8008e7a:	2203      	movs	r2, #3
 8008e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e80:	43db      	mvns	r3, r3
 8008e82:	693a      	ldr	r2, [r7, #16]
 8008e84:	4013      	ands	r3, r2
 8008e86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	68da      	ldr	r2, [r3, #12]
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	005b      	lsls	r3, r3, #1
 8008e90:	fa02 f303 	lsl.w	r3, r2, r3
 8008e94:	693a      	ldr	r2, [r7, #16]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	693a      	ldr	r2, [r7, #16]
 8008e9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008eae:	43db      	mvns	r3, r3
 8008eb0:	693a      	ldr	r2, [r7, #16]
 8008eb2:	4013      	ands	r3, r2
 8008eb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	091b      	lsrs	r3, r3, #4
 8008ebc:	f003 0201 	and.w	r2, r3, #1
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ec6:	693a      	ldr	r2, [r7, #16]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	693a      	ldr	r2, [r7, #16]
 8008ed0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f003 0303 	and.w	r3, r3, #3
 8008eda:	2b03      	cmp	r3, #3
 8008edc:	d118      	bne.n	8008f10 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8008eec:	43db      	mvns	r3, r3
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	4013      	ands	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	685b      	ldr	r3, [r3, #4]
 8008ef8:	08db      	lsrs	r3, r3, #3
 8008efa:	f003 0201 	and.w	r2, r3, #1
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	fa02 f303 	lsl.w	r3, r2, r3
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f10:	683b      	ldr	r3, [r7, #0]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f003 0303 	and.w	r3, r3, #3
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d017      	beq.n	8008f4c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	005b      	lsls	r3, r3, #1
 8008f26:	2203      	movs	r2, #3
 8008f28:	fa02 f303 	lsl.w	r3, r2, r3
 8008f2c:	43db      	mvns	r3, r3
 8008f2e:	693a      	ldr	r2, [r7, #16]
 8008f30:	4013      	ands	r3, r2
 8008f32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	689a      	ldr	r2, [r3, #8]
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	005b      	lsls	r3, r3, #1
 8008f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	4313      	orrs	r3, r2
 8008f44:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	f003 0303 	and.w	r3, r3, #3
 8008f54:	2b02      	cmp	r3, #2
 8008f56:	d123      	bne.n	8008fa0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	08da      	lsrs	r2, r3, #3
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	3208      	adds	r2, #8
 8008f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f64:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	f003 0307 	and.w	r3, r3, #7
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	220f      	movs	r2, #15
 8008f70:	fa02 f303 	lsl.w	r3, r2, r3
 8008f74:	43db      	mvns	r3, r3
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4013      	ands	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	f003 0307 	and.w	r3, r3, #7
 8008f86:	009b      	lsls	r3, r3, #2
 8008f88:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	08da      	lsrs	r2, r3, #3
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	3208      	adds	r2, #8
 8008f9a:	6939      	ldr	r1, [r7, #16]
 8008f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	005b      	lsls	r3, r3, #1
 8008faa:	2203      	movs	r2, #3
 8008fac:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb0:	43db      	mvns	r3, r3
 8008fb2:	693a      	ldr	r2, [r7, #16]
 8008fb4:	4013      	ands	r3, r2
 8008fb6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685b      	ldr	r3, [r3, #4]
 8008fbc:	f003 0203 	and.w	r2, r3, #3
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	005b      	lsls	r3, r3, #1
 8008fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fc8:	693a      	ldr	r2, [r7, #16]
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	f000 80ac 	beq.w	800913a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008fe2:	4b5f      	ldr	r3, [pc, #380]	; (8009160 <HAL_GPIO_Init+0x330>)
 8008fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fe6:	4a5e      	ldr	r2, [pc, #376]	; (8009160 <HAL_GPIO_Init+0x330>)
 8008fe8:	f043 0301 	orr.w	r3, r3, #1
 8008fec:	6613      	str	r3, [r2, #96]	; 0x60
 8008fee:	4b5c      	ldr	r3, [pc, #368]	; (8009160 <HAL_GPIO_Init+0x330>)
 8008ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ff2:	f003 0301 	and.w	r3, r3, #1
 8008ff6:	60bb      	str	r3, [r7, #8]
 8008ff8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008ffa:	4a5a      	ldr	r2, [pc, #360]	; (8009164 <HAL_GPIO_Init+0x334>)
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	089b      	lsrs	r3, r3, #2
 8009000:	3302      	adds	r3, #2
 8009002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009006:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	f003 0303 	and.w	r3, r3, #3
 800900e:	009b      	lsls	r3, r3, #2
 8009010:	220f      	movs	r2, #15
 8009012:	fa02 f303 	lsl.w	r3, r2, r3
 8009016:	43db      	mvns	r3, r3
 8009018:	693a      	ldr	r2, [r7, #16]
 800901a:	4013      	ands	r3, r2
 800901c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8009024:	d025      	beq.n	8009072 <HAL_GPIO_Init+0x242>
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	4a4f      	ldr	r2, [pc, #316]	; (8009168 <HAL_GPIO_Init+0x338>)
 800902a:	4293      	cmp	r3, r2
 800902c:	d01f      	beq.n	800906e <HAL_GPIO_Init+0x23e>
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	4a4e      	ldr	r2, [pc, #312]	; (800916c <HAL_GPIO_Init+0x33c>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d019      	beq.n	800906a <HAL_GPIO_Init+0x23a>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	4a4d      	ldr	r2, [pc, #308]	; (8009170 <HAL_GPIO_Init+0x340>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d013      	beq.n	8009066 <HAL_GPIO_Init+0x236>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a4c      	ldr	r2, [pc, #304]	; (8009174 <HAL_GPIO_Init+0x344>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00d      	beq.n	8009062 <HAL_GPIO_Init+0x232>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a4b      	ldr	r2, [pc, #300]	; (8009178 <HAL_GPIO_Init+0x348>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d007      	beq.n	800905e <HAL_GPIO_Init+0x22e>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a4a      	ldr	r2, [pc, #296]	; (800917c <HAL_GPIO_Init+0x34c>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d101      	bne.n	800905a <HAL_GPIO_Init+0x22a>
 8009056:	2306      	movs	r3, #6
 8009058:	e00c      	b.n	8009074 <HAL_GPIO_Init+0x244>
 800905a:	2307      	movs	r3, #7
 800905c:	e00a      	b.n	8009074 <HAL_GPIO_Init+0x244>
 800905e:	2305      	movs	r3, #5
 8009060:	e008      	b.n	8009074 <HAL_GPIO_Init+0x244>
 8009062:	2304      	movs	r3, #4
 8009064:	e006      	b.n	8009074 <HAL_GPIO_Init+0x244>
 8009066:	2303      	movs	r3, #3
 8009068:	e004      	b.n	8009074 <HAL_GPIO_Init+0x244>
 800906a:	2302      	movs	r3, #2
 800906c:	e002      	b.n	8009074 <HAL_GPIO_Init+0x244>
 800906e:	2301      	movs	r3, #1
 8009070:	e000      	b.n	8009074 <HAL_GPIO_Init+0x244>
 8009072:	2300      	movs	r3, #0
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	f002 0203 	and.w	r2, r2, #3
 800907a:	0092      	lsls	r2, r2, #2
 800907c:	4093      	lsls	r3, r2
 800907e:	693a      	ldr	r2, [r7, #16]
 8009080:	4313      	orrs	r3, r2
 8009082:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8009084:	4937      	ldr	r1, [pc, #220]	; (8009164 <HAL_GPIO_Init+0x334>)
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	089b      	lsrs	r3, r3, #2
 800908a:	3302      	adds	r3, #2
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009092:	4b3b      	ldr	r3, [pc, #236]	; (8009180 <HAL_GPIO_Init+0x350>)
 8009094:	689b      	ldr	r3, [r3, #8]
 8009096:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	43db      	mvns	r3, r3
 800909c:	693a      	ldr	r2, [r7, #16]
 800909e:	4013      	ands	r3, r2
 80090a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d003      	beq.n	80090b6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80090ae:	693a      	ldr	r2, [r7, #16]
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80090b6:	4a32      	ldr	r2, [pc, #200]	; (8009180 <HAL_GPIO_Init+0x350>)
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80090bc:	4b30      	ldr	r3, [pc, #192]	; (8009180 <HAL_GPIO_Init+0x350>)
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	43db      	mvns	r3, r3
 80090c6:	693a      	ldr	r2, [r7, #16]
 80090c8:	4013      	ands	r3, r2
 80090ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d003      	beq.n	80090e0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80090d8:	693a      	ldr	r2, [r7, #16]
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	4313      	orrs	r3, r2
 80090de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80090e0:	4a27      	ldr	r2, [pc, #156]	; (8009180 <HAL_GPIO_Init+0x350>)
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80090e6:	4b26      	ldr	r3, [pc, #152]	; (8009180 <HAL_GPIO_Init+0x350>)
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	43db      	mvns	r3, r3
 80090f0:	693a      	ldr	r2, [r7, #16]
 80090f2:	4013      	ands	r3, r2
 80090f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d003      	beq.n	800910a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800910a:	4a1d      	ldr	r2, [pc, #116]	; (8009180 <HAL_GPIO_Init+0x350>)
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8009110:	4b1b      	ldr	r3, [pc, #108]	; (8009180 <HAL_GPIO_Init+0x350>)
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	43db      	mvns	r3, r3
 800911a:	693a      	ldr	r2, [r7, #16]
 800911c:	4013      	ands	r3, r2
 800911e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009128:	2b00      	cmp	r3, #0
 800912a:	d003      	beq.n	8009134 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800912c:	693a      	ldr	r2, [r7, #16]
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8009134:	4a12      	ldr	r2, [pc, #72]	; (8009180 <HAL_GPIO_Init+0x350>)
 8009136:	693b      	ldr	r3, [r7, #16]
 8009138:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800913a:	697b      	ldr	r3, [r7, #20]
 800913c:	3301      	adds	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	fa22 f303 	lsr.w	r3, r2, r3
 800914a:	2b00      	cmp	r3, #0
 800914c:	f47f ae78 	bne.w	8008e40 <HAL_GPIO_Init+0x10>
  }
}
 8009150:	bf00      	nop
 8009152:	bf00      	nop
 8009154:	371c      	adds	r7, #28
 8009156:	46bd      	mov	sp, r7
 8009158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop
 8009160:	40021000 	.word	0x40021000
 8009164:	40010000 	.word	0x40010000
 8009168:	48000400 	.word	0x48000400
 800916c:	48000800 	.word	0x48000800
 8009170:	48000c00 	.word	0x48000c00
 8009174:	48001000 	.word	0x48001000
 8009178:	48001400 	.word	0x48001400
 800917c:	48001800 	.word	0x48001800
 8009180:	40010400 	.word	0x40010400

08009184 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009184:	b480      	push	{r7}
 8009186:	b087      	sub	sp, #28
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800918e:	2300      	movs	r3, #0
 8009190:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8009192:	e0cd      	b.n	8009330 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009194:	2201      	movs	r2, #1
 8009196:	697b      	ldr	r3, [r7, #20]
 8009198:	fa02 f303 	lsl.w	r3, r2, r3
 800919c:	683a      	ldr	r2, [r7, #0]
 800919e:	4013      	ands	r3, r2
 80091a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	f000 80c0 	beq.w	800932a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80091aa:	4a68      	ldr	r2, [pc, #416]	; (800934c <HAL_GPIO_DeInit+0x1c8>)
 80091ac:	697b      	ldr	r3, [r7, #20]
 80091ae:	089b      	lsrs	r3, r3, #2
 80091b0:	3302      	adds	r3, #2
 80091b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	f003 0303 	and.w	r3, r3, #3
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	220f      	movs	r2, #15
 80091c2:	fa02 f303 	lsl.w	r3, r2, r3
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	4013      	ands	r3, r2
 80091ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80091d2:	d025      	beq.n	8009220 <HAL_GPIO_DeInit+0x9c>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a5e      	ldr	r2, [pc, #376]	; (8009350 <HAL_GPIO_DeInit+0x1cc>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d01f      	beq.n	800921c <HAL_GPIO_DeInit+0x98>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a5d      	ldr	r2, [pc, #372]	; (8009354 <HAL_GPIO_DeInit+0x1d0>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d019      	beq.n	8009218 <HAL_GPIO_DeInit+0x94>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	4a5c      	ldr	r2, [pc, #368]	; (8009358 <HAL_GPIO_DeInit+0x1d4>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d013      	beq.n	8009214 <HAL_GPIO_DeInit+0x90>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	4a5b      	ldr	r2, [pc, #364]	; (800935c <HAL_GPIO_DeInit+0x1d8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d00d      	beq.n	8009210 <HAL_GPIO_DeInit+0x8c>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	4a5a      	ldr	r2, [pc, #360]	; (8009360 <HAL_GPIO_DeInit+0x1dc>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d007      	beq.n	800920c <HAL_GPIO_DeInit+0x88>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	4a59      	ldr	r2, [pc, #356]	; (8009364 <HAL_GPIO_DeInit+0x1e0>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d101      	bne.n	8009208 <HAL_GPIO_DeInit+0x84>
 8009204:	2306      	movs	r3, #6
 8009206:	e00c      	b.n	8009222 <HAL_GPIO_DeInit+0x9e>
 8009208:	2307      	movs	r3, #7
 800920a:	e00a      	b.n	8009222 <HAL_GPIO_DeInit+0x9e>
 800920c:	2305      	movs	r3, #5
 800920e:	e008      	b.n	8009222 <HAL_GPIO_DeInit+0x9e>
 8009210:	2304      	movs	r3, #4
 8009212:	e006      	b.n	8009222 <HAL_GPIO_DeInit+0x9e>
 8009214:	2303      	movs	r3, #3
 8009216:	e004      	b.n	8009222 <HAL_GPIO_DeInit+0x9e>
 8009218:	2302      	movs	r3, #2
 800921a:	e002      	b.n	8009222 <HAL_GPIO_DeInit+0x9e>
 800921c:	2301      	movs	r3, #1
 800921e:	e000      	b.n	8009222 <HAL_GPIO_DeInit+0x9e>
 8009220:	2300      	movs	r3, #0
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	f002 0203 	and.w	r2, r2, #3
 8009228:	0092      	lsls	r2, r2, #2
 800922a:	4093      	lsls	r3, r2
 800922c:	68fa      	ldr	r2, [r7, #12]
 800922e:	429a      	cmp	r2, r3
 8009230:	d132      	bne.n	8009298 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8009232:	4b4d      	ldr	r3, [pc, #308]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	43db      	mvns	r3, r3
 800923a:	494b      	ldr	r1, [pc, #300]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 800923c:	4013      	ands	r3, r2
 800923e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8009240:	4b49      	ldr	r3, [pc, #292]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 8009242:	685a      	ldr	r2, [r3, #4]
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	43db      	mvns	r3, r3
 8009248:	4947      	ldr	r1, [pc, #284]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 800924a:	4013      	ands	r3, r2
 800924c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800924e:	4b46      	ldr	r3, [pc, #280]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 8009250:	68da      	ldr	r2, [r3, #12]
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	43db      	mvns	r3, r3
 8009256:	4944      	ldr	r1, [pc, #272]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 8009258:	4013      	ands	r3, r2
 800925a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800925c:	4b42      	ldr	r3, [pc, #264]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 800925e:	689a      	ldr	r2, [r3, #8]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	43db      	mvns	r3, r3
 8009264:	4940      	ldr	r1, [pc, #256]	; (8009368 <HAL_GPIO_DeInit+0x1e4>)
 8009266:	4013      	ands	r3, r2
 8009268:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	009b      	lsls	r3, r3, #2
 8009272:	220f      	movs	r2, #15
 8009274:	fa02 f303 	lsl.w	r3, r2, r3
 8009278:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800927a:	4a34      	ldr	r2, [pc, #208]	; (800934c <HAL_GPIO_DeInit+0x1c8>)
 800927c:	697b      	ldr	r3, [r7, #20]
 800927e:	089b      	lsrs	r3, r3, #2
 8009280:	3302      	adds	r3, #2
 8009282:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	43da      	mvns	r2, r3
 800928a:	4830      	ldr	r0, [pc, #192]	; (800934c <HAL_GPIO_DeInit+0x1c8>)
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	089b      	lsrs	r3, r3, #2
 8009290:	400a      	ands	r2, r1
 8009292:	3302      	adds	r3, #2
 8009294:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	697b      	ldr	r3, [r7, #20]
 800929e:	005b      	lsls	r3, r3, #1
 80092a0:	2103      	movs	r1, #3
 80092a2:	fa01 f303 	lsl.w	r3, r1, r3
 80092a6:	431a      	orrs	r2, r3
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	08da      	lsrs	r2, r3, #3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	3208      	adds	r2, #8
 80092b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	f003 0307 	and.w	r3, r3, #7
 80092be:	009b      	lsls	r3, r3, #2
 80092c0:	220f      	movs	r2, #15
 80092c2:	fa02 f303 	lsl.w	r3, r2, r3
 80092c6:	43db      	mvns	r3, r3
 80092c8:	697a      	ldr	r2, [r7, #20]
 80092ca:	08d2      	lsrs	r2, r2, #3
 80092cc:	4019      	ands	r1, r3
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	3208      	adds	r2, #8
 80092d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	689a      	ldr	r2, [r3, #8]
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	005b      	lsls	r3, r3, #1
 80092de:	2103      	movs	r1, #3
 80092e0:	fa01 f303 	lsl.w	r3, r1, r3
 80092e4:	43db      	mvns	r3, r3
 80092e6:	401a      	ands	r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685a      	ldr	r2, [r3, #4]
 80092f0:	2101      	movs	r1, #1
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	fa01 f303 	lsl.w	r3, r1, r3
 80092f8:	43db      	mvns	r3, r3
 80092fa:	401a      	ands	r2, r3
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	68da      	ldr	r2, [r3, #12]
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	005b      	lsls	r3, r3, #1
 8009308:	2103      	movs	r1, #3
 800930a:	fa01 f303 	lsl.w	r3, r1, r3
 800930e:	43db      	mvns	r3, r3
 8009310:	401a      	ands	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800931a:	2101      	movs	r1, #1
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	fa01 f303 	lsl.w	r3, r1, r3
 8009322:	43db      	mvns	r3, r3
 8009324:	401a      	ands	r2, r3
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	3301      	adds	r3, #1
 800932e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	fa22 f303 	lsr.w	r3, r2, r3
 8009338:	2b00      	cmp	r3, #0
 800933a:	f47f af2b 	bne.w	8009194 <HAL_GPIO_DeInit+0x10>
  }
}
 800933e:	bf00      	nop
 8009340:	bf00      	nop
 8009342:	371c      	adds	r7, #28
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr
 800934c:	40010000 	.word	0x40010000
 8009350:	48000400 	.word	0x48000400
 8009354:	48000800 	.word	0x48000800
 8009358:	48000c00 	.word	0x48000c00
 800935c:	48001000 	.word	0x48001000
 8009360:	48001400 	.word	0x48001400
 8009364:	48001800 	.word	0x48001800
 8009368:	40010400 	.word	0x40010400

0800936c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800936c:	b480      	push	{r7}
 800936e:	b085      	sub	sp, #20
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	460b      	mov	r3, r1
 8009376:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	691a      	ldr	r2, [r3, #16]
 800937c:	887b      	ldrh	r3, [r7, #2]
 800937e:	4013      	ands	r3, r2
 8009380:	2b00      	cmp	r3, #0
 8009382:	d002      	beq.n	800938a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009384:	2301      	movs	r3, #1
 8009386:	73fb      	strb	r3, [r7, #15]
 8009388:	e001      	b.n	800938e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800938a:	2300      	movs	r3, #0
 800938c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800938e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009390:	4618      	mov	r0, r3
 8009392:	3714      	adds	r7, #20
 8009394:	46bd      	mov	sp, r7
 8009396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939a:	4770      	bx	lr

0800939c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800939c:	b480      	push	{r7}
 800939e:	b083      	sub	sp, #12
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	460b      	mov	r3, r1
 80093a6:	807b      	strh	r3, [r7, #2]
 80093a8:	4613      	mov	r3, r2
 80093aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80093ac:	787b      	ldrb	r3, [r7, #1]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80093b2:	887a      	ldrh	r2, [r7, #2]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80093b8:	e002      	b.n	80093c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80093ba:	887a      	ldrh	r2, [r7, #2]
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80093c0:	bf00      	nop
 80093c2:	370c      	adds	r7, #12
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b082      	sub	sp, #8
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	4603      	mov	r3, r0
 80093d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80093d6:	4b08      	ldr	r3, [pc, #32]	; (80093f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093d8:	695a      	ldr	r2, [r3, #20]
 80093da:	88fb      	ldrh	r3, [r7, #6]
 80093dc:	4013      	ands	r3, r2
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80093e2:	4a05      	ldr	r2, [pc, #20]	; (80093f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80093e4:	88fb      	ldrh	r3, [r7, #6]
 80093e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80093e8:	88fb      	ldrh	r3, [r7, #6]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f806 	bl	80093fc <HAL_GPIO_EXTI_Callback>
  }
}
 80093f0:	bf00      	nop
 80093f2:	3708      	adds	r7, #8
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	40010400 	.word	0x40010400

080093fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	4603      	mov	r3, r0
 8009404:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8009406:	bf00      	nop
 8009408:	370c      	adds	r7, #12
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr

08009412 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b082      	sub	sp, #8
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d101      	bne.n	8009424 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e081      	b.n	8009528 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800942a:	b2db      	uxtb	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d106      	bne.n	800943e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	2200      	movs	r2, #0
 8009434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7f8 fe6d 	bl	8002118 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2224      	movs	r2, #36	; 0x24
 8009442:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f022 0201 	bic.w	r2, r2, #1
 8009454:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	685a      	ldr	r2, [r3, #4]
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009462:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	689a      	ldr	r2, [r3, #8]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009472:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b01      	cmp	r3, #1
 800947a:	d107      	bne.n	800948c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689a      	ldr	r2, [r3, #8]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009488:	609a      	str	r2, [r3, #8]
 800948a:	e006      	b.n	800949a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8009498:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d104      	bne.n	80094ac <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80094aa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	685b      	ldr	r3, [r3, #4]
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	6812      	ldr	r2, [r2, #0]
 80094b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80094ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094be:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	68da      	ldr	r2, [r3, #12]
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80094ce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	691a      	ldr	r2, [r3, #16]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	695b      	ldr	r3, [r3, #20]
 80094d8:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	430a      	orrs	r2, r1
 80094e8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	69d9      	ldr	r1, [r3, #28]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	6a1a      	ldr	r2, [r3, #32]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	430a      	orrs	r2, r1
 80094f8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681a      	ldr	r2, [r3, #0]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f042 0201 	orr.w	r2, r2, #1
 8009508:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2200      	movs	r2, #0
 800950e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2220      	movs	r2, #32
 8009514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3708      	adds	r7, #8
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b082      	sub	sp, #8
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d101      	bne.n	8009542 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e021      	b.n	8009586 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2224      	movs	r2, #36	; 0x24
 8009546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	681a      	ldr	r2, [r3, #0]
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f022 0201 	bic.w	r2, r2, #1
 8009558:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800955a:	6878      	ldr	r0, [r7, #4]
 800955c:	f7f8 fe3a 	bl	80021d4 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2200      	movs	r2, #0
 8009564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009584:	2300      	movs	r3, #0
}
 8009586:	4618      	mov	r0, r3
 8009588:	3708      	adds	r7, #8
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af02      	add	r7, sp, #8
 8009596:	60f8      	str	r0, [r7, #12]
 8009598:	607a      	str	r2, [r7, #4]
 800959a:	461a      	mov	r2, r3
 800959c:	460b      	mov	r3, r1
 800959e:	817b      	strh	r3, [r7, #10]
 80095a0:	4613      	mov	r3, r2
 80095a2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b20      	cmp	r3, #32
 80095ae:	f040 80da 	bne.w	8009766 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d101      	bne.n	80095c0 <HAL_I2C_Master_Transmit+0x30>
 80095bc:	2302      	movs	r3, #2
 80095be:	e0d3      	b.n	8009768 <HAL_I2C_Master_Transmit+0x1d8>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80095c8:	f7ff fa72 	bl	8008ab0 <HAL_GetTick>
 80095cc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	2319      	movs	r3, #25
 80095d4:	2201      	movs	r2, #1
 80095d6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80095da:	68f8      	ldr	r0, [r7, #12]
 80095dc:	f000 fcbc 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 80095e0:	4603      	mov	r3, r0
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d001      	beq.n	80095ea <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80095e6:	2301      	movs	r3, #1
 80095e8:	e0be      	b.n	8009768 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2221      	movs	r2, #33	; 0x21
 80095ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2210      	movs	r2, #16
 80095f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2200      	movs	r2, #0
 80095fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	687a      	ldr	r2, [r7, #4]
 8009604:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	893a      	ldrh	r2, [r7, #8]
 800960a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009616:	b29b      	uxth	r3, r3
 8009618:	2bff      	cmp	r3, #255	; 0xff
 800961a:	d90e      	bls.n	800963a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	22ff      	movs	r2, #255	; 0xff
 8009620:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009626:	b2da      	uxtb	r2, r3
 8009628:	8979      	ldrh	r1, [r7, #10]
 800962a:	4b51      	ldr	r3, [pc, #324]	; (8009770 <HAL_I2C_Master_Transmit+0x1e0>)
 800962c:	9300      	str	r3, [sp, #0]
 800962e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009632:	68f8      	ldr	r0, [r7, #12]
 8009634:	f000 feb2 	bl	800a39c <I2C_TransferConfig>
 8009638:	e06c      	b.n	8009714 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800963e:	b29a      	uxth	r2, r3
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009648:	b2da      	uxtb	r2, r3
 800964a:	8979      	ldrh	r1, [r7, #10]
 800964c:	4b48      	ldr	r3, [pc, #288]	; (8009770 <HAL_I2C_Master_Transmit+0x1e0>)
 800964e:	9300      	str	r3, [sp, #0]
 8009650:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009654:	68f8      	ldr	r0, [r7, #12]
 8009656:	f000 fea1 	bl	800a39c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800965a:	e05b      	b.n	8009714 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800965c:	697a      	ldr	r2, [r7, #20]
 800965e:	6a39      	ldr	r1, [r7, #32]
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f000 fcb9 	bl	8009fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d001      	beq.n	8009670 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800966c:	2301      	movs	r3, #1
 800966e:	e07b      	b.n	8009768 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009674:	781a      	ldrb	r2, [r3, #0]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009680:	1c5a      	adds	r2, r3, #1
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800968a:	b29b      	uxth	r3, r3
 800968c:	3b01      	subs	r3, #1
 800968e:	b29a      	uxth	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009698:	3b01      	subs	r3, #1
 800969a:	b29a      	uxth	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a4:	b29b      	uxth	r3, r3
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d034      	beq.n	8009714 <HAL_I2C_Master_Transmit+0x184>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d130      	bne.n	8009714 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	6a3b      	ldr	r3, [r7, #32]
 80096b8:	2200      	movs	r2, #0
 80096ba:	2180      	movs	r1, #128	; 0x80
 80096bc:	68f8      	ldr	r0, [r7, #12]
 80096be:	f000 fc4b 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 80096c2:	4603      	mov	r3, r0
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d001      	beq.n	80096cc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80096c8:	2301      	movs	r3, #1
 80096ca:	e04d      	b.n	8009768 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096d0:	b29b      	uxth	r3, r3
 80096d2:	2bff      	cmp	r3, #255	; 0xff
 80096d4:	d90e      	bls.n	80096f4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	22ff      	movs	r2, #255	; 0xff
 80096da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e0:	b2da      	uxtb	r2, r3
 80096e2:	8979      	ldrh	r1, [r7, #10]
 80096e4:	2300      	movs	r3, #0
 80096e6:	9300      	str	r3, [sp, #0]
 80096e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 fe55 	bl	800a39c <I2C_TransferConfig>
 80096f2:	e00f      	b.n	8009714 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009702:	b2da      	uxtb	r2, r3
 8009704:	8979      	ldrh	r1, [r7, #10]
 8009706:	2300      	movs	r3, #0
 8009708:	9300      	str	r3, [sp, #0]
 800970a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 fe44 	bl	800a39c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009718:	b29b      	uxth	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d19e      	bne.n	800965c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800971e:	697a      	ldr	r2, [r7, #20]
 8009720:	6a39      	ldr	r1, [r7, #32]
 8009722:	68f8      	ldr	r0, [r7, #12]
 8009724:	f000 fc98 	bl	800a058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009728:	4603      	mov	r3, r0
 800972a:	2b00      	cmp	r3, #0
 800972c:	d001      	beq.n	8009732 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	e01a      	b.n	8009768 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	2220      	movs	r2, #32
 8009738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	6859      	ldr	r1, [r3, #4]
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	4b0b      	ldr	r3, [pc, #44]	; (8009774 <HAL_I2C_Master_Transmit+0x1e4>)
 8009746:	400b      	ands	r3, r1
 8009748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	2220      	movs	r2, #32
 800974e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	2200      	movs	r2, #0
 800975e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009762:	2300      	movs	r3, #0
 8009764:	e000      	b.n	8009768 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8009766:	2302      	movs	r3, #2
  }
}
 8009768:	4618      	mov	r0, r3
 800976a:	3718      	adds	r7, #24
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}
 8009770:	80002000 	.word	0x80002000
 8009774:	fe00e800 	.word	0xfe00e800

08009778 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b088      	sub	sp, #32
 800977c:	af02      	add	r7, sp, #8
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	607a      	str	r2, [r7, #4]
 8009782:	461a      	mov	r2, r3
 8009784:	460b      	mov	r3, r1
 8009786:	817b      	strh	r3, [r7, #10]
 8009788:	4613      	mov	r3, r2
 800978a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b20      	cmp	r3, #32
 8009796:	f040 80db 	bne.w	8009950 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d101      	bne.n	80097a8 <HAL_I2C_Master_Receive+0x30>
 80097a4:	2302      	movs	r3, #2
 80097a6:	e0d4      	b.n	8009952 <HAL_I2C_Master_Receive+0x1da>
 80097a8:	68fb      	ldr	r3, [r7, #12]
 80097aa:	2201      	movs	r2, #1
 80097ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80097b0:	f7ff f97e 	bl	8008ab0 <HAL_GetTick>
 80097b4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	9300      	str	r3, [sp, #0]
 80097ba:	2319      	movs	r3, #25
 80097bc:	2201      	movs	r2, #1
 80097be:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80097c2:	68f8      	ldr	r0, [r7, #12]
 80097c4:	f000 fbc8 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 80097c8:	4603      	mov	r3, r0
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d001      	beq.n	80097d2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80097ce:	2301      	movs	r3, #1
 80097d0:	e0bf      	b.n	8009952 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	2222      	movs	r2, #34	; 0x22
 80097d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	2210      	movs	r2, #16
 80097de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	2200      	movs	r2, #0
 80097e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	687a      	ldr	r2, [r7, #4]
 80097ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	893a      	ldrh	r2, [r7, #8]
 80097f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	2200      	movs	r2, #0
 80097f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80097fe:	b29b      	uxth	r3, r3
 8009800:	2bff      	cmp	r3, #255	; 0xff
 8009802:	d90e      	bls.n	8009822 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	22ff      	movs	r2, #255	; 0xff
 8009808:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800980e:	b2da      	uxtb	r2, r3
 8009810:	8979      	ldrh	r1, [r7, #10]
 8009812:	4b52      	ldr	r3, [pc, #328]	; (800995c <HAL_I2C_Master_Receive+0x1e4>)
 8009814:	9300      	str	r3, [sp, #0]
 8009816:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800981a:	68f8      	ldr	r0, [r7, #12]
 800981c:	f000 fdbe 	bl	800a39c <I2C_TransferConfig>
 8009820:	e06d      	b.n	80098fe <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009826:	b29a      	uxth	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009830:	b2da      	uxtb	r2, r3
 8009832:	8979      	ldrh	r1, [r7, #10]
 8009834:	4b49      	ldr	r3, [pc, #292]	; (800995c <HAL_I2C_Master_Receive+0x1e4>)
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800983c:	68f8      	ldr	r0, [r7, #12]
 800983e:	f000 fdad 	bl	800a39c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8009842:	e05c      	b.n	80098fe <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009844:	697a      	ldr	r2, [r7, #20]
 8009846:	6a39      	ldr	r1, [r7, #32]
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f000 fc41 	bl	800a0d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800984e:	4603      	mov	r3, r0
 8009850:	2b00      	cmp	r3, #0
 8009852:	d001      	beq.n	8009858 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009854:	2301      	movs	r3, #1
 8009856:	e07c      	b.n	8009952 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009862:	b2d2      	uxtb	r2, r2
 8009864:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	1c5a      	adds	r2, r3, #1
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009874:	3b01      	subs	r3, #1
 8009876:	b29a      	uxth	r2, r3
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009880:	b29b      	uxth	r3, r3
 8009882:	3b01      	subs	r3, #1
 8009884:	b29a      	uxth	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800988e:	b29b      	uxth	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d034      	beq.n	80098fe <HAL_I2C_Master_Receive+0x186>
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009898:	2b00      	cmp	r3, #0
 800989a:	d130      	bne.n	80098fe <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	9300      	str	r3, [sp, #0]
 80098a0:	6a3b      	ldr	r3, [r7, #32]
 80098a2:	2200      	movs	r2, #0
 80098a4:	2180      	movs	r1, #128	; 0x80
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fb56 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d001      	beq.n	80098b6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80098b2:	2301      	movs	r3, #1
 80098b4:	e04d      	b.n	8009952 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2bff      	cmp	r3, #255	; 0xff
 80098be:	d90e      	bls.n	80098de <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	22ff      	movs	r2, #255	; 0xff
 80098c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ca:	b2da      	uxtb	r2, r3
 80098cc:	8979      	ldrh	r1, [r7, #10]
 80098ce:	2300      	movs	r3, #0
 80098d0:	9300      	str	r3, [sp, #0]
 80098d2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80098d6:	68f8      	ldr	r0, [r7, #12]
 80098d8:	f000 fd60 	bl	800a39c <I2C_TransferConfig>
 80098dc:	e00f      	b.n	80098fe <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80098e2:	b29a      	uxth	r2, r3
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098ec:	b2da      	uxtb	r2, r3
 80098ee:	8979      	ldrh	r1, [r7, #10]
 80098f0:	2300      	movs	r3, #0
 80098f2:	9300      	str	r3, [sp, #0]
 80098f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 fd4f 	bl	800a39c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009902:	b29b      	uxth	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d19d      	bne.n	8009844 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	6a39      	ldr	r1, [r7, #32]
 800990c:	68f8      	ldr	r0, [r7, #12]
 800990e:	f000 fba3 	bl	800a058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009912:	4603      	mov	r3, r0
 8009914:	2b00      	cmp	r3, #0
 8009916:	d001      	beq.n	800991c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009918:	2301      	movs	r3, #1
 800991a:	e01a      	b.n	8009952 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2220      	movs	r2, #32
 8009922:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	6859      	ldr	r1, [r3, #4]
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681a      	ldr	r2, [r3, #0]
 800992e:	4b0c      	ldr	r3, [pc, #48]	; (8009960 <HAL_I2C_Master_Receive+0x1e8>)
 8009930:	400b      	ands	r3, r1
 8009932:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	2220      	movs	r2, #32
 8009938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800994c:	2300      	movs	r3, #0
 800994e:	e000      	b.n	8009952 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009950:	2302      	movs	r3, #2
  }
}
 8009952:	4618      	mov	r0, r3
 8009954:	3718      	adds	r7, #24
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}
 800995a:	bf00      	nop
 800995c:	80002400 	.word	0x80002400
 8009960:	fe00e800 	.word	0xfe00e800

08009964 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b088      	sub	sp, #32
 8009968:	af02      	add	r7, sp, #8
 800996a:	60f8      	str	r0, [r7, #12]
 800996c:	4608      	mov	r0, r1
 800996e:	4611      	mov	r1, r2
 8009970:	461a      	mov	r2, r3
 8009972:	4603      	mov	r3, r0
 8009974:	817b      	strh	r3, [r7, #10]
 8009976:	460b      	mov	r3, r1
 8009978:	813b      	strh	r3, [r7, #8]
 800997a:	4613      	mov	r3, r2
 800997c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009984:	b2db      	uxtb	r3, r3
 8009986:	2b20      	cmp	r3, #32
 8009988:	f040 80f9 	bne.w	8009b7e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800998c:	6a3b      	ldr	r3, [r7, #32]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d002      	beq.n	8009998 <HAL_I2C_Mem_Write+0x34>
 8009992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009994:	2b00      	cmp	r3, #0
 8009996:	d105      	bne.n	80099a4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800999e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	e0ed      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d101      	bne.n	80099b2 <HAL_I2C_Mem_Write+0x4e>
 80099ae:	2302      	movs	r3, #2
 80099b0:	e0e6      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80099ba:	f7ff f879 	bl	8008ab0 <HAL_GetTick>
 80099be:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2319      	movs	r3, #25
 80099c6:	2201      	movs	r2, #1
 80099c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 fac3 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80099d8:	2301      	movs	r3, #1
 80099da:	e0d1      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2221      	movs	r2, #33	; 0x21
 80099e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2240      	movs	r2, #64	; 0x40
 80099e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a3a      	ldr	r2, [r7, #32]
 80099f6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80099fc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2200      	movs	r2, #0
 8009a02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009a04:	88f8      	ldrh	r0, [r7, #6]
 8009a06:	893a      	ldrh	r2, [r7, #8]
 8009a08:	8979      	ldrh	r1, [r7, #10]
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	9301      	str	r3, [sp, #4]
 8009a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a10:	9300      	str	r3, [sp, #0]
 8009a12:	4603      	mov	r3, r0
 8009a14:	68f8      	ldr	r0, [r7, #12]
 8009a16:	f000 f9d3 	bl	8009dc0 <I2C_RequestMemoryWrite>
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d005      	beq.n	8009a2c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	2200      	movs	r2, #0
 8009a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e0a9      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a30:	b29b      	uxth	r3, r3
 8009a32:	2bff      	cmp	r3, #255	; 0xff
 8009a34:	d90e      	bls.n	8009a54 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	22ff      	movs	r2, #255	; 0xff
 8009a3a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	8979      	ldrh	r1, [r7, #10]
 8009a44:	2300      	movs	r3, #0
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 fca5 	bl	800a39c <I2C_TransferConfig>
 8009a52:	e00f      	b.n	8009a74 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a58:	b29a      	uxth	r2, r3
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a62:	b2da      	uxtb	r2, r3
 8009a64:	8979      	ldrh	r1, [r7, #10]
 8009a66:	2300      	movs	r3, #0
 8009a68:	9300      	str	r3, [sp, #0]
 8009a6a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f000 fc94 	bl	800a39c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009a74:	697a      	ldr	r2, [r7, #20]
 8009a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f000 faad 	bl	8009fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e07b      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a8c:	781a      	ldrb	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a98:	1c5a      	adds	r2, r3, #1
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009aa2:	b29b      	uxth	r3, r3
 8009aa4:	3b01      	subs	r3, #1
 8009aa6:	b29a      	uxth	r2, r3
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab0:	3b01      	subs	r3, #1
 8009ab2:	b29a      	uxth	r2, r3
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009abc:	b29b      	uxth	r3, r3
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d034      	beq.n	8009b2c <HAL_I2C_Mem_Write+0x1c8>
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d130      	bne.n	8009b2c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2180      	movs	r1, #128	; 0x80
 8009ad4:	68f8      	ldr	r0, [r7, #12]
 8009ad6:	f000 fa3f 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 8009ada:	4603      	mov	r3, r0
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d001      	beq.n	8009ae4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8009ae0:	2301      	movs	r3, #1
 8009ae2:	e04d      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ae8:	b29b      	uxth	r3, r3
 8009aea:	2bff      	cmp	r3, #255	; 0xff
 8009aec:	d90e      	bls.n	8009b0c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	22ff      	movs	r2, #255	; 0xff
 8009af2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009af8:	b2da      	uxtb	r2, r3
 8009afa:	8979      	ldrh	r1, [r7, #10]
 8009afc:	2300      	movs	r3, #0
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 fc49 	bl	800a39c <I2C_TransferConfig>
 8009b0a:	e00f      	b.n	8009b2c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b1a:	b2da      	uxtb	r2, r3
 8009b1c:	8979      	ldrh	r1, [r7, #10]
 8009b1e:	2300      	movs	r3, #0
 8009b20:	9300      	str	r3, [sp, #0]
 8009b22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009b26:	68f8      	ldr	r0, [r7, #12]
 8009b28:	f000 fc38 	bl	800a39c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d19e      	bne.n	8009a74 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009b36:	697a      	ldr	r2, [r7, #20]
 8009b38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f000 fa8c 	bl	800a058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009b40:	4603      	mov	r3, r0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d001      	beq.n	8009b4a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e01a      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2220      	movs	r2, #32
 8009b50:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	6859      	ldr	r1, [r3, #4]
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	; (8009b88 <HAL_I2C_Mem_Write+0x224>)
 8009b5e:	400b      	ands	r3, r1
 8009b60:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2220      	movs	r2, #32
 8009b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	e000      	b.n	8009b80 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8009b7e:	2302      	movs	r3, #2
  }
}
 8009b80:	4618      	mov	r0, r3
 8009b82:	3718      	adds	r7, #24
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	fe00e800 	.word	0xfe00e800

08009b8c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b088      	sub	sp, #32
 8009b90:	af02      	add	r7, sp, #8
 8009b92:	60f8      	str	r0, [r7, #12]
 8009b94:	4608      	mov	r0, r1
 8009b96:	4611      	mov	r1, r2
 8009b98:	461a      	mov	r2, r3
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	817b      	strh	r3, [r7, #10]
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	813b      	strh	r3, [r7, #8]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bac:	b2db      	uxtb	r3, r3
 8009bae:	2b20      	cmp	r3, #32
 8009bb0:	f040 80fd 	bne.w	8009dae <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bb4:	6a3b      	ldr	r3, [r7, #32]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d002      	beq.n	8009bc0 <HAL_I2C_Mem_Read+0x34>
 8009bba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d105      	bne.n	8009bcc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009bc6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e0f1      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009bd2:	2b01      	cmp	r3, #1
 8009bd4:	d101      	bne.n	8009bda <HAL_I2C_Mem_Read+0x4e>
 8009bd6:	2302      	movs	r3, #2
 8009bd8:	e0ea      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009be2:	f7fe ff65 	bl	8008ab0 <HAL_GetTick>
 8009be6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	2319      	movs	r3, #25
 8009bee:	2201      	movs	r2, #1
 8009bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009bf4:	68f8      	ldr	r0, [r7, #12]
 8009bf6:	f000 f9af 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d001      	beq.n	8009c04 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e0d5      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2222      	movs	r2, #34	; 0x22
 8009c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2240      	movs	r2, #64	; 0x40
 8009c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6a3a      	ldr	r2, [r7, #32]
 8009c1e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009c24:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009c2c:	88f8      	ldrh	r0, [r7, #6]
 8009c2e:	893a      	ldrh	r2, [r7, #8]
 8009c30:	8979      	ldrh	r1, [r7, #10]
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f000 f913 	bl	8009e68 <I2C_RequestMemoryRead>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d005      	beq.n	8009c54 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8009c50:	2301      	movs	r3, #1
 8009c52:	e0ad      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c58:	b29b      	uxth	r3, r3
 8009c5a:	2bff      	cmp	r3, #255	; 0xff
 8009c5c:	d90e      	bls.n	8009c7c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	22ff      	movs	r2, #255	; 0xff
 8009c62:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c68:	b2da      	uxtb	r2, r3
 8009c6a:	8979      	ldrh	r1, [r7, #10]
 8009c6c:	4b52      	ldr	r3, [pc, #328]	; (8009db8 <HAL_I2C_Mem_Read+0x22c>)
 8009c6e:	9300      	str	r3, [sp, #0]
 8009c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009c74:	68f8      	ldr	r0, [r7, #12]
 8009c76:	f000 fb91 	bl	800a39c <I2C_TransferConfig>
 8009c7a:	e00f      	b.n	8009c9c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009c80:	b29a      	uxth	r2, r3
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009c8a:	b2da      	uxtb	r2, r3
 8009c8c:	8979      	ldrh	r1, [r7, #10]
 8009c8e:	4b4a      	ldr	r3, [pc, #296]	; (8009db8 <HAL_I2C_Mem_Read+0x22c>)
 8009c90:	9300      	str	r3, [sp, #0]
 8009c92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009c96:	68f8      	ldr	r0, [r7, #12]
 8009c98:	f000 fb80 	bl	800a39c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8009c9c:	697b      	ldr	r3, [r7, #20]
 8009c9e:	9300      	str	r3, [sp, #0]
 8009ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ca2:	2200      	movs	r2, #0
 8009ca4:	2104      	movs	r1, #4
 8009ca6:	68f8      	ldr	r0, [r7, #12]
 8009ca8:	f000 f956 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e07c      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc0:	b2d2      	uxtb	r2, r2
 8009cc2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cc8:	1c5a      	adds	r2, r3, #1
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cd2:	3b01      	subs	r3, #1
 8009cd4:	b29a      	uxth	r2, r3
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cde:	b29b      	uxth	r3, r3
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	b29a      	uxth	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009cec:	b29b      	uxth	r3, r3
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d034      	beq.n	8009d5c <HAL_I2C_Mem_Read+0x1d0>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d130      	bne.n	8009d5c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	9300      	str	r3, [sp, #0]
 8009cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d00:	2200      	movs	r2, #0
 8009d02:	2180      	movs	r1, #128	; 0x80
 8009d04:	68f8      	ldr	r0, [r7, #12]
 8009d06:	f000 f927 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8009d10:	2301      	movs	r3, #1
 8009d12:	e04d      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2bff      	cmp	r3, #255	; 0xff
 8009d1c:	d90e      	bls.n	8009d3c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	22ff      	movs	r2, #255	; 0xff
 8009d22:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d28:	b2da      	uxtb	r2, r3
 8009d2a:	8979      	ldrh	r1, [r7, #10]
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 fb31 	bl	800a39c <I2C_TransferConfig>
 8009d3a:	e00f      	b.n	8009d5c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d40:	b29a      	uxth	r2, r3
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009d4a:	b2da      	uxtb	r2, r3
 8009d4c:	8979      	ldrh	r1, [r7, #10]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f000 fb20 	bl	800a39c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009d60:	b29b      	uxth	r3, r3
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d19a      	bne.n	8009c9c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009d6a:	68f8      	ldr	r0, [r7, #12]
 8009d6c:	f000 f974 	bl	800a058 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8009d76:	2301      	movs	r3, #1
 8009d78:	e01a      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2220      	movs	r2, #32
 8009d80:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	6859      	ldr	r1, [r3, #4]
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681a      	ldr	r2, [r3, #0]
 8009d8c:	4b0b      	ldr	r3, [pc, #44]	; (8009dbc <HAL_I2C_Mem_Read+0x230>)
 8009d8e:	400b      	ands	r3, r1
 8009d90:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	e000      	b.n	8009db0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8009dae:	2302      	movs	r3, #2
  }
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3718      	adds	r7, #24
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}
 8009db8:	80002400 	.word	0x80002400
 8009dbc:	fe00e800 	.word	0xfe00e800

08009dc0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b086      	sub	sp, #24
 8009dc4:	af02      	add	r7, sp, #8
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	4608      	mov	r0, r1
 8009dca:	4611      	mov	r1, r2
 8009dcc:	461a      	mov	r2, r3
 8009dce:	4603      	mov	r3, r0
 8009dd0:	817b      	strh	r3, [r7, #10]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	813b      	strh	r3, [r7, #8]
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8009dda:	88fb      	ldrh	r3, [r7, #6]
 8009ddc:	b2da      	uxtb	r2, r3
 8009dde:	8979      	ldrh	r1, [r7, #10]
 8009de0:	4b20      	ldr	r3, [pc, #128]	; (8009e64 <I2C_RequestMemoryWrite+0xa4>)
 8009de2:	9300      	str	r3, [sp, #0]
 8009de4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009de8:	68f8      	ldr	r0, [r7, #12]
 8009dea:	f000 fad7 	bl	800a39c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009dee:	69fa      	ldr	r2, [r7, #28]
 8009df0:	69b9      	ldr	r1, [r7, #24]
 8009df2:	68f8      	ldr	r0, [r7, #12]
 8009df4:	f000 f8f0 	bl	8009fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d001      	beq.n	8009e02 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e02c      	b.n	8009e5c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009e02:	88fb      	ldrh	r3, [r7, #6]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	d105      	bne.n	8009e14 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e08:	893b      	ldrh	r3, [r7, #8]
 8009e0a:	b2da      	uxtb	r2, r3
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	629a      	str	r2, [r3, #40]	; 0x28
 8009e12:	e015      	b.n	8009e40 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009e14:	893b      	ldrh	r3, [r7, #8]
 8009e16:	0a1b      	lsrs	r3, r3, #8
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e22:	69fa      	ldr	r2, [r7, #28]
 8009e24:	69b9      	ldr	r1, [r7, #24]
 8009e26:	68f8      	ldr	r0, [r7, #12]
 8009e28:	f000 f8d6 	bl	8009fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e012      	b.n	8009e5c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009e36:	893b      	ldrh	r3, [r7, #8]
 8009e38:	b2da      	uxtb	r2, r3
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	9300      	str	r3, [sp, #0]
 8009e44:	69bb      	ldr	r3, [r7, #24]
 8009e46:	2200      	movs	r2, #0
 8009e48:	2180      	movs	r1, #128	; 0x80
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f000 f884 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d001      	beq.n	8009e5a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	80002000 	.word	0x80002000

08009e68 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b086      	sub	sp, #24
 8009e6c:	af02      	add	r7, sp, #8
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	4608      	mov	r0, r1
 8009e72:	4611      	mov	r1, r2
 8009e74:	461a      	mov	r2, r3
 8009e76:	4603      	mov	r3, r0
 8009e78:	817b      	strh	r3, [r7, #10]
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	813b      	strh	r3, [r7, #8]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009e82:	88fb      	ldrh	r3, [r7, #6]
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	8979      	ldrh	r1, [r7, #10]
 8009e88:	4b20      	ldr	r3, [pc, #128]	; (8009f0c <I2C_RequestMemoryRead+0xa4>)
 8009e8a:	9300      	str	r3, [sp, #0]
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	68f8      	ldr	r0, [r7, #12]
 8009e90:	f000 fa84 	bl	800a39c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	69b9      	ldr	r1, [r7, #24]
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f000 f89d 	bl	8009fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d001      	beq.n	8009ea8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	e02c      	b.n	8009f02 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009ea8:	88fb      	ldrh	r3, [r7, #6]
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	d105      	bne.n	8009eba <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009eae:	893b      	ldrh	r3, [r7, #8]
 8009eb0:	b2da      	uxtb	r2, r3
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8009eb8:	e015      	b.n	8009ee6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009eba:	893b      	ldrh	r3, [r7, #8]
 8009ebc:	0a1b      	lsrs	r3, r3, #8
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	b2da      	uxtb	r2, r3
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009ec8:	69fa      	ldr	r2, [r7, #28]
 8009eca:	69b9      	ldr	r1, [r7, #24]
 8009ecc:	68f8      	ldr	r0, [r7, #12]
 8009ece:	f000 f883 	bl	8009fd8 <I2C_WaitOnTXISFlagUntilTimeout>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d001      	beq.n	8009edc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	e012      	b.n	8009f02 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009edc:	893b      	ldrh	r3, [r7, #8]
 8009ede:	b2da      	uxtb	r2, r3
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	69bb      	ldr	r3, [r7, #24]
 8009eec:	2200      	movs	r2, #0
 8009eee:	2140      	movs	r1, #64	; 0x40
 8009ef0:	68f8      	ldr	r0, [r7, #12]
 8009ef2:	f000 f831 	bl	8009f58 <I2C_WaitOnFlagUntilTimeout>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d001      	beq.n	8009f00 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e000      	b.n	8009f02 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8009f00:	2300      	movs	r3, #0
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3710      	adds	r7, #16
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	80002000 	.word	0x80002000

08009f10 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	f003 0302 	and.w	r3, r3, #2
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d103      	bne.n	8009f2e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	f003 0301 	and.w	r3, r3, #1
 8009f38:	2b01      	cmp	r3, #1
 8009f3a:	d007      	beq.n	8009f4c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	699a      	ldr	r2, [r3, #24]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 0201 	orr.w	r2, r2, #1
 8009f4a:	619a      	str	r2, [r3, #24]
  }
}
 8009f4c:	bf00      	nop
 8009f4e:	370c      	adds	r7, #12
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b084      	sub	sp, #16
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	60f8      	str	r0, [r7, #12]
 8009f60:	60b9      	str	r1, [r7, #8]
 8009f62:	603b      	str	r3, [r7, #0]
 8009f64:	4613      	mov	r3, r2
 8009f66:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009f68:	e022      	b.n	8009fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f70:	d01e      	beq.n	8009fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009f72:	f7fe fd9d 	bl	8008ab0 <HAL_GetTick>
 8009f76:	4602      	mov	r2, r0
 8009f78:	69bb      	ldr	r3, [r7, #24]
 8009f7a:	1ad3      	subs	r3, r2, r3
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d302      	bcc.n	8009f88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d113      	bne.n	8009fb0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f8c:	f043 0220 	orr.w	r2, r3, #32
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	2220      	movs	r2, #32
 8009f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2200      	movs	r2, #0
 8009fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8009fac:	2301      	movs	r3, #1
 8009fae:	e00f      	b.n	8009fd0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	699a      	ldr	r2, [r3, #24]
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	4013      	ands	r3, r2
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	bf0c      	ite	eq
 8009fc0:	2301      	moveq	r3, #1
 8009fc2:	2300      	movne	r3, #0
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	79fb      	ldrb	r3, [r7, #7]
 8009fca:	429a      	cmp	r2, r3
 8009fcc:	d0cd      	beq.n	8009f6a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}

08009fd8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	60f8      	str	r0, [r7, #12]
 8009fe0:	60b9      	str	r1, [r7, #8]
 8009fe2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009fe4:	e02c      	b.n	800a040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	68b9      	ldr	r1, [r7, #8]
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f000 f8ea 	bl	800a1c4 <I2C_IsErrorOccurred>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d001      	beq.n	8009ffa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009ff6:	2301      	movs	r3, #1
 8009ff8:	e02a      	b.n	800a050 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a000:	d01e      	beq.n	800a040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a002:	f7fe fd55 	bl	8008ab0 <HAL_GetTick>
 800a006:	4602      	mov	r2, r0
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	1ad3      	subs	r3, r2, r3
 800a00c:	68ba      	ldr	r2, [r7, #8]
 800a00e:	429a      	cmp	r2, r3
 800a010:	d302      	bcc.n	800a018 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d113      	bne.n	800a040 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a01c:	f043 0220 	orr.w	r2, r3, #32
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2220      	movs	r2, #32
 800a028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2200      	movs	r2, #0
 800a030:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2200      	movs	r2, #0
 800a038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a03c:	2301      	movs	r3, #1
 800a03e:	e007      	b.n	800a050 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	699b      	ldr	r3, [r3, #24]
 800a046:	f003 0302 	and.w	r3, r3, #2
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d1cb      	bne.n	8009fe6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800a04e:	2300      	movs	r3, #0
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a064:	e028      	b.n	800a0b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	68b9      	ldr	r1, [r7, #8]
 800a06a:	68f8      	ldr	r0, [r7, #12]
 800a06c:	f000 f8aa 	bl	800a1c4 <I2C_IsErrorOccurred>
 800a070:	4603      	mov	r3, r0
 800a072:	2b00      	cmp	r3, #0
 800a074:	d001      	beq.n	800a07a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e026      	b.n	800a0c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a07a:	f7fe fd19 	bl	8008ab0 <HAL_GetTick>
 800a07e:	4602      	mov	r2, r0
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	1ad3      	subs	r3, r2, r3
 800a084:	68ba      	ldr	r2, [r7, #8]
 800a086:	429a      	cmp	r2, r3
 800a088:	d302      	bcc.n	800a090 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d113      	bne.n	800a0b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a094:	f043 0220 	orr.w	r2, r3, #32
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2220      	movs	r2, #32
 800a0a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	e007      	b.n	800a0c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	699b      	ldr	r3, [r3, #24]
 800a0be:	f003 0320 	and.w	r3, r3, #32
 800a0c2:	2b20      	cmp	r3, #32
 800a0c4:	d1cf      	bne.n	800a066 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b084      	sub	sp, #16
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a0dc:	e064      	b.n	800a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	68b9      	ldr	r1, [r7, #8]
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f000 f86e 	bl	800a1c4 <I2C_IsErrorOccurred>
 800a0e8:	4603      	mov	r3, r0
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d001      	beq.n	800a0f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e062      	b.n	800a1b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	699b      	ldr	r3, [r3, #24]
 800a0f8:	f003 0320 	and.w	r3, r3, #32
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d138      	bne.n	800a172 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	699b      	ldr	r3, [r3, #24]
 800a106:	f003 0304 	and.w	r3, r3, #4
 800a10a:	2b04      	cmp	r3, #4
 800a10c:	d105      	bne.n	800a11a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a112:	2b00      	cmp	r3, #0
 800a114:	d001      	beq.n	800a11a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800a116:	2300      	movs	r3, #0
 800a118:	e04e      	b.n	800a1b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f003 0310 	and.w	r3, r3, #16
 800a124:	2b10      	cmp	r3, #16
 800a126:	d107      	bne.n	800a138 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	2210      	movs	r2, #16
 800a12e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2204      	movs	r2, #4
 800a134:	645a      	str	r2, [r3, #68]	; 0x44
 800a136:	e002      	b.n	800a13e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	2220      	movs	r2, #32
 800a144:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	6859      	ldr	r1, [r3, #4]
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	681a      	ldr	r2, [r3, #0]
 800a150:	4b1b      	ldr	r3, [pc, #108]	; (800a1c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800a152:	400b      	ands	r3, r1
 800a154:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2220      	movs	r2, #32
 800a15a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800a16e:	2301      	movs	r3, #1
 800a170:	e022      	b.n	800a1b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a172:	f7fe fc9d 	bl	8008ab0 <HAL_GetTick>
 800a176:	4602      	mov	r2, r0
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	1ad3      	subs	r3, r2, r3
 800a17c:	68ba      	ldr	r2, [r7, #8]
 800a17e:	429a      	cmp	r2, r3
 800a180:	d302      	bcc.n	800a188 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	2b00      	cmp	r3, #0
 800a186:	d10f      	bne.n	800a1a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a18c:	f043 0220 	orr.w	r2, r3, #32
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2220      	movs	r2, #32
 800a198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	e007      	b.n	800a1b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	f003 0304 	and.w	r3, r3, #4
 800a1b2:	2b04      	cmp	r3, #4
 800a1b4:	d193      	bne.n	800a0de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800a1b6:	2300      	movs	r3, #0
}
 800a1b8:	4618      	mov	r0, r3
 800a1ba:	3710      	adds	r7, #16
 800a1bc:	46bd      	mov	sp, r7
 800a1be:	bd80      	pop	{r7, pc}
 800a1c0:	fe00e800 	.word	0xfe00e800

0800a1c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08a      	sub	sp, #40	; 0x28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	699b      	ldr	r3, [r3, #24]
 800a1dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800a1e6:	69bb      	ldr	r3, [r7, #24]
 800a1e8:	f003 0310 	and.w	r3, r3, #16
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d075      	beq.n	800a2dc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	2210      	movs	r2, #16
 800a1f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a1f8:	e056      	b.n	800a2a8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800a1fa:	68bb      	ldr	r3, [r7, #8]
 800a1fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a200:	d052      	beq.n	800a2a8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800a202:	f7fe fc55 	bl	8008ab0 <HAL_GetTick>
 800a206:	4602      	mov	r2, r0
 800a208:	69fb      	ldr	r3, [r7, #28]
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d302      	bcc.n	800a218 <I2C_IsErrorOccurred+0x54>
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	2b00      	cmp	r3, #0
 800a216:	d147      	bne.n	800a2a8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a222:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a22a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	699b      	ldr	r3, [r3, #24]
 800a232:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a23a:	d12e      	bne.n	800a29a <I2C_IsErrorOccurred+0xd6>
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a242:	d02a      	beq.n	800a29a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800a244:	7cfb      	ldrb	r3, [r7, #19]
 800a246:	2b20      	cmp	r3, #32
 800a248:	d027      	beq.n	800a29a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	685a      	ldr	r2, [r3, #4]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a258:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800a25a:	f7fe fc29 	bl	8008ab0 <HAL_GetTick>
 800a25e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a260:	e01b      	b.n	800a29a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800a262:	f7fe fc25 	bl	8008ab0 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	69fb      	ldr	r3, [r7, #28]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	2b19      	cmp	r3, #25
 800a26e:	d914      	bls.n	800a29a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a274:	f043 0220 	orr.w	r2, r3, #32
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	2220      	movs	r2, #32
 800a280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2200      	movs	r2, #0
 800a288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800a294:	2301      	movs	r3, #1
 800a296:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f003 0320 	and.w	r3, r3, #32
 800a2a4:	2b20      	cmp	r3, #32
 800a2a6:	d1dc      	bne.n	800a262 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	699b      	ldr	r3, [r3, #24]
 800a2ae:	f003 0320 	and.w	r3, r3, #32
 800a2b2:	2b20      	cmp	r3, #32
 800a2b4:	d003      	beq.n	800a2be <I2C_IsErrorOccurred+0xfa>
 800a2b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d09d      	beq.n	800a1fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800a2be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d103      	bne.n	800a2ce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	2220      	movs	r2, #32
 800a2cc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800a2ce:	6a3b      	ldr	r3, [r7, #32]
 800a2d0:	f043 0304 	orr.w	r3, r3, #4
 800a2d4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800a2e4:	69bb      	ldr	r3, [r7, #24]
 800a2e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d00b      	beq.n	800a306 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800a2ee:	6a3b      	ldr	r3, [r7, #32]
 800a2f0:	f043 0301 	orr.w	r3, r3, #1
 800a2f4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a2fe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a300:	2301      	movs	r3, #1
 800a302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800a306:	69bb      	ldr	r3, [r7, #24]
 800a308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00b      	beq.n	800a328 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	f043 0308 	orr.w	r3, r3, #8
 800a316:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a320:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a322:	2301      	movs	r3, #1
 800a324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800a328:	69bb      	ldr	r3, [r7, #24]
 800a32a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d00b      	beq.n	800a34a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800a332:	6a3b      	ldr	r3, [r7, #32]
 800a334:	f043 0302 	orr.w	r3, r3, #2
 800a338:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a342:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800a34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d01c      	beq.n	800a38c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a352:	68f8      	ldr	r0, [r7, #12]
 800a354:	f7ff fddc 	bl	8009f10 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	6859      	ldr	r1, [r3, #4]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	4b0d      	ldr	r3, [pc, #52]	; (800a398 <I2C_IsErrorOccurred+0x1d4>)
 800a364:	400b      	ands	r3, r1
 800a366:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a36c:	6a3b      	ldr	r3, [r7, #32]
 800a36e:	431a      	orrs	r2, r3
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800a38c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800a390:	4618      	mov	r0, r3
 800a392:	3728      	adds	r7, #40	; 0x28
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}
 800a398:	fe00e800 	.word	0xfe00e800

0800a39c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800a39c:	b480      	push	{r7}
 800a39e:	b087      	sub	sp, #28
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	60f8      	str	r0, [r7, #12]
 800a3a4:	607b      	str	r3, [r7, #4]
 800a3a6:	460b      	mov	r3, r1
 800a3a8:	817b      	strh	r3, [r7, #10]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3ae:	897b      	ldrh	r3, [r7, #10]
 800a3b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3b4:	7a7b      	ldrb	r3, [r7, #9]
 800a3b6:	041b      	lsls	r3, r3, #16
 800a3b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3bc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800a3c2:	6a3b      	ldr	r3, [r7, #32]
 800a3c4:	4313      	orrs	r3, r2
 800a3c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a3ca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685a      	ldr	r2, [r3, #4]
 800a3d2:	6a3b      	ldr	r3, [r7, #32]
 800a3d4:	0d5b      	lsrs	r3, r3, #21
 800a3d6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800a3da:	4b08      	ldr	r3, [pc, #32]	; (800a3fc <I2C_TransferConfig+0x60>)
 800a3dc:	430b      	orrs	r3, r1
 800a3de:	43db      	mvns	r3, r3
 800a3e0:	ea02 0103 	and.w	r1, r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	430a      	orrs	r2, r1
 800a3ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800a3ee:	bf00      	nop
 800a3f0:	371c      	adds	r7, #28
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	03ff63ff 	.word	0x03ff63ff

0800a400 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800a400:	b480      	push	{r7}
 800a402:	b083      	sub	sp, #12
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
 800a408:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a410:	b2db      	uxtb	r3, r3
 800a412:	2b20      	cmp	r3, #32
 800a414:	d138      	bne.n	800a488 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a41c:	2b01      	cmp	r3, #1
 800a41e:	d101      	bne.n	800a424 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800a420:	2302      	movs	r3, #2
 800a422:	e032      	b.n	800a48a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2201      	movs	r2, #1
 800a428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2224      	movs	r2, #36	; 0x24
 800a430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	681a      	ldr	r2, [r3, #0]
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f022 0201 	bic.w	r2, r2, #1
 800a442:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a452:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	6819      	ldr	r1, [r3, #0]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	430a      	orrs	r2, r1
 800a462:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f042 0201 	orr.w	r2, r2, #1
 800a472:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	2220      	movs	r2, #32
 800a478:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	2200      	movs	r2, #0
 800a480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a484:	2300      	movs	r3, #0
 800a486:	e000      	b.n	800a48a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a488:	2302      	movs	r3, #2
  }
}
 800a48a:	4618      	mov	r0, r3
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800a496:	b480      	push	{r7}
 800a498:	b085      	sub	sp, #20
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
 800a49e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a4a6:	b2db      	uxtb	r3, r3
 800a4a8:	2b20      	cmp	r3, #32
 800a4aa:	d139      	bne.n	800a520 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a4b2:	2b01      	cmp	r3, #1
 800a4b4:	d101      	bne.n	800a4ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	e033      	b.n	800a522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2201      	movs	r2, #1
 800a4be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	2224      	movs	r2, #36	; 0x24
 800a4c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f022 0201 	bic.w	r2, r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a4e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800a4ea:	683b      	ldr	r3, [r7, #0]
 800a4ec:	021b      	lsls	r3, r3, #8
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	4313      	orrs	r3, r2
 800a4f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	68fa      	ldr	r2, [r7, #12]
 800a4fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f042 0201 	orr.w	r2, r2, #1
 800a50a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2220      	movs	r2, #32
 800a510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800a51c:	2300      	movs	r3, #0
 800a51e:	e000      	b.n	800a522 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800a520:	2302      	movs	r3, #2
  }
}
 800a522:	4618      	mov	r0, r3
 800a524:	3714      	adds	r7, #20
 800a526:	46bd      	mov	sp, r7
 800a528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52c:	4770      	bx	lr
	...

0800a530 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800a530:	b480      	push	{r7}
 800a532:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800a534:	4b04      	ldr	r3, [pc, #16]	; (800a548 <HAL_PWREx_GetVoltageRange+0x18>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	40007000 	.word	0x40007000

0800a54c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b085      	sub	sp, #20
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a55a:	d130      	bne.n	800a5be <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800a55c:	4b23      	ldr	r3, [pc, #140]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a568:	d038      	beq.n	800a5dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a56a:	4b20      	ldr	r3, [pc, #128]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a572:	4a1e      	ldr	r2, [pc, #120]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a574:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a578:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a57a:	4b1d      	ldr	r3, [pc, #116]	; (800a5f0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	2232      	movs	r2, #50	; 0x32
 800a580:	fb02 f303 	mul.w	r3, r2, r3
 800a584:	4a1b      	ldr	r2, [pc, #108]	; (800a5f4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800a586:	fba2 2303 	umull	r2, r3, r2, r3
 800a58a:	0c9b      	lsrs	r3, r3, #18
 800a58c:	3301      	adds	r3, #1
 800a58e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a590:	e002      	b.n	800a598 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	3b01      	subs	r3, #1
 800a596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a598:	4b14      	ldr	r3, [pc, #80]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a59a:	695b      	ldr	r3, [r3, #20]
 800a59c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5a4:	d102      	bne.n	800a5ac <HAL_PWREx_ControlVoltageScaling+0x60>
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d1f2      	bne.n	800a592 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a5ac:	4b0f      	ldr	r3, [pc, #60]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a5ae:	695b      	ldr	r3, [r3, #20]
 800a5b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5b8:	d110      	bne.n	800a5dc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800a5ba:	2303      	movs	r3, #3
 800a5bc:	e00f      	b.n	800a5de <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800a5be:	4b0b      	ldr	r3, [pc, #44]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a5c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a5ca:	d007      	beq.n	800a5dc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a5cc:	4b07      	ldr	r3, [pc, #28]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a5d4:	4a05      	ldr	r2, [pc, #20]	; (800a5ec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800a5d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a5da:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800a5dc:	2300      	movs	r3, #0
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3714      	adds	r7, #20
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e8:	4770      	bx	lr
 800a5ea:	bf00      	nop
 800a5ec:	40007000 	.word	0x40007000
 800a5f0:	200002c4 	.word	0x200002c4
 800a5f4:	431bde83 	.word	0x431bde83

0800a5f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b088      	sub	sp, #32
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d101      	bne.n	800a60a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a606:	2301      	movs	r3, #1
 800a608:	e3c6      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a60a:	4ba1      	ldr	r3, [pc, #644]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f003 030c 	and.w	r3, r3, #12
 800a612:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a614:	4b9e      	ldr	r3, [pc, #632]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a616:	68db      	ldr	r3, [r3, #12]
 800a618:	f003 0303 	and.w	r3, r3, #3
 800a61c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 0310 	and.w	r3, r3, #16
 800a626:	2b00      	cmp	r3, #0
 800a628:	f000 80e4 	beq.w	800a7f4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a62c:	69bb      	ldr	r3, [r7, #24]
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d007      	beq.n	800a642 <HAL_RCC_OscConfig+0x4a>
 800a632:	69bb      	ldr	r3, [r7, #24]
 800a634:	2b0c      	cmp	r3, #12
 800a636:	f040 808b 	bne.w	800a750 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	f040 8087 	bne.w	800a750 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a642:	4b93      	ldr	r3, [pc, #588]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 0302 	and.w	r3, r3, #2
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <HAL_RCC_OscConfig+0x62>
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	2b00      	cmp	r3, #0
 800a654:	d101      	bne.n	800a65a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800a656:	2301      	movs	r3, #1
 800a658:	e39e      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	6a1a      	ldr	r2, [r3, #32]
 800a65e:	4b8c      	ldr	r3, [pc, #560]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f003 0308 	and.w	r3, r3, #8
 800a666:	2b00      	cmp	r3, #0
 800a668:	d004      	beq.n	800a674 <HAL_RCC_OscConfig+0x7c>
 800a66a:	4b89      	ldr	r3, [pc, #548]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a672:	e005      	b.n	800a680 <HAL_RCC_OscConfig+0x88>
 800a674:	4b86      	ldr	r3, [pc, #536]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a67a:	091b      	lsrs	r3, r3, #4
 800a67c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a680:	4293      	cmp	r3, r2
 800a682:	d223      	bcs.n	800a6cc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6a1b      	ldr	r3, [r3, #32]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 fd53 	bl	800b134 <RCC_SetFlashLatencyFromMSIRange>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800a694:	2301      	movs	r3, #1
 800a696:	e37f      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a698:	4b7d      	ldr	r3, [pc, #500]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	4a7c      	ldr	r2, [pc, #496]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a69e:	f043 0308 	orr.w	r3, r3, #8
 800a6a2:	6013      	str	r3, [r2, #0]
 800a6a4:	4b7a      	ldr	r3, [pc, #488]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a1b      	ldr	r3, [r3, #32]
 800a6b0:	4977      	ldr	r1, [pc, #476]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6b2:	4313      	orrs	r3, r2
 800a6b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a6b6:	4b76      	ldr	r3, [pc, #472]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	69db      	ldr	r3, [r3, #28]
 800a6c2:	021b      	lsls	r3, r3, #8
 800a6c4:	4972      	ldr	r1, [pc, #456]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	604b      	str	r3, [r1, #4]
 800a6ca:	e025      	b.n	800a718 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a6cc:	4b70      	ldr	r3, [pc, #448]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a6f      	ldr	r2, [pc, #444]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6d2:	f043 0308 	orr.w	r3, r3, #8
 800a6d6:	6013      	str	r3, [r2, #0]
 800a6d8:	4b6d      	ldr	r3, [pc, #436]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	496a      	ldr	r1, [pc, #424]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6e6:	4313      	orrs	r3, r2
 800a6e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a6ea:	4b69      	ldr	r3, [pc, #420]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	69db      	ldr	r3, [r3, #28]
 800a6f6:	021b      	lsls	r3, r3, #8
 800a6f8:	4965      	ldr	r1, [pc, #404]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a6fa:	4313      	orrs	r3, r2
 800a6fc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d109      	bne.n	800a718 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	6a1b      	ldr	r3, [r3, #32]
 800a708:	4618      	mov	r0, r3
 800a70a:	f000 fd13 	bl	800b134 <RCC_SetFlashLatencyFromMSIRange>
 800a70e:	4603      	mov	r3, r0
 800a710:	2b00      	cmp	r3, #0
 800a712:	d001      	beq.n	800a718 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e33f      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a718:	f000 fc48 	bl	800afac <HAL_RCC_GetSysClockFreq>
 800a71c:	4602      	mov	r2, r0
 800a71e:	4b5c      	ldr	r3, [pc, #368]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	091b      	lsrs	r3, r3, #4
 800a724:	f003 030f 	and.w	r3, r3, #15
 800a728:	495a      	ldr	r1, [pc, #360]	; (800a894 <HAL_RCC_OscConfig+0x29c>)
 800a72a:	5ccb      	ldrb	r3, [r1, r3]
 800a72c:	f003 031f 	and.w	r3, r3, #31
 800a730:	fa22 f303 	lsr.w	r3, r2, r3
 800a734:	4a58      	ldr	r2, [pc, #352]	; (800a898 <HAL_RCC_OscConfig+0x2a0>)
 800a736:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800a738:	4b58      	ldr	r3, [pc, #352]	; (800a89c <HAL_RCC_OscConfig+0x2a4>)
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	4618      	mov	r0, r3
 800a73e:	f7fe f967 	bl	8008a10 <HAL_InitTick>
 800a742:	4603      	mov	r3, r0
 800a744:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800a746:	7bfb      	ldrb	r3, [r7, #15]
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d052      	beq.n	800a7f2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800a74c:	7bfb      	ldrb	r3, [r7, #15]
 800a74e:	e323      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d032      	beq.n	800a7be <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800a758:	4b4d      	ldr	r3, [pc, #308]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a4c      	ldr	r2, [pc, #304]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a75e:	f043 0301 	orr.w	r3, r3, #1
 800a762:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a764:	f7fe f9a4 	bl	8008ab0 <HAL_GetTick>
 800a768:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a76a:	e008      	b.n	800a77e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a76c:	f7fe f9a0 	bl	8008ab0 <HAL_GetTick>
 800a770:	4602      	mov	r2, r0
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	1ad3      	subs	r3, r2, r3
 800a776:	2b02      	cmp	r3, #2
 800a778:	d901      	bls.n	800a77e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800a77a:	2303      	movs	r3, #3
 800a77c:	e30c      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800a77e:	4b44      	ldr	r3, [pc, #272]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	f003 0302 	and.w	r3, r3, #2
 800a786:	2b00      	cmp	r3, #0
 800a788:	d0f0      	beq.n	800a76c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800a78a:	4b41      	ldr	r3, [pc, #260]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a40      	ldr	r2, [pc, #256]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a790:	f043 0308 	orr.w	r3, r3, #8
 800a794:	6013      	str	r3, [r2, #0]
 800a796:	4b3e      	ldr	r3, [pc, #248]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6a1b      	ldr	r3, [r3, #32]
 800a7a2:	493b      	ldr	r1, [pc, #236]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800a7a8:	4b39      	ldr	r3, [pc, #228]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a7aa:	685b      	ldr	r3, [r3, #4]
 800a7ac:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	69db      	ldr	r3, [r3, #28]
 800a7b4:	021b      	lsls	r3, r3, #8
 800a7b6:	4936      	ldr	r1, [pc, #216]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	604b      	str	r3, [r1, #4]
 800a7bc:	e01a      	b.n	800a7f4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800a7be:	4b34      	ldr	r3, [pc, #208]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	4a33      	ldr	r2, [pc, #204]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a7c4:	f023 0301 	bic.w	r3, r3, #1
 800a7c8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800a7ca:	f7fe f971 	bl	8008ab0 <HAL_GetTick>
 800a7ce:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a7d0:	e008      	b.n	800a7e4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800a7d2:	f7fe f96d 	bl	8008ab0 <HAL_GetTick>
 800a7d6:	4602      	mov	r2, r0
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	1ad3      	subs	r3, r2, r3
 800a7dc:	2b02      	cmp	r3, #2
 800a7de:	d901      	bls.n	800a7e4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800a7e0:	2303      	movs	r3, #3
 800a7e2:	e2d9      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800a7e4:	4b2a      	ldr	r3, [pc, #168]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f003 0302 	and.w	r3, r3, #2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d1f0      	bne.n	800a7d2 <HAL_RCC_OscConfig+0x1da>
 800a7f0:	e000      	b.n	800a7f4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800a7f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f003 0301 	and.w	r3, r3, #1
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d074      	beq.n	800a8ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800a800:	69bb      	ldr	r3, [r7, #24]
 800a802:	2b08      	cmp	r3, #8
 800a804:	d005      	beq.n	800a812 <HAL_RCC_OscConfig+0x21a>
 800a806:	69bb      	ldr	r3, [r7, #24]
 800a808:	2b0c      	cmp	r3, #12
 800a80a:	d10e      	bne.n	800a82a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	2b03      	cmp	r3, #3
 800a810:	d10b      	bne.n	800a82a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a812:	4b1f      	ldr	r3, [pc, #124]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d064      	beq.n	800a8e8 <HAL_RCC_OscConfig+0x2f0>
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	685b      	ldr	r3, [r3, #4]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d160      	bne.n	800a8e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e2b6      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685b      	ldr	r3, [r3, #4]
 800a82e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a832:	d106      	bne.n	800a842 <HAL_RCC_OscConfig+0x24a>
 800a834:	4b16      	ldr	r3, [pc, #88]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	4a15      	ldr	r2, [pc, #84]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a83a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a83e:	6013      	str	r3, [r2, #0]
 800a840:	e01d      	b.n	800a87e <HAL_RCC_OscConfig+0x286>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	685b      	ldr	r3, [r3, #4]
 800a846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a84a:	d10c      	bne.n	800a866 <HAL_RCC_OscConfig+0x26e>
 800a84c:	4b10      	ldr	r3, [pc, #64]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a0f      	ldr	r2, [pc, #60]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	4b0d      	ldr	r3, [pc, #52]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a0c      	ldr	r2, [pc, #48]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a85e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	e00b      	b.n	800a87e <HAL_RCC_OscConfig+0x286>
 800a866:	4b0a      	ldr	r3, [pc, #40]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	4a09      	ldr	r2, [pc, #36]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a86c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a870:	6013      	str	r3, [r2, #0]
 800a872:	4b07      	ldr	r3, [pc, #28]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a06      	ldr	r2, [pc, #24]	; (800a890 <HAL_RCC_OscConfig+0x298>)
 800a878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a87c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	685b      	ldr	r3, [r3, #4]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d01c      	beq.n	800a8c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a886:	f7fe f913 	bl	8008ab0 <HAL_GetTick>
 800a88a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a88c:	e011      	b.n	800a8b2 <HAL_RCC_OscConfig+0x2ba>
 800a88e:	bf00      	nop
 800a890:	40021000 	.word	0x40021000
 800a894:	08011198 	.word	0x08011198
 800a898:	200002c4 	.word	0x200002c4
 800a89c:	20000648 	.word	0x20000648
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8a0:	f7fe f906 	bl	8008ab0 <HAL_GetTick>
 800a8a4:	4602      	mov	r2, r0
 800a8a6:	693b      	ldr	r3, [r7, #16]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	2b64      	cmp	r3, #100	; 0x64
 800a8ac:	d901      	bls.n	800a8b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800a8ae:	2303      	movs	r3, #3
 800a8b0:	e272      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8b2:	4baf      	ldr	r3, [pc, #700]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d0f0      	beq.n	800a8a0 <HAL_RCC_OscConfig+0x2a8>
 800a8be:	e014      	b.n	800a8ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c0:	f7fe f8f6 	bl	8008ab0 <HAL_GetTick>
 800a8c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a8c6:	e008      	b.n	800a8da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a8c8:	f7fe f8f2 	bl	8008ab0 <HAL_GetTick>
 800a8cc:	4602      	mov	r2, r0
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	1ad3      	subs	r3, r2, r3
 800a8d2:	2b64      	cmp	r3, #100	; 0x64
 800a8d4:	d901      	bls.n	800a8da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e25e      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a8da:	4ba5      	ldr	r3, [pc, #660]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d1f0      	bne.n	800a8c8 <HAL_RCC_OscConfig+0x2d0>
 800a8e6:	e000      	b.n	800a8ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a8e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 0302 	and.w	r3, r3, #2
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d060      	beq.n	800a9b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	2b04      	cmp	r3, #4
 800a8fa:	d005      	beq.n	800a908 <HAL_RCC_OscConfig+0x310>
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	2b0c      	cmp	r3, #12
 800a900:	d119      	bne.n	800a936 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800a902:	697b      	ldr	r3, [r7, #20]
 800a904:	2b02      	cmp	r3, #2
 800a906:	d116      	bne.n	800a936 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a908:	4b99      	ldr	r3, [pc, #612]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a910:	2b00      	cmp	r3, #0
 800a912:	d005      	beq.n	800a920 <HAL_RCC_OscConfig+0x328>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d101      	bne.n	800a920 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e23b      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a920:	4b93      	ldr	r3, [pc, #588]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	061b      	lsls	r3, r3, #24
 800a92e:	4990      	ldr	r1, [pc, #576]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a930:	4313      	orrs	r3, r2
 800a932:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a934:	e040      	b.n	800a9b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	68db      	ldr	r3, [r3, #12]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d023      	beq.n	800a986 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a93e:	4b8c      	ldr	r3, [pc, #560]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	4a8b      	ldr	r2, [pc, #556]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a94a:	f7fe f8b1 	bl	8008ab0 <HAL_GetTick>
 800a94e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a950:	e008      	b.n	800a964 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a952:	f7fe f8ad 	bl	8008ab0 <HAL_GetTick>
 800a956:	4602      	mov	r2, r0
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	1ad3      	subs	r3, r2, r3
 800a95c:	2b02      	cmp	r3, #2
 800a95e:	d901      	bls.n	800a964 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800a960:	2303      	movs	r3, #3
 800a962:	e219      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a964:	4b82      	ldr	r3, [pc, #520]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d0f0      	beq.n	800a952 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a970:	4b7f      	ldr	r3, [pc, #508]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a972:	685b      	ldr	r3, [r3, #4]
 800a974:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	061b      	lsls	r3, r3, #24
 800a97e:	497c      	ldr	r1, [pc, #496]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a980:	4313      	orrs	r3, r2
 800a982:	604b      	str	r3, [r1, #4]
 800a984:	e018      	b.n	800a9b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a986:	4b7a      	ldr	r3, [pc, #488]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a79      	ldr	r2, [pc, #484]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a98c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a992:	f7fe f88d 	bl	8008ab0 <HAL_GetTick>
 800a996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a998:	e008      	b.n	800a9ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a99a:	f7fe f889 	bl	8008ab0 <HAL_GetTick>
 800a99e:	4602      	mov	r2, r0
 800a9a0:	693b      	ldr	r3, [r7, #16]
 800a9a2:	1ad3      	subs	r3, r2, r3
 800a9a4:	2b02      	cmp	r3, #2
 800a9a6:	d901      	bls.n	800a9ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800a9a8:	2303      	movs	r3, #3
 800a9aa:	e1f5      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a9ac:	4b70      	ldr	r3, [pc, #448]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d1f0      	bne.n	800a99a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 0308 	and.w	r3, r3, #8
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d03c      	beq.n	800aa3e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	695b      	ldr	r3, [r3, #20]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d01c      	beq.n	800aa06 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a9cc:	4b68      	ldr	r3, [pc, #416]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a9ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9d2:	4a67      	ldr	r2, [pc, #412]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a9d4:	f043 0301 	orr.w	r3, r3, #1
 800a9d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a9dc:	f7fe f868 	bl	8008ab0 <HAL_GetTick>
 800a9e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9e2:	e008      	b.n	800a9f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a9e4:	f7fe f864 	bl	8008ab0 <HAL_GetTick>
 800a9e8:	4602      	mov	r2, r0
 800a9ea:	693b      	ldr	r3, [r7, #16]
 800a9ec:	1ad3      	subs	r3, r2, r3
 800a9ee:	2b02      	cmp	r3, #2
 800a9f0:	d901      	bls.n	800a9f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	e1d0      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a9f6:	4b5e      	ldr	r3, [pc, #376]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800a9f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a9fc:	f003 0302 	and.w	r3, r3, #2
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d0ef      	beq.n	800a9e4 <HAL_RCC_OscConfig+0x3ec>
 800aa04:	e01b      	b.n	800aa3e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800aa06:	4b5a      	ldr	r3, [pc, #360]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aa08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa0c:	4a58      	ldr	r2, [pc, #352]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aa0e:	f023 0301 	bic.w	r3, r3, #1
 800aa12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800aa16:	f7fe f84b 	bl	8008ab0 <HAL_GetTick>
 800aa1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aa1c:	e008      	b.n	800aa30 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800aa1e:	f7fe f847 	bl	8008ab0 <HAL_GetTick>
 800aa22:	4602      	mov	r2, r0
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	1ad3      	subs	r3, r2, r3
 800aa28:	2b02      	cmp	r3, #2
 800aa2a:	d901      	bls.n	800aa30 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	e1b3      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800aa30:	4b4f      	ldr	r3, [pc, #316]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aa32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aa36:	f003 0302 	and.w	r3, r3, #2
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d1ef      	bne.n	800aa1e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	f003 0304 	and.w	r3, r3, #4
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	f000 80a6 	beq.w	800ab98 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800aa50:	4b47      	ldr	r3, [pc, #284]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aa52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d10d      	bne.n	800aa78 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800aa5c:	4b44      	ldr	r3, [pc, #272]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aa5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa60:	4a43      	ldr	r2, [pc, #268]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aa62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa66:	6593      	str	r3, [r2, #88]	; 0x58
 800aa68:	4b41      	ldr	r3, [pc, #260]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aa6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa70:	60bb      	str	r3, [r7, #8]
 800aa72:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800aa74:	2301      	movs	r3, #1
 800aa76:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa78:	4b3e      	ldr	r3, [pc, #248]	; (800ab74 <HAL_RCC_OscConfig+0x57c>)
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d118      	bne.n	800aab6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aa84:	4b3b      	ldr	r3, [pc, #236]	; (800ab74 <HAL_RCC_OscConfig+0x57c>)
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a3a      	ldr	r2, [pc, #232]	; (800ab74 <HAL_RCC_OscConfig+0x57c>)
 800aa8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa8e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800aa90:	f7fe f80e 	bl	8008ab0 <HAL_GetTick>
 800aa94:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aa96:	e008      	b.n	800aaaa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa98:	f7fe f80a 	bl	8008ab0 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	2b02      	cmp	r3, #2
 800aaa4:	d901      	bls.n	800aaaa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800aaa6:	2303      	movs	r3, #3
 800aaa8:	e176      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800aaaa:	4b32      	ldr	r3, [pc, #200]	; (800ab74 <HAL_RCC_OscConfig+0x57c>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d0f0      	beq.n	800aa98 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	689b      	ldr	r3, [r3, #8]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d108      	bne.n	800aad0 <HAL_RCC_OscConfig+0x4d8>
 800aabe:	4b2c      	ldr	r3, [pc, #176]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aac4:	4a2a      	ldr	r2, [pc, #168]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aac6:	f043 0301 	orr.w	r3, r3, #1
 800aaca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aace:	e024      	b.n	800ab1a <HAL_RCC_OscConfig+0x522>
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	689b      	ldr	r3, [r3, #8]
 800aad4:	2b05      	cmp	r3, #5
 800aad6:	d110      	bne.n	800aafa <HAL_RCC_OscConfig+0x502>
 800aad8:	4b25      	ldr	r3, [pc, #148]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aade:	4a24      	ldr	r2, [pc, #144]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aae0:	f043 0304 	orr.w	r3, r3, #4
 800aae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aae8:	4b21      	ldr	r3, [pc, #132]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aaea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaee:	4a20      	ldr	r2, [pc, #128]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aaf0:	f043 0301 	orr.w	r3, r3, #1
 800aaf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800aaf8:	e00f      	b.n	800ab1a <HAL_RCC_OscConfig+0x522>
 800aafa:	4b1d      	ldr	r3, [pc, #116]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800aafc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab00:	4a1b      	ldr	r2, [pc, #108]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800ab02:	f023 0301 	bic.w	r3, r3, #1
 800ab06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800ab0a:	4b19      	ldr	r3, [pc, #100]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800ab0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab10:	4a17      	ldr	r2, [pc, #92]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800ab12:	f023 0304 	bic.w	r3, r3, #4
 800ab16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	689b      	ldr	r3, [r3, #8]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d016      	beq.n	800ab50 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab22:	f7fd ffc5 	bl	8008ab0 <HAL_GetTick>
 800ab26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab28:	e00a      	b.n	800ab40 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab2a:	f7fd ffc1 	bl	8008ab0 <HAL_GetTick>
 800ab2e:	4602      	mov	r2, r0
 800ab30:	693b      	ldr	r3, [r7, #16]
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d901      	bls.n	800ab40 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800ab3c:	2303      	movs	r3, #3
 800ab3e:	e12b      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ab40:	4b0b      	ldr	r3, [pc, #44]	; (800ab70 <HAL_RCC_OscConfig+0x578>)
 800ab42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab46:	f003 0302 	and.w	r3, r3, #2
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d0ed      	beq.n	800ab2a <HAL_RCC_OscConfig+0x532>
 800ab4e:	e01a      	b.n	800ab86 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ab50:	f7fd ffae 	bl	8008ab0 <HAL_GetTick>
 800ab54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab56:	e00f      	b.n	800ab78 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab58:	f7fd ffaa 	bl	8008ab0 <HAL_GetTick>
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d906      	bls.n	800ab78 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e114      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
 800ab6e:	bf00      	nop
 800ab70:	40021000 	.word	0x40021000
 800ab74:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800ab78:	4b89      	ldr	r3, [pc, #548]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ab7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab7e:	f003 0302 	and.w	r3, r3, #2
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d1e8      	bne.n	800ab58 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ab86:	7ffb      	ldrb	r3, [r7, #31]
 800ab88:	2b01      	cmp	r3, #1
 800ab8a:	d105      	bne.n	800ab98 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ab8c:	4b84      	ldr	r3, [pc, #528]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ab8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab90:	4a83      	ldr	r2, [pc, #524]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ab92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ab96:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	f000 80fa 	beq.w	800ad96 <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aba6:	2b02      	cmp	r3, #2
 800aba8:	f040 80d0 	bne.w	800ad4c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800abac:	4b7c      	ldr	r3, [pc, #496]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	f003 0203 	and.w	r2, r3, #3
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abbc:	429a      	cmp	r2, r3
 800abbe:	d130      	bne.n	800ac22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abca:	3b01      	subs	r3, #1
 800abcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800abce:	429a      	cmp	r2, r3
 800abd0:	d127      	bne.n	800ac22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800abd2:	697b      	ldr	r3, [r7, #20]
 800abd4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800abdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800abde:	429a      	cmp	r2, r3
 800abe0:	d11f      	bne.n	800ac22 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800abe2:	697b      	ldr	r3, [r7, #20]
 800abe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800abe8:	687a      	ldr	r2, [r7, #4]
 800abea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800abec:	2a07      	cmp	r2, #7
 800abee:	bf14      	ite	ne
 800abf0:	2201      	movne	r2, #1
 800abf2:	2200      	moveq	r2, #0
 800abf4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800abf6:	4293      	cmp	r3, r2
 800abf8:	d113      	bne.n	800ac22 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800abfa:	697b      	ldr	r3, [r7, #20]
 800abfc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac04:	085b      	lsrs	r3, r3, #1
 800ac06:	3b01      	subs	r3, #1
 800ac08:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d109      	bne.n	800ac22 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac18:	085b      	lsrs	r3, r3, #1
 800ac1a:	3b01      	subs	r3, #1
 800ac1c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800ac1e:	429a      	cmp	r2, r3
 800ac20:	d06e      	beq.n	800ad00 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ac22:	69bb      	ldr	r3, [r7, #24]
 800ac24:	2b0c      	cmp	r3, #12
 800ac26:	d069      	beq.n	800acfc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800ac28:	4b5d      	ldr	r3, [pc, #372]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d105      	bne.n	800ac40 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800ac34:	4b5a      	ldr	r3, [pc, #360]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d001      	beq.n	800ac44 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	e0a9      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800ac44:	4b56      	ldr	r3, [pc, #344]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a55      	ldr	r2, [pc, #340]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ac4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ac4e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800ac50:	f7fd ff2e 	bl	8008ab0 <HAL_GetTick>
 800ac54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac56:	e008      	b.n	800ac6a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ac58:	f7fd ff2a 	bl	8008ab0 <HAL_GetTick>
 800ac5c:	4602      	mov	r2, r0
 800ac5e:	693b      	ldr	r3, [r7, #16]
 800ac60:	1ad3      	subs	r3, r2, r3
 800ac62:	2b02      	cmp	r3, #2
 800ac64:	d901      	bls.n	800ac6a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800ac66:	2303      	movs	r3, #3
 800ac68:	e096      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ac6a:	4b4d      	ldr	r3, [pc, #308]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d1f0      	bne.n	800ac58 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ac76:	4b4a      	ldr	r3, [pc, #296]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ac78:	68da      	ldr	r2, [r3, #12]
 800ac7a:	4b4a      	ldr	r3, [pc, #296]	; (800ada4 <HAL_RCC_OscConfig+0x7ac>)
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800ac82:	687a      	ldr	r2, [r7, #4]
 800ac84:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800ac86:	3a01      	subs	r2, #1
 800ac88:	0112      	lsls	r2, r2, #4
 800ac8a:	4311      	orrs	r1, r2
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800ac90:	0212      	lsls	r2, r2, #8
 800ac92:	4311      	orrs	r1, r2
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800ac98:	0852      	lsrs	r2, r2, #1
 800ac9a:	3a01      	subs	r2, #1
 800ac9c:	0552      	lsls	r2, r2, #21
 800ac9e:	4311      	orrs	r1, r2
 800aca0:	687a      	ldr	r2, [r7, #4]
 800aca2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800aca4:	0852      	lsrs	r2, r2, #1
 800aca6:	3a01      	subs	r2, #1
 800aca8:	0652      	lsls	r2, r2, #25
 800acaa:	4311      	orrs	r1, r2
 800acac:	687a      	ldr	r2, [r7, #4]
 800acae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800acb0:	0912      	lsrs	r2, r2, #4
 800acb2:	0452      	lsls	r2, r2, #17
 800acb4:	430a      	orrs	r2, r1
 800acb6:	493a      	ldr	r1, [pc, #232]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800acb8:	4313      	orrs	r3, r2
 800acba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800acbc:	4b38      	ldr	r3, [pc, #224]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	4a37      	ldr	r2, [pc, #220]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800acc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acc6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800acc8:	4b35      	ldr	r3, [pc, #212]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800acca:	68db      	ldr	r3, [r3, #12]
 800accc:	4a34      	ldr	r2, [pc, #208]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800acce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800acd2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800acd4:	f7fd feec 	bl	8008ab0 <HAL_GetTick>
 800acd8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acda:	e008      	b.n	800acee <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800acdc:	f7fd fee8 	bl	8008ab0 <HAL_GetTick>
 800ace0:	4602      	mov	r2, r0
 800ace2:	693b      	ldr	r3, [r7, #16]
 800ace4:	1ad3      	subs	r3, r2, r3
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	d901      	bls.n	800acee <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800acea:	2303      	movs	r3, #3
 800acec:	e054      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800acee:	4b2c      	ldr	r3, [pc, #176]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d0f0      	beq.n	800acdc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800acfa:	e04c      	b.n	800ad96 <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e04b      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad00:	4b27      	ldr	r3, [pc, #156]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d144      	bne.n	800ad96 <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800ad0c:	4b24      	ldr	r3, [pc, #144]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a23      	ldr	r2, [pc, #140]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800ad18:	4b21      	ldr	r3, [pc, #132]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad1a:	68db      	ldr	r3, [r3, #12]
 800ad1c:	4a20      	ldr	r2, [pc, #128]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ad22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800ad24:	f7fd fec4 	bl	8008ab0 <HAL_GetTick>
 800ad28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad2a:	e008      	b.n	800ad3e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad2c:	f7fd fec0 	bl	8008ab0 <HAL_GetTick>
 800ad30:	4602      	mov	r2, r0
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	1ad3      	subs	r3, r2, r3
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d901      	bls.n	800ad3e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800ad3a:	2303      	movs	r3, #3
 800ad3c:	e02c      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ad3e:	4b18      	ldr	r3, [pc, #96]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d0f0      	beq.n	800ad2c <HAL_RCC_OscConfig+0x734>
 800ad4a:	e024      	b.n	800ad96 <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	2b0c      	cmp	r3, #12
 800ad50:	d01f      	beq.n	800ad92 <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ad52:	4b13      	ldr	r3, [pc, #76]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a12      	ldr	r2, [pc, #72]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad5e:	f7fd fea7 	bl	8008ab0 <HAL_GetTick>
 800ad62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad64:	e008      	b.n	800ad78 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ad66:	f7fd fea3 	bl	8008ab0 <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	2b02      	cmp	r3, #2
 800ad72:	d901      	bls.n	800ad78 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800ad74:	2303      	movs	r3, #3
 800ad76:	e00f      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ad78:	4b09      	ldr	r3, [pc, #36]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d1f0      	bne.n	800ad66 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800ad84:	4b06      	ldr	r3, [pc, #24]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad86:	68da      	ldr	r2, [r3, #12]
 800ad88:	4905      	ldr	r1, [pc, #20]	; (800ada0 <HAL_RCC_OscConfig+0x7a8>)
 800ad8a:	4b07      	ldr	r3, [pc, #28]	; (800ada8 <HAL_RCC_OscConfig+0x7b0>)
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	60cb      	str	r3, [r1, #12]
 800ad90:	e001      	b.n	800ad96 <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800ad92:	2301      	movs	r3, #1
 800ad94:	e000      	b.n	800ad98 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800ad96:	2300      	movs	r3, #0
}
 800ad98:	4618      	mov	r0, r3
 800ad9a:	3720      	adds	r7, #32
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	bd80      	pop	{r7, pc}
 800ada0:	40021000 	.word	0x40021000
 800ada4:	f99d808c 	.word	0xf99d808c
 800ada8:	feeefffc 	.word	0xfeeefffc

0800adac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b084      	sub	sp, #16
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d101      	bne.n	800adc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800adbc:	2301      	movs	r3, #1
 800adbe:	e0e7      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800adc0:	4b75      	ldr	r3, [pc, #468]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	683a      	ldr	r2, [r7, #0]
 800adca:	429a      	cmp	r2, r3
 800adcc:	d910      	bls.n	800adf0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800adce:	4b72      	ldr	r3, [pc, #456]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f023 0207 	bic.w	r2, r3, #7
 800add6:	4970      	ldr	r1, [pc, #448]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800add8:	683b      	ldr	r3, [r7, #0]
 800adda:	4313      	orrs	r3, r2
 800addc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800adde:	4b6e      	ldr	r3, [pc, #440]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0307 	and.w	r3, r3, #7
 800ade6:	683a      	ldr	r2, [r7, #0]
 800ade8:	429a      	cmp	r2, r3
 800adea:	d001      	beq.n	800adf0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800adec:	2301      	movs	r3, #1
 800adee:	e0cf      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d010      	beq.n	800ae1e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	689a      	ldr	r2, [r3, #8]
 800ae00:	4b66      	ldr	r3, [pc, #408]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae02:	689b      	ldr	r3, [r3, #8]
 800ae04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae08:	429a      	cmp	r2, r3
 800ae0a:	d908      	bls.n	800ae1e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ae0c:	4b63      	ldr	r3, [pc, #396]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae0e:	689b      	ldr	r3, [r3, #8]
 800ae10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	689b      	ldr	r3, [r3, #8]
 800ae18:	4960      	ldr	r1, [pc, #384]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 0301 	and.w	r3, r3, #1
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d04c      	beq.n	800aec4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	685b      	ldr	r3, [r3, #4]
 800ae2e:	2b03      	cmp	r3, #3
 800ae30:	d107      	bne.n	800ae42 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800ae32:	4b5a      	ldr	r3, [pc, #360]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d121      	bne.n	800ae82 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e0a6      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	685b      	ldr	r3, [r3, #4]
 800ae46:	2b02      	cmp	r3, #2
 800ae48:	d107      	bne.n	800ae5a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ae4a:	4b54      	ldr	r3, [pc, #336]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d115      	bne.n	800ae82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ae56:	2301      	movs	r3, #1
 800ae58:	e09a      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d107      	bne.n	800ae72 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800ae62:	4b4e      	ldr	r3, [pc, #312]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f003 0302 	and.w	r3, r3, #2
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d109      	bne.n	800ae82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	e08e      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ae72:	4b4a      	ldr	r3, [pc, #296]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d101      	bne.n	800ae82 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	e086      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ae82:	4b46      	ldr	r3, [pc, #280]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae84:	689b      	ldr	r3, [r3, #8]
 800ae86:	f023 0203 	bic.w	r2, r3, #3
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	4943      	ldr	r1, [pc, #268]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800ae90:	4313      	orrs	r3, r2
 800ae92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ae94:	f7fd fe0c 	bl	8008ab0 <HAL_GetTick>
 800ae98:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ae9a:	e00a      	b.n	800aeb2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ae9c:	f7fd fe08 	bl	8008ab0 <HAL_GetTick>
 800aea0:	4602      	mov	r2, r0
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	1ad3      	subs	r3, r2, r3
 800aea6:	f241 3288 	movw	r2, #5000	; 0x1388
 800aeaa:	4293      	cmp	r3, r2
 800aeac:	d901      	bls.n	800aeb2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	e06e      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aeb2:	4b3a      	ldr	r3, [pc, #232]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	f003 020c 	and.w	r2, r3, #12
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685b      	ldr	r3, [r3, #4]
 800aebe:	009b      	lsls	r3, r3, #2
 800aec0:	429a      	cmp	r2, r3
 800aec2:	d1eb      	bne.n	800ae9c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0302 	and.w	r3, r3, #2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d010      	beq.n	800aef2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	4b31      	ldr	r3, [pc, #196]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800aed6:	689b      	ldr	r3, [r3, #8]
 800aed8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aedc:	429a      	cmp	r2, r3
 800aede:	d208      	bcs.n	800aef2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aee0:	4b2e      	ldr	r3, [pc, #184]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	689b      	ldr	r3, [r3, #8]
 800aeec:	492b      	ldr	r1, [pc, #172]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800aeee:	4313      	orrs	r3, r2
 800aef0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aef2:	4b29      	ldr	r3, [pc, #164]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	f003 0307 	and.w	r3, r3, #7
 800aefa:	683a      	ldr	r2, [r7, #0]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d210      	bcs.n	800af22 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800af00:	4b25      	ldr	r3, [pc, #148]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f023 0207 	bic.w	r2, r3, #7
 800af08:	4923      	ldr	r1, [pc, #140]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800af10:	4b21      	ldr	r3, [pc, #132]	; (800af98 <HAL_RCC_ClockConfig+0x1ec>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	683a      	ldr	r2, [r7, #0]
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d001      	beq.n	800af22 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	e036      	b.n	800af90 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	f003 0304 	and.w	r3, r3, #4
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d008      	beq.n	800af40 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800af2e:	4b1b      	ldr	r3, [pc, #108]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800af30:	689b      	ldr	r3, [r3, #8]
 800af32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	4918      	ldr	r1, [pc, #96]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800af3c:	4313      	orrs	r3, r2
 800af3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 0308 	and.w	r3, r3, #8
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d009      	beq.n	800af60 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800af4c:	4b13      	ldr	r3, [pc, #76]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	691b      	ldr	r3, [r3, #16]
 800af58:	00db      	lsls	r3, r3, #3
 800af5a:	4910      	ldr	r1, [pc, #64]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800af5c:	4313      	orrs	r3, r2
 800af5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800af60:	f000 f824 	bl	800afac <HAL_RCC_GetSysClockFreq>
 800af64:	4602      	mov	r2, r0
 800af66:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <HAL_RCC_ClockConfig+0x1f0>)
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	091b      	lsrs	r3, r3, #4
 800af6c:	f003 030f 	and.w	r3, r3, #15
 800af70:	490b      	ldr	r1, [pc, #44]	; (800afa0 <HAL_RCC_ClockConfig+0x1f4>)
 800af72:	5ccb      	ldrb	r3, [r1, r3]
 800af74:	f003 031f 	and.w	r3, r3, #31
 800af78:	fa22 f303 	lsr.w	r3, r2, r3
 800af7c:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <HAL_RCC_ClockConfig+0x1f8>)
 800af7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800af80:	4b09      	ldr	r3, [pc, #36]	; (800afa8 <HAL_RCC_ClockConfig+0x1fc>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	4618      	mov	r0, r3
 800af86:	f7fd fd43 	bl	8008a10 <HAL_InitTick>
 800af8a:	4603      	mov	r3, r0
 800af8c:	72fb      	strb	r3, [r7, #11]

  return status;
 800af8e:	7afb      	ldrb	r3, [r7, #11]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3710      	adds	r7, #16
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}
 800af98:	40022000 	.word	0x40022000
 800af9c:	40021000 	.word	0x40021000
 800afa0:	08011198 	.word	0x08011198
 800afa4:	200002c4 	.word	0x200002c4
 800afa8:	20000648 	.word	0x20000648

0800afac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800afac:	b480      	push	{r7}
 800afae:	b089      	sub	sp, #36	; 0x24
 800afb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800afb2:	2300      	movs	r3, #0
 800afb4:	61fb      	str	r3, [r7, #28]
 800afb6:	2300      	movs	r3, #0
 800afb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afba:	4b3e      	ldr	r3, [pc, #248]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afbc:	689b      	ldr	r3, [r3, #8]
 800afbe:	f003 030c 	and.w	r3, r3, #12
 800afc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800afc4:	4b3b      	ldr	r3, [pc, #236]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afc6:	68db      	ldr	r3, [r3, #12]
 800afc8:	f003 0303 	and.w	r3, r3, #3
 800afcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d005      	beq.n	800afe0 <HAL_RCC_GetSysClockFreq+0x34>
 800afd4:	693b      	ldr	r3, [r7, #16]
 800afd6:	2b0c      	cmp	r3, #12
 800afd8:	d121      	bne.n	800b01e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d11e      	bne.n	800b01e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800afe0:	4b34      	ldr	r3, [pc, #208]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	f003 0308 	and.w	r3, r3, #8
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d107      	bne.n	800affc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800afec:	4b31      	ldr	r3, [pc, #196]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800afee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800aff2:	0a1b      	lsrs	r3, r3, #8
 800aff4:	f003 030f 	and.w	r3, r3, #15
 800aff8:	61fb      	str	r3, [r7, #28]
 800affa:	e005      	b.n	800b008 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800affc:	4b2d      	ldr	r3, [pc, #180]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	091b      	lsrs	r3, r3, #4
 800b002:	f003 030f 	and.w	r3, r3, #15
 800b006:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800b008:	4a2b      	ldr	r2, [pc, #172]	; (800b0b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b010:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	2b00      	cmp	r3, #0
 800b016:	d10d      	bne.n	800b034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b01c:	e00a      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800b01e:	693b      	ldr	r3, [r7, #16]
 800b020:	2b04      	cmp	r3, #4
 800b022:	d102      	bne.n	800b02a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b024:	4b25      	ldr	r3, [pc, #148]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x110>)
 800b026:	61bb      	str	r3, [r7, #24]
 800b028:	e004      	b.n	800b034 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	2b08      	cmp	r3, #8
 800b02e:	d101      	bne.n	800b034 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b030:	4b23      	ldr	r3, [pc, #140]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b032:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800b034:	693b      	ldr	r3, [r7, #16]
 800b036:	2b0c      	cmp	r3, #12
 800b038:	d134      	bne.n	800b0a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b03a:	4b1e      	ldr	r3, [pc, #120]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	f003 0303 	and.w	r3, r3, #3
 800b042:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	2b02      	cmp	r3, #2
 800b048:	d003      	beq.n	800b052 <HAL_RCC_GetSysClockFreq+0xa6>
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	2b03      	cmp	r3, #3
 800b04e:	d003      	beq.n	800b058 <HAL_RCC_GetSysClockFreq+0xac>
 800b050:	e005      	b.n	800b05e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800b052:	4b1a      	ldr	r3, [pc, #104]	; (800b0bc <HAL_RCC_GetSysClockFreq+0x110>)
 800b054:	617b      	str	r3, [r7, #20]
      break;
 800b056:	e005      	b.n	800b064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800b058:	4b19      	ldr	r3, [pc, #100]	; (800b0c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800b05a:	617b      	str	r3, [r7, #20]
      break;
 800b05c:	e002      	b.n	800b064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800b05e:	69fb      	ldr	r3, [r7, #28]
 800b060:	617b      	str	r3, [r7, #20]
      break;
 800b062:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b064:	4b13      	ldr	r3, [pc, #76]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b066:	68db      	ldr	r3, [r3, #12]
 800b068:	091b      	lsrs	r3, r3, #4
 800b06a:	f003 0307 	and.w	r3, r3, #7
 800b06e:	3301      	adds	r3, #1
 800b070:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800b072:	4b10      	ldr	r3, [pc, #64]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	0a1b      	lsrs	r3, r3, #8
 800b078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b07c:	697a      	ldr	r2, [r7, #20]
 800b07e:	fb02 f203 	mul.w	r2, r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	fbb2 f3f3 	udiv	r3, r2, r3
 800b088:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b08a:	4b0a      	ldr	r3, [pc, #40]	; (800b0b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	0e5b      	lsrs	r3, r3, #25
 800b090:	f003 0303 	and.w	r3, r3, #3
 800b094:	3301      	adds	r3, #1
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800b0a4:	69bb      	ldr	r3, [r7, #24]
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3724      	adds	r7, #36	; 0x24
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	40021000 	.word	0x40021000
 800b0b8:	080111b0 	.word	0x080111b0
 800b0bc:	00f42400 	.word	0x00f42400
 800b0c0:	007a1200 	.word	0x007a1200

0800b0c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b0c4:	b480      	push	{r7}
 800b0c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b0c8:	4b03      	ldr	r3, [pc, #12]	; (800b0d8 <HAL_RCC_GetHCLKFreq+0x14>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
}
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d4:	4770      	bx	lr
 800b0d6:	bf00      	nop
 800b0d8:	200002c4 	.word	0x200002c4

0800b0dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800b0e0:	f7ff fff0 	bl	800b0c4 <HAL_RCC_GetHCLKFreq>
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	4b06      	ldr	r3, [pc, #24]	; (800b100 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b0e8:	689b      	ldr	r3, [r3, #8]
 800b0ea:	0a1b      	lsrs	r3, r3, #8
 800b0ec:	f003 0307 	and.w	r3, r3, #7
 800b0f0:	4904      	ldr	r1, [pc, #16]	; (800b104 <HAL_RCC_GetPCLK1Freq+0x28>)
 800b0f2:	5ccb      	ldrb	r3, [r1, r3]
 800b0f4:	f003 031f 	and.w	r3, r3, #31
 800b0f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b0fc:	4618      	mov	r0, r3
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	40021000 	.word	0x40021000
 800b104:	080111a8 	.word	0x080111a8

0800b108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800b10c:	f7ff ffda 	bl	800b0c4 <HAL_RCC_GetHCLKFreq>
 800b110:	4602      	mov	r2, r0
 800b112:	4b06      	ldr	r3, [pc, #24]	; (800b12c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b114:	689b      	ldr	r3, [r3, #8]
 800b116:	0adb      	lsrs	r3, r3, #11
 800b118:	f003 0307 	and.w	r3, r3, #7
 800b11c:	4904      	ldr	r1, [pc, #16]	; (800b130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800b11e:	5ccb      	ldrb	r3, [r1, r3]
 800b120:	f003 031f 	and.w	r3, r3, #31
 800b124:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b128:	4618      	mov	r0, r3
 800b12a:	bd80      	pop	{r7, pc}
 800b12c:	40021000 	.word	0x40021000
 800b130:	080111a8 	.word	0x080111a8

0800b134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b086      	sub	sp, #24
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800b13c:	2300      	movs	r3, #0
 800b13e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800b140:	4b2a      	ldr	r3, [pc, #168]	; (800b1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800b14c:	f7ff f9f0 	bl	800a530 <HAL_PWREx_GetVoltageRange>
 800b150:	6178      	str	r0, [r7, #20]
 800b152:	e014      	b.n	800b17e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800b154:	4b25      	ldr	r3, [pc, #148]	; (800b1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b158:	4a24      	ldr	r2, [pc, #144]	; (800b1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b15a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b15e:	6593      	str	r3, [r2, #88]	; 0x58
 800b160:	4b22      	ldr	r3, [pc, #136]	; (800b1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b168:	60fb      	str	r3, [r7, #12]
 800b16a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800b16c:	f7ff f9e0 	bl	800a530 <HAL_PWREx_GetVoltageRange>
 800b170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800b172:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b176:	4a1d      	ldr	r2, [pc, #116]	; (800b1ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800b178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b17c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b184:	d10b      	bne.n	800b19e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2b80      	cmp	r3, #128	; 0x80
 800b18a:	d919      	bls.n	800b1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2ba0      	cmp	r3, #160	; 0xa0
 800b190:	d902      	bls.n	800b198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b192:	2302      	movs	r3, #2
 800b194:	613b      	str	r3, [r7, #16]
 800b196:	e013      	b.n	800b1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b198:	2301      	movs	r3, #1
 800b19a:	613b      	str	r3, [r7, #16]
 800b19c:	e010      	b.n	800b1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2b80      	cmp	r3, #128	; 0x80
 800b1a2:	d902      	bls.n	800b1aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	613b      	str	r3, [r7, #16]
 800b1a8:	e00a      	b.n	800b1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b80      	cmp	r3, #128	; 0x80
 800b1ae:	d102      	bne.n	800b1b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800b1b0:	2302      	movs	r3, #2
 800b1b2:	613b      	str	r3, [r7, #16]
 800b1b4:	e004      	b.n	800b1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2b70      	cmp	r3, #112	; 0x70
 800b1ba:	d101      	bne.n	800b1c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800b1bc:	2301      	movs	r3, #1
 800b1be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800b1c0:	4b0b      	ldr	r3, [pc, #44]	; (800b1f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	f023 0207 	bic.w	r2, r3, #7
 800b1c8:	4909      	ldr	r1, [pc, #36]	; (800b1f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800b1d0:	4b07      	ldr	r3, [pc, #28]	; (800b1f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	f003 0307 	and.w	r3, r3, #7
 800b1d8:	693a      	ldr	r2, [r7, #16]
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d001      	beq.n	800b1e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e000      	b.n	800b1e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800b1e2:	2300      	movs	r3, #0
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3718      	adds	r7, #24
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	bd80      	pop	{r7, pc}
 800b1ec:	40021000 	.word	0x40021000
 800b1f0:	40022000 	.word	0x40022000

0800b1f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b086      	sub	sp, #24
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b200:	2300      	movs	r3, #0
 800b202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d041      	beq.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b214:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b218:	d02a      	beq.n	800b270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800b21a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800b21e:	d824      	bhi.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b224:	d008      	beq.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800b226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b22a:	d81e      	bhi.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d00a      	beq.n	800b246 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800b230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b234:	d010      	beq.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800b236:	e018      	b.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b238:	4b86      	ldr	r3, [pc, #536]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	4a85      	ldr	r2, [pc, #532]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b23e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b242:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b244:	e015      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	3304      	adds	r3, #4
 800b24a:	2100      	movs	r1, #0
 800b24c:	4618      	mov	r0, r3
 800b24e:	f000 fabb 	bl	800b7c8 <RCCEx_PLLSAI1_Config>
 800b252:	4603      	mov	r3, r0
 800b254:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b256:	e00c      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3320      	adds	r3, #32
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f000 fba6 	bl	800b9b0 <RCCEx_PLLSAI2_Config>
 800b264:	4603      	mov	r3, r0
 800b266:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800b268:	e003      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b26a:	2301      	movs	r3, #1
 800b26c:	74fb      	strb	r3, [r7, #19]
      break;
 800b26e:	e000      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800b270:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b272:	7cfb      	ldrb	r3, [r7, #19]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10b      	bne.n	800b290 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b278:	4b76      	ldr	r3, [pc, #472]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b27a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b27e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b286:	4973      	ldr	r1, [pc, #460]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b28e:	e001      	b.n	800b294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b290:	7cfb      	ldrb	r3, [r7, #19]
 800b292:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d041      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b2a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2a8:	d02a      	beq.n	800b300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800b2aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2ae:	d824      	bhi.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b2b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2b4:	d008      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800b2b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2ba:	d81e      	bhi.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d00a      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800b2c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b2c4:	d010      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800b2c6:	e018      	b.n	800b2fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800b2c8:	4b62      	ldr	r3, [pc, #392]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2ca:	68db      	ldr	r3, [r3, #12]
 800b2cc:	4a61      	ldr	r2, [pc, #388]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b2ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b2d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b2d4:	e015      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	2100      	movs	r1, #0
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 fa73 	bl	800b7c8 <RCCEx_PLLSAI1_Config>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b2e6:	e00c      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3320      	adds	r3, #32
 800b2ec:	2100      	movs	r1, #0
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f000 fb5e 	bl	800b9b0 <RCCEx_PLLSAI2_Config>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800b2f8:	e003      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	74fb      	strb	r3, [r7, #19]
      break;
 800b2fe:	e000      	b.n	800b302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800b300:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b302:	7cfb      	ldrb	r3, [r7, #19]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d10b      	bne.n	800b320 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800b308:	4b52      	ldr	r3, [pc, #328]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b30a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b30e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b316:	494f      	ldr	r1, [pc, #316]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b318:	4313      	orrs	r3, r2
 800b31a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b31e:	e001      	b.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b320:	7cfb      	ldrb	r3, [r7, #19]
 800b322:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	f000 80a0 	beq.w	800b472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b332:	2300      	movs	r3, #0
 800b334:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b336:	4b47      	ldr	r3, [pc, #284]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b33a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d101      	bne.n	800b346 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800b342:	2301      	movs	r3, #1
 800b344:	e000      	b.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800b346:	2300      	movs	r3, #0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00d      	beq.n	800b368 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b34c:	4b41      	ldr	r3, [pc, #260]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b34e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b350:	4a40      	ldr	r2, [pc, #256]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b356:	6593      	str	r3, [r2, #88]	; 0x58
 800b358:	4b3e      	ldr	r3, [pc, #248]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b35c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b360:	60bb      	str	r3, [r7, #8]
 800b362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b364:	2301      	movs	r3, #1
 800b366:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b368:	4b3b      	ldr	r3, [pc, #236]	; (800b458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a3a      	ldr	r2, [pc, #232]	; (800b458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b36e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b374:	f7fd fb9c 	bl	8008ab0 <HAL_GetTick>
 800b378:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b37a:	e009      	b.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b37c:	f7fd fb98 	bl	8008ab0 <HAL_GetTick>
 800b380:	4602      	mov	r2, r0
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	1ad3      	subs	r3, r2, r3
 800b386:	2b02      	cmp	r3, #2
 800b388:	d902      	bls.n	800b390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800b38a:	2303      	movs	r3, #3
 800b38c:	74fb      	strb	r3, [r7, #19]
        break;
 800b38e:	e005      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800b390:	4b31      	ldr	r3, [pc, #196]	; (800b458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d0ef      	beq.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800b39c:	7cfb      	ldrb	r3, [r7, #19]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d15c      	bne.n	800b45c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800b3a2:	4b2c      	ldr	r3, [pc, #176]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b3a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d01f      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3ba:	697a      	ldr	r2, [r7, #20]
 800b3bc:	429a      	cmp	r2, r3
 800b3be:	d019      	beq.n	800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800b3c0:	4b24      	ldr	r3, [pc, #144]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b3c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b3cc:	4b21      	ldr	r3, [pc, #132]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b3ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3d2:	4a20      	ldr	r2, [pc, #128]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b3d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b3d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b3dc:	4b1d      	ldr	r3, [pc, #116]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b3de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3e2:	4a1c      	ldr	r2, [pc, #112]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b3e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b3e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800b3ec:	4a19      	ldr	r2, [pc, #100]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	f003 0301 	and.w	r3, r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d016      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b3fe:	f7fd fb57 	bl	8008ab0 <HAL_GetTick>
 800b402:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b404:	e00b      	b.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b406:	f7fd fb53 	bl	8008ab0 <HAL_GetTick>
 800b40a:	4602      	mov	r2, r0
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	1ad3      	subs	r3, r2, r3
 800b410:	f241 3288 	movw	r2, #5000	; 0x1388
 800b414:	4293      	cmp	r3, r2
 800b416:	d902      	bls.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800b418:	2303      	movs	r3, #3
 800b41a:	74fb      	strb	r3, [r7, #19]
            break;
 800b41c:	e006      	b.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b41e:	4b0d      	ldr	r3, [pc, #52]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b424:	f003 0302 	and.w	r3, r3, #2
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d0ec      	beq.n	800b406 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800b42c:	7cfb      	ldrb	r3, [r7, #19]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10c      	bne.n	800b44c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b432:	4b08      	ldr	r3, [pc, #32]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b442:	4904      	ldr	r1, [pc, #16]	; (800b454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800b444:	4313      	orrs	r3, r2
 800b446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800b44a:	e009      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b44c:	7cfb      	ldrb	r3, [r7, #19]
 800b44e:	74bb      	strb	r3, [r7, #18]
 800b450:	e006      	b.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800b452:	bf00      	nop
 800b454:	40021000 	.word	0x40021000
 800b458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b45c:	7cfb      	ldrb	r3, [r7, #19]
 800b45e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800b460:	7c7b      	ldrb	r3, [r7, #17]
 800b462:	2b01      	cmp	r3, #1
 800b464:	d105      	bne.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b466:	4b9e      	ldr	r3, [pc, #632]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b46a:	4a9d      	ldr	r2, [pc, #628]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b46c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	f003 0301 	and.w	r3, r3, #1
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d00a      	beq.n	800b494 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800b47e:	4b98      	ldr	r3, [pc, #608]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b484:	f023 0203 	bic.w	r2, r3, #3
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b48c:	4994      	ldr	r1, [pc, #592]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b48e:	4313      	orrs	r3, r2
 800b490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0302 	and.w	r3, r3, #2
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00a      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800b4a0:	4b8f      	ldr	r3, [pc, #572]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4a6:	f023 020c 	bic.w	r2, r3, #12
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b4ae:	498c      	ldr	r1, [pc, #560]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4b0:	4313      	orrs	r3, r2
 800b4b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	f003 0304 	and.w	r3, r3, #4
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d00a      	beq.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800b4c2:	4b87      	ldr	r3, [pc, #540]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d0:	4983      	ldr	r1, [pc, #524]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4d2:	4313      	orrs	r3, r2
 800b4d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0308 	and.w	r3, r3, #8
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00a      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800b4e4:	4b7e      	ldr	r3, [pc, #504]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4f2:	497b      	ldr	r1, [pc, #492]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 0310 	and.w	r3, r3, #16
 800b502:	2b00      	cmp	r3, #0
 800b504:	d00a      	beq.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b506:	4b76      	ldr	r3, [pc, #472]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b50c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b514:	4972      	ldr	r1, [pc, #456]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b516:	4313      	orrs	r3, r2
 800b518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f003 0320 	and.w	r3, r3, #32
 800b524:	2b00      	cmp	r3, #0
 800b526:	d00a      	beq.n	800b53e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b528:	4b6d      	ldr	r3, [pc, #436]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b52a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b52e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b536:	496a      	ldr	r1, [pc, #424]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b538:	4313      	orrs	r3, r2
 800b53a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b546:	2b00      	cmp	r3, #0
 800b548:	d00a      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b54a:	4b65      	ldr	r3, [pc, #404]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b54c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b558:	4961      	ldr	r1, [pc, #388]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b55a:	4313      	orrs	r3, r2
 800b55c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d00a      	beq.n	800b582 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b56c:	4b5c      	ldr	r3, [pc, #368]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b56e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b57a:	4959      	ldr	r1, [pc, #356]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d00a      	beq.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b58e:	4b54      	ldr	r3, [pc, #336]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b59c:	4950      	ldr	r1, [pc, #320]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b59e:	4313      	orrs	r3, r2
 800b5a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d00a      	beq.n	800b5c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b5b0:	4b4b      	ldr	r3, [pc, #300]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b5b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5be:	4948      	ldr	r1, [pc, #288]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b5c0:	4313      	orrs	r3, r2
 800b5c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d00a      	beq.n	800b5e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b5d2:	4b43      	ldr	r3, [pc, #268]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b5d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5e0:	493f      	ldr	r1, [pc, #252]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d028      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b5f4:	4b3a      	ldr	r3, [pc, #232]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b5f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b5fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b602:	4937      	ldr	r1, [pc, #220]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b604:	4313      	orrs	r3, r2
 800b606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b60e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b612:	d106      	bne.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b614:	4b32      	ldr	r3, [pc, #200]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	4a31      	ldr	r2, [pc, #196]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b61a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b61e:	60d3      	str	r3, [r2, #12]
 800b620:	e011      	b.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b62a:	d10c      	bne.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	3304      	adds	r3, #4
 800b630:	2101      	movs	r1, #1
 800b632:	4618      	mov	r0, r3
 800b634:	f000 f8c8 	bl	800b7c8 <RCCEx_PLLSAI1_Config>
 800b638:	4603      	mov	r3, r0
 800b63a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800b63c:	7cfb      	ldrb	r3, [r7, #19]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d001      	beq.n	800b646 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800b642:	7cfb      	ldrb	r3, [r7, #19]
 800b644:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d028      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800b652:	4b23      	ldr	r3, [pc, #140]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b660:	491f      	ldr	r1, [pc, #124]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b662:	4313      	orrs	r3, r2
 800b664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b66c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b670:	d106      	bne.n	800b680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b672:	4b1b      	ldr	r3, [pc, #108]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	4a1a      	ldr	r2, [pc, #104]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b67c:	60d3      	str	r3, [r2, #12]
 800b67e:	e011      	b.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b688:	d10c      	bne.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	3304      	adds	r3, #4
 800b68e:	2101      	movs	r1, #1
 800b690:	4618      	mov	r0, r3
 800b692:	f000 f899 	bl	800b7c8 <RCCEx_PLLSAI1_Config>
 800b696:	4603      	mov	r3, r0
 800b698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b69a:	7cfb      	ldrb	r3, [r7, #19]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d001      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800b6a0:	7cfb      	ldrb	r3, [r7, #19]
 800b6a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d02b      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b6b0:	4b0b      	ldr	r3, [pc, #44]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b6b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6be:	4908      	ldr	r1, [pc, #32]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b6ce:	d109      	bne.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b6d0:	4b03      	ldr	r3, [pc, #12]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6d2:	68db      	ldr	r3, [r3, #12]
 800b6d4:	4a02      	ldr	r2, [pc, #8]	; (800b6e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800b6d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b6da:	60d3      	str	r3, [r2, #12]
 800b6dc:	e014      	b.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800b6de:	bf00      	nop
 800b6e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b6ec:	d10c      	bne.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	3304      	adds	r3, #4
 800b6f2:	2101      	movs	r1, #1
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 f867 	bl	800b7c8 <RCCEx_PLLSAI1_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b6fe:	7cfb      	ldrb	r3, [r7, #19]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d001      	beq.n	800b708 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800b704:	7cfb      	ldrb	r3, [r7, #19]
 800b706:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b710:	2b00      	cmp	r3, #0
 800b712:	d02f      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b714:	4b2b      	ldr	r3, [pc, #172]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b71a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b722:	4928      	ldr	r1, [pc, #160]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b724:	4313      	orrs	r3, r2
 800b726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b72e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b732:	d10d      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	3304      	adds	r3, #4
 800b738:	2102      	movs	r1, #2
 800b73a:	4618      	mov	r0, r3
 800b73c:	f000 f844 	bl	800b7c8 <RCCEx_PLLSAI1_Config>
 800b740:	4603      	mov	r3, r0
 800b742:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b744:	7cfb      	ldrb	r3, [r7, #19]
 800b746:	2b00      	cmp	r3, #0
 800b748:	d014      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b74a:	7cfb      	ldrb	r3, [r7, #19]
 800b74c:	74bb      	strb	r3, [r7, #18]
 800b74e:	e011      	b.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b758:	d10c      	bne.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	3320      	adds	r3, #32
 800b75e:	2102      	movs	r1, #2
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f925 	bl	800b9b0 <RCCEx_PLLSAI2_Config>
 800b766:	4603      	mov	r3, r0
 800b768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800b76a:	7cfb      	ldrb	r3, [r7, #19]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d001      	beq.n	800b774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800b770:	7cfb      	ldrb	r3, [r7, #19]
 800b772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d00a      	beq.n	800b796 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b780:	4b10      	ldr	r3, [pc, #64]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b786:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b78e:	490d      	ldr	r1, [pc, #52]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b790:	4313      	orrs	r3, r2
 800b792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d00b      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b7a2:	4b08      	ldr	r3, [pc, #32]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b7a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b7a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b7b2:	4904      	ldr	r1, [pc, #16]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800b7b4:	4313      	orrs	r3, r2
 800b7b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800b7ba:	7cbb      	ldrb	r3, [r7, #18]
}
 800b7bc:	4618      	mov	r0, r3
 800b7be:	3718      	adds	r7, #24
 800b7c0:	46bd      	mov	sp, r7
 800b7c2:	bd80      	pop	{r7, pc}
 800b7c4:	40021000 	.word	0x40021000

0800b7c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b7d6:	4b75      	ldr	r3, [pc, #468]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f003 0303 	and.w	r3, r3, #3
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d018      	beq.n	800b814 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800b7e2:	4b72      	ldr	r3, [pc, #456]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b7e4:	68db      	ldr	r3, [r3, #12]
 800b7e6:	f003 0203 	and.w	r2, r3, #3
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d10d      	bne.n	800b80e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
       ||
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d009      	beq.n	800b80e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800b7fa:	4b6c      	ldr	r3, [pc, #432]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b7fc:	68db      	ldr	r3, [r3, #12]
 800b7fe:	091b      	lsrs	r3, r3, #4
 800b800:	f003 0307 	and.w	r3, r3, #7
 800b804:	1c5a      	adds	r2, r3, #1
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
       ||
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d047      	beq.n	800b89e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b80e:	2301      	movs	r3, #1
 800b810:	73fb      	strb	r3, [r7, #15]
 800b812:	e044      	b.n	800b89e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d018      	beq.n	800b84e <RCCEx_PLLSAI1_Config+0x86>
 800b81c:	2b03      	cmp	r3, #3
 800b81e:	d825      	bhi.n	800b86c <RCCEx_PLLSAI1_Config+0xa4>
 800b820:	2b01      	cmp	r3, #1
 800b822:	d002      	beq.n	800b82a <RCCEx_PLLSAI1_Config+0x62>
 800b824:	2b02      	cmp	r3, #2
 800b826:	d009      	beq.n	800b83c <RCCEx_PLLSAI1_Config+0x74>
 800b828:	e020      	b.n	800b86c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800b82a:	4b60      	ldr	r3, [pc, #384]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d11d      	bne.n	800b872 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b83a:	e01a      	b.n	800b872 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800b83c:	4b5b      	ldr	r3, [pc, #364]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b844:	2b00      	cmp	r3, #0
 800b846:	d116      	bne.n	800b876 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800b848:	2301      	movs	r3, #1
 800b84a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b84c:	e013      	b.n	800b876 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800b84e:	4b57      	ldr	r3, [pc, #348]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b856:	2b00      	cmp	r3, #0
 800b858:	d10f      	bne.n	800b87a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800b85a:	4b54      	ldr	r3, [pc, #336]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b862:	2b00      	cmp	r3, #0
 800b864:	d109      	bne.n	800b87a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800b866:	2301      	movs	r3, #1
 800b868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b86a:	e006      	b.n	800b87a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800b86c:	2301      	movs	r3, #1
 800b86e:	73fb      	strb	r3, [r7, #15]
      break;
 800b870:	e004      	b.n	800b87c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b872:	bf00      	nop
 800b874:	e002      	b.n	800b87c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b876:	bf00      	nop
 800b878:	e000      	b.n	800b87c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800b87a:	bf00      	nop
    }

    if(status == HAL_OK)
 800b87c:	7bfb      	ldrb	r3, [r7, #15]
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d10d      	bne.n	800b89e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800b882:	4b4a      	ldr	r3, [pc, #296]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6819      	ldr	r1, [r3, #0]
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	685b      	ldr	r3, [r3, #4]
 800b892:	3b01      	subs	r3, #1
 800b894:	011b      	lsls	r3, r3, #4
 800b896:	430b      	orrs	r3, r1
 800b898:	4944      	ldr	r1, [pc, #272]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b89a:	4313      	orrs	r3, r2
 800b89c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800b89e:	7bfb      	ldrb	r3, [r7, #15]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d17d      	bne.n	800b9a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800b8a4:	4b41      	ldr	r3, [pc, #260]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	4a40      	ldr	r2, [pc, #256]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b8aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b8ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8b0:	f7fd f8fe 	bl	8008ab0 <HAL_GetTick>
 800b8b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b8b6:	e009      	b.n	800b8cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b8b8:	f7fd f8fa 	bl	8008ab0 <HAL_GetTick>
 800b8bc:	4602      	mov	r2, r0
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	1ad3      	subs	r3, r2, r3
 800b8c2:	2b02      	cmp	r3, #2
 800b8c4:	d902      	bls.n	800b8cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800b8c6:	2303      	movs	r3, #3
 800b8c8:	73fb      	strb	r3, [r7, #15]
        break;
 800b8ca:	e005      	b.n	800b8d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800b8cc:	4b37      	ldr	r3, [pc, #220]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d1ef      	bne.n	800b8b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d160      	bne.n	800b9a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d111      	bne.n	800b908 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b8e4:	4b31      	ldr	r3, [pc, #196]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800b8ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	6892      	ldr	r2, [r2, #8]
 800b8f4:	0211      	lsls	r1, r2, #8
 800b8f6:	687a      	ldr	r2, [r7, #4]
 800b8f8:	68d2      	ldr	r2, [r2, #12]
 800b8fa:	0912      	lsrs	r2, r2, #4
 800b8fc:	0452      	lsls	r2, r2, #17
 800b8fe:	430a      	orrs	r2, r1
 800b900:	492a      	ldr	r1, [pc, #168]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b902:	4313      	orrs	r3, r2
 800b904:	610b      	str	r3, [r1, #16]
 800b906:	e027      	b.n	800b958 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	2b01      	cmp	r3, #1
 800b90c:	d112      	bne.n	800b934 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b90e:	4b27      	ldr	r3, [pc, #156]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800b916:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b91a:	687a      	ldr	r2, [r7, #4]
 800b91c:	6892      	ldr	r2, [r2, #8]
 800b91e:	0211      	lsls	r1, r2, #8
 800b920:	687a      	ldr	r2, [r7, #4]
 800b922:	6912      	ldr	r2, [r2, #16]
 800b924:	0852      	lsrs	r2, r2, #1
 800b926:	3a01      	subs	r2, #1
 800b928:	0552      	lsls	r2, r2, #21
 800b92a:	430a      	orrs	r2, r1
 800b92c:	491f      	ldr	r1, [pc, #124]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b92e:	4313      	orrs	r3, r2
 800b930:	610b      	str	r3, [r1, #16]
 800b932:	e011      	b.n	800b958 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800b934:	4b1d      	ldr	r3, [pc, #116]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b936:	691b      	ldr	r3, [r3, #16]
 800b938:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800b93c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800b940:	687a      	ldr	r2, [r7, #4]
 800b942:	6892      	ldr	r2, [r2, #8]
 800b944:	0211      	lsls	r1, r2, #8
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	6952      	ldr	r2, [r2, #20]
 800b94a:	0852      	lsrs	r2, r2, #1
 800b94c:	3a01      	subs	r2, #1
 800b94e:	0652      	lsls	r2, r2, #25
 800b950:	430a      	orrs	r2, r1
 800b952:	4916      	ldr	r1, [pc, #88]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b954:	4313      	orrs	r3, r2
 800b956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800b958:	4b14      	ldr	r3, [pc, #80]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	4a13      	ldr	r2, [pc, #76]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b95e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b964:	f7fd f8a4 	bl	8008ab0 <HAL_GetTick>
 800b968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b96a:	e009      	b.n	800b980 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800b96c:	f7fd f8a0 	bl	8008ab0 <HAL_GetTick>
 800b970:	4602      	mov	r2, r0
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	1ad3      	subs	r3, r2, r3
 800b976:	2b02      	cmp	r3, #2
 800b978:	d902      	bls.n	800b980 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800b97a:	2303      	movs	r3, #3
 800b97c:	73fb      	strb	r3, [r7, #15]
          break;
 800b97e:	e005      	b.n	800b98c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800b980:	4b0a      	ldr	r3, [pc, #40]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d0ef      	beq.n	800b96c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800b98c:	7bfb      	ldrb	r3, [r7, #15]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d106      	bne.n	800b9a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800b992:	4b06      	ldr	r3, [pc, #24]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b994:	691a      	ldr	r2, [r3, #16]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	4904      	ldr	r1, [pc, #16]	; (800b9ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800b99c:	4313      	orrs	r3, r2
 800b99e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800b9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	40021000 	.word	0x40021000

0800b9b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b084      	sub	sp, #16
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
 800b9b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800b9be:	4b6a      	ldr	r3, [pc, #424]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d018      	beq.n	800b9fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800b9ca:	4b67      	ldr	r3, [pc, #412]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9cc:	68db      	ldr	r3, [r3, #12]
 800b9ce:	f003 0203 	and.w	r2, r3, #3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d10d      	bne.n	800b9f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	681b      	ldr	r3, [r3, #0]
       ||
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d009      	beq.n	800b9f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800b9e2:	4b61      	ldr	r3, [pc, #388]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	091b      	lsrs	r3, r3, #4
 800b9e8:	f003 0307 	and.w	r3, r3, #7
 800b9ec:	1c5a      	adds	r2, r3, #1
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	685b      	ldr	r3, [r3, #4]
       ||
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d047      	beq.n	800ba86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800b9f6:	2301      	movs	r3, #1
 800b9f8:	73fb      	strb	r3, [r7, #15]
 800b9fa:	e044      	b.n	800ba86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b03      	cmp	r3, #3
 800ba02:	d018      	beq.n	800ba36 <RCCEx_PLLSAI2_Config+0x86>
 800ba04:	2b03      	cmp	r3, #3
 800ba06:	d825      	bhi.n	800ba54 <RCCEx_PLLSAI2_Config+0xa4>
 800ba08:	2b01      	cmp	r3, #1
 800ba0a:	d002      	beq.n	800ba12 <RCCEx_PLLSAI2_Config+0x62>
 800ba0c:	2b02      	cmp	r3, #2
 800ba0e:	d009      	beq.n	800ba24 <RCCEx_PLLSAI2_Config+0x74>
 800ba10:	e020      	b.n	800ba54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800ba12:	4b55      	ldr	r3, [pc, #340]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	f003 0302 	and.w	r3, r3, #2
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d11d      	bne.n	800ba5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800ba1e:	2301      	movs	r3, #1
 800ba20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba22:	e01a      	b.n	800ba5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800ba24:	4b50      	ldr	r3, [pc, #320]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d116      	bne.n	800ba5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800ba30:	2301      	movs	r3, #1
 800ba32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba34:	e013      	b.n	800ba5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800ba36:	4b4c      	ldr	r3, [pc, #304]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d10f      	bne.n	800ba62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800ba42:	4b49      	ldr	r3, [pc, #292]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d109      	bne.n	800ba62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800ba4e:	2301      	movs	r3, #1
 800ba50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba52:	e006      	b.n	800ba62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800ba54:	2301      	movs	r3, #1
 800ba56:	73fb      	strb	r3, [r7, #15]
      break;
 800ba58:	e004      	b.n	800ba64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ba5a:	bf00      	nop
 800ba5c:	e002      	b.n	800ba64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ba5e:	bf00      	nop
 800ba60:	e000      	b.n	800ba64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800ba62:	bf00      	nop
    }

    if(status == HAL_OK)
 800ba64:	7bfb      	ldrb	r3, [r7, #15]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d10d      	bne.n	800ba86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800ba6a:	4b3f      	ldr	r3, [pc, #252]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6819      	ldr	r1, [r3, #0]
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	011b      	lsls	r3, r3, #4
 800ba7e:	430b      	orrs	r3, r1
 800ba80:	4939      	ldr	r1, [pc, #228]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba82:	4313      	orrs	r3, r2
 800ba84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800ba86:	7bfb      	ldrb	r3, [r7, #15]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d167      	bne.n	800bb5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800ba8c:	4b36      	ldr	r3, [pc, #216]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	4a35      	ldr	r2, [pc, #212]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800ba92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ba96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba98:	f7fd f80a 	bl	8008ab0 <HAL_GetTick>
 800ba9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800ba9e:	e009      	b.n	800bab4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800baa0:	f7fd f806 	bl	8008ab0 <HAL_GetTick>
 800baa4:	4602      	mov	r2, r0
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	2b02      	cmp	r3, #2
 800baac:	d902      	bls.n	800bab4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	73fb      	strb	r3, [r7, #15]
        break;
 800bab2:	e005      	b.n	800bac0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800bab4:	4b2c      	ldr	r3, [pc, #176]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d1ef      	bne.n	800baa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800bac0:	7bfb      	ldrb	r3, [r7, #15]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d14a      	bne.n	800bb5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800bac6:	683b      	ldr	r3, [r7, #0]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d111      	bne.n	800baf0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800bacc:	4b26      	ldr	r3, [pc, #152]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bace:	695b      	ldr	r3, [r3, #20]
 800bad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800bad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bad8:	687a      	ldr	r2, [r7, #4]
 800bada:	6892      	ldr	r2, [r2, #8]
 800badc:	0211      	lsls	r1, r2, #8
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	68d2      	ldr	r2, [r2, #12]
 800bae2:	0912      	lsrs	r2, r2, #4
 800bae4:	0452      	lsls	r2, r2, #17
 800bae6:	430a      	orrs	r2, r1
 800bae8:	491f      	ldr	r1, [pc, #124]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800baea:	4313      	orrs	r3, r2
 800baec:	614b      	str	r3, [r1, #20]
 800baee:	e011      	b.n	800bb14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800baf0:	4b1d      	ldr	r3, [pc, #116]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800baf2:	695b      	ldr	r3, [r3, #20]
 800baf4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800baf8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800bafc:	687a      	ldr	r2, [r7, #4]
 800bafe:	6892      	ldr	r2, [r2, #8]
 800bb00:	0211      	lsls	r1, r2, #8
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	6912      	ldr	r2, [r2, #16]
 800bb06:	0852      	lsrs	r2, r2, #1
 800bb08:	3a01      	subs	r2, #1
 800bb0a:	0652      	lsls	r2, r2, #25
 800bb0c:	430a      	orrs	r2, r1
 800bb0e:	4916      	ldr	r1, [pc, #88]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bb10:	4313      	orrs	r3, r2
 800bb12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800bb14:	4b14      	ldr	r3, [pc, #80]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	4a13      	ldr	r2, [pc, #76]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bb1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bb20:	f7fc ffc6 	bl	8008ab0 <HAL_GetTick>
 800bb24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bb26:	e009      	b.n	800bb3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800bb28:	f7fc ffc2 	bl	8008ab0 <HAL_GetTick>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	68bb      	ldr	r3, [r7, #8]
 800bb30:	1ad3      	subs	r3, r2, r3
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d902      	bls.n	800bb3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800bb36:	2303      	movs	r3, #3
 800bb38:	73fb      	strb	r3, [r7, #15]
          break;
 800bb3a:	e005      	b.n	800bb48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800bb3c:	4b0a      	ldr	r3, [pc, #40]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0ef      	beq.n	800bb28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800bb48:	7bfb      	ldrb	r3, [r7, #15]
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d106      	bne.n	800bb5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800bb4e:	4b06      	ldr	r3, [pc, #24]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bb50:	695a      	ldr	r2, [r3, #20]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	695b      	ldr	r3, [r3, #20]
 800bb56:	4904      	ldr	r1, [pc, #16]	; (800bb68 <RCCEx_PLLSAI2_Config+0x1b8>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800bb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb5e:	4618      	mov	r0, r3
 800bb60:	3710      	adds	r7, #16
 800bb62:	46bd      	mov	sp, r7
 800bb64:	bd80      	pop	{r7, pc}
 800bb66:	bf00      	nop
 800bb68:	40021000 	.word	0x40021000

0800bb6c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d101      	bne.n	800bb7e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e049      	b.n	800bc12 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bb84:	b2db      	uxtb	r3, r3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d106      	bne.n	800bb98 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f7f6 fb42 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2202      	movs	r2, #2
 800bb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681a      	ldr	r2, [r3, #0]
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	3304      	adds	r3, #4
 800bba8:	4619      	mov	r1, r3
 800bbaa:	4610      	mov	r0, r2
 800bbac:	f000 fa56 	bl	800c05c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2201      	movs	r2, #1
 800bbb4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	2201      	movs	r2, #1
 800bbbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2201      	movs	r2, #1
 800bbcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2201      	movs	r2, #1
 800bbd4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2201      	movs	r2, #1
 800bbdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2201      	movs	r2, #1
 800bbe4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2201      	movs	r2, #1
 800bbf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	2201      	movs	r2, #1
 800bc04:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	2201      	movs	r2, #1
 800bc0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bc10:	2300      	movs	r3, #0
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	3708      	adds	r7, #8
 800bc16:	46bd      	mov	sp, r7
 800bc18:	bd80      	pop	{r7, pc}
	...

0800bc1c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d001      	beq.n	800bc34 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800bc30:	2301      	movs	r3, #1
 800bc32:	e047      	b.n	800bcc4 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	2202      	movs	r2, #2
 800bc38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	4a23      	ldr	r2, [pc, #140]	; (800bcd0 <HAL_TIM_Base_Start+0xb4>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d01d      	beq.n	800bc82 <HAL_TIM_Base_Start+0x66>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc4e:	d018      	beq.n	800bc82 <HAL_TIM_Base_Start+0x66>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	4a1f      	ldr	r2, [pc, #124]	; (800bcd4 <HAL_TIM_Base_Start+0xb8>)
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d013      	beq.n	800bc82 <HAL_TIM_Base_Start+0x66>
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	4a1e      	ldr	r2, [pc, #120]	; (800bcd8 <HAL_TIM_Base_Start+0xbc>)
 800bc60:	4293      	cmp	r3, r2
 800bc62:	d00e      	beq.n	800bc82 <HAL_TIM_Base_Start+0x66>
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	4a1c      	ldr	r2, [pc, #112]	; (800bcdc <HAL_TIM_Base_Start+0xc0>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d009      	beq.n	800bc82 <HAL_TIM_Base_Start+0x66>
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	4a1b      	ldr	r2, [pc, #108]	; (800bce0 <HAL_TIM_Base_Start+0xc4>)
 800bc74:	4293      	cmp	r3, r2
 800bc76:	d004      	beq.n	800bc82 <HAL_TIM_Base_Start+0x66>
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	4a19      	ldr	r2, [pc, #100]	; (800bce4 <HAL_TIM_Base_Start+0xc8>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d115      	bne.n	800bcae <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	689a      	ldr	r2, [r3, #8]
 800bc88:	4b17      	ldr	r3, [pc, #92]	; (800bce8 <HAL_TIM_Base_Start+0xcc>)
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b06      	cmp	r3, #6
 800bc92:	d015      	beq.n	800bcc0 <HAL_TIM_Base_Start+0xa4>
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc9a:	d011      	beq.n	800bcc0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f042 0201 	orr.w	r2, r2, #1
 800bcaa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcac:	e008      	b.n	800bcc0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	681a      	ldr	r2, [r3, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f042 0201 	orr.w	r2, r2, #1
 800bcbc:	601a      	str	r2, [r3, #0]
 800bcbe:	e000      	b.n	800bcc2 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bcc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr
 800bcd0:	40012c00 	.word	0x40012c00
 800bcd4:	40000400 	.word	0x40000400
 800bcd8:	40000800 	.word	0x40000800
 800bcdc:	40000c00 	.word	0x40000c00
 800bce0:	40013400 	.word	0x40013400
 800bce4:	40014000 	.word	0x40014000
 800bce8:	00010007 	.word	0x00010007

0800bcec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcfa:	b2db      	uxtb	r3, r3
 800bcfc:	2b01      	cmp	r3, #1
 800bcfe:	d001      	beq.n	800bd04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e04f      	b.n	800bda4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2202      	movs	r2, #2
 800bd08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	68da      	ldr	r2, [r3, #12]
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f042 0201 	orr.w	r2, r2, #1
 800bd1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	4a23      	ldr	r2, [pc, #140]	; (800bdb0 <HAL_TIM_Base_Start_IT+0xc4>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d01d      	beq.n	800bd62 <HAL_TIM_Base_Start_IT+0x76>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd2e:	d018      	beq.n	800bd62 <HAL_TIM_Base_Start_IT+0x76>
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	4a1f      	ldr	r2, [pc, #124]	; (800bdb4 <HAL_TIM_Base_Start_IT+0xc8>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d013      	beq.n	800bd62 <HAL_TIM_Base_Start_IT+0x76>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	4a1e      	ldr	r2, [pc, #120]	; (800bdb8 <HAL_TIM_Base_Start_IT+0xcc>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d00e      	beq.n	800bd62 <HAL_TIM_Base_Start_IT+0x76>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a1c      	ldr	r2, [pc, #112]	; (800bdbc <HAL_TIM_Base_Start_IT+0xd0>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d009      	beq.n	800bd62 <HAL_TIM_Base_Start_IT+0x76>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	4a1b      	ldr	r2, [pc, #108]	; (800bdc0 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd54:	4293      	cmp	r3, r2
 800bd56:	d004      	beq.n	800bd62 <HAL_TIM_Base_Start_IT+0x76>
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	4a19      	ldr	r2, [pc, #100]	; (800bdc4 <HAL_TIM_Base_Start_IT+0xd8>)
 800bd5e:	4293      	cmp	r3, r2
 800bd60:	d115      	bne.n	800bd8e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	4b17      	ldr	r3, [pc, #92]	; (800bdc8 <HAL_TIM_Base_Start_IT+0xdc>)
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b06      	cmp	r3, #6
 800bd72:	d015      	beq.n	800bda0 <HAL_TIM_Base_Start_IT+0xb4>
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd7a:	d011      	beq.n	800bda0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	f042 0201 	orr.w	r2, r2, #1
 800bd8a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd8c:	e008      	b.n	800bda0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f042 0201 	orr.w	r2, r2, #1
 800bd9c:	601a      	str	r2, [r3, #0]
 800bd9e:	e000      	b.n	800bda2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bda0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bda2:	2300      	movs	r3, #0
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3714      	adds	r7, #20
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdae:	4770      	bx	lr
 800bdb0:	40012c00 	.word	0x40012c00
 800bdb4:	40000400 	.word	0x40000400
 800bdb8:	40000800 	.word	0x40000800
 800bdbc:	40000c00 	.word	0x40000c00
 800bdc0:	40013400 	.word	0x40013400
 800bdc4:	40014000 	.word	0x40014000
 800bdc8:	00010007 	.word	0x00010007

0800bdcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	691b      	ldr	r3, [r3, #16]
 800bdda:	f003 0302 	and.w	r3, r3, #2
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d122      	bne.n	800be28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	68db      	ldr	r3, [r3, #12]
 800bde8:	f003 0302 	and.w	r3, r3, #2
 800bdec:	2b02      	cmp	r3, #2
 800bdee:	d11b      	bne.n	800be28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	f06f 0202 	mvn.w	r2, #2
 800bdf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2201      	movs	r2, #1
 800bdfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	699b      	ldr	r3, [r3, #24]
 800be06:	f003 0303 	and.w	r3, r3, #3
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d003      	beq.n	800be16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f000 f905 	bl	800c01e <HAL_TIM_IC_CaptureCallback>
 800be14:	e005      	b.n	800be22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be16:	6878      	ldr	r0, [r7, #4]
 800be18:	f000 f8f7 	bl	800c00a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 f908 	bl	800c032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2200      	movs	r2, #0
 800be26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	f003 0304 	and.w	r3, r3, #4
 800be32:	2b04      	cmp	r3, #4
 800be34:	d122      	bne.n	800be7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68db      	ldr	r3, [r3, #12]
 800be3c:	f003 0304 	and.w	r3, r3, #4
 800be40:	2b04      	cmp	r3, #4
 800be42:	d11b      	bne.n	800be7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	f06f 0204 	mvn.w	r2, #4
 800be4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	2202      	movs	r2, #2
 800be52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	699b      	ldr	r3, [r3, #24]
 800be5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d003      	beq.n	800be6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f000 f8db 	bl	800c01e <HAL_TIM_IC_CaptureCallback>
 800be68:	e005      	b.n	800be76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 f8cd 	bl	800c00a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f8de 	bl	800c032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2200      	movs	r2, #0
 800be7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0308 	and.w	r3, r3, #8
 800be86:	2b08      	cmp	r3, #8
 800be88:	d122      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	f003 0308 	and.w	r3, r3, #8
 800be94:	2b08      	cmp	r3, #8
 800be96:	d11b      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f06f 0208 	mvn.w	r2, #8
 800bea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2204      	movs	r2, #4
 800bea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	69db      	ldr	r3, [r3, #28]
 800beae:	f003 0303 	and.w	r3, r3, #3
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f8b1 	bl	800c01e <HAL_TIM_IC_CaptureCallback>
 800bebc:	e005      	b.n	800beca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f8a3 	bl	800c00a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f8b4 	bl	800c032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	f003 0310 	and.w	r3, r3, #16
 800beda:	2b10      	cmp	r3, #16
 800bedc:	d122      	bne.n	800bf24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0310 	and.w	r3, r3, #16
 800bee8:	2b10      	cmp	r3, #16
 800beea:	d11b      	bne.n	800bf24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f06f 0210 	mvn.w	r2, #16
 800bef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2208      	movs	r2, #8
 800befa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	69db      	ldr	r3, [r3, #28]
 800bf02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f887 	bl	800c01e <HAL_TIM_IC_CaptureCallback>
 800bf10:	e005      	b.n	800bf1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f879 	bl	800c00a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f88a 	bl	800c032 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	f003 0301 	and.w	r3, r3, #1
 800bf2e:	2b01      	cmp	r3, #1
 800bf30:	d10e      	bne.n	800bf50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d107      	bne.n	800bf50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0201 	mvn.w	r2, #1
 800bf48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7f6 f880 	bl	8002050 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	691b      	ldr	r3, [r3, #16]
 800bf56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf5a:	2b80      	cmp	r3, #128	; 0x80
 800bf5c:	d10e      	bne.n	800bf7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	68db      	ldr	r3, [r3, #12]
 800bf64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf68:	2b80      	cmp	r3, #128	; 0x80
 800bf6a:	d107      	bne.n	800bf7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bf74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f000 f914 	bl	800c1a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf8a:	d10e      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf96:	2b80      	cmp	r3, #128	; 0x80
 800bf98:	d107      	bne.n	800bfaa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bfa2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f907 	bl	800c1b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	691b      	ldr	r3, [r3, #16]
 800bfb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfb4:	2b40      	cmp	r3, #64	; 0x40
 800bfb6:	d10e      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68db      	ldr	r3, [r3, #12]
 800bfbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfc2:	2b40      	cmp	r3, #64	; 0x40
 800bfc4:	d107      	bne.n	800bfd6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bfce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bfd0:	6878      	ldr	r0, [r7, #4]
 800bfd2:	f000 f838 	bl	800c046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	691b      	ldr	r3, [r3, #16]
 800bfdc:	f003 0320 	and.w	r3, r3, #32
 800bfe0:	2b20      	cmp	r3, #32
 800bfe2:	d10e      	bne.n	800c002 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	68db      	ldr	r3, [r3, #12]
 800bfea:	f003 0320 	and.w	r3, r3, #32
 800bfee:	2b20      	cmp	r3, #32
 800bff0:	d107      	bne.n	800c002 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f06f 0220 	mvn.w	r2, #32
 800bffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 f8c7 	bl	800c190 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c002:	bf00      	nop
 800c004:	3708      	adds	r7, #8
 800c006:	46bd      	mov	sp, r7
 800c008:	bd80      	pop	{r7, pc}

0800c00a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c00a:	b480      	push	{r7}
 800c00c:	b083      	sub	sp, #12
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c012:	bf00      	nop
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr

0800c01e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c030:	4770      	bx	lr

0800c032 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c032:	b480      	push	{r7}
 800c034:	b083      	sub	sp, #12
 800c036:	af00      	add	r7, sp, #0
 800c038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c03a:	bf00      	nop
 800c03c:	370c      	adds	r7, #12
 800c03e:	46bd      	mov	sp, r7
 800c040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c044:	4770      	bx	lr

0800c046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c046:	b480      	push	{r7}
 800c048:	b083      	sub	sp, #12
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c04e:	bf00      	nop
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr
	...

0800c05c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]
 800c064:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	4a40      	ldr	r2, [pc, #256]	; (800c170 <TIM_Base_SetConfig+0x114>)
 800c070:	4293      	cmp	r3, r2
 800c072:	d013      	beq.n	800c09c <TIM_Base_SetConfig+0x40>
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c07a:	d00f      	beq.n	800c09c <TIM_Base_SetConfig+0x40>
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a3d      	ldr	r2, [pc, #244]	; (800c174 <TIM_Base_SetConfig+0x118>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d00b      	beq.n	800c09c <TIM_Base_SetConfig+0x40>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4a3c      	ldr	r2, [pc, #240]	; (800c178 <TIM_Base_SetConfig+0x11c>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d007      	beq.n	800c09c <TIM_Base_SetConfig+0x40>
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	4a3b      	ldr	r2, [pc, #236]	; (800c17c <TIM_Base_SetConfig+0x120>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d003      	beq.n	800c09c <TIM_Base_SetConfig+0x40>
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	4a3a      	ldr	r2, [pc, #232]	; (800c180 <TIM_Base_SetConfig+0x124>)
 800c098:	4293      	cmp	r3, r2
 800c09a:	d108      	bne.n	800c0ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c0a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	68fa      	ldr	r2, [r7, #12]
 800c0aa:	4313      	orrs	r3, r2
 800c0ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	4a2f      	ldr	r2, [pc, #188]	; (800c170 <TIM_Base_SetConfig+0x114>)
 800c0b2:	4293      	cmp	r3, r2
 800c0b4:	d01f      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c0bc:	d01b      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	4a2c      	ldr	r2, [pc, #176]	; (800c174 <TIM_Base_SetConfig+0x118>)
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d017      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	4a2b      	ldr	r2, [pc, #172]	; (800c178 <TIM_Base_SetConfig+0x11c>)
 800c0ca:	4293      	cmp	r3, r2
 800c0cc:	d013      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	4a2a      	ldr	r2, [pc, #168]	; (800c17c <TIM_Base_SetConfig+0x120>)
 800c0d2:	4293      	cmp	r3, r2
 800c0d4:	d00f      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	4a29      	ldr	r2, [pc, #164]	; (800c180 <TIM_Base_SetConfig+0x124>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d00b      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	4a28      	ldr	r2, [pc, #160]	; (800c184 <TIM_Base_SetConfig+0x128>)
 800c0e2:	4293      	cmp	r3, r2
 800c0e4:	d007      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	4a27      	ldr	r2, [pc, #156]	; (800c188 <TIM_Base_SetConfig+0x12c>)
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	d003      	beq.n	800c0f6 <TIM_Base_SetConfig+0x9a>
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	4a26      	ldr	r2, [pc, #152]	; (800c18c <TIM_Base_SetConfig+0x130>)
 800c0f2:	4293      	cmp	r3, r2
 800c0f4:	d108      	bne.n	800c108 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c0fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0fe:	683b      	ldr	r3, [r7, #0]
 800c100:	68db      	ldr	r3, [r3, #12]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	4313      	orrs	r3, r2
 800c106:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	695b      	ldr	r3, [r3, #20]
 800c112:	4313      	orrs	r3, r2
 800c114:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	689a      	ldr	r2, [r3, #8]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	681a      	ldr	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a10      	ldr	r2, [pc, #64]	; (800c170 <TIM_Base_SetConfig+0x114>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d00f      	beq.n	800c154 <TIM_Base_SetConfig+0xf8>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	4a12      	ldr	r2, [pc, #72]	; (800c180 <TIM_Base_SetConfig+0x124>)
 800c138:	4293      	cmp	r3, r2
 800c13a:	d00b      	beq.n	800c154 <TIM_Base_SetConfig+0xf8>
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	4a11      	ldr	r2, [pc, #68]	; (800c184 <TIM_Base_SetConfig+0x128>)
 800c140:	4293      	cmp	r3, r2
 800c142:	d007      	beq.n	800c154 <TIM_Base_SetConfig+0xf8>
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	4a10      	ldr	r2, [pc, #64]	; (800c188 <TIM_Base_SetConfig+0x12c>)
 800c148:	4293      	cmp	r3, r2
 800c14a:	d003      	beq.n	800c154 <TIM_Base_SetConfig+0xf8>
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	4a0f      	ldr	r2, [pc, #60]	; (800c18c <TIM_Base_SetConfig+0x130>)
 800c150:	4293      	cmp	r3, r2
 800c152:	d103      	bne.n	800c15c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	691a      	ldr	r2, [r3, #16]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2201      	movs	r2, #1
 800c160:	615a      	str	r2, [r3, #20]
}
 800c162:	bf00      	nop
 800c164:	3714      	adds	r7, #20
 800c166:	46bd      	mov	sp, r7
 800c168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16c:	4770      	bx	lr
 800c16e:	bf00      	nop
 800c170:	40012c00 	.word	0x40012c00
 800c174:	40000400 	.word	0x40000400
 800c178:	40000800 	.word	0x40000800
 800c17c:	40000c00 	.word	0x40000c00
 800c180:	40013400 	.word	0x40013400
 800c184:	40014000 	.word	0x40014000
 800c188:	40014400 	.word	0x40014400
 800c18c:	40014800 	.word	0x40014800

0800c190 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b083      	sub	sp, #12
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c1c0:	bf00      	nop
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr

0800c1cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b082      	sub	sp, #8
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e040      	b.n	800c260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d106      	bne.n	800c1f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f7f6 f84e 	bl	8002290 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2224      	movs	r2, #36	; 0x24
 800c1f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	681a      	ldr	r2, [r3, #0]
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	f022 0201 	bic.w	r2, r2, #1
 800c208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c20a:	6878      	ldr	r0, [r7, #4]
 800c20c:	f000 fc86 	bl	800cb1c <UART_SetConfig>
 800c210:	4603      	mov	r3, r0
 800c212:	2b01      	cmp	r3, #1
 800c214:	d101      	bne.n	800c21a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800c216:	2301      	movs	r3, #1
 800c218:	e022      	b.n	800c260 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d002      	beq.n	800c228 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 ff04 	bl	800d030 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	689a      	ldr	r2, [r3, #8]
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	681a      	ldr	r2, [r3, #0]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	f042 0201 	orr.w	r2, r2, #1
 800c256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 ff8b 	bl	800d174 <UART_CheckIdleState>
 800c25e:	4603      	mov	r3, r0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b08a      	sub	sp, #40	; 0x28
 800c26c:	af02      	add	r7, sp, #8
 800c26e:	60f8      	str	r0, [r7, #12]
 800c270:	60b9      	str	r1, [r7, #8]
 800c272:	603b      	str	r3, [r7, #0]
 800c274:	4613      	mov	r3, r2
 800c276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c27c:	2b20      	cmp	r3, #32
 800c27e:	f040 8082 	bne.w	800c386 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d002      	beq.n	800c28e <HAL_UART_Transmit+0x26>
 800c288:	88fb      	ldrh	r3, [r7, #6]
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d101      	bne.n	800c292 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c28e:	2301      	movs	r3, #1
 800c290:	e07a      	b.n	800c388 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800c292:	68fb      	ldr	r3, [r7, #12]
 800c294:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_UART_Transmit+0x38>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e073      	b.n	800c388 <HAL_UART_Transmit+0x120>
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2221      	movs	r2, #33	; 0x21
 800c2b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c2b6:	f7fc fbfb 	bl	8008ab0 <HAL_GetTick>
 800c2ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	88fa      	ldrh	r2, [r7, #6]
 800c2c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	88fa      	ldrh	r2, [r7, #6]
 800c2c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	689b      	ldr	r3, [r3, #8]
 800c2d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c2d4:	d108      	bne.n	800c2e8 <HAL_UART_Transmit+0x80>
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	691b      	ldr	r3, [r3, #16]
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d104      	bne.n	800c2e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800c2de:	2300      	movs	r3, #0
 800c2e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	61bb      	str	r3, [r7, #24]
 800c2e6:	e003      	b.n	800c2f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800c2e8:	68bb      	ldr	r3, [r7, #8]
 800c2ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800c2f8:	e02d      	b.n	800c356 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	9300      	str	r3, [sp, #0]
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	2200      	movs	r2, #0
 800c302:	2180      	movs	r1, #128	; 0x80
 800c304:	68f8      	ldr	r0, [r7, #12]
 800c306:	f000 ff7e 	bl	800d206 <UART_WaitOnFlagUntilTimeout>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d001      	beq.n	800c314 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800c310:	2303      	movs	r3, #3
 800c312:	e039      	b.n	800c388 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800c314:	69fb      	ldr	r3, [r7, #28]
 800c316:	2b00      	cmp	r3, #0
 800c318:	d10b      	bne.n	800c332 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	881a      	ldrh	r2, [r3, #0]
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c326:	b292      	uxth	r2, r2
 800c328:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800c32a:	69bb      	ldr	r3, [r7, #24]
 800c32c:	3302      	adds	r3, #2
 800c32e:	61bb      	str	r3, [r7, #24]
 800c330:	e008      	b.n	800c344 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c332:	69fb      	ldr	r3, [r7, #28]
 800c334:	781a      	ldrb	r2, [r3, #0]
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	b292      	uxth	r2, r2
 800c33c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800c33e:	69fb      	ldr	r3, [r7, #28]
 800c340:	3301      	adds	r3, #1
 800c342:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c34a:	b29b      	uxth	r3, r3
 800c34c:	3b01      	subs	r3, #1
 800c34e:	b29a      	uxth	r2, r3
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c35c:	b29b      	uxth	r3, r3
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d1cb      	bne.n	800c2fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	9300      	str	r3, [sp, #0]
 800c366:	697b      	ldr	r3, [r7, #20]
 800c368:	2200      	movs	r2, #0
 800c36a:	2140      	movs	r1, #64	; 0x40
 800c36c:	68f8      	ldr	r0, [r7, #12]
 800c36e:	f000 ff4a 	bl	800d206 <UART_WaitOnFlagUntilTimeout>
 800c372:	4603      	mov	r3, r0
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800c378:	2303      	movs	r3, #3
 800c37a:	e005      	b.n	800c388 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2220      	movs	r2, #32
 800c380:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800c382:	2300      	movs	r3, #0
 800c384:	e000      	b.n	800c388 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800c386:	2302      	movs	r3, #2
  }
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3720      	adds	r7, #32
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c390:	b480      	push	{r7}
 800c392:	b08b      	sub	sp, #44	; 0x2c
 800c394:	af00      	add	r7, sp, #0
 800c396:	60f8      	str	r0, [r7, #12]
 800c398:	60b9      	str	r1, [r7, #8]
 800c39a:	4613      	mov	r3, r2
 800c39c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3a2:	2b20      	cmp	r3, #32
 800c3a4:	d156      	bne.n	800c454 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3a6:	68bb      	ldr	r3, [r7, #8]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <HAL_UART_Transmit_IT+0x22>
 800c3ac:	88fb      	ldrh	r3, [r7, #6]
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d101      	bne.n	800c3b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c3b2:	2301      	movs	r3, #1
 800c3b4:	e04f      	b.n	800c456 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	d101      	bne.n	800c3c4 <HAL_UART_Transmit_IT+0x34>
 800c3c0:	2302      	movs	r3, #2
 800c3c2:	e048      	b.n	800c456 <HAL_UART_Transmit_IT+0xc6>
 800c3c4:	68fb      	ldr	r3, [r7, #12]
 800c3c6:	2201      	movs	r2, #1
 800c3c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	68ba      	ldr	r2, [r7, #8]
 800c3d0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	88fa      	ldrh	r2, [r7, #6]
 800c3d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	88fa      	ldrh	r2, [r7, #6]
 800c3de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2200      	movs	r2, #0
 800c3e6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2200      	movs	r2, #0
 800c3ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2221      	movs	r2, #33	; 0x21
 800c3f4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3fe:	d107      	bne.n	800c410 <HAL_UART_Transmit_IT+0x80>
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	691b      	ldr	r3, [r3, #16]
 800c404:	2b00      	cmp	r3, #0
 800c406:	d103      	bne.n	800c410 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	4a16      	ldr	r2, [pc, #88]	; (800c464 <HAL_UART_Transmit_IT+0xd4>)
 800c40c:	669a      	str	r2, [r3, #104]	; 0x68
 800c40e:	e002      	b.n	800c416 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	4a15      	ldr	r2, [pc, #84]	; (800c468 <HAL_UART_Transmit_IT+0xd8>)
 800c414:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	e853 3f00 	ldrex	r3, [r3]
 800c42a:	613b      	str	r3, [r7, #16]
   return(result);
 800c42c:	693b      	ldr	r3, [r7, #16]
 800c42e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c432:	627b      	str	r3, [r7, #36]	; 0x24
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	461a      	mov	r2, r3
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	623b      	str	r3, [r7, #32]
 800c43e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c440:	69f9      	ldr	r1, [r7, #28]
 800c442:	6a3a      	ldr	r2, [r7, #32]
 800c444:	e841 2300 	strex	r3, r2, [r1]
 800c448:	61bb      	str	r3, [r7, #24]
   return(result);
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d1e6      	bne.n	800c41e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800c450:	2300      	movs	r3, #0
 800c452:	e000      	b.n	800c456 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800c454:	2302      	movs	r3, #2
  }
}
 800c456:	4618      	mov	r0, r3
 800c458:	372c      	adds	r7, #44	; 0x2c
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	0800d6cf 	.word	0x0800d6cf
 800c468:	0800d617 	.word	0x0800d617

0800c46c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b08a      	sub	sp, #40	; 0x28
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	4613      	mov	r3, r2
 800c478:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c47e:	2b20      	cmp	r3, #32
 800c480:	d142      	bne.n	800c508 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d002      	beq.n	800c48e <HAL_UART_Receive_IT+0x22>
 800c488:	88fb      	ldrh	r3, [r7, #6]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d101      	bne.n	800c492 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800c48e:	2301      	movs	r3, #1
 800c490:	e03b      	b.n	800c50a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800c498:	2b01      	cmp	r3, #1
 800c49a:	d101      	bne.n	800c4a0 <HAL_UART_Receive_IT+0x34>
 800c49c:	2302      	movs	r3, #2
 800c49e:	e034      	b.n	800c50a <HAL_UART_Receive_IT+0x9e>
 800c4a0:	68fb      	ldr	r3, [r7, #12]
 800c4a2:	2201      	movs	r2, #1
 800c4a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a18      	ldr	r2, [pc, #96]	; (800c514 <HAL_UART_Receive_IT+0xa8>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d01f      	beq.n	800c4f8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d018      	beq.n	800c4f8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	e853 3f00 	ldrex	r3, [r3]
 800c4d2:	613b      	str	r3, [r7, #16]
   return(result);
 800c4d4:	693b      	ldr	r3, [r7, #16]
 800c4d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c4da:	627b      	str	r3, [r7, #36]	; 0x24
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	461a      	mov	r2, r3
 800c4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e4:	623b      	str	r3, [r7, #32]
 800c4e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4e8:	69f9      	ldr	r1, [r7, #28]
 800c4ea:	6a3a      	ldr	r2, [r7, #32]
 800c4ec:	e841 2300 	strex	r3, r2, [r1]
 800c4f0:	61bb      	str	r3, [r7, #24]
   return(result);
 800c4f2:	69bb      	ldr	r3, [r7, #24]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d1e6      	bne.n	800c4c6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c4f8:	88fb      	ldrh	r3, [r7, #6]
 800c4fa:	461a      	mov	r2, r3
 800c4fc:	68b9      	ldr	r1, [r7, #8]
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f000 ff46 	bl	800d390 <UART_Start_Receive_IT>
 800c504:	4603      	mov	r3, r0
 800c506:	e000      	b.n	800c50a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800c508:	2302      	movs	r3, #2
  }
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3728      	adds	r7, #40	; 0x28
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}
 800c512:	bf00      	nop
 800c514:	40008000 	.word	0x40008000

0800c518 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b0ba      	sub	sp, #232	; 0xe8
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	69db      	ldr	r3, [r3, #28]
 800c526:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	689b      	ldr	r3, [r3, #8]
 800c53a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c53e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c542:	f640 030f 	movw	r3, #2063	; 0x80f
 800c546:	4013      	ands	r3, r2
 800c548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c54c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c550:	2b00      	cmp	r3, #0
 800c552:	d115      	bne.n	800c580 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c554:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c558:	f003 0320 	and.w	r3, r3, #32
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d00f      	beq.n	800c580 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c560:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c564:	f003 0320 	and.w	r3, r3, #32
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d009      	beq.n	800c580 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c570:	2b00      	cmp	r3, #0
 800c572:	f000 82a6 	beq.w	800cac2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	4798      	blx	r3
      }
      return;
 800c57e:	e2a0      	b.n	800cac2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800c580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c584:	2b00      	cmp	r3, #0
 800c586:	f000 8117 	beq.w	800c7b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c58a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c58e:	f003 0301 	and.w	r3, r3, #1
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c596:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c59a:	4b85      	ldr	r3, [pc, #532]	; (800c7b0 <HAL_UART_IRQHandler+0x298>)
 800c59c:	4013      	ands	r3, r2
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 810a 	beq.w	800c7b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c5a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5a8:	f003 0301 	and.w	r3, r3, #1
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d011      	beq.n	800c5d4 <HAL_UART_IRQHandler+0xbc>
 800c5b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d00b      	beq.n	800c5d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5ca:	f043 0201 	orr.w	r2, r3, #1
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c5d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5d8:	f003 0302 	and.w	r3, r3, #2
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d011      	beq.n	800c604 <HAL_UART_IRQHandler+0xec>
 800c5e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c5e4:	f003 0301 	and.w	r3, r3, #1
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d00b      	beq.n	800c604 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2202      	movs	r2, #2
 800c5f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5fa:	f043 0204 	orr.w	r2, r3, #4
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c604:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c608:	f003 0304 	and.w	r3, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d011      	beq.n	800c634 <HAL_UART_IRQHandler+0x11c>
 800c610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c614:	f003 0301 	and.w	r3, r3, #1
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d00b      	beq.n	800c634 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2204      	movs	r2, #4
 800c622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c62a:	f043 0202 	orr.w	r2, r3, #2
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c638:	f003 0308 	and.w	r3, r3, #8
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d017      	beq.n	800c670 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c644:	f003 0320 	and.w	r3, r3, #32
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d105      	bne.n	800c658 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c64c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c650:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c654:	2b00      	cmp	r3, #0
 800c656:	d00b      	beq.n	800c670 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	2208      	movs	r2, #8
 800c65e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c666:	f043 0208 	orr.w	r2, r3, #8
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c670:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c674:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d012      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x18a>
 800c67c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c680:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00c      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c690:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c698:	f043 0220 	orr.w	r2, r3, #32
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	f000 820c 	beq.w	800cac6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c6ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6b2:	f003 0320 	and.w	r3, r3, #32
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00d      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c6ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6be:	f003 0320 	and.w	r3, r3, #32
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d007      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d003      	beq.n	800c6d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c6dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	681b      	ldr	r3, [r3, #0]
 800c6e4:	689b      	ldr	r3, [r3, #8]
 800c6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ea:	2b40      	cmp	r3, #64	; 0x40
 800c6ec:	d005      	beq.n	800c6fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c6ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c6f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d04f      	beq.n	800c79a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 ff12 	bl	800d524 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c70a:	2b40      	cmp	r3, #64	; 0x40
 800c70c:	d141      	bne.n	800c792 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3308      	adds	r3, #8
 800c714:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c718:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c71c:	e853 3f00 	ldrex	r3, [r3]
 800c720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c724:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c72c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	3308      	adds	r3, #8
 800c736:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c73a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c73e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c742:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c746:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c74a:	e841 2300 	strex	r3, r2, [r1]
 800c74e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c756:	2b00      	cmp	r3, #0
 800c758:	d1d9      	bne.n	800c70e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d013      	beq.n	800c78a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c766:	4a13      	ldr	r2, [pc, #76]	; (800c7b4 <HAL_UART_IRQHandler+0x29c>)
 800c768:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c76e:	4618      	mov	r0, r3
 800c770:	f7fc fb1d 	bl	8008dae <HAL_DMA_Abort_IT>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d017      	beq.n	800c7aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c780:	687a      	ldr	r2, [r7, #4]
 800c782:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800c784:	4610      	mov	r0, r2
 800c786:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c788:	e00f      	b.n	800c7aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f000 f9b0 	bl	800caf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c790:	e00b      	b.n	800c7aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c792:	6878      	ldr	r0, [r7, #4]
 800c794:	f000 f9ac 	bl	800caf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c798:	e007      	b.n	800c7aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f000 f9a8 	bl	800caf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2200      	movs	r2, #0
 800c7a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800c7a8:	e18d      	b.n	800cac6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7aa:	bf00      	nop
    return;
 800c7ac:	e18b      	b.n	800cac6 <HAL_UART_IRQHandler+0x5ae>
 800c7ae:	bf00      	nop
 800c7b0:	04000120 	.word	0x04000120
 800c7b4:	0800d5eb 	.word	0x0800d5eb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	f040 8146 	bne.w	800ca4e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c7c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c6:	f003 0310 	and.w	r3, r3, #16
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	f000 813f 	beq.w	800ca4e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c7d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7d4:	f003 0310 	and.w	r3, r3, #16
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	f000 8138 	beq.w	800ca4e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2210      	movs	r2, #16
 800c7e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	689b      	ldr	r3, [r3, #8]
 800c7ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7f0:	2b40      	cmp	r3, #64	; 0x40
 800c7f2:	f040 80b4 	bne.w	800c95e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c802:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c806:	2b00      	cmp	r3, #0
 800c808:	f000 815f 	beq.w	800caca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c812:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c816:	429a      	cmp	r2, r3
 800c818:	f080 8157 	bcs.w	800caca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c822:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	2b00      	cmp	r3, #0
 800c834:	f040 8085 	bne.w	800c942 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	681b      	ldr	r3, [r3, #0]
 800c83c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c844:	e853 3f00 	ldrex	r3, [r3]
 800c848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c84c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	461a      	mov	r2, r3
 800c85e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c866:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c86a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c86e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c872:	e841 2300 	strex	r3, r2, [r1]
 800c876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c87a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d1da      	bne.n	800c838 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	3308      	adds	r3, #8
 800c888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c88a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c88c:	e853 3f00 	ldrex	r3, [r3]
 800c890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c894:	f023 0301 	bic.w	r3, r3, #1
 800c898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	3308      	adds	r3, #8
 800c8a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c8a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c8aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c8ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c8b2:	e841 2300 	strex	r3, r2, [r1]
 800c8b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c8b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1e1      	bne.n	800c882 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3308      	adds	r3, #8
 800c8c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c8c8:	e853 3f00 	ldrex	r3, [r3]
 800c8cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c8ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c8d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	3308      	adds	r3, #8
 800c8de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c8e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c8e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c8e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c8ea:	e841 2300 	strex	r3, r2, [r1]
 800c8ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c8f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d1e3      	bne.n	800c8be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2200      	movs	r2, #0
 800c900:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c90a:	e853 3f00 	ldrex	r3, [r3]
 800c90e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c912:	f023 0310 	bic.w	r3, r3, #16
 800c916:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c924:	65bb      	str	r3, [r7, #88]	; 0x58
 800c926:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c928:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c92a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c92c:	e841 2300 	strex	r3, r2, [r1]
 800c930:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1e4      	bne.n	800c902 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c93c:	4618      	mov	r0, r3
 800c93e:	f7fc f9f8 	bl	8008d32 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c94e:	b29b      	uxth	r3, r3
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	b29b      	uxth	r3, r3
 800c954:	4619      	mov	r1, r3
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 f8d4 	bl	800cb04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c95c:	e0b5      	b.n	800caca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	1ad3      	subs	r3, r2, r3
 800c96e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c978:	b29b      	uxth	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	f000 80a7 	beq.w	800cace <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800c980:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c984:	2b00      	cmp	r3, #0
 800c986:	f000 80a2 	beq.w	800cace <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c992:	e853 3f00 	ldrex	r3, [r3]
 800c996:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c99a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c99e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c9ac:	647b      	str	r3, [r7, #68]	; 0x44
 800c9ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c9b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c9b4:	e841 2300 	strex	r3, r2, [r1]
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c9ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d1e4      	bne.n	800c98a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ca:	e853 3f00 	ldrex	r3, [r3]
 800c9ce:	623b      	str	r3, [r7, #32]
   return(result);
 800c9d0:	6a3b      	ldr	r3, [r7, #32]
 800c9d2:	f023 0301 	bic.w	r3, r3, #1
 800c9d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	3308      	adds	r3, #8
 800c9e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c9e4:	633a      	str	r2, [r7, #48]	; 0x30
 800c9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ec:	e841 2300 	strex	r3, r2, [r1]
 800c9f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d1e3      	bne.n	800c9c0 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	2220      	movs	r2, #32
 800c9fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	2200      	movs	r2, #0
 800ca02:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	2200      	movs	r2, #0
 800ca08:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca10:	693b      	ldr	r3, [r7, #16]
 800ca12:	e853 3f00 	ldrex	r3, [r3]
 800ca16:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	f023 0310 	bic.w	r3, r3, #16
 800ca1e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	461a      	mov	r2, r3
 800ca28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ca2c:	61fb      	str	r3, [r7, #28]
 800ca2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca30:	69b9      	ldr	r1, [r7, #24]
 800ca32:	69fa      	ldr	r2, [r7, #28]
 800ca34:	e841 2300 	strex	r3, r2, [r1]
 800ca38:	617b      	str	r3, [r7, #20]
   return(result);
 800ca3a:	697b      	ldr	r3, [r7, #20]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d1e4      	bne.n	800ca0a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ca40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca44:	4619      	mov	r1, r3
 800ca46:	6878      	ldr	r0, [r7, #4]
 800ca48:	f000 f85c 	bl	800cb04 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ca4c:	e03f      	b.n	800cace <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ca4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00e      	beq.n	800ca78 <HAL_UART_IRQHandler+0x560>
 800ca5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d008      	beq.n	800ca78 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800ca6e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f001 f816 	bl	800daa2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ca76:	e02d      	b.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ca78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00e      	beq.n	800caa2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ca84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d008      	beq.n	800caa2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d01c      	beq.n	800cad2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	4798      	blx	r3
    }
    return;
 800caa0:	e017      	b.n	800cad2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800caa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d012      	beq.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
 800caae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00c      	beq.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800caba:	6878      	ldr	r0, [r7, #4]
 800cabc:	f000 fe67 	bl	800d78e <UART_EndTransmit_IT>
    return;
 800cac0:	e008      	b.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cac2:	bf00      	nop
 800cac4:	e006      	b.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800cac6:	bf00      	nop
 800cac8:	e004      	b.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800caca:	bf00      	nop
 800cacc:	e002      	b.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
      return;
 800cace:	bf00      	nop
 800cad0:	e000      	b.n	800cad4 <HAL_UART_IRQHandler+0x5bc>
    return;
 800cad2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800cad4:	37e8      	adds	r7, #232	; 0xe8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}
 800cada:	bf00      	nop

0800cadc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cae4:	bf00      	nop
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b083      	sub	sp, #12
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800caf8:	bf00      	nop
 800cafa:	370c      	adds	r7, #12
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr

0800cb04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cb04:	b480      	push	{r7}
 800cb06:	b083      	sub	sp, #12
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	6078      	str	r0, [r7, #4]
 800cb0c:	460b      	mov	r3, r1
 800cb0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb1c:	b5b0      	push	{r4, r5, r7, lr}
 800cb1e:	b088      	sub	sp, #32
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cb24:	2300      	movs	r3, #0
 800cb26:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	689a      	ldr	r2, [r3, #8]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	691b      	ldr	r3, [r3, #16]
 800cb30:	431a      	orrs	r2, r3
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	695b      	ldr	r3, [r3, #20]
 800cb36:	431a      	orrs	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	69db      	ldr	r3, [r3, #28]
 800cb3c:	4313      	orrs	r3, r2
 800cb3e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	681a      	ldr	r2, [r3, #0]
 800cb46:	4bad      	ldr	r3, [pc, #692]	; (800cdfc <UART_SetConfig+0x2e0>)
 800cb48:	4013      	ands	r3, r2
 800cb4a:	687a      	ldr	r2, [r7, #4]
 800cb4c:	6812      	ldr	r2, [r2, #0]
 800cb4e:	69f9      	ldr	r1, [r7, #28]
 800cb50:	430b      	orrs	r3, r1
 800cb52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	685b      	ldr	r3, [r3, #4]
 800cb5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	68da      	ldr	r2, [r3, #12]
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	430a      	orrs	r2, r1
 800cb68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	4aa2      	ldr	r2, [pc, #648]	; (800ce00 <UART_SetConfig+0x2e4>)
 800cb76:	4293      	cmp	r3, r2
 800cb78:	d004      	beq.n	800cb84 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	6a1b      	ldr	r3, [r3, #32]
 800cb7e:	69fa      	ldr	r2, [r7, #28]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	689b      	ldr	r3, [r3, #8]
 800cb8a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	69fa      	ldr	r2, [r7, #28]
 800cb94:	430a      	orrs	r2, r1
 800cb96:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	4a99      	ldr	r2, [pc, #612]	; (800ce04 <UART_SetConfig+0x2e8>)
 800cb9e:	4293      	cmp	r3, r2
 800cba0:	d121      	bne.n	800cbe6 <UART_SetConfig+0xca>
 800cba2:	4b99      	ldr	r3, [pc, #612]	; (800ce08 <UART_SetConfig+0x2ec>)
 800cba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cba8:	f003 0303 	and.w	r3, r3, #3
 800cbac:	2b03      	cmp	r3, #3
 800cbae:	d817      	bhi.n	800cbe0 <UART_SetConfig+0xc4>
 800cbb0:	a201      	add	r2, pc, #4	; (adr r2, 800cbb8 <UART_SetConfig+0x9c>)
 800cbb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbb6:	bf00      	nop
 800cbb8:	0800cbc9 	.word	0x0800cbc9
 800cbbc:	0800cbd5 	.word	0x0800cbd5
 800cbc0:	0800cbcf 	.word	0x0800cbcf
 800cbc4:	0800cbdb 	.word	0x0800cbdb
 800cbc8:	2301      	movs	r3, #1
 800cbca:	76fb      	strb	r3, [r7, #27]
 800cbcc:	e0e7      	b.n	800cd9e <UART_SetConfig+0x282>
 800cbce:	2302      	movs	r3, #2
 800cbd0:	76fb      	strb	r3, [r7, #27]
 800cbd2:	e0e4      	b.n	800cd9e <UART_SetConfig+0x282>
 800cbd4:	2304      	movs	r3, #4
 800cbd6:	76fb      	strb	r3, [r7, #27]
 800cbd8:	e0e1      	b.n	800cd9e <UART_SetConfig+0x282>
 800cbda:	2308      	movs	r3, #8
 800cbdc:	76fb      	strb	r3, [r7, #27]
 800cbde:	e0de      	b.n	800cd9e <UART_SetConfig+0x282>
 800cbe0:	2310      	movs	r3, #16
 800cbe2:	76fb      	strb	r3, [r7, #27]
 800cbe4:	e0db      	b.n	800cd9e <UART_SetConfig+0x282>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	4a88      	ldr	r2, [pc, #544]	; (800ce0c <UART_SetConfig+0x2f0>)
 800cbec:	4293      	cmp	r3, r2
 800cbee:	d132      	bne.n	800cc56 <UART_SetConfig+0x13a>
 800cbf0:	4b85      	ldr	r3, [pc, #532]	; (800ce08 <UART_SetConfig+0x2ec>)
 800cbf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cbf6:	f003 030c 	and.w	r3, r3, #12
 800cbfa:	2b0c      	cmp	r3, #12
 800cbfc:	d828      	bhi.n	800cc50 <UART_SetConfig+0x134>
 800cbfe:	a201      	add	r2, pc, #4	; (adr r2, 800cc04 <UART_SetConfig+0xe8>)
 800cc00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc04:	0800cc39 	.word	0x0800cc39
 800cc08:	0800cc51 	.word	0x0800cc51
 800cc0c:	0800cc51 	.word	0x0800cc51
 800cc10:	0800cc51 	.word	0x0800cc51
 800cc14:	0800cc45 	.word	0x0800cc45
 800cc18:	0800cc51 	.word	0x0800cc51
 800cc1c:	0800cc51 	.word	0x0800cc51
 800cc20:	0800cc51 	.word	0x0800cc51
 800cc24:	0800cc3f 	.word	0x0800cc3f
 800cc28:	0800cc51 	.word	0x0800cc51
 800cc2c:	0800cc51 	.word	0x0800cc51
 800cc30:	0800cc51 	.word	0x0800cc51
 800cc34:	0800cc4b 	.word	0x0800cc4b
 800cc38:	2300      	movs	r3, #0
 800cc3a:	76fb      	strb	r3, [r7, #27]
 800cc3c:	e0af      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc3e:	2302      	movs	r3, #2
 800cc40:	76fb      	strb	r3, [r7, #27]
 800cc42:	e0ac      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc44:	2304      	movs	r3, #4
 800cc46:	76fb      	strb	r3, [r7, #27]
 800cc48:	e0a9      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc4a:	2308      	movs	r3, #8
 800cc4c:	76fb      	strb	r3, [r7, #27]
 800cc4e:	e0a6      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc50:	2310      	movs	r3, #16
 800cc52:	76fb      	strb	r3, [r7, #27]
 800cc54:	e0a3      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a6d      	ldr	r2, [pc, #436]	; (800ce10 <UART_SetConfig+0x2f4>)
 800cc5c:	4293      	cmp	r3, r2
 800cc5e:	d120      	bne.n	800cca2 <UART_SetConfig+0x186>
 800cc60:	4b69      	ldr	r3, [pc, #420]	; (800ce08 <UART_SetConfig+0x2ec>)
 800cc62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc66:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800cc6a:	2b30      	cmp	r3, #48	; 0x30
 800cc6c:	d013      	beq.n	800cc96 <UART_SetConfig+0x17a>
 800cc6e:	2b30      	cmp	r3, #48	; 0x30
 800cc70:	d814      	bhi.n	800cc9c <UART_SetConfig+0x180>
 800cc72:	2b20      	cmp	r3, #32
 800cc74:	d009      	beq.n	800cc8a <UART_SetConfig+0x16e>
 800cc76:	2b20      	cmp	r3, #32
 800cc78:	d810      	bhi.n	800cc9c <UART_SetConfig+0x180>
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d002      	beq.n	800cc84 <UART_SetConfig+0x168>
 800cc7e:	2b10      	cmp	r3, #16
 800cc80:	d006      	beq.n	800cc90 <UART_SetConfig+0x174>
 800cc82:	e00b      	b.n	800cc9c <UART_SetConfig+0x180>
 800cc84:	2300      	movs	r3, #0
 800cc86:	76fb      	strb	r3, [r7, #27]
 800cc88:	e089      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc8a:	2302      	movs	r3, #2
 800cc8c:	76fb      	strb	r3, [r7, #27]
 800cc8e:	e086      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc90:	2304      	movs	r3, #4
 800cc92:	76fb      	strb	r3, [r7, #27]
 800cc94:	e083      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc96:	2308      	movs	r3, #8
 800cc98:	76fb      	strb	r3, [r7, #27]
 800cc9a:	e080      	b.n	800cd9e <UART_SetConfig+0x282>
 800cc9c:	2310      	movs	r3, #16
 800cc9e:	76fb      	strb	r3, [r7, #27]
 800cca0:	e07d      	b.n	800cd9e <UART_SetConfig+0x282>
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	4a5b      	ldr	r2, [pc, #364]	; (800ce14 <UART_SetConfig+0x2f8>)
 800cca8:	4293      	cmp	r3, r2
 800ccaa:	d120      	bne.n	800ccee <UART_SetConfig+0x1d2>
 800ccac:	4b56      	ldr	r3, [pc, #344]	; (800ce08 <UART_SetConfig+0x2ec>)
 800ccae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ccb6:	2bc0      	cmp	r3, #192	; 0xc0
 800ccb8:	d013      	beq.n	800cce2 <UART_SetConfig+0x1c6>
 800ccba:	2bc0      	cmp	r3, #192	; 0xc0
 800ccbc:	d814      	bhi.n	800cce8 <UART_SetConfig+0x1cc>
 800ccbe:	2b80      	cmp	r3, #128	; 0x80
 800ccc0:	d009      	beq.n	800ccd6 <UART_SetConfig+0x1ba>
 800ccc2:	2b80      	cmp	r3, #128	; 0x80
 800ccc4:	d810      	bhi.n	800cce8 <UART_SetConfig+0x1cc>
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d002      	beq.n	800ccd0 <UART_SetConfig+0x1b4>
 800ccca:	2b40      	cmp	r3, #64	; 0x40
 800cccc:	d006      	beq.n	800ccdc <UART_SetConfig+0x1c0>
 800ccce:	e00b      	b.n	800cce8 <UART_SetConfig+0x1cc>
 800ccd0:	2300      	movs	r3, #0
 800ccd2:	76fb      	strb	r3, [r7, #27]
 800ccd4:	e063      	b.n	800cd9e <UART_SetConfig+0x282>
 800ccd6:	2302      	movs	r3, #2
 800ccd8:	76fb      	strb	r3, [r7, #27]
 800ccda:	e060      	b.n	800cd9e <UART_SetConfig+0x282>
 800ccdc:	2304      	movs	r3, #4
 800ccde:	76fb      	strb	r3, [r7, #27]
 800cce0:	e05d      	b.n	800cd9e <UART_SetConfig+0x282>
 800cce2:	2308      	movs	r3, #8
 800cce4:	76fb      	strb	r3, [r7, #27]
 800cce6:	e05a      	b.n	800cd9e <UART_SetConfig+0x282>
 800cce8:	2310      	movs	r3, #16
 800ccea:	76fb      	strb	r3, [r7, #27]
 800ccec:	e057      	b.n	800cd9e <UART_SetConfig+0x282>
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	4a49      	ldr	r2, [pc, #292]	; (800ce18 <UART_SetConfig+0x2fc>)
 800ccf4:	4293      	cmp	r3, r2
 800ccf6:	d125      	bne.n	800cd44 <UART_SetConfig+0x228>
 800ccf8:	4b43      	ldr	r3, [pc, #268]	; (800ce08 <UART_SetConfig+0x2ec>)
 800ccfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ccfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cd02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd06:	d017      	beq.n	800cd38 <UART_SetConfig+0x21c>
 800cd08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cd0c:	d817      	bhi.n	800cd3e <UART_SetConfig+0x222>
 800cd0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd12:	d00b      	beq.n	800cd2c <UART_SetConfig+0x210>
 800cd14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cd18:	d811      	bhi.n	800cd3e <UART_SetConfig+0x222>
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d003      	beq.n	800cd26 <UART_SetConfig+0x20a>
 800cd1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cd22:	d006      	beq.n	800cd32 <UART_SetConfig+0x216>
 800cd24:	e00b      	b.n	800cd3e <UART_SetConfig+0x222>
 800cd26:	2300      	movs	r3, #0
 800cd28:	76fb      	strb	r3, [r7, #27]
 800cd2a:	e038      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd2c:	2302      	movs	r3, #2
 800cd2e:	76fb      	strb	r3, [r7, #27]
 800cd30:	e035      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd32:	2304      	movs	r3, #4
 800cd34:	76fb      	strb	r3, [r7, #27]
 800cd36:	e032      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd38:	2308      	movs	r3, #8
 800cd3a:	76fb      	strb	r3, [r7, #27]
 800cd3c:	e02f      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd3e:	2310      	movs	r3, #16
 800cd40:	76fb      	strb	r3, [r7, #27]
 800cd42:	e02c      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	4a2d      	ldr	r2, [pc, #180]	; (800ce00 <UART_SetConfig+0x2e4>)
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	d125      	bne.n	800cd9a <UART_SetConfig+0x27e>
 800cd4e:	4b2e      	ldr	r3, [pc, #184]	; (800ce08 <UART_SetConfig+0x2ec>)
 800cd50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd54:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800cd58:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd5c:	d017      	beq.n	800cd8e <UART_SetConfig+0x272>
 800cd5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800cd62:	d817      	bhi.n	800cd94 <UART_SetConfig+0x278>
 800cd64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd68:	d00b      	beq.n	800cd82 <UART_SetConfig+0x266>
 800cd6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cd6e:	d811      	bhi.n	800cd94 <UART_SetConfig+0x278>
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d003      	beq.n	800cd7c <UART_SetConfig+0x260>
 800cd74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cd78:	d006      	beq.n	800cd88 <UART_SetConfig+0x26c>
 800cd7a:	e00b      	b.n	800cd94 <UART_SetConfig+0x278>
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	76fb      	strb	r3, [r7, #27]
 800cd80:	e00d      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd82:	2302      	movs	r3, #2
 800cd84:	76fb      	strb	r3, [r7, #27]
 800cd86:	e00a      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd88:	2304      	movs	r3, #4
 800cd8a:	76fb      	strb	r3, [r7, #27]
 800cd8c:	e007      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd8e:	2308      	movs	r3, #8
 800cd90:	76fb      	strb	r3, [r7, #27]
 800cd92:	e004      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd94:	2310      	movs	r3, #16
 800cd96:	76fb      	strb	r3, [r7, #27]
 800cd98:	e001      	b.n	800cd9e <UART_SetConfig+0x282>
 800cd9a:	2310      	movs	r3, #16
 800cd9c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	4a17      	ldr	r2, [pc, #92]	; (800ce00 <UART_SetConfig+0x2e4>)
 800cda4:	4293      	cmp	r3, r2
 800cda6:	f040 8087 	bne.w	800ceb8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdaa:	7efb      	ldrb	r3, [r7, #27]
 800cdac:	2b08      	cmp	r3, #8
 800cdae:	d837      	bhi.n	800ce20 <UART_SetConfig+0x304>
 800cdb0:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <UART_SetConfig+0x29c>)
 800cdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb6:	bf00      	nop
 800cdb8:	0800cddd 	.word	0x0800cddd
 800cdbc:	0800ce21 	.word	0x0800ce21
 800cdc0:	0800cde5 	.word	0x0800cde5
 800cdc4:	0800ce21 	.word	0x0800ce21
 800cdc8:	0800cdeb 	.word	0x0800cdeb
 800cdcc:	0800ce21 	.word	0x0800ce21
 800cdd0:	0800ce21 	.word	0x0800ce21
 800cdd4:	0800ce21 	.word	0x0800ce21
 800cdd8:	0800cdf3 	.word	0x0800cdf3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cddc:	f7fe f97e 	bl	800b0dc <HAL_RCC_GetPCLK1Freq>
 800cde0:	6178      	str	r0, [r7, #20]
        break;
 800cde2:	e022      	b.n	800ce2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cde4:	4b0d      	ldr	r3, [pc, #52]	; (800ce1c <UART_SetConfig+0x300>)
 800cde6:	617b      	str	r3, [r7, #20]
        break;
 800cde8:	e01f      	b.n	800ce2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cdea:	f7fe f8df 	bl	800afac <HAL_RCC_GetSysClockFreq>
 800cdee:	6178      	str	r0, [r7, #20]
        break;
 800cdf0:	e01b      	b.n	800ce2a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cdf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cdf6:	617b      	str	r3, [r7, #20]
        break;
 800cdf8:	e017      	b.n	800ce2a <UART_SetConfig+0x30e>
 800cdfa:	bf00      	nop
 800cdfc:	efff69f3 	.word	0xefff69f3
 800ce00:	40008000 	.word	0x40008000
 800ce04:	40013800 	.word	0x40013800
 800ce08:	40021000 	.word	0x40021000
 800ce0c:	40004400 	.word	0x40004400
 800ce10:	40004800 	.word	0x40004800
 800ce14:	40004c00 	.word	0x40004c00
 800ce18:	40005000 	.word	0x40005000
 800ce1c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800ce20:	2300      	movs	r3, #0
 800ce22:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800ce24:	2301      	movs	r3, #1
 800ce26:	76bb      	strb	r3, [r7, #26]
        break;
 800ce28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ce2a:	697b      	ldr	r3, [r7, #20]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	f000 80f1 	beq.w	800d014 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	685a      	ldr	r2, [r3, #4]
 800ce36:	4613      	mov	r3, r2
 800ce38:	005b      	lsls	r3, r3, #1
 800ce3a:	4413      	add	r3, r2
 800ce3c:	697a      	ldr	r2, [r7, #20]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d305      	bcc.n	800ce4e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ce48:	697a      	ldr	r2, [r7, #20]
 800ce4a:	429a      	cmp	r2, r3
 800ce4c:	d902      	bls.n	800ce54 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800ce4e:	2301      	movs	r3, #1
 800ce50:	76bb      	strb	r3, [r7, #26]
 800ce52:	e0df      	b.n	800d014 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	4618      	mov	r0, r3
 800ce58:	f04f 0100 	mov.w	r1, #0
 800ce5c:	f04f 0200 	mov.w	r2, #0
 800ce60:	f04f 0300 	mov.w	r3, #0
 800ce64:	020b      	lsls	r3, r1, #8
 800ce66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ce6a:	0202      	lsls	r2, r0, #8
 800ce6c:	6879      	ldr	r1, [r7, #4]
 800ce6e:	6849      	ldr	r1, [r1, #4]
 800ce70:	0849      	lsrs	r1, r1, #1
 800ce72:	4608      	mov	r0, r1
 800ce74:	f04f 0100 	mov.w	r1, #0
 800ce78:	1814      	adds	r4, r2, r0
 800ce7a:	eb43 0501 	adc.w	r5, r3, r1
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	685b      	ldr	r3, [r3, #4]
 800ce82:	461a      	mov	r2, r3
 800ce84:	f04f 0300 	mov.w	r3, #0
 800ce88:	4620      	mov	r0, r4
 800ce8a:	4629      	mov	r1, r5
 800ce8c:	f7f3 fe8c 	bl	8000ba8 <__aeabi_uldivmod>
 800ce90:	4602      	mov	r2, r0
 800ce92:	460b      	mov	r3, r1
 800ce94:	4613      	mov	r3, r2
 800ce96:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ce9e:	d308      	bcc.n	800ceb2 <UART_SetConfig+0x396>
 800cea0:	693b      	ldr	r3, [r7, #16]
 800cea2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cea6:	d204      	bcs.n	800ceb2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	693a      	ldr	r2, [r7, #16]
 800ceae:	60da      	str	r2, [r3, #12]
 800ceb0:	e0b0      	b.n	800d014 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800ceb2:	2301      	movs	r3, #1
 800ceb4:	76bb      	strb	r3, [r7, #26]
 800ceb6:	e0ad      	b.n	800d014 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	69db      	ldr	r3, [r3, #28]
 800cebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cec0:	d15b      	bne.n	800cf7a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800cec2:	7efb      	ldrb	r3, [r7, #27]
 800cec4:	2b08      	cmp	r3, #8
 800cec6:	d828      	bhi.n	800cf1a <UART_SetConfig+0x3fe>
 800cec8:	a201      	add	r2, pc, #4	; (adr r2, 800ced0 <UART_SetConfig+0x3b4>)
 800ceca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cece:	bf00      	nop
 800ced0:	0800cef5 	.word	0x0800cef5
 800ced4:	0800cefd 	.word	0x0800cefd
 800ced8:	0800cf05 	.word	0x0800cf05
 800cedc:	0800cf1b 	.word	0x0800cf1b
 800cee0:	0800cf0b 	.word	0x0800cf0b
 800cee4:	0800cf1b 	.word	0x0800cf1b
 800cee8:	0800cf1b 	.word	0x0800cf1b
 800ceec:	0800cf1b 	.word	0x0800cf1b
 800cef0:	0800cf13 	.word	0x0800cf13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cef4:	f7fe f8f2 	bl	800b0dc <HAL_RCC_GetPCLK1Freq>
 800cef8:	6178      	str	r0, [r7, #20]
        break;
 800cefa:	e013      	b.n	800cf24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cefc:	f7fe f904 	bl	800b108 <HAL_RCC_GetPCLK2Freq>
 800cf00:	6178      	str	r0, [r7, #20]
        break;
 800cf02:	e00f      	b.n	800cf24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cf04:	4b49      	ldr	r3, [pc, #292]	; (800d02c <UART_SetConfig+0x510>)
 800cf06:	617b      	str	r3, [r7, #20]
        break;
 800cf08:	e00c      	b.n	800cf24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cf0a:	f7fe f84f 	bl	800afac <HAL_RCC_GetSysClockFreq>
 800cf0e:	6178      	str	r0, [r7, #20]
        break;
 800cf10:	e008      	b.n	800cf24 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cf12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cf16:	617b      	str	r3, [r7, #20]
        break;
 800cf18:	e004      	b.n	800cf24 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cf1e:	2301      	movs	r3, #1
 800cf20:	76bb      	strb	r3, [r7, #26]
        break;
 800cf22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d074      	beq.n	800d014 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cf2a:	697b      	ldr	r3, [r7, #20]
 800cf2c:	005a      	lsls	r2, r3, #1
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	685b      	ldr	r3, [r3, #4]
 800cf32:	085b      	lsrs	r3, r3, #1
 800cf34:	441a      	add	r2, r3
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf3e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cf40:	693b      	ldr	r3, [r7, #16]
 800cf42:	2b0f      	cmp	r3, #15
 800cf44:	d916      	bls.n	800cf74 <UART_SetConfig+0x458>
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cf4c:	d212      	bcs.n	800cf74 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	b29b      	uxth	r3, r3
 800cf52:	f023 030f 	bic.w	r3, r3, #15
 800cf56:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cf58:	693b      	ldr	r3, [r7, #16]
 800cf5a:	085b      	lsrs	r3, r3, #1
 800cf5c:	b29b      	uxth	r3, r3
 800cf5e:	f003 0307 	and.w	r3, r3, #7
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	89fb      	ldrh	r3, [r7, #14]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	681b      	ldr	r3, [r3, #0]
 800cf6e:	89fa      	ldrh	r2, [r7, #14]
 800cf70:	60da      	str	r2, [r3, #12]
 800cf72:	e04f      	b.n	800d014 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800cf74:	2301      	movs	r3, #1
 800cf76:	76bb      	strb	r3, [r7, #26]
 800cf78:	e04c      	b.n	800d014 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cf7a:	7efb      	ldrb	r3, [r7, #27]
 800cf7c:	2b08      	cmp	r3, #8
 800cf7e:	d828      	bhi.n	800cfd2 <UART_SetConfig+0x4b6>
 800cf80:	a201      	add	r2, pc, #4	; (adr r2, 800cf88 <UART_SetConfig+0x46c>)
 800cf82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf86:	bf00      	nop
 800cf88:	0800cfad 	.word	0x0800cfad
 800cf8c:	0800cfb5 	.word	0x0800cfb5
 800cf90:	0800cfbd 	.word	0x0800cfbd
 800cf94:	0800cfd3 	.word	0x0800cfd3
 800cf98:	0800cfc3 	.word	0x0800cfc3
 800cf9c:	0800cfd3 	.word	0x0800cfd3
 800cfa0:	0800cfd3 	.word	0x0800cfd3
 800cfa4:	0800cfd3 	.word	0x0800cfd3
 800cfa8:	0800cfcb 	.word	0x0800cfcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cfac:	f7fe f896 	bl	800b0dc <HAL_RCC_GetPCLK1Freq>
 800cfb0:	6178      	str	r0, [r7, #20]
        break;
 800cfb2:	e013      	b.n	800cfdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cfb4:	f7fe f8a8 	bl	800b108 <HAL_RCC_GetPCLK2Freq>
 800cfb8:	6178      	str	r0, [r7, #20]
        break;
 800cfba:	e00f      	b.n	800cfdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cfbc:	4b1b      	ldr	r3, [pc, #108]	; (800d02c <UART_SetConfig+0x510>)
 800cfbe:	617b      	str	r3, [r7, #20]
        break;
 800cfc0:	e00c      	b.n	800cfdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cfc2:	f7fd fff3 	bl	800afac <HAL_RCC_GetSysClockFreq>
 800cfc6:	6178      	str	r0, [r7, #20]
        break;
 800cfc8:	e008      	b.n	800cfdc <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cfca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfce:	617b      	str	r3, [r7, #20]
        break;
 800cfd0:	e004      	b.n	800cfdc <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800cfd6:	2301      	movs	r3, #1
 800cfd8:	76bb      	strb	r3, [r7, #26]
        break;
 800cfda:	bf00      	nop
    }

    if (pclk != 0U)
 800cfdc:	697b      	ldr	r3, [r7, #20]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d018      	beq.n	800d014 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	685b      	ldr	r3, [r3, #4]
 800cfe6:	085a      	lsrs	r2, r3, #1
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	441a      	add	r2, r3
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	685b      	ldr	r3, [r3, #4]
 800cff0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cff4:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cff6:	693b      	ldr	r3, [r7, #16]
 800cff8:	2b0f      	cmp	r3, #15
 800cffa:	d909      	bls.n	800d010 <UART_SetConfig+0x4f4>
 800cffc:	693b      	ldr	r3, [r7, #16]
 800cffe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d002:	d205      	bcs.n	800d010 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d004:	693b      	ldr	r3, [r7, #16]
 800d006:	b29a      	uxth	r2, r3
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	60da      	str	r2, [r3, #12]
 800d00e:	e001      	b.n	800d014 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	2200      	movs	r2, #0
 800d01e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800d020:	7ebb      	ldrb	r3, [r7, #26]
}
 800d022:	4618      	mov	r0, r3
 800d024:	3720      	adds	r7, #32
 800d026:	46bd      	mov	sp, r7
 800d028:	bdb0      	pop	{r4, r5, r7, pc}
 800d02a:	bf00      	nop
 800d02c:	00f42400 	.word	0x00f42400

0800d030 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d030:	b480      	push	{r7}
 800d032:	b083      	sub	sp, #12
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d03c:	f003 0301 	and.w	r3, r3, #1
 800d040:	2b00      	cmp	r3, #0
 800d042:	d00a      	beq.n	800d05a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	430a      	orrs	r2, r1
 800d058:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	430a      	orrs	r2, r1
 800d07a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d080:	f003 0304 	and.w	r3, r3, #4
 800d084:	2b00      	cmp	r3, #0
 800d086:	d00a      	beq.n	800d09e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	685b      	ldr	r3, [r3, #4]
 800d08e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	430a      	orrs	r2, r1
 800d09c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0a2:	f003 0308 	and.w	r3, r3, #8
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	685b      	ldr	r3, [r3, #4]
 800d0b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	430a      	orrs	r2, r1
 800d0be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0c4:	f003 0310 	and.w	r3, r3, #16
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d00a      	beq.n	800d0e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	689b      	ldr	r3, [r3, #8]
 800d0d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	430a      	orrs	r2, r1
 800d0e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0e6:	f003 0320 	and.w	r3, r3, #32
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00a      	beq.n	800d104 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	689b      	ldr	r3, [r3, #8]
 800d0f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	430a      	orrs	r2, r1
 800d102:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d108:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d01a      	beq.n	800d146 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	685b      	ldr	r3, [r3, #4]
 800d116:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	430a      	orrs	r2, r1
 800d124:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d12a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d12e:	d10a      	bne.n	800d146 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	685b      	ldr	r3, [r3, #4]
 800d136:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	430a      	orrs	r2, r1
 800d144:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00a      	beq.n	800d168 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	685b      	ldr	r3, [r3, #4]
 800d158:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	430a      	orrs	r2, r1
 800d166:	605a      	str	r2, [r3, #4]
  }
}
 800d168:	bf00      	nop
 800d16a:	370c      	adds	r7, #12
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b086      	sub	sp, #24
 800d178:	af02      	add	r7, sp, #8
 800d17a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	2200      	movs	r2, #0
 800d180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d184:	f7fb fc94 	bl	8008ab0 <HAL_GetTick>
 800d188:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	f003 0308 	and.w	r3, r3, #8
 800d194:	2b08      	cmp	r3, #8
 800d196:	d10e      	bne.n	800d1b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d198:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d1a6:	6878      	ldr	r0, [r7, #4]
 800d1a8:	f000 f82d 	bl	800d206 <UART_WaitOnFlagUntilTimeout>
 800d1ac:	4603      	mov	r3, r0
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d001      	beq.n	800d1b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1b2:	2303      	movs	r3, #3
 800d1b4:	e023      	b.n	800d1fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	f003 0304 	and.w	r3, r3, #4
 800d1c0:	2b04      	cmp	r3, #4
 800d1c2:	d10e      	bne.n	800d1e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d1c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f000 f817 	bl	800d206 <UART_WaitOnFlagUntilTimeout>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d001      	beq.n	800d1e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d1de:	2303      	movs	r3, #3
 800d1e0:	e00d      	b.n	800d1fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2220      	movs	r2, #32
 800d1e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2220      	movs	r2, #32
 800d1ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800d1fc:	2300      	movs	r3, #0
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	3710      	adds	r7, #16
 800d202:	46bd      	mov	sp, r7
 800d204:	bd80      	pop	{r7, pc}

0800d206 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d206:	b580      	push	{r7, lr}
 800d208:	b09c      	sub	sp, #112	; 0x70
 800d20a:	af00      	add	r7, sp, #0
 800d20c:	60f8      	str	r0, [r7, #12]
 800d20e:	60b9      	str	r1, [r7, #8]
 800d210:	603b      	str	r3, [r7, #0]
 800d212:	4613      	mov	r3, r2
 800d214:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d216:	e0a5      	b.n	800d364 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d218:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d21a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d21e:	f000 80a1 	beq.w	800d364 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d222:	f7fb fc45 	bl	8008ab0 <HAL_GetTick>
 800d226:	4602      	mov	r2, r0
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	1ad3      	subs	r3, r2, r3
 800d22c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d22e:	429a      	cmp	r2, r3
 800d230:	d302      	bcc.n	800d238 <UART_WaitOnFlagUntilTimeout+0x32>
 800d232:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d234:	2b00      	cmp	r3, #0
 800d236:	d13e      	bne.n	800d2b6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d23e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d240:	e853 3f00 	ldrex	r3, [r3]
 800d244:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d248:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d24c:	667b      	str	r3, [r7, #100]	; 0x64
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	461a      	mov	r2, r3
 800d254:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d256:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d258:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d25a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d25c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d25e:	e841 2300 	strex	r3, r2, [r1]
 800d262:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d264:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d266:	2b00      	cmp	r3, #0
 800d268:	d1e6      	bne.n	800d238 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	3308      	adds	r3, #8
 800d270:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d274:	e853 3f00 	ldrex	r3, [r3]
 800d278:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d27a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d27c:	f023 0301 	bic.w	r3, r3, #1
 800d280:	663b      	str	r3, [r7, #96]	; 0x60
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	3308      	adds	r3, #8
 800d288:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d28a:	64ba      	str	r2, [r7, #72]	; 0x48
 800d28c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d28e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d290:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d292:	e841 2300 	strex	r3, r2, [r1]
 800d296:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d298:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	d1e5      	bne.n	800d26a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	2220      	movs	r2, #32
 800d2a2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2220      	movs	r2, #32
 800d2a8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800d2b2:	2303      	movs	r3, #3
 800d2b4:	e067      	b.n	800d386 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	f003 0304 	and.w	r3, r3, #4
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d04f      	beq.n	800d364 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	69db      	ldr	r3, [r3, #28]
 800d2ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d2d2:	d147      	bne.n	800d364 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d2dc:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e6:	e853 3f00 	ldrex	r3, [r3]
 800d2ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ee:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d2f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d2fc:	637b      	str	r3, [r7, #52]	; 0x34
 800d2fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d300:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d302:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d304:	e841 2300 	strex	r3, r2, [r1]
 800d308:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1e6      	bne.n	800d2de <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	3308      	adds	r3, #8
 800d316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	e853 3f00 	ldrex	r3, [r3]
 800d31e:	613b      	str	r3, [r7, #16]
   return(result);
 800d320:	693b      	ldr	r3, [r7, #16]
 800d322:	f023 0301 	bic.w	r3, r3, #1
 800d326:	66bb      	str	r3, [r7, #104]	; 0x68
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	3308      	adds	r3, #8
 800d32e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d330:	623a      	str	r2, [r7, #32]
 800d332:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d334:	69f9      	ldr	r1, [r7, #28]
 800d336:	6a3a      	ldr	r2, [r7, #32]
 800d338:	e841 2300 	strex	r3, r2, [r1]
 800d33c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d1e5      	bne.n	800d310 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	2220      	movs	r2, #32
 800d348:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2220      	movs	r2, #32
 800d34e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	2220      	movs	r2, #32
 800d354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	2200      	movs	r2, #0
 800d35c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800d360:	2303      	movs	r3, #3
 800d362:	e010      	b.n	800d386 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	681b      	ldr	r3, [r3, #0]
 800d368:	69da      	ldr	r2, [r3, #28]
 800d36a:	68bb      	ldr	r3, [r7, #8]
 800d36c:	4013      	ands	r3, r2
 800d36e:	68ba      	ldr	r2, [r7, #8]
 800d370:	429a      	cmp	r2, r3
 800d372:	bf0c      	ite	eq
 800d374:	2301      	moveq	r3, #1
 800d376:	2300      	movne	r3, #0
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	461a      	mov	r2, r3
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	429a      	cmp	r2, r3
 800d380:	f43f af4a 	beq.w	800d218 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d384:	2300      	movs	r3, #0
}
 800d386:	4618      	mov	r0, r3
 800d388:	3770      	adds	r7, #112	; 0x70
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
	...

0800d390 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d390:	b480      	push	{r7}
 800d392:	b097      	sub	sp, #92	; 0x5c
 800d394:	af00      	add	r7, sp, #0
 800d396:	60f8      	str	r0, [r7, #12]
 800d398:	60b9      	str	r1, [r7, #8]
 800d39a:	4613      	mov	r3, r2
 800d39c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	68ba      	ldr	r2, [r7, #8]
 800d3a2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	88fa      	ldrh	r2, [r7, #6]
 800d3a8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d3ac:	68fb      	ldr	r3, [r7, #12]
 800d3ae:	88fa      	ldrh	r2, [r7, #6]
 800d3b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	689b      	ldr	r3, [r3, #8]
 800d3be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d3c2:	d10e      	bne.n	800d3e2 <UART_Start_Receive_IT+0x52>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d105      	bne.n	800d3d8 <UART_Start_Receive_IT+0x48>
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d3d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d3d6:	e02d      	b.n	800d434 <UART_Start_Receive_IT+0xa4>
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	22ff      	movs	r2, #255	; 0xff
 800d3dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d3e0:	e028      	b.n	800d434 <UART_Start_Receive_IT+0xa4>
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d10d      	bne.n	800d406 <UART_Start_Receive_IT+0x76>
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	691b      	ldr	r3, [r3, #16]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d104      	bne.n	800d3fc <UART_Start_Receive_IT+0x6c>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	22ff      	movs	r2, #255	; 0xff
 800d3f6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d3fa:	e01b      	b.n	800d434 <UART_Start_Receive_IT+0xa4>
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	227f      	movs	r2, #127	; 0x7f
 800d400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d404:	e016      	b.n	800d434 <UART_Start_Receive_IT+0xa4>
 800d406:	68fb      	ldr	r3, [r7, #12]
 800d408:	689b      	ldr	r3, [r3, #8]
 800d40a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d40e:	d10d      	bne.n	800d42c <UART_Start_Receive_IT+0x9c>
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	691b      	ldr	r3, [r3, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d104      	bne.n	800d422 <UART_Start_Receive_IT+0x92>
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	227f      	movs	r2, #127	; 0x7f
 800d41c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d420:	e008      	b.n	800d434 <UART_Start_Receive_IT+0xa4>
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	223f      	movs	r2, #63	; 0x3f
 800d426:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d42a:	e003      	b.n	800d434 <UART_Start_Receive_IT+0xa4>
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2200      	movs	r2, #0
 800d430:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d434:	68fb      	ldr	r3, [r7, #12]
 800d436:	2200      	movs	r2, #0
 800d438:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	2222      	movs	r2, #34	; 0x22
 800d440:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	3308      	adds	r3, #8
 800d448:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d44a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d44c:	e853 3f00 	ldrex	r3, [r3]
 800d450:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d454:	f043 0301 	orr.w	r3, r3, #1
 800d458:	657b      	str	r3, [r7, #84]	; 0x54
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	3308      	adds	r3, #8
 800d460:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d462:	64ba      	str	r2, [r7, #72]	; 0x48
 800d464:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d466:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d46a:	e841 2300 	strex	r3, r2, [r1]
 800d46e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d470:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d472:	2b00      	cmp	r3, #0
 800d474:	d1e5      	bne.n	800d442 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d47e:	d107      	bne.n	800d490 <UART_Start_Receive_IT+0x100>
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	691b      	ldr	r3, [r3, #16]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d103      	bne.n	800d490 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d488:	68fb      	ldr	r3, [r7, #12]
 800d48a:	4a24      	ldr	r2, [pc, #144]	; (800d51c <UART_Start_Receive_IT+0x18c>)
 800d48c:	665a      	str	r2, [r3, #100]	; 0x64
 800d48e:	e002      	b.n	800d496 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4a23      	ldr	r2, [pc, #140]	; (800d520 <UART_Start_Receive_IT+0x190>)
 800d494:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	691b      	ldr	r3, [r3, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d019      	beq.n	800d4da <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4ae:	e853 3f00 	ldrex	r3, [r3]
 800d4b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d4b6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d4ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d4c4:	637b      	str	r3, [r7, #52]	; 0x34
 800d4c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d4ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4cc:	e841 2300 	strex	r3, r2, [r1]
 800d4d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d1e6      	bne.n	800d4a6 <UART_Start_Receive_IT+0x116>
 800d4d8:	e018      	b.n	800d50c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	681b      	ldr	r3, [r3, #0]
 800d4de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	e853 3f00 	ldrex	r3, [r3]
 800d4e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	f043 0320 	orr.w	r3, r3, #32
 800d4ee:	653b      	str	r3, [r7, #80]	; 0x50
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	461a      	mov	r2, r3
 800d4f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d4f8:	623b      	str	r3, [r7, #32]
 800d4fa:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4fc:	69f9      	ldr	r1, [r7, #28]
 800d4fe:	6a3a      	ldr	r2, [r7, #32]
 800d500:	e841 2300 	strex	r3, r2, [r1]
 800d504:	61bb      	str	r3, [r7, #24]
   return(result);
 800d506:	69bb      	ldr	r3, [r7, #24]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d1e6      	bne.n	800d4da <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800d50c:	2300      	movs	r3, #0
}
 800d50e:	4618      	mov	r0, r3
 800d510:	375c      	adds	r7, #92	; 0x5c
 800d512:	46bd      	mov	sp, r7
 800d514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d518:	4770      	bx	lr
 800d51a:	bf00      	nop
 800d51c:	0800d943 	.word	0x0800d943
 800d520:	0800d7e3 	.word	0x0800d7e3

0800d524 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d524:	b480      	push	{r7}
 800d526:	b095      	sub	sp, #84	; 0x54
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d534:	e853 3f00 	ldrex	r3, [r3]
 800d538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d53a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d53c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d540:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	461a      	mov	r2, r3
 800d548:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d54a:	643b      	str	r3, [r7, #64]	; 0x40
 800d54c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d54e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d552:	e841 2300 	strex	r3, r2, [r1]
 800d556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d1e6      	bne.n	800d52c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	3308      	adds	r3, #8
 800d564:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d566:	6a3b      	ldr	r3, [r7, #32]
 800d568:	e853 3f00 	ldrex	r3, [r3]
 800d56c:	61fb      	str	r3, [r7, #28]
   return(result);
 800d56e:	69fb      	ldr	r3, [r7, #28]
 800d570:	f023 0301 	bic.w	r3, r3, #1
 800d574:	64bb      	str	r3, [r7, #72]	; 0x48
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	3308      	adds	r3, #8
 800d57c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d57e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d580:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d582:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d586:	e841 2300 	strex	r3, r2, [r1]
 800d58a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d1e5      	bne.n	800d55e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d596:	2b01      	cmp	r3, #1
 800d598:	d118      	bne.n	800d5cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	e853 3f00 	ldrex	r3, [r3]
 800d5a6:	60bb      	str	r3, [r7, #8]
   return(result);
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	f023 0310 	bic.w	r3, r3, #16
 800d5ae:	647b      	str	r3, [r7, #68]	; 0x44
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5b8:	61bb      	str	r3, [r7, #24]
 800d5ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5bc:	6979      	ldr	r1, [r7, #20]
 800d5be:	69ba      	ldr	r2, [r7, #24]
 800d5c0:	e841 2300 	strex	r3, r2, [r1]
 800d5c4:	613b      	str	r3, [r7, #16]
   return(result);
 800d5c6:	693b      	ldr	r3, [r7, #16]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d1e6      	bne.n	800d59a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2220      	movs	r2, #32
 800d5d0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d5de:	bf00      	nop
 800d5e0:	3754      	adds	r7, #84	; 0x54
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5ea:	b580      	push	{r7, lr}
 800d5ec:	b084      	sub	sp, #16
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	2200      	movs	r2, #0
 800d5fc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2200      	movs	r2, #0
 800d604:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d608:	68f8      	ldr	r0, [r7, #12]
 800d60a:	f7ff fa71 	bl	800caf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d60e:	bf00      	nop
 800d610:	3710      	adds	r7, #16
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d616:	b480      	push	{r7}
 800d618:	b08f      	sub	sp, #60	; 0x3c
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d622:	2b21      	cmp	r3, #33	; 0x21
 800d624:	d14d      	bne.n	800d6c2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d62c:	b29b      	uxth	r3, r3
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d132      	bne.n	800d698 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d638:	6a3b      	ldr	r3, [r7, #32]
 800d63a:	e853 3f00 	ldrex	r3, [r3]
 800d63e:	61fb      	str	r3, [r7, #28]
   return(result);
 800d640:	69fb      	ldr	r3, [r7, #28]
 800d642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d646:	637b      	str	r3, [r7, #52]	; 0x34
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	461a      	mov	r2, r3
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d652:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d654:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d656:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d658:	e841 2300 	strex	r3, r2, [r1]
 800d65c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d65e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d660:	2b00      	cmp	r3, #0
 800d662:	d1e6      	bne.n	800d632 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	e853 3f00 	ldrex	r3, [r3]
 800d670:	60bb      	str	r3, [r7, #8]
   return(result);
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d678:	633b      	str	r3, [r7, #48]	; 0x30
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	461a      	mov	r2, r3
 800d680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d682:	61bb      	str	r3, [r7, #24]
 800d684:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d686:	6979      	ldr	r1, [r7, #20]
 800d688:	69ba      	ldr	r2, [r7, #24]
 800d68a:	e841 2300 	strex	r3, r2, [r1]
 800d68e:	613b      	str	r3, [r7, #16]
   return(result);
 800d690:	693b      	ldr	r3, [r7, #16]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d1e6      	bne.n	800d664 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d696:	e014      	b.n	800d6c2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d69c:	781a      	ldrb	r2, [r3, #0]
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	b292      	uxth	r2, r2
 800d6a4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d6aa:	1c5a      	adds	r2, r3, #1
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	b29a      	uxth	r2, r3
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d6c2:	bf00      	nop
 800d6c4:	373c      	adds	r7, #60	; 0x3c
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6cc:	4770      	bx	lr

0800d6ce <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d6ce:	b480      	push	{r7}
 800d6d0:	b091      	sub	sp, #68	; 0x44
 800d6d2:	af00      	add	r7, sp, #0
 800d6d4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6da:	2b21      	cmp	r3, #33	; 0x21
 800d6dc:	d151      	bne.n	800d782 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d132      	bne.n	800d750 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f2:	e853 3f00 	ldrex	r3, [r3]
 800d6f6:	623b      	str	r3, [r7, #32]
   return(result);
 800d6f8:	6a3b      	ldr	r3, [r7, #32]
 800d6fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d6fe:	63bb      	str	r3, [r7, #56]	; 0x38
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	461a      	mov	r2, r3
 800d706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d708:	633b      	str	r3, [r7, #48]	; 0x30
 800d70a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d70c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d70e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d710:	e841 2300 	strex	r3, r2, [r1]
 800d714:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d1e6      	bne.n	800d6ea <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	e853 3f00 	ldrex	r3, [r3]
 800d728:	60fb      	str	r3, [r7, #12]
   return(result);
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d730:	637b      	str	r3, [r7, #52]	; 0x34
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	461a      	mov	r2, r3
 800d738:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d73a:	61fb      	str	r3, [r7, #28]
 800d73c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d73e:	69b9      	ldr	r1, [r7, #24]
 800d740:	69fa      	ldr	r2, [r7, #28]
 800d742:	e841 2300 	strex	r3, r2, [r1]
 800d746:	617b      	str	r3, [r7, #20]
   return(result);
 800d748:	697b      	ldr	r3, [r7, #20]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d1e6      	bne.n	800d71c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d74e:	e018      	b.n	800d782 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d754:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d758:	881a      	ldrh	r2, [r3, #0]
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d762:	b292      	uxth	r2, r2
 800d764:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d76a:	1c9a      	adds	r2, r3, #2
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d776:	b29b      	uxth	r3, r3
 800d778:	3b01      	subs	r3, #1
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d782:	bf00      	nop
 800d784:	3744      	adds	r7, #68	; 0x44
 800d786:	46bd      	mov	sp, r7
 800d788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78c:	4770      	bx	lr

0800d78e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d78e:	b580      	push	{r7, lr}
 800d790:	b088      	sub	sp, #32
 800d792:	af00      	add	r7, sp, #0
 800d794:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	e853 3f00 	ldrex	r3, [r3]
 800d7a2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d7a4:	68bb      	ldr	r3, [r7, #8]
 800d7a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d7aa:	61fb      	str	r3, [r7, #28]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	461a      	mov	r2, r3
 800d7b2:	69fb      	ldr	r3, [r7, #28]
 800d7b4:	61bb      	str	r3, [r7, #24]
 800d7b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7b8:	6979      	ldr	r1, [r7, #20]
 800d7ba:	69ba      	ldr	r2, [r7, #24]
 800d7bc:	e841 2300 	strex	r3, r2, [r1]
 800d7c0:	613b      	str	r3, [r7, #16]
   return(result);
 800d7c2:	693b      	ldr	r3, [r7, #16]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d1e6      	bne.n	800d796 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2220      	movs	r2, #32
 800d7cc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7ff f981 	bl	800cadc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d7da:	bf00      	nop
 800d7dc:	3720      	adds	r7, #32
 800d7de:	46bd      	mov	sp, r7
 800d7e0:	bd80      	pop	{r7, pc}

0800d7e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d7e2:	b580      	push	{r7, lr}
 800d7e4:	b096      	sub	sp, #88	; 0x58
 800d7e6:	af00      	add	r7, sp, #0
 800d7e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d7f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7f8:	2b22      	cmp	r3, #34	; 0x22
 800d7fa:	f040 8094 	bne.w	800d926 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d804:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d808:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800d80c:	b2d9      	uxtb	r1, r3
 800d80e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d812:	b2da      	uxtb	r2, r3
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d818:	400a      	ands	r2, r1
 800d81a:	b2d2      	uxtb	r2, r2
 800d81c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d822:	1c5a      	adds	r2, r3, #1
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d82e:	b29b      	uxth	r3, r3
 800d830:	3b01      	subs	r3, #1
 800d832:	b29a      	uxth	r2, r3
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d840:	b29b      	uxth	r3, r3
 800d842:	2b00      	cmp	r3, #0
 800d844:	d179      	bne.n	800d93a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d84e:	e853 3f00 	ldrex	r3, [r3]
 800d852:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d85a:	653b      	str	r3, [r7, #80]	; 0x50
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	681b      	ldr	r3, [r3, #0]
 800d860:	461a      	mov	r2, r3
 800d862:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d864:	647b      	str	r3, [r7, #68]	; 0x44
 800d866:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d868:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d86a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d86c:	e841 2300 	strex	r3, r2, [r1]
 800d870:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1e6      	bne.n	800d846 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	3308      	adds	r3, #8
 800d87e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d882:	e853 3f00 	ldrex	r3, [r3]
 800d886:	623b      	str	r3, [r7, #32]
   return(result);
 800d888:	6a3b      	ldr	r3, [r7, #32]
 800d88a:	f023 0301 	bic.w	r3, r3, #1
 800d88e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	3308      	adds	r3, #8
 800d896:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d898:	633a      	str	r2, [r7, #48]	; 0x30
 800d89a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d89e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d8a0:	e841 2300 	strex	r3, r2, [r1]
 800d8a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d8a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d1e5      	bne.n	800d878 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2220      	movs	r2, #32
 800d8b0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8bc:	2b01      	cmp	r3, #1
 800d8be:	d12e      	bne.n	800d91e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8cc:	693b      	ldr	r3, [r7, #16]
 800d8ce:	e853 3f00 	ldrex	r3, [r3]
 800d8d2:	60fb      	str	r3, [r7, #12]
   return(result);
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f023 0310 	bic.w	r3, r3, #16
 800d8da:	64bb      	str	r3, [r7, #72]	; 0x48
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	461a      	mov	r2, r3
 800d8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d8e4:	61fb      	str	r3, [r7, #28]
 800d8e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8e8:	69b9      	ldr	r1, [r7, #24]
 800d8ea:	69fa      	ldr	r2, [r7, #28]
 800d8ec:	e841 2300 	strex	r3, r2, [r1]
 800d8f0:	617b      	str	r3, [r7, #20]
   return(result);
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d1e6      	bne.n	800d8c6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	69db      	ldr	r3, [r3, #28]
 800d8fe:	f003 0310 	and.w	r3, r3, #16
 800d902:	2b10      	cmp	r3, #16
 800d904:	d103      	bne.n	800d90e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	2210      	movs	r2, #16
 800d90c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d914:	4619      	mov	r1, r3
 800d916:	6878      	ldr	r0, [r7, #4]
 800d918:	f7ff f8f4 	bl	800cb04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d91c:	e00d      	b.n	800d93a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f7f4 fb60 	bl	8001fe4 <HAL_UART_RxCpltCallback>
}
 800d924:	e009      	b.n	800d93a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	8b1b      	ldrh	r3, [r3, #24]
 800d92c:	b29a      	uxth	r2, r3
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	f042 0208 	orr.w	r2, r2, #8
 800d936:	b292      	uxth	r2, r2
 800d938:	831a      	strh	r2, [r3, #24]
}
 800d93a:	bf00      	nop
 800d93c:	3758      	adds	r7, #88	; 0x58
 800d93e:	46bd      	mov	sp, r7
 800d940:	bd80      	pop	{r7, pc}

0800d942 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d942:	b580      	push	{r7, lr}
 800d944:	b096      	sub	sp, #88	; 0x58
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d950:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d958:	2b22      	cmp	r3, #34	; 0x22
 800d95a:	f040 8094 	bne.w	800da86 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d964:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d96c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800d96e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800d972:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800d976:	4013      	ands	r3, r2
 800d978:	b29a      	uxth	r2, r3
 800d97a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d97c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d982:	1c9a      	adds	r2, r3, #2
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d98e:	b29b      	uxth	r3, r3
 800d990:	3b01      	subs	r3, #1
 800d992:	b29a      	uxth	r2, r3
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d9a0:	b29b      	uxth	r3, r3
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d179      	bne.n	800da9a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d9ae:	e853 3f00 	ldrex	r3, [r3]
 800d9b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d9ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9c4:	643b      	str	r3, [r7, #64]	; 0x40
 800d9c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d9ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d9cc:	e841 2300 	strex	r3, r2, [r1]
 800d9d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d9d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1e6      	bne.n	800d9a6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	3308      	adds	r3, #8
 800d9de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e0:	6a3b      	ldr	r3, [r7, #32]
 800d9e2:	e853 3f00 	ldrex	r3, [r3]
 800d9e6:	61fb      	str	r3, [r7, #28]
   return(result);
 800d9e8:	69fb      	ldr	r3, [r7, #28]
 800d9ea:	f023 0301 	bic.w	r3, r3, #1
 800d9ee:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3308      	adds	r3, #8
 800d9f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d9fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d9fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da00:	e841 2300 	strex	r3, r2, [r1]
 800da04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800da06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d1e5      	bne.n	800d9d8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2220      	movs	r2, #32
 800da10:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	2200      	movs	r2, #0
 800da16:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800da1c:	2b01      	cmp	r3, #1
 800da1e:	d12e      	bne.n	800da7e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2200      	movs	r2, #0
 800da24:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	e853 3f00 	ldrex	r3, [r3]
 800da32:	60bb      	str	r3, [r7, #8]
   return(result);
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f023 0310 	bic.w	r3, r3, #16
 800da3a:	647b      	str	r3, [r7, #68]	; 0x44
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	461a      	mov	r2, r3
 800da42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da44:	61bb      	str	r3, [r7, #24]
 800da46:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da48:	6979      	ldr	r1, [r7, #20]
 800da4a:	69ba      	ldr	r2, [r7, #24]
 800da4c:	e841 2300 	strex	r3, r2, [r1]
 800da50:	613b      	str	r3, [r7, #16]
   return(result);
 800da52:	693b      	ldr	r3, [r7, #16]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1e6      	bne.n	800da26 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	69db      	ldr	r3, [r3, #28]
 800da5e:	f003 0310 	and.w	r3, r3, #16
 800da62:	2b10      	cmp	r3, #16
 800da64:	d103      	bne.n	800da6e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	681b      	ldr	r3, [r3, #0]
 800da6a:	2210      	movs	r2, #16
 800da6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800da74:	4619      	mov	r1, r3
 800da76:	6878      	ldr	r0, [r7, #4]
 800da78:	f7ff f844 	bl	800cb04 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da7c:	e00d      	b.n	800da9a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7f4 fab0 	bl	8001fe4 <HAL_UART_RxCpltCallback>
}
 800da84:	e009      	b.n	800da9a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	8b1b      	ldrh	r3, [r3, #24]
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	f042 0208 	orr.w	r2, r2, #8
 800da96:	b292      	uxth	r2, r2
 800da98:	831a      	strh	r2, [r3, #24]
}
 800da9a:	bf00      	nop
 800da9c:	3758      	adds	r7, #88	; 0x58
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}

0800daa2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800daa2:	b480      	push	{r7}
 800daa4:	b083      	sub	sp, #12
 800daa6:	af00      	add	r7, sp, #0
 800daa8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800daaa:	bf00      	nop
 800daac:	370c      	adds	r7, #12
 800daae:	46bd      	mov	sp, r7
 800dab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab4:	4770      	bx	lr
	...

0800dab8 <__errno>:
 800dab8:	4b01      	ldr	r3, [pc, #4]	; (800dac0 <__errno+0x8>)
 800daba:	6818      	ldr	r0, [r3, #0]
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	20000650 	.word	0x20000650

0800dac4 <__libc_init_array>:
 800dac4:	b570      	push	{r4, r5, r6, lr}
 800dac6:	4d0d      	ldr	r5, [pc, #52]	; (800dafc <__libc_init_array+0x38>)
 800dac8:	4c0d      	ldr	r4, [pc, #52]	; (800db00 <__libc_init_array+0x3c>)
 800daca:	1b64      	subs	r4, r4, r5
 800dacc:	10a4      	asrs	r4, r4, #2
 800dace:	2600      	movs	r6, #0
 800dad0:	42a6      	cmp	r6, r4
 800dad2:	d109      	bne.n	800dae8 <__libc_init_array+0x24>
 800dad4:	4d0b      	ldr	r5, [pc, #44]	; (800db04 <__libc_init_array+0x40>)
 800dad6:	4c0c      	ldr	r4, [pc, #48]	; (800db08 <__libc_init_array+0x44>)
 800dad8:	f002 ff5e 	bl	8010998 <_init>
 800dadc:	1b64      	subs	r4, r4, r5
 800dade:	10a4      	asrs	r4, r4, #2
 800dae0:	2600      	movs	r6, #0
 800dae2:	42a6      	cmp	r6, r4
 800dae4:	d105      	bne.n	800daf2 <__libc_init_array+0x2e>
 800dae6:	bd70      	pop	{r4, r5, r6, pc}
 800dae8:	f855 3b04 	ldr.w	r3, [r5], #4
 800daec:	4798      	blx	r3
 800daee:	3601      	adds	r6, #1
 800daf0:	e7ee      	b.n	800dad0 <__libc_init_array+0xc>
 800daf2:	f855 3b04 	ldr.w	r3, [r5], #4
 800daf6:	4798      	blx	r3
 800daf8:	3601      	adds	r6, #1
 800dafa:	e7f2      	b.n	800dae2 <__libc_init_array+0x1e>
 800dafc:	080115cc 	.word	0x080115cc
 800db00:	080115cc 	.word	0x080115cc
 800db04:	080115cc 	.word	0x080115cc
 800db08:	080115d0 	.word	0x080115d0

0800db0c <memcpy>:
 800db0c:	440a      	add	r2, r1
 800db0e:	4291      	cmp	r1, r2
 800db10:	f100 33ff 	add.w	r3, r0, #4294967295
 800db14:	d100      	bne.n	800db18 <memcpy+0xc>
 800db16:	4770      	bx	lr
 800db18:	b510      	push	{r4, lr}
 800db1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db22:	4291      	cmp	r1, r2
 800db24:	d1f9      	bne.n	800db1a <memcpy+0xe>
 800db26:	bd10      	pop	{r4, pc}

0800db28 <memset>:
 800db28:	4402      	add	r2, r0
 800db2a:	4603      	mov	r3, r0
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d100      	bne.n	800db32 <memset+0xa>
 800db30:	4770      	bx	lr
 800db32:	f803 1b01 	strb.w	r1, [r3], #1
 800db36:	e7f9      	b.n	800db2c <memset+0x4>

0800db38 <__cvt>:
 800db38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db3c:	ec55 4b10 	vmov	r4, r5, d0
 800db40:	2d00      	cmp	r5, #0
 800db42:	460e      	mov	r6, r1
 800db44:	4619      	mov	r1, r3
 800db46:	462b      	mov	r3, r5
 800db48:	bfbb      	ittet	lt
 800db4a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800db4e:	461d      	movlt	r5, r3
 800db50:	2300      	movge	r3, #0
 800db52:	232d      	movlt	r3, #45	; 0x2d
 800db54:	700b      	strb	r3, [r1, #0]
 800db56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800db58:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db5c:	4691      	mov	r9, r2
 800db5e:	f023 0820 	bic.w	r8, r3, #32
 800db62:	bfbc      	itt	lt
 800db64:	4622      	movlt	r2, r4
 800db66:	4614      	movlt	r4, r2
 800db68:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800db6c:	d005      	beq.n	800db7a <__cvt+0x42>
 800db6e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800db72:	d100      	bne.n	800db76 <__cvt+0x3e>
 800db74:	3601      	adds	r6, #1
 800db76:	2102      	movs	r1, #2
 800db78:	e000      	b.n	800db7c <__cvt+0x44>
 800db7a:	2103      	movs	r1, #3
 800db7c:	ab03      	add	r3, sp, #12
 800db7e:	9301      	str	r3, [sp, #4]
 800db80:	ab02      	add	r3, sp, #8
 800db82:	9300      	str	r3, [sp, #0]
 800db84:	ec45 4b10 	vmov	d0, r4, r5
 800db88:	4653      	mov	r3, sl
 800db8a:	4632      	mov	r2, r6
 800db8c:	f000 fe54 	bl	800e838 <_dtoa_r>
 800db90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800db94:	4607      	mov	r7, r0
 800db96:	d102      	bne.n	800db9e <__cvt+0x66>
 800db98:	f019 0f01 	tst.w	r9, #1
 800db9c:	d022      	beq.n	800dbe4 <__cvt+0xac>
 800db9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800dba2:	eb07 0906 	add.w	r9, r7, r6
 800dba6:	d110      	bne.n	800dbca <__cvt+0x92>
 800dba8:	783b      	ldrb	r3, [r7, #0]
 800dbaa:	2b30      	cmp	r3, #48	; 0x30
 800dbac:	d10a      	bne.n	800dbc4 <__cvt+0x8c>
 800dbae:	2200      	movs	r2, #0
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	4620      	mov	r0, r4
 800dbb4:	4629      	mov	r1, r5
 800dbb6:	f7f2 ff87 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbba:	b918      	cbnz	r0, 800dbc4 <__cvt+0x8c>
 800dbbc:	f1c6 0601 	rsb	r6, r6, #1
 800dbc0:	f8ca 6000 	str.w	r6, [sl]
 800dbc4:	f8da 3000 	ldr.w	r3, [sl]
 800dbc8:	4499      	add	r9, r3
 800dbca:	2200      	movs	r2, #0
 800dbcc:	2300      	movs	r3, #0
 800dbce:	4620      	mov	r0, r4
 800dbd0:	4629      	mov	r1, r5
 800dbd2:	f7f2 ff79 	bl	8000ac8 <__aeabi_dcmpeq>
 800dbd6:	b108      	cbz	r0, 800dbdc <__cvt+0xa4>
 800dbd8:	f8cd 900c 	str.w	r9, [sp, #12]
 800dbdc:	2230      	movs	r2, #48	; 0x30
 800dbde:	9b03      	ldr	r3, [sp, #12]
 800dbe0:	454b      	cmp	r3, r9
 800dbe2:	d307      	bcc.n	800dbf4 <__cvt+0xbc>
 800dbe4:	9b03      	ldr	r3, [sp, #12]
 800dbe6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbe8:	1bdb      	subs	r3, r3, r7
 800dbea:	4638      	mov	r0, r7
 800dbec:	6013      	str	r3, [r2, #0]
 800dbee:	b004      	add	sp, #16
 800dbf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbf4:	1c59      	adds	r1, r3, #1
 800dbf6:	9103      	str	r1, [sp, #12]
 800dbf8:	701a      	strb	r2, [r3, #0]
 800dbfa:	e7f0      	b.n	800dbde <__cvt+0xa6>

0800dbfc <__exponent>:
 800dbfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbfe:	4603      	mov	r3, r0
 800dc00:	2900      	cmp	r1, #0
 800dc02:	bfb8      	it	lt
 800dc04:	4249      	neglt	r1, r1
 800dc06:	f803 2b02 	strb.w	r2, [r3], #2
 800dc0a:	bfb4      	ite	lt
 800dc0c:	222d      	movlt	r2, #45	; 0x2d
 800dc0e:	222b      	movge	r2, #43	; 0x2b
 800dc10:	2909      	cmp	r1, #9
 800dc12:	7042      	strb	r2, [r0, #1]
 800dc14:	dd2a      	ble.n	800dc6c <__exponent+0x70>
 800dc16:	f10d 0407 	add.w	r4, sp, #7
 800dc1a:	46a4      	mov	ip, r4
 800dc1c:	270a      	movs	r7, #10
 800dc1e:	46a6      	mov	lr, r4
 800dc20:	460a      	mov	r2, r1
 800dc22:	fb91 f6f7 	sdiv	r6, r1, r7
 800dc26:	fb07 1516 	mls	r5, r7, r6, r1
 800dc2a:	3530      	adds	r5, #48	; 0x30
 800dc2c:	2a63      	cmp	r2, #99	; 0x63
 800dc2e:	f104 34ff 	add.w	r4, r4, #4294967295
 800dc32:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800dc36:	4631      	mov	r1, r6
 800dc38:	dcf1      	bgt.n	800dc1e <__exponent+0x22>
 800dc3a:	3130      	adds	r1, #48	; 0x30
 800dc3c:	f1ae 0502 	sub.w	r5, lr, #2
 800dc40:	f804 1c01 	strb.w	r1, [r4, #-1]
 800dc44:	1c44      	adds	r4, r0, #1
 800dc46:	4629      	mov	r1, r5
 800dc48:	4561      	cmp	r1, ip
 800dc4a:	d30a      	bcc.n	800dc62 <__exponent+0x66>
 800dc4c:	f10d 0209 	add.w	r2, sp, #9
 800dc50:	eba2 020e 	sub.w	r2, r2, lr
 800dc54:	4565      	cmp	r5, ip
 800dc56:	bf88      	it	hi
 800dc58:	2200      	movhi	r2, #0
 800dc5a:	4413      	add	r3, r2
 800dc5c:	1a18      	subs	r0, r3, r0
 800dc5e:	b003      	add	sp, #12
 800dc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc62:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc66:	f804 2f01 	strb.w	r2, [r4, #1]!
 800dc6a:	e7ed      	b.n	800dc48 <__exponent+0x4c>
 800dc6c:	2330      	movs	r3, #48	; 0x30
 800dc6e:	3130      	adds	r1, #48	; 0x30
 800dc70:	7083      	strb	r3, [r0, #2]
 800dc72:	70c1      	strb	r1, [r0, #3]
 800dc74:	1d03      	adds	r3, r0, #4
 800dc76:	e7f1      	b.n	800dc5c <__exponent+0x60>

0800dc78 <_printf_float>:
 800dc78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7c:	ed2d 8b02 	vpush	{d8}
 800dc80:	b08d      	sub	sp, #52	; 0x34
 800dc82:	460c      	mov	r4, r1
 800dc84:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dc88:	4616      	mov	r6, r2
 800dc8a:	461f      	mov	r7, r3
 800dc8c:	4605      	mov	r5, r0
 800dc8e:	f001 fd77 	bl	800f780 <_localeconv_r>
 800dc92:	f8d0 a000 	ldr.w	sl, [r0]
 800dc96:	4650      	mov	r0, sl
 800dc98:	f7f2 fa9a 	bl	80001d0 <strlen>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	930a      	str	r3, [sp, #40]	; 0x28
 800dca0:	6823      	ldr	r3, [r4, #0]
 800dca2:	9305      	str	r3, [sp, #20]
 800dca4:	f8d8 3000 	ldr.w	r3, [r8]
 800dca8:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dcac:	3307      	adds	r3, #7
 800dcae:	f023 0307 	bic.w	r3, r3, #7
 800dcb2:	f103 0208 	add.w	r2, r3, #8
 800dcb6:	f8c8 2000 	str.w	r2, [r8]
 800dcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbe:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dcc2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dcc6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dcca:	9307      	str	r3, [sp, #28]
 800dccc:	f8cd 8018 	str.w	r8, [sp, #24]
 800dcd0:	ee08 0a10 	vmov	s16, r0
 800dcd4:	4b9f      	ldr	r3, [pc, #636]	; (800df54 <_printf_float+0x2dc>)
 800dcd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcda:	f04f 32ff 	mov.w	r2, #4294967295
 800dcde:	f7f2 ff25 	bl	8000b2c <__aeabi_dcmpun>
 800dce2:	bb88      	cbnz	r0, 800dd48 <_printf_float+0xd0>
 800dce4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dce8:	4b9a      	ldr	r3, [pc, #616]	; (800df54 <_printf_float+0x2dc>)
 800dcea:	f04f 32ff 	mov.w	r2, #4294967295
 800dcee:	f7f2 feff 	bl	8000af0 <__aeabi_dcmple>
 800dcf2:	bb48      	cbnz	r0, 800dd48 <_printf_float+0xd0>
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	2300      	movs	r3, #0
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	f7f2 feee 	bl	8000adc <__aeabi_dcmplt>
 800dd00:	b110      	cbz	r0, 800dd08 <_printf_float+0x90>
 800dd02:	232d      	movs	r3, #45	; 0x2d
 800dd04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd08:	4b93      	ldr	r3, [pc, #588]	; (800df58 <_printf_float+0x2e0>)
 800dd0a:	4894      	ldr	r0, [pc, #592]	; (800df5c <_printf_float+0x2e4>)
 800dd0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800dd10:	bf94      	ite	ls
 800dd12:	4698      	movls	r8, r3
 800dd14:	4680      	movhi	r8, r0
 800dd16:	2303      	movs	r3, #3
 800dd18:	6123      	str	r3, [r4, #16]
 800dd1a:	9b05      	ldr	r3, [sp, #20]
 800dd1c:	f023 0204 	bic.w	r2, r3, #4
 800dd20:	6022      	str	r2, [r4, #0]
 800dd22:	f04f 0900 	mov.w	r9, #0
 800dd26:	9700      	str	r7, [sp, #0]
 800dd28:	4633      	mov	r3, r6
 800dd2a:	aa0b      	add	r2, sp, #44	; 0x2c
 800dd2c:	4621      	mov	r1, r4
 800dd2e:	4628      	mov	r0, r5
 800dd30:	f000 f9d8 	bl	800e0e4 <_printf_common>
 800dd34:	3001      	adds	r0, #1
 800dd36:	f040 8090 	bne.w	800de5a <_printf_float+0x1e2>
 800dd3a:	f04f 30ff 	mov.w	r0, #4294967295
 800dd3e:	b00d      	add	sp, #52	; 0x34
 800dd40:	ecbd 8b02 	vpop	{d8}
 800dd44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd48:	4642      	mov	r2, r8
 800dd4a:	464b      	mov	r3, r9
 800dd4c:	4640      	mov	r0, r8
 800dd4e:	4649      	mov	r1, r9
 800dd50:	f7f2 feec 	bl	8000b2c <__aeabi_dcmpun>
 800dd54:	b140      	cbz	r0, 800dd68 <_printf_float+0xf0>
 800dd56:	464b      	mov	r3, r9
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	bfbc      	itt	lt
 800dd5c:	232d      	movlt	r3, #45	; 0x2d
 800dd5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800dd62:	487f      	ldr	r0, [pc, #508]	; (800df60 <_printf_float+0x2e8>)
 800dd64:	4b7f      	ldr	r3, [pc, #508]	; (800df64 <_printf_float+0x2ec>)
 800dd66:	e7d1      	b.n	800dd0c <_printf_float+0x94>
 800dd68:	6863      	ldr	r3, [r4, #4]
 800dd6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800dd6e:	9206      	str	r2, [sp, #24]
 800dd70:	1c5a      	adds	r2, r3, #1
 800dd72:	d13f      	bne.n	800ddf4 <_printf_float+0x17c>
 800dd74:	2306      	movs	r3, #6
 800dd76:	6063      	str	r3, [r4, #4]
 800dd78:	9b05      	ldr	r3, [sp, #20]
 800dd7a:	6861      	ldr	r1, [r4, #4]
 800dd7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800dd80:	2300      	movs	r3, #0
 800dd82:	9303      	str	r3, [sp, #12]
 800dd84:	ab0a      	add	r3, sp, #40	; 0x28
 800dd86:	e9cd b301 	strd	fp, r3, [sp, #4]
 800dd8a:	ab09      	add	r3, sp, #36	; 0x24
 800dd8c:	ec49 8b10 	vmov	d0, r8, r9
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	6022      	str	r2, [r4, #0]
 800dd94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd98:	4628      	mov	r0, r5
 800dd9a:	f7ff fecd 	bl	800db38 <__cvt>
 800dd9e:	9b06      	ldr	r3, [sp, #24]
 800dda0:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dda2:	2b47      	cmp	r3, #71	; 0x47
 800dda4:	4680      	mov	r8, r0
 800dda6:	d108      	bne.n	800ddba <_printf_float+0x142>
 800dda8:	1cc8      	adds	r0, r1, #3
 800ddaa:	db02      	blt.n	800ddb2 <_printf_float+0x13a>
 800ddac:	6863      	ldr	r3, [r4, #4]
 800ddae:	4299      	cmp	r1, r3
 800ddb0:	dd41      	ble.n	800de36 <_printf_float+0x1be>
 800ddb2:	f1ab 0b02 	sub.w	fp, fp, #2
 800ddb6:	fa5f fb8b 	uxtb.w	fp, fp
 800ddba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ddbe:	d820      	bhi.n	800de02 <_printf_float+0x18a>
 800ddc0:	3901      	subs	r1, #1
 800ddc2:	465a      	mov	r2, fp
 800ddc4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ddc8:	9109      	str	r1, [sp, #36]	; 0x24
 800ddca:	f7ff ff17 	bl	800dbfc <__exponent>
 800ddce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ddd0:	1813      	adds	r3, r2, r0
 800ddd2:	2a01      	cmp	r2, #1
 800ddd4:	4681      	mov	r9, r0
 800ddd6:	6123      	str	r3, [r4, #16]
 800ddd8:	dc02      	bgt.n	800dde0 <_printf_float+0x168>
 800ddda:	6822      	ldr	r2, [r4, #0]
 800dddc:	07d2      	lsls	r2, r2, #31
 800ddde:	d501      	bpl.n	800dde4 <_printf_float+0x16c>
 800dde0:	3301      	adds	r3, #1
 800dde2:	6123      	str	r3, [r4, #16]
 800dde4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dde8:	2b00      	cmp	r3, #0
 800ddea:	d09c      	beq.n	800dd26 <_printf_float+0xae>
 800ddec:	232d      	movs	r3, #45	; 0x2d
 800ddee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ddf2:	e798      	b.n	800dd26 <_printf_float+0xae>
 800ddf4:	9a06      	ldr	r2, [sp, #24]
 800ddf6:	2a47      	cmp	r2, #71	; 0x47
 800ddf8:	d1be      	bne.n	800dd78 <_printf_float+0x100>
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1bc      	bne.n	800dd78 <_printf_float+0x100>
 800ddfe:	2301      	movs	r3, #1
 800de00:	e7b9      	b.n	800dd76 <_printf_float+0xfe>
 800de02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800de06:	d118      	bne.n	800de3a <_printf_float+0x1c2>
 800de08:	2900      	cmp	r1, #0
 800de0a:	6863      	ldr	r3, [r4, #4]
 800de0c:	dd0b      	ble.n	800de26 <_printf_float+0x1ae>
 800de0e:	6121      	str	r1, [r4, #16]
 800de10:	b913      	cbnz	r3, 800de18 <_printf_float+0x1a0>
 800de12:	6822      	ldr	r2, [r4, #0]
 800de14:	07d0      	lsls	r0, r2, #31
 800de16:	d502      	bpl.n	800de1e <_printf_float+0x1a6>
 800de18:	3301      	adds	r3, #1
 800de1a:	440b      	add	r3, r1
 800de1c:	6123      	str	r3, [r4, #16]
 800de1e:	65a1      	str	r1, [r4, #88]	; 0x58
 800de20:	f04f 0900 	mov.w	r9, #0
 800de24:	e7de      	b.n	800dde4 <_printf_float+0x16c>
 800de26:	b913      	cbnz	r3, 800de2e <_printf_float+0x1b6>
 800de28:	6822      	ldr	r2, [r4, #0]
 800de2a:	07d2      	lsls	r2, r2, #31
 800de2c:	d501      	bpl.n	800de32 <_printf_float+0x1ba>
 800de2e:	3302      	adds	r3, #2
 800de30:	e7f4      	b.n	800de1c <_printf_float+0x1a4>
 800de32:	2301      	movs	r3, #1
 800de34:	e7f2      	b.n	800de1c <_printf_float+0x1a4>
 800de36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800de3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de3c:	4299      	cmp	r1, r3
 800de3e:	db05      	blt.n	800de4c <_printf_float+0x1d4>
 800de40:	6823      	ldr	r3, [r4, #0]
 800de42:	6121      	str	r1, [r4, #16]
 800de44:	07d8      	lsls	r0, r3, #31
 800de46:	d5ea      	bpl.n	800de1e <_printf_float+0x1a6>
 800de48:	1c4b      	adds	r3, r1, #1
 800de4a:	e7e7      	b.n	800de1c <_printf_float+0x1a4>
 800de4c:	2900      	cmp	r1, #0
 800de4e:	bfd4      	ite	le
 800de50:	f1c1 0202 	rsble	r2, r1, #2
 800de54:	2201      	movgt	r2, #1
 800de56:	4413      	add	r3, r2
 800de58:	e7e0      	b.n	800de1c <_printf_float+0x1a4>
 800de5a:	6823      	ldr	r3, [r4, #0]
 800de5c:	055a      	lsls	r2, r3, #21
 800de5e:	d407      	bmi.n	800de70 <_printf_float+0x1f8>
 800de60:	6923      	ldr	r3, [r4, #16]
 800de62:	4642      	mov	r2, r8
 800de64:	4631      	mov	r1, r6
 800de66:	4628      	mov	r0, r5
 800de68:	47b8      	blx	r7
 800de6a:	3001      	adds	r0, #1
 800de6c:	d12c      	bne.n	800dec8 <_printf_float+0x250>
 800de6e:	e764      	b.n	800dd3a <_printf_float+0xc2>
 800de70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800de74:	f240 80e0 	bls.w	800e038 <_printf_float+0x3c0>
 800de78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de7c:	2200      	movs	r2, #0
 800de7e:	2300      	movs	r3, #0
 800de80:	f7f2 fe22 	bl	8000ac8 <__aeabi_dcmpeq>
 800de84:	2800      	cmp	r0, #0
 800de86:	d034      	beq.n	800def2 <_printf_float+0x27a>
 800de88:	4a37      	ldr	r2, [pc, #220]	; (800df68 <_printf_float+0x2f0>)
 800de8a:	2301      	movs	r3, #1
 800de8c:	4631      	mov	r1, r6
 800de8e:	4628      	mov	r0, r5
 800de90:	47b8      	blx	r7
 800de92:	3001      	adds	r0, #1
 800de94:	f43f af51 	beq.w	800dd3a <_printf_float+0xc2>
 800de98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de9c:	429a      	cmp	r2, r3
 800de9e:	db02      	blt.n	800dea6 <_printf_float+0x22e>
 800dea0:	6823      	ldr	r3, [r4, #0]
 800dea2:	07d8      	lsls	r0, r3, #31
 800dea4:	d510      	bpl.n	800dec8 <_printf_float+0x250>
 800dea6:	ee18 3a10 	vmov	r3, s16
 800deaa:	4652      	mov	r2, sl
 800deac:	4631      	mov	r1, r6
 800deae:	4628      	mov	r0, r5
 800deb0:	47b8      	blx	r7
 800deb2:	3001      	adds	r0, #1
 800deb4:	f43f af41 	beq.w	800dd3a <_printf_float+0xc2>
 800deb8:	f04f 0800 	mov.w	r8, #0
 800debc:	f104 091a 	add.w	r9, r4, #26
 800dec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec2:	3b01      	subs	r3, #1
 800dec4:	4543      	cmp	r3, r8
 800dec6:	dc09      	bgt.n	800dedc <_printf_float+0x264>
 800dec8:	6823      	ldr	r3, [r4, #0]
 800deca:	079b      	lsls	r3, r3, #30
 800decc:	f100 8105 	bmi.w	800e0da <_printf_float+0x462>
 800ded0:	68e0      	ldr	r0, [r4, #12]
 800ded2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ded4:	4298      	cmp	r0, r3
 800ded6:	bfb8      	it	lt
 800ded8:	4618      	movlt	r0, r3
 800deda:	e730      	b.n	800dd3e <_printf_float+0xc6>
 800dedc:	2301      	movs	r3, #1
 800dede:	464a      	mov	r2, r9
 800dee0:	4631      	mov	r1, r6
 800dee2:	4628      	mov	r0, r5
 800dee4:	47b8      	blx	r7
 800dee6:	3001      	adds	r0, #1
 800dee8:	f43f af27 	beq.w	800dd3a <_printf_float+0xc2>
 800deec:	f108 0801 	add.w	r8, r8, #1
 800def0:	e7e6      	b.n	800dec0 <_printf_float+0x248>
 800def2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800def4:	2b00      	cmp	r3, #0
 800def6:	dc39      	bgt.n	800df6c <_printf_float+0x2f4>
 800def8:	4a1b      	ldr	r2, [pc, #108]	; (800df68 <_printf_float+0x2f0>)
 800defa:	2301      	movs	r3, #1
 800defc:	4631      	mov	r1, r6
 800defe:	4628      	mov	r0, r5
 800df00:	47b8      	blx	r7
 800df02:	3001      	adds	r0, #1
 800df04:	f43f af19 	beq.w	800dd3a <_printf_float+0xc2>
 800df08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df0c:	4313      	orrs	r3, r2
 800df0e:	d102      	bne.n	800df16 <_printf_float+0x29e>
 800df10:	6823      	ldr	r3, [r4, #0]
 800df12:	07d9      	lsls	r1, r3, #31
 800df14:	d5d8      	bpl.n	800dec8 <_printf_float+0x250>
 800df16:	ee18 3a10 	vmov	r3, s16
 800df1a:	4652      	mov	r2, sl
 800df1c:	4631      	mov	r1, r6
 800df1e:	4628      	mov	r0, r5
 800df20:	47b8      	blx	r7
 800df22:	3001      	adds	r0, #1
 800df24:	f43f af09 	beq.w	800dd3a <_printf_float+0xc2>
 800df28:	f04f 0900 	mov.w	r9, #0
 800df2c:	f104 0a1a 	add.w	sl, r4, #26
 800df30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df32:	425b      	negs	r3, r3
 800df34:	454b      	cmp	r3, r9
 800df36:	dc01      	bgt.n	800df3c <_printf_float+0x2c4>
 800df38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df3a:	e792      	b.n	800de62 <_printf_float+0x1ea>
 800df3c:	2301      	movs	r3, #1
 800df3e:	4652      	mov	r2, sl
 800df40:	4631      	mov	r1, r6
 800df42:	4628      	mov	r0, r5
 800df44:	47b8      	blx	r7
 800df46:	3001      	adds	r0, #1
 800df48:	f43f aef7 	beq.w	800dd3a <_printf_float+0xc2>
 800df4c:	f109 0901 	add.w	r9, r9, #1
 800df50:	e7ee      	b.n	800df30 <_printf_float+0x2b8>
 800df52:	bf00      	nop
 800df54:	7fefffff 	.word	0x7fefffff
 800df58:	080111e4 	.word	0x080111e4
 800df5c:	080111e8 	.word	0x080111e8
 800df60:	080111f0 	.word	0x080111f0
 800df64:	080111ec 	.word	0x080111ec
 800df68:	080111f4 	.word	0x080111f4
 800df6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800df6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df70:	429a      	cmp	r2, r3
 800df72:	bfa8      	it	ge
 800df74:	461a      	movge	r2, r3
 800df76:	2a00      	cmp	r2, #0
 800df78:	4691      	mov	r9, r2
 800df7a:	dc37      	bgt.n	800dfec <_printf_float+0x374>
 800df7c:	f04f 0b00 	mov.w	fp, #0
 800df80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df84:	f104 021a 	add.w	r2, r4, #26
 800df88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800df8a:	9305      	str	r3, [sp, #20]
 800df8c:	eba3 0309 	sub.w	r3, r3, r9
 800df90:	455b      	cmp	r3, fp
 800df92:	dc33      	bgt.n	800dffc <_printf_float+0x384>
 800df94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df98:	429a      	cmp	r2, r3
 800df9a:	db3b      	blt.n	800e014 <_printf_float+0x39c>
 800df9c:	6823      	ldr	r3, [r4, #0]
 800df9e:	07da      	lsls	r2, r3, #31
 800dfa0:	d438      	bmi.n	800e014 <_printf_float+0x39c>
 800dfa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfa4:	9b05      	ldr	r3, [sp, #20]
 800dfa6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dfa8:	1ad3      	subs	r3, r2, r3
 800dfaa:	eba2 0901 	sub.w	r9, r2, r1
 800dfae:	4599      	cmp	r9, r3
 800dfb0:	bfa8      	it	ge
 800dfb2:	4699      	movge	r9, r3
 800dfb4:	f1b9 0f00 	cmp.w	r9, #0
 800dfb8:	dc35      	bgt.n	800e026 <_printf_float+0x3ae>
 800dfba:	f04f 0800 	mov.w	r8, #0
 800dfbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dfc2:	f104 0a1a 	add.w	sl, r4, #26
 800dfc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfca:	1a9b      	subs	r3, r3, r2
 800dfcc:	eba3 0309 	sub.w	r3, r3, r9
 800dfd0:	4543      	cmp	r3, r8
 800dfd2:	f77f af79 	ble.w	800dec8 <_printf_float+0x250>
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	4652      	mov	r2, sl
 800dfda:	4631      	mov	r1, r6
 800dfdc:	4628      	mov	r0, r5
 800dfde:	47b8      	blx	r7
 800dfe0:	3001      	adds	r0, #1
 800dfe2:	f43f aeaa 	beq.w	800dd3a <_printf_float+0xc2>
 800dfe6:	f108 0801 	add.w	r8, r8, #1
 800dfea:	e7ec      	b.n	800dfc6 <_printf_float+0x34e>
 800dfec:	4613      	mov	r3, r2
 800dfee:	4631      	mov	r1, r6
 800dff0:	4642      	mov	r2, r8
 800dff2:	4628      	mov	r0, r5
 800dff4:	47b8      	blx	r7
 800dff6:	3001      	adds	r0, #1
 800dff8:	d1c0      	bne.n	800df7c <_printf_float+0x304>
 800dffa:	e69e      	b.n	800dd3a <_printf_float+0xc2>
 800dffc:	2301      	movs	r3, #1
 800dffe:	4631      	mov	r1, r6
 800e000:	4628      	mov	r0, r5
 800e002:	9205      	str	r2, [sp, #20]
 800e004:	47b8      	blx	r7
 800e006:	3001      	adds	r0, #1
 800e008:	f43f ae97 	beq.w	800dd3a <_printf_float+0xc2>
 800e00c:	9a05      	ldr	r2, [sp, #20]
 800e00e:	f10b 0b01 	add.w	fp, fp, #1
 800e012:	e7b9      	b.n	800df88 <_printf_float+0x310>
 800e014:	ee18 3a10 	vmov	r3, s16
 800e018:	4652      	mov	r2, sl
 800e01a:	4631      	mov	r1, r6
 800e01c:	4628      	mov	r0, r5
 800e01e:	47b8      	blx	r7
 800e020:	3001      	adds	r0, #1
 800e022:	d1be      	bne.n	800dfa2 <_printf_float+0x32a>
 800e024:	e689      	b.n	800dd3a <_printf_float+0xc2>
 800e026:	9a05      	ldr	r2, [sp, #20]
 800e028:	464b      	mov	r3, r9
 800e02a:	4442      	add	r2, r8
 800e02c:	4631      	mov	r1, r6
 800e02e:	4628      	mov	r0, r5
 800e030:	47b8      	blx	r7
 800e032:	3001      	adds	r0, #1
 800e034:	d1c1      	bne.n	800dfba <_printf_float+0x342>
 800e036:	e680      	b.n	800dd3a <_printf_float+0xc2>
 800e038:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e03a:	2a01      	cmp	r2, #1
 800e03c:	dc01      	bgt.n	800e042 <_printf_float+0x3ca>
 800e03e:	07db      	lsls	r3, r3, #31
 800e040:	d538      	bpl.n	800e0b4 <_printf_float+0x43c>
 800e042:	2301      	movs	r3, #1
 800e044:	4642      	mov	r2, r8
 800e046:	4631      	mov	r1, r6
 800e048:	4628      	mov	r0, r5
 800e04a:	47b8      	blx	r7
 800e04c:	3001      	adds	r0, #1
 800e04e:	f43f ae74 	beq.w	800dd3a <_printf_float+0xc2>
 800e052:	ee18 3a10 	vmov	r3, s16
 800e056:	4652      	mov	r2, sl
 800e058:	4631      	mov	r1, r6
 800e05a:	4628      	mov	r0, r5
 800e05c:	47b8      	blx	r7
 800e05e:	3001      	adds	r0, #1
 800e060:	f43f ae6b 	beq.w	800dd3a <_printf_float+0xc2>
 800e064:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e068:	2200      	movs	r2, #0
 800e06a:	2300      	movs	r3, #0
 800e06c:	f7f2 fd2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800e070:	b9d8      	cbnz	r0, 800e0aa <_printf_float+0x432>
 800e072:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e074:	f108 0201 	add.w	r2, r8, #1
 800e078:	3b01      	subs	r3, #1
 800e07a:	4631      	mov	r1, r6
 800e07c:	4628      	mov	r0, r5
 800e07e:	47b8      	blx	r7
 800e080:	3001      	adds	r0, #1
 800e082:	d10e      	bne.n	800e0a2 <_printf_float+0x42a>
 800e084:	e659      	b.n	800dd3a <_printf_float+0xc2>
 800e086:	2301      	movs	r3, #1
 800e088:	4652      	mov	r2, sl
 800e08a:	4631      	mov	r1, r6
 800e08c:	4628      	mov	r0, r5
 800e08e:	47b8      	blx	r7
 800e090:	3001      	adds	r0, #1
 800e092:	f43f ae52 	beq.w	800dd3a <_printf_float+0xc2>
 800e096:	f108 0801 	add.w	r8, r8, #1
 800e09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e09c:	3b01      	subs	r3, #1
 800e09e:	4543      	cmp	r3, r8
 800e0a0:	dcf1      	bgt.n	800e086 <_printf_float+0x40e>
 800e0a2:	464b      	mov	r3, r9
 800e0a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e0a8:	e6dc      	b.n	800de64 <_printf_float+0x1ec>
 800e0aa:	f04f 0800 	mov.w	r8, #0
 800e0ae:	f104 0a1a 	add.w	sl, r4, #26
 800e0b2:	e7f2      	b.n	800e09a <_printf_float+0x422>
 800e0b4:	2301      	movs	r3, #1
 800e0b6:	4642      	mov	r2, r8
 800e0b8:	e7df      	b.n	800e07a <_printf_float+0x402>
 800e0ba:	2301      	movs	r3, #1
 800e0bc:	464a      	mov	r2, r9
 800e0be:	4631      	mov	r1, r6
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	47b8      	blx	r7
 800e0c4:	3001      	adds	r0, #1
 800e0c6:	f43f ae38 	beq.w	800dd3a <_printf_float+0xc2>
 800e0ca:	f108 0801 	add.w	r8, r8, #1
 800e0ce:	68e3      	ldr	r3, [r4, #12]
 800e0d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e0d2:	1a5b      	subs	r3, r3, r1
 800e0d4:	4543      	cmp	r3, r8
 800e0d6:	dcf0      	bgt.n	800e0ba <_printf_float+0x442>
 800e0d8:	e6fa      	b.n	800ded0 <_printf_float+0x258>
 800e0da:	f04f 0800 	mov.w	r8, #0
 800e0de:	f104 0919 	add.w	r9, r4, #25
 800e0e2:	e7f4      	b.n	800e0ce <_printf_float+0x456>

0800e0e4 <_printf_common>:
 800e0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e8:	4616      	mov	r6, r2
 800e0ea:	4699      	mov	r9, r3
 800e0ec:	688a      	ldr	r2, [r1, #8]
 800e0ee:	690b      	ldr	r3, [r1, #16]
 800e0f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0f4:	4293      	cmp	r3, r2
 800e0f6:	bfb8      	it	lt
 800e0f8:	4613      	movlt	r3, r2
 800e0fa:	6033      	str	r3, [r6, #0]
 800e0fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e100:	4607      	mov	r7, r0
 800e102:	460c      	mov	r4, r1
 800e104:	b10a      	cbz	r2, 800e10a <_printf_common+0x26>
 800e106:	3301      	adds	r3, #1
 800e108:	6033      	str	r3, [r6, #0]
 800e10a:	6823      	ldr	r3, [r4, #0]
 800e10c:	0699      	lsls	r1, r3, #26
 800e10e:	bf42      	ittt	mi
 800e110:	6833      	ldrmi	r3, [r6, #0]
 800e112:	3302      	addmi	r3, #2
 800e114:	6033      	strmi	r3, [r6, #0]
 800e116:	6825      	ldr	r5, [r4, #0]
 800e118:	f015 0506 	ands.w	r5, r5, #6
 800e11c:	d106      	bne.n	800e12c <_printf_common+0x48>
 800e11e:	f104 0a19 	add.w	sl, r4, #25
 800e122:	68e3      	ldr	r3, [r4, #12]
 800e124:	6832      	ldr	r2, [r6, #0]
 800e126:	1a9b      	subs	r3, r3, r2
 800e128:	42ab      	cmp	r3, r5
 800e12a:	dc26      	bgt.n	800e17a <_printf_common+0x96>
 800e12c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e130:	1e13      	subs	r3, r2, #0
 800e132:	6822      	ldr	r2, [r4, #0]
 800e134:	bf18      	it	ne
 800e136:	2301      	movne	r3, #1
 800e138:	0692      	lsls	r2, r2, #26
 800e13a:	d42b      	bmi.n	800e194 <_printf_common+0xb0>
 800e13c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e140:	4649      	mov	r1, r9
 800e142:	4638      	mov	r0, r7
 800e144:	47c0      	blx	r8
 800e146:	3001      	adds	r0, #1
 800e148:	d01e      	beq.n	800e188 <_printf_common+0xa4>
 800e14a:	6823      	ldr	r3, [r4, #0]
 800e14c:	68e5      	ldr	r5, [r4, #12]
 800e14e:	6832      	ldr	r2, [r6, #0]
 800e150:	f003 0306 	and.w	r3, r3, #6
 800e154:	2b04      	cmp	r3, #4
 800e156:	bf08      	it	eq
 800e158:	1aad      	subeq	r5, r5, r2
 800e15a:	68a3      	ldr	r3, [r4, #8]
 800e15c:	6922      	ldr	r2, [r4, #16]
 800e15e:	bf0c      	ite	eq
 800e160:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e164:	2500      	movne	r5, #0
 800e166:	4293      	cmp	r3, r2
 800e168:	bfc4      	itt	gt
 800e16a:	1a9b      	subgt	r3, r3, r2
 800e16c:	18ed      	addgt	r5, r5, r3
 800e16e:	2600      	movs	r6, #0
 800e170:	341a      	adds	r4, #26
 800e172:	42b5      	cmp	r5, r6
 800e174:	d11a      	bne.n	800e1ac <_printf_common+0xc8>
 800e176:	2000      	movs	r0, #0
 800e178:	e008      	b.n	800e18c <_printf_common+0xa8>
 800e17a:	2301      	movs	r3, #1
 800e17c:	4652      	mov	r2, sl
 800e17e:	4649      	mov	r1, r9
 800e180:	4638      	mov	r0, r7
 800e182:	47c0      	blx	r8
 800e184:	3001      	adds	r0, #1
 800e186:	d103      	bne.n	800e190 <_printf_common+0xac>
 800e188:	f04f 30ff 	mov.w	r0, #4294967295
 800e18c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e190:	3501      	adds	r5, #1
 800e192:	e7c6      	b.n	800e122 <_printf_common+0x3e>
 800e194:	18e1      	adds	r1, r4, r3
 800e196:	1c5a      	adds	r2, r3, #1
 800e198:	2030      	movs	r0, #48	; 0x30
 800e19a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e19e:	4422      	add	r2, r4
 800e1a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e1a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e1a8:	3302      	adds	r3, #2
 800e1aa:	e7c7      	b.n	800e13c <_printf_common+0x58>
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	4622      	mov	r2, r4
 800e1b0:	4649      	mov	r1, r9
 800e1b2:	4638      	mov	r0, r7
 800e1b4:	47c0      	blx	r8
 800e1b6:	3001      	adds	r0, #1
 800e1b8:	d0e6      	beq.n	800e188 <_printf_common+0xa4>
 800e1ba:	3601      	adds	r6, #1
 800e1bc:	e7d9      	b.n	800e172 <_printf_common+0x8e>
	...

0800e1c0 <_printf_i>:
 800e1c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e1c4:	460c      	mov	r4, r1
 800e1c6:	4691      	mov	r9, r2
 800e1c8:	7e27      	ldrb	r7, [r4, #24]
 800e1ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800e1cc:	2f78      	cmp	r7, #120	; 0x78
 800e1ce:	4680      	mov	r8, r0
 800e1d0:	469a      	mov	sl, r3
 800e1d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1d6:	d807      	bhi.n	800e1e8 <_printf_i+0x28>
 800e1d8:	2f62      	cmp	r7, #98	; 0x62
 800e1da:	d80a      	bhi.n	800e1f2 <_printf_i+0x32>
 800e1dc:	2f00      	cmp	r7, #0
 800e1de:	f000 80d8 	beq.w	800e392 <_printf_i+0x1d2>
 800e1e2:	2f58      	cmp	r7, #88	; 0x58
 800e1e4:	f000 80a3 	beq.w	800e32e <_printf_i+0x16e>
 800e1e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e1ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e1f0:	e03a      	b.n	800e268 <_printf_i+0xa8>
 800e1f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e1f6:	2b15      	cmp	r3, #21
 800e1f8:	d8f6      	bhi.n	800e1e8 <_printf_i+0x28>
 800e1fa:	a001      	add	r0, pc, #4	; (adr r0, 800e200 <_printf_i+0x40>)
 800e1fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800e200:	0800e259 	.word	0x0800e259
 800e204:	0800e26d 	.word	0x0800e26d
 800e208:	0800e1e9 	.word	0x0800e1e9
 800e20c:	0800e1e9 	.word	0x0800e1e9
 800e210:	0800e1e9 	.word	0x0800e1e9
 800e214:	0800e1e9 	.word	0x0800e1e9
 800e218:	0800e26d 	.word	0x0800e26d
 800e21c:	0800e1e9 	.word	0x0800e1e9
 800e220:	0800e1e9 	.word	0x0800e1e9
 800e224:	0800e1e9 	.word	0x0800e1e9
 800e228:	0800e1e9 	.word	0x0800e1e9
 800e22c:	0800e379 	.word	0x0800e379
 800e230:	0800e29d 	.word	0x0800e29d
 800e234:	0800e35b 	.word	0x0800e35b
 800e238:	0800e1e9 	.word	0x0800e1e9
 800e23c:	0800e1e9 	.word	0x0800e1e9
 800e240:	0800e39b 	.word	0x0800e39b
 800e244:	0800e1e9 	.word	0x0800e1e9
 800e248:	0800e29d 	.word	0x0800e29d
 800e24c:	0800e1e9 	.word	0x0800e1e9
 800e250:	0800e1e9 	.word	0x0800e1e9
 800e254:	0800e363 	.word	0x0800e363
 800e258:	680b      	ldr	r3, [r1, #0]
 800e25a:	1d1a      	adds	r2, r3, #4
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	600a      	str	r2, [r1, #0]
 800e260:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800e264:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e268:	2301      	movs	r3, #1
 800e26a:	e0a3      	b.n	800e3b4 <_printf_i+0x1f4>
 800e26c:	6825      	ldr	r5, [r4, #0]
 800e26e:	6808      	ldr	r0, [r1, #0]
 800e270:	062e      	lsls	r6, r5, #24
 800e272:	f100 0304 	add.w	r3, r0, #4
 800e276:	d50a      	bpl.n	800e28e <_printf_i+0xce>
 800e278:	6805      	ldr	r5, [r0, #0]
 800e27a:	600b      	str	r3, [r1, #0]
 800e27c:	2d00      	cmp	r5, #0
 800e27e:	da03      	bge.n	800e288 <_printf_i+0xc8>
 800e280:	232d      	movs	r3, #45	; 0x2d
 800e282:	426d      	negs	r5, r5
 800e284:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e288:	485e      	ldr	r0, [pc, #376]	; (800e404 <_printf_i+0x244>)
 800e28a:	230a      	movs	r3, #10
 800e28c:	e019      	b.n	800e2c2 <_printf_i+0x102>
 800e28e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800e292:	6805      	ldr	r5, [r0, #0]
 800e294:	600b      	str	r3, [r1, #0]
 800e296:	bf18      	it	ne
 800e298:	b22d      	sxthne	r5, r5
 800e29a:	e7ef      	b.n	800e27c <_printf_i+0xbc>
 800e29c:	680b      	ldr	r3, [r1, #0]
 800e29e:	6825      	ldr	r5, [r4, #0]
 800e2a0:	1d18      	adds	r0, r3, #4
 800e2a2:	6008      	str	r0, [r1, #0]
 800e2a4:	0628      	lsls	r0, r5, #24
 800e2a6:	d501      	bpl.n	800e2ac <_printf_i+0xec>
 800e2a8:	681d      	ldr	r5, [r3, #0]
 800e2aa:	e002      	b.n	800e2b2 <_printf_i+0xf2>
 800e2ac:	0669      	lsls	r1, r5, #25
 800e2ae:	d5fb      	bpl.n	800e2a8 <_printf_i+0xe8>
 800e2b0:	881d      	ldrh	r5, [r3, #0]
 800e2b2:	4854      	ldr	r0, [pc, #336]	; (800e404 <_printf_i+0x244>)
 800e2b4:	2f6f      	cmp	r7, #111	; 0x6f
 800e2b6:	bf0c      	ite	eq
 800e2b8:	2308      	moveq	r3, #8
 800e2ba:	230a      	movne	r3, #10
 800e2bc:	2100      	movs	r1, #0
 800e2be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e2c2:	6866      	ldr	r6, [r4, #4]
 800e2c4:	60a6      	str	r6, [r4, #8]
 800e2c6:	2e00      	cmp	r6, #0
 800e2c8:	bfa2      	ittt	ge
 800e2ca:	6821      	ldrge	r1, [r4, #0]
 800e2cc:	f021 0104 	bicge.w	r1, r1, #4
 800e2d0:	6021      	strge	r1, [r4, #0]
 800e2d2:	b90d      	cbnz	r5, 800e2d8 <_printf_i+0x118>
 800e2d4:	2e00      	cmp	r6, #0
 800e2d6:	d04d      	beq.n	800e374 <_printf_i+0x1b4>
 800e2d8:	4616      	mov	r6, r2
 800e2da:	fbb5 f1f3 	udiv	r1, r5, r3
 800e2de:	fb03 5711 	mls	r7, r3, r1, r5
 800e2e2:	5dc7      	ldrb	r7, [r0, r7]
 800e2e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e2e8:	462f      	mov	r7, r5
 800e2ea:	42bb      	cmp	r3, r7
 800e2ec:	460d      	mov	r5, r1
 800e2ee:	d9f4      	bls.n	800e2da <_printf_i+0x11a>
 800e2f0:	2b08      	cmp	r3, #8
 800e2f2:	d10b      	bne.n	800e30c <_printf_i+0x14c>
 800e2f4:	6823      	ldr	r3, [r4, #0]
 800e2f6:	07df      	lsls	r7, r3, #31
 800e2f8:	d508      	bpl.n	800e30c <_printf_i+0x14c>
 800e2fa:	6923      	ldr	r3, [r4, #16]
 800e2fc:	6861      	ldr	r1, [r4, #4]
 800e2fe:	4299      	cmp	r1, r3
 800e300:	bfde      	ittt	le
 800e302:	2330      	movle	r3, #48	; 0x30
 800e304:	f806 3c01 	strble.w	r3, [r6, #-1]
 800e308:	f106 36ff 	addle.w	r6, r6, #4294967295
 800e30c:	1b92      	subs	r2, r2, r6
 800e30e:	6122      	str	r2, [r4, #16]
 800e310:	f8cd a000 	str.w	sl, [sp]
 800e314:	464b      	mov	r3, r9
 800e316:	aa03      	add	r2, sp, #12
 800e318:	4621      	mov	r1, r4
 800e31a:	4640      	mov	r0, r8
 800e31c:	f7ff fee2 	bl	800e0e4 <_printf_common>
 800e320:	3001      	adds	r0, #1
 800e322:	d14c      	bne.n	800e3be <_printf_i+0x1fe>
 800e324:	f04f 30ff 	mov.w	r0, #4294967295
 800e328:	b004      	add	sp, #16
 800e32a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e32e:	4835      	ldr	r0, [pc, #212]	; (800e404 <_printf_i+0x244>)
 800e330:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800e334:	6823      	ldr	r3, [r4, #0]
 800e336:	680e      	ldr	r6, [r1, #0]
 800e338:	061f      	lsls	r7, r3, #24
 800e33a:	f856 5b04 	ldr.w	r5, [r6], #4
 800e33e:	600e      	str	r6, [r1, #0]
 800e340:	d514      	bpl.n	800e36c <_printf_i+0x1ac>
 800e342:	07d9      	lsls	r1, r3, #31
 800e344:	bf44      	itt	mi
 800e346:	f043 0320 	orrmi.w	r3, r3, #32
 800e34a:	6023      	strmi	r3, [r4, #0]
 800e34c:	b91d      	cbnz	r5, 800e356 <_printf_i+0x196>
 800e34e:	6823      	ldr	r3, [r4, #0]
 800e350:	f023 0320 	bic.w	r3, r3, #32
 800e354:	6023      	str	r3, [r4, #0]
 800e356:	2310      	movs	r3, #16
 800e358:	e7b0      	b.n	800e2bc <_printf_i+0xfc>
 800e35a:	6823      	ldr	r3, [r4, #0]
 800e35c:	f043 0320 	orr.w	r3, r3, #32
 800e360:	6023      	str	r3, [r4, #0]
 800e362:	2378      	movs	r3, #120	; 0x78
 800e364:	4828      	ldr	r0, [pc, #160]	; (800e408 <_printf_i+0x248>)
 800e366:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e36a:	e7e3      	b.n	800e334 <_printf_i+0x174>
 800e36c:	065e      	lsls	r6, r3, #25
 800e36e:	bf48      	it	mi
 800e370:	b2ad      	uxthmi	r5, r5
 800e372:	e7e6      	b.n	800e342 <_printf_i+0x182>
 800e374:	4616      	mov	r6, r2
 800e376:	e7bb      	b.n	800e2f0 <_printf_i+0x130>
 800e378:	680b      	ldr	r3, [r1, #0]
 800e37a:	6826      	ldr	r6, [r4, #0]
 800e37c:	6960      	ldr	r0, [r4, #20]
 800e37e:	1d1d      	adds	r5, r3, #4
 800e380:	600d      	str	r5, [r1, #0]
 800e382:	0635      	lsls	r5, r6, #24
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	d501      	bpl.n	800e38c <_printf_i+0x1cc>
 800e388:	6018      	str	r0, [r3, #0]
 800e38a:	e002      	b.n	800e392 <_printf_i+0x1d2>
 800e38c:	0671      	lsls	r1, r6, #25
 800e38e:	d5fb      	bpl.n	800e388 <_printf_i+0x1c8>
 800e390:	8018      	strh	r0, [r3, #0]
 800e392:	2300      	movs	r3, #0
 800e394:	6123      	str	r3, [r4, #16]
 800e396:	4616      	mov	r6, r2
 800e398:	e7ba      	b.n	800e310 <_printf_i+0x150>
 800e39a:	680b      	ldr	r3, [r1, #0]
 800e39c:	1d1a      	adds	r2, r3, #4
 800e39e:	600a      	str	r2, [r1, #0]
 800e3a0:	681e      	ldr	r6, [r3, #0]
 800e3a2:	6862      	ldr	r2, [r4, #4]
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	4630      	mov	r0, r6
 800e3a8:	f7f1 ff1a 	bl	80001e0 <memchr>
 800e3ac:	b108      	cbz	r0, 800e3b2 <_printf_i+0x1f2>
 800e3ae:	1b80      	subs	r0, r0, r6
 800e3b0:	6060      	str	r0, [r4, #4]
 800e3b2:	6863      	ldr	r3, [r4, #4]
 800e3b4:	6123      	str	r3, [r4, #16]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e3bc:	e7a8      	b.n	800e310 <_printf_i+0x150>
 800e3be:	6923      	ldr	r3, [r4, #16]
 800e3c0:	4632      	mov	r2, r6
 800e3c2:	4649      	mov	r1, r9
 800e3c4:	4640      	mov	r0, r8
 800e3c6:	47d0      	blx	sl
 800e3c8:	3001      	adds	r0, #1
 800e3ca:	d0ab      	beq.n	800e324 <_printf_i+0x164>
 800e3cc:	6823      	ldr	r3, [r4, #0]
 800e3ce:	079b      	lsls	r3, r3, #30
 800e3d0:	d413      	bmi.n	800e3fa <_printf_i+0x23a>
 800e3d2:	68e0      	ldr	r0, [r4, #12]
 800e3d4:	9b03      	ldr	r3, [sp, #12]
 800e3d6:	4298      	cmp	r0, r3
 800e3d8:	bfb8      	it	lt
 800e3da:	4618      	movlt	r0, r3
 800e3dc:	e7a4      	b.n	800e328 <_printf_i+0x168>
 800e3de:	2301      	movs	r3, #1
 800e3e0:	4632      	mov	r2, r6
 800e3e2:	4649      	mov	r1, r9
 800e3e4:	4640      	mov	r0, r8
 800e3e6:	47d0      	blx	sl
 800e3e8:	3001      	adds	r0, #1
 800e3ea:	d09b      	beq.n	800e324 <_printf_i+0x164>
 800e3ec:	3501      	adds	r5, #1
 800e3ee:	68e3      	ldr	r3, [r4, #12]
 800e3f0:	9903      	ldr	r1, [sp, #12]
 800e3f2:	1a5b      	subs	r3, r3, r1
 800e3f4:	42ab      	cmp	r3, r5
 800e3f6:	dcf2      	bgt.n	800e3de <_printf_i+0x21e>
 800e3f8:	e7eb      	b.n	800e3d2 <_printf_i+0x212>
 800e3fa:	2500      	movs	r5, #0
 800e3fc:	f104 0619 	add.w	r6, r4, #25
 800e400:	e7f5      	b.n	800e3ee <_printf_i+0x22e>
 800e402:	bf00      	nop
 800e404:	080111f6 	.word	0x080111f6
 800e408:	08011207 	.word	0x08011207

0800e40c <iprintf>:
 800e40c:	b40f      	push	{r0, r1, r2, r3}
 800e40e:	4b0a      	ldr	r3, [pc, #40]	; (800e438 <iprintf+0x2c>)
 800e410:	b513      	push	{r0, r1, r4, lr}
 800e412:	681c      	ldr	r4, [r3, #0]
 800e414:	b124      	cbz	r4, 800e420 <iprintf+0x14>
 800e416:	69a3      	ldr	r3, [r4, #24]
 800e418:	b913      	cbnz	r3, 800e420 <iprintf+0x14>
 800e41a:	4620      	mov	r0, r4
 800e41c:	f001 f912 	bl	800f644 <__sinit>
 800e420:	ab05      	add	r3, sp, #20
 800e422:	9a04      	ldr	r2, [sp, #16]
 800e424:	68a1      	ldr	r1, [r4, #8]
 800e426:	9301      	str	r3, [sp, #4]
 800e428:	4620      	mov	r0, r4
 800e42a:	f001 ffdb 	bl	80103e4 <_vfiprintf_r>
 800e42e:	b002      	add	sp, #8
 800e430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e434:	b004      	add	sp, #16
 800e436:	4770      	bx	lr
 800e438:	20000650 	.word	0x20000650

0800e43c <_puts_r>:
 800e43c:	b570      	push	{r4, r5, r6, lr}
 800e43e:	460e      	mov	r6, r1
 800e440:	4605      	mov	r5, r0
 800e442:	b118      	cbz	r0, 800e44c <_puts_r+0x10>
 800e444:	6983      	ldr	r3, [r0, #24]
 800e446:	b90b      	cbnz	r3, 800e44c <_puts_r+0x10>
 800e448:	f001 f8fc 	bl	800f644 <__sinit>
 800e44c:	69ab      	ldr	r3, [r5, #24]
 800e44e:	68ac      	ldr	r4, [r5, #8]
 800e450:	b913      	cbnz	r3, 800e458 <_puts_r+0x1c>
 800e452:	4628      	mov	r0, r5
 800e454:	f001 f8f6 	bl	800f644 <__sinit>
 800e458:	4b2c      	ldr	r3, [pc, #176]	; (800e50c <_puts_r+0xd0>)
 800e45a:	429c      	cmp	r4, r3
 800e45c:	d120      	bne.n	800e4a0 <_puts_r+0x64>
 800e45e:	686c      	ldr	r4, [r5, #4]
 800e460:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e462:	07db      	lsls	r3, r3, #31
 800e464:	d405      	bmi.n	800e472 <_puts_r+0x36>
 800e466:	89a3      	ldrh	r3, [r4, #12]
 800e468:	0598      	lsls	r0, r3, #22
 800e46a:	d402      	bmi.n	800e472 <_puts_r+0x36>
 800e46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e46e:	f001 f98c 	bl	800f78a <__retarget_lock_acquire_recursive>
 800e472:	89a3      	ldrh	r3, [r4, #12]
 800e474:	0719      	lsls	r1, r3, #28
 800e476:	d51d      	bpl.n	800e4b4 <_puts_r+0x78>
 800e478:	6923      	ldr	r3, [r4, #16]
 800e47a:	b1db      	cbz	r3, 800e4b4 <_puts_r+0x78>
 800e47c:	3e01      	subs	r6, #1
 800e47e:	68a3      	ldr	r3, [r4, #8]
 800e480:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e484:	3b01      	subs	r3, #1
 800e486:	60a3      	str	r3, [r4, #8]
 800e488:	bb39      	cbnz	r1, 800e4da <_puts_r+0x9e>
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	da38      	bge.n	800e500 <_puts_r+0xc4>
 800e48e:	4622      	mov	r2, r4
 800e490:	210a      	movs	r1, #10
 800e492:	4628      	mov	r0, r5
 800e494:	f000 f884 	bl	800e5a0 <__swbuf_r>
 800e498:	3001      	adds	r0, #1
 800e49a:	d011      	beq.n	800e4c0 <_puts_r+0x84>
 800e49c:	250a      	movs	r5, #10
 800e49e:	e011      	b.n	800e4c4 <_puts_r+0x88>
 800e4a0:	4b1b      	ldr	r3, [pc, #108]	; (800e510 <_puts_r+0xd4>)
 800e4a2:	429c      	cmp	r4, r3
 800e4a4:	d101      	bne.n	800e4aa <_puts_r+0x6e>
 800e4a6:	68ac      	ldr	r4, [r5, #8]
 800e4a8:	e7da      	b.n	800e460 <_puts_r+0x24>
 800e4aa:	4b1a      	ldr	r3, [pc, #104]	; (800e514 <_puts_r+0xd8>)
 800e4ac:	429c      	cmp	r4, r3
 800e4ae:	bf08      	it	eq
 800e4b0:	68ec      	ldreq	r4, [r5, #12]
 800e4b2:	e7d5      	b.n	800e460 <_puts_r+0x24>
 800e4b4:	4621      	mov	r1, r4
 800e4b6:	4628      	mov	r0, r5
 800e4b8:	f000 f8c4 	bl	800e644 <__swsetup_r>
 800e4bc:	2800      	cmp	r0, #0
 800e4be:	d0dd      	beq.n	800e47c <_puts_r+0x40>
 800e4c0:	f04f 35ff 	mov.w	r5, #4294967295
 800e4c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e4c6:	07da      	lsls	r2, r3, #31
 800e4c8:	d405      	bmi.n	800e4d6 <_puts_r+0x9a>
 800e4ca:	89a3      	ldrh	r3, [r4, #12]
 800e4cc:	059b      	lsls	r3, r3, #22
 800e4ce:	d402      	bmi.n	800e4d6 <_puts_r+0x9a>
 800e4d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e4d2:	f001 f95b 	bl	800f78c <__retarget_lock_release_recursive>
 800e4d6:	4628      	mov	r0, r5
 800e4d8:	bd70      	pop	{r4, r5, r6, pc}
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	da04      	bge.n	800e4e8 <_puts_r+0xac>
 800e4de:	69a2      	ldr	r2, [r4, #24]
 800e4e0:	429a      	cmp	r2, r3
 800e4e2:	dc06      	bgt.n	800e4f2 <_puts_r+0xb6>
 800e4e4:	290a      	cmp	r1, #10
 800e4e6:	d004      	beq.n	800e4f2 <_puts_r+0xb6>
 800e4e8:	6823      	ldr	r3, [r4, #0]
 800e4ea:	1c5a      	adds	r2, r3, #1
 800e4ec:	6022      	str	r2, [r4, #0]
 800e4ee:	7019      	strb	r1, [r3, #0]
 800e4f0:	e7c5      	b.n	800e47e <_puts_r+0x42>
 800e4f2:	4622      	mov	r2, r4
 800e4f4:	4628      	mov	r0, r5
 800e4f6:	f000 f853 	bl	800e5a0 <__swbuf_r>
 800e4fa:	3001      	adds	r0, #1
 800e4fc:	d1bf      	bne.n	800e47e <_puts_r+0x42>
 800e4fe:	e7df      	b.n	800e4c0 <_puts_r+0x84>
 800e500:	6823      	ldr	r3, [r4, #0]
 800e502:	250a      	movs	r5, #10
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	6022      	str	r2, [r4, #0]
 800e508:	701d      	strb	r5, [r3, #0]
 800e50a:	e7db      	b.n	800e4c4 <_puts_r+0x88>
 800e50c:	080112cc 	.word	0x080112cc
 800e510:	080112ec 	.word	0x080112ec
 800e514:	080112ac 	.word	0x080112ac

0800e518 <puts>:
 800e518:	4b02      	ldr	r3, [pc, #8]	; (800e524 <puts+0xc>)
 800e51a:	4601      	mov	r1, r0
 800e51c:	6818      	ldr	r0, [r3, #0]
 800e51e:	f7ff bf8d 	b.w	800e43c <_puts_r>
 800e522:	bf00      	nop
 800e524:	20000650 	.word	0x20000650

0800e528 <sniprintf>:
 800e528:	b40c      	push	{r2, r3}
 800e52a:	b530      	push	{r4, r5, lr}
 800e52c:	4b17      	ldr	r3, [pc, #92]	; (800e58c <sniprintf+0x64>)
 800e52e:	1e0c      	subs	r4, r1, #0
 800e530:	681d      	ldr	r5, [r3, #0]
 800e532:	b09d      	sub	sp, #116	; 0x74
 800e534:	da08      	bge.n	800e548 <sniprintf+0x20>
 800e536:	238b      	movs	r3, #139	; 0x8b
 800e538:	602b      	str	r3, [r5, #0]
 800e53a:	f04f 30ff 	mov.w	r0, #4294967295
 800e53e:	b01d      	add	sp, #116	; 0x74
 800e540:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e544:	b002      	add	sp, #8
 800e546:	4770      	bx	lr
 800e548:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e54c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e550:	bf14      	ite	ne
 800e552:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e556:	4623      	moveq	r3, r4
 800e558:	9304      	str	r3, [sp, #16]
 800e55a:	9307      	str	r3, [sp, #28]
 800e55c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e560:	9002      	str	r0, [sp, #8]
 800e562:	9006      	str	r0, [sp, #24]
 800e564:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e568:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e56a:	ab21      	add	r3, sp, #132	; 0x84
 800e56c:	a902      	add	r1, sp, #8
 800e56e:	4628      	mov	r0, r5
 800e570:	9301      	str	r3, [sp, #4]
 800e572:	f001 fe0d 	bl	8010190 <_svfiprintf_r>
 800e576:	1c43      	adds	r3, r0, #1
 800e578:	bfbc      	itt	lt
 800e57a:	238b      	movlt	r3, #139	; 0x8b
 800e57c:	602b      	strlt	r3, [r5, #0]
 800e57e:	2c00      	cmp	r4, #0
 800e580:	d0dd      	beq.n	800e53e <sniprintf+0x16>
 800e582:	9b02      	ldr	r3, [sp, #8]
 800e584:	2200      	movs	r2, #0
 800e586:	701a      	strb	r2, [r3, #0]
 800e588:	e7d9      	b.n	800e53e <sniprintf+0x16>
 800e58a:	bf00      	nop
 800e58c:	20000650 	.word	0x20000650

0800e590 <strcpy>:
 800e590:	4603      	mov	r3, r0
 800e592:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e596:	f803 2b01 	strb.w	r2, [r3], #1
 800e59a:	2a00      	cmp	r2, #0
 800e59c:	d1f9      	bne.n	800e592 <strcpy+0x2>
 800e59e:	4770      	bx	lr

0800e5a0 <__swbuf_r>:
 800e5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5a2:	460e      	mov	r6, r1
 800e5a4:	4614      	mov	r4, r2
 800e5a6:	4605      	mov	r5, r0
 800e5a8:	b118      	cbz	r0, 800e5b2 <__swbuf_r+0x12>
 800e5aa:	6983      	ldr	r3, [r0, #24]
 800e5ac:	b90b      	cbnz	r3, 800e5b2 <__swbuf_r+0x12>
 800e5ae:	f001 f849 	bl	800f644 <__sinit>
 800e5b2:	4b21      	ldr	r3, [pc, #132]	; (800e638 <__swbuf_r+0x98>)
 800e5b4:	429c      	cmp	r4, r3
 800e5b6:	d12b      	bne.n	800e610 <__swbuf_r+0x70>
 800e5b8:	686c      	ldr	r4, [r5, #4]
 800e5ba:	69a3      	ldr	r3, [r4, #24]
 800e5bc:	60a3      	str	r3, [r4, #8]
 800e5be:	89a3      	ldrh	r3, [r4, #12]
 800e5c0:	071a      	lsls	r2, r3, #28
 800e5c2:	d52f      	bpl.n	800e624 <__swbuf_r+0x84>
 800e5c4:	6923      	ldr	r3, [r4, #16]
 800e5c6:	b36b      	cbz	r3, 800e624 <__swbuf_r+0x84>
 800e5c8:	6923      	ldr	r3, [r4, #16]
 800e5ca:	6820      	ldr	r0, [r4, #0]
 800e5cc:	1ac0      	subs	r0, r0, r3
 800e5ce:	6963      	ldr	r3, [r4, #20]
 800e5d0:	b2f6      	uxtb	r6, r6
 800e5d2:	4283      	cmp	r3, r0
 800e5d4:	4637      	mov	r7, r6
 800e5d6:	dc04      	bgt.n	800e5e2 <__swbuf_r+0x42>
 800e5d8:	4621      	mov	r1, r4
 800e5da:	4628      	mov	r0, r5
 800e5dc:	f000 ff9e 	bl	800f51c <_fflush_r>
 800e5e0:	bb30      	cbnz	r0, 800e630 <__swbuf_r+0x90>
 800e5e2:	68a3      	ldr	r3, [r4, #8]
 800e5e4:	3b01      	subs	r3, #1
 800e5e6:	60a3      	str	r3, [r4, #8]
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	1c5a      	adds	r2, r3, #1
 800e5ec:	6022      	str	r2, [r4, #0]
 800e5ee:	701e      	strb	r6, [r3, #0]
 800e5f0:	6963      	ldr	r3, [r4, #20]
 800e5f2:	3001      	adds	r0, #1
 800e5f4:	4283      	cmp	r3, r0
 800e5f6:	d004      	beq.n	800e602 <__swbuf_r+0x62>
 800e5f8:	89a3      	ldrh	r3, [r4, #12]
 800e5fa:	07db      	lsls	r3, r3, #31
 800e5fc:	d506      	bpl.n	800e60c <__swbuf_r+0x6c>
 800e5fe:	2e0a      	cmp	r6, #10
 800e600:	d104      	bne.n	800e60c <__swbuf_r+0x6c>
 800e602:	4621      	mov	r1, r4
 800e604:	4628      	mov	r0, r5
 800e606:	f000 ff89 	bl	800f51c <_fflush_r>
 800e60a:	b988      	cbnz	r0, 800e630 <__swbuf_r+0x90>
 800e60c:	4638      	mov	r0, r7
 800e60e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e610:	4b0a      	ldr	r3, [pc, #40]	; (800e63c <__swbuf_r+0x9c>)
 800e612:	429c      	cmp	r4, r3
 800e614:	d101      	bne.n	800e61a <__swbuf_r+0x7a>
 800e616:	68ac      	ldr	r4, [r5, #8]
 800e618:	e7cf      	b.n	800e5ba <__swbuf_r+0x1a>
 800e61a:	4b09      	ldr	r3, [pc, #36]	; (800e640 <__swbuf_r+0xa0>)
 800e61c:	429c      	cmp	r4, r3
 800e61e:	bf08      	it	eq
 800e620:	68ec      	ldreq	r4, [r5, #12]
 800e622:	e7ca      	b.n	800e5ba <__swbuf_r+0x1a>
 800e624:	4621      	mov	r1, r4
 800e626:	4628      	mov	r0, r5
 800e628:	f000 f80c 	bl	800e644 <__swsetup_r>
 800e62c:	2800      	cmp	r0, #0
 800e62e:	d0cb      	beq.n	800e5c8 <__swbuf_r+0x28>
 800e630:	f04f 37ff 	mov.w	r7, #4294967295
 800e634:	e7ea      	b.n	800e60c <__swbuf_r+0x6c>
 800e636:	bf00      	nop
 800e638:	080112cc 	.word	0x080112cc
 800e63c:	080112ec 	.word	0x080112ec
 800e640:	080112ac 	.word	0x080112ac

0800e644 <__swsetup_r>:
 800e644:	4b32      	ldr	r3, [pc, #200]	; (800e710 <__swsetup_r+0xcc>)
 800e646:	b570      	push	{r4, r5, r6, lr}
 800e648:	681d      	ldr	r5, [r3, #0]
 800e64a:	4606      	mov	r6, r0
 800e64c:	460c      	mov	r4, r1
 800e64e:	b125      	cbz	r5, 800e65a <__swsetup_r+0x16>
 800e650:	69ab      	ldr	r3, [r5, #24]
 800e652:	b913      	cbnz	r3, 800e65a <__swsetup_r+0x16>
 800e654:	4628      	mov	r0, r5
 800e656:	f000 fff5 	bl	800f644 <__sinit>
 800e65a:	4b2e      	ldr	r3, [pc, #184]	; (800e714 <__swsetup_r+0xd0>)
 800e65c:	429c      	cmp	r4, r3
 800e65e:	d10f      	bne.n	800e680 <__swsetup_r+0x3c>
 800e660:	686c      	ldr	r4, [r5, #4]
 800e662:	89a3      	ldrh	r3, [r4, #12]
 800e664:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e668:	0719      	lsls	r1, r3, #28
 800e66a:	d42c      	bmi.n	800e6c6 <__swsetup_r+0x82>
 800e66c:	06dd      	lsls	r5, r3, #27
 800e66e:	d411      	bmi.n	800e694 <__swsetup_r+0x50>
 800e670:	2309      	movs	r3, #9
 800e672:	6033      	str	r3, [r6, #0]
 800e674:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e678:	81a3      	strh	r3, [r4, #12]
 800e67a:	f04f 30ff 	mov.w	r0, #4294967295
 800e67e:	e03e      	b.n	800e6fe <__swsetup_r+0xba>
 800e680:	4b25      	ldr	r3, [pc, #148]	; (800e718 <__swsetup_r+0xd4>)
 800e682:	429c      	cmp	r4, r3
 800e684:	d101      	bne.n	800e68a <__swsetup_r+0x46>
 800e686:	68ac      	ldr	r4, [r5, #8]
 800e688:	e7eb      	b.n	800e662 <__swsetup_r+0x1e>
 800e68a:	4b24      	ldr	r3, [pc, #144]	; (800e71c <__swsetup_r+0xd8>)
 800e68c:	429c      	cmp	r4, r3
 800e68e:	bf08      	it	eq
 800e690:	68ec      	ldreq	r4, [r5, #12]
 800e692:	e7e6      	b.n	800e662 <__swsetup_r+0x1e>
 800e694:	0758      	lsls	r0, r3, #29
 800e696:	d512      	bpl.n	800e6be <__swsetup_r+0x7a>
 800e698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e69a:	b141      	cbz	r1, 800e6ae <__swsetup_r+0x6a>
 800e69c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e6a0:	4299      	cmp	r1, r3
 800e6a2:	d002      	beq.n	800e6aa <__swsetup_r+0x66>
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f001 fc6d 	bl	800ff84 <_free_r>
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	6363      	str	r3, [r4, #52]	; 0x34
 800e6ae:	89a3      	ldrh	r3, [r4, #12]
 800e6b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e6b4:	81a3      	strh	r3, [r4, #12]
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	6063      	str	r3, [r4, #4]
 800e6ba:	6923      	ldr	r3, [r4, #16]
 800e6bc:	6023      	str	r3, [r4, #0]
 800e6be:	89a3      	ldrh	r3, [r4, #12]
 800e6c0:	f043 0308 	orr.w	r3, r3, #8
 800e6c4:	81a3      	strh	r3, [r4, #12]
 800e6c6:	6923      	ldr	r3, [r4, #16]
 800e6c8:	b94b      	cbnz	r3, 800e6de <__swsetup_r+0x9a>
 800e6ca:	89a3      	ldrh	r3, [r4, #12]
 800e6cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e6d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6d4:	d003      	beq.n	800e6de <__swsetup_r+0x9a>
 800e6d6:	4621      	mov	r1, r4
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f001 f87d 	bl	800f7d8 <__smakebuf_r>
 800e6de:	89a0      	ldrh	r0, [r4, #12]
 800e6e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6e4:	f010 0301 	ands.w	r3, r0, #1
 800e6e8:	d00a      	beq.n	800e700 <__swsetup_r+0xbc>
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	60a3      	str	r3, [r4, #8]
 800e6ee:	6963      	ldr	r3, [r4, #20]
 800e6f0:	425b      	negs	r3, r3
 800e6f2:	61a3      	str	r3, [r4, #24]
 800e6f4:	6923      	ldr	r3, [r4, #16]
 800e6f6:	b943      	cbnz	r3, 800e70a <__swsetup_r+0xc6>
 800e6f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6fc:	d1ba      	bne.n	800e674 <__swsetup_r+0x30>
 800e6fe:	bd70      	pop	{r4, r5, r6, pc}
 800e700:	0781      	lsls	r1, r0, #30
 800e702:	bf58      	it	pl
 800e704:	6963      	ldrpl	r3, [r4, #20]
 800e706:	60a3      	str	r3, [r4, #8]
 800e708:	e7f4      	b.n	800e6f4 <__swsetup_r+0xb0>
 800e70a:	2000      	movs	r0, #0
 800e70c:	e7f7      	b.n	800e6fe <__swsetup_r+0xba>
 800e70e:	bf00      	nop
 800e710:	20000650 	.word	0x20000650
 800e714:	080112cc 	.word	0x080112cc
 800e718:	080112ec 	.word	0x080112ec
 800e71c:	080112ac 	.word	0x080112ac

0800e720 <quorem>:
 800e720:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e724:	6903      	ldr	r3, [r0, #16]
 800e726:	690c      	ldr	r4, [r1, #16]
 800e728:	42a3      	cmp	r3, r4
 800e72a:	4607      	mov	r7, r0
 800e72c:	f2c0 8081 	blt.w	800e832 <quorem+0x112>
 800e730:	3c01      	subs	r4, #1
 800e732:	f101 0814 	add.w	r8, r1, #20
 800e736:	f100 0514 	add.w	r5, r0, #20
 800e73a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e73e:	9301      	str	r3, [sp, #4]
 800e740:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e744:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e748:	3301      	adds	r3, #1
 800e74a:	429a      	cmp	r2, r3
 800e74c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e754:	fbb2 f6f3 	udiv	r6, r2, r3
 800e758:	d331      	bcc.n	800e7be <quorem+0x9e>
 800e75a:	f04f 0e00 	mov.w	lr, #0
 800e75e:	4640      	mov	r0, r8
 800e760:	46ac      	mov	ip, r5
 800e762:	46f2      	mov	sl, lr
 800e764:	f850 2b04 	ldr.w	r2, [r0], #4
 800e768:	b293      	uxth	r3, r2
 800e76a:	fb06 e303 	mla	r3, r6, r3, lr
 800e76e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e772:	b29b      	uxth	r3, r3
 800e774:	ebaa 0303 	sub.w	r3, sl, r3
 800e778:	0c12      	lsrs	r2, r2, #16
 800e77a:	f8dc a000 	ldr.w	sl, [ip]
 800e77e:	fb06 e202 	mla	r2, r6, r2, lr
 800e782:	fa13 f38a 	uxtah	r3, r3, sl
 800e786:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e78a:	fa1f fa82 	uxth.w	sl, r2
 800e78e:	f8dc 2000 	ldr.w	r2, [ip]
 800e792:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800e796:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7a0:	4581      	cmp	r9, r0
 800e7a2:	f84c 3b04 	str.w	r3, [ip], #4
 800e7a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e7aa:	d2db      	bcs.n	800e764 <quorem+0x44>
 800e7ac:	f855 300b 	ldr.w	r3, [r5, fp]
 800e7b0:	b92b      	cbnz	r3, 800e7be <quorem+0x9e>
 800e7b2:	9b01      	ldr	r3, [sp, #4]
 800e7b4:	3b04      	subs	r3, #4
 800e7b6:	429d      	cmp	r5, r3
 800e7b8:	461a      	mov	r2, r3
 800e7ba:	d32e      	bcc.n	800e81a <quorem+0xfa>
 800e7bc:	613c      	str	r4, [r7, #16]
 800e7be:	4638      	mov	r0, r7
 800e7c0:	f001 fad0 	bl	800fd64 <__mcmp>
 800e7c4:	2800      	cmp	r0, #0
 800e7c6:	db24      	blt.n	800e812 <quorem+0xf2>
 800e7c8:	3601      	adds	r6, #1
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	f04f 0c00 	mov.w	ip, #0
 800e7d0:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7d4:	f8d0 e000 	ldr.w	lr, [r0]
 800e7d8:	b293      	uxth	r3, r2
 800e7da:	ebac 0303 	sub.w	r3, ip, r3
 800e7de:	0c12      	lsrs	r2, r2, #16
 800e7e0:	fa13 f38e 	uxtah	r3, r3, lr
 800e7e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e7e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7ec:	b29b      	uxth	r3, r3
 800e7ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7f2:	45c1      	cmp	r9, r8
 800e7f4:	f840 3b04 	str.w	r3, [r0], #4
 800e7f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e7fc:	d2e8      	bcs.n	800e7d0 <quorem+0xb0>
 800e7fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e802:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e806:	b922      	cbnz	r2, 800e812 <quorem+0xf2>
 800e808:	3b04      	subs	r3, #4
 800e80a:	429d      	cmp	r5, r3
 800e80c:	461a      	mov	r2, r3
 800e80e:	d30a      	bcc.n	800e826 <quorem+0x106>
 800e810:	613c      	str	r4, [r7, #16]
 800e812:	4630      	mov	r0, r6
 800e814:	b003      	add	sp, #12
 800e816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e81a:	6812      	ldr	r2, [r2, #0]
 800e81c:	3b04      	subs	r3, #4
 800e81e:	2a00      	cmp	r2, #0
 800e820:	d1cc      	bne.n	800e7bc <quorem+0x9c>
 800e822:	3c01      	subs	r4, #1
 800e824:	e7c7      	b.n	800e7b6 <quorem+0x96>
 800e826:	6812      	ldr	r2, [r2, #0]
 800e828:	3b04      	subs	r3, #4
 800e82a:	2a00      	cmp	r2, #0
 800e82c:	d1f0      	bne.n	800e810 <quorem+0xf0>
 800e82e:	3c01      	subs	r4, #1
 800e830:	e7eb      	b.n	800e80a <quorem+0xea>
 800e832:	2000      	movs	r0, #0
 800e834:	e7ee      	b.n	800e814 <quorem+0xf4>
	...

0800e838 <_dtoa_r>:
 800e838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e83c:	ed2d 8b02 	vpush	{d8}
 800e840:	ec57 6b10 	vmov	r6, r7, d0
 800e844:	b095      	sub	sp, #84	; 0x54
 800e846:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e848:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e84c:	9105      	str	r1, [sp, #20]
 800e84e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800e852:	4604      	mov	r4, r0
 800e854:	9209      	str	r2, [sp, #36]	; 0x24
 800e856:	930f      	str	r3, [sp, #60]	; 0x3c
 800e858:	b975      	cbnz	r5, 800e878 <_dtoa_r+0x40>
 800e85a:	2010      	movs	r0, #16
 800e85c:	f000 fffc 	bl	800f858 <malloc>
 800e860:	4602      	mov	r2, r0
 800e862:	6260      	str	r0, [r4, #36]	; 0x24
 800e864:	b920      	cbnz	r0, 800e870 <_dtoa_r+0x38>
 800e866:	4bb2      	ldr	r3, [pc, #712]	; (800eb30 <_dtoa_r+0x2f8>)
 800e868:	21ea      	movs	r1, #234	; 0xea
 800e86a:	48b2      	ldr	r0, [pc, #712]	; (800eb34 <_dtoa_r+0x2fc>)
 800e86c:	f001 ff50 	bl	8010710 <__assert_func>
 800e870:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e874:	6005      	str	r5, [r0, #0]
 800e876:	60c5      	str	r5, [r0, #12]
 800e878:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e87a:	6819      	ldr	r1, [r3, #0]
 800e87c:	b151      	cbz	r1, 800e894 <_dtoa_r+0x5c>
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	604a      	str	r2, [r1, #4]
 800e882:	2301      	movs	r3, #1
 800e884:	4093      	lsls	r3, r2
 800e886:	608b      	str	r3, [r1, #8]
 800e888:	4620      	mov	r0, r4
 800e88a:	f001 f82d 	bl	800f8e8 <_Bfree>
 800e88e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e890:	2200      	movs	r2, #0
 800e892:	601a      	str	r2, [r3, #0]
 800e894:	1e3b      	subs	r3, r7, #0
 800e896:	bfb9      	ittee	lt
 800e898:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e89c:	9303      	strlt	r3, [sp, #12]
 800e89e:	2300      	movge	r3, #0
 800e8a0:	f8c8 3000 	strge.w	r3, [r8]
 800e8a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800e8a8:	4ba3      	ldr	r3, [pc, #652]	; (800eb38 <_dtoa_r+0x300>)
 800e8aa:	bfbc      	itt	lt
 800e8ac:	2201      	movlt	r2, #1
 800e8ae:	f8c8 2000 	strlt.w	r2, [r8]
 800e8b2:	ea33 0309 	bics.w	r3, r3, r9
 800e8b6:	d11b      	bne.n	800e8f0 <_dtoa_r+0xb8>
 800e8b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e8ba:	f242 730f 	movw	r3, #9999	; 0x270f
 800e8be:	6013      	str	r3, [r2, #0]
 800e8c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e8c4:	4333      	orrs	r3, r6
 800e8c6:	f000 857a 	beq.w	800f3be <_dtoa_r+0xb86>
 800e8ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8cc:	b963      	cbnz	r3, 800e8e8 <_dtoa_r+0xb0>
 800e8ce:	4b9b      	ldr	r3, [pc, #620]	; (800eb3c <_dtoa_r+0x304>)
 800e8d0:	e024      	b.n	800e91c <_dtoa_r+0xe4>
 800e8d2:	4b9b      	ldr	r3, [pc, #620]	; (800eb40 <_dtoa_r+0x308>)
 800e8d4:	9300      	str	r3, [sp, #0]
 800e8d6:	3308      	adds	r3, #8
 800e8d8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8da:	6013      	str	r3, [r2, #0]
 800e8dc:	9800      	ldr	r0, [sp, #0]
 800e8de:	b015      	add	sp, #84	; 0x54
 800e8e0:	ecbd 8b02 	vpop	{d8}
 800e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8e8:	4b94      	ldr	r3, [pc, #592]	; (800eb3c <_dtoa_r+0x304>)
 800e8ea:	9300      	str	r3, [sp, #0]
 800e8ec:	3303      	adds	r3, #3
 800e8ee:	e7f3      	b.n	800e8d8 <_dtoa_r+0xa0>
 800e8f0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	ec51 0b17 	vmov	r0, r1, d7
 800e8fa:	2300      	movs	r3, #0
 800e8fc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800e900:	f7f2 f8e2 	bl	8000ac8 <__aeabi_dcmpeq>
 800e904:	4680      	mov	r8, r0
 800e906:	b158      	cbz	r0, 800e920 <_dtoa_r+0xe8>
 800e908:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800e90a:	2301      	movs	r3, #1
 800e90c:	6013      	str	r3, [r2, #0]
 800e90e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e910:	2b00      	cmp	r3, #0
 800e912:	f000 8551 	beq.w	800f3b8 <_dtoa_r+0xb80>
 800e916:	488b      	ldr	r0, [pc, #556]	; (800eb44 <_dtoa_r+0x30c>)
 800e918:	6018      	str	r0, [r3, #0]
 800e91a:	1e43      	subs	r3, r0, #1
 800e91c:	9300      	str	r3, [sp, #0]
 800e91e:	e7dd      	b.n	800e8dc <_dtoa_r+0xa4>
 800e920:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800e924:	aa12      	add	r2, sp, #72	; 0x48
 800e926:	a913      	add	r1, sp, #76	; 0x4c
 800e928:	4620      	mov	r0, r4
 800e92a:	f001 fabf 	bl	800feac <__d2b>
 800e92e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e932:	4683      	mov	fp, r0
 800e934:	2d00      	cmp	r5, #0
 800e936:	d07c      	beq.n	800ea32 <_dtoa_r+0x1fa>
 800e938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e93a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800e93e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e942:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800e946:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e94a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e94e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e952:	4b7d      	ldr	r3, [pc, #500]	; (800eb48 <_dtoa_r+0x310>)
 800e954:	2200      	movs	r2, #0
 800e956:	4630      	mov	r0, r6
 800e958:	4639      	mov	r1, r7
 800e95a:	f7f1 fc95 	bl	8000288 <__aeabi_dsub>
 800e95e:	a36e      	add	r3, pc, #440	; (adr r3, 800eb18 <_dtoa_r+0x2e0>)
 800e960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e964:	f7f1 fe48 	bl	80005f8 <__aeabi_dmul>
 800e968:	a36d      	add	r3, pc, #436	; (adr r3, 800eb20 <_dtoa_r+0x2e8>)
 800e96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96e:	f7f1 fc8d 	bl	800028c <__adddf3>
 800e972:	4606      	mov	r6, r0
 800e974:	4628      	mov	r0, r5
 800e976:	460f      	mov	r7, r1
 800e978:	f7f1 fdd4 	bl	8000524 <__aeabi_i2d>
 800e97c:	a36a      	add	r3, pc, #424	; (adr r3, 800eb28 <_dtoa_r+0x2f0>)
 800e97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e982:	f7f1 fe39 	bl	80005f8 <__aeabi_dmul>
 800e986:	4602      	mov	r2, r0
 800e988:	460b      	mov	r3, r1
 800e98a:	4630      	mov	r0, r6
 800e98c:	4639      	mov	r1, r7
 800e98e:	f7f1 fc7d 	bl	800028c <__adddf3>
 800e992:	4606      	mov	r6, r0
 800e994:	460f      	mov	r7, r1
 800e996:	f7f2 f8df 	bl	8000b58 <__aeabi_d2iz>
 800e99a:	2200      	movs	r2, #0
 800e99c:	4682      	mov	sl, r0
 800e99e:	2300      	movs	r3, #0
 800e9a0:	4630      	mov	r0, r6
 800e9a2:	4639      	mov	r1, r7
 800e9a4:	f7f2 f89a 	bl	8000adc <__aeabi_dcmplt>
 800e9a8:	b148      	cbz	r0, 800e9be <_dtoa_r+0x186>
 800e9aa:	4650      	mov	r0, sl
 800e9ac:	f7f1 fdba 	bl	8000524 <__aeabi_i2d>
 800e9b0:	4632      	mov	r2, r6
 800e9b2:	463b      	mov	r3, r7
 800e9b4:	f7f2 f888 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9b8:	b908      	cbnz	r0, 800e9be <_dtoa_r+0x186>
 800e9ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9be:	f1ba 0f16 	cmp.w	sl, #22
 800e9c2:	d854      	bhi.n	800ea6e <_dtoa_r+0x236>
 800e9c4:	4b61      	ldr	r3, [pc, #388]	; (800eb4c <_dtoa_r+0x314>)
 800e9c6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e9ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800e9d2:	f7f2 f883 	bl	8000adc <__aeabi_dcmplt>
 800e9d6:	2800      	cmp	r0, #0
 800e9d8:	d04b      	beq.n	800ea72 <_dtoa_r+0x23a>
 800e9da:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e9de:	2300      	movs	r3, #0
 800e9e0:	930e      	str	r3, [sp, #56]	; 0x38
 800e9e2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e9e4:	1b5d      	subs	r5, r3, r5
 800e9e6:	1e6b      	subs	r3, r5, #1
 800e9e8:	9304      	str	r3, [sp, #16]
 800e9ea:	bf43      	ittte	mi
 800e9ec:	2300      	movmi	r3, #0
 800e9ee:	f1c5 0801 	rsbmi	r8, r5, #1
 800e9f2:	9304      	strmi	r3, [sp, #16]
 800e9f4:	f04f 0800 	movpl.w	r8, #0
 800e9f8:	f1ba 0f00 	cmp.w	sl, #0
 800e9fc:	db3b      	blt.n	800ea76 <_dtoa_r+0x23e>
 800e9fe:	9b04      	ldr	r3, [sp, #16]
 800ea00:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ea04:	4453      	add	r3, sl
 800ea06:	9304      	str	r3, [sp, #16]
 800ea08:	2300      	movs	r3, #0
 800ea0a:	9306      	str	r3, [sp, #24]
 800ea0c:	9b05      	ldr	r3, [sp, #20]
 800ea0e:	2b09      	cmp	r3, #9
 800ea10:	d869      	bhi.n	800eae6 <_dtoa_r+0x2ae>
 800ea12:	2b05      	cmp	r3, #5
 800ea14:	bfc4      	itt	gt
 800ea16:	3b04      	subgt	r3, #4
 800ea18:	9305      	strgt	r3, [sp, #20]
 800ea1a:	9b05      	ldr	r3, [sp, #20]
 800ea1c:	f1a3 0302 	sub.w	r3, r3, #2
 800ea20:	bfcc      	ite	gt
 800ea22:	2500      	movgt	r5, #0
 800ea24:	2501      	movle	r5, #1
 800ea26:	2b03      	cmp	r3, #3
 800ea28:	d869      	bhi.n	800eafe <_dtoa_r+0x2c6>
 800ea2a:	e8df f003 	tbb	[pc, r3]
 800ea2e:	4e2c      	.short	0x4e2c
 800ea30:	5a4c      	.short	0x5a4c
 800ea32:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ea36:	441d      	add	r5, r3
 800ea38:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea3c:	2b20      	cmp	r3, #32
 800ea3e:	bfc1      	itttt	gt
 800ea40:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea44:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea48:	fa09 f303 	lslgt.w	r3, r9, r3
 800ea4c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea50:	bfda      	itte	le
 800ea52:	f1c3 0320 	rsble	r3, r3, #32
 800ea56:	fa06 f003 	lslle.w	r0, r6, r3
 800ea5a:	4318      	orrgt	r0, r3
 800ea5c:	f7f1 fd52 	bl	8000504 <__aeabi_ui2d>
 800ea60:	2301      	movs	r3, #1
 800ea62:	4606      	mov	r6, r0
 800ea64:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ea68:	3d01      	subs	r5, #1
 800ea6a:	9310      	str	r3, [sp, #64]	; 0x40
 800ea6c:	e771      	b.n	800e952 <_dtoa_r+0x11a>
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e7b6      	b.n	800e9e0 <_dtoa_r+0x1a8>
 800ea72:	900e      	str	r0, [sp, #56]	; 0x38
 800ea74:	e7b5      	b.n	800e9e2 <_dtoa_r+0x1aa>
 800ea76:	f1ca 0300 	rsb	r3, sl, #0
 800ea7a:	9306      	str	r3, [sp, #24]
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	eba8 080a 	sub.w	r8, r8, sl
 800ea82:	930d      	str	r3, [sp, #52]	; 0x34
 800ea84:	e7c2      	b.n	800ea0c <_dtoa_r+0x1d4>
 800ea86:	2300      	movs	r3, #0
 800ea88:	9308      	str	r3, [sp, #32]
 800ea8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	dc39      	bgt.n	800eb04 <_dtoa_r+0x2cc>
 800ea90:	f04f 0901 	mov.w	r9, #1
 800ea94:	f8cd 9004 	str.w	r9, [sp, #4]
 800ea98:	464b      	mov	r3, r9
 800ea9a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800ea9e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800eaa0:	2200      	movs	r2, #0
 800eaa2:	6042      	str	r2, [r0, #4]
 800eaa4:	2204      	movs	r2, #4
 800eaa6:	f102 0614 	add.w	r6, r2, #20
 800eaaa:	429e      	cmp	r6, r3
 800eaac:	6841      	ldr	r1, [r0, #4]
 800eaae:	d92f      	bls.n	800eb10 <_dtoa_r+0x2d8>
 800eab0:	4620      	mov	r0, r4
 800eab2:	f000 fed9 	bl	800f868 <_Balloc>
 800eab6:	9000      	str	r0, [sp, #0]
 800eab8:	2800      	cmp	r0, #0
 800eaba:	d14b      	bne.n	800eb54 <_dtoa_r+0x31c>
 800eabc:	4b24      	ldr	r3, [pc, #144]	; (800eb50 <_dtoa_r+0x318>)
 800eabe:	4602      	mov	r2, r0
 800eac0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eac4:	e6d1      	b.n	800e86a <_dtoa_r+0x32>
 800eac6:	2301      	movs	r3, #1
 800eac8:	e7de      	b.n	800ea88 <_dtoa_r+0x250>
 800eaca:	2300      	movs	r3, #0
 800eacc:	9308      	str	r3, [sp, #32]
 800eace:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ead0:	eb0a 0903 	add.w	r9, sl, r3
 800ead4:	f109 0301 	add.w	r3, r9, #1
 800ead8:	2b01      	cmp	r3, #1
 800eada:	9301      	str	r3, [sp, #4]
 800eadc:	bfb8      	it	lt
 800eade:	2301      	movlt	r3, #1
 800eae0:	e7dd      	b.n	800ea9e <_dtoa_r+0x266>
 800eae2:	2301      	movs	r3, #1
 800eae4:	e7f2      	b.n	800eacc <_dtoa_r+0x294>
 800eae6:	2501      	movs	r5, #1
 800eae8:	2300      	movs	r3, #0
 800eaea:	9305      	str	r3, [sp, #20]
 800eaec:	9508      	str	r5, [sp, #32]
 800eaee:	f04f 39ff 	mov.w	r9, #4294967295
 800eaf2:	2200      	movs	r2, #0
 800eaf4:	f8cd 9004 	str.w	r9, [sp, #4]
 800eaf8:	2312      	movs	r3, #18
 800eafa:	9209      	str	r2, [sp, #36]	; 0x24
 800eafc:	e7cf      	b.n	800ea9e <_dtoa_r+0x266>
 800eafe:	2301      	movs	r3, #1
 800eb00:	9308      	str	r3, [sp, #32]
 800eb02:	e7f4      	b.n	800eaee <_dtoa_r+0x2b6>
 800eb04:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800eb08:	f8cd 9004 	str.w	r9, [sp, #4]
 800eb0c:	464b      	mov	r3, r9
 800eb0e:	e7c6      	b.n	800ea9e <_dtoa_r+0x266>
 800eb10:	3101      	adds	r1, #1
 800eb12:	6041      	str	r1, [r0, #4]
 800eb14:	0052      	lsls	r2, r2, #1
 800eb16:	e7c6      	b.n	800eaa6 <_dtoa_r+0x26e>
 800eb18:	636f4361 	.word	0x636f4361
 800eb1c:	3fd287a7 	.word	0x3fd287a7
 800eb20:	8b60c8b3 	.word	0x8b60c8b3
 800eb24:	3fc68a28 	.word	0x3fc68a28
 800eb28:	509f79fb 	.word	0x509f79fb
 800eb2c:	3fd34413 	.word	0x3fd34413
 800eb30:	08011225 	.word	0x08011225
 800eb34:	0801123c 	.word	0x0801123c
 800eb38:	7ff00000 	.word	0x7ff00000
 800eb3c:	08011221 	.word	0x08011221
 800eb40:	08011218 	.word	0x08011218
 800eb44:	080111f5 	.word	0x080111f5
 800eb48:	3ff80000 	.word	0x3ff80000
 800eb4c:	08011398 	.word	0x08011398
 800eb50:	0801129b 	.word	0x0801129b
 800eb54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb56:	9a00      	ldr	r2, [sp, #0]
 800eb58:	601a      	str	r2, [r3, #0]
 800eb5a:	9b01      	ldr	r3, [sp, #4]
 800eb5c:	2b0e      	cmp	r3, #14
 800eb5e:	f200 80ad 	bhi.w	800ecbc <_dtoa_r+0x484>
 800eb62:	2d00      	cmp	r5, #0
 800eb64:	f000 80aa 	beq.w	800ecbc <_dtoa_r+0x484>
 800eb68:	f1ba 0f00 	cmp.w	sl, #0
 800eb6c:	dd36      	ble.n	800ebdc <_dtoa_r+0x3a4>
 800eb6e:	4ac3      	ldr	r2, [pc, #780]	; (800ee7c <_dtoa_r+0x644>)
 800eb70:	f00a 030f 	and.w	r3, sl, #15
 800eb74:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb78:	ed93 7b00 	vldr	d7, [r3]
 800eb7c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800eb80:	ea4f 172a 	mov.w	r7, sl, asr #4
 800eb84:	eeb0 8a47 	vmov.f32	s16, s14
 800eb88:	eef0 8a67 	vmov.f32	s17, s15
 800eb8c:	d016      	beq.n	800ebbc <_dtoa_r+0x384>
 800eb8e:	4bbc      	ldr	r3, [pc, #752]	; (800ee80 <_dtoa_r+0x648>)
 800eb90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800eb94:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb98:	f7f1 fe58 	bl	800084c <__aeabi_ddiv>
 800eb9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800eba0:	f007 070f 	and.w	r7, r7, #15
 800eba4:	2503      	movs	r5, #3
 800eba6:	4eb6      	ldr	r6, [pc, #728]	; (800ee80 <_dtoa_r+0x648>)
 800eba8:	b957      	cbnz	r7, 800ebc0 <_dtoa_r+0x388>
 800ebaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ebae:	ec53 2b18 	vmov	r2, r3, d8
 800ebb2:	f7f1 fe4b 	bl	800084c <__aeabi_ddiv>
 800ebb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ebba:	e029      	b.n	800ec10 <_dtoa_r+0x3d8>
 800ebbc:	2502      	movs	r5, #2
 800ebbe:	e7f2      	b.n	800eba6 <_dtoa_r+0x36e>
 800ebc0:	07f9      	lsls	r1, r7, #31
 800ebc2:	d508      	bpl.n	800ebd6 <_dtoa_r+0x39e>
 800ebc4:	ec51 0b18 	vmov	r0, r1, d8
 800ebc8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ebcc:	f7f1 fd14 	bl	80005f8 <__aeabi_dmul>
 800ebd0:	ec41 0b18 	vmov	d8, r0, r1
 800ebd4:	3501      	adds	r5, #1
 800ebd6:	107f      	asrs	r7, r7, #1
 800ebd8:	3608      	adds	r6, #8
 800ebda:	e7e5      	b.n	800eba8 <_dtoa_r+0x370>
 800ebdc:	f000 80a6 	beq.w	800ed2c <_dtoa_r+0x4f4>
 800ebe0:	f1ca 0600 	rsb	r6, sl, #0
 800ebe4:	4ba5      	ldr	r3, [pc, #660]	; (800ee7c <_dtoa_r+0x644>)
 800ebe6:	4fa6      	ldr	r7, [pc, #664]	; (800ee80 <_dtoa_r+0x648>)
 800ebe8:	f006 020f 	and.w	r2, r6, #15
 800ebec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebf4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ebf8:	f7f1 fcfe 	bl	80005f8 <__aeabi_dmul>
 800ebfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec00:	1136      	asrs	r6, r6, #4
 800ec02:	2300      	movs	r3, #0
 800ec04:	2502      	movs	r5, #2
 800ec06:	2e00      	cmp	r6, #0
 800ec08:	f040 8085 	bne.w	800ed16 <_dtoa_r+0x4de>
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d1d2      	bne.n	800ebb6 <_dtoa_r+0x37e>
 800ec10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	f000 808c 	beq.w	800ed30 <_dtoa_r+0x4f8>
 800ec18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec1c:	4b99      	ldr	r3, [pc, #612]	; (800ee84 <_dtoa_r+0x64c>)
 800ec1e:	2200      	movs	r2, #0
 800ec20:	4630      	mov	r0, r6
 800ec22:	4639      	mov	r1, r7
 800ec24:	f7f1 ff5a 	bl	8000adc <__aeabi_dcmplt>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	f000 8081 	beq.w	800ed30 <_dtoa_r+0x4f8>
 800ec2e:	9b01      	ldr	r3, [sp, #4]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d07d      	beq.n	800ed30 <_dtoa_r+0x4f8>
 800ec34:	f1b9 0f00 	cmp.w	r9, #0
 800ec38:	dd3c      	ble.n	800ecb4 <_dtoa_r+0x47c>
 800ec3a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800ec3e:	9307      	str	r3, [sp, #28]
 800ec40:	2200      	movs	r2, #0
 800ec42:	4b91      	ldr	r3, [pc, #580]	; (800ee88 <_dtoa_r+0x650>)
 800ec44:	4630      	mov	r0, r6
 800ec46:	4639      	mov	r1, r7
 800ec48:	f7f1 fcd6 	bl	80005f8 <__aeabi_dmul>
 800ec4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec50:	3501      	adds	r5, #1
 800ec52:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800ec56:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800ec5a:	4628      	mov	r0, r5
 800ec5c:	f7f1 fc62 	bl	8000524 <__aeabi_i2d>
 800ec60:	4632      	mov	r2, r6
 800ec62:	463b      	mov	r3, r7
 800ec64:	f7f1 fcc8 	bl	80005f8 <__aeabi_dmul>
 800ec68:	4b88      	ldr	r3, [pc, #544]	; (800ee8c <_dtoa_r+0x654>)
 800ec6a:	2200      	movs	r2, #0
 800ec6c:	f7f1 fb0e 	bl	800028c <__adddf3>
 800ec70:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800ec74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ec78:	9303      	str	r3, [sp, #12]
 800ec7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	d15c      	bne.n	800ed3a <_dtoa_r+0x502>
 800ec80:	4b83      	ldr	r3, [pc, #524]	; (800ee90 <_dtoa_r+0x658>)
 800ec82:	2200      	movs	r2, #0
 800ec84:	4630      	mov	r0, r6
 800ec86:	4639      	mov	r1, r7
 800ec88:	f7f1 fafe 	bl	8000288 <__aeabi_dsub>
 800ec8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ec90:	4606      	mov	r6, r0
 800ec92:	460f      	mov	r7, r1
 800ec94:	f7f1 ff40 	bl	8000b18 <__aeabi_dcmpgt>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	f040 8296 	bne.w	800f1ca <_dtoa_r+0x992>
 800ec9e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800eca2:	4630      	mov	r0, r6
 800eca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eca8:	4639      	mov	r1, r7
 800ecaa:	f7f1 ff17 	bl	8000adc <__aeabi_dcmplt>
 800ecae:	2800      	cmp	r0, #0
 800ecb0:	f040 8288 	bne.w	800f1c4 <_dtoa_r+0x98c>
 800ecb4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ecb8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ecbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	f2c0 8158 	blt.w	800ef74 <_dtoa_r+0x73c>
 800ecc4:	f1ba 0f0e 	cmp.w	sl, #14
 800ecc8:	f300 8154 	bgt.w	800ef74 <_dtoa_r+0x73c>
 800eccc:	4b6b      	ldr	r3, [pc, #428]	; (800ee7c <_dtoa_r+0x644>)
 800ecce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ecd2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ecd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	f280 80e3 	bge.w	800eea4 <_dtoa_r+0x66c>
 800ecde:	9b01      	ldr	r3, [sp, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	f300 80df 	bgt.w	800eea4 <_dtoa_r+0x66c>
 800ece6:	f040 826d 	bne.w	800f1c4 <_dtoa_r+0x98c>
 800ecea:	4b69      	ldr	r3, [pc, #420]	; (800ee90 <_dtoa_r+0x658>)
 800ecec:	2200      	movs	r2, #0
 800ecee:	4640      	mov	r0, r8
 800ecf0:	4649      	mov	r1, r9
 800ecf2:	f7f1 fc81 	bl	80005f8 <__aeabi_dmul>
 800ecf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ecfa:	f7f1 ff03 	bl	8000b04 <__aeabi_dcmpge>
 800ecfe:	9e01      	ldr	r6, [sp, #4]
 800ed00:	4637      	mov	r7, r6
 800ed02:	2800      	cmp	r0, #0
 800ed04:	f040 8243 	bne.w	800f18e <_dtoa_r+0x956>
 800ed08:	9d00      	ldr	r5, [sp, #0]
 800ed0a:	2331      	movs	r3, #49	; 0x31
 800ed0c:	f805 3b01 	strb.w	r3, [r5], #1
 800ed10:	f10a 0a01 	add.w	sl, sl, #1
 800ed14:	e23f      	b.n	800f196 <_dtoa_r+0x95e>
 800ed16:	07f2      	lsls	r2, r6, #31
 800ed18:	d505      	bpl.n	800ed26 <_dtoa_r+0x4ee>
 800ed1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed1e:	f7f1 fc6b 	bl	80005f8 <__aeabi_dmul>
 800ed22:	3501      	adds	r5, #1
 800ed24:	2301      	movs	r3, #1
 800ed26:	1076      	asrs	r6, r6, #1
 800ed28:	3708      	adds	r7, #8
 800ed2a:	e76c      	b.n	800ec06 <_dtoa_r+0x3ce>
 800ed2c:	2502      	movs	r5, #2
 800ed2e:	e76f      	b.n	800ec10 <_dtoa_r+0x3d8>
 800ed30:	9b01      	ldr	r3, [sp, #4]
 800ed32:	f8cd a01c 	str.w	sl, [sp, #28]
 800ed36:	930c      	str	r3, [sp, #48]	; 0x30
 800ed38:	e78d      	b.n	800ec56 <_dtoa_r+0x41e>
 800ed3a:	9900      	ldr	r1, [sp, #0]
 800ed3c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800ed3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ed40:	4b4e      	ldr	r3, [pc, #312]	; (800ee7c <_dtoa_r+0x644>)
 800ed42:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ed46:	4401      	add	r1, r0
 800ed48:	9102      	str	r1, [sp, #8]
 800ed4a:	9908      	ldr	r1, [sp, #32]
 800ed4c:	eeb0 8a47 	vmov.f32	s16, s14
 800ed50:	eef0 8a67 	vmov.f32	s17, s15
 800ed54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ed58:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ed5c:	2900      	cmp	r1, #0
 800ed5e:	d045      	beq.n	800edec <_dtoa_r+0x5b4>
 800ed60:	494c      	ldr	r1, [pc, #304]	; (800ee94 <_dtoa_r+0x65c>)
 800ed62:	2000      	movs	r0, #0
 800ed64:	f7f1 fd72 	bl	800084c <__aeabi_ddiv>
 800ed68:	ec53 2b18 	vmov	r2, r3, d8
 800ed6c:	f7f1 fa8c 	bl	8000288 <__aeabi_dsub>
 800ed70:	9d00      	ldr	r5, [sp, #0]
 800ed72:	ec41 0b18 	vmov	d8, r0, r1
 800ed76:	4639      	mov	r1, r7
 800ed78:	4630      	mov	r0, r6
 800ed7a:	f7f1 feed 	bl	8000b58 <__aeabi_d2iz>
 800ed7e:	900c      	str	r0, [sp, #48]	; 0x30
 800ed80:	f7f1 fbd0 	bl	8000524 <__aeabi_i2d>
 800ed84:	4602      	mov	r2, r0
 800ed86:	460b      	mov	r3, r1
 800ed88:	4630      	mov	r0, r6
 800ed8a:	4639      	mov	r1, r7
 800ed8c:	f7f1 fa7c 	bl	8000288 <__aeabi_dsub>
 800ed90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed92:	3330      	adds	r3, #48	; 0x30
 800ed94:	f805 3b01 	strb.w	r3, [r5], #1
 800ed98:	ec53 2b18 	vmov	r2, r3, d8
 800ed9c:	4606      	mov	r6, r0
 800ed9e:	460f      	mov	r7, r1
 800eda0:	f7f1 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	d165      	bne.n	800ee74 <_dtoa_r+0x63c>
 800eda8:	4632      	mov	r2, r6
 800edaa:	463b      	mov	r3, r7
 800edac:	4935      	ldr	r1, [pc, #212]	; (800ee84 <_dtoa_r+0x64c>)
 800edae:	2000      	movs	r0, #0
 800edb0:	f7f1 fa6a 	bl	8000288 <__aeabi_dsub>
 800edb4:	ec53 2b18 	vmov	r2, r3, d8
 800edb8:	f7f1 fe90 	bl	8000adc <__aeabi_dcmplt>
 800edbc:	2800      	cmp	r0, #0
 800edbe:	f040 80b9 	bne.w	800ef34 <_dtoa_r+0x6fc>
 800edc2:	9b02      	ldr	r3, [sp, #8]
 800edc4:	429d      	cmp	r5, r3
 800edc6:	f43f af75 	beq.w	800ecb4 <_dtoa_r+0x47c>
 800edca:	4b2f      	ldr	r3, [pc, #188]	; (800ee88 <_dtoa_r+0x650>)
 800edcc:	ec51 0b18 	vmov	r0, r1, d8
 800edd0:	2200      	movs	r2, #0
 800edd2:	f7f1 fc11 	bl	80005f8 <__aeabi_dmul>
 800edd6:	4b2c      	ldr	r3, [pc, #176]	; (800ee88 <_dtoa_r+0x650>)
 800edd8:	ec41 0b18 	vmov	d8, r0, r1
 800eddc:	2200      	movs	r2, #0
 800edde:	4630      	mov	r0, r6
 800ede0:	4639      	mov	r1, r7
 800ede2:	f7f1 fc09 	bl	80005f8 <__aeabi_dmul>
 800ede6:	4606      	mov	r6, r0
 800ede8:	460f      	mov	r7, r1
 800edea:	e7c4      	b.n	800ed76 <_dtoa_r+0x53e>
 800edec:	ec51 0b17 	vmov	r0, r1, d7
 800edf0:	f7f1 fc02 	bl	80005f8 <__aeabi_dmul>
 800edf4:	9b02      	ldr	r3, [sp, #8]
 800edf6:	9d00      	ldr	r5, [sp, #0]
 800edf8:	930c      	str	r3, [sp, #48]	; 0x30
 800edfa:	ec41 0b18 	vmov	d8, r0, r1
 800edfe:	4639      	mov	r1, r7
 800ee00:	4630      	mov	r0, r6
 800ee02:	f7f1 fea9 	bl	8000b58 <__aeabi_d2iz>
 800ee06:	9011      	str	r0, [sp, #68]	; 0x44
 800ee08:	f7f1 fb8c 	bl	8000524 <__aeabi_i2d>
 800ee0c:	4602      	mov	r2, r0
 800ee0e:	460b      	mov	r3, r1
 800ee10:	4630      	mov	r0, r6
 800ee12:	4639      	mov	r1, r7
 800ee14:	f7f1 fa38 	bl	8000288 <__aeabi_dsub>
 800ee18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ee1a:	3330      	adds	r3, #48	; 0x30
 800ee1c:	f805 3b01 	strb.w	r3, [r5], #1
 800ee20:	9b02      	ldr	r3, [sp, #8]
 800ee22:	429d      	cmp	r5, r3
 800ee24:	4606      	mov	r6, r0
 800ee26:	460f      	mov	r7, r1
 800ee28:	f04f 0200 	mov.w	r2, #0
 800ee2c:	d134      	bne.n	800ee98 <_dtoa_r+0x660>
 800ee2e:	4b19      	ldr	r3, [pc, #100]	; (800ee94 <_dtoa_r+0x65c>)
 800ee30:	ec51 0b18 	vmov	r0, r1, d8
 800ee34:	f7f1 fa2a 	bl	800028c <__adddf3>
 800ee38:	4602      	mov	r2, r0
 800ee3a:	460b      	mov	r3, r1
 800ee3c:	4630      	mov	r0, r6
 800ee3e:	4639      	mov	r1, r7
 800ee40:	f7f1 fe6a 	bl	8000b18 <__aeabi_dcmpgt>
 800ee44:	2800      	cmp	r0, #0
 800ee46:	d175      	bne.n	800ef34 <_dtoa_r+0x6fc>
 800ee48:	ec53 2b18 	vmov	r2, r3, d8
 800ee4c:	4911      	ldr	r1, [pc, #68]	; (800ee94 <_dtoa_r+0x65c>)
 800ee4e:	2000      	movs	r0, #0
 800ee50:	f7f1 fa1a 	bl	8000288 <__aeabi_dsub>
 800ee54:	4602      	mov	r2, r0
 800ee56:	460b      	mov	r3, r1
 800ee58:	4630      	mov	r0, r6
 800ee5a:	4639      	mov	r1, r7
 800ee5c:	f7f1 fe3e 	bl	8000adc <__aeabi_dcmplt>
 800ee60:	2800      	cmp	r0, #0
 800ee62:	f43f af27 	beq.w	800ecb4 <_dtoa_r+0x47c>
 800ee66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee68:	1e6b      	subs	r3, r5, #1
 800ee6a:	930c      	str	r3, [sp, #48]	; 0x30
 800ee6c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee70:	2b30      	cmp	r3, #48	; 0x30
 800ee72:	d0f8      	beq.n	800ee66 <_dtoa_r+0x62e>
 800ee74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800ee78:	e04a      	b.n	800ef10 <_dtoa_r+0x6d8>
 800ee7a:	bf00      	nop
 800ee7c:	08011398 	.word	0x08011398
 800ee80:	08011370 	.word	0x08011370
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	40240000 	.word	0x40240000
 800ee8c:	401c0000 	.word	0x401c0000
 800ee90:	40140000 	.word	0x40140000
 800ee94:	3fe00000 	.word	0x3fe00000
 800ee98:	4baf      	ldr	r3, [pc, #700]	; (800f158 <_dtoa_r+0x920>)
 800ee9a:	f7f1 fbad 	bl	80005f8 <__aeabi_dmul>
 800ee9e:	4606      	mov	r6, r0
 800eea0:	460f      	mov	r7, r1
 800eea2:	e7ac      	b.n	800edfe <_dtoa_r+0x5c6>
 800eea4:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800eea8:	9d00      	ldr	r5, [sp, #0]
 800eeaa:	4642      	mov	r2, r8
 800eeac:	464b      	mov	r3, r9
 800eeae:	4630      	mov	r0, r6
 800eeb0:	4639      	mov	r1, r7
 800eeb2:	f7f1 fccb 	bl	800084c <__aeabi_ddiv>
 800eeb6:	f7f1 fe4f 	bl	8000b58 <__aeabi_d2iz>
 800eeba:	9002      	str	r0, [sp, #8]
 800eebc:	f7f1 fb32 	bl	8000524 <__aeabi_i2d>
 800eec0:	4642      	mov	r2, r8
 800eec2:	464b      	mov	r3, r9
 800eec4:	f7f1 fb98 	bl	80005f8 <__aeabi_dmul>
 800eec8:	4602      	mov	r2, r0
 800eeca:	460b      	mov	r3, r1
 800eecc:	4630      	mov	r0, r6
 800eece:	4639      	mov	r1, r7
 800eed0:	f7f1 f9da 	bl	8000288 <__aeabi_dsub>
 800eed4:	9e02      	ldr	r6, [sp, #8]
 800eed6:	9f01      	ldr	r7, [sp, #4]
 800eed8:	3630      	adds	r6, #48	; 0x30
 800eeda:	f805 6b01 	strb.w	r6, [r5], #1
 800eede:	9e00      	ldr	r6, [sp, #0]
 800eee0:	1bae      	subs	r6, r5, r6
 800eee2:	42b7      	cmp	r7, r6
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	d137      	bne.n	800ef5a <_dtoa_r+0x722>
 800eeea:	f7f1 f9cf 	bl	800028c <__adddf3>
 800eeee:	4642      	mov	r2, r8
 800eef0:	464b      	mov	r3, r9
 800eef2:	4606      	mov	r6, r0
 800eef4:	460f      	mov	r7, r1
 800eef6:	f7f1 fe0f 	bl	8000b18 <__aeabi_dcmpgt>
 800eefa:	b9c8      	cbnz	r0, 800ef30 <_dtoa_r+0x6f8>
 800eefc:	4642      	mov	r2, r8
 800eefe:	464b      	mov	r3, r9
 800ef00:	4630      	mov	r0, r6
 800ef02:	4639      	mov	r1, r7
 800ef04:	f7f1 fde0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef08:	b110      	cbz	r0, 800ef10 <_dtoa_r+0x6d8>
 800ef0a:	9b02      	ldr	r3, [sp, #8]
 800ef0c:	07d9      	lsls	r1, r3, #31
 800ef0e:	d40f      	bmi.n	800ef30 <_dtoa_r+0x6f8>
 800ef10:	4620      	mov	r0, r4
 800ef12:	4659      	mov	r1, fp
 800ef14:	f000 fce8 	bl	800f8e8 <_Bfree>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	702b      	strb	r3, [r5, #0]
 800ef1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ef1e:	f10a 0001 	add.w	r0, sl, #1
 800ef22:	6018      	str	r0, [r3, #0]
 800ef24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	f43f acd8 	beq.w	800e8dc <_dtoa_r+0xa4>
 800ef2c:	601d      	str	r5, [r3, #0]
 800ef2e:	e4d5      	b.n	800e8dc <_dtoa_r+0xa4>
 800ef30:	f8cd a01c 	str.w	sl, [sp, #28]
 800ef34:	462b      	mov	r3, r5
 800ef36:	461d      	mov	r5, r3
 800ef38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ef3c:	2a39      	cmp	r2, #57	; 0x39
 800ef3e:	d108      	bne.n	800ef52 <_dtoa_r+0x71a>
 800ef40:	9a00      	ldr	r2, [sp, #0]
 800ef42:	429a      	cmp	r2, r3
 800ef44:	d1f7      	bne.n	800ef36 <_dtoa_r+0x6fe>
 800ef46:	9a07      	ldr	r2, [sp, #28]
 800ef48:	9900      	ldr	r1, [sp, #0]
 800ef4a:	3201      	adds	r2, #1
 800ef4c:	9207      	str	r2, [sp, #28]
 800ef4e:	2230      	movs	r2, #48	; 0x30
 800ef50:	700a      	strb	r2, [r1, #0]
 800ef52:	781a      	ldrb	r2, [r3, #0]
 800ef54:	3201      	adds	r2, #1
 800ef56:	701a      	strb	r2, [r3, #0]
 800ef58:	e78c      	b.n	800ee74 <_dtoa_r+0x63c>
 800ef5a:	4b7f      	ldr	r3, [pc, #508]	; (800f158 <_dtoa_r+0x920>)
 800ef5c:	2200      	movs	r2, #0
 800ef5e:	f7f1 fb4b 	bl	80005f8 <__aeabi_dmul>
 800ef62:	2200      	movs	r2, #0
 800ef64:	2300      	movs	r3, #0
 800ef66:	4606      	mov	r6, r0
 800ef68:	460f      	mov	r7, r1
 800ef6a:	f7f1 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 800ef6e:	2800      	cmp	r0, #0
 800ef70:	d09b      	beq.n	800eeaa <_dtoa_r+0x672>
 800ef72:	e7cd      	b.n	800ef10 <_dtoa_r+0x6d8>
 800ef74:	9a08      	ldr	r2, [sp, #32]
 800ef76:	2a00      	cmp	r2, #0
 800ef78:	f000 80c4 	beq.w	800f104 <_dtoa_r+0x8cc>
 800ef7c:	9a05      	ldr	r2, [sp, #20]
 800ef7e:	2a01      	cmp	r2, #1
 800ef80:	f300 80a8 	bgt.w	800f0d4 <_dtoa_r+0x89c>
 800ef84:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ef86:	2a00      	cmp	r2, #0
 800ef88:	f000 80a0 	beq.w	800f0cc <_dtoa_r+0x894>
 800ef8c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef90:	9e06      	ldr	r6, [sp, #24]
 800ef92:	4645      	mov	r5, r8
 800ef94:	9a04      	ldr	r2, [sp, #16]
 800ef96:	2101      	movs	r1, #1
 800ef98:	441a      	add	r2, r3
 800ef9a:	4620      	mov	r0, r4
 800ef9c:	4498      	add	r8, r3
 800ef9e:	9204      	str	r2, [sp, #16]
 800efa0:	f000 fd5e 	bl	800fa60 <__i2b>
 800efa4:	4607      	mov	r7, r0
 800efa6:	2d00      	cmp	r5, #0
 800efa8:	dd0b      	ble.n	800efc2 <_dtoa_r+0x78a>
 800efaa:	9b04      	ldr	r3, [sp, #16]
 800efac:	2b00      	cmp	r3, #0
 800efae:	dd08      	ble.n	800efc2 <_dtoa_r+0x78a>
 800efb0:	42ab      	cmp	r3, r5
 800efb2:	9a04      	ldr	r2, [sp, #16]
 800efb4:	bfa8      	it	ge
 800efb6:	462b      	movge	r3, r5
 800efb8:	eba8 0803 	sub.w	r8, r8, r3
 800efbc:	1aed      	subs	r5, r5, r3
 800efbe:	1ad3      	subs	r3, r2, r3
 800efc0:	9304      	str	r3, [sp, #16]
 800efc2:	9b06      	ldr	r3, [sp, #24]
 800efc4:	b1fb      	cbz	r3, 800f006 <_dtoa_r+0x7ce>
 800efc6:	9b08      	ldr	r3, [sp, #32]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	f000 809f 	beq.w	800f10c <_dtoa_r+0x8d4>
 800efce:	2e00      	cmp	r6, #0
 800efd0:	dd11      	ble.n	800eff6 <_dtoa_r+0x7be>
 800efd2:	4639      	mov	r1, r7
 800efd4:	4632      	mov	r2, r6
 800efd6:	4620      	mov	r0, r4
 800efd8:	f000 fdfe 	bl	800fbd8 <__pow5mult>
 800efdc:	465a      	mov	r2, fp
 800efde:	4601      	mov	r1, r0
 800efe0:	4607      	mov	r7, r0
 800efe2:	4620      	mov	r0, r4
 800efe4:	f000 fd52 	bl	800fa8c <__multiply>
 800efe8:	4659      	mov	r1, fp
 800efea:	9007      	str	r0, [sp, #28]
 800efec:	4620      	mov	r0, r4
 800efee:	f000 fc7b 	bl	800f8e8 <_Bfree>
 800eff2:	9b07      	ldr	r3, [sp, #28]
 800eff4:	469b      	mov	fp, r3
 800eff6:	9b06      	ldr	r3, [sp, #24]
 800eff8:	1b9a      	subs	r2, r3, r6
 800effa:	d004      	beq.n	800f006 <_dtoa_r+0x7ce>
 800effc:	4659      	mov	r1, fp
 800effe:	4620      	mov	r0, r4
 800f000:	f000 fdea 	bl	800fbd8 <__pow5mult>
 800f004:	4683      	mov	fp, r0
 800f006:	2101      	movs	r1, #1
 800f008:	4620      	mov	r0, r4
 800f00a:	f000 fd29 	bl	800fa60 <__i2b>
 800f00e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f010:	2b00      	cmp	r3, #0
 800f012:	4606      	mov	r6, r0
 800f014:	dd7c      	ble.n	800f110 <_dtoa_r+0x8d8>
 800f016:	461a      	mov	r2, r3
 800f018:	4601      	mov	r1, r0
 800f01a:	4620      	mov	r0, r4
 800f01c:	f000 fddc 	bl	800fbd8 <__pow5mult>
 800f020:	9b05      	ldr	r3, [sp, #20]
 800f022:	2b01      	cmp	r3, #1
 800f024:	4606      	mov	r6, r0
 800f026:	dd76      	ble.n	800f116 <_dtoa_r+0x8de>
 800f028:	2300      	movs	r3, #0
 800f02a:	9306      	str	r3, [sp, #24]
 800f02c:	6933      	ldr	r3, [r6, #16]
 800f02e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f032:	6918      	ldr	r0, [r3, #16]
 800f034:	f000 fcc4 	bl	800f9c0 <__hi0bits>
 800f038:	f1c0 0020 	rsb	r0, r0, #32
 800f03c:	9b04      	ldr	r3, [sp, #16]
 800f03e:	4418      	add	r0, r3
 800f040:	f010 001f 	ands.w	r0, r0, #31
 800f044:	f000 8086 	beq.w	800f154 <_dtoa_r+0x91c>
 800f048:	f1c0 0320 	rsb	r3, r0, #32
 800f04c:	2b04      	cmp	r3, #4
 800f04e:	dd7f      	ble.n	800f150 <_dtoa_r+0x918>
 800f050:	f1c0 001c 	rsb	r0, r0, #28
 800f054:	9b04      	ldr	r3, [sp, #16]
 800f056:	4403      	add	r3, r0
 800f058:	4480      	add	r8, r0
 800f05a:	4405      	add	r5, r0
 800f05c:	9304      	str	r3, [sp, #16]
 800f05e:	f1b8 0f00 	cmp.w	r8, #0
 800f062:	dd05      	ble.n	800f070 <_dtoa_r+0x838>
 800f064:	4659      	mov	r1, fp
 800f066:	4642      	mov	r2, r8
 800f068:	4620      	mov	r0, r4
 800f06a:	f000 fe0f 	bl	800fc8c <__lshift>
 800f06e:	4683      	mov	fp, r0
 800f070:	9b04      	ldr	r3, [sp, #16]
 800f072:	2b00      	cmp	r3, #0
 800f074:	dd05      	ble.n	800f082 <_dtoa_r+0x84a>
 800f076:	4631      	mov	r1, r6
 800f078:	461a      	mov	r2, r3
 800f07a:	4620      	mov	r0, r4
 800f07c:	f000 fe06 	bl	800fc8c <__lshift>
 800f080:	4606      	mov	r6, r0
 800f082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f084:	2b00      	cmp	r3, #0
 800f086:	d069      	beq.n	800f15c <_dtoa_r+0x924>
 800f088:	4631      	mov	r1, r6
 800f08a:	4658      	mov	r0, fp
 800f08c:	f000 fe6a 	bl	800fd64 <__mcmp>
 800f090:	2800      	cmp	r0, #0
 800f092:	da63      	bge.n	800f15c <_dtoa_r+0x924>
 800f094:	2300      	movs	r3, #0
 800f096:	4659      	mov	r1, fp
 800f098:	220a      	movs	r2, #10
 800f09a:	4620      	mov	r0, r4
 800f09c:	f000 fc46 	bl	800f92c <__multadd>
 800f0a0:	9b08      	ldr	r3, [sp, #32]
 800f0a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f0a6:	4683      	mov	fp, r0
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	f000 818f 	beq.w	800f3cc <_dtoa_r+0xb94>
 800f0ae:	4639      	mov	r1, r7
 800f0b0:	2300      	movs	r3, #0
 800f0b2:	220a      	movs	r2, #10
 800f0b4:	4620      	mov	r0, r4
 800f0b6:	f000 fc39 	bl	800f92c <__multadd>
 800f0ba:	f1b9 0f00 	cmp.w	r9, #0
 800f0be:	4607      	mov	r7, r0
 800f0c0:	f300 808e 	bgt.w	800f1e0 <_dtoa_r+0x9a8>
 800f0c4:	9b05      	ldr	r3, [sp, #20]
 800f0c6:	2b02      	cmp	r3, #2
 800f0c8:	dc50      	bgt.n	800f16c <_dtoa_r+0x934>
 800f0ca:	e089      	b.n	800f1e0 <_dtoa_r+0x9a8>
 800f0cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800f0ce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f0d2:	e75d      	b.n	800ef90 <_dtoa_r+0x758>
 800f0d4:	9b01      	ldr	r3, [sp, #4]
 800f0d6:	1e5e      	subs	r6, r3, #1
 800f0d8:	9b06      	ldr	r3, [sp, #24]
 800f0da:	42b3      	cmp	r3, r6
 800f0dc:	bfbf      	itttt	lt
 800f0de:	9b06      	ldrlt	r3, [sp, #24]
 800f0e0:	9606      	strlt	r6, [sp, #24]
 800f0e2:	1af2      	sublt	r2, r6, r3
 800f0e4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800f0e6:	bfb6      	itet	lt
 800f0e8:	189b      	addlt	r3, r3, r2
 800f0ea:	1b9e      	subge	r6, r3, r6
 800f0ec:	930d      	strlt	r3, [sp, #52]	; 0x34
 800f0ee:	9b01      	ldr	r3, [sp, #4]
 800f0f0:	bfb8      	it	lt
 800f0f2:	2600      	movlt	r6, #0
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	bfb5      	itete	lt
 800f0f8:	eba8 0503 	sublt.w	r5, r8, r3
 800f0fc:	9b01      	ldrge	r3, [sp, #4]
 800f0fe:	2300      	movlt	r3, #0
 800f100:	4645      	movge	r5, r8
 800f102:	e747      	b.n	800ef94 <_dtoa_r+0x75c>
 800f104:	9e06      	ldr	r6, [sp, #24]
 800f106:	9f08      	ldr	r7, [sp, #32]
 800f108:	4645      	mov	r5, r8
 800f10a:	e74c      	b.n	800efa6 <_dtoa_r+0x76e>
 800f10c:	9a06      	ldr	r2, [sp, #24]
 800f10e:	e775      	b.n	800effc <_dtoa_r+0x7c4>
 800f110:	9b05      	ldr	r3, [sp, #20]
 800f112:	2b01      	cmp	r3, #1
 800f114:	dc18      	bgt.n	800f148 <_dtoa_r+0x910>
 800f116:	9b02      	ldr	r3, [sp, #8]
 800f118:	b9b3      	cbnz	r3, 800f148 <_dtoa_r+0x910>
 800f11a:	9b03      	ldr	r3, [sp, #12]
 800f11c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f120:	b9a3      	cbnz	r3, 800f14c <_dtoa_r+0x914>
 800f122:	9b03      	ldr	r3, [sp, #12]
 800f124:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f128:	0d1b      	lsrs	r3, r3, #20
 800f12a:	051b      	lsls	r3, r3, #20
 800f12c:	b12b      	cbz	r3, 800f13a <_dtoa_r+0x902>
 800f12e:	9b04      	ldr	r3, [sp, #16]
 800f130:	3301      	adds	r3, #1
 800f132:	9304      	str	r3, [sp, #16]
 800f134:	f108 0801 	add.w	r8, r8, #1
 800f138:	2301      	movs	r3, #1
 800f13a:	9306      	str	r3, [sp, #24]
 800f13c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f13e:	2b00      	cmp	r3, #0
 800f140:	f47f af74 	bne.w	800f02c <_dtoa_r+0x7f4>
 800f144:	2001      	movs	r0, #1
 800f146:	e779      	b.n	800f03c <_dtoa_r+0x804>
 800f148:	2300      	movs	r3, #0
 800f14a:	e7f6      	b.n	800f13a <_dtoa_r+0x902>
 800f14c:	9b02      	ldr	r3, [sp, #8]
 800f14e:	e7f4      	b.n	800f13a <_dtoa_r+0x902>
 800f150:	d085      	beq.n	800f05e <_dtoa_r+0x826>
 800f152:	4618      	mov	r0, r3
 800f154:	301c      	adds	r0, #28
 800f156:	e77d      	b.n	800f054 <_dtoa_r+0x81c>
 800f158:	40240000 	.word	0x40240000
 800f15c:	9b01      	ldr	r3, [sp, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	dc38      	bgt.n	800f1d4 <_dtoa_r+0x99c>
 800f162:	9b05      	ldr	r3, [sp, #20]
 800f164:	2b02      	cmp	r3, #2
 800f166:	dd35      	ble.n	800f1d4 <_dtoa_r+0x99c>
 800f168:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f16c:	f1b9 0f00 	cmp.w	r9, #0
 800f170:	d10d      	bne.n	800f18e <_dtoa_r+0x956>
 800f172:	4631      	mov	r1, r6
 800f174:	464b      	mov	r3, r9
 800f176:	2205      	movs	r2, #5
 800f178:	4620      	mov	r0, r4
 800f17a:	f000 fbd7 	bl	800f92c <__multadd>
 800f17e:	4601      	mov	r1, r0
 800f180:	4606      	mov	r6, r0
 800f182:	4658      	mov	r0, fp
 800f184:	f000 fdee 	bl	800fd64 <__mcmp>
 800f188:	2800      	cmp	r0, #0
 800f18a:	f73f adbd 	bgt.w	800ed08 <_dtoa_r+0x4d0>
 800f18e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f190:	9d00      	ldr	r5, [sp, #0]
 800f192:	ea6f 0a03 	mvn.w	sl, r3
 800f196:	f04f 0800 	mov.w	r8, #0
 800f19a:	4631      	mov	r1, r6
 800f19c:	4620      	mov	r0, r4
 800f19e:	f000 fba3 	bl	800f8e8 <_Bfree>
 800f1a2:	2f00      	cmp	r7, #0
 800f1a4:	f43f aeb4 	beq.w	800ef10 <_dtoa_r+0x6d8>
 800f1a8:	f1b8 0f00 	cmp.w	r8, #0
 800f1ac:	d005      	beq.n	800f1ba <_dtoa_r+0x982>
 800f1ae:	45b8      	cmp	r8, r7
 800f1b0:	d003      	beq.n	800f1ba <_dtoa_r+0x982>
 800f1b2:	4641      	mov	r1, r8
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f000 fb97 	bl	800f8e8 <_Bfree>
 800f1ba:	4639      	mov	r1, r7
 800f1bc:	4620      	mov	r0, r4
 800f1be:	f000 fb93 	bl	800f8e8 <_Bfree>
 800f1c2:	e6a5      	b.n	800ef10 <_dtoa_r+0x6d8>
 800f1c4:	2600      	movs	r6, #0
 800f1c6:	4637      	mov	r7, r6
 800f1c8:	e7e1      	b.n	800f18e <_dtoa_r+0x956>
 800f1ca:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800f1cc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800f1d0:	4637      	mov	r7, r6
 800f1d2:	e599      	b.n	800ed08 <_dtoa_r+0x4d0>
 800f1d4:	9b08      	ldr	r3, [sp, #32]
 800f1d6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	f000 80fd 	beq.w	800f3da <_dtoa_r+0xba2>
 800f1e0:	2d00      	cmp	r5, #0
 800f1e2:	dd05      	ble.n	800f1f0 <_dtoa_r+0x9b8>
 800f1e4:	4639      	mov	r1, r7
 800f1e6:	462a      	mov	r2, r5
 800f1e8:	4620      	mov	r0, r4
 800f1ea:	f000 fd4f 	bl	800fc8c <__lshift>
 800f1ee:	4607      	mov	r7, r0
 800f1f0:	9b06      	ldr	r3, [sp, #24]
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d05c      	beq.n	800f2b0 <_dtoa_r+0xa78>
 800f1f6:	6879      	ldr	r1, [r7, #4]
 800f1f8:	4620      	mov	r0, r4
 800f1fa:	f000 fb35 	bl	800f868 <_Balloc>
 800f1fe:	4605      	mov	r5, r0
 800f200:	b928      	cbnz	r0, 800f20e <_dtoa_r+0x9d6>
 800f202:	4b80      	ldr	r3, [pc, #512]	; (800f404 <_dtoa_r+0xbcc>)
 800f204:	4602      	mov	r2, r0
 800f206:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f20a:	f7ff bb2e 	b.w	800e86a <_dtoa_r+0x32>
 800f20e:	693a      	ldr	r2, [r7, #16]
 800f210:	3202      	adds	r2, #2
 800f212:	0092      	lsls	r2, r2, #2
 800f214:	f107 010c 	add.w	r1, r7, #12
 800f218:	300c      	adds	r0, #12
 800f21a:	f7fe fc77 	bl	800db0c <memcpy>
 800f21e:	2201      	movs	r2, #1
 800f220:	4629      	mov	r1, r5
 800f222:	4620      	mov	r0, r4
 800f224:	f000 fd32 	bl	800fc8c <__lshift>
 800f228:	9b00      	ldr	r3, [sp, #0]
 800f22a:	3301      	adds	r3, #1
 800f22c:	9301      	str	r3, [sp, #4]
 800f22e:	9b00      	ldr	r3, [sp, #0]
 800f230:	444b      	add	r3, r9
 800f232:	9307      	str	r3, [sp, #28]
 800f234:	9b02      	ldr	r3, [sp, #8]
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	46b8      	mov	r8, r7
 800f23c:	9306      	str	r3, [sp, #24]
 800f23e:	4607      	mov	r7, r0
 800f240:	9b01      	ldr	r3, [sp, #4]
 800f242:	4631      	mov	r1, r6
 800f244:	3b01      	subs	r3, #1
 800f246:	4658      	mov	r0, fp
 800f248:	9302      	str	r3, [sp, #8]
 800f24a:	f7ff fa69 	bl	800e720 <quorem>
 800f24e:	4603      	mov	r3, r0
 800f250:	3330      	adds	r3, #48	; 0x30
 800f252:	9004      	str	r0, [sp, #16]
 800f254:	4641      	mov	r1, r8
 800f256:	4658      	mov	r0, fp
 800f258:	9308      	str	r3, [sp, #32]
 800f25a:	f000 fd83 	bl	800fd64 <__mcmp>
 800f25e:	463a      	mov	r2, r7
 800f260:	4681      	mov	r9, r0
 800f262:	4631      	mov	r1, r6
 800f264:	4620      	mov	r0, r4
 800f266:	f000 fd99 	bl	800fd9c <__mdiff>
 800f26a:	68c2      	ldr	r2, [r0, #12]
 800f26c:	9b08      	ldr	r3, [sp, #32]
 800f26e:	4605      	mov	r5, r0
 800f270:	bb02      	cbnz	r2, 800f2b4 <_dtoa_r+0xa7c>
 800f272:	4601      	mov	r1, r0
 800f274:	4658      	mov	r0, fp
 800f276:	f000 fd75 	bl	800fd64 <__mcmp>
 800f27a:	9b08      	ldr	r3, [sp, #32]
 800f27c:	4602      	mov	r2, r0
 800f27e:	4629      	mov	r1, r5
 800f280:	4620      	mov	r0, r4
 800f282:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800f286:	f000 fb2f 	bl	800f8e8 <_Bfree>
 800f28a:	9b05      	ldr	r3, [sp, #20]
 800f28c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f28e:	9d01      	ldr	r5, [sp, #4]
 800f290:	ea43 0102 	orr.w	r1, r3, r2
 800f294:	9b06      	ldr	r3, [sp, #24]
 800f296:	430b      	orrs	r3, r1
 800f298:	9b08      	ldr	r3, [sp, #32]
 800f29a:	d10d      	bne.n	800f2b8 <_dtoa_r+0xa80>
 800f29c:	2b39      	cmp	r3, #57	; 0x39
 800f29e:	d029      	beq.n	800f2f4 <_dtoa_r+0xabc>
 800f2a0:	f1b9 0f00 	cmp.w	r9, #0
 800f2a4:	dd01      	ble.n	800f2aa <_dtoa_r+0xa72>
 800f2a6:	9b04      	ldr	r3, [sp, #16]
 800f2a8:	3331      	adds	r3, #49	; 0x31
 800f2aa:	9a02      	ldr	r2, [sp, #8]
 800f2ac:	7013      	strb	r3, [r2, #0]
 800f2ae:	e774      	b.n	800f19a <_dtoa_r+0x962>
 800f2b0:	4638      	mov	r0, r7
 800f2b2:	e7b9      	b.n	800f228 <_dtoa_r+0x9f0>
 800f2b4:	2201      	movs	r2, #1
 800f2b6:	e7e2      	b.n	800f27e <_dtoa_r+0xa46>
 800f2b8:	f1b9 0f00 	cmp.w	r9, #0
 800f2bc:	db06      	blt.n	800f2cc <_dtoa_r+0xa94>
 800f2be:	9905      	ldr	r1, [sp, #20]
 800f2c0:	ea41 0909 	orr.w	r9, r1, r9
 800f2c4:	9906      	ldr	r1, [sp, #24]
 800f2c6:	ea59 0101 	orrs.w	r1, r9, r1
 800f2ca:	d120      	bne.n	800f30e <_dtoa_r+0xad6>
 800f2cc:	2a00      	cmp	r2, #0
 800f2ce:	ddec      	ble.n	800f2aa <_dtoa_r+0xa72>
 800f2d0:	4659      	mov	r1, fp
 800f2d2:	2201      	movs	r2, #1
 800f2d4:	4620      	mov	r0, r4
 800f2d6:	9301      	str	r3, [sp, #4]
 800f2d8:	f000 fcd8 	bl	800fc8c <__lshift>
 800f2dc:	4631      	mov	r1, r6
 800f2de:	4683      	mov	fp, r0
 800f2e0:	f000 fd40 	bl	800fd64 <__mcmp>
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	9b01      	ldr	r3, [sp, #4]
 800f2e8:	dc02      	bgt.n	800f2f0 <_dtoa_r+0xab8>
 800f2ea:	d1de      	bne.n	800f2aa <_dtoa_r+0xa72>
 800f2ec:	07da      	lsls	r2, r3, #31
 800f2ee:	d5dc      	bpl.n	800f2aa <_dtoa_r+0xa72>
 800f2f0:	2b39      	cmp	r3, #57	; 0x39
 800f2f2:	d1d8      	bne.n	800f2a6 <_dtoa_r+0xa6e>
 800f2f4:	9a02      	ldr	r2, [sp, #8]
 800f2f6:	2339      	movs	r3, #57	; 0x39
 800f2f8:	7013      	strb	r3, [r2, #0]
 800f2fa:	462b      	mov	r3, r5
 800f2fc:	461d      	mov	r5, r3
 800f2fe:	3b01      	subs	r3, #1
 800f300:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f304:	2a39      	cmp	r2, #57	; 0x39
 800f306:	d050      	beq.n	800f3aa <_dtoa_r+0xb72>
 800f308:	3201      	adds	r2, #1
 800f30a:	701a      	strb	r2, [r3, #0]
 800f30c:	e745      	b.n	800f19a <_dtoa_r+0x962>
 800f30e:	2a00      	cmp	r2, #0
 800f310:	dd03      	ble.n	800f31a <_dtoa_r+0xae2>
 800f312:	2b39      	cmp	r3, #57	; 0x39
 800f314:	d0ee      	beq.n	800f2f4 <_dtoa_r+0xabc>
 800f316:	3301      	adds	r3, #1
 800f318:	e7c7      	b.n	800f2aa <_dtoa_r+0xa72>
 800f31a:	9a01      	ldr	r2, [sp, #4]
 800f31c:	9907      	ldr	r1, [sp, #28]
 800f31e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f322:	428a      	cmp	r2, r1
 800f324:	d02a      	beq.n	800f37c <_dtoa_r+0xb44>
 800f326:	4659      	mov	r1, fp
 800f328:	2300      	movs	r3, #0
 800f32a:	220a      	movs	r2, #10
 800f32c:	4620      	mov	r0, r4
 800f32e:	f000 fafd 	bl	800f92c <__multadd>
 800f332:	45b8      	cmp	r8, r7
 800f334:	4683      	mov	fp, r0
 800f336:	f04f 0300 	mov.w	r3, #0
 800f33a:	f04f 020a 	mov.w	r2, #10
 800f33e:	4641      	mov	r1, r8
 800f340:	4620      	mov	r0, r4
 800f342:	d107      	bne.n	800f354 <_dtoa_r+0xb1c>
 800f344:	f000 faf2 	bl	800f92c <__multadd>
 800f348:	4680      	mov	r8, r0
 800f34a:	4607      	mov	r7, r0
 800f34c:	9b01      	ldr	r3, [sp, #4]
 800f34e:	3301      	adds	r3, #1
 800f350:	9301      	str	r3, [sp, #4]
 800f352:	e775      	b.n	800f240 <_dtoa_r+0xa08>
 800f354:	f000 faea 	bl	800f92c <__multadd>
 800f358:	4639      	mov	r1, r7
 800f35a:	4680      	mov	r8, r0
 800f35c:	2300      	movs	r3, #0
 800f35e:	220a      	movs	r2, #10
 800f360:	4620      	mov	r0, r4
 800f362:	f000 fae3 	bl	800f92c <__multadd>
 800f366:	4607      	mov	r7, r0
 800f368:	e7f0      	b.n	800f34c <_dtoa_r+0xb14>
 800f36a:	f1b9 0f00 	cmp.w	r9, #0
 800f36e:	9a00      	ldr	r2, [sp, #0]
 800f370:	bfcc      	ite	gt
 800f372:	464d      	movgt	r5, r9
 800f374:	2501      	movle	r5, #1
 800f376:	4415      	add	r5, r2
 800f378:	f04f 0800 	mov.w	r8, #0
 800f37c:	4659      	mov	r1, fp
 800f37e:	2201      	movs	r2, #1
 800f380:	4620      	mov	r0, r4
 800f382:	9301      	str	r3, [sp, #4]
 800f384:	f000 fc82 	bl	800fc8c <__lshift>
 800f388:	4631      	mov	r1, r6
 800f38a:	4683      	mov	fp, r0
 800f38c:	f000 fcea 	bl	800fd64 <__mcmp>
 800f390:	2800      	cmp	r0, #0
 800f392:	dcb2      	bgt.n	800f2fa <_dtoa_r+0xac2>
 800f394:	d102      	bne.n	800f39c <_dtoa_r+0xb64>
 800f396:	9b01      	ldr	r3, [sp, #4]
 800f398:	07db      	lsls	r3, r3, #31
 800f39a:	d4ae      	bmi.n	800f2fa <_dtoa_r+0xac2>
 800f39c:	462b      	mov	r3, r5
 800f39e:	461d      	mov	r5, r3
 800f3a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f3a4:	2a30      	cmp	r2, #48	; 0x30
 800f3a6:	d0fa      	beq.n	800f39e <_dtoa_r+0xb66>
 800f3a8:	e6f7      	b.n	800f19a <_dtoa_r+0x962>
 800f3aa:	9a00      	ldr	r2, [sp, #0]
 800f3ac:	429a      	cmp	r2, r3
 800f3ae:	d1a5      	bne.n	800f2fc <_dtoa_r+0xac4>
 800f3b0:	f10a 0a01 	add.w	sl, sl, #1
 800f3b4:	2331      	movs	r3, #49	; 0x31
 800f3b6:	e779      	b.n	800f2ac <_dtoa_r+0xa74>
 800f3b8:	4b13      	ldr	r3, [pc, #76]	; (800f408 <_dtoa_r+0xbd0>)
 800f3ba:	f7ff baaf 	b.w	800e91c <_dtoa_r+0xe4>
 800f3be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	f47f aa86 	bne.w	800e8d2 <_dtoa_r+0x9a>
 800f3c6:	4b11      	ldr	r3, [pc, #68]	; (800f40c <_dtoa_r+0xbd4>)
 800f3c8:	f7ff baa8 	b.w	800e91c <_dtoa_r+0xe4>
 800f3cc:	f1b9 0f00 	cmp.w	r9, #0
 800f3d0:	dc03      	bgt.n	800f3da <_dtoa_r+0xba2>
 800f3d2:	9b05      	ldr	r3, [sp, #20]
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	f73f aec9 	bgt.w	800f16c <_dtoa_r+0x934>
 800f3da:	9d00      	ldr	r5, [sp, #0]
 800f3dc:	4631      	mov	r1, r6
 800f3de:	4658      	mov	r0, fp
 800f3e0:	f7ff f99e 	bl	800e720 <quorem>
 800f3e4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800f3e8:	f805 3b01 	strb.w	r3, [r5], #1
 800f3ec:	9a00      	ldr	r2, [sp, #0]
 800f3ee:	1aaa      	subs	r2, r5, r2
 800f3f0:	4591      	cmp	r9, r2
 800f3f2:	ddba      	ble.n	800f36a <_dtoa_r+0xb32>
 800f3f4:	4659      	mov	r1, fp
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	220a      	movs	r2, #10
 800f3fa:	4620      	mov	r0, r4
 800f3fc:	f000 fa96 	bl	800f92c <__multadd>
 800f400:	4683      	mov	fp, r0
 800f402:	e7eb      	b.n	800f3dc <_dtoa_r+0xba4>
 800f404:	0801129b 	.word	0x0801129b
 800f408:	080111f4 	.word	0x080111f4
 800f40c:	08011218 	.word	0x08011218

0800f410 <__sflush_r>:
 800f410:	898a      	ldrh	r2, [r1, #12]
 800f412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f416:	4605      	mov	r5, r0
 800f418:	0710      	lsls	r0, r2, #28
 800f41a:	460c      	mov	r4, r1
 800f41c:	d458      	bmi.n	800f4d0 <__sflush_r+0xc0>
 800f41e:	684b      	ldr	r3, [r1, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	dc05      	bgt.n	800f430 <__sflush_r+0x20>
 800f424:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f426:	2b00      	cmp	r3, #0
 800f428:	dc02      	bgt.n	800f430 <__sflush_r+0x20>
 800f42a:	2000      	movs	r0, #0
 800f42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f430:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f432:	2e00      	cmp	r6, #0
 800f434:	d0f9      	beq.n	800f42a <__sflush_r+0x1a>
 800f436:	2300      	movs	r3, #0
 800f438:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f43c:	682f      	ldr	r7, [r5, #0]
 800f43e:	602b      	str	r3, [r5, #0]
 800f440:	d032      	beq.n	800f4a8 <__sflush_r+0x98>
 800f442:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f444:	89a3      	ldrh	r3, [r4, #12]
 800f446:	075a      	lsls	r2, r3, #29
 800f448:	d505      	bpl.n	800f456 <__sflush_r+0x46>
 800f44a:	6863      	ldr	r3, [r4, #4]
 800f44c:	1ac0      	subs	r0, r0, r3
 800f44e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f450:	b10b      	cbz	r3, 800f456 <__sflush_r+0x46>
 800f452:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f454:	1ac0      	subs	r0, r0, r3
 800f456:	2300      	movs	r3, #0
 800f458:	4602      	mov	r2, r0
 800f45a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f45c:	6a21      	ldr	r1, [r4, #32]
 800f45e:	4628      	mov	r0, r5
 800f460:	47b0      	blx	r6
 800f462:	1c43      	adds	r3, r0, #1
 800f464:	89a3      	ldrh	r3, [r4, #12]
 800f466:	d106      	bne.n	800f476 <__sflush_r+0x66>
 800f468:	6829      	ldr	r1, [r5, #0]
 800f46a:	291d      	cmp	r1, #29
 800f46c:	d82c      	bhi.n	800f4c8 <__sflush_r+0xb8>
 800f46e:	4a2a      	ldr	r2, [pc, #168]	; (800f518 <__sflush_r+0x108>)
 800f470:	40ca      	lsrs	r2, r1
 800f472:	07d6      	lsls	r6, r2, #31
 800f474:	d528      	bpl.n	800f4c8 <__sflush_r+0xb8>
 800f476:	2200      	movs	r2, #0
 800f478:	6062      	str	r2, [r4, #4]
 800f47a:	04d9      	lsls	r1, r3, #19
 800f47c:	6922      	ldr	r2, [r4, #16]
 800f47e:	6022      	str	r2, [r4, #0]
 800f480:	d504      	bpl.n	800f48c <__sflush_r+0x7c>
 800f482:	1c42      	adds	r2, r0, #1
 800f484:	d101      	bne.n	800f48a <__sflush_r+0x7a>
 800f486:	682b      	ldr	r3, [r5, #0]
 800f488:	b903      	cbnz	r3, 800f48c <__sflush_r+0x7c>
 800f48a:	6560      	str	r0, [r4, #84]	; 0x54
 800f48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f48e:	602f      	str	r7, [r5, #0]
 800f490:	2900      	cmp	r1, #0
 800f492:	d0ca      	beq.n	800f42a <__sflush_r+0x1a>
 800f494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f498:	4299      	cmp	r1, r3
 800f49a:	d002      	beq.n	800f4a2 <__sflush_r+0x92>
 800f49c:	4628      	mov	r0, r5
 800f49e:	f000 fd71 	bl	800ff84 <_free_r>
 800f4a2:	2000      	movs	r0, #0
 800f4a4:	6360      	str	r0, [r4, #52]	; 0x34
 800f4a6:	e7c1      	b.n	800f42c <__sflush_r+0x1c>
 800f4a8:	6a21      	ldr	r1, [r4, #32]
 800f4aa:	2301      	movs	r3, #1
 800f4ac:	4628      	mov	r0, r5
 800f4ae:	47b0      	blx	r6
 800f4b0:	1c41      	adds	r1, r0, #1
 800f4b2:	d1c7      	bne.n	800f444 <__sflush_r+0x34>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d0c4      	beq.n	800f444 <__sflush_r+0x34>
 800f4ba:	2b1d      	cmp	r3, #29
 800f4bc:	d001      	beq.n	800f4c2 <__sflush_r+0xb2>
 800f4be:	2b16      	cmp	r3, #22
 800f4c0:	d101      	bne.n	800f4c6 <__sflush_r+0xb6>
 800f4c2:	602f      	str	r7, [r5, #0]
 800f4c4:	e7b1      	b.n	800f42a <__sflush_r+0x1a>
 800f4c6:	89a3      	ldrh	r3, [r4, #12]
 800f4c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4cc:	81a3      	strh	r3, [r4, #12]
 800f4ce:	e7ad      	b.n	800f42c <__sflush_r+0x1c>
 800f4d0:	690f      	ldr	r7, [r1, #16]
 800f4d2:	2f00      	cmp	r7, #0
 800f4d4:	d0a9      	beq.n	800f42a <__sflush_r+0x1a>
 800f4d6:	0793      	lsls	r3, r2, #30
 800f4d8:	680e      	ldr	r6, [r1, #0]
 800f4da:	bf08      	it	eq
 800f4dc:	694b      	ldreq	r3, [r1, #20]
 800f4de:	600f      	str	r7, [r1, #0]
 800f4e0:	bf18      	it	ne
 800f4e2:	2300      	movne	r3, #0
 800f4e4:	eba6 0807 	sub.w	r8, r6, r7
 800f4e8:	608b      	str	r3, [r1, #8]
 800f4ea:	f1b8 0f00 	cmp.w	r8, #0
 800f4ee:	dd9c      	ble.n	800f42a <__sflush_r+0x1a>
 800f4f0:	6a21      	ldr	r1, [r4, #32]
 800f4f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4f4:	4643      	mov	r3, r8
 800f4f6:	463a      	mov	r2, r7
 800f4f8:	4628      	mov	r0, r5
 800f4fa:	47b0      	blx	r6
 800f4fc:	2800      	cmp	r0, #0
 800f4fe:	dc06      	bgt.n	800f50e <__sflush_r+0xfe>
 800f500:	89a3      	ldrh	r3, [r4, #12]
 800f502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f506:	81a3      	strh	r3, [r4, #12]
 800f508:	f04f 30ff 	mov.w	r0, #4294967295
 800f50c:	e78e      	b.n	800f42c <__sflush_r+0x1c>
 800f50e:	4407      	add	r7, r0
 800f510:	eba8 0800 	sub.w	r8, r8, r0
 800f514:	e7e9      	b.n	800f4ea <__sflush_r+0xda>
 800f516:	bf00      	nop
 800f518:	20400001 	.word	0x20400001

0800f51c <_fflush_r>:
 800f51c:	b538      	push	{r3, r4, r5, lr}
 800f51e:	690b      	ldr	r3, [r1, #16]
 800f520:	4605      	mov	r5, r0
 800f522:	460c      	mov	r4, r1
 800f524:	b913      	cbnz	r3, 800f52c <_fflush_r+0x10>
 800f526:	2500      	movs	r5, #0
 800f528:	4628      	mov	r0, r5
 800f52a:	bd38      	pop	{r3, r4, r5, pc}
 800f52c:	b118      	cbz	r0, 800f536 <_fflush_r+0x1a>
 800f52e:	6983      	ldr	r3, [r0, #24]
 800f530:	b90b      	cbnz	r3, 800f536 <_fflush_r+0x1a>
 800f532:	f000 f887 	bl	800f644 <__sinit>
 800f536:	4b14      	ldr	r3, [pc, #80]	; (800f588 <_fflush_r+0x6c>)
 800f538:	429c      	cmp	r4, r3
 800f53a:	d11b      	bne.n	800f574 <_fflush_r+0x58>
 800f53c:	686c      	ldr	r4, [r5, #4]
 800f53e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d0ef      	beq.n	800f526 <_fflush_r+0xa>
 800f546:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f548:	07d0      	lsls	r0, r2, #31
 800f54a:	d404      	bmi.n	800f556 <_fflush_r+0x3a>
 800f54c:	0599      	lsls	r1, r3, #22
 800f54e:	d402      	bmi.n	800f556 <_fflush_r+0x3a>
 800f550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f552:	f000 f91a 	bl	800f78a <__retarget_lock_acquire_recursive>
 800f556:	4628      	mov	r0, r5
 800f558:	4621      	mov	r1, r4
 800f55a:	f7ff ff59 	bl	800f410 <__sflush_r>
 800f55e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f560:	07da      	lsls	r2, r3, #31
 800f562:	4605      	mov	r5, r0
 800f564:	d4e0      	bmi.n	800f528 <_fflush_r+0xc>
 800f566:	89a3      	ldrh	r3, [r4, #12]
 800f568:	059b      	lsls	r3, r3, #22
 800f56a:	d4dd      	bmi.n	800f528 <_fflush_r+0xc>
 800f56c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f56e:	f000 f90d 	bl	800f78c <__retarget_lock_release_recursive>
 800f572:	e7d9      	b.n	800f528 <_fflush_r+0xc>
 800f574:	4b05      	ldr	r3, [pc, #20]	; (800f58c <_fflush_r+0x70>)
 800f576:	429c      	cmp	r4, r3
 800f578:	d101      	bne.n	800f57e <_fflush_r+0x62>
 800f57a:	68ac      	ldr	r4, [r5, #8]
 800f57c:	e7df      	b.n	800f53e <_fflush_r+0x22>
 800f57e:	4b04      	ldr	r3, [pc, #16]	; (800f590 <_fflush_r+0x74>)
 800f580:	429c      	cmp	r4, r3
 800f582:	bf08      	it	eq
 800f584:	68ec      	ldreq	r4, [r5, #12]
 800f586:	e7da      	b.n	800f53e <_fflush_r+0x22>
 800f588:	080112cc 	.word	0x080112cc
 800f58c:	080112ec 	.word	0x080112ec
 800f590:	080112ac 	.word	0x080112ac

0800f594 <std>:
 800f594:	2300      	movs	r3, #0
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	e9c0 3300 	strd	r3, r3, [r0]
 800f59e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f5a2:	6083      	str	r3, [r0, #8]
 800f5a4:	8181      	strh	r1, [r0, #12]
 800f5a6:	6643      	str	r3, [r0, #100]	; 0x64
 800f5a8:	81c2      	strh	r2, [r0, #14]
 800f5aa:	6183      	str	r3, [r0, #24]
 800f5ac:	4619      	mov	r1, r3
 800f5ae:	2208      	movs	r2, #8
 800f5b0:	305c      	adds	r0, #92	; 0x5c
 800f5b2:	f7fe fab9 	bl	800db28 <memset>
 800f5b6:	4b05      	ldr	r3, [pc, #20]	; (800f5cc <std+0x38>)
 800f5b8:	6263      	str	r3, [r4, #36]	; 0x24
 800f5ba:	4b05      	ldr	r3, [pc, #20]	; (800f5d0 <std+0x3c>)
 800f5bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800f5be:	4b05      	ldr	r3, [pc, #20]	; (800f5d4 <std+0x40>)
 800f5c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f5c2:	4b05      	ldr	r3, [pc, #20]	; (800f5d8 <std+0x44>)
 800f5c4:	6224      	str	r4, [r4, #32]
 800f5c6:	6323      	str	r3, [r4, #48]	; 0x30
 800f5c8:	bd10      	pop	{r4, pc}
 800f5ca:	bf00      	nop
 800f5cc:	08010665 	.word	0x08010665
 800f5d0:	08010687 	.word	0x08010687
 800f5d4:	080106bf 	.word	0x080106bf
 800f5d8:	080106e3 	.word	0x080106e3

0800f5dc <_cleanup_r>:
 800f5dc:	4901      	ldr	r1, [pc, #4]	; (800f5e4 <_cleanup_r+0x8>)
 800f5de:	f000 b8af 	b.w	800f740 <_fwalk_reent>
 800f5e2:	bf00      	nop
 800f5e4:	0800f51d 	.word	0x0800f51d

0800f5e8 <__sfmoreglue>:
 800f5e8:	b570      	push	{r4, r5, r6, lr}
 800f5ea:	1e4a      	subs	r2, r1, #1
 800f5ec:	2568      	movs	r5, #104	; 0x68
 800f5ee:	4355      	muls	r5, r2
 800f5f0:	460e      	mov	r6, r1
 800f5f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5f6:	f000 fd15 	bl	8010024 <_malloc_r>
 800f5fa:	4604      	mov	r4, r0
 800f5fc:	b140      	cbz	r0, 800f610 <__sfmoreglue+0x28>
 800f5fe:	2100      	movs	r1, #0
 800f600:	e9c0 1600 	strd	r1, r6, [r0]
 800f604:	300c      	adds	r0, #12
 800f606:	60a0      	str	r0, [r4, #8]
 800f608:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f60c:	f7fe fa8c 	bl	800db28 <memset>
 800f610:	4620      	mov	r0, r4
 800f612:	bd70      	pop	{r4, r5, r6, pc}

0800f614 <__sfp_lock_acquire>:
 800f614:	4801      	ldr	r0, [pc, #4]	; (800f61c <__sfp_lock_acquire+0x8>)
 800f616:	f000 b8b8 	b.w	800f78a <__retarget_lock_acquire_recursive>
 800f61a:	bf00      	nop
 800f61c:	20000e18 	.word	0x20000e18

0800f620 <__sfp_lock_release>:
 800f620:	4801      	ldr	r0, [pc, #4]	; (800f628 <__sfp_lock_release+0x8>)
 800f622:	f000 b8b3 	b.w	800f78c <__retarget_lock_release_recursive>
 800f626:	bf00      	nop
 800f628:	20000e18 	.word	0x20000e18

0800f62c <__sinit_lock_acquire>:
 800f62c:	4801      	ldr	r0, [pc, #4]	; (800f634 <__sinit_lock_acquire+0x8>)
 800f62e:	f000 b8ac 	b.w	800f78a <__retarget_lock_acquire_recursive>
 800f632:	bf00      	nop
 800f634:	20000e13 	.word	0x20000e13

0800f638 <__sinit_lock_release>:
 800f638:	4801      	ldr	r0, [pc, #4]	; (800f640 <__sinit_lock_release+0x8>)
 800f63a:	f000 b8a7 	b.w	800f78c <__retarget_lock_release_recursive>
 800f63e:	bf00      	nop
 800f640:	20000e13 	.word	0x20000e13

0800f644 <__sinit>:
 800f644:	b510      	push	{r4, lr}
 800f646:	4604      	mov	r4, r0
 800f648:	f7ff fff0 	bl	800f62c <__sinit_lock_acquire>
 800f64c:	69a3      	ldr	r3, [r4, #24]
 800f64e:	b11b      	cbz	r3, 800f658 <__sinit+0x14>
 800f650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f654:	f7ff bff0 	b.w	800f638 <__sinit_lock_release>
 800f658:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f65c:	6523      	str	r3, [r4, #80]	; 0x50
 800f65e:	4b13      	ldr	r3, [pc, #76]	; (800f6ac <__sinit+0x68>)
 800f660:	4a13      	ldr	r2, [pc, #76]	; (800f6b0 <__sinit+0x6c>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	62a2      	str	r2, [r4, #40]	; 0x28
 800f666:	42a3      	cmp	r3, r4
 800f668:	bf04      	itt	eq
 800f66a:	2301      	moveq	r3, #1
 800f66c:	61a3      	streq	r3, [r4, #24]
 800f66e:	4620      	mov	r0, r4
 800f670:	f000 f820 	bl	800f6b4 <__sfp>
 800f674:	6060      	str	r0, [r4, #4]
 800f676:	4620      	mov	r0, r4
 800f678:	f000 f81c 	bl	800f6b4 <__sfp>
 800f67c:	60a0      	str	r0, [r4, #8]
 800f67e:	4620      	mov	r0, r4
 800f680:	f000 f818 	bl	800f6b4 <__sfp>
 800f684:	2200      	movs	r2, #0
 800f686:	60e0      	str	r0, [r4, #12]
 800f688:	2104      	movs	r1, #4
 800f68a:	6860      	ldr	r0, [r4, #4]
 800f68c:	f7ff ff82 	bl	800f594 <std>
 800f690:	68a0      	ldr	r0, [r4, #8]
 800f692:	2201      	movs	r2, #1
 800f694:	2109      	movs	r1, #9
 800f696:	f7ff ff7d 	bl	800f594 <std>
 800f69a:	68e0      	ldr	r0, [r4, #12]
 800f69c:	2202      	movs	r2, #2
 800f69e:	2112      	movs	r1, #18
 800f6a0:	f7ff ff78 	bl	800f594 <std>
 800f6a4:	2301      	movs	r3, #1
 800f6a6:	61a3      	str	r3, [r4, #24]
 800f6a8:	e7d2      	b.n	800f650 <__sinit+0xc>
 800f6aa:	bf00      	nop
 800f6ac:	080111e0 	.word	0x080111e0
 800f6b0:	0800f5dd 	.word	0x0800f5dd

0800f6b4 <__sfp>:
 800f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b6:	4607      	mov	r7, r0
 800f6b8:	f7ff ffac 	bl	800f614 <__sfp_lock_acquire>
 800f6bc:	4b1e      	ldr	r3, [pc, #120]	; (800f738 <__sfp+0x84>)
 800f6be:	681e      	ldr	r6, [r3, #0]
 800f6c0:	69b3      	ldr	r3, [r6, #24]
 800f6c2:	b913      	cbnz	r3, 800f6ca <__sfp+0x16>
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	f7ff ffbd 	bl	800f644 <__sinit>
 800f6ca:	3648      	adds	r6, #72	; 0x48
 800f6cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	d503      	bpl.n	800f6dc <__sfp+0x28>
 800f6d4:	6833      	ldr	r3, [r6, #0]
 800f6d6:	b30b      	cbz	r3, 800f71c <__sfp+0x68>
 800f6d8:	6836      	ldr	r6, [r6, #0]
 800f6da:	e7f7      	b.n	800f6cc <__sfp+0x18>
 800f6dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f6e0:	b9d5      	cbnz	r5, 800f718 <__sfp+0x64>
 800f6e2:	4b16      	ldr	r3, [pc, #88]	; (800f73c <__sfp+0x88>)
 800f6e4:	60e3      	str	r3, [r4, #12]
 800f6e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f6ea:	6665      	str	r5, [r4, #100]	; 0x64
 800f6ec:	f000 f84c 	bl	800f788 <__retarget_lock_init_recursive>
 800f6f0:	f7ff ff96 	bl	800f620 <__sfp_lock_release>
 800f6f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f6fc:	6025      	str	r5, [r4, #0]
 800f6fe:	61a5      	str	r5, [r4, #24]
 800f700:	2208      	movs	r2, #8
 800f702:	4629      	mov	r1, r5
 800f704:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f708:	f7fe fa0e 	bl	800db28 <memset>
 800f70c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f710:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f714:	4620      	mov	r0, r4
 800f716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f718:	3468      	adds	r4, #104	; 0x68
 800f71a:	e7d9      	b.n	800f6d0 <__sfp+0x1c>
 800f71c:	2104      	movs	r1, #4
 800f71e:	4638      	mov	r0, r7
 800f720:	f7ff ff62 	bl	800f5e8 <__sfmoreglue>
 800f724:	4604      	mov	r4, r0
 800f726:	6030      	str	r0, [r6, #0]
 800f728:	2800      	cmp	r0, #0
 800f72a:	d1d5      	bne.n	800f6d8 <__sfp+0x24>
 800f72c:	f7ff ff78 	bl	800f620 <__sfp_lock_release>
 800f730:	230c      	movs	r3, #12
 800f732:	603b      	str	r3, [r7, #0]
 800f734:	e7ee      	b.n	800f714 <__sfp+0x60>
 800f736:	bf00      	nop
 800f738:	080111e0 	.word	0x080111e0
 800f73c:	ffff0001 	.word	0xffff0001

0800f740 <_fwalk_reent>:
 800f740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f744:	4606      	mov	r6, r0
 800f746:	4688      	mov	r8, r1
 800f748:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f74c:	2700      	movs	r7, #0
 800f74e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f752:	f1b9 0901 	subs.w	r9, r9, #1
 800f756:	d505      	bpl.n	800f764 <_fwalk_reent+0x24>
 800f758:	6824      	ldr	r4, [r4, #0]
 800f75a:	2c00      	cmp	r4, #0
 800f75c:	d1f7      	bne.n	800f74e <_fwalk_reent+0xe>
 800f75e:	4638      	mov	r0, r7
 800f760:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f764:	89ab      	ldrh	r3, [r5, #12]
 800f766:	2b01      	cmp	r3, #1
 800f768:	d907      	bls.n	800f77a <_fwalk_reent+0x3a>
 800f76a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f76e:	3301      	adds	r3, #1
 800f770:	d003      	beq.n	800f77a <_fwalk_reent+0x3a>
 800f772:	4629      	mov	r1, r5
 800f774:	4630      	mov	r0, r6
 800f776:	47c0      	blx	r8
 800f778:	4307      	orrs	r7, r0
 800f77a:	3568      	adds	r5, #104	; 0x68
 800f77c:	e7e9      	b.n	800f752 <_fwalk_reent+0x12>
	...

0800f780 <_localeconv_r>:
 800f780:	4800      	ldr	r0, [pc, #0]	; (800f784 <_localeconv_r+0x4>)
 800f782:	4770      	bx	lr
 800f784:	200007a4 	.word	0x200007a4

0800f788 <__retarget_lock_init_recursive>:
 800f788:	4770      	bx	lr

0800f78a <__retarget_lock_acquire_recursive>:
 800f78a:	4770      	bx	lr

0800f78c <__retarget_lock_release_recursive>:
 800f78c:	4770      	bx	lr

0800f78e <__swhatbuf_r>:
 800f78e:	b570      	push	{r4, r5, r6, lr}
 800f790:	460e      	mov	r6, r1
 800f792:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f796:	2900      	cmp	r1, #0
 800f798:	b096      	sub	sp, #88	; 0x58
 800f79a:	4614      	mov	r4, r2
 800f79c:	461d      	mov	r5, r3
 800f79e:	da07      	bge.n	800f7b0 <__swhatbuf_r+0x22>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	602b      	str	r3, [r5, #0]
 800f7a4:	89b3      	ldrh	r3, [r6, #12]
 800f7a6:	061a      	lsls	r2, r3, #24
 800f7a8:	d410      	bmi.n	800f7cc <__swhatbuf_r+0x3e>
 800f7aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f7ae:	e00e      	b.n	800f7ce <__swhatbuf_r+0x40>
 800f7b0:	466a      	mov	r2, sp
 800f7b2:	f000 ffed 	bl	8010790 <_fstat_r>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	dbf2      	blt.n	800f7a0 <__swhatbuf_r+0x12>
 800f7ba:	9a01      	ldr	r2, [sp, #4]
 800f7bc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f7c0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f7c4:	425a      	negs	r2, r3
 800f7c6:	415a      	adcs	r2, r3
 800f7c8:	602a      	str	r2, [r5, #0]
 800f7ca:	e7ee      	b.n	800f7aa <__swhatbuf_r+0x1c>
 800f7cc:	2340      	movs	r3, #64	; 0x40
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	6023      	str	r3, [r4, #0]
 800f7d2:	b016      	add	sp, #88	; 0x58
 800f7d4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f7d8 <__smakebuf_r>:
 800f7d8:	898b      	ldrh	r3, [r1, #12]
 800f7da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f7dc:	079d      	lsls	r5, r3, #30
 800f7de:	4606      	mov	r6, r0
 800f7e0:	460c      	mov	r4, r1
 800f7e2:	d507      	bpl.n	800f7f4 <__smakebuf_r+0x1c>
 800f7e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f7e8:	6023      	str	r3, [r4, #0]
 800f7ea:	6123      	str	r3, [r4, #16]
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	6163      	str	r3, [r4, #20]
 800f7f0:	b002      	add	sp, #8
 800f7f2:	bd70      	pop	{r4, r5, r6, pc}
 800f7f4:	ab01      	add	r3, sp, #4
 800f7f6:	466a      	mov	r2, sp
 800f7f8:	f7ff ffc9 	bl	800f78e <__swhatbuf_r>
 800f7fc:	9900      	ldr	r1, [sp, #0]
 800f7fe:	4605      	mov	r5, r0
 800f800:	4630      	mov	r0, r6
 800f802:	f000 fc0f 	bl	8010024 <_malloc_r>
 800f806:	b948      	cbnz	r0, 800f81c <__smakebuf_r+0x44>
 800f808:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f80c:	059a      	lsls	r2, r3, #22
 800f80e:	d4ef      	bmi.n	800f7f0 <__smakebuf_r+0x18>
 800f810:	f023 0303 	bic.w	r3, r3, #3
 800f814:	f043 0302 	orr.w	r3, r3, #2
 800f818:	81a3      	strh	r3, [r4, #12]
 800f81a:	e7e3      	b.n	800f7e4 <__smakebuf_r+0xc>
 800f81c:	4b0d      	ldr	r3, [pc, #52]	; (800f854 <__smakebuf_r+0x7c>)
 800f81e:	62b3      	str	r3, [r6, #40]	; 0x28
 800f820:	89a3      	ldrh	r3, [r4, #12]
 800f822:	6020      	str	r0, [r4, #0]
 800f824:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f828:	81a3      	strh	r3, [r4, #12]
 800f82a:	9b00      	ldr	r3, [sp, #0]
 800f82c:	6163      	str	r3, [r4, #20]
 800f82e:	9b01      	ldr	r3, [sp, #4]
 800f830:	6120      	str	r0, [r4, #16]
 800f832:	b15b      	cbz	r3, 800f84c <__smakebuf_r+0x74>
 800f834:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f838:	4630      	mov	r0, r6
 800f83a:	f000 ffbb 	bl	80107b4 <_isatty_r>
 800f83e:	b128      	cbz	r0, 800f84c <__smakebuf_r+0x74>
 800f840:	89a3      	ldrh	r3, [r4, #12]
 800f842:	f023 0303 	bic.w	r3, r3, #3
 800f846:	f043 0301 	orr.w	r3, r3, #1
 800f84a:	81a3      	strh	r3, [r4, #12]
 800f84c:	89a0      	ldrh	r0, [r4, #12]
 800f84e:	4305      	orrs	r5, r0
 800f850:	81a5      	strh	r5, [r4, #12]
 800f852:	e7cd      	b.n	800f7f0 <__smakebuf_r+0x18>
 800f854:	0800f5dd 	.word	0x0800f5dd

0800f858 <malloc>:
 800f858:	4b02      	ldr	r3, [pc, #8]	; (800f864 <malloc+0xc>)
 800f85a:	4601      	mov	r1, r0
 800f85c:	6818      	ldr	r0, [r3, #0]
 800f85e:	f000 bbe1 	b.w	8010024 <_malloc_r>
 800f862:	bf00      	nop
 800f864:	20000650 	.word	0x20000650

0800f868 <_Balloc>:
 800f868:	b570      	push	{r4, r5, r6, lr}
 800f86a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f86c:	4604      	mov	r4, r0
 800f86e:	460d      	mov	r5, r1
 800f870:	b976      	cbnz	r6, 800f890 <_Balloc+0x28>
 800f872:	2010      	movs	r0, #16
 800f874:	f7ff fff0 	bl	800f858 <malloc>
 800f878:	4602      	mov	r2, r0
 800f87a:	6260      	str	r0, [r4, #36]	; 0x24
 800f87c:	b920      	cbnz	r0, 800f888 <_Balloc+0x20>
 800f87e:	4b18      	ldr	r3, [pc, #96]	; (800f8e0 <_Balloc+0x78>)
 800f880:	4818      	ldr	r0, [pc, #96]	; (800f8e4 <_Balloc+0x7c>)
 800f882:	2166      	movs	r1, #102	; 0x66
 800f884:	f000 ff44 	bl	8010710 <__assert_func>
 800f888:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f88c:	6006      	str	r6, [r0, #0]
 800f88e:	60c6      	str	r6, [r0, #12]
 800f890:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f892:	68f3      	ldr	r3, [r6, #12]
 800f894:	b183      	cbz	r3, 800f8b8 <_Balloc+0x50>
 800f896:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f898:	68db      	ldr	r3, [r3, #12]
 800f89a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f89e:	b9b8      	cbnz	r0, 800f8d0 <_Balloc+0x68>
 800f8a0:	2101      	movs	r1, #1
 800f8a2:	fa01 f605 	lsl.w	r6, r1, r5
 800f8a6:	1d72      	adds	r2, r6, #5
 800f8a8:	0092      	lsls	r2, r2, #2
 800f8aa:	4620      	mov	r0, r4
 800f8ac:	f000 fb5a 	bl	800ff64 <_calloc_r>
 800f8b0:	b160      	cbz	r0, 800f8cc <_Balloc+0x64>
 800f8b2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8b6:	e00e      	b.n	800f8d6 <_Balloc+0x6e>
 800f8b8:	2221      	movs	r2, #33	; 0x21
 800f8ba:	2104      	movs	r1, #4
 800f8bc:	4620      	mov	r0, r4
 800f8be:	f000 fb51 	bl	800ff64 <_calloc_r>
 800f8c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f8c4:	60f0      	str	r0, [r6, #12]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d1e4      	bne.n	800f896 <_Balloc+0x2e>
 800f8cc:	2000      	movs	r0, #0
 800f8ce:	bd70      	pop	{r4, r5, r6, pc}
 800f8d0:	6802      	ldr	r2, [r0, #0]
 800f8d2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8d6:	2300      	movs	r3, #0
 800f8d8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8dc:	e7f7      	b.n	800f8ce <_Balloc+0x66>
 800f8de:	bf00      	nop
 800f8e0:	08011225 	.word	0x08011225
 800f8e4:	0801130c 	.word	0x0801130c

0800f8e8 <_Bfree>:
 800f8e8:	b570      	push	{r4, r5, r6, lr}
 800f8ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f8ec:	4605      	mov	r5, r0
 800f8ee:	460c      	mov	r4, r1
 800f8f0:	b976      	cbnz	r6, 800f910 <_Bfree+0x28>
 800f8f2:	2010      	movs	r0, #16
 800f8f4:	f7ff ffb0 	bl	800f858 <malloc>
 800f8f8:	4602      	mov	r2, r0
 800f8fa:	6268      	str	r0, [r5, #36]	; 0x24
 800f8fc:	b920      	cbnz	r0, 800f908 <_Bfree+0x20>
 800f8fe:	4b09      	ldr	r3, [pc, #36]	; (800f924 <_Bfree+0x3c>)
 800f900:	4809      	ldr	r0, [pc, #36]	; (800f928 <_Bfree+0x40>)
 800f902:	218a      	movs	r1, #138	; 0x8a
 800f904:	f000 ff04 	bl	8010710 <__assert_func>
 800f908:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f90c:	6006      	str	r6, [r0, #0]
 800f90e:	60c6      	str	r6, [r0, #12]
 800f910:	b13c      	cbz	r4, 800f922 <_Bfree+0x3a>
 800f912:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f914:	6862      	ldr	r2, [r4, #4]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f91c:	6021      	str	r1, [r4, #0]
 800f91e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f922:	bd70      	pop	{r4, r5, r6, pc}
 800f924:	08011225 	.word	0x08011225
 800f928:	0801130c 	.word	0x0801130c

0800f92c <__multadd>:
 800f92c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f930:	690e      	ldr	r6, [r1, #16]
 800f932:	4607      	mov	r7, r0
 800f934:	4698      	mov	r8, r3
 800f936:	460c      	mov	r4, r1
 800f938:	f101 0014 	add.w	r0, r1, #20
 800f93c:	2300      	movs	r3, #0
 800f93e:	6805      	ldr	r5, [r0, #0]
 800f940:	b2a9      	uxth	r1, r5
 800f942:	fb02 8101 	mla	r1, r2, r1, r8
 800f946:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800f94a:	0c2d      	lsrs	r5, r5, #16
 800f94c:	fb02 c505 	mla	r5, r2, r5, ip
 800f950:	b289      	uxth	r1, r1
 800f952:	3301      	adds	r3, #1
 800f954:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800f958:	429e      	cmp	r6, r3
 800f95a:	f840 1b04 	str.w	r1, [r0], #4
 800f95e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800f962:	dcec      	bgt.n	800f93e <__multadd+0x12>
 800f964:	f1b8 0f00 	cmp.w	r8, #0
 800f968:	d022      	beq.n	800f9b0 <__multadd+0x84>
 800f96a:	68a3      	ldr	r3, [r4, #8]
 800f96c:	42b3      	cmp	r3, r6
 800f96e:	dc19      	bgt.n	800f9a4 <__multadd+0x78>
 800f970:	6861      	ldr	r1, [r4, #4]
 800f972:	4638      	mov	r0, r7
 800f974:	3101      	adds	r1, #1
 800f976:	f7ff ff77 	bl	800f868 <_Balloc>
 800f97a:	4605      	mov	r5, r0
 800f97c:	b928      	cbnz	r0, 800f98a <__multadd+0x5e>
 800f97e:	4602      	mov	r2, r0
 800f980:	4b0d      	ldr	r3, [pc, #52]	; (800f9b8 <__multadd+0x8c>)
 800f982:	480e      	ldr	r0, [pc, #56]	; (800f9bc <__multadd+0x90>)
 800f984:	21b5      	movs	r1, #181	; 0xb5
 800f986:	f000 fec3 	bl	8010710 <__assert_func>
 800f98a:	6922      	ldr	r2, [r4, #16]
 800f98c:	3202      	adds	r2, #2
 800f98e:	f104 010c 	add.w	r1, r4, #12
 800f992:	0092      	lsls	r2, r2, #2
 800f994:	300c      	adds	r0, #12
 800f996:	f7fe f8b9 	bl	800db0c <memcpy>
 800f99a:	4621      	mov	r1, r4
 800f99c:	4638      	mov	r0, r7
 800f99e:	f7ff ffa3 	bl	800f8e8 <_Bfree>
 800f9a2:	462c      	mov	r4, r5
 800f9a4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800f9a8:	3601      	adds	r6, #1
 800f9aa:	f8c3 8014 	str.w	r8, [r3, #20]
 800f9ae:	6126      	str	r6, [r4, #16]
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9b6:	bf00      	nop
 800f9b8:	0801129b 	.word	0x0801129b
 800f9bc:	0801130c 	.word	0x0801130c

0800f9c0 <__hi0bits>:
 800f9c0:	0c03      	lsrs	r3, r0, #16
 800f9c2:	041b      	lsls	r3, r3, #16
 800f9c4:	b9d3      	cbnz	r3, 800f9fc <__hi0bits+0x3c>
 800f9c6:	0400      	lsls	r0, r0, #16
 800f9c8:	2310      	movs	r3, #16
 800f9ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f9ce:	bf04      	itt	eq
 800f9d0:	0200      	lsleq	r0, r0, #8
 800f9d2:	3308      	addeq	r3, #8
 800f9d4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f9d8:	bf04      	itt	eq
 800f9da:	0100      	lsleq	r0, r0, #4
 800f9dc:	3304      	addeq	r3, #4
 800f9de:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f9e2:	bf04      	itt	eq
 800f9e4:	0080      	lsleq	r0, r0, #2
 800f9e6:	3302      	addeq	r3, #2
 800f9e8:	2800      	cmp	r0, #0
 800f9ea:	db05      	blt.n	800f9f8 <__hi0bits+0x38>
 800f9ec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f9f0:	f103 0301 	add.w	r3, r3, #1
 800f9f4:	bf08      	it	eq
 800f9f6:	2320      	moveq	r3, #32
 800f9f8:	4618      	mov	r0, r3
 800f9fa:	4770      	bx	lr
 800f9fc:	2300      	movs	r3, #0
 800f9fe:	e7e4      	b.n	800f9ca <__hi0bits+0xa>

0800fa00 <__lo0bits>:
 800fa00:	6803      	ldr	r3, [r0, #0]
 800fa02:	f013 0207 	ands.w	r2, r3, #7
 800fa06:	4601      	mov	r1, r0
 800fa08:	d00b      	beq.n	800fa22 <__lo0bits+0x22>
 800fa0a:	07da      	lsls	r2, r3, #31
 800fa0c:	d424      	bmi.n	800fa58 <__lo0bits+0x58>
 800fa0e:	0798      	lsls	r0, r3, #30
 800fa10:	bf49      	itett	mi
 800fa12:	085b      	lsrmi	r3, r3, #1
 800fa14:	089b      	lsrpl	r3, r3, #2
 800fa16:	2001      	movmi	r0, #1
 800fa18:	600b      	strmi	r3, [r1, #0]
 800fa1a:	bf5c      	itt	pl
 800fa1c:	600b      	strpl	r3, [r1, #0]
 800fa1e:	2002      	movpl	r0, #2
 800fa20:	4770      	bx	lr
 800fa22:	b298      	uxth	r0, r3
 800fa24:	b9b0      	cbnz	r0, 800fa54 <__lo0bits+0x54>
 800fa26:	0c1b      	lsrs	r3, r3, #16
 800fa28:	2010      	movs	r0, #16
 800fa2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fa2e:	bf04      	itt	eq
 800fa30:	0a1b      	lsreq	r3, r3, #8
 800fa32:	3008      	addeq	r0, #8
 800fa34:	071a      	lsls	r2, r3, #28
 800fa36:	bf04      	itt	eq
 800fa38:	091b      	lsreq	r3, r3, #4
 800fa3a:	3004      	addeq	r0, #4
 800fa3c:	079a      	lsls	r2, r3, #30
 800fa3e:	bf04      	itt	eq
 800fa40:	089b      	lsreq	r3, r3, #2
 800fa42:	3002      	addeq	r0, #2
 800fa44:	07da      	lsls	r2, r3, #31
 800fa46:	d403      	bmi.n	800fa50 <__lo0bits+0x50>
 800fa48:	085b      	lsrs	r3, r3, #1
 800fa4a:	f100 0001 	add.w	r0, r0, #1
 800fa4e:	d005      	beq.n	800fa5c <__lo0bits+0x5c>
 800fa50:	600b      	str	r3, [r1, #0]
 800fa52:	4770      	bx	lr
 800fa54:	4610      	mov	r0, r2
 800fa56:	e7e8      	b.n	800fa2a <__lo0bits+0x2a>
 800fa58:	2000      	movs	r0, #0
 800fa5a:	4770      	bx	lr
 800fa5c:	2020      	movs	r0, #32
 800fa5e:	4770      	bx	lr

0800fa60 <__i2b>:
 800fa60:	b510      	push	{r4, lr}
 800fa62:	460c      	mov	r4, r1
 800fa64:	2101      	movs	r1, #1
 800fa66:	f7ff feff 	bl	800f868 <_Balloc>
 800fa6a:	4602      	mov	r2, r0
 800fa6c:	b928      	cbnz	r0, 800fa7a <__i2b+0x1a>
 800fa6e:	4b05      	ldr	r3, [pc, #20]	; (800fa84 <__i2b+0x24>)
 800fa70:	4805      	ldr	r0, [pc, #20]	; (800fa88 <__i2b+0x28>)
 800fa72:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fa76:	f000 fe4b 	bl	8010710 <__assert_func>
 800fa7a:	2301      	movs	r3, #1
 800fa7c:	6144      	str	r4, [r0, #20]
 800fa7e:	6103      	str	r3, [r0, #16]
 800fa80:	bd10      	pop	{r4, pc}
 800fa82:	bf00      	nop
 800fa84:	0801129b 	.word	0x0801129b
 800fa88:	0801130c 	.word	0x0801130c

0800fa8c <__multiply>:
 800fa8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa90:	4614      	mov	r4, r2
 800fa92:	690a      	ldr	r2, [r1, #16]
 800fa94:	6923      	ldr	r3, [r4, #16]
 800fa96:	429a      	cmp	r2, r3
 800fa98:	bfb8      	it	lt
 800fa9a:	460b      	movlt	r3, r1
 800fa9c:	460d      	mov	r5, r1
 800fa9e:	bfbc      	itt	lt
 800faa0:	4625      	movlt	r5, r4
 800faa2:	461c      	movlt	r4, r3
 800faa4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800faa8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800faac:	68ab      	ldr	r3, [r5, #8]
 800faae:	6869      	ldr	r1, [r5, #4]
 800fab0:	eb0a 0709 	add.w	r7, sl, r9
 800fab4:	42bb      	cmp	r3, r7
 800fab6:	b085      	sub	sp, #20
 800fab8:	bfb8      	it	lt
 800faba:	3101      	addlt	r1, #1
 800fabc:	f7ff fed4 	bl	800f868 <_Balloc>
 800fac0:	b930      	cbnz	r0, 800fad0 <__multiply+0x44>
 800fac2:	4602      	mov	r2, r0
 800fac4:	4b42      	ldr	r3, [pc, #264]	; (800fbd0 <__multiply+0x144>)
 800fac6:	4843      	ldr	r0, [pc, #268]	; (800fbd4 <__multiply+0x148>)
 800fac8:	f240 115d 	movw	r1, #349	; 0x15d
 800facc:	f000 fe20 	bl	8010710 <__assert_func>
 800fad0:	f100 0614 	add.w	r6, r0, #20
 800fad4:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fad8:	4633      	mov	r3, r6
 800fada:	2200      	movs	r2, #0
 800fadc:	4543      	cmp	r3, r8
 800fade:	d31e      	bcc.n	800fb1e <__multiply+0x92>
 800fae0:	f105 0c14 	add.w	ip, r5, #20
 800fae4:	f104 0314 	add.w	r3, r4, #20
 800fae8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800faec:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800faf0:	9202      	str	r2, [sp, #8]
 800faf2:	ebac 0205 	sub.w	r2, ip, r5
 800faf6:	3a15      	subs	r2, #21
 800faf8:	f022 0203 	bic.w	r2, r2, #3
 800fafc:	3204      	adds	r2, #4
 800fafe:	f105 0115 	add.w	r1, r5, #21
 800fb02:	458c      	cmp	ip, r1
 800fb04:	bf38      	it	cc
 800fb06:	2204      	movcc	r2, #4
 800fb08:	9201      	str	r2, [sp, #4]
 800fb0a:	9a02      	ldr	r2, [sp, #8]
 800fb0c:	9303      	str	r3, [sp, #12]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d808      	bhi.n	800fb24 <__multiply+0x98>
 800fb12:	2f00      	cmp	r7, #0
 800fb14:	dc55      	bgt.n	800fbc2 <__multiply+0x136>
 800fb16:	6107      	str	r7, [r0, #16]
 800fb18:	b005      	add	sp, #20
 800fb1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb1e:	f843 2b04 	str.w	r2, [r3], #4
 800fb22:	e7db      	b.n	800fadc <__multiply+0x50>
 800fb24:	f8b3 a000 	ldrh.w	sl, [r3]
 800fb28:	f1ba 0f00 	cmp.w	sl, #0
 800fb2c:	d020      	beq.n	800fb70 <__multiply+0xe4>
 800fb2e:	f105 0e14 	add.w	lr, r5, #20
 800fb32:	46b1      	mov	r9, r6
 800fb34:	2200      	movs	r2, #0
 800fb36:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fb3a:	f8d9 b000 	ldr.w	fp, [r9]
 800fb3e:	b2a1      	uxth	r1, r4
 800fb40:	fa1f fb8b 	uxth.w	fp, fp
 800fb44:	fb0a b101 	mla	r1, sl, r1, fp
 800fb48:	4411      	add	r1, r2
 800fb4a:	f8d9 2000 	ldr.w	r2, [r9]
 800fb4e:	0c24      	lsrs	r4, r4, #16
 800fb50:	0c12      	lsrs	r2, r2, #16
 800fb52:	fb0a 2404 	mla	r4, sl, r4, r2
 800fb56:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fb5a:	b289      	uxth	r1, r1
 800fb5c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fb60:	45f4      	cmp	ip, lr
 800fb62:	f849 1b04 	str.w	r1, [r9], #4
 800fb66:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fb6a:	d8e4      	bhi.n	800fb36 <__multiply+0xaa>
 800fb6c:	9901      	ldr	r1, [sp, #4]
 800fb6e:	5072      	str	r2, [r6, r1]
 800fb70:	9a03      	ldr	r2, [sp, #12]
 800fb72:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fb76:	3304      	adds	r3, #4
 800fb78:	f1b9 0f00 	cmp.w	r9, #0
 800fb7c:	d01f      	beq.n	800fbbe <__multiply+0x132>
 800fb7e:	6834      	ldr	r4, [r6, #0]
 800fb80:	f105 0114 	add.w	r1, r5, #20
 800fb84:	46b6      	mov	lr, r6
 800fb86:	f04f 0a00 	mov.w	sl, #0
 800fb8a:	880a      	ldrh	r2, [r1, #0]
 800fb8c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fb90:	fb09 b202 	mla	r2, r9, r2, fp
 800fb94:	4492      	add	sl, r2
 800fb96:	b2a4      	uxth	r4, r4
 800fb98:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fb9c:	f84e 4b04 	str.w	r4, [lr], #4
 800fba0:	f851 4b04 	ldr.w	r4, [r1], #4
 800fba4:	f8be 2000 	ldrh.w	r2, [lr]
 800fba8:	0c24      	lsrs	r4, r4, #16
 800fbaa:	fb09 2404 	mla	r4, r9, r4, r2
 800fbae:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fbb2:	458c      	cmp	ip, r1
 800fbb4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800fbb8:	d8e7      	bhi.n	800fb8a <__multiply+0xfe>
 800fbba:	9a01      	ldr	r2, [sp, #4]
 800fbbc:	50b4      	str	r4, [r6, r2]
 800fbbe:	3604      	adds	r6, #4
 800fbc0:	e7a3      	b.n	800fb0a <__multiply+0x7e>
 800fbc2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d1a5      	bne.n	800fb16 <__multiply+0x8a>
 800fbca:	3f01      	subs	r7, #1
 800fbcc:	e7a1      	b.n	800fb12 <__multiply+0x86>
 800fbce:	bf00      	nop
 800fbd0:	0801129b 	.word	0x0801129b
 800fbd4:	0801130c 	.word	0x0801130c

0800fbd8 <__pow5mult>:
 800fbd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fbdc:	4615      	mov	r5, r2
 800fbde:	f012 0203 	ands.w	r2, r2, #3
 800fbe2:	4606      	mov	r6, r0
 800fbe4:	460f      	mov	r7, r1
 800fbe6:	d007      	beq.n	800fbf8 <__pow5mult+0x20>
 800fbe8:	4c25      	ldr	r4, [pc, #148]	; (800fc80 <__pow5mult+0xa8>)
 800fbea:	3a01      	subs	r2, #1
 800fbec:	2300      	movs	r3, #0
 800fbee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fbf2:	f7ff fe9b 	bl	800f92c <__multadd>
 800fbf6:	4607      	mov	r7, r0
 800fbf8:	10ad      	asrs	r5, r5, #2
 800fbfa:	d03d      	beq.n	800fc78 <__pow5mult+0xa0>
 800fbfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fbfe:	b97c      	cbnz	r4, 800fc20 <__pow5mult+0x48>
 800fc00:	2010      	movs	r0, #16
 800fc02:	f7ff fe29 	bl	800f858 <malloc>
 800fc06:	4602      	mov	r2, r0
 800fc08:	6270      	str	r0, [r6, #36]	; 0x24
 800fc0a:	b928      	cbnz	r0, 800fc18 <__pow5mult+0x40>
 800fc0c:	4b1d      	ldr	r3, [pc, #116]	; (800fc84 <__pow5mult+0xac>)
 800fc0e:	481e      	ldr	r0, [pc, #120]	; (800fc88 <__pow5mult+0xb0>)
 800fc10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fc14:	f000 fd7c 	bl	8010710 <__assert_func>
 800fc18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fc1c:	6004      	str	r4, [r0, #0]
 800fc1e:	60c4      	str	r4, [r0, #12]
 800fc20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fc24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fc28:	b94c      	cbnz	r4, 800fc3e <__pow5mult+0x66>
 800fc2a:	f240 2171 	movw	r1, #625	; 0x271
 800fc2e:	4630      	mov	r0, r6
 800fc30:	f7ff ff16 	bl	800fa60 <__i2b>
 800fc34:	2300      	movs	r3, #0
 800fc36:	f8c8 0008 	str.w	r0, [r8, #8]
 800fc3a:	4604      	mov	r4, r0
 800fc3c:	6003      	str	r3, [r0, #0]
 800fc3e:	f04f 0900 	mov.w	r9, #0
 800fc42:	07eb      	lsls	r3, r5, #31
 800fc44:	d50a      	bpl.n	800fc5c <__pow5mult+0x84>
 800fc46:	4639      	mov	r1, r7
 800fc48:	4622      	mov	r2, r4
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f7ff ff1e 	bl	800fa8c <__multiply>
 800fc50:	4639      	mov	r1, r7
 800fc52:	4680      	mov	r8, r0
 800fc54:	4630      	mov	r0, r6
 800fc56:	f7ff fe47 	bl	800f8e8 <_Bfree>
 800fc5a:	4647      	mov	r7, r8
 800fc5c:	106d      	asrs	r5, r5, #1
 800fc5e:	d00b      	beq.n	800fc78 <__pow5mult+0xa0>
 800fc60:	6820      	ldr	r0, [r4, #0]
 800fc62:	b938      	cbnz	r0, 800fc74 <__pow5mult+0x9c>
 800fc64:	4622      	mov	r2, r4
 800fc66:	4621      	mov	r1, r4
 800fc68:	4630      	mov	r0, r6
 800fc6a:	f7ff ff0f 	bl	800fa8c <__multiply>
 800fc6e:	6020      	str	r0, [r4, #0]
 800fc70:	f8c0 9000 	str.w	r9, [r0]
 800fc74:	4604      	mov	r4, r0
 800fc76:	e7e4      	b.n	800fc42 <__pow5mult+0x6a>
 800fc78:	4638      	mov	r0, r7
 800fc7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fc7e:	bf00      	nop
 800fc80:	08011460 	.word	0x08011460
 800fc84:	08011225 	.word	0x08011225
 800fc88:	0801130c 	.word	0x0801130c

0800fc8c <__lshift>:
 800fc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc90:	460c      	mov	r4, r1
 800fc92:	6849      	ldr	r1, [r1, #4]
 800fc94:	6923      	ldr	r3, [r4, #16]
 800fc96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fc9a:	68a3      	ldr	r3, [r4, #8]
 800fc9c:	4607      	mov	r7, r0
 800fc9e:	4691      	mov	r9, r2
 800fca0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fca4:	f108 0601 	add.w	r6, r8, #1
 800fca8:	42b3      	cmp	r3, r6
 800fcaa:	db0b      	blt.n	800fcc4 <__lshift+0x38>
 800fcac:	4638      	mov	r0, r7
 800fcae:	f7ff fddb 	bl	800f868 <_Balloc>
 800fcb2:	4605      	mov	r5, r0
 800fcb4:	b948      	cbnz	r0, 800fcca <__lshift+0x3e>
 800fcb6:	4602      	mov	r2, r0
 800fcb8:	4b28      	ldr	r3, [pc, #160]	; (800fd5c <__lshift+0xd0>)
 800fcba:	4829      	ldr	r0, [pc, #164]	; (800fd60 <__lshift+0xd4>)
 800fcbc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fcc0:	f000 fd26 	bl	8010710 <__assert_func>
 800fcc4:	3101      	adds	r1, #1
 800fcc6:	005b      	lsls	r3, r3, #1
 800fcc8:	e7ee      	b.n	800fca8 <__lshift+0x1c>
 800fcca:	2300      	movs	r3, #0
 800fccc:	f100 0114 	add.w	r1, r0, #20
 800fcd0:	f100 0210 	add.w	r2, r0, #16
 800fcd4:	4618      	mov	r0, r3
 800fcd6:	4553      	cmp	r3, sl
 800fcd8:	db33      	blt.n	800fd42 <__lshift+0xb6>
 800fcda:	6920      	ldr	r0, [r4, #16]
 800fcdc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fce0:	f104 0314 	add.w	r3, r4, #20
 800fce4:	f019 091f 	ands.w	r9, r9, #31
 800fce8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fcf0:	d02b      	beq.n	800fd4a <__lshift+0xbe>
 800fcf2:	f1c9 0e20 	rsb	lr, r9, #32
 800fcf6:	468a      	mov	sl, r1
 800fcf8:	2200      	movs	r2, #0
 800fcfa:	6818      	ldr	r0, [r3, #0]
 800fcfc:	fa00 f009 	lsl.w	r0, r0, r9
 800fd00:	4302      	orrs	r2, r0
 800fd02:	f84a 2b04 	str.w	r2, [sl], #4
 800fd06:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd0a:	459c      	cmp	ip, r3
 800fd0c:	fa22 f20e 	lsr.w	r2, r2, lr
 800fd10:	d8f3      	bhi.n	800fcfa <__lshift+0x6e>
 800fd12:	ebac 0304 	sub.w	r3, ip, r4
 800fd16:	3b15      	subs	r3, #21
 800fd18:	f023 0303 	bic.w	r3, r3, #3
 800fd1c:	3304      	adds	r3, #4
 800fd1e:	f104 0015 	add.w	r0, r4, #21
 800fd22:	4584      	cmp	ip, r0
 800fd24:	bf38      	it	cc
 800fd26:	2304      	movcc	r3, #4
 800fd28:	50ca      	str	r2, [r1, r3]
 800fd2a:	b10a      	cbz	r2, 800fd30 <__lshift+0xa4>
 800fd2c:	f108 0602 	add.w	r6, r8, #2
 800fd30:	3e01      	subs	r6, #1
 800fd32:	4638      	mov	r0, r7
 800fd34:	612e      	str	r6, [r5, #16]
 800fd36:	4621      	mov	r1, r4
 800fd38:	f7ff fdd6 	bl	800f8e8 <_Bfree>
 800fd3c:	4628      	mov	r0, r5
 800fd3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd42:	f842 0f04 	str.w	r0, [r2, #4]!
 800fd46:	3301      	adds	r3, #1
 800fd48:	e7c5      	b.n	800fcd6 <__lshift+0x4a>
 800fd4a:	3904      	subs	r1, #4
 800fd4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fd50:	f841 2f04 	str.w	r2, [r1, #4]!
 800fd54:	459c      	cmp	ip, r3
 800fd56:	d8f9      	bhi.n	800fd4c <__lshift+0xc0>
 800fd58:	e7ea      	b.n	800fd30 <__lshift+0xa4>
 800fd5a:	bf00      	nop
 800fd5c:	0801129b 	.word	0x0801129b
 800fd60:	0801130c 	.word	0x0801130c

0800fd64 <__mcmp>:
 800fd64:	b530      	push	{r4, r5, lr}
 800fd66:	6902      	ldr	r2, [r0, #16]
 800fd68:	690c      	ldr	r4, [r1, #16]
 800fd6a:	1b12      	subs	r2, r2, r4
 800fd6c:	d10e      	bne.n	800fd8c <__mcmp+0x28>
 800fd6e:	f100 0314 	add.w	r3, r0, #20
 800fd72:	3114      	adds	r1, #20
 800fd74:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fd78:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fd7c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fd80:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fd84:	42a5      	cmp	r5, r4
 800fd86:	d003      	beq.n	800fd90 <__mcmp+0x2c>
 800fd88:	d305      	bcc.n	800fd96 <__mcmp+0x32>
 800fd8a:	2201      	movs	r2, #1
 800fd8c:	4610      	mov	r0, r2
 800fd8e:	bd30      	pop	{r4, r5, pc}
 800fd90:	4283      	cmp	r3, r0
 800fd92:	d3f3      	bcc.n	800fd7c <__mcmp+0x18>
 800fd94:	e7fa      	b.n	800fd8c <__mcmp+0x28>
 800fd96:	f04f 32ff 	mov.w	r2, #4294967295
 800fd9a:	e7f7      	b.n	800fd8c <__mcmp+0x28>

0800fd9c <__mdiff>:
 800fd9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fda0:	460c      	mov	r4, r1
 800fda2:	4606      	mov	r6, r0
 800fda4:	4611      	mov	r1, r2
 800fda6:	4620      	mov	r0, r4
 800fda8:	4617      	mov	r7, r2
 800fdaa:	f7ff ffdb 	bl	800fd64 <__mcmp>
 800fdae:	1e05      	subs	r5, r0, #0
 800fdb0:	d110      	bne.n	800fdd4 <__mdiff+0x38>
 800fdb2:	4629      	mov	r1, r5
 800fdb4:	4630      	mov	r0, r6
 800fdb6:	f7ff fd57 	bl	800f868 <_Balloc>
 800fdba:	b930      	cbnz	r0, 800fdca <__mdiff+0x2e>
 800fdbc:	4b39      	ldr	r3, [pc, #228]	; (800fea4 <__mdiff+0x108>)
 800fdbe:	4602      	mov	r2, r0
 800fdc0:	f240 2132 	movw	r1, #562	; 0x232
 800fdc4:	4838      	ldr	r0, [pc, #224]	; (800fea8 <__mdiff+0x10c>)
 800fdc6:	f000 fca3 	bl	8010710 <__assert_func>
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fdd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdd4:	bfa4      	itt	ge
 800fdd6:	463b      	movge	r3, r7
 800fdd8:	4627      	movge	r7, r4
 800fdda:	4630      	mov	r0, r6
 800fddc:	6879      	ldr	r1, [r7, #4]
 800fdde:	bfa6      	itte	ge
 800fde0:	461c      	movge	r4, r3
 800fde2:	2500      	movge	r5, #0
 800fde4:	2501      	movlt	r5, #1
 800fde6:	f7ff fd3f 	bl	800f868 <_Balloc>
 800fdea:	b920      	cbnz	r0, 800fdf6 <__mdiff+0x5a>
 800fdec:	4b2d      	ldr	r3, [pc, #180]	; (800fea4 <__mdiff+0x108>)
 800fdee:	4602      	mov	r2, r0
 800fdf0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fdf4:	e7e6      	b.n	800fdc4 <__mdiff+0x28>
 800fdf6:	693e      	ldr	r6, [r7, #16]
 800fdf8:	60c5      	str	r5, [r0, #12]
 800fdfa:	6925      	ldr	r5, [r4, #16]
 800fdfc:	f107 0114 	add.w	r1, r7, #20
 800fe00:	f104 0914 	add.w	r9, r4, #20
 800fe04:	f100 0e14 	add.w	lr, r0, #20
 800fe08:	f107 0210 	add.w	r2, r7, #16
 800fe0c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800fe10:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800fe14:	46f2      	mov	sl, lr
 800fe16:	2700      	movs	r7, #0
 800fe18:	f859 3b04 	ldr.w	r3, [r9], #4
 800fe1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fe20:	fa1f f883 	uxth.w	r8, r3
 800fe24:	fa17 f78b 	uxtah	r7, r7, fp
 800fe28:	0c1b      	lsrs	r3, r3, #16
 800fe2a:	eba7 0808 	sub.w	r8, r7, r8
 800fe2e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fe32:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fe36:	fa1f f888 	uxth.w	r8, r8
 800fe3a:	141f      	asrs	r7, r3, #16
 800fe3c:	454d      	cmp	r5, r9
 800fe3e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fe42:	f84a 3b04 	str.w	r3, [sl], #4
 800fe46:	d8e7      	bhi.n	800fe18 <__mdiff+0x7c>
 800fe48:	1b2b      	subs	r3, r5, r4
 800fe4a:	3b15      	subs	r3, #21
 800fe4c:	f023 0303 	bic.w	r3, r3, #3
 800fe50:	3304      	adds	r3, #4
 800fe52:	3415      	adds	r4, #21
 800fe54:	42a5      	cmp	r5, r4
 800fe56:	bf38      	it	cc
 800fe58:	2304      	movcc	r3, #4
 800fe5a:	4419      	add	r1, r3
 800fe5c:	4473      	add	r3, lr
 800fe5e:	469e      	mov	lr, r3
 800fe60:	460d      	mov	r5, r1
 800fe62:	4565      	cmp	r5, ip
 800fe64:	d30e      	bcc.n	800fe84 <__mdiff+0xe8>
 800fe66:	f10c 0203 	add.w	r2, ip, #3
 800fe6a:	1a52      	subs	r2, r2, r1
 800fe6c:	f022 0203 	bic.w	r2, r2, #3
 800fe70:	3903      	subs	r1, #3
 800fe72:	458c      	cmp	ip, r1
 800fe74:	bf38      	it	cc
 800fe76:	2200      	movcc	r2, #0
 800fe78:	441a      	add	r2, r3
 800fe7a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fe7e:	b17b      	cbz	r3, 800fea0 <__mdiff+0x104>
 800fe80:	6106      	str	r6, [r0, #16]
 800fe82:	e7a5      	b.n	800fdd0 <__mdiff+0x34>
 800fe84:	f855 8b04 	ldr.w	r8, [r5], #4
 800fe88:	fa17 f488 	uxtah	r4, r7, r8
 800fe8c:	1422      	asrs	r2, r4, #16
 800fe8e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800fe92:	b2a4      	uxth	r4, r4
 800fe94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800fe98:	f84e 4b04 	str.w	r4, [lr], #4
 800fe9c:	1417      	asrs	r7, r2, #16
 800fe9e:	e7e0      	b.n	800fe62 <__mdiff+0xc6>
 800fea0:	3e01      	subs	r6, #1
 800fea2:	e7ea      	b.n	800fe7a <__mdiff+0xde>
 800fea4:	0801129b 	.word	0x0801129b
 800fea8:	0801130c 	.word	0x0801130c

0800feac <__d2b>:
 800feac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800feb0:	4689      	mov	r9, r1
 800feb2:	2101      	movs	r1, #1
 800feb4:	ec57 6b10 	vmov	r6, r7, d0
 800feb8:	4690      	mov	r8, r2
 800feba:	f7ff fcd5 	bl	800f868 <_Balloc>
 800febe:	4604      	mov	r4, r0
 800fec0:	b930      	cbnz	r0, 800fed0 <__d2b+0x24>
 800fec2:	4602      	mov	r2, r0
 800fec4:	4b25      	ldr	r3, [pc, #148]	; (800ff5c <__d2b+0xb0>)
 800fec6:	4826      	ldr	r0, [pc, #152]	; (800ff60 <__d2b+0xb4>)
 800fec8:	f240 310a 	movw	r1, #778	; 0x30a
 800fecc:	f000 fc20 	bl	8010710 <__assert_func>
 800fed0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fed4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fed8:	bb35      	cbnz	r5, 800ff28 <__d2b+0x7c>
 800feda:	2e00      	cmp	r6, #0
 800fedc:	9301      	str	r3, [sp, #4]
 800fede:	d028      	beq.n	800ff32 <__d2b+0x86>
 800fee0:	4668      	mov	r0, sp
 800fee2:	9600      	str	r6, [sp, #0]
 800fee4:	f7ff fd8c 	bl	800fa00 <__lo0bits>
 800fee8:	9900      	ldr	r1, [sp, #0]
 800feea:	b300      	cbz	r0, 800ff2e <__d2b+0x82>
 800feec:	9a01      	ldr	r2, [sp, #4]
 800feee:	f1c0 0320 	rsb	r3, r0, #32
 800fef2:	fa02 f303 	lsl.w	r3, r2, r3
 800fef6:	430b      	orrs	r3, r1
 800fef8:	40c2      	lsrs	r2, r0
 800fefa:	6163      	str	r3, [r4, #20]
 800fefc:	9201      	str	r2, [sp, #4]
 800fefe:	9b01      	ldr	r3, [sp, #4]
 800ff00:	61a3      	str	r3, [r4, #24]
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	bf14      	ite	ne
 800ff06:	2202      	movne	r2, #2
 800ff08:	2201      	moveq	r2, #1
 800ff0a:	6122      	str	r2, [r4, #16]
 800ff0c:	b1d5      	cbz	r5, 800ff44 <__d2b+0x98>
 800ff0e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ff12:	4405      	add	r5, r0
 800ff14:	f8c9 5000 	str.w	r5, [r9]
 800ff18:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ff1c:	f8c8 0000 	str.w	r0, [r8]
 800ff20:	4620      	mov	r0, r4
 800ff22:	b003      	add	sp, #12
 800ff24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff28:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ff2c:	e7d5      	b.n	800feda <__d2b+0x2e>
 800ff2e:	6161      	str	r1, [r4, #20]
 800ff30:	e7e5      	b.n	800fefe <__d2b+0x52>
 800ff32:	a801      	add	r0, sp, #4
 800ff34:	f7ff fd64 	bl	800fa00 <__lo0bits>
 800ff38:	9b01      	ldr	r3, [sp, #4]
 800ff3a:	6163      	str	r3, [r4, #20]
 800ff3c:	2201      	movs	r2, #1
 800ff3e:	6122      	str	r2, [r4, #16]
 800ff40:	3020      	adds	r0, #32
 800ff42:	e7e3      	b.n	800ff0c <__d2b+0x60>
 800ff44:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ff48:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ff4c:	f8c9 0000 	str.w	r0, [r9]
 800ff50:	6918      	ldr	r0, [r3, #16]
 800ff52:	f7ff fd35 	bl	800f9c0 <__hi0bits>
 800ff56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ff5a:	e7df      	b.n	800ff1c <__d2b+0x70>
 800ff5c:	0801129b 	.word	0x0801129b
 800ff60:	0801130c 	.word	0x0801130c

0800ff64 <_calloc_r>:
 800ff64:	b513      	push	{r0, r1, r4, lr}
 800ff66:	434a      	muls	r2, r1
 800ff68:	4611      	mov	r1, r2
 800ff6a:	9201      	str	r2, [sp, #4]
 800ff6c:	f000 f85a 	bl	8010024 <_malloc_r>
 800ff70:	4604      	mov	r4, r0
 800ff72:	b118      	cbz	r0, 800ff7c <_calloc_r+0x18>
 800ff74:	9a01      	ldr	r2, [sp, #4]
 800ff76:	2100      	movs	r1, #0
 800ff78:	f7fd fdd6 	bl	800db28 <memset>
 800ff7c:	4620      	mov	r0, r4
 800ff7e:	b002      	add	sp, #8
 800ff80:	bd10      	pop	{r4, pc}
	...

0800ff84 <_free_r>:
 800ff84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ff86:	2900      	cmp	r1, #0
 800ff88:	d048      	beq.n	801001c <_free_r+0x98>
 800ff8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ff8e:	9001      	str	r0, [sp, #4]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	f1a1 0404 	sub.w	r4, r1, #4
 800ff96:	bfb8      	it	lt
 800ff98:	18e4      	addlt	r4, r4, r3
 800ff9a:	f000 fc59 	bl	8010850 <__malloc_lock>
 800ff9e:	4a20      	ldr	r2, [pc, #128]	; (8010020 <_free_r+0x9c>)
 800ffa0:	9801      	ldr	r0, [sp, #4]
 800ffa2:	6813      	ldr	r3, [r2, #0]
 800ffa4:	4615      	mov	r5, r2
 800ffa6:	b933      	cbnz	r3, 800ffb6 <_free_r+0x32>
 800ffa8:	6063      	str	r3, [r4, #4]
 800ffaa:	6014      	str	r4, [r2, #0]
 800ffac:	b003      	add	sp, #12
 800ffae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ffb2:	f000 bc53 	b.w	801085c <__malloc_unlock>
 800ffb6:	42a3      	cmp	r3, r4
 800ffb8:	d90b      	bls.n	800ffd2 <_free_r+0x4e>
 800ffba:	6821      	ldr	r1, [r4, #0]
 800ffbc:	1862      	adds	r2, r4, r1
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	bf04      	itt	eq
 800ffc2:	681a      	ldreq	r2, [r3, #0]
 800ffc4:	685b      	ldreq	r3, [r3, #4]
 800ffc6:	6063      	str	r3, [r4, #4]
 800ffc8:	bf04      	itt	eq
 800ffca:	1852      	addeq	r2, r2, r1
 800ffcc:	6022      	streq	r2, [r4, #0]
 800ffce:	602c      	str	r4, [r5, #0]
 800ffd0:	e7ec      	b.n	800ffac <_free_r+0x28>
 800ffd2:	461a      	mov	r2, r3
 800ffd4:	685b      	ldr	r3, [r3, #4]
 800ffd6:	b10b      	cbz	r3, 800ffdc <_free_r+0x58>
 800ffd8:	42a3      	cmp	r3, r4
 800ffda:	d9fa      	bls.n	800ffd2 <_free_r+0x4e>
 800ffdc:	6811      	ldr	r1, [r2, #0]
 800ffde:	1855      	adds	r5, r2, r1
 800ffe0:	42a5      	cmp	r5, r4
 800ffe2:	d10b      	bne.n	800fffc <_free_r+0x78>
 800ffe4:	6824      	ldr	r4, [r4, #0]
 800ffe6:	4421      	add	r1, r4
 800ffe8:	1854      	adds	r4, r2, r1
 800ffea:	42a3      	cmp	r3, r4
 800ffec:	6011      	str	r1, [r2, #0]
 800ffee:	d1dd      	bne.n	800ffac <_free_r+0x28>
 800fff0:	681c      	ldr	r4, [r3, #0]
 800fff2:	685b      	ldr	r3, [r3, #4]
 800fff4:	6053      	str	r3, [r2, #4]
 800fff6:	4421      	add	r1, r4
 800fff8:	6011      	str	r1, [r2, #0]
 800fffa:	e7d7      	b.n	800ffac <_free_r+0x28>
 800fffc:	d902      	bls.n	8010004 <_free_r+0x80>
 800fffe:	230c      	movs	r3, #12
 8010000:	6003      	str	r3, [r0, #0]
 8010002:	e7d3      	b.n	800ffac <_free_r+0x28>
 8010004:	6825      	ldr	r5, [r4, #0]
 8010006:	1961      	adds	r1, r4, r5
 8010008:	428b      	cmp	r3, r1
 801000a:	bf04      	itt	eq
 801000c:	6819      	ldreq	r1, [r3, #0]
 801000e:	685b      	ldreq	r3, [r3, #4]
 8010010:	6063      	str	r3, [r4, #4]
 8010012:	bf04      	itt	eq
 8010014:	1949      	addeq	r1, r1, r5
 8010016:	6021      	streq	r1, [r4, #0]
 8010018:	6054      	str	r4, [r2, #4]
 801001a:	e7c7      	b.n	800ffac <_free_r+0x28>
 801001c:	b003      	add	sp, #12
 801001e:	bd30      	pop	{r4, r5, pc}
 8010020:	20000ae0 	.word	0x20000ae0

08010024 <_malloc_r>:
 8010024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010026:	1ccd      	adds	r5, r1, #3
 8010028:	f025 0503 	bic.w	r5, r5, #3
 801002c:	3508      	adds	r5, #8
 801002e:	2d0c      	cmp	r5, #12
 8010030:	bf38      	it	cc
 8010032:	250c      	movcc	r5, #12
 8010034:	2d00      	cmp	r5, #0
 8010036:	4606      	mov	r6, r0
 8010038:	db01      	blt.n	801003e <_malloc_r+0x1a>
 801003a:	42a9      	cmp	r1, r5
 801003c:	d903      	bls.n	8010046 <_malloc_r+0x22>
 801003e:	230c      	movs	r3, #12
 8010040:	6033      	str	r3, [r6, #0]
 8010042:	2000      	movs	r0, #0
 8010044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010046:	f000 fc03 	bl	8010850 <__malloc_lock>
 801004a:	4921      	ldr	r1, [pc, #132]	; (80100d0 <_malloc_r+0xac>)
 801004c:	680a      	ldr	r2, [r1, #0]
 801004e:	4614      	mov	r4, r2
 8010050:	b99c      	cbnz	r4, 801007a <_malloc_r+0x56>
 8010052:	4f20      	ldr	r7, [pc, #128]	; (80100d4 <_malloc_r+0xb0>)
 8010054:	683b      	ldr	r3, [r7, #0]
 8010056:	b923      	cbnz	r3, 8010062 <_malloc_r+0x3e>
 8010058:	4621      	mov	r1, r4
 801005a:	4630      	mov	r0, r6
 801005c:	f000 faf2 	bl	8010644 <_sbrk_r>
 8010060:	6038      	str	r0, [r7, #0]
 8010062:	4629      	mov	r1, r5
 8010064:	4630      	mov	r0, r6
 8010066:	f000 faed 	bl	8010644 <_sbrk_r>
 801006a:	1c43      	adds	r3, r0, #1
 801006c:	d123      	bne.n	80100b6 <_malloc_r+0x92>
 801006e:	230c      	movs	r3, #12
 8010070:	6033      	str	r3, [r6, #0]
 8010072:	4630      	mov	r0, r6
 8010074:	f000 fbf2 	bl	801085c <__malloc_unlock>
 8010078:	e7e3      	b.n	8010042 <_malloc_r+0x1e>
 801007a:	6823      	ldr	r3, [r4, #0]
 801007c:	1b5b      	subs	r3, r3, r5
 801007e:	d417      	bmi.n	80100b0 <_malloc_r+0x8c>
 8010080:	2b0b      	cmp	r3, #11
 8010082:	d903      	bls.n	801008c <_malloc_r+0x68>
 8010084:	6023      	str	r3, [r4, #0]
 8010086:	441c      	add	r4, r3
 8010088:	6025      	str	r5, [r4, #0]
 801008a:	e004      	b.n	8010096 <_malloc_r+0x72>
 801008c:	6863      	ldr	r3, [r4, #4]
 801008e:	42a2      	cmp	r2, r4
 8010090:	bf0c      	ite	eq
 8010092:	600b      	streq	r3, [r1, #0]
 8010094:	6053      	strne	r3, [r2, #4]
 8010096:	4630      	mov	r0, r6
 8010098:	f000 fbe0 	bl	801085c <__malloc_unlock>
 801009c:	f104 000b 	add.w	r0, r4, #11
 80100a0:	1d23      	adds	r3, r4, #4
 80100a2:	f020 0007 	bic.w	r0, r0, #7
 80100a6:	1ac2      	subs	r2, r0, r3
 80100a8:	d0cc      	beq.n	8010044 <_malloc_r+0x20>
 80100aa:	1a1b      	subs	r3, r3, r0
 80100ac:	50a3      	str	r3, [r4, r2]
 80100ae:	e7c9      	b.n	8010044 <_malloc_r+0x20>
 80100b0:	4622      	mov	r2, r4
 80100b2:	6864      	ldr	r4, [r4, #4]
 80100b4:	e7cc      	b.n	8010050 <_malloc_r+0x2c>
 80100b6:	1cc4      	adds	r4, r0, #3
 80100b8:	f024 0403 	bic.w	r4, r4, #3
 80100bc:	42a0      	cmp	r0, r4
 80100be:	d0e3      	beq.n	8010088 <_malloc_r+0x64>
 80100c0:	1a21      	subs	r1, r4, r0
 80100c2:	4630      	mov	r0, r6
 80100c4:	f000 fabe 	bl	8010644 <_sbrk_r>
 80100c8:	3001      	adds	r0, #1
 80100ca:	d1dd      	bne.n	8010088 <_malloc_r+0x64>
 80100cc:	e7cf      	b.n	801006e <_malloc_r+0x4a>
 80100ce:	bf00      	nop
 80100d0:	20000ae0 	.word	0x20000ae0
 80100d4:	20000ae4 	.word	0x20000ae4

080100d8 <__ssputs_r>:
 80100d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80100dc:	688e      	ldr	r6, [r1, #8]
 80100de:	429e      	cmp	r6, r3
 80100e0:	4682      	mov	sl, r0
 80100e2:	460c      	mov	r4, r1
 80100e4:	4690      	mov	r8, r2
 80100e6:	461f      	mov	r7, r3
 80100e8:	d838      	bhi.n	801015c <__ssputs_r+0x84>
 80100ea:	898a      	ldrh	r2, [r1, #12]
 80100ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80100f0:	d032      	beq.n	8010158 <__ssputs_r+0x80>
 80100f2:	6825      	ldr	r5, [r4, #0]
 80100f4:	6909      	ldr	r1, [r1, #16]
 80100f6:	eba5 0901 	sub.w	r9, r5, r1
 80100fa:	6965      	ldr	r5, [r4, #20]
 80100fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010100:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010104:	3301      	adds	r3, #1
 8010106:	444b      	add	r3, r9
 8010108:	106d      	asrs	r5, r5, #1
 801010a:	429d      	cmp	r5, r3
 801010c:	bf38      	it	cc
 801010e:	461d      	movcc	r5, r3
 8010110:	0553      	lsls	r3, r2, #21
 8010112:	d531      	bpl.n	8010178 <__ssputs_r+0xa0>
 8010114:	4629      	mov	r1, r5
 8010116:	f7ff ff85 	bl	8010024 <_malloc_r>
 801011a:	4606      	mov	r6, r0
 801011c:	b950      	cbnz	r0, 8010134 <__ssputs_r+0x5c>
 801011e:	230c      	movs	r3, #12
 8010120:	f8ca 3000 	str.w	r3, [sl]
 8010124:	89a3      	ldrh	r3, [r4, #12]
 8010126:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801012a:	81a3      	strh	r3, [r4, #12]
 801012c:	f04f 30ff 	mov.w	r0, #4294967295
 8010130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010134:	6921      	ldr	r1, [r4, #16]
 8010136:	464a      	mov	r2, r9
 8010138:	f7fd fce8 	bl	800db0c <memcpy>
 801013c:	89a3      	ldrh	r3, [r4, #12]
 801013e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010146:	81a3      	strh	r3, [r4, #12]
 8010148:	6126      	str	r6, [r4, #16]
 801014a:	6165      	str	r5, [r4, #20]
 801014c:	444e      	add	r6, r9
 801014e:	eba5 0509 	sub.w	r5, r5, r9
 8010152:	6026      	str	r6, [r4, #0]
 8010154:	60a5      	str	r5, [r4, #8]
 8010156:	463e      	mov	r6, r7
 8010158:	42be      	cmp	r6, r7
 801015a:	d900      	bls.n	801015e <__ssputs_r+0x86>
 801015c:	463e      	mov	r6, r7
 801015e:	4632      	mov	r2, r6
 8010160:	6820      	ldr	r0, [r4, #0]
 8010162:	4641      	mov	r1, r8
 8010164:	f000 fb5a 	bl	801081c <memmove>
 8010168:	68a3      	ldr	r3, [r4, #8]
 801016a:	6822      	ldr	r2, [r4, #0]
 801016c:	1b9b      	subs	r3, r3, r6
 801016e:	4432      	add	r2, r6
 8010170:	60a3      	str	r3, [r4, #8]
 8010172:	6022      	str	r2, [r4, #0]
 8010174:	2000      	movs	r0, #0
 8010176:	e7db      	b.n	8010130 <__ssputs_r+0x58>
 8010178:	462a      	mov	r2, r5
 801017a:	f000 fb75 	bl	8010868 <_realloc_r>
 801017e:	4606      	mov	r6, r0
 8010180:	2800      	cmp	r0, #0
 8010182:	d1e1      	bne.n	8010148 <__ssputs_r+0x70>
 8010184:	6921      	ldr	r1, [r4, #16]
 8010186:	4650      	mov	r0, sl
 8010188:	f7ff fefc 	bl	800ff84 <_free_r>
 801018c:	e7c7      	b.n	801011e <__ssputs_r+0x46>
	...

08010190 <_svfiprintf_r>:
 8010190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010194:	4698      	mov	r8, r3
 8010196:	898b      	ldrh	r3, [r1, #12]
 8010198:	061b      	lsls	r3, r3, #24
 801019a:	b09d      	sub	sp, #116	; 0x74
 801019c:	4607      	mov	r7, r0
 801019e:	460d      	mov	r5, r1
 80101a0:	4614      	mov	r4, r2
 80101a2:	d50e      	bpl.n	80101c2 <_svfiprintf_r+0x32>
 80101a4:	690b      	ldr	r3, [r1, #16]
 80101a6:	b963      	cbnz	r3, 80101c2 <_svfiprintf_r+0x32>
 80101a8:	2140      	movs	r1, #64	; 0x40
 80101aa:	f7ff ff3b 	bl	8010024 <_malloc_r>
 80101ae:	6028      	str	r0, [r5, #0]
 80101b0:	6128      	str	r0, [r5, #16]
 80101b2:	b920      	cbnz	r0, 80101be <_svfiprintf_r+0x2e>
 80101b4:	230c      	movs	r3, #12
 80101b6:	603b      	str	r3, [r7, #0]
 80101b8:	f04f 30ff 	mov.w	r0, #4294967295
 80101bc:	e0d1      	b.n	8010362 <_svfiprintf_r+0x1d2>
 80101be:	2340      	movs	r3, #64	; 0x40
 80101c0:	616b      	str	r3, [r5, #20]
 80101c2:	2300      	movs	r3, #0
 80101c4:	9309      	str	r3, [sp, #36]	; 0x24
 80101c6:	2320      	movs	r3, #32
 80101c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80101cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80101d0:	2330      	movs	r3, #48	; 0x30
 80101d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801037c <_svfiprintf_r+0x1ec>
 80101d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80101da:	f04f 0901 	mov.w	r9, #1
 80101de:	4623      	mov	r3, r4
 80101e0:	469a      	mov	sl, r3
 80101e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80101e6:	b10a      	cbz	r2, 80101ec <_svfiprintf_r+0x5c>
 80101e8:	2a25      	cmp	r2, #37	; 0x25
 80101ea:	d1f9      	bne.n	80101e0 <_svfiprintf_r+0x50>
 80101ec:	ebba 0b04 	subs.w	fp, sl, r4
 80101f0:	d00b      	beq.n	801020a <_svfiprintf_r+0x7a>
 80101f2:	465b      	mov	r3, fp
 80101f4:	4622      	mov	r2, r4
 80101f6:	4629      	mov	r1, r5
 80101f8:	4638      	mov	r0, r7
 80101fa:	f7ff ff6d 	bl	80100d8 <__ssputs_r>
 80101fe:	3001      	adds	r0, #1
 8010200:	f000 80aa 	beq.w	8010358 <_svfiprintf_r+0x1c8>
 8010204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010206:	445a      	add	r2, fp
 8010208:	9209      	str	r2, [sp, #36]	; 0x24
 801020a:	f89a 3000 	ldrb.w	r3, [sl]
 801020e:	2b00      	cmp	r3, #0
 8010210:	f000 80a2 	beq.w	8010358 <_svfiprintf_r+0x1c8>
 8010214:	2300      	movs	r3, #0
 8010216:	f04f 32ff 	mov.w	r2, #4294967295
 801021a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801021e:	f10a 0a01 	add.w	sl, sl, #1
 8010222:	9304      	str	r3, [sp, #16]
 8010224:	9307      	str	r3, [sp, #28]
 8010226:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801022a:	931a      	str	r3, [sp, #104]	; 0x68
 801022c:	4654      	mov	r4, sl
 801022e:	2205      	movs	r2, #5
 8010230:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010234:	4851      	ldr	r0, [pc, #324]	; (801037c <_svfiprintf_r+0x1ec>)
 8010236:	f7ef ffd3 	bl	80001e0 <memchr>
 801023a:	9a04      	ldr	r2, [sp, #16]
 801023c:	b9d8      	cbnz	r0, 8010276 <_svfiprintf_r+0xe6>
 801023e:	06d0      	lsls	r0, r2, #27
 8010240:	bf44      	itt	mi
 8010242:	2320      	movmi	r3, #32
 8010244:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010248:	0711      	lsls	r1, r2, #28
 801024a:	bf44      	itt	mi
 801024c:	232b      	movmi	r3, #43	; 0x2b
 801024e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010252:	f89a 3000 	ldrb.w	r3, [sl]
 8010256:	2b2a      	cmp	r3, #42	; 0x2a
 8010258:	d015      	beq.n	8010286 <_svfiprintf_r+0xf6>
 801025a:	9a07      	ldr	r2, [sp, #28]
 801025c:	4654      	mov	r4, sl
 801025e:	2000      	movs	r0, #0
 8010260:	f04f 0c0a 	mov.w	ip, #10
 8010264:	4621      	mov	r1, r4
 8010266:	f811 3b01 	ldrb.w	r3, [r1], #1
 801026a:	3b30      	subs	r3, #48	; 0x30
 801026c:	2b09      	cmp	r3, #9
 801026e:	d94e      	bls.n	801030e <_svfiprintf_r+0x17e>
 8010270:	b1b0      	cbz	r0, 80102a0 <_svfiprintf_r+0x110>
 8010272:	9207      	str	r2, [sp, #28]
 8010274:	e014      	b.n	80102a0 <_svfiprintf_r+0x110>
 8010276:	eba0 0308 	sub.w	r3, r0, r8
 801027a:	fa09 f303 	lsl.w	r3, r9, r3
 801027e:	4313      	orrs	r3, r2
 8010280:	9304      	str	r3, [sp, #16]
 8010282:	46a2      	mov	sl, r4
 8010284:	e7d2      	b.n	801022c <_svfiprintf_r+0x9c>
 8010286:	9b03      	ldr	r3, [sp, #12]
 8010288:	1d19      	adds	r1, r3, #4
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	9103      	str	r1, [sp, #12]
 801028e:	2b00      	cmp	r3, #0
 8010290:	bfbb      	ittet	lt
 8010292:	425b      	neglt	r3, r3
 8010294:	f042 0202 	orrlt.w	r2, r2, #2
 8010298:	9307      	strge	r3, [sp, #28]
 801029a:	9307      	strlt	r3, [sp, #28]
 801029c:	bfb8      	it	lt
 801029e:	9204      	strlt	r2, [sp, #16]
 80102a0:	7823      	ldrb	r3, [r4, #0]
 80102a2:	2b2e      	cmp	r3, #46	; 0x2e
 80102a4:	d10c      	bne.n	80102c0 <_svfiprintf_r+0x130>
 80102a6:	7863      	ldrb	r3, [r4, #1]
 80102a8:	2b2a      	cmp	r3, #42	; 0x2a
 80102aa:	d135      	bne.n	8010318 <_svfiprintf_r+0x188>
 80102ac:	9b03      	ldr	r3, [sp, #12]
 80102ae:	1d1a      	adds	r2, r3, #4
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	9203      	str	r2, [sp, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	bfb8      	it	lt
 80102b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80102bc:	3402      	adds	r4, #2
 80102be:	9305      	str	r3, [sp, #20]
 80102c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801038c <_svfiprintf_r+0x1fc>
 80102c4:	7821      	ldrb	r1, [r4, #0]
 80102c6:	2203      	movs	r2, #3
 80102c8:	4650      	mov	r0, sl
 80102ca:	f7ef ff89 	bl	80001e0 <memchr>
 80102ce:	b140      	cbz	r0, 80102e2 <_svfiprintf_r+0x152>
 80102d0:	2340      	movs	r3, #64	; 0x40
 80102d2:	eba0 000a 	sub.w	r0, r0, sl
 80102d6:	fa03 f000 	lsl.w	r0, r3, r0
 80102da:	9b04      	ldr	r3, [sp, #16]
 80102dc:	4303      	orrs	r3, r0
 80102de:	3401      	adds	r4, #1
 80102e0:	9304      	str	r3, [sp, #16]
 80102e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80102e6:	4826      	ldr	r0, [pc, #152]	; (8010380 <_svfiprintf_r+0x1f0>)
 80102e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80102ec:	2206      	movs	r2, #6
 80102ee:	f7ef ff77 	bl	80001e0 <memchr>
 80102f2:	2800      	cmp	r0, #0
 80102f4:	d038      	beq.n	8010368 <_svfiprintf_r+0x1d8>
 80102f6:	4b23      	ldr	r3, [pc, #140]	; (8010384 <_svfiprintf_r+0x1f4>)
 80102f8:	bb1b      	cbnz	r3, 8010342 <_svfiprintf_r+0x1b2>
 80102fa:	9b03      	ldr	r3, [sp, #12]
 80102fc:	3307      	adds	r3, #7
 80102fe:	f023 0307 	bic.w	r3, r3, #7
 8010302:	3308      	adds	r3, #8
 8010304:	9303      	str	r3, [sp, #12]
 8010306:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010308:	4433      	add	r3, r6
 801030a:	9309      	str	r3, [sp, #36]	; 0x24
 801030c:	e767      	b.n	80101de <_svfiprintf_r+0x4e>
 801030e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010312:	460c      	mov	r4, r1
 8010314:	2001      	movs	r0, #1
 8010316:	e7a5      	b.n	8010264 <_svfiprintf_r+0xd4>
 8010318:	2300      	movs	r3, #0
 801031a:	3401      	adds	r4, #1
 801031c:	9305      	str	r3, [sp, #20]
 801031e:	4619      	mov	r1, r3
 8010320:	f04f 0c0a 	mov.w	ip, #10
 8010324:	4620      	mov	r0, r4
 8010326:	f810 2b01 	ldrb.w	r2, [r0], #1
 801032a:	3a30      	subs	r2, #48	; 0x30
 801032c:	2a09      	cmp	r2, #9
 801032e:	d903      	bls.n	8010338 <_svfiprintf_r+0x1a8>
 8010330:	2b00      	cmp	r3, #0
 8010332:	d0c5      	beq.n	80102c0 <_svfiprintf_r+0x130>
 8010334:	9105      	str	r1, [sp, #20]
 8010336:	e7c3      	b.n	80102c0 <_svfiprintf_r+0x130>
 8010338:	fb0c 2101 	mla	r1, ip, r1, r2
 801033c:	4604      	mov	r4, r0
 801033e:	2301      	movs	r3, #1
 8010340:	e7f0      	b.n	8010324 <_svfiprintf_r+0x194>
 8010342:	ab03      	add	r3, sp, #12
 8010344:	9300      	str	r3, [sp, #0]
 8010346:	462a      	mov	r2, r5
 8010348:	4b0f      	ldr	r3, [pc, #60]	; (8010388 <_svfiprintf_r+0x1f8>)
 801034a:	a904      	add	r1, sp, #16
 801034c:	4638      	mov	r0, r7
 801034e:	f7fd fc93 	bl	800dc78 <_printf_float>
 8010352:	1c42      	adds	r2, r0, #1
 8010354:	4606      	mov	r6, r0
 8010356:	d1d6      	bne.n	8010306 <_svfiprintf_r+0x176>
 8010358:	89ab      	ldrh	r3, [r5, #12]
 801035a:	065b      	lsls	r3, r3, #25
 801035c:	f53f af2c 	bmi.w	80101b8 <_svfiprintf_r+0x28>
 8010360:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010362:	b01d      	add	sp, #116	; 0x74
 8010364:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010368:	ab03      	add	r3, sp, #12
 801036a:	9300      	str	r3, [sp, #0]
 801036c:	462a      	mov	r2, r5
 801036e:	4b06      	ldr	r3, [pc, #24]	; (8010388 <_svfiprintf_r+0x1f8>)
 8010370:	a904      	add	r1, sp, #16
 8010372:	4638      	mov	r0, r7
 8010374:	f7fd ff24 	bl	800e1c0 <_printf_i>
 8010378:	e7eb      	b.n	8010352 <_svfiprintf_r+0x1c2>
 801037a:	bf00      	nop
 801037c:	0801146c 	.word	0x0801146c
 8010380:	08011476 	.word	0x08011476
 8010384:	0800dc79 	.word	0x0800dc79
 8010388:	080100d9 	.word	0x080100d9
 801038c:	08011472 	.word	0x08011472

08010390 <__sfputc_r>:
 8010390:	6893      	ldr	r3, [r2, #8]
 8010392:	3b01      	subs	r3, #1
 8010394:	2b00      	cmp	r3, #0
 8010396:	b410      	push	{r4}
 8010398:	6093      	str	r3, [r2, #8]
 801039a:	da08      	bge.n	80103ae <__sfputc_r+0x1e>
 801039c:	6994      	ldr	r4, [r2, #24]
 801039e:	42a3      	cmp	r3, r4
 80103a0:	db01      	blt.n	80103a6 <__sfputc_r+0x16>
 80103a2:	290a      	cmp	r1, #10
 80103a4:	d103      	bne.n	80103ae <__sfputc_r+0x1e>
 80103a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103aa:	f7fe b8f9 	b.w	800e5a0 <__swbuf_r>
 80103ae:	6813      	ldr	r3, [r2, #0]
 80103b0:	1c58      	adds	r0, r3, #1
 80103b2:	6010      	str	r0, [r2, #0]
 80103b4:	7019      	strb	r1, [r3, #0]
 80103b6:	4608      	mov	r0, r1
 80103b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103bc:	4770      	bx	lr

080103be <__sfputs_r>:
 80103be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80103c0:	4606      	mov	r6, r0
 80103c2:	460f      	mov	r7, r1
 80103c4:	4614      	mov	r4, r2
 80103c6:	18d5      	adds	r5, r2, r3
 80103c8:	42ac      	cmp	r4, r5
 80103ca:	d101      	bne.n	80103d0 <__sfputs_r+0x12>
 80103cc:	2000      	movs	r0, #0
 80103ce:	e007      	b.n	80103e0 <__sfputs_r+0x22>
 80103d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80103d4:	463a      	mov	r2, r7
 80103d6:	4630      	mov	r0, r6
 80103d8:	f7ff ffda 	bl	8010390 <__sfputc_r>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	d1f3      	bne.n	80103c8 <__sfputs_r+0xa>
 80103e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080103e4 <_vfiprintf_r>:
 80103e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103e8:	460d      	mov	r5, r1
 80103ea:	b09d      	sub	sp, #116	; 0x74
 80103ec:	4614      	mov	r4, r2
 80103ee:	4698      	mov	r8, r3
 80103f0:	4606      	mov	r6, r0
 80103f2:	b118      	cbz	r0, 80103fc <_vfiprintf_r+0x18>
 80103f4:	6983      	ldr	r3, [r0, #24]
 80103f6:	b90b      	cbnz	r3, 80103fc <_vfiprintf_r+0x18>
 80103f8:	f7ff f924 	bl	800f644 <__sinit>
 80103fc:	4b89      	ldr	r3, [pc, #548]	; (8010624 <_vfiprintf_r+0x240>)
 80103fe:	429d      	cmp	r5, r3
 8010400:	d11b      	bne.n	801043a <_vfiprintf_r+0x56>
 8010402:	6875      	ldr	r5, [r6, #4]
 8010404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010406:	07d9      	lsls	r1, r3, #31
 8010408:	d405      	bmi.n	8010416 <_vfiprintf_r+0x32>
 801040a:	89ab      	ldrh	r3, [r5, #12]
 801040c:	059a      	lsls	r2, r3, #22
 801040e:	d402      	bmi.n	8010416 <_vfiprintf_r+0x32>
 8010410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010412:	f7ff f9ba 	bl	800f78a <__retarget_lock_acquire_recursive>
 8010416:	89ab      	ldrh	r3, [r5, #12]
 8010418:	071b      	lsls	r3, r3, #28
 801041a:	d501      	bpl.n	8010420 <_vfiprintf_r+0x3c>
 801041c:	692b      	ldr	r3, [r5, #16]
 801041e:	b9eb      	cbnz	r3, 801045c <_vfiprintf_r+0x78>
 8010420:	4629      	mov	r1, r5
 8010422:	4630      	mov	r0, r6
 8010424:	f7fe f90e 	bl	800e644 <__swsetup_r>
 8010428:	b1c0      	cbz	r0, 801045c <_vfiprintf_r+0x78>
 801042a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801042c:	07dc      	lsls	r4, r3, #31
 801042e:	d50e      	bpl.n	801044e <_vfiprintf_r+0x6a>
 8010430:	f04f 30ff 	mov.w	r0, #4294967295
 8010434:	b01d      	add	sp, #116	; 0x74
 8010436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801043a:	4b7b      	ldr	r3, [pc, #492]	; (8010628 <_vfiprintf_r+0x244>)
 801043c:	429d      	cmp	r5, r3
 801043e:	d101      	bne.n	8010444 <_vfiprintf_r+0x60>
 8010440:	68b5      	ldr	r5, [r6, #8]
 8010442:	e7df      	b.n	8010404 <_vfiprintf_r+0x20>
 8010444:	4b79      	ldr	r3, [pc, #484]	; (801062c <_vfiprintf_r+0x248>)
 8010446:	429d      	cmp	r5, r3
 8010448:	bf08      	it	eq
 801044a:	68f5      	ldreq	r5, [r6, #12]
 801044c:	e7da      	b.n	8010404 <_vfiprintf_r+0x20>
 801044e:	89ab      	ldrh	r3, [r5, #12]
 8010450:	0598      	lsls	r0, r3, #22
 8010452:	d4ed      	bmi.n	8010430 <_vfiprintf_r+0x4c>
 8010454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010456:	f7ff f999 	bl	800f78c <__retarget_lock_release_recursive>
 801045a:	e7e9      	b.n	8010430 <_vfiprintf_r+0x4c>
 801045c:	2300      	movs	r3, #0
 801045e:	9309      	str	r3, [sp, #36]	; 0x24
 8010460:	2320      	movs	r3, #32
 8010462:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010466:	f8cd 800c 	str.w	r8, [sp, #12]
 801046a:	2330      	movs	r3, #48	; 0x30
 801046c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010630 <_vfiprintf_r+0x24c>
 8010470:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010474:	f04f 0901 	mov.w	r9, #1
 8010478:	4623      	mov	r3, r4
 801047a:	469a      	mov	sl, r3
 801047c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010480:	b10a      	cbz	r2, 8010486 <_vfiprintf_r+0xa2>
 8010482:	2a25      	cmp	r2, #37	; 0x25
 8010484:	d1f9      	bne.n	801047a <_vfiprintf_r+0x96>
 8010486:	ebba 0b04 	subs.w	fp, sl, r4
 801048a:	d00b      	beq.n	80104a4 <_vfiprintf_r+0xc0>
 801048c:	465b      	mov	r3, fp
 801048e:	4622      	mov	r2, r4
 8010490:	4629      	mov	r1, r5
 8010492:	4630      	mov	r0, r6
 8010494:	f7ff ff93 	bl	80103be <__sfputs_r>
 8010498:	3001      	adds	r0, #1
 801049a:	f000 80aa 	beq.w	80105f2 <_vfiprintf_r+0x20e>
 801049e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104a0:	445a      	add	r2, fp
 80104a2:	9209      	str	r2, [sp, #36]	; 0x24
 80104a4:	f89a 3000 	ldrb.w	r3, [sl]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	f000 80a2 	beq.w	80105f2 <_vfiprintf_r+0x20e>
 80104ae:	2300      	movs	r3, #0
 80104b0:	f04f 32ff 	mov.w	r2, #4294967295
 80104b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104b8:	f10a 0a01 	add.w	sl, sl, #1
 80104bc:	9304      	str	r3, [sp, #16]
 80104be:	9307      	str	r3, [sp, #28]
 80104c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104c4:	931a      	str	r3, [sp, #104]	; 0x68
 80104c6:	4654      	mov	r4, sl
 80104c8:	2205      	movs	r2, #5
 80104ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104ce:	4858      	ldr	r0, [pc, #352]	; (8010630 <_vfiprintf_r+0x24c>)
 80104d0:	f7ef fe86 	bl	80001e0 <memchr>
 80104d4:	9a04      	ldr	r2, [sp, #16]
 80104d6:	b9d8      	cbnz	r0, 8010510 <_vfiprintf_r+0x12c>
 80104d8:	06d1      	lsls	r1, r2, #27
 80104da:	bf44      	itt	mi
 80104dc:	2320      	movmi	r3, #32
 80104de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104e2:	0713      	lsls	r3, r2, #28
 80104e4:	bf44      	itt	mi
 80104e6:	232b      	movmi	r3, #43	; 0x2b
 80104e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80104ec:	f89a 3000 	ldrb.w	r3, [sl]
 80104f0:	2b2a      	cmp	r3, #42	; 0x2a
 80104f2:	d015      	beq.n	8010520 <_vfiprintf_r+0x13c>
 80104f4:	9a07      	ldr	r2, [sp, #28]
 80104f6:	4654      	mov	r4, sl
 80104f8:	2000      	movs	r0, #0
 80104fa:	f04f 0c0a 	mov.w	ip, #10
 80104fe:	4621      	mov	r1, r4
 8010500:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010504:	3b30      	subs	r3, #48	; 0x30
 8010506:	2b09      	cmp	r3, #9
 8010508:	d94e      	bls.n	80105a8 <_vfiprintf_r+0x1c4>
 801050a:	b1b0      	cbz	r0, 801053a <_vfiprintf_r+0x156>
 801050c:	9207      	str	r2, [sp, #28]
 801050e:	e014      	b.n	801053a <_vfiprintf_r+0x156>
 8010510:	eba0 0308 	sub.w	r3, r0, r8
 8010514:	fa09 f303 	lsl.w	r3, r9, r3
 8010518:	4313      	orrs	r3, r2
 801051a:	9304      	str	r3, [sp, #16]
 801051c:	46a2      	mov	sl, r4
 801051e:	e7d2      	b.n	80104c6 <_vfiprintf_r+0xe2>
 8010520:	9b03      	ldr	r3, [sp, #12]
 8010522:	1d19      	adds	r1, r3, #4
 8010524:	681b      	ldr	r3, [r3, #0]
 8010526:	9103      	str	r1, [sp, #12]
 8010528:	2b00      	cmp	r3, #0
 801052a:	bfbb      	ittet	lt
 801052c:	425b      	neglt	r3, r3
 801052e:	f042 0202 	orrlt.w	r2, r2, #2
 8010532:	9307      	strge	r3, [sp, #28]
 8010534:	9307      	strlt	r3, [sp, #28]
 8010536:	bfb8      	it	lt
 8010538:	9204      	strlt	r2, [sp, #16]
 801053a:	7823      	ldrb	r3, [r4, #0]
 801053c:	2b2e      	cmp	r3, #46	; 0x2e
 801053e:	d10c      	bne.n	801055a <_vfiprintf_r+0x176>
 8010540:	7863      	ldrb	r3, [r4, #1]
 8010542:	2b2a      	cmp	r3, #42	; 0x2a
 8010544:	d135      	bne.n	80105b2 <_vfiprintf_r+0x1ce>
 8010546:	9b03      	ldr	r3, [sp, #12]
 8010548:	1d1a      	adds	r2, r3, #4
 801054a:	681b      	ldr	r3, [r3, #0]
 801054c:	9203      	str	r2, [sp, #12]
 801054e:	2b00      	cmp	r3, #0
 8010550:	bfb8      	it	lt
 8010552:	f04f 33ff 	movlt.w	r3, #4294967295
 8010556:	3402      	adds	r4, #2
 8010558:	9305      	str	r3, [sp, #20]
 801055a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010640 <_vfiprintf_r+0x25c>
 801055e:	7821      	ldrb	r1, [r4, #0]
 8010560:	2203      	movs	r2, #3
 8010562:	4650      	mov	r0, sl
 8010564:	f7ef fe3c 	bl	80001e0 <memchr>
 8010568:	b140      	cbz	r0, 801057c <_vfiprintf_r+0x198>
 801056a:	2340      	movs	r3, #64	; 0x40
 801056c:	eba0 000a 	sub.w	r0, r0, sl
 8010570:	fa03 f000 	lsl.w	r0, r3, r0
 8010574:	9b04      	ldr	r3, [sp, #16]
 8010576:	4303      	orrs	r3, r0
 8010578:	3401      	adds	r4, #1
 801057a:	9304      	str	r3, [sp, #16]
 801057c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010580:	482c      	ldr	r0, [pc, #176]	; (8010634 <_vfiprintf_r+0x250>)
 8010582:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010586:	2206      	movs	r2, #6
 8010588:	f7ef fe2a 	bl	80001e0 <memchr>
 801058c:	2800      	cmp	r0, #0
 801058e:	d03f      	beq.n	8010610 <_vfiprintf_r+0x22c>
 8010590:	4b29      	ldr	r3, [pc, #164]	; (8010638 <_vfiprintf_r+0x254>)
 8010592:	bb1b      	cbnz	r3, 80105dc <_vfiprintf_r+0x1f8>
 8010594:	9b03      	ldr	r3, [sp, #12]
 8010596:	3307      	adds	r3, #7
 8010598:	f023 0307 	bic.w	r3, r3, #7
 801059c:	3308      	adds	r3, #8
 801059e:	9303      	str	r3, [sp, #12]
 80105a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105a2:	443b      	add	r3, r7
 80105a4:	9309      	str	r3, [sp, #36]	; 0x24
 80105a6:	e767      	b.n	8010478 <_vfiprintf_r+0x94>
 80105a8:	fb0c 3202 	mla	r2, ip, r2, r3
 80105ac:	460c      	mov	r4, r1
 80105ae:	2001      	movs	r0, #1
 80105b0:	e7a5      	b.n	80104fe <_vfiprintf_r+0x11a>
 80105b2:	2300      	movs	r3, #0
 80105b4:	3401      	adds	r4, #1
 80105b6:	9305      	str	r3, [sp, #20]
 80105b8:	4619      	mov	r1, r3
 80105ba:	f04f 0c0a 	mov.w	ip, #10
 80105be:	4620      	mov	r0, r4
 80105c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105c4:	3a30      	subs	r2, #48	; 0x30
 80105c6:	2a09      	cmp	r2, #9
 80105c8:	d903      	bls.n	80105d2 <_vfiprintf_r+0x1ee>
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d0c5      	beq.n	801055a <_vfiprintf_r+0x176>
 80105ce:	9105      	str	r1, [sp, #20]
 80105d0:	e7c3      	b.n	801055a <_vfiprintf_r+0x176>
 80105d2:	fb0c 2101 	mla	r1, ip, r1, r2
 80105d6:	4604      	mov	r4, r0
 80105d8:	2301      	movs	r3, #1
 80105da:	e7f0      	b.n	80105be <_vfiprintf_r+0x1da>
 80105dc:	ab03      	add	r3, sp, #12
 80105de:	9300      	str	r3, [sp, #0]
 80105e0:	462a      	mov	r2, r5
 80105e2:	4b16      	ldr	r3, [pc, #88]	; (801063c <_vfiprintf_r+0x258>)
 80105e4:	a904      	add	r1, sp, #16
 80105e6:	4630      	mov	r0, r6
 80105e8:	f7fd fb46 	bl	800dc78 <_printf_float>
 80105ec:	4607      	mov	r7, r0
 80105ee:	1c78      	adds	r0, r7, #1
 80105f0:	d1d6      	bne.n	80105a0 <_vfiprintf_r+0x1bc>
 80105f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80105f4:	07d9      	lsls	r1, r3, #31
 80105f6:	d405      	bmi.n	8010604 <_vfiprintf_r+0x220>
 80105f8:	89ab      	ldrh	r3, [r5, #12]
 80105fa:	059a      	lsls	r2, r3, #22
 80105fc:	d402      	bmi.n	8010604 <_vfiprintf_r+0x220>
 80105fe:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010600:	f7ff f8c4 	bl	800f78c <__retarget_lock_release_recursive>
 8010604:	89ab      	ldrh	r3, [r5, #12]
 8010606:	065b      	lsls	r3, r3, #25
 8010608:	f53f af12 	bmi.w	8010430 <_vfiprintf_r+0x4c>
 801060c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801060e:	e711      	b.n	8010434 <_vfiprintf_r+0x50>
 8010610:	ab03      	add	r3, sp, #12
 8010612:	9300      	str	r3, [sp, #0]
 8010614:	462a      	mov	r2, r5
 8010616:	4b09      	ldr	r3, [pc, #36]	; (801063c <_vfiprintf_r+0x258>)
 8010618:	a904      	add	r1, sp, #16
 801061a:	4630      	mov	r0, r6
 801061c:	f7fd fdd0 	bl	800e1c0 <_printf_i>
 8010620:	e7e4      	b.n	80105ec <_vfiprintf_r+0x208>
 8010622:	bf00      	nop
 8010624:	080112cc 	.word	0x080112cc
 8010628:	080112ec 	.word	0x080112ec
 801062c:	080112ac 	.word	0x080112ac
 8010630:	0801146c 	.word	0x0801146c
 8010634:	08011476 	.word	0x08011476
 8010638:	0800dc79 	.word	0x0800dc79
 801063c:	080103bf 	.word	0x080103bf
 8010640:	08011472 	.word	0x08011472

08010644 <_sbrk_r>:
 8010644:	b538      	push	{r3, r4, r5, lr}
 8010646:	4d06      	ldr	r5, [pc, #24]	; (8010660 <_sbrk_r+0x1c>)
 8010648:	2300      	movs	r3, #0
 801064a:	4604      	mov	r4, r0
 801064c:	4608      	mov	r0, r1
 801064e:	602b      	str	r3, [r5, #0]
 8010650:	f7f1 fff6 	bl	8002640 <_sbrk>
 8010654:	1c43      	adds	r3, r0, #1
 8010656:	d102      	bne.n	801065e <_sbrk_r+0x1a>
 8010658:	682b      	ldr	r3, [r5, #0]
 801065a:	b103      	cbz	r3, 801065e <_sbrk_r+0x1a>
 801065c:	6023      	str	r3, [r4, #0]
 801065e:	bd38      	pop	{r3, r4, r5, pc}
 8010660:	20000e1c 	.word	0x20000e1c

08010664 <__sread>:
 8010664:	b510      	push	{r4, lr}
 8010666:	460c      	mov	r4, r1
 8010668:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801066c:	f000 f922 	bl	80108b4 <_read_r>
 8010670:	2800      	cmp	r0, #0
 8010672:	bfab      	itete	ge
 8010674:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010676:	89a3      	ldrhlt	r3, [r4, #12]
 8010678:	181b      	addge	r3, r3, r0
 801067a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801067e:	bfac      	ite	ge
 8010680:	6563      	strge	r3, [r4, #84]	; 0x54
 8010682:	81a3      	strhlt	r3, [r4, #12]
 8010684:	bd10      	pop	{r4, pc}

08010686 <__swrite>:
 8010686:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801068a:	461f      	mov	r7, r3
 801068c:	898b      	ldrh	r3, [r1, #12]
 801068e:	05db      	lsls	r3, r3, #23
 8010690:	4605      	mov	r5, r0
 8010692:	460c      	mov	r4, r1
 8010694:	4616      	mov	r6, r2
 8010696:	d505      	bpl.n	80106a4 <__swrite+0x1e>
 8010698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801069c:	2302      	movs	r3, #2
 801069e:	2200      	movs	r2, #0
 80106a0:	f000 f898 	bl	80107d4 <_lseek_r>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80106aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80106ae:	81a3      	strh	r3, [r4, #12]
 80106b0:	4632      	mov	r2, r6
 80106b2:	463b      	mov	r3, r7
 80106b4:	4628      	mov	r0, r5
 80106b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80106ba:	f000 b817 	b.w	80106ec <_write_r>

080106be <__sseek>:
 80106be:	b510      	push	{r4, lr}
 80106c0:	460c      	mov	r4, r1
 80106c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106c6:	f000 f885 	bl	80107d4 <_lseek_r>
 80106ca:	1c43      	adds	r3, r0, #1
 80106cc:	89a3      	ldrh	r3, [r4, #12]
 80106ce:	bf15      	itete	ne
 80106d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80106d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80106d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80106da:	81a3      	strheq	r3, [r4, #12]
 80106dc:	bf18      	it	ne
 80106de:	81a3      	strhne	r3, [r4, #12]
 80106e0:	bd10      	pop	{r4, pc}

080106e2 <__sclose>:
 80106e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80106e6:	f000 b831 	b.w	801074c <_close_r>
	...

080106ec <_write_r>:
 80106ec:	b538      	push	{r3, r4, r5, lr}
 80106ee:	4d07      	ldr	r5, [pc, #28]	; (801070c <_write_r+0x20>)
 80106f0:	4604      	mov	r4, r0
 80106f2:	4608      	mov	r0, r1
 80106f4:	4611      	mov	r1, r2
 80106f6:	2200      	movs	r2, #0
 80106f8:	602a      	str	r2, [r5, #0]
 80106fa:	461a      	mov	r2, r3
 80106fc:	f7f1 ff4f 	bl	800259e <_write>
 8010700:	1c43      	adds	r3, r0, #1
 8010702:	d102      	bne.n	801070a <_write_r+0x1e>
 8010704:	682b      	ldr	r3, [r5, #0]
 8010706:	b103      	cbz	r3, 801070a <_write_r+0x1e>
 8010708:	6023      	str	r3, [r4, #0]
 801070a:	bd38      	pop	{r3, r4, r5, pc}
 801070c:	20000e1c 	.word	0x20000e1c

08010710 <__assert_func>:
 8010710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010712:	4614      	mov	r4, r2
 8010714:	461a      	mov	r2, r3
 8010716:	4b09      	ldr	r3, [pc, #36]	; (801073c <__assert_func+0x2c>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4605      	mov	r5, r0
 801071c:	68d8      	ldr	r0, [r3, #12]
 801071e:	b14c      	cbz	r4, 8010734 <__assert_func+0x24>
 8010720:	4b07      	ldr	r3, [pc, #28]	; (8010740 <__assert_func+0x30>)
 8010722:	9100      	str	r1, [sp, #0]
 8010724:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010728:	4906      	ldr	r1, [pc, #24]	; (8010744 <__assert_func+0x34>)
 801072a:	462b      	mov	r3, r5
 801072c:	f000 f81e 	bl	801076c <fiprintf>
 8010730:	f000 f8df 	bl	80108f2 <abort>
 8010734:	4b04      	ldr	r3, [pc, #16]	; (8010748 <__assert_func+0x38>)
 8010736:	461c      	mov	r4, r3
 8010738:	e7f3      	b.n	8010722 <__assert_func+0x12>
 801073a:	bf00      	nop
 801073c:	20000650 	.word	0x20000650
 8010740:	0801147d 	.word	0x0801147d
 8010744:	0801148a 	.word	0x0801148a
 8010748:	080114b8 	.word	0x080114b8

0801074c <_close_r>:
 801074c:	b538      	push	{r3, r4, r5, lr}
 801074e:	4d06      	ldr	r5, [pc, #24]	; (8010768 <_close_r+0x1c>)
 8010750:	2300      	movs	r3, #0
 8010752:	4604      	mov	r4, r0
 8010754:	4608      	mov	r0, r1
 8010756:	602b      	str	r3, [r5, #0]
 8010758:	f7f1 ff3d 	bl	80025d6 <_close>
 801075c:	1c43      	adds	r3, r0, #1
 801075e:	d102      	bne.n	8010766 <_close_r+0x1a>
 8010760:	682b      	ldr	r3, [r5, #0]
 8010762:	b103      	cbz	r3, 8010766 <_close_r+0x1a>
 8010764:	6023      	str	r3, [r4, #0]
 8010766:	bd38      	pop	{r3, r4, r5, pc}
 8010768:	20000e1c 	.word	0x20000e1c

0801076c <fiprintf>:
 801076c:	b40e      	push	{r1, r2, r3}
 801076e:	b503      	push	{r0, r1, lr}
 8010770:	4601      	mov	r1, r0
 8010772:	ab03      	add	r3, sp, #12
 8010774:	4805      	ldr	r0, [pc, #20]	; (801078c <fiprintf+0x20>)
 8010776:	f853 2b04 	ldr.w	r2, [r3], #4
 801077a:	6800      	ldr	r0, [r0, #0]
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	f7ff fe31 	bl	80103e4 <_vfiprintf_r>
 8010782:	b002      	add	sp, #8
 8010784:	f85d eb04 	ldr.w	lr, [sp], #4
 8010788:	b003      	add	sp, #12
 801078a:	4770      	bx	lr
 801078c:	20000650 	.word	0x20000650

08010790 <_fstat_r>:
 8010790:	b538      	push	{r3, r4, r5, lr}
 8010792:	4d07      	ldr	r5, [pc, #28]	; (80107b0 <_fstat_r+0x20>)
 8010794:	2300      	movs	r3, #0
 8010796:	4604      	mov	r4, r0
 8010798:	4608      	mov	r0, r1
 801079a:	4611      	mov	r1, r2
 801079c:	602b      	str	r3, [r5, #0]
 801079e:	f7f1 ff26 	bl	80025ee <_fstat>
 80107a2:	1c43      	adds	r3, r0, #1
 80107a4:	d102      	bne.n	80107ac <_fstat_r+0x1c>
 80107a6:	682b      	ldr	r3, [r5, #0]
 80107a8:	b103      	cbz	r3, 80107ac <_fstat_r+0x1c>
 80107aa:	6023      	str	r3, [r4, #0]
 80107ac:	bd38      	pop	{r3, r4, r5, pc}
 80107ae:	bf00      	nop
 80107b0:	20000e1c 	.word	0x20000e1c

080107b4 <_isatty_r>:
 80107b4:	b538      	push	{r3, r4, r5, lr}
 80107b6:	4d06      	ldr	r5, [pc, #24]	; (80107d0 <_isatty_r+0x1c>)
 80107b8:	2300      	movs	r3, #0
 80107ba:	4604      	mov	r4, r0
 80107bc:	4608      	mov	r0, r1
 80107be:	602b      	str	r3, [r5, #0]
 80107c0:	f7f1 ff25 	bl	800260e <_isatty>
 80107c4:	1c43      	adds	r3, r0, #1
 80107c6:	d102      	bne.n	80107ce <_isatty_r+0x1a>
 80107c8:	682b      	ldr	r3, [r5, #0]
 80107ca:	b103      	cbz	r3, 80107ce <_isatty_r+0x1a>
 80107cc:	6023      	str	r3, [r4, #0]
 80107ce:	bd38      	pop	{r3, r4, r5, pc}
 80107d0:	20000e1c 	.word	0x20000e1c

080107d4 <_lseek_r>:
 80107d4:	b538      	push	{r3, r4, r5, lr}
 80107d6:	4d07      	ldr	r5, [pc, #28]	; (80107f4 <_lseek_r+0x20>)
 80107d8:	4604      	mov	r4, r0
 80107da:	4608      	mov	r0, r1
 80107dc:	4611      	mov	r1, r2
 80107de:	2200      	movs	r2, #0
 80107e0:	602a      	str	r2, [r5, #0]
 80107e2:	461a      	mov	r2, r3
 80107e4:	f7f1 ff1e 	bl	8002624 <_lseek>
 80107e8:	1c43      	adds	r3, r0, #1
 80107ea:	d102      	bne.n	80107f2 <_lseek_r+0x1e>
 80107ec:	682b      	ldr	r3, [r5, #0]
 80107ee:	b103      	cbz	r3, 80107f2 <_lseek_r+0x1e>
 80107f0:	6023      	str	r3, [r4, #0]
 80107f2:	bd38      	pop	{r3, r4, r5, pc}
 80107f4:	20000e1c 	.word	0x20000e1c

080107f8 <__ascii_mbtowc>:
 80107f8:	b082      	sub	sp, #8
 80107fa:	b901      	cbnz	r1, 80107fe <__ascii_mbtowc+0x6>
 80107fc:	a901      	add	r1, sp, #4
 80107fe:	b142      	cbz	r2, 8010812 <__ascii_mbtowc+0x1a>
 8010800:	b14b      	cbz	r3, 8010816 <__ascii_mbtowc+0x1e>
 8010802:	7813      	ldrb	r3, [r2, #0]
 8010804:	600b      	str	r3, [r1, #0]
 8010806:	7812      	ldrb	r2, [r2, #0]
 8010808:	1e10      	subs	r0, r2, #0
 801080a:	bf18      	it	ne
 801080c:	2001      	movne	r0, #1
 801080e:	b002      	add	sp, #8
 8010810:	4770      	bx	lr
 8010812:	4610      	mov	r0, r2
 8010814:	e7fb      	b.n	801080e <__ascii_mbtowc+0x16>
 8010816:	f06f 0001 	mvn.w	r0, #1
 801081a:	e7f8      	b.n	801080e <__ascii_mbtowc+0x16>

0801081c <memmove>:
 801081c:	4288      	cmp	r0, r1
 801081e:	b510      	push	{r4, lr}
 8010820:	eb01 0402 	add.w	r4, r1, r2
 8010824:	d902      	bls.n	801082c <memmove+0x10>
 8010826:	4284      	cmp	r4, r0
 8010828:	4623      	mov	r3, r4
 801082a:	d807      	bhi.n	801083c <memmove+0x20>
 801082c:	1e43      	subs	r3, r0, #1
 801082e:	42a1      	cmp	r1, r4
 8010830:	d008      	beq.n	8010844 <memmove+0x28>
 8010832:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010836:	f803 2f01 	strb.w	r2, [r3, #1]!
 801083a:	e7f8      	b.n	801082e <memmove+0x12>
 801083c:	4402      	add	r2, r0
 801083e:	4601      	mov	r1, r0
 8010840:	428a      	cmp	r2, r1
 8010842:	d100      	bne.n	8010846 <memmove+0x2a>
 8010844:	bd10      	pop	{r4, pc}
 8010846:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801084a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801084e:	e7f7      	b.n	8010840 <memmove+0x24>

08010850 <__malloc_lock>:
 8010850:	4801      	ldr	r0, [pc, #4]	; (8010858 <__malloc_lock+0x8>)
 8010852:	f7fe bf9a 	b.w	800f78a <__retarget_lock_acquire_recursive>
 8010856:	bf00      	nop
 8010858:	20000e14 	.word	0x20000e14

0801085c <__malloc_unlock>:
 801085c:	4801      	ldr	r0, [pc, #4]	; (8010864 <__malloc_unlock+0x8>)
 801085e:	f7fe bf95 	b.w	800f78c <__retarget_lock_release_recursive>
 8010862:	bf00      	nop
 8010864:	20000e14 	.word	0x20000e14

08010868 <_realloc_r>:
 8010868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801086a:	4607      	mov	r7, r0
 801086c:	4614      	mov	r4, r2
 801086e:	460e      	mov	r6, r1
 8010870:	b921      	cbnz	r1, 801087c <_realloc_r+0x14>
 8010872:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010876:	4611      	mov	r1, r2
 8010878:	f7ff bbd4 	b.w	8010024 <_malloc_r>
 801087c:	b922      	cbnz	r2, 8010888 <_realloc_r+0x20>
 801087e:	f7ff fb81 	bl	800ff84 <_free_r>
 8010882:	4625      	mov	r5, r4
 8010884:	4628      	mov	r0, r5
 8010886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010888:	f000 f83a 	bl	8010900 <_malloc_usable_size_r>
 801088c:	42a0      	cmp	r0, r4
 801088e:	d20f      	bcs.n	80108b0 <_realloc_r+0x48>
 8010890:	4621      	mov	r1, r4
 8010892:	4638      	mov	r0, r7
 8010894:	f7ff fbc6 	bl	8010024 <_malloc_r>
 8010898:	4605      	mov	r5, r0
 801089a:	2800      	cmp	r0, #0
 801089c:	d0f2      	beq.n	8010884 <_realloc_r+0x1c>
 801089e:	4631      	mov	r1, r6
 80108a0:	4622      	mov	r2, r4
 80108a2:	f7fd f933 	bl	800db0c <memcpy>
 80108a6:	4631      	mov	r1, r6
 80108a8:	4638      	mov	r0, r7
 80108aa:	f7ff fb6b 	bl	800ff84 <_free_r>
 80108ae:	e7e9      	b.n	8010884 <_realloc_r+0x1c>
 80108b0:	4635      	mov	r5, r6
 80108b2:	e7e7      	b.n	8010884 <_realloc_r+0x1c>

080108b4 <_read_r>:
 80108b4:	b538      	push	{r3, r4, r5, lr}
 80108b6:	4d07      	ldr	r5, [pc, #28]	; (80108d4 <_read_r+0x20>)
 80108b8:	4604      	mov	r4, r0
 80108ba:	4608      	mov	r0, r1
 80108bc:	4611      	mov	r1, r2
 80108be:	2200      	movs	r2, #0
 80108c0:	602a      	str	r2, [r5, #0]
 80108c2:	461a      	mov	r2, r3
 80108c4:	f7f1 fe4e 	bl	8002564 <_read>
 80108c8:	1c43      	adds	r3, r0, #1
 80108ca:	d102      	bne.n	80108d2 <_read_r+0x1e>
 80108cc:	682b      	ldr	r3, [r5, #0]
 80108ce:	b103      	cbz	r3, 80108d2 <_read_r+0x1e>
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	bd38      	pop	{r3, r4, r5, pc}
 80108d4:	20000e1c 	.word	0x20000e1c

080108d8 <__ascii_wctomb>:
 80108d8:	b149      	cbz	r1, 80108ee <__ascii_wctomb+0x16>
 80108da:	2aff      	cmp	r2, #255	; 0xff
 80108dc:	bf85      	ittet	hi
 80108de:	238a      	movhi	r3, #138	; 0x8a
 80108e0:	6003      	strhi	r3, [r0, #0]
 80108e2:	700a      	strbls	r2, [r1, #0]
 80108e4:	f04f 30ff 	movhi.w	r0, #4294967295
 80108e8:	bf98      	it	ls
 80108ea:	2001      	movls	r0, #1
 80108ec:	4770      	bx	lr
 80108ee:	4608      	mov	r0, r1
 80108f0:	4770      	bx	lr

080108f2 <abort>:
 80108f2:	b508      	push	{r3, lr}
 80108f4:	2006      	movs	r0, #6
 80108f6:	f000 f833 	bl	8010960 <raise>
 80108fa:	2001      	movs	r0, #1
 80108fc:	f7f1 fe28 	bl	8002550 <_exit>

08010900 <_malloc_usable_size_r>:
 8010900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010904:	1f18      	subs	r0, r3, #4
 8010906:	2b00      	cmp	r3, #0
 8010908:	bfbc      	itt	lt
 801090a:	580b      	ldrlt	r3, [r1, r0]
 801090c:	18c0      	addlt	r0, r0, r3
 801090e:	4770      	bx	lr

08010910 <_raise_r>:
 8010910:	291f      	cmp	r1, #31
 8010912:	b538      	push	{r3, r4, r5, lr}
 8010914:	4604      	mov	r4, r0
 8010916:	460d      	mov	r5, r1
 8010918:	d904      	bls.n	8010924 <_raise_r+0x14>
 801091a:	2316      	movs	r3, #22
 801091c:	6003      	str	r3, [r0, #0]
 801091e:	f04f 30ff 	mov.w	r0, #4294967295
 8010922:	bd38      	pop	{r3, r4, r5, pc}
 8010924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010926:	b112      	cbz	r2, 801092e <_raise_r+0x1e>
 8010928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801092c:	b94b      	cbnz	r3, 8010942 <_raise_r+0x32>
 801092e:	4620      	mov	r0, r4
 8010930:	f000 f830 	bl	8010994 <_getpid_r>
 8010934:	462a      	mov	r2, r5
 8010936:	4601      	mov	r1, r0
 8010938:	4620      	mov	r0, r4
 801093a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801093e:	f000 b817 	b.w	8010970 <_kill_r>
 8010942:	2b01      	cmp	r3, #1
 8010944:	d00a      	beq.n	801095c <_raise_r+0x4c>
 8010946:	1c59      	adds	r1, r3, #1
 8010948:	d103      	bne.n	8010952 <_raise_r+0x42>
 801094a:	2316      	movs	r3, #22
 801094c:	6003      	str	r3, [r0, #0]
 801094e:	2001      	movs	r0, #1
 8010950:	e7e7      	b.n	8010922 <_raise_r+0x12>
 8010952:	2400      	movs	r4, #0
 8010954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010958:	4628      	mov	r0, r5
 801095a:	4798      	blx	r3
 801095c:	2000      	movs	r0, #0
 801095e:	e7e0      	b.n	8010922 <_raise_r+0x12>

08010960 <raise>:
 8010960:	4b02      	ldr	r3, [pc, #8]	; (801096c <raise+0xc>)
 8010962:	4601      	mov	r1, r0
 8010964:	6818      	ldr	r0, [r3, #0]
 8010966:	f7ff bfd3 	b.w	8010910 <_raise_r>
 801096a:	bf00      	nop
 801096c:	20000650 	.word	0x20000650

08010970 <_kill_r>:
 8010970:	b538      	push	{r3, r4, r5, lr}
 8010972:	4d07      	ldr	r5, [pc, #28]	; (8010990 <_kill_r+0x20>)
 8010974:	2300      	movs	r3, #0
 8010976:	4604      	mov	r4, r0
 8010978:	4608      	mov	r0, r1
 801097a:	4611      	mov	r1, r2
 801097c:	602b      	str	r3, [r5, #0]
 801097e:	f7f1 fdd7 	bl	8002530 <_kill>
 8010982:	1c43      	adds	r3, r0, #1
 8010984:	d102      	bne.n	801098c <_kill_r+0x1c>
 8010986:	682b      	ldr	r3, [r5, #0]
 8010988:	b103      	cbz	r3, 801098c <_kill_r+0x1c>
 801098a:	6023      	str	r3, [r4, #0]
 801098c:	bd38      	pop	{r3, r4, r5, pc}
 801098e:	bf00      	nop
 8010990:	20000e1c 	.word	0x20000e1c

08010994 <_getpid_r>:
 8010994:	f7f1 bdc4 	b.w	8002520 <_getpid>

08010998 <_init>:
 8010998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801099a:	bf00      	nop
 801099c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801099e:	bc08      	pop	{r3}
 80109a0:	469e      	mov	lr, r3
 80109a2:	4770      	bx	lr

080109a4 <_fini>:
 80109a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80109a6:	bf00      	nop
 80109a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80109aa:	bc08      	pop	{r3}
 80109ac:	469e      	mov	lr, r3
 80109ae:	4770      	bx	lr
