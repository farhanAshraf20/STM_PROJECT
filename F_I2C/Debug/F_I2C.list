
F_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015878  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000120c  08015a08  08015a08  00025a08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016c14  08016c14  00030b00  2**0
                  CONTENTS
  4 .ARM          00000008  08016c14  08016c14  00026c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016c1c  08016c1c  00030b00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016c1c  08016c1c  00026c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016c20  08016c20  00026c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000b00  20000000  08016c24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000212c  20000b00  08017724  00030b00  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c2c  08017724  00032c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030b00  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034792  00000000  00000000  00030b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005e13  00000000  00000000  000652c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002088  00000000  00000000  0006b0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df0  00000000  00000000  0006d160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed83  00000000  00000000  0006ef50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a76a  00000000  00000000  0009dcd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106637  00000000  00000000  000c843d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cea74  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009888  00000000  00000000  001ceac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000b00 	.word	0x20000b00
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080159f0 	.word	0x080159f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000b04 	.word	0x20000b04
 80001cc:	080159f0 	.word	0x080159f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96e 	b.w	8000e9c <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468c      	mov	ip, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f040 8083 	bne.w	8000cee <__udivmoddi4+0x116>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d947      	bls.n	8000c7e <__udivmoddi4+0xa6>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b142      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	f1c2 0020 	rsb	r0, r2, #32
 8000bf8:	fa24 f000 	lsr.w	r0, r4, r0
 8000bfc:	4091      	lsls	r1, r2
 8000bfe:	4097      	lsls	r7, r2
 8000c00:	ea40 0c01 	orr.w	ip, r0, r1
 8000c04:	4094      	lsls	r4, r2
 8000c06:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c0a:	0c23      	lsrs	r3, r4, #16
 8000c0c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c10:	fa1f fe87 	uxth.w	lr, r7
 8000c14:	fb08 c116 	mls	r1, r8, r6, ip
 8000c18:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c20:	4299      	cmp	r1, r3
 8000c22:	d909      	bls.n	8000c38 <__udivmoddi4+0x60>
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2a:	f080 8119 	bcs.w	8000e60 <__udivmoddi4+0x288>
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	f240 8116 	bls.w	8000e60 <__udivmoddi4+0x288>
 8000c34:	3e02      	subs	r6, #2
 8000c36:	443b      	add	r3, r7
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c40:	fb08 3310 	mls	r3, r8, r0, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x8c>
 8000c50:	193c      	adds	r4, r7, r4
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 8105 	bcs.w	8000e64 <__udivmoddi4+0x28c>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f240 8102 	bls.w	8000e64 <__udivmoddi4+0x28c>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c68:	eba4 040e 	sub.w	r4, r4, lr
 8000c6c:	2600      	movs	r6, #0
 8000c6e:	b11d      	cbz	r5, 8000c78 <__udivmoddi4+0xa0>
 8000c70:	40d4      	lsrs	r4, r2
 8000c72:	2300      	movs	r3, #0
 8000c74:	e9c5 4300 	strd	r4, r3, [r5]
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xaa>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f282 	clz	r2, r2
 8000c86:	2a00      	cmp	r2, #0
 8000c88:	d150      	bne.n	8000d2c <__udivmoddi4+0x154>
 8000c8a:	1bcb      	subs	r3, r1, r7
 8000c8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c90:	fa1f f887 	uxth.w	r8, r7
 8000c94:	2601      	movs	r6, #1
 8000c96:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c9a:	0c21      	lsrs	r1, r4, #16
 8000c9c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb08 f30c 	mul.w	r3, r8, ip
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d907      	bls.n	8000cbc <__udivmoddi4+0xe4>
 8000cac:	1879      	adds	r1, r7, r1
 8000cae:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cb2:	d202      	bcs.n	8000cba <__udivmoddi4+0xe2>
 8000cb4:	428b      	cmp	r3, r1
 8000cb6:	f200 80e9 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cba:	4684      	mov	ip, r0
 8000cbc:	1ac9      	subs	r1, r1, r3
 8000cbe:	b2a3      	uxth	r3, r4
 8000cc0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cc4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cc8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ccc:	fb08 f800 	mul.w	r8, r8, r0
 8000cd0:	45a0      	cmp	r8, r4
 8000cd2:	d907      	bls.n	8000ce4 <__udivmoddi4+0x10c>
 8000cd4:	193c      	adds	r4, r7, r4
 8000cd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x10a>
 8000cdc:	45a0      	cmp	r8, r4
 8000cde:	f200 80d9 	bhi.w	8000e94 <__udivmoddi4+0x2bc>
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	eba4 0408 	sub.w	r4, r4, r8
 8000ce8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cec:	e7bf      	b.n	8000c6e <__udivmoddi4+0x96>
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x12e>
 8000cf2:	2d00      	cmp	r5, #0
 8000cf4:	f000 80b1 	beq.w	8000e5a <__udivmoddi4+0x282>
 8000cf8:	2600      	movs	r6, #0
 8000cfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000cfe:	4630      	mov	r0, r6
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	fab3 f683 	clz	r6, r3
 8000d0a:	2e00      	cmp	r6, #0
 8000d0c:	d14a      	bne.n	8000da4 <__udivmoddi4+0x1cc>
 8000d0e:	428b      	cmp	r3, r1
 8000d10:	d302      	bcc.n	8000d18 <__udivmoddi4+0x140>
 8000d12:	4282      	cmp	r2, r0
 8000d14:	f200 80b8 	bhi.w	8000e88 <__udivmoddi4+0x2b0>
 8000d18:	1a84      	subs	r4, r0, r2
 8000d1a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	468c      	mov	ip, r1
 8000d22:	2d00      	cmp	r5, #0
 8000d24:	d0a8      	beq.n	8000c78 <__udivmoddi4+0xa0>
 8000d26:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d2a:	e7a5      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000d2c:	f1c2 0320 	rsb	r3, r2, #32
 8000d30:	fa20 f603 	lsr.w	r6, r0, r3
 8000d34:	4097      	lsls	r7, r2
 8000d36:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d3e:	40d9      	lsrs	r1, r3
 8000d40:	4330      	orrs	r0, r6
 8000d42:	0c03      	lsrs	r3, r0, #16
 8000d44:	fbb1 f6fe 	udiv	r6, r1, lr
 8000d48:	fa1f f887 	uxth.w	r8, r7
 8000d4c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d54:	fb06 f108 	mul.w	r1, r6, r8
 8000d58:	4299      	cmp	r1, r3
 8000d5a:	fa04 f402 	lsl.w	r4, r4, r2
 8000d5e:	d909      	bls.n	8000d74 <__udivmoddi4+0x19c>
 8000d60:	18fb      	adds	r3, r7, r3
 8000d62:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d66:	f080 808d 	bcs.w	8000e84 <__udivmoddi4+0x2ac>
 8000d6a:	4299      	cmp	r1, r3
 8000d6c:	f240 808a 	bls.w	8000e84 <__udivmoddi4+0x2ac>
 8000d70:	3e02      	subs	r6, #2
 8000d72:	443b      	add	r3, r7
 8000d74:	1a5b      	subs	r3, r3, r1
 8000d76:	b281      	uxth	r1, r0
 8000d78:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb00 f308 	mul.w	r3, r0, r8
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x1c4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d92:	d273      	bcs.n	8000e7c <__udivmoddi4+0x2a4>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d971      	bls.n	8000e7c <__udivmoddi4+0x2a4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	4439      	add	r1, r7
 8000d9c:	1acb      	subs	r3, r1, r3
 8000d9e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000da2:	e778      	b.n	8000c96 <__udivmoddi4+0xbe>
 8000da4:	f1c6 0c20 	rsb	ip, r6, #32
 8000da8:	fa03 f406 	lsl.w	r4, r3, r6
 8000dac:	fa22 f30c 	lsr.w	r3, r2, ip
 8000db0:	431c      	orrs	r4, r3
 8000db2:	fa20 f70c 	lsr.w	r7, r0, ip
 8000db6:	fa01 f306 	lsl.w	r3, r1, r6
 8000dba:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000dbe:	fa21 f10c 	lsr.w	r1, r1, ip
 8000dc2:	431f      	orrs	r7, r3
 8000dc4:	0c3b      	lsrs	r3, r7, #16
 8000dc6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000dca:	fa1f f884 	uxth.w	r8, r4
 8000dce:	fb0e 1119 	mls	r1, lr, r9, r1
 8000dd2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000dd6:	fb09 fa08 	mul.w	sl, r9, r8
 8000dda:	458a      	cmp	sl, r1
 8000ddc:	fa02 f206 	lsl.w	r2, r2, r6
 8000de0:	fa00 f306 	lsl.w	r3, r0, r6
 8000de4:	d908      	bls.n	8000df8 <__udivmoddi4+0x220>
 8000de6:	1861      	adds	r1, r4, r1
 8000de8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dec:	d248      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000dee:	458a      	cmp	sl, r1
 8000df0:	d946      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000df2:	f1a9 0902 	sub.w	r9, r9, #2
 8000df6:	4421      	add	r1, r4
 8000df8:	eba1 010a 	sub.w	r1, r1, sl
 8000dfc:	b2bf      	uxth	r7, r7
 8000dfe:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e02:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e06:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e0a:	fb00 f808 	mul.w	r8, r0, r8
 8000e0e:	45b8      	cmp	r8, r7
 8000e10:	d907      	bls.n	8000e22 <__udivmoddi4+0x24a>
 8000e12:	19e7      	adds	r7, r4, r7
 8000e14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e18:	d22e      	bcs.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1a:	45b8      	cmp	r8, r7
 8000e1c:	d92c      	bls.n	8000e78 <__udivmoddi4+0x2a0>
 8000e1e:	3802      	subs	r0, #2
 8000e20:	4427      	add	r7, r4
 8000e22:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e26:	eba7 0708 	sub.w	r7, r7, r8
 8000e2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e2e:	454f      	cmp	r7, r9
 8000e30:	46c6      	mov	lr, r8
 8000e32:	4649      	mov	r1, r9
 8000e34:	d31a      	bcc.n	8000e6c <__udivmoddi4+0x294>
 8000e36:	d017      	beq.n	8000e68 <__udivmoddi4+0x290>
 8000e38:	b15d      	cbz	r5, 8000e52 <__udivmoddi4+0x27a>
 8000e3a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e3e:	eb67 0701 	sbc.w	r7, r7, r1
 8000e42:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000e46:	40f2      	lsrs	r2, r6
 8000e48:	ea4c 0202 	orr.w	r2, ip, r2
 8000e4c:	40f7      	lsrs	r7, r6
 8000e4e:	e9c5 2700 	strd	r2, r7, [r5]
 8000e52:	2600      	movs	r6, #0
 8000e54:	4631      	mov	r1, r6
 8000e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e5a:	462e      	mov	r6, r5
 8000e5c:	4628      	mov	r0, r5
 8000e5e:	e70b      	b.n	8000c78 <__udivmoddi4+0xa0>
 8000e60:	4606      	mov	r6, r0
 8000e62:	e6e9      	b.n	8000c38 <__udivmoddi4+0x60>
 8000e64:	4618      	mov	r0, r3
 8000e66:	e6fd      	b.n	8000c64 <__udivmoddi4+0x8c>
 8000e68:	4543      	cmp	r3, r8
 8000e6a:	d2e5      	bcs.n	8000e38 <__udivmoddi4+0x260>
 8000e6c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e70:	eb69 0104 	sbc.w	r1, r9, r4
 8000e74:	3801      	subs	r0, #1
 8000e76:	e7df      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	e7d2      	b.n	8000e22 <__udivmoddi4+0x24a>
 8000e7c:	4660      	mov	r0, ip
 8000e7e:	e78d      	b.n	8000d9c <__udivmoddi4+0x1c4>
 8000e80:	4681      	mov	r9, r0
 8000e82:	e7b9      	b.n	8000df8 <__udivmoddi4+0x220>
 8000e84:	4666      	mov	r6, ip
 8000e86:	e775      	b.n	8000d74 <__udivmoddi4+0x19c>
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e74a      	b.n	8000d22 <__udivmoddi4+0x14a>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	4439      	add	r1, r7
 8000e92:	e713      	b.n	8000cbc <__udivmoddi4+0xe4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e724      	b.n	8000ce4 <__udivmoddi4+0x10c>
 8000e9a:	bf00      	nop

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <M24SR_UpdateCrc>:
  * @brief  This function updates the CRC 
  * @param  None
  * @retval None
  */
static uint16_t M24SR_UpdateCrc (uint8_t ch, uint16_t *lpwCrc)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	6039      	str	r1, [r7, #0]
 8000eaa:	71fb      	strb	r3, [r7, #7]
  ch = (ch^(uint8_t)((*lpwCrc) & 0x00FF));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	79fb      	ldrb	r3, [r7, #7]
 8000eb4:	4053      	eors	r3, r2
 8000eb6:	71fb      	strb	r3, [r7, #7]
  ch = (ch^(ch<<4));
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	b25a      	sxtb	r2, r3
 8000ebe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec2:	4053      	eors	r3, r2
 8000ec4:	b25b      	sxtb	r3, r3
 8000ec6:	71fb      	strb	r3, [r7, #7]
  *lpwCrc = (*lpwCrc >> 8)^((uint16_t)ch << 8)^((uint16_t)ch<<3)^((uint16_t)ch>>4);
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	881b      	ldrh	r3, [r3, #0]
 8000ecc:	0a1b      	lsrs	r3, r3, #8
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	b21a      	sxth	r2, r3
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	021b      	lsls	r3, r3, #8
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4053      	eors	r3, r2
 8000eda:	b21a      	sxth	r2, r3
 8000edc:	79fb      	ldrb	r3, [r7, #7]
 8000ede:	00db      	lsls	r3, r3, #3
 8000ee0:	b21b      	sxth	r3, r3
 8000ee2:	4053      	eors	r3, r2
 8000ee4:	b21a      	sxth	r2, r3
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	091b      	lsrs	r3, r3, #4
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4053      	eors	r3, r2
 8000ef0:	b21b      	sxth	r3, r3
 8000ef2:	b29a      	uxth	r2, r3
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	801a      	strh	r2, [r3, #0]
  
  return(*lpwCrc);
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	881b      	ldrh	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <M24SR_ComputeCrc>:
  * @param  Data : pointer on the data used to compute the CRC16
  * @param  Length : number of byte of the data
  * @retval CRC16 
  */
static uint16_t M24SR_ComputeCrc(uint8_t *Data, uint8_t Length)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
  uint8_t chBlock;
  uint16_t wCrc;
  
  wCrc = 0x6363; /* ITU-V.41 */
 8000f14:	f246 3363 	movw	r3, #25443	; 0x6363
 8000f18:	81bb      	strh	r3, [r7, #12]
  
  do {
    chBlock = *Data++;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	73fb      	strb	r3, [r7, #15]
    M24SR_UpdateCrc(chBlock, &wCrc);
 8000f24:	f107 020c 	add.w	r2, r7, #12
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff ffb7 	bl	8000ea0 <M24SR_UpdateCrc>
  } while (--Length);
 8000f32:	78fb      	ldrb	r3, [r7, #3]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	70fb      	strb	r3, [r7, #3]
 8000f38:	78fb      	ldrb	r3, [r7, #3]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d1ed      	bne.n	8000f1a <M24SR_ComputeCrc+0x12>
  
  return wCrc ;
 8000f3e:	89bb      	ldrh	r3, [r7, #12]
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3710      	adds	r7, #16
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <M24SR_IsCorrectCRC16Residue>:
* @param    Length     :   Number of bits of DataIn
* @retval   Status (SW1&SW2)    :   CRC16 residue is correct  
* @retval   M24SR_ERROR_CRC    :  CRC16 residue is false
*/
static uint16_t M24SR_IsCorrectCRC16Residue (uint8_t *DataIn,uint8_t Length)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	70fb      	strb	r3, [r7, #3]
  uint16_t ResCRC=0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	81fb      	strh	r3, [r7, #14]
  
  /* check the CRC16 Residue */
  if (Length !=0)
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <M24SR_IsCorrectCRC16Residue+0x24>
    ResCRC= M24SR_ComputeCrc (DataIn, Length);
 8000f5e:	78fb      	ldrb	r3, [r7, #3]
 8000f60:	4619      	mov	r1, r3
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ffd0 	bl	8000f08 <M24SR_ComputeCrc>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	81fb      	strh	r3, [r7, #14]
  
  if ( ResCRC == 0x0000)
 8000f6c:	89fb      	ldrh	r3, [r7, #14]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d110      	bne.n	8000f94 <M24SR_IsCorrectCRC16Residue+0x4c>
  {
    /* Good CRC, but error status from M24SR */
    return( ((DataIn[Length-UB_STATUS_OFFSET]<<8) & 0xFF00) | (DataIn[Length-LB_STATUS_OFFSET] & 0x00FF) ); 
 8000f72:	78fb      	ldrb	r3, [r7, #3]
 8000f74:	3b04      	subs	r3, #4
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4413      	add	r3, r2
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	021b      	lsls	r3, r3, #8
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	78fb      	ldrb	r3, [r7, #3]
 8000f82:	3b03      	subs	r3, #3
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	440b      	add	r3, r1
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	b21b      	sxth	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b21b      	sxth	r3, r3
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	e018      	b.n	8000fc6 <M24SR_IsCorrectCRC16Residue+0x7e>
  }
  else
  {
    ResCRC=0;
 8000f94:	2300      	movs	r3, #0
 8000f96:	81fb      	strh	r3, [r7, #14]
    ResCRC= M24SR_ComputeCrc (DataIn, 5);
 8000f98:	2105      	movs	r1, #5
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffb4 	bl	8000f08 <M24SR_ComputeCrc>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	81fb      	strh	r3, [r7, #14]
    if ( ResCRC != 0x0000)
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <M24SR_IsCorrectCRC16Residue+0x66>
    {
      /* Bad CRC */
      return M24SR_ERROR_CRC;
 8000faa:	2312      	movs	r3, #18
 8000fac:	e00b      	b.n	8000fc6 <M24SR_IsCorrectCRC16Residue+0x7e>
    }
    else
    {
      /* Good CRC, but error status from M24SR */
      return( ((DataIn[1]<<8) & 0xFF00) | (DataIn[2] & 0x00FF) ); 
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	021b      	lsls	r3, r3, #8
 8000fb6:	b21a      	sxth	r2, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3302      	adds	r3, #2
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	b21b      	sxth	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b21b      	sxth	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
    }
  }  
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <M24SR_BuildIBlockCommand>:
  * @param     CommandStructure : structure that contain the structure of the command (if the different field are presnet or not 
  * @param     NbByte : number of byte of the command
  * @param     pCommand : pointer of the command created
  */
static void M24SR_BuildIBlockCommand ( uint16_t CommandStructure, C_APDU Command, uint16_t *NbByte , uint8_t *pCommand)
{
 8000fd0:	b084      	sub	sp, #16
 8000fd2:	b590      	push	{r4, r7, lr}
 8000fd4:	b085      	sub	sp, #20
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	4604      	mov	r4, r0
 8000fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	80fb      	strh	r3, [r7, #6]
  uint16_t  uCRC16; 
  static uint8_t BlockNumber = 0x01;
  
  (*NbByte) = 0;
 8000fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fe8:	2200      	movs	r2, #0
 8000fea:	801a      	strh	r2, [r3, #0]
  
  /* add the PCD byte */
  if ((CommandStructure & M24SR_PCB_NEEDED) !=0)
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	f003 0301 	and.w	r3, r3, #1
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d018      	beq.n	8001028 <M24SR_BuildIBlockCommand+0x58>
  {
    /* toggle the block number */
    BlockNumber = TOGGLE ( BlockNumber );
 8000ff6:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	bf0c      	ite	eq
 8000ffe:	2301      	moveq	r3, #1
 8001000:	2300      	movne	r3, #0
 8001002:	b2db      	uxtb	r3, r3
 8001004:	461a      	mov	r2, r3
 8001006:	4b68      	ldr	r3, [pc, #416]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 8001008:	701a      	strb	r2, [r3, #0]
    /* Add the I block byte */
    pCommand[(*NbByte)++] = 0x02 |  BlockNumber; 
 800100a:	4b67      	ldr	r3, [pc, #412]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 800100c:	781a      	ldrb	r2, [r3, #0]
 800100e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001010:	881b      	ldrh	r3, [r3, #0]
 8001012:	1c59      	adds	r1, r3, #1
 8001014:	b288      	uxth	r0, r1
 8001016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001018:	8008      	strh	r0, [r1, #0]
 800101a:	4619      	mov	r1, r3
 800101c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800101e:	440b      	add	r3, r1
 8001020:	f042 0202 	orr.w	r2, r2, #2
 8001024:	b2d2      	uxtb	r2, r2
 8001026:	701a      	strb	r2, [r3, #0]
  }
  
  /* add the DID byte */
  if ((BlockNumber & M24SR_DID_NEEDED) !=0)
 8001028:	4b5f      	ldr	r3, [pc, #380]	; (80011a8 <M24SR_BuildIBlockCommand+0x1d8>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <M24SR_BuildIBlockCommand+0x7c>
  {
    /* Add the I block byte */
    pCommand[(*NbByte)++] = uDIDbyte; 
 8001034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001036:	881b      	ldrh	r3, [r3, #0]
 8001038:	1c5a      	adds	r2, r3, #1
 800103a:	b291      	uxth	r1, r2
 800103c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103e:	8011      	strh	r1, [r2, #0]
 8001040:	461a      	mov	r2, r3
 8001042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001044:	4413      	add	r3, r2
 8001046:	4a59      	ldr	r2, [pc, #356]	; (80011ac <M24SR_BuildIBlockCommand+0x1dc>)
 8001048:	7812      	ldrb	r2, [r2, #0]
 800104a:	701a      	strb	r2, [r3, #0]
  }
  
  /* add the Class byte */
  if ((CommandStructure & M24SR_CLA_NEEDED) !=0)
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d00b      	beq.n	800106e <M24SR_BuildIBlockCommand+0x9e>
  {
    pCommand[(*NbByte)++] = Command.Header.CLA ;
 8001056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001058:	881b      	ldrh	r3, [r3, #0]
 800105a:	1c5a      	adds	r2, r3, #1
 800105c:	b291      	uxth	r1, r2
 800105e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001060:	8011      	strh	r1, [r2, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001066:	4413      	add	r3, r2
 8001068:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800106c:	701a      	strb	r2, [r3, #0]
  }
  /* add the instruction byte byte */
  if ( (CommandStructure & M24SR_INS_NEEDED) !=0)
 800106e:	88fb      	ldrh	r3, [r7, #6]
 8001070:	f003 0304 	and.w	r3, r3, #4
 8001074:	2b00      	cmp	r3, #0
 8001076:	d00b      	beq.n	8001090 <M24SR_BuildIBlockCommand+0xc0>
  {
    pCommand[(*NbByte)++] = Command.Header.INS ;
 8001078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800107a:	881b      	ldrh	r3, [r3, #0]
 800107c:	1c5a      	adds	r2, r3, #1
 800107e:	b291      	uxth	r1, r2
 8001080:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001082:	8011      	strh	r1, [r2, #0]
 8001084:	461a      	mov	r2, r3
 8001086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001088:	4413      	add	r3, r2
 800108a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800108e:	701a      	strb	r2, [r3, #0]
  }
  /* add the Selection Mode byte */
  if ((CommandStructure & M24SR_P1_NEEDED) !=0)
 8001090:	88fb      	ldrh	r3, [r7, #6]
 8001092:	f003 0308 	and.w	r3, r3, #8
 8001096:	2b00      	cmp	r3, #0
 8001098:	d00b      	beq.n	80010b2 <M24SR_BuildIBlockCommand+0xe2>
  {
    pCommand[(*NbByte)++] = Command.Header.P1 ;
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	1c5a      	adds	r2, r3, #1
 80010a0:	b291      	uxth	r1, r2
 80010a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a4:	8011      	strh	r1, [r2, #0]
 80010a6:	461a      	mov	r2, r3
 80010a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010aa:	4413      	add	r3, r2
 80010ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80010b0:	701a      	strb	r2, [r3, #0]
  }
  /* add the Selection Mode byte */
  if ((CommandStructure & M24SR_P2_NEEDED) !=0)
 80010b2:	88fb      	ldrh	r3, [r7, #6]
 80010b4:	f003 0310 	and.w	r3, r3, #16
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00b      	beq.n	80010d4 <M24SR_BuildIBlockCommand+0x104>
  {
    pCommand[(*NbByte)++] = Command.Header.P2 ;
 80010bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	1c5a      	adds	r2, r3, #1
 80010c2:	b291      	uxth	r1, r2
 80010c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010c6:	8011      	strh	r1, [r2, #0]
 80010c8:	461a      	mov	r2, r3
 80010ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010cc:	4413      	add	r3, r2
 80010ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010d2:	701a      	strb	r2, [r3, #0]
  }
  /* add Data field lengthbyte */
  if ((CommandStructure & M24SR_LC_NEEDED) !=0)
 80010d4:	88fb      	ldrh	r3, [r7, #6]
 80010d6:	f003 0320 	and.w	r3, r3, #32
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d00b      	beq.n	80010f6 <M24SR_BuildIBlockCommand+0x126>
  {
    pCommand[(*NbByte)++] = Command.Body.LC ;
 80010de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010e0:	881b      	ldrh	r3, [r3, #0]
 80010e2:	1c5a      	adds	r2, r3, #1
 80010e4:	b291      	uxth	r1, r2
 80010e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010e8:	8011      	strh	r1, [r2, #0]
 80010ea:	461a      	mov	r2, r3
 80010ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80010ee:	4413      	add	r3, r2
 80010f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80010f4:	701a      	strb	r2, [r3, #0]
  }
  /* add Data field  */
  if ((CommandStructure & M24SR_DATA_NEEDED) !=0)
 80010f6:	88fb      	ldrh	r3, [r7, #6]
 80010f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d013      	beq.n	8001128 <M24SR_BuildIBlockCommand+0x158>
  {
    memcpy(&(pCommand[(*NbByte)]) ,Command.Body.pData,Command.Body.LC ) ;
 8001100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	461a      	mov	r2, r3
 8001106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001108:	4413      	add	r3, r2
 800110a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800110c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001110:	4618      	mov	r0, r3
 8001112:	f011 fd25 	bl	8012b60 <memcpy>
    (*NbByte) += Command.Body.LC ;
 8001116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001118:	881a      	ldrh	r2, [r3, #0]
 800111a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800111e:	b29b      	uxth	r3, r3
 8001120:	4413      	add	r3, r2
 8001122:	b29a      	uxth	r2, r3
 8001124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001126:	801a      	strh	r2, [r3, #0]
  }
  /* add Le field  */
  if ((CommandStructure & M24SR_LE_NEEDED) !=0)
 8001128:	88fb      	ldrh	r3, [r7, #6]
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	2b00      	cmp	r3, #0
 8001130:	d00b      	beq.n	800114a <M24SR_BuildIBlockCommand+0x17a>
  {
    pCommand[(*NbByte)++] = Command.Body.LE ;
 8001132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	b291      	uxth	r1, r2
 800113a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800113c:	8011      	strh	r1, [r2, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001142:	4413      	add	r3, r2
 8001144:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001148:	701a      	strb	r2, [r3, #0]
  }
  /* add CRC field  */
  if ((CommandStructure & M24SR_CRC_NEEDED) !=0)
 800114a:	88fb      	ldrh	r3, [r7, #6]
 800114c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001150:	2b00      	cmp	r3, #0
 8001152:	d022      	beq.n	800119a <M24SR_BuildIBlockCommand+0x1ca>
  {
    uCRC16 = M24SR_ComputeCrc (pCommand,(uint8_t) (*NbByte));
 8001154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001156:	881b      	ldrh	r3, [r3, #0]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	4619      	mov	r1, r3
 800115c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800115e:	f7ff fed3 	bl	8000f08 <M24SR_ComputeCrc>
 8001162:	4603      	mov	r3, r0
 8001164:	81fb      	strh	r3, [r7, #14]
    /* append the CRC16 */
    pCommand [(*NbByte)++] = GETLSB  (uCRC16 ) ;
 8001166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001168:	881b      	ldrh	r3, [r3, #0]
 800116a:	1c5a      	adds	r2, r3, #1
 800116c:	b291      	uxth	r1, r2
 800116e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001170:	8011      	strh	r1, [r2, #0]
 8001172:	461a      	mov	r2, r3
 8001174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001176:	4413      	add	r3, r2
 8001178:	89fa      	ldrh	r2, [r7, #14]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]
    pCommand [(*NbByte)++] = GETMSB  (uCRC16 ) ;  
 800117e:	89fb      	ldrh	r3, [r7, #14]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b299      	uxth	r1, r3
 8001184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	b290      	uxth	r0, r2
 800118c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800118e:	8010      	strh	r0, [r2, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001194:	4413      	add	r3, r2
 8001196:	b2ca      	uxtb	r2, r1
 8001198:	701a      	strb	r2, [r3, #0]
  } 
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80011a4:	b004      	add	sp, #16
 80011a6:	4770      	bx	lr
 80011a8:	20000001 	.word	0x20000001
 80011ac:	20000c2b 	.word	0x20000c2b

080011b0 <IsSBlock>:
* @param    pBuffer    :  pointer of the data
* @retval   M24SR_STATUS_SUCCESS  :  the data is a S-Block
* @retval   M24SR_ERROR_DEFAULT    :  the data is not a S-Block
*/
static uint16_t IsSBlock (uint8_t *pBuffer)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  
  if ((pBuffer[M24SR_OFFSET_PCB] & M24SR_MASK_BLOCK) == M24SR_MASK_SBLOCK)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80011c0:	2bc0      	cmp	r3, #192	; 0xc0
 80011c2:	d101      	bne.n	80011c8 <IsSBlock+0x18>
  {
    return M24SR_STATUS_SUCCESS;
 80011c4:	2300      	movs	r3, #0
 80011c6:	e000      	b.n	80011ca <IsSBlock+0x1a>
  }
  else 
  {  
    return M24SR_ERROR_DEFAULT;
 80011c8:	2310      	movs	r3, #16
  }
  
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr

080011d6 <M24SR_FWTExtension>:
  * @param  FWTbyte : FWT value
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
static uint16_t M24SR_FWTExtension (uint16_t DeviceAddr, uint8_t FWTbyte)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b086      	sub	sp, #24
 80011da:	af00      	add	r7, sp, #0
 80011dc:	4603      	mov	r3, r0
 80011de:	460a      	mov	r2, r1
 80011e0:	80fb      	strh	r3, [r7, #6]
 80011e2:	4613      	mov	r3, r2
 80011e4:	717b      	strb	r3, [r7, #5]
  uint8_t   pBuffer[M24SR_STATUSRESPONSE_NBBYTE];
  uint16_t  status ; 
  uint16_t  NthByte = 0,
 80011e6:	2300      	movs	r3, #0
 80011e8:	82fb      	strh	r3, [r7, #22]
  uCRC16;
  
  /* create the response */
  pBuffer[NthByte++] = 0xF2 ;  
 80011ea:	8afb      	ldrh	r3, [r7, #22]
 80011ec:	1c5a      	adds	r2, r3, #1
 80011ee:	82fa      	strh	r2, [r7, #22]
 80011f0:	f107 0218 	add.w	r2, r7, #24
 80011f4:	4413      	add	r3, r2
 80011f6:	22f2      	movs	r2, #242	; 0xf2
 80011f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
  pBuffer[NthByte++] = FWTbyte ;
 80011fc:	8afb      	ldrh	r3, [r7, #22]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	82fa      	strh	r2, [r7, #22]
 8001202:	f107 0218 	add.w	r2, r7, #24
 8001206:	4413      	add	r3, r2
 8001208:	797a      	ldrb	r2, [r7, #5]
 800120a:	f803 2c0c 	strb.w	r2, [r3, #-12]
  /* compute the CRC */
  uCRC16 = M24SR_ComputeCrc (pBuffer,0x02);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	2102      	movs	r1, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe77 	bl	8000f08 <M24SR_ComputeCrc>
 800121a:	4603      	mov	r3, r0
 800121c:	82bb      	strh	r3, [r7, #20]
  /* append the CRC16 */
  pBuffer [NthByte++] = GETLSB  (uCRC16 ) ;
 800121e:	8afb      	ldrh	r3, [r7, #22]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	82fa      	strh	r2, [r7, #22]
 8001224:	8aba      	ldrh	r2, [r7, #20]
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	f107 0118 	add.w	r1, r7, #24
 800122c:	440b      	add	r3, r1
 800122e:	f803 2c0c 	strb.w	r2, [r3, #-12]
  pBuffer [NthByte++]=   GETMSB  (uCRC16 ) ;  
 8001232:	8abb      	ldrh	r3, [r7, #20]
 8001234:	0a1b      	lsrs	r3, r3, #8
 8001236:	b29a      	uxth	r2, r3
 8001238:	8afb      	ldrh	r3, [r7, #22]
 800123a:	1c59      	adds	r1, r3, #1
 800123c:	82f9      	strh	r1, [r7, #22]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	f107 0118 	add.w	r1, r7, #24
 8001244:	440b      	add	r3, r1
 8001246:	f803 2c0c 	strb.w	r2, [r3, #-12]
  
  /* send the request */ 
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NthByte);
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	b2db      	uxtb	r3, r3
 800124e:	8afa      	ldrh	r2, [r7, #22]
 8001250:	f107 010c 	add.w	r1, r7, #12
 8001254:	4618      	mov	r0, r3
 8001256:	f006 fa5f 	bl	8007718 <NFC_IO_WriteMultiple>
 800125a:	4603      	mov	r3, r0
 800125c:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 800125e:	8a7b      	ldrh	r3, [r7, #18]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <M24SR_FWTExtension+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 8001264:	2311      	movs	r3, #17
 8001266:	e020      	b.n	80012aa <M24SR_FWTExtension+0xd4>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001268:	88fb      	ldrh	r3, [r7, #6]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 fd26 	bl	8001cbc <M24SR_IsAnswerReady>
 8001270:	4603      	mov	r3, r0
 8001272:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 8001274:	8a7b      	ldrh	r3, [r7, #18]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <M24SR_FWTExtension+0xa8>
  {
    return status;
 800127a:	8a7b      	ldrh	r3, [r7, #18]
 800127c:	e015      	b.n	80012aa <M24SR_FWTExtension+0xd4>
  } 
  /* read the response */ 
  if ( NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_STATUSRESPONSE_NBBYTE) != NFC_IO_STATUS_SUCCESS)
 800127e:	88fb      	ldrh	r3, [r7, #6]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f107 010c 	add.w	r1, r7, #12
 8001286:	2205      	movs	r2, #5
 8001288:	4618      	mov	r0, r3
 800128a:	f006 fa1b 	bl	80076c4 <NFC_IO_ReadMultiple>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d001      	beq.n	8001298 <M24SR_FWTExtension+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 8001294:	2311      	movs	r3, #17
 8001296:	e008      	b.n	80012aa <M24SR_FWTExtension+0xd4>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer, M24SR_STATUSRESPONSE_NBBYTE); 
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	2105      	movs	r1, #5
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff fe52 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 80012a4:	4603      	mov	r3, r0
 80012a6:	827b      	strh	r3, [r7, #18]
  return status;
 80012a8:	8a7b      	ldrh	r3, [r7, #18]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <M24SR_Init>:
  * @param  DeviceAddr: I2C address of the device
  * @param  GpoMode: M24SR_GPO_POLLING / M24SR_GPO_SYNCHRO / M24SR_GPO_INTERRUPT 
  * @retval None 
  */
void M24SR_Init(uint16_t DeviceAddr, uint8_t GpoMode)
{    
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	80fb      	strh	r3, [r7, #6]
 80012c0:	4613      	mov	r3, r2
 80012c2:	717b      	strb	r3, [r7, #5]
  uGpoMode = GpoMode;  /* Global variable initialization */
 80012c4:	4a1f      	ldr	r2, [pc, #124]	; (8001344 <M24SR_Init+0x90>)
 80012c6:	797b      	ldrb	r3, [r7, #5]
 80012c8:	7013      	strb	r3, [r2, #0]

  if(uGpoMode == M24SR_GPO_INTERRUPT)
 80012ca:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <M24SR_Init+0x90>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d103      	bne.n	80012da <M24SR_Init+0x26>
  {  
     NFC_IO_Init(0x1);
 80012d2:	2001      	movs	r0, #1
 80012d4:	f006 f9a2 	bl	800761c <NFC_IO_Init>
 80012d8:	e002      	b.n	80012e0 <M24SR_Init+0x2c>
  }
  else
  {
     NFC_IO_Init(0x0);
 80012da:	2000      	movs	r0, #0
 80012dc:	f006 f99e 	bl	800761c <NFC_IO_Init>
  } 

  /* build the command */
  Command.Header.CLA = 0x00;
 80012e0:	4b19      	ldr	r3, [pc, #100]	; (8001348 <M24SR_Init+0x94>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = 0x00;
 80012e6:	4b18      	ldr	r3, [pc, #96]	; (8001348 <M24SR_Init+0x94>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = 0x00 ;
 80012ec:	4b16      	ldr	r3, [pc, #88]	; (8001348 <M24SR_Init+0x94>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = 0x00 ;
 80012f2:	4b15      	ldr	r3, [pc, #84]	; (8001348 <M24SR_Init+0x94>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = 0x00 ;
 80012f8:	4b13      	ldr	r3, [pc, #76]	; (8001348 <M24SR_Init+0x94>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	711a      	strb	r2, [r3, #4]
  /* copy the number of byte to read */
  Command.Body.LE = 0x00 ;
 80012fe:	4b12      	ldr	r3, [pc, #72]	; (8001348 <M24SR_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	731a      	strb	r2, [r3, #12]
  Command.Body.pData = DataBuffer; 
 8001304:	4b10      	ldr	r3, [pc, #64]	; (8001348 <M24SR_Init+0x94>)
 8001306:	4a11      	ldr	r2, [pc, #68]	; (800134c <M24SR_Init+0x98>)
 8001308:	609a      	str	r2, [r3, #8]
  
  if((uGpoMode == M24SR_GPO_SYNCHRO) || (uGpoMode == M24SR_GPO_INTERRUPT))
 800130a:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <M24SR_Init+0x90>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d003      	beq.n	800131a <M24SR_Init+0x66>
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <M24SR_Init+0x90>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b02      	cmp	r3, #2
 8001318:	d110      	bne.n	800133c <M24SR_Init+0x88>
  {
    if( M24SR_KillSession(DeviceAddr) == M24SR_ACTION_COMPLETED)
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	4618      	mov	r0, r3
 800131e:	f000 f84e 	bl	80013be <M24SR_KillSession>
 8001322:	4603      	mov	r3, r0
 8001324:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001328:	d108      	bne.n	800133c <M24SR_Init+0x88>
    {
      M24SR_ManageI2CGPO(DeviceAddr, I2C_ANSWER_READY);
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	2103      	movs	r1, #3
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fc64 	bl	8001bfc <M24SR_ManageI2CGPO>
      M24SR_Deselect (DeviceAddr);
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 f866 	bl	8001408 <M24SR_Deselect>
    } 
  }
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000c2c 	.word	0x20000c2c
 8001348:	20000b1c 	.word	0x20000b1c
 800134c:	20000b2c 	.word	0x20000b2c

08001350 <M24SR_GPO_Callback>:
/**
  * @brief  This function initialize the M24SR device
  * @retval None 
  */
void M24SR_GPO_Callback( void )
{    
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  if( uSynchroMode == M24SR_INTERRUPT_GPO)
 8001354:	4b05      	ldr	r3, [pc, #20]	; (800136c <M24SR_GPO_Callback+0x1c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b04      	cmp	r3, #4
 800135a:	d102      	bne.n	8001362 <M24SR_GPO_Callback+0x12>
  {
    GPO_Low = 1;
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <M24SR_GPO_Callback+0x20>)
 800135e:	2201      	movs	r2, #1
 8001360:	701a      	strb	r2, [r3, #0]
  }
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	20000000 	.word	0x20000000
 8001370:	20000c2d 	.word	0x20000c2d

08001374 <M24SR_GetSession>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful.
  * @retval Status (SW1&SW2) : if operation does not complete.
  */
uint16_t M24SR_GetSession (uint16_t DeviceAddr)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	80fb      	strh	r3, [r7, #6]
  uint8_t Buffer = M24SR_OPENSESSION;
 800137e:	2326      	movs	r3, #38	; 0x26
 8001380:	73fb      	strb	r3, [r7, #15]
  
  if (NFC_IO_WriteMultiple(DeviceAddr, &Buffer, 0x01 ) != NFC_IO_STATUS_SUCCESS)
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	b2db      	uxtb	r3, r3
 8001386:	f107 010f 	add.w	r1, r7, #15
 800138a:	2201      	movs	r2, #1
 800138c:	4618      	mov	r0, r3
 800138e:	f006 f9c3 	bl	8007718 <NFC_IO_WriteMultiple>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <M24SR_GetSession+0x28>
  {
    return M24SR_ERROR_TIMEOUT;
 8001398:	2311      	movs	r3, #17
 800139a:	e00c      	b.n	80013b6 <M24SR_GetSession+0x42>
  }  
  /* Insure no access will be done just after open session */  
  /* The only way here is to poll I2C to know when M24SR is ready */
  /* GPO can not be use with GetSession command */
  if (NFC_IO_IsDeviceReady(DeviceAddr, NFC_IO_TRIALS) != NFC_IO_STATUS_SUCCESS)
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	2101      	movs	r1, #1
 80013a2:	4618      	mov	r0, r3
 80013a4:	f006 f9e2 	bl	800776c <NFC_IO_IsDeviceReady>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <M24SR_GetSession+0x3e>
  {
    return M24SR_ERROR_TIMEOUT;
 80013ae:	2311      	movs	r3, #17
 80013b0:	e001      	b.n	80013b6 <M24SR_GetSession+0x42>
  } 
  
  return M24SR_ACTION_COMPLETED;
 80013b2:	f44f 4310 	mov.w	r3, #36864	; 0x9000
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <M24SR_KillSession>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_KillSession (uint16_t DeviceAddr)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b084      	sub	sp, #16
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	4603      	mov	r3, r0
 80013c6:	80fb      	strh	r3, [r7, #6]
  uint8_t pBuffer[] = {M24SR_KILLSESSION};
 80013c8:	2352      	movs	r3, #82	; 0x52
 80013ca:	733b      	strb	r3, [r7, #12]
  
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, 0x01) != NFC_IO_STATUS_SUCCESS)
 80013cc:	88fb      	ldrh	r3, [r7, #6]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f107 010c 	add.w	r1, r7, #12
 80013d4:	2201      	movs	r2, #1
 80013d6:	4618      	mov	r0, r3
 80013d8:	f006 f99e 	bl	8007718 <NFC_IO_WriteMultiple>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <M24SR_KillSession+0x28>
  {
    return M24SR_ERROR_TIMEOUT;
 80013e2:	2311      	movs	r3, #17
 80013e4:	e00c      	b.n	8001400 <M24SR_KillSession+0x42>
  }   
  /* Insure no access will be done just after open session */  
  /* The only way here is to poll I2C to know when M24SR is ready */
  /* GPO can not be use with KillSession command */ 
  if (NFC_IO_IsDeviceReady(DeviceAddr, NFC_IO_TRIALS) != NFC_IO_STATUS_SUCCESS)
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2101      	movs	r1, #1
 80013ec:	4618      	mov	r0, r3
 80013ee:	f006 f9bd 	bl	800776c <NFC_IO_IsDeviceReady>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <M24SR_KillSession+0x3e>
  {
    return M24SR_ERROR_TIMEOUT;
 80013f8:	2311      	movs	r3, #17
 80013fa:	e001      	b.n	8001400 <M24SR_KillSession+0x42>
  }    
  return M24SR_ACTION_COMPLETED;
 80013fc:	f44f 4310 	mov.w	r3, #36864	; 0x9000
}
 8001400:	4618      	mov	r0, r3
 8001402:	3710      	adds	r7, #16
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <M24SR_Deselect>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured. 
  */
uint16_t M24SR_Deselect (uint16_t DeviceAddr)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]
  uint8_t   pBuffer[] = {0xC2,0xE0,0xB4} ;
 8001412:	4a1a      	ldr	r2, [pc, #104]	; (800147c <M24SR_Deselect+0x74>)
 8001414:	f107 0308 	add.w	r3, r7, #8
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	4611      	mov	r1, r2
 800141c:	8019      	strh	r1, [r3, #0]
 800141e:	3302      	adds	r3, #2
 8001420:	0c12      	lsrs	r2, r2, #16
 8001422:	701a      	strb	r2, [r3, #0]
  uint16_t  status ; 
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, M24SR_DESELECTREQUEST_NBBYTE) != NFC_IO_STATUS_SUCCESS)
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	b2db      	uxtb	r3, r3
 8001428:	f107 0108 	add.w	r1, r7, #8
 800142c:	2203      	movs	r2, #3
 800142e:	4618      	mov	r0, r3
 8001430:	f006 f972 	bl	8007718 <NFC_IO_WriteMultiple>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <M24SR_Deselect+0x36>
  {
    return M24SR_ERROR_TIMEOUT;
 800143a:	2311      	movs	r3, #17
 800143c:	e019      	b.n	8001472 <M24SR_Deselect+0x6a>
  }    
  status = M24SR_IsAnswerReady (DeviceAddr);
 800143e:	88fb      	ldrh	r3, [r7, #6]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 fc3b 	bl	8001cbc <M24SR_IsAnswerReady>
 8001446:	4603      	mov	r3, r0
 8001448:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_STATUS_SUCCESS)
 800144a:	89fb      	ldrh	r3, [r7, #14]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <M24SR_Deselect+0x4c>
  {
    return status;
 8001450:	89fb      	ldrh	r3, [r7, #14]
 8001452:	e00e      	b.n	8001472 <M24SR_Deselect+0x6a>
  }  
  /* flush the M24SR buffer */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_DESELECTREQUEST_NBBYTE) != NFC_IO_STATUS_SUCCESS)
 8001454:	88fb      	ldrh	r3, [r7, #6]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	f107 0108 	add.w	r1, r7, #8
 800145c:	2203      	movs	r2, #3
 800145e:	4618      	mov	r0, r3
 8001460:	f006 f930 	bl	80076c4 <NFC_IO_ReadMultiple>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <M24SR_Deselect+0x66>
  {
    return M24SR_ERROR_TIMEOUT;
 800146a:	2311      	movs	r3, #17
 800146c:	e001      	b.n	8001472 <M24SR_Deselect+0x6a>
  }  
  
  return M24SR_ACTION_COMPLETED;
 800146e:	f44f 4310 	mov.w	r3, #36864	; 0x9000
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	08015a08 	.word	0x08015a08

08001480 <M24SR_SelectApplication>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_SelectApplication (uint16_t DeviceAddr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b08c      	sub	sp, #48	; 0x30
 8001484:	af04      	add	r7, sp, #16
 8001486:	4603      	mov	r3, r0
 8001488:	80fb      	strh	r3, [r7, #6]
  uint8_t   *pBuffer = uM24SRbuffer ,
 800148a:	4b38      	ldr	r3, [pc, #224]	; (800156c <M24SR_SelectApplication+0xec>)
 800148c:	61fb      	str	r3, [r7, #28]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 800148e:	2305      	movs	r3, #5
 8001490:	76fb      	strb	r3, [r7, #27]
  uint8_t    uLc = 0x07,
 8001492:	2307      	movs	r3, #7
 8001494:	76bb      	strb	r3, [r7, #26]
  pData[] = {0xD2,0x76,0x00,0x00,0x85,0x01,0x01},
 8001496:	4a36      	ldr	r2, [pc, #216]	; (8001570 <M24SR_SelectApplication+0xf0>)
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80014a0:	6018      	str	r0, [r3, #0]
 80014a2:	3304      	adds	r3, #4
 80014a4:	8019      	strh	r1, [r3, #0]
 80014a6:	3302      	adds	r3, #2
 80014a8:	0c0a      	lsrs	r2, r1, #16
 80014aa:	701a      	strb	r2, [r3, #0]
  uLe = 0x00;
 80014ac:	2300      	movs	r3, #0
 80014ae:	767b      	strb	r3, [r7, #25]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x0400,
 80014b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014b4:	82fb      	strh	r3, [r7, #22]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 80014b6:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 80014bc:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014be:	22a4      	movs	r2, #164	; 0xa4
 80014c0:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 80014c2:	8afb      	ldrh	r3, [r7, #22]
 80014c4:	0a1b      	lsrs	r3, r3, #8
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	4b2a      	ldr	r3, [pc, #168]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014cc:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 80014ce:	8afb      	ldrh	r3, [r7, #22]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014d4:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 80014d6:	4a27      	ldr	r2, [pc, #156]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014d8:	7ebb      	ldrb	r3, [r7, #26]
 80014da:	7113      	strb	r3, [r2, #4]
  /* copy the data */
  memcpy(Command.Body.pData, pData, uLc);
 80014dc:	4b25      	ldr	r3, [pc, #148]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	7eba      	ldrb	r2, [r7, #26]
 80014e2:	f107 010c 	add.w	r1, r7, #12
 80014e6:	4618      	mov	r0, r3
 80014e8:	f011 fb3a 	bl	8012b60 <memcpy>
  /* copy the number of byte to read */
  Command.Body.LE = uLe ;
 80014ec:	4a21      	ldr	r2, [pc, #132]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014ee:	7e7b      	ldrb	r3, [r7, #25]
 80014f0:	7313      	strb	r3, [r2, #12]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTAPPLICATION,  Command, &NbByte , pBuffer);
 80014f2:	4b20      	ldr	r3, [pc, #128]	; (8001574 <M24SR_SelectApplication+0xf4>)
 80014f4:	69fa      	ldr	r2, [r7, #28]
 80014f6:	9202      	str	r2, [sp, #8]
 80014f8:	f107 020a 	add.w	r2, r7, #10
 80014fc:	9201      	str	r2, [sp, #4]
 80014fe:	68da      	ldr	r2, [r3, #12]
 8001500:	9200      	str	r2, [sp, #0]
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001508:	f7ff fd62 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	b2db      	uxtb	r3, r3
 8001510:	897a      	ldrh	r2, [r7, #10]
 8001512:	69f9      	ldr	r1, [r7, #28]
 8001514:	4618      	mov	r0, r3
 8001516:	f006 f8ff 	bl	8007718 <NFC_IO_WriteMultiple>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <M24SR_SelectApplication+0xa4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001520:	2311      	movs	r3, #17
 8001522:	e01f      	b.n	8001564 <M24SR_SelectApplication+0xe4>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001524:	88fb      	ldrh	r3, [r7, #6]
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fbc8 	bl	8001cbc <M24SR_IsAnswerReady>
 800152c:	4603      	mov	r3, r0
 800152e:	82bb      	strh	r3, [r7, #20]
  if (status != M24SR_STATUS_SUCCESS)
 8001530:	8abb      	ldrh	r3, [r7, #20]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <M24SR_SelectApplication+0xba>
  {
    return status;
 8001536:	8abb      	ldrh	r3, [r7, #20]
 8001538:	e014      	b.n	8001564 <M24SR_SelectApplication+0xe4>
  }  
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 800153a:	88fb      	ldrh	r3, [r7, #6]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	7efa      	ldrb	r2, [r7, #27]
 8001540:	b292      	uxth	r2, r2
 8001542:	69f9      	ldr	r1, [r7, #28]
 8001544:	4618      	mov	r0, r3
 8001546:	f006 f8bd 	bl	80076c4 <NFC_IO_ReadMultiple>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <M24SR_SelectApplication+0xd4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001550:	2311      	movs	r3, #17
 8001552:	e007      	b.n	8001564 <M24SR_SelectApplication+0xe4>
  }   
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 8001554:	7efb      	ldrb	r3, [r7, #27]
 8001556:	4619      	mov	r1, r3
 8001558:	69f8      	ldr	r0, [r7, #28]
 800155a:	f7ff fcf5 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 800155e:	4603      	mov	r3, r0
 8001560:	82bb      	strh	r3, [r7, #20]
  return status;
 8001562:	8abb      	ldrh	r3, [r7, #20]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3720      	adds	r7, #32
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	200017e8 	.word	0x200017e8
 8001570:	08015a0c 	.word	0x08015a0c
 8001574:	20000b1c 	.word	0x20000b1c

08001578 <M24SR_SelectCCfile>:
  * @retval M24SR_ACTION_COMPLETED : the function is succesful. 
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  * @retval Status (SW1&SW2) : if operation does not complete for another reason.
  */
uint16_t M24SR_SelectCCfile (uint16_t DeviceAddr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af04      	add	r7, sp, #16
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
  uint8_t   *pBuffer = uM24SRbuffer ,
 8001582:	4b34      	ldr	r3, [pc, #208]	; (8001654 <M24SR_SelectCCfile+0xdc>)
 8001584:	617b      	str	r3, [r7, #20]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 8001586:	2305      	movs	r3, #5
 8001588:	74fb      	strb	r3, [r7, #19]
  uint8_t    uLc = 0x02;
 800158a:	2302      	movs	r3, #2
 800158c:	74bb      	strb	r3, [r7, #18]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x000C,
 800158e:	230c      	movs	r3, #12
 8001590:	823b      	strh	r3, [r7, #16]
  uNbFileId =CC_FILE_ID,
 8001592:	f24e 1303 	movw	r3, #57603	; 0xe103
 8001596:	81fb      	strh	r3, [r7, #14]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001598:	4b2f      	ldr	r3, [pc, #188]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 80015a0:	22a4      	movs	r2, #164	; 0xa4
 80015a2:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 80015a4:	8a3b      	ldrh	r3, [r7, #16]
 80015a6:	0a1b      	lsrs	r3, r3, #8
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 80015ae:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 80015b0:	8a3b      	ldrh	r3, [r7, #16]
 80015b2:	b2da      	uxtb	r2, r3
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 80015b6:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 80015ba:	7cbb      	ldrb	r3, [r7, #18]
 80015bc:	7113      	strb	r3, [r2, #4]
  /* copy the File Id */
  Command.Body.pData[0] = GETMSB  (uNbFileId ) ;
 80015be:	89fb      	ldrh	r3, [r7, #14]
 80015c0:	0a1b      	lsrs	r3, r3, #8
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b24      	ldr	r3, [pc, #144]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	701a      	strb	r2, [r3, #0]
  Command.Body.pData[1] = GETLSB  (uNbFileId ) ;
 80015cc:	4b22      	ldr	r3, [pc, #136]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	3301      	adds	r3, #1
 80015d2:	89fa      	ldrh	r2, [r7, #14]
 80015d4:	b2d2      	uxtb	r2, r2
 80015d6:	701a      	strb	r2, [r3, #0]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTCCFILE,  Command, &NbByte , pBuffer);
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <M24SR_SelectCCfile+0xe0>)
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	9202      	str	r2, [sp, #8]
 80015de:	f107 020a 	add.w	r2, r7, #10
 80015e2:	9201      	str	r2, [sp, #4]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	9200      	str	r2, [sp, #0]
 80015e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015ea:	f240 107f 	movw	r0, #383	; 0x17f
 80015ee:	f7ff fcef 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 80015f2:	88fb      	ldrh	r3, [r7, #6]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	897a      	ldrh	r2, [r7, #10]
 80015f8:	6979      	ldr	r1, [r7, #20]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f006 f88c 	bl	8007718 <NFC_IO_WriteMultiple>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <M24SR_SelectCCfile+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 8001606:	2311      	movs	r3, #17
 8001608:	e01f      	b.n	800164a <M24SR_SelectCCfile+0xd2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4618      	mov	r0, r3
 800160e:	f000 fb55 	bl	8001cbc <M24SR_IsAnswerReady>
 8001612:	4603      	mov	r3, r0
 8001614:	81bb      	strh	r3, [r7, #12]
  if (status != M24SR_STATUS_SUCCESS)
 8001616:	89bb      	ldrh	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <M24SR_SelectCCfile+0xa8>
  {
    return status;
 800161c:	89bb      	ldrh	r3, [r7, #12]
 800161e:	e014      	b.n	800164a <M24SR_SelectCCfile+0xd2>
  } 
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 8001620:	88fb      	ldrh	r3, [r7, #6]
 8001622:	b2db      	uxtb	r3, r3
 8001624:	7cfa      	ldrb	r2, [r7, #19]
 8001626:	b292      	uxth	r2, r2
 8001628:	6979      	ldr	r1, [r7, #20]
 800162a:	4618      	mov	r0, r3
 800162c:	f006 f84a 	bl	80076c4 <NFC_IO_ReadMultiple>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <M24SR_SelectCCfile+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 8001636:	2311      	movs	r3, #17
 8001638:	e007      	b.n	800164a <M24SR_SelectCCfile+0xd2>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 800163a:	7cfb      	ldrb	r3, [r7, #19]
 800163c:	4619      	mov	r1, r3
 800163e:	6978      	ldr	r0, [r7, #20]
 8001640:	f7ff fc82 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001644:	4603      	mov	r3, r0
 8001646:	81bb      	strh	r3, [r7, #12]
  return status; 
 8001648:	89bb      	ldrh	r3, [r7, #12]
}
 800164a:	4618      	mov	r0, r3
 800164c:	3718      	adds	r7, #24
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200017e8 	.word	0x200017e8
 8001658:	20000b1c 	.word	0x20000b1c

0800165c <M24SR_SelectSystemfile>:
  * @param  DeviceAddr: I2C address of the device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_SelectSystemfile (uint16_t DeviceAddr)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b08a      	sub	sp, #40	; 0x28
 8001660:	af04      	add	r7, sp, #16
 8001662:	4603      	mov	r3, r0
 8001664:	80fb      	strh	r3, [r7, #6]
  uint8_t   *pBuffer = uM24SRbuffer ,
 8001666:	4b34      	ldr	r3, [pc, #208]	; (8001738 <M24SR_SelectSystemfile+0xdc>)
 8001668:	617b      	str	r3, [r7, #20]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 800166a:	2305      	movs	r3, #5
 800166c:	74fb      	strb	r3, [r7, #19]
  uint8_t    uLc = 0x02;
 800166e:	2302      	movs	r3, #2
 8001670:	74bb      	strb	r3, [r7, #18]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x000C,
 8001672:	230c      	movs	r3, #12
 8001674:	823b      	strh	r3, [r7, #16]
  uNbFileId =SYSTEM_FILE_ID,
 8001676:	f24e 1301 	movw	r3, #57601	; 0xe101
 800167a:	81fb      	strh	r3, [r7, #14]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 800167c:	4b2f      	ldr	r3, [pc, #188]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 800167e:	2200      	movs	r2, #0
 8001680:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 8001682:	4b2e      	ldr	r3, [pc, #184]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 8001684:	22a4      	movs	r2, #164	; 0xa4
 8001686:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 8001688:	8a3b      	ldrh	r3, [r7, #16]
 800168a:	0a1b      	lsrs	r3, r3, #8
 800168c:	b29b      	uxth	r3, r3
 800168e:	b2da      	uxtb	r2, r3
 8001690:	4b2a      	ldr	r3, [pc, #168]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 8001692:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 8001694:	8a3b      	ldrh	r3, [r7, #16]
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b28      	ldr	r3, [pc, #160]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 800169a:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 800169c:	4a27      	ldr	r2, [pc, #156]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 800169e:	7cbb      	ldrb	r3, [r7, #18]
 80016a0:	7113      	strb	r3, [r2, #4]
  /* copy the File Id */
  Command.Body.pData[0] = GETMSB  (uNbFileId ) ;
 80016a2:	89fb      	ldrh	r3, [r7, #14]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b24      	ldr	r3, [pc, #144]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	701a      	strb	r2, [r3, #0]
  Command.Body.pData[1] = GETLSB  (uNbFileId ) ;
 80016b0:	4b22      	ldr	r3, [pc, #136]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	3301      	adds	r3, #1
 80016b6:	89fa      	ldrh	r2, [r7, #14]
 80016b8:	b2d2      	uxtb	r2, r2
 80016ba:	701a      	strb	r2, [r3, #0]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTCCFILE,  Command, &NbByte , pBuffer);
 80016bc:	4b1f      	ldr	r3, [pc, #124]	; (800173c <M24SR_SelectSystemfile+0xe0>)
 80016be:	697a      	ldr	r2, [r7, #20]
 80016c0:	9202      	str	r2, [sp, #8]
 80016c2:	f107 020a 	add.w	r2, r7, #10
 80016c6:	9201      	str	r2, [sp, #4]
 80016c8:	68da      	ldr	r2, [r3, #12]
 80016ca:	9200      	str	r2, [sp, #0]
 80016cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016ce:	f240 107f 	movw	r0, #383	; 0x17f
 80016d2:	f7ff fc7d 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 80016d6:	88fb      	ldrh	r3, [r7, #6]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	897a      	ldrh	r2, [r7, #10]
 80016dc:	6979      	ldr	r1, [r7, #20]
 80016de:	4618      	mov	r0, r3
 80016e0:	f006 f81a 	bl	8007718 <NFC_IO_WriteMultiple>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <M24SR_SelectSystemfile+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 80016ea:	2311      	movs	r3, #17
 80016ec:	e01f      	b.n	800172e <M24SR_SelectSystemfile+0xd2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 fae3 	bl	8001cbc <M24SR_IsAnswerReady>
 80016f6:	4603      	mov	r3, r0
 80016f8:	81bb      	strh	r3, [r7, #12]
  if (status != M24SR_STATUS_SUCCESS)
 80016fa:	89bb      	ldrh	r3, [r7, #12]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <M24SR_SelectSystemfile+0xa8>
  {
    return status;
 8001700:	89bb      	ldrh	r3, [r7, #12]
 8001702:	e014      	b.n	800172e <M24SR_SelectSystemfile+0xd2>
  } 
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	b2db      	uxtb	r3, r3
 8001708:	7cfa      	ldrb	r2, [r7, #19]
 800170a:	b292      	uxth	r2, r2
 800170c:	6979      	ldr	r1, [r7, #20]
 800170e:	4618      	mov	r0, r3
 8001710:	f005 ffd8 	bl	80076c4 <NFC_IO_ReadMultiple>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <M24SR_SelectSystemfile+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 800171a:	2311      	movs	r3, #17
 800171c:	e007      	b.n	800172e <M24SR_SelectSystemfile+0xd2>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 800171e:	7cfb      	ldrb	r3, [r7, #19]
 8001720:	4619      	mov	r1, r3
 8001722:	6978      	ldr	r0, [r7, #20]
 8001724:	f7ff fc10 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001728:	4603      	mov	r3, r0
 800172a:	81bb      	strh	r3, [r7, #12]
  return status;
 800172c:	89bb      	ldrh	r3, [r7, #12]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200017e8 	.word	0x200017e8
 800173c:	20000b1c 	.word	0x20000b1c

08001740 <M24SR_SelectNDEFfile>:
  * @param  NDEFfileId: NDEF identification to select NDEF in M24SR
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_SelectNDEFfile (uint16_t DeviceAddr, uint16_t NDEFfileId)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	; 0x28
 8001744:	af04      	add	r7, sp, #16
 8001746:	4603      	mov	r3, r0
 8001748:	460a      	mov	r2, r1
 800174a:	80fb      	strh	r3, [r7, #6]
 800174c:	4613      	mov	r3, r2
 800174e:	80bb      	strh	r3, [r7, #4]
  uint8_t   *pBuffer = uM24SRbuffer ,
 8001750:	4b32      	ldr	r3, [pc, #200]	; (800181c <M24SR_SelectNDEFfile+0xdc>)
 8001752:	617b      	str	r3, [r7, #20]
  NbByteToRead = M24SR_STATUSRESPONSE_NBBYTE;
 8001754:	2305      	movs	r3, #5
 8001756:	74fb      	strb	r3, [r7, #19]
  uint8_t    uLc = 0x02;
 8001758:	2302      	movs	r3, #2
 800175a:	74bb      	strb	r3, [r7, #18]
  uint16_t  status ; 
  uint16_t  uP1P2 =0x000C,
 800175c:	230c      	movs	r3, #12
 800175e:	823b      	strh	r3, [r7, #16]
  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001760:	4b2f      	ldr	r3, [pc, #188]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_SELECT_FILE;
 8001766:	4b2e      	ldr	r3, [pc, #184]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 8001768:	22a4      	movs	r2, #164	; 0xa4
 800176a:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (uP1P2 ) ;
 800176c:	8a3b      	ldrh	r3, [r7, #16]
 800176e:	0a1b      	lsrs	r3, r3, #8
 8001770:	b29b      	uxth	r3, r3
 8001772:	b2da      	uxtb	r2, r3
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 8001776:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uP1P2 ) ;
 8001778:	8a3b      	ldrh	r3, [r7, #16]
 800177a:	b2da      	uxtb	r2, r3
 800177c:	4b28      	ldr	r3, [pc, #160]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 800177e:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = uLc ;
 8001780:	4a27      	ldr	r2, [pc, #156]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 8001782:	7cbb      	ldrb	r3, [r7, #18]
 8001784:	7113      	strb	r3, [r2, #4]
  /* copy the offset */
  Command.Body.pData[0] = GETMSB  (NDEFfileId ) ;
 8001786:	88bb      	ldrh	r3, [r7, #4]
 8001788:	0a1b      	lsrs	r3, r3, #8
 800178a:	b29a      	uxth	r2, r3
 800178c:	4b24      	ldr	r3, [pc, #144]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	701a      	strb	r2, [r3, #0]
  Command.Body.pData[1] = GETLSB  (NDEFfileId ) ;
 8001794:	4b22      	ldr	r3, [pc, #136]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	3301      	adds	r3, #1
 800179a:	88ba      	ldrh	r2, [r7, #4]
 800179c:	b2d2      	uxtb	r2, r2
 800179e:	701a      	strb	r2, [r3, #0]
  /* build the I�C command */
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_SELECTNDEFFILE,  Command, &NbByte , pBuffer);
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <M24SR_SelectNDEFfile+0xe0>)
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	9202      	str	r2, [sp, #8]
 80017a6:	f107 020c 	add.w	r2, r7, #12
 80017aa:	9201      	str	r2, [sp, #4]
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	9200      	str	r2, [sp, #0]
 80017b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017b2:	f240 107f 	movw	r0, #383	; 0x17f
 80017b6:	f7ff fc0b 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  /* send the request */ 
  if (NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte) != NFC_IO_STATUS_SUCCESS)
 80017ba:	88fb      	ldrh	r3, [r7, #6]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	89ba      	ldrh	r2, [r7, #12]
 80017c0:	6979      	ldr	r1, [r7, #20]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f005 ffa8 	bl	8007718 <NFC_IO_WriteMultiple>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <M24SR_SelectNDEFfile+0x92>
  {
    return M24SR_ERROR_TIMEOUT;
 80017ce:	2311      	movs	r3, #17
 80017d0:	e01f      	b.n	8001812 <M24SR_SelectNDEFfile+0xd2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 80017d2:	88fb      	ldrh	r3, [r7, #6]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f000 fa71 	bl	8001cbc <M24SR_IsAnswerReady>
 80017da:	4603      	mov	r3, r0
 80017dc:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_STATUS_SUCCESS)
 80017de:	89fb      	ldrh	r3, [r7, #14]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <M24SR_SelectNDEFfile+0xa8>
  {
    return status;
 80017e4:	89fb      	ldrh	r3, [r7, #14]
 80017e6:	e014      	b.n	8001812 <M24SR_SelectNDEFfile+0xd2>
  } 
  /* read the response */ 
  if (NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead) != NFC_IO_STATUS_SUCCESS)
 80017e8:	88fb      	ldrh	r3, [r7, #6]
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	7cfa      	ldrb	r2, [r7, #19]
 80017ee:	b292      	uxth	r2, r2
 80017f0:	6979      	ldr	r1, [r7, #20]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 ff66 	bl	80076c4 <NFC_IO_ReadMultiple>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <M24SR_SelectNDEFfile+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 80017fe:	2311      	movs	r3, #17
 8001800:	e007      	b.n	8001812 <M24SR_SelectNDEFfile+0xd2>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead); 
 8001802:	7cfb      	ldrb	r3, [r7, #19]
 8001804:	4619      	mov	r1, r3
 8001806:	6978      	ldr	r0, [r7, #20]
 8001808:	f7ff fb9e 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 800180c:	4603      	mov	r3, r0
 800180e:	81fb      	strh	r3, [r7, #14]
  return status;
 8001810:	89fb      	ldrh	r3, [r7, #14]
}
 8001812:	4618      	mov	r0, r3
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200017e8 	.word	0x200017e8
 8001820:	20000b1c 	.word	0x20000b1c

08001824 <M24SR_ReadBinary>:
  * @param  pBufferRead : pointer of the buffer read from the M24SR device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_ReadBinary (uint16_t DeviceAddr, uint16_t Offset ,uint8_t NbByteToRead , uint8_t *pBufferRead)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b08a      	sub	sp, #40	; 0x28
 8001828:	af04      	add	r7, sp, #16
 800182a:	607b      	str	r3, [r7, #4]
 800182c:	4603      	mov	r3, r0
 800182e:	81fb      	strh	r3, [r7, #14]
 8001830:	460b      	mov	r3, r1
 8001832:	81bb      	strh	r3, [r7, #12]
 8001834:	4613      	mov	r3, r2
 8001836:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 8001838:	4b30      	ldr	r3, [pc, #192]	; (80018fc <M24SR_ReadBinary+0xd8>)
 800183a:	617b      	str	r3, [r7, #20]
  uint16_t  status ; 
  uint16_t  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 800183c:	4b30      	ldr	r3, [pc, #192]	; (8001900 <M24SR_ReadBinary+0xdc>)
 800183e:	2200      	movs	r2, #0
 8001840:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_READ_BINARY;
 8001842:	4b2f      	ldr	r3, [pc, #188]	; (8001900 <M24SR_ReadBinary+0xdc>)
 8001844:	22b0      	movs	r2, #176	; 0xb0
 8001846:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (Offset ) ;
 8001848:	89bb      	ldrh	r3, [r7, #12]
 800184a:	0a1b      	lsrs	r3, r3, #8
 800184c:	b29b      	uxth	r3, r3
 800184e:	b2da      	uxtb	r2, r3
 8001850:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <M24SR_ReadBinary+0xdc>)
 8001852:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (Offset ) ;
 8001854:	89bb      	ldrh	r3, [r7, #12]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <M24SR_ReadBinary+0xdc>)
 800185a:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte to read */
  Command.Body.LE = NbByteToRead ;
 800185c:	4a28      	ldr	r2, [pc, #160]	; (8001900 <M24SR_ReadBinary+0xdc>)
 800185e:	7afb      	ldrb	r3, [r7, #11]
 8001860:	7313      	strb	r3, [r2, #12]
  
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_READBINARY,  Command, &NbByte , pBuffer);
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <M24SR_ReadBinary+0xdc>)
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	9202      	str	r2, [sp, #8]
 8001868:	f107 0210 	add.w	r2, r7, #16
 800186c:	9201      	str	r2, [sp, #4]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	9200      	str	r2, [sp, #0]
 8001872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001874:	f240 109f 	movw	r0, #415	; 0x19f
 8001878:	f7ff fbaa 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 800187c:	89fb      	ldrh	r3, [r7, #14]
 800187e:	b2db      	uxtb	r3, r3
 8001880:	8a3a      	ldrh	r2, [r7, #16]
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	4618      	mov	r0, r3
 8001886:	f005 ff47 	bl	8007718 <NFC_IO_WriteMultiple>
 800188a:	4603      	mov	r3, r0
 800188c:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 800188e:	8a7b      	ldrh	r3, [r7, #18]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <M24SR_ReadBinary+0x74>
  {
    return M24SR_ERROR_TIMEOUT;
 8001894:	2311      	movs	r3, #17
 8001896:	e02c      	b.n	80018f2 <M24SR_ReadBinary+0xce>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001898:	89fb      	ldrh	r3, [r7, #14]
 800189a:	4618      	mov	r0, r3
 800189c:	f000 fa0e 	bl	8001cbc <M24SR_IsAnswerReady>
 80018a0:	4603      	mov	r3, r0
 80018a2:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 80018a4:	8a7b      	ldrh	r3, [r7, #18]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <M24SR_ReadBinary+0x8a>
  {
    return status;
 80018aa:	8a7b      	ldrh	r3, [r7, #18]
 80018ac:	e021      	b.n	80018f2 <M24SR_ReadBinary+0xce>
  } 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead + M24SR_STATUSRESPONSE_NBBYTE);
 80018ae:	89fb      	ldrh	r3, [r7, #14]
 80018b0:	b2d8      	uxtb	r0, r3
 80018b2:	7afb      	ldrb	r3, [r7, #11]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	3305      	adds	r3, #5
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	6979      	ldr	r1, [r7, #20]
 80018be:	f005 ff01 	bl	80076c4 <NFC_IO_ReadMultiple>
 80018c2:	4603      	mov	r3, r0
 80018c4:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 80018c6:	8a7b      	ldrh	r3, [r7, #18]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <M24SR_ReadBinary+0xac>
  {
    return M24SR_ERROR_TIMEOUT;
 80018cc:	2311      	movs	r3, #17
 80018ce:	e010      	b.n	80018f2 <M24SR_ReadBinary+0xce>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead+ M24SR_STATUSRESPONSE_NBBYTE); 
 80018d0:	7afb      	ldrb	r3, [r7, #11]
 80018d2:	3305      	adds	r3, #5
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	4619      	mov	r1, r3
 80018d8:	6978      	ldr	r0, [r7, #20]
 80018da:	f7ff fb35 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 80018de:	4603      	mov	r3, r0
 80018e0:	827b      	strh	r3, [r7, #18]
  /* retrieve the data without SW1 & SW2 as provided as return value of the function */
  memcpy(pBufferRead ,&pBuffer[1],NbByteToRead);
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	3301      	adds	r3, #1
 80018e6:	7afa      	ldrb	r2, [r7, #11]
 80018e8:	4619      	mov	r1, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f011 f938 	bl	8012b60 <memcpy>
  return status;
 80018f0:	8a7b      	ldrh	r3, [r7, #18]
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3718      	adds	r7, #24
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	200017e8 	.word	0x200017e8
 8001900:	20000b1c 	.word	0x20000b1c

08001904 <M24SR_STReadBinary>:
  * @param  pBufferRead : pointer of the buffer read from the M24SR device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured. 
  */
uint16_t M24SR_STReadBinary (uint16_t DeviceAddr, uint16_t Offset, uint8_t NbByteToRead, uint8_t *pBufferRead)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af04      	add	r7, sp, #16
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4603      	mov	r3, r0
 800190e:	81fb      	strh	r3, [r7, #14]
 8001910:	460b      	mov	r3, r1
 8001912:	81bb      	strh	r3, [r7, #12]
 8001914:	4613      	mov	r3, r2
 8001916:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 8001918:	4b30      	ldr	r3, [pc, #192]	; (80019dc <M24SR_STReadBinary+0xd8>)
 800191a:	617b      	str	r3, [r7, #20]
  uint16_t  status ; 
  uint16_t  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_ST;
 800191c:	4b30      	ldr	r3, [pc, #192]	; (80019e0 <M24SR_STReadBinary+0xdc>)
 800191e:	22a2      	movs	r2, #162	; 0xa2
 8001920:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_READ_BINARY;
 8001922:	4b2f      	ldr	r3, [pc, #188]	; (80019e0 <M24SR_STReadBinary+0xdc>)
 8001924:	22b0      	movs	r2, #176	; 0xb0
 8001926:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (Offset ) ;
 8001928:	89bb      	ldrh	r3, [r7, #12]
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b29b      	uxth	r3, r3
 800192e:	b2da      	uxtb	r2, r3
 8001930:	4b2b      	ldr	r3, [pc, #172]	; (80019e0 <M24SR_STReadBinary+0xdc>)
 8001932:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (Offset ) ;
 8001934:	89bb      	ldrh	r3, [r7, #12]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	4b29      	ldr	r3, [pc, #164]	; (80019e0 <M24SR_STReadBinary+0xdc>)
 800193a:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte to read */
  Command.Body.LE = NbByteToRead ;
 800193c:	4a28      	ldr	r2, [pc, #160]	; (80019e0 <M24SR_STReadBinary+0xdc>)
 800193e:	7afb      	ldrb	r3, [r7, #11]
 8001940:	7313      	strb	r3, [r2, #12]
  
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_READBINARY,  Command, &NbByte , pBuffer);
 8001942:	4b27      	ldr	r3, [pc, #156]	; (80019e0 <M24SR_STReadBinary+0xdc>)
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	9202      	str	r2, [sp, #8]
 8001948:	f107 0210 	add.w	r2, r7, #16
 800194c:	9201      	str	r2, [sp, #4]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	9200      	str	r2, [sp, #0]
 8001952:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001954:	f240 109f 	movw	r0, #415	; 0x19f
 8001958:	f7ff fb3a 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  status =  NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 800195c:	89fb      	ldrh	r3, [r7, #14]
 800195e:	b2db      	uxtb	r3, r3
 8001960:	8a3a      	ldrh	r2, [r7, #16]
 8001962:	6979      	ldr	r1, [r7, #20]
 8001964:	4618      	mov	r0, r3
 8001966:	f005 fed7 	bl	8007718 <NFC_IO_WriteMultiple>
 800196a:	4603      	mov	r3, r0
 800196c:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 800196e:	8a7b      	ldrh	r3, [r7, #18]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d001      	beq.n	8001978 <M24SR_STReadBinary+0x74>
  {
    return M24SR_ERROR_TIMEOUT;
 8001974:	2311      	movs	r3, #17
 8001976:	e02c      	b.n	80019d2 <M24SR_STReadBinary+0xce>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001978:	89fb      	ldrh	r3, [r7, #14]
 800197a:	4618      	mov	r0, r3
 800197c:	f000 f99e 	bl	8001cbc <M24SR_IsAnswerReady>
 8001980:	4603      	mov	r3, r0
 8001982:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 8001984:	8a7b      	ldrh	r3, [r7, #18]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <M24SR_STReadBinary+0x8a>
  {
    return status;
 800198a:	8a7b      	ldrh	r3, [r7, #18]
 800198c:	e021      	b.n	80019d2 <M24SR_STReadBinary+0xce>
  } 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  NbByteToRead + M24SR_STATUSRESPONSE_NBBYTE);
 800198e:	89fb      	ldrh	r3, [r7, #14]
 8001990:	b2d8      	uxtb	r0, r3
 8001992:	7afb      	ldrb	r3, [r7, #11]
 8001994:	b29b      	uxth	r3, r3
 8001996:	3305      	adds	r3, #5
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	6979      	ldr	r1, [r7, #20]
 800199e:	f005 fe91 	bl	80076c4 <NFC_IO_ReadMultiple>
 80019a2:	4603      	mov	r3, r0
 80019a4:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 80019a6:	8a7b      	ldrh	r3, [r7, #18]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <M24SR_STReadBinary+0xac>
  {
    return M24SR_ERROR_TIMEOUT;
 80019ac:	2311      	movs	r3, #17
 80019ae:	e010      	b.n	80019d2 <M24SR_STReadBinary+0xce>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer,NbByteToRead+ M24SR_STATUSRESPONSE_NBBYTE); 
 80019b0:	7afb      	ldrb	r3, [r7, #11]
 80019b2:	3305      	adds	r3, #5
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	4619      	mov	r1, r3
 80019b8:	6978      	ldr	r0, [r7, #20]
 80019ba:	f7ff fac5 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 80019be:	4603      	mov	r3, r0
 80019c0:	827b      	strh	r3, [r7, #18]
  /* retrieve the data without SW1 & SW2 as provided as return value of the function */
  memcpy(pBufferRead ,&pBuffer[1],NbByteToRead);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	7afa      	ldrb	r2, [r7, #11]
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f011 f8c8 	bl	8012b60 <memcpy>
  return status;
 80019d0:	8a7b      	ldrh	r3, [r7, #18]
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3718      	adds	r7, #24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200017e8 	.word	0x200017e8
 80019e0:	20000b1c 	.word	0x20000b1c

080019e4 <M24SR_UpdateBinary>:
  * @param  pBufferRead : pointer of the buffer read from the M24SR device
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_UpdateBinary (uint16_t DeviceAddr, uint16_t Offset ,uint8_t NbByteToWrite,uint8_t *pDataToWrite)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08c      	sub	sp, #48	; 0x30
 80019e8:	af04      	add	r7, sp, #16
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	4603      	mov	r3, r0
 80019ee:	81fb      	strh	r3, [r7, #14]
 80019f0:	460b      	mov	r3, r1
 80019f2:	81bb      	strh	r3, [r7, #12]
 80019f4:	4613      	mov	r3, r2
 80019f6:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 80019f8:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <M24SR_UpdateBinary+0xfc>)
 80019fa:	61bb      	str	r3, [r7, #24]
  uint16_t  status ; 
  uint16_t  NbByte;
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 80019fc:	4b39      	ldr	r3, [pc, #228]	; (8001ae4 <M24SR_UpdateBinary+0x100>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_UPDATE_BINARY;
 8001a02:	4b38      	ldr	r3, [pc, #224]	; (8001ae4 <M24SR_UpdateBinary+0x100>)
 8001a04:	22d6      	movs	r2, #214	; 0xd6
 8001a06:	705a      	strb	r2, [r3, #1]
  /* copy the offset */
  Command.Header.P1 = GETMSB  (Offset ) ;
 8001a08:	89bb      	ldrh	r3, [r7, #12]
 8001a0a:	0a1b      	lsrs	r3, r3, #8
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b34      	ldr	r3, [pc, #208]	; (8001ae4 <M24SR_UpdateBinary+0x100>)
 8001a12:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (Offset ) ;
 8001a14:	89bb      	ldrh	r3, [r7, #12]
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b32      	ldr	r3, [pc, #200]	; (8001ae4 <M24SR_UpdateBinary+0x100>)
 8001a1a:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = NbByteToWrite ;
 8001a1c:	4a31      	ldr	r2, [pc, #196]	; (8001ae4 <M24SR_UpdateBinary+0x100>)
 8001a1e:	7afb      	ldrb	r3, [r7, #11]
 8001a20:	7113      	strb	r3, [r2, #4]
  /* copy the File Id */
  memcpy(Command.Body.pData ,pDataToWrite, NbByteToWrite );
 8001a22:	4b30      	ldr	r3, [pc, #192]	; (8001ae4 <M24SR_UpdateBinary+0x100>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	7afa      	ldrb	r2, [r7, #11]
 8001a28:	6879      	ldr	r1, [r7, #4]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f011 f898 	bl	8012b60 <memcpy>
  
  M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_UPDATEBINARY,  Command, &NbByte , pBuffer);
 8001a30:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <M24SR_UpdateBinary+0x100>)
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	9202      	str	r2, [sp, #8]
 8001a36:	f107 0216 	add.w	r2, r7, #22
 8001a3a:	9201      	str	r2, [sp, #4]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	9200      	str	r2, [sp, #0]
 8001a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a42:	f240 107f 	movw	r0, #383	; 0x17f
 8001a46:	f7ff fac3 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 8001a4a:	89fb      	ldrh	r3, [r7, #14]
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	8afa      	ldrh	r2, [r7, #22]
 8001a50:	69b9      	ldr	r1, [r7, #24]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f005 fe60 	bl	8007718 <NFC_IO_WriteMultiple>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	83fb      	strh	r3, [r7, #30]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001a5c:	8bfb      	ldrh	r3, [r7, #30]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <M24SR_UpdateBinary+0x82>
  {
    return M24SR_ERROR_TIMEOUT;
 8001a62:	2311      	movs	r3, #17
 8001a64:	e037      	b.n	8001ad6 <M24SR_UpdateBinary+0xf2>
  } 
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001a66:	89fb      	ldrh	r3, [r7, #14]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f000 f927 	bl	8001cbc <M24SR_IsAnswerReady>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	83fb      	strh	r3, [r7, #30]
  if (status != M24SR_STATUS_SUCCESS)
 8001a72:	8bfb      	ldrh	r3, [r7, #30]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <M24SR_UpdateBinary+0x98>
  {
    return status;
 8001a78:	8bfb      	ldrh	r3, [r7, #30]
 8001a7a:	e02c      	b.n	8001ad6 <M24SR_UpdateBinary+0xf2>
  } 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_STATUSRESPONSE_NBBYTE);
 8001a7c:	89fb      	ldrh	r3, [r7, #14]
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2205      	movs	r2, #5
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f005 fe1d 	bl	80076c4 <NFC_IO_ReadMultiple>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	83fb      	strh	r3, [r7, #30]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d001      	beq.n	8001a98 <M24SR_UpdateBinary+0xb4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001a94:	2311      	movs	r3, #17
 8001a96:	e01e      	b.n	8001ad6 <M24SR_UpdateBinary+0xf2>
  } 
  /* if the response is a Watiting frame extenstion request */ 
  if (IsSBlock (pBuffer) == M24SR_STATUS_SUCCESS)
 8001a98:	69b8      	ldr	r0, [r7, #24]
 8001a9a:	f7ff fb89 	bl	80011b0 <IsSBlock>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d111      	bne.n	8001ac8 <M24SR_UpdateBinary+0xe4>
  {
    /*check the CRC */ 
    if (M24SR_IsCorrectCRC16Residue (pBuffer , M24SR_WATINGTIMEEXTRESPONSE_NBBYTE) != M24SR_ERROR_CRC)
 8001aa4:	2104      	movs	r1, #4
 8001aa6:	69b8      	ldr	r0, [r7, #24]
 8001aa8:	f7ff fa4e 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b12      	cmp	r3, #18
 8001ab0:	d010      	beq.n	8001ad4 <M24SR_UpdateBinary+0xf0>
    {
      /* send the FrameExension response*/ 
      status = M24SR_FWTExtension (DeviceAddr,  pBuffer [M24SR_OFFSET_PCB+1]);
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	781a      	ldrb	r2, [r3, #0]
 8001ab8:	89fb      	ldrh	r3, [r7, #14]
 8001aba:	4611      	mov	r1, r2
 8001abc:	4618      	mov	r0, r3
 8001abe:	f7ff fb8a 	bl	80011d6 <M24SR_FWTExtension>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	83fb      	strh	r3, [r7, #30]
 8001ac6:	e005      	b.n	8001ad4 <M24SR_UpdateBinary+0xf0>
    }
  }
  else
  {  
    status = M24SR_IsCorrectCRC16Residue (pBuffer, M24SR_STATUSRESPONSE_NBBYTE); 
 8001ac8:	2105      	movs	r1, #5
 8001aca:	69b8      	ldr	r0, [r7, #24]
 8001acc:	f7ff fa3c 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	83fb      	strh	r3, [r7, #30]
  }
  
  return status;
 8001ad4:	8bfb      	ldrh	r3, [r7, #30]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3720      	adds	r7, #32
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200017e8 	.word	0x200017e8
 8001ae4:	20000b1c 	.word	0x20000b1c

08001ae8 <M24SR_Verify>:
  * @param  pPwd : pointer on the passwaord
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  * @retval M24SR_ERROR_TIMEOUT : The I2C timeout occured.
  */
uint16_t M24SR_Verify (uint16_t DeviceAddr, uint16_t uPwdId, uint8_t NbPwdByte ,uint8_t *pPwd)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af04      	add	r7, sp, #16
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	4603      	mov	r3, r0
 8001af2:	81fb      	strh	r3, [r7, #14]
 8001af4:	460b      	mov	r3, r1
 8001af6:	81bb      	strh	r3, [r7, #12]
 8001af8:	4613      	mov	r3, r2
 8001afa:	72fb      	strb	r3, [r7, #11]
  uint8_t   *pBuffer = uM24SRbuffer ;
 8001afc:	4b3d      	ldr	r3, [pc, #244]	; (8001bf4 <M24SR_Verify+0x10c>)
 8001afe:	617b      	str	r3, [r7, #20]
  uint16_t  status = 0x0000 ; 
 8001b00:	2300      	movs	r3, #0
 8001b02:	827b      	strh	r3, [r7, #18]
  uint16_t  NbByte;
  
  /*check the parameters */
  if (uPwdId > 0x0003)
 8001b04:	89bb      	ldrh	r3, [r7, #12]
 8001b06:	2b03      	cmp	r3, #3
 8001b08:	d901      	bls.n	8001b0e <M24SR_Verify+0x26>
  {  
    return M24SR_ERROR_PARAMETER;
 8001b0a:	2314      	movs	r3, #20
 8001b0c:	e06d      	b.n	8001bea <M24SR_Verify+0x102>
  }
  if ( (NbPwdByte != 0x00) && (NbPwdByte != 0x10))
 8001b0e:	7afb      	ldrb	r3, [r7, #11]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d004      	beq.n	8001b1e <M24SR_Verify+0x36>
 8001b14:	7afb      	ldrb	r3, [r7, #11]
 8001b16:	2b10      	cmp	r3, #16
 8001b18:	d001      	beq.n	8001b1e <M24SR_Verify+0x36>
  {  
    return M24SR_ERROR_PARAMETER;
 8001b1a:	2314      	movs	r3, #20
 8001b1c:	e065      	b.n	8001bea <M24SR_Verify+0x102>
  }
  
  /* build the command */
  Command.Header.CLA = C_APDU_CLA_DEFAULT;
 8001b1e:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
  Command.Header.INS = C_APDU_VERIFY;
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b26:	2220      	movs	r2, #32
 8001b28:	705a      	strb	r2, [r3, #1]
  /* copy the Password Id */
  Command.Header.P1 = GETMSB  (uPwdId ) ;
 8001b2a:	89bb      	ldrh	r3, [r7, #12]
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4b31      	ldr	r3, [pc, #196]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b34:	709a      	strb	r2, [r3, #2]
  Command.Header.P2 = GETLSB  (uPwdId ) ;
 8001b36:	89bb      	ldrh	r3, [r7, #12]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b3c:	70da      	strb	r2, [r3, #3]
  /* copy the number of byte of the data field */
  Command.Body.LC = NbPwdByte ;
 8001b3e:	4a2e      	ldr	r2, [pc, #184]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b40:	7afb      	ldrb	r3, [r7, #11]
 8001b42:	7113      	strb	r3, [r2, #4]
  
  if (NbPwdByte == 0x10) 
 8001b44:	7afb      	ldrb	r3, [r7, #11]
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d114      	bne.n	8001b74 <M24SR_Verify+0x8c>
  {
    /* copy the password */
    memcpy(Command.Body.pData, pPwd, NbPwdByte);
 8001b4a:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	7afa      	ldrb	r2, [r7, #11]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f011 f804 	bl	8012b60 <memcpy>
    /* build the I�C command */
    M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_VERIFYBINARYWITHPWD,  Command, &NbByte , pBuffer);
 8001b58:	4b27      	ldr	r3, [pc, #156]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	9202      	str	r2, [sp, #8]
 8001b5e:	f107 0210 	add.w	r2, r7, #16
 8001b62:	9201      	str	r2, [sp, #4]
 8001b64:	68da      	ldr	r2, [r3, #12]
 8001b66:	9200      	str	r2, [sp, #0]
 8001b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b6a:	f240 107f 	movw	r0, #383	; 0x17f
 8001b6e:	f7ff fa2f 	bl	8000fd0 <M24SR_BuildIBlockCommand>
 8001b72:	e00c      	b.n	8001b8e <M24SR_Verify+0xa6>
  }
  else 
  {
    /* build the I�C command */
    M24SR_BuildIBlockCommand ( M24SR_CMDSTRUCT_VERIFYBINARYWOPWD,  Command, &NbByte , pBuffer);
 8001b74:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <M24SR_Verify+0x110>)
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	9202      	str	r2, [sp, #8]
 8001b7a:	f107 0210 	add.w	r2, r7, #16
 8001b7e:	9201      	str	r2, [sp, #4]
 8001b80:	68da      	ldr	r2, [r3, #12]
 8001b82:	9200      	str	r2, [sp, #0]
 8001b84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b86:	f240 103f 	movw	r0, #319	; 0x13f
 8001b8a:	f7ff fa21 	bl	8000fd0 <M24SR_BuildIBlockCommand>
  }
  
  /* send the request */ 
  status = NFC_IO_WriteMultiple(DeviceAddr, pBuffer, NbByte);
 8001b8e:	89fb      	ldrh	r3, [r7, #14]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	8a3a      	ldrh	r2, [r7, #16]
 8001b94:	6979      	ldr	r1, [r7, #20]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f005 fdbe 	bl	8007718 <NFC_IO_WriteMultiple>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001ba0:	8a7b      	ldrh	r3, [r7, #18]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <M24SR_Verify+0xc2>
  {
    return M24SR_ERROR_TIMEOUT;
 8001ba6:	2311      	movs	r3, #17
 8001ba8:	e01f      	b.n	8001bea <M24SR_Verify+0x102>
  } 
  /* wait for answer ready */
  status = M24SR_IsAnswerReady (DeviceAddr);
 8001baa:	89fb      	ldrh	r3, [r7, #14]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f885 	bl	8001cbc <M24SR_IsAnswerReady>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	827b      	strh	r3, [r7, #18]
  if (status != M24SR_STATUS_SUCCESS)
 8001bb6:	8a7b      	ldrh	r3, [r7, #18]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <M24SR_Verify+0xd8>
  {
    return status;
 8001bbc:	8a7b      	ldrh	r3, [r7, #18]
 8001bbe:	e014      	b.n	8001bea <M24SR_Verify+0x102>
  } 
  /* read the response */ 
  status = NFC_IO_ReadMultiple (DeviceAddr , pBuffer,  M24SR_STATUSRESPONSE_NBBYTE);
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2205      	movs	r2, #5
 8001bc6:	6979      	ldr	r1, [r7, #20]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f005 fd7b 	bl	80076c4 <NFC_IO_ReadMultiple>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	827b      	strh	r3, [r7, #18]
  if (status != NFC_IO_STATUS_SUCCESS)
 8001bd2:	8a7b      	ldrh	r3, [r7, #18]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <M24SR_Verify+0xf4>
  {
    return M24SR_ERROR_TIMEOUT;
 8001bd8:	2311      	movs	r3, #17
 8001bda:	e006      	b.n	8001bea <M24SR_Verify+0x102>
  } 
  
  status = M24SR_IsCorrectCRC16Residue (pBuffer, M24SR_STATUSRESPONSE_NBBYTE); 
 8001bdc:	2105      	movs	r1, #5
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff f9b2 	bl	8000f48 <M24SR_IsCorrectCRC16Residue>
 8001be4:	4603      	mov	r3, r0
 8001be6:	827b      	strh	r3, [r7, #18]
  return status;
 8001be8:	8a7b      	ldrh	r3, [r7, #18]
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3718      	adds	r7, #24
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200017e8 	.word	0x200017e8
 8001bf8:	20000b1c 	.word	0x20000b1c

08001bfc <M24SR_ManageI2CGPO>:
  * @param  DeviceAddr: I2C address of the device
  * @param  GPO_I2Cconfig: GPO configuration to set
  * @retval Status (SW1&SW2) : Status of the operation to complete.
  */
uint16_t M24SR_ManageI2CGPO(uint16_t DeviceAddr, uint8_t GPO_I2Cconfig)
{
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	460a      	mov	r2, r1
 8001c06:	80fb      	strh	r3, [r7, #6]
 8001c08:	4613      	mov	r3, r2
 8001c0a:	717b      	strb	r3, [r7, #5]
  uint16_t status;
  uint8_t GPO_config;
  uint8_t DefaultPassword[16]={0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <M24SR_ManageI2CGPO+0xb8>)
 8001c0e:	f107 040c 	add.w	r4, r7, #12
 8001c12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

  if( GPO_I2Cconfig > STATE_CONTROL)
 8001c18:	797b      	ldrb	r3, [r7, #5]
 8001c1a:	2b05      	cmp	r3, #5
 8001c1c:	d901      	bls.n	8001c22 <M24SR_ManageI2CGPO+0x26>
  {
    return M24SR_ERROR_PARAMETER;
 8001c1e:	2314      	movs	r3, #20
 8001c20:	e043      	b.n	8001caa <M24SR_ManageI2CGPO+0xae>
  }

  /* we must not be in interrupt mode for I2C synchro as we will change GPO purpose */
  M24SR_SetI2CSynchroMode(M24SR_WAITINGTIME_POLLING);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 f8b0 	bl	8001d88 <M24SR_SetI2CSynchroMode>

  M24SR_SelectApplication(DeviceAddr);
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fc28 	bl	8001480 <M24SR_SelectApplication>
  M24SR_SelectSystemfile(DeviceAddr);
 8001c30:	88fb      	ldrh	r3, [r7, #6]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fd12 	bl	800165c <M24SR_SelectSystemfile>
  M24SR_ReadBinary (DeviceAddr, 0x0004 , 0x01 , &GPO_config );
 8001c38:	f107 031d 	add.w	r3, r7, #29
 8001c3c:	88f8      	ldrh	r0, [r7, #6]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2104      	movs	r1, #4
 8001c42:	f7ff fdef 	bl	8001824 <M24SR_ReadBinary>

  /* Update only GPO purpose for I2C */
  GPO_config = (GPO_config & 0xF0) | GPO_I2Cconfig;
 8001c46:	7f7b      	ldrb	r3, [r7, #29]
 8001c48:	b25b      	sxtb	r3, r3
 8001c4a:	f023 030f 	bic.w	r3, r3, #15
 8001c4e:	b25a      	sxtb	r2, r3
 8001c50:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	b25b      	sxtb	r3, r3
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	777b      	strb	r3, [r7, #29]
  M24SR_SelectSystemfile(DeviceAddr);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7ff fcfc 	bl	800165c <M24SR_SelectSystemfile>
  M24SR_Verify(DeviceAddr, M24SR_I2C_PWD ,0x10 ,DefaultPassword );
 8001c64:	f107 030c 	add.w	r3, r7, #12
 8001c68:	88f8      	ldrh	r0, [r7, #6]
 8001c6a:	2210      	movs	r2, #16
 8001c6c:	2103      	movs	r1, #3
 8001c6e:	f7ff ff3b 	bl	8001ae8 <M24SR_Verify>
  status = M24SR_UpdateBinary (DeviceAddr, 0x0004 ,0x01, &(GPO_config) );
 8001c72:	f107 031d 	add.w	r3, r7, #29
 8001c76:	88f8      	ldrh	r0, [r7, #6]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	2104      	movs	r1, #4
 8001c7c:	f7ff feb2 	bl	80019e4 <M24SR_UpdateBinary>
 8001c80:	4603      	mov	r3, r0
 8001c82:	83fb      	strh	r3, [r7, #30]

  /* if we have set interrupt mode for I2C synchro we can enable interrupt mode */
  if (GPO_I2Cconfig == I2C_ANSWER_READY && status == M24SR_ACTION_COMPLETED)
 8001c84:	797b      	ldrb	r3, [r7, #5]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	d10e      	bne.n	8001ca8 <M24SR_ManageI2CGPO+0xac>
 8001c8a:	8bfb      	ldrh	r3, [r7, #30]
 8001c8c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001c90:	d10a      	bne.n	8001ca8 <M24SR_ManageI2CGPO+0xac>
  {
  if(uGpoMode == M24SR_GPO_SYNCHRO)
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <M24SR_ManageI2CGPO+0xbc>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d103      	bne.n	8001ca2 <M24SR_ManageI2CGPO+0xa6>
  {
    M24SR_SetI2CSynchroMode(M24SR_WAITINGTIME_GPO);
 8001c9a:	2003      	movs	r0, #3
 8001c9c:	f000 f874 	bl	8001d88 <M24SR_SetI2CSynchroMode>
 8001ca0:	e002      	b.n	8001ca8 <M24SR_ManageI2CGPO+0xac>
  }
  else
  {
    M24SR_SetI2CSynchroMode(M24SR_INTERRUPT_GPO);
 8001ca2:	2004      	movs	r0, #4
 8001ca4:	f000 f870 	bl	8001d88 <M24SR_SetI2CSynchroMode>
  }
  }

  return status;
 8001ca8:	8bfb      	ldrh	r3, [r7, #30]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	; 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd90      	pop	{r4, r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	08015a14 	.word	0x08015a14
 8001cb8:	20000c2c 	.word	0x20000c2c

08001cbc <M24SR_IsAnswerReady>:
  * @param  DeviceAddr: I2C address of the device
  * @retval M24SR_STATUS_SUCCESS : a response of the M24LR is ready
  * @retval M24SR_ERROR_DEFAULT : the response of the M24LR is not ready
  */
static uint16_t M24SR_IsAnswerReady (uint16_t DeviceAddr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	80fb      	strh	r3, [r7, #6]
  uint32_t retry = 0xFFFFF;
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <M24SR_IsAnswerReady+0xc0>)
 8001cc8:	60fb      	str	r3, [r7, #12]
  uint8_t stable = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	72fb      	strb	r3, [r7, #11]
  uint8_t PinState;

  switch (uSynchroMode)
 8001cce:	4b2c      	ldr	r3, [pc, #176]	; (8001d80 <M24SR_IsAnswerReady+0xc4>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d846      	bhi.n	8001d66 <M24SR_IsAnswerReady+0xaa>
 8001cd8:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <M24SR_IsAnswerReady+0x24>)
 8001cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cde:	bf00      	nop
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001d07 	.word	0x08001d07
 8001ce8:	08001d11 	.word	0x08001d11
 8001cec:	08001d43 	.word	0x08001d43
  {
  case M24SR_WAITINGTIME_POLLING :
    if(NFC_IO_IsDeviceReady(DeviceAddr, NFC_IO_TRIALS) != NFC_IO_STATUS_SUCCESS)
 8001cf0:	88fb      	ldrh	r3, [r7, #6]
 8001cf2:	b2db      	uxtb	r3, r3
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f005 fd38 	bl	800776c <NFC_IO_IsDeviceReady>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d033      	beq.n	8001d6a <M24SR_IsAnswerReady+0xae>
    {
      return  M24SR_ERROR_TIMEOUT;
 8001d02:	2311      	movs	r3, #17
 8001d04:	e035      	b.n	8001d72 <M24SR_IsAnswerReady+0xb6>
    } 
    break;
    
  case M24SR_WAITINGTIME_TIMEOUT :
    /* M24SR FWI=5 => (256*16/fc)*2^5=9.6ms but M24SR ask for extended time to program up to 246Bytes. */
    NFC_IO_Delay(M24SR_ANSWER_TIMEOUT);    
 8001d06:	2050      	movs	r0, #80	; 0x50
 8001d08:	f005 fd70 	bl	80077ec <NFC_IO_Delay>
    break;
 8001d0c:	e030      	b.n	8001d70 <M24SR_IsAnswerReady+0xb4>
    
  case M24SR_WAITINGTIME_GPO :
 8001d0e:	bf00      	nop
    /* mbd does not support interrupt for the moment with nucleo board */
    do
    {
      NFC_IO_ReadState(&PinState);
 8001d10:	f107 030a 	add.w	r3, r7, #10
 8001d14:	4618      	mov	r0, r3
 8001d16:	f005 fd57 	bl	80077c8 <NFC_IO_ReadState>
      if( PinState == 0) /* RESET */
 8001d1a:	7abb      	ldrb	r3, [r7, #10]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <M24SR_IsAnswerReady+0x6a>
      {
        stable ++;                        
 8001d20:	7afb      	ldrb	r3, [r7, #11]
 8001d22:	3301      	adds	r3, #1
 8001d24:	72fb      	strb	r3, [r7, #11]
      }
      retry --;                        
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
    }
    while(stable < M24SR_ANSWER_STABLE && retry>0);
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
 8001d2e:	2b04      	cmp	r3, #4
 8001d30:	d802      	bhi.n	8001d38 <M24SR_IsAnswerReady+0x7c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d1ea      	bne.n	8001d0e <M24SR_IsAnswerReady+0x52>
    if(!retry)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d117      	bne.n	8001d6e <M24SR_IsAnswerReady+0xb2>
    {
      return M24SR_ERROR_TIMEOUT;   
 8001d3e:	2311      	movs	r3, #17
 8001d40:	e017      	b.n	8001d72 <M24SR_IsAnswerReady+0xb6>
    }          
    break;
    
  case M24SR_INTERRUPT_GPO :
    /* Check if the GPIO is not already low before calling this function */
    NFC_IO_ReadState(&PinState);
 8001d42:	f107 030a 	add.w	r3, r7, #10
 8001d46:	4618      	mov	r0, r3
 8001d48:	f005 fd3e 	bl	80077c8 <NFC_IO_ReadState>
    if(PinState == 1) /* SET */
 8001d4c:	7abb      	ldrb	r3, [r7, #10]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <M24SR_IsAnswerReady+0xa2>
    {
      while (GPO_Low == 0);
 8001d52:	bf00      	nop
 8001d54:	4b0b      	ldr	r3, [pc, #44]	; (8001d84 <M24SR_IsAnswerReady+0xc8>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d0fa      	beq.n	8001d54 <M24SR_IsAnswerReady+0x98>
    }
    GPO_Low = 0;
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <M24SR_IsAnswerReady+0xc8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	701a      	strb	r2, [r3, #0]
    break;
 8001d64:	e004      	b.n	8001d70 <M24SR_IsAnswerReady+0xb4>
    
  default : 
    return M24SR_ERROR_DEFAULT;
 8001d66:	2310      	movs	r3, #16
 8001d68:	e003      	b.n	8001d72 <M24SR_IsAnswerReady+0xb6>
    break;
 8001d6a:	bf00      	nop
 8001d6c:	e000      	b.n	8001d70 <M24SR_IsAnswerReady+0xb4>
    break;
 8001d6e:	bf00      	nop
  }
  
  return M24SR_STATUS_SUCCESS;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	000fffff 	.word	0x000fffff
 8001d80:	20000000 	.word	0x20000000
 8001d84:	20000c2d 	.word	0x20000c2d

08001d88 <M24SR_SetI2CSynchroMode>:
  * @brief  this functions configure I2C synchronization mode
  * @param  WaitingMode : interruption or polling
  * @retval None
  */
static void M24SR_SetI2CSynchroMode( uint8_t WaitingMode)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  if((uGpoMode == M24SR_GPO_SYNCHRO) || (uGpoMode == M24SR_GPO_INTERRUPT))
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <M24SR_SetI2CSynchroMode+0x4c>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d003      	beq.n	8001da2 <M24SR_SetI2CSynchroMode+0x1a>
 8001d9a:	4b0e      	ldr	r3, [pc, #56]	; (8001dd4 <M24SR_SetI2CSynchroMode+0x4c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d103      	bne.n	8001daa <M24SR_SetI2CSynchroMode+0x22>
  {
    uSynchroMode = WaitingMode;
 8001da2:	4a0d      	ldr	r2, [pc, #52]	; (8001dd8 <M24SR_SetI2CSynchroMode+0x50>)
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	7013      	strb	r3, [r2, #0]
 8001da8:	e00d      	b.n	8001dc6 <M24SR_SetI2CSynchroMode+0x3e>
  } 
  else  /* GPO_POLLING */
  { 
    if(WaitingMode == M24SR_WAITINGTIME_GPO || WaitingMode == M24SR_INTERRUPT_GPO)
 8001daa:	79fb      	ldrb	r3, [r7, #7]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d002      	beq.n	8001db6 <M24SR_SetI2CSynchroMode+0x2e>
 8001db0:	79fb      	ldrb	r3, [r7, #7]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d103      	bne.n	8001dbe <M24SR_SetI2CSynchroMode+0x36>
        uSynchroMode = M24SR_WAITINGTIME_POLLING;  /* Force Polling */
 8001db6:	4b08      	ldr	r3, [pc, #32]	; (8001dd8 <M24SR_SetI2CSynchroMode+0x50>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	701a      	strb	r2, [r3, #0]
 8001dbc:	e003      	b.n	8001dc6 <M24SR_SetI2CSynchroMode+0x3e>
    else
        uSynchroMode = WaitingMode;
 8001dbe:	4a06      	ldr	r2, [pc, #24]	; (8001dd8 <M24SR_SetI2CSynchroMode+0x50>)
 8001dc0:	79fb      	ldrb	r3, [r7, #7]
 8001dc2:	7013      	strb	r3, [r2, #0]
  }
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	20000c2c 	.word	0x20000c2c
 8001dd8:	20000000 	.word	0x20000000

08001ddc <NFC_TT4_Initialization>:
  * @param  size : number of byte of data to read
  * @retval SUCCESS : Initalization done
  * @retval ERROR : Not able to Initialize. 
  */
uint16_t NFC_TT4_Initialization ( uint8_t* CCBuffer, uint8_t size )
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	70fb      	strb	r3, [r7, #3]
  uint16_t status = ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	81fb      	strh	r3, [r7, #14]
  uint16_t trials = 5; /* wait 1sec, driver is configured to let 200ms for command to complete */
 8001dec:	2305      	movs	r3, #5
 8001dee:	81bb      	strh	r3, [r7, #12]
                       /* which is enough for all commands except GetSession if RF session is already opened */
                       /* Smartphone generaly release the session within the second, but customer can modify this value */
  
  /* Perform HW initialization */
  M24SR_Init(M24SR_I2C_ADDR, M24SR_I2C_GPO_MODE);
 8001df0:	2102      	movs	r1, #2
 8001df2:	20ac      	movs	r0, #172	; 0xac
 8001df4:	f7ff fa5e 	bl	80012b4 <M24SR_Init>
  
  /* Read CC file */
  while( status != M24SR_ACTION_COMPLETED && trials)
 8001df8:	e007      	b.n	8001e0a <NFC_TT4_Initialization+0x2e>
  {
    status = M24SR_GetSession(M24SR_I2C_ADDR);
 8001dfa:	20ac      	movs	r0, #172	; 0xac
 8001dfc:	f7ff faba 	bl	8001374 <M24SR_GetSession>
 8001e00:	4603      	mov	r3, r0
 8001e02:	81fb      	strh	r3, [r7, #14]
    trials--;
 8001e04:	89bb      	ldrh	r3, [r7, #12]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	81bb      	strh	r3, [r7, #12]
  while( status != M24SR_ACTION_COMPLETED && trials)
 8001e0a:	89fb      	ldrh	r3, [r7, #14]
 8001e0c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e10:	d002      	beq.n	8001e18 <NFC_TT4_Initialization+0x3c>
 8001e12:	89bb      	ldrh	r3, [r7, #12]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <NFC_TT4_Initialization+0x1e>
  }
  if (status != M24SR_ACTION_COMPLETED)
 8001e18:	89fb      	ldrh	r3, [r7, #14]
 8001e1a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e1e:	d001      	beq.n	8001e24 <NFC_TT4_Initialization+0x48>
  {
    return ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e03d      	b.n	8001ea0 <NFC_TT4_Initialization+0xc4>
  }
  /*===================================*/
  /* Select the NFC type 4 application */ 
  /*===================================*/
  status = M24SR_SelectApplication(M24SR_I2C_ADDR); 
 8001e24:	20ac      	movs	r0, #172	; 0xac
 8001e26:	f7ff fb2b 	bl	8001480 <M24SR_SelectApplication>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_ACTION_COMPLETED)
 8001e2e:	89fb      	ldrh	r3, [r7, #14]
 8001e30:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e34:	d001      	beq.n	8001e3a <NFC_TT4_Initialization+0x5e>
  {
    return ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e032      	b.n	8001ea0 <NFC_TT4_Initialization+0xc4>
  }
    
  /*==================*/
  /* select a CC file */ 
  /*==================*/
  status = M24SR_SelectCCfile(M24SR_I2C_ADDR);
 8001e3a:	20ac      	movs	r0, #172	; 0xac
 8001e3c:	f7ff fb9c 	bl	8001578 <M24SR_SelectCCfile>
 8001e40:	4603      	mov	r3, r0
 8001e42:	81fb      	strh	r3, [r7, #14]
  if (status != M24SR_ACTION_COMPLETED)
 8001e44:	89fb      	ldrh	r3, [r7, #14]
 8001e46:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e4a:	d001      	beq.n	8001e50 <NFC_TT4_Initialization+0x74>
  {
    return ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e027      	b.n	8001ea0 <NFC_TT4_Initialization+0xc4>
  }
      
  /* read the first 15 bytes of the CC file */
  if( NFC_TT4_ReadData ( 0x0000 , 0x0F , CCBuffer )== M24SR_ACTION_COMPLETED)
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	210f      	movs	r1, #15
 8001e54:	2000      	movs	r0, #0
 8001e56:	f000 f8b7 	bl	8001fc8 <NFC_TT4_ReadData>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e60:	d118      	bne.n	8001e94 <NFC_TT4_Initialization+0xb8>
  {      
    NDEF_FileID = (uint16_t) ((CCBuffer[0x09]<<8) | CCBuffer[0x0A]);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3309      	adds	r3, #9
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	021b      	lsls	r3, r3, #8
 8001e6a:	b21a      	sxth	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	330a      	adds	r3, #10
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	b21b      	sxth	r3, r3
 8001e74:	4313      	orrs	r3, r2
 8001e76:	b21b      	sxth	r3, r3
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ea8 <NFC_TT4_Initialization+0xcc>)
 8001e7c:	801a      	strh	r2, [r3, #0]
    status = M24SR_Deselect(M24SR_I2C_ADDR);
 8001e7e:	20ac      	movs	r0, #172	; 0xac
 8001e80:	f7ff fac2 	bl	8001408 <M24SR_Deselect>
 8001e84:	4603      	mov	r3, r0
 8001e86:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001e88:	89fb      	ldrh	r3, [r7, #14]
 8001e8a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001e8e:	d006      	beq.n	8001e9e <NFC_TT4_Initialization+0xc2>
    {
      return ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e005      	b.n	8001ea0 <NFC_TT4_Initialization+0xc4>
    }
  }
  else
  {
    M24SR_Deselect(M24SR_I2C_ADDR);
 8001e94:	20ac      	movs	r0, #172	; 0xac
 8001e96:	f7ff fab7 	bl	8001408 <M24SR_Deselect>
    return ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e000      	b.n	8001ea0 <NFC_TT4_Initialization+0xc4>
  }

  return SUCCESS;
 8001e9e:	2300      	movs	r3, #0
}
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	3710      	adds	r7, #16
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	20000008 	.word	0x20000008

08001eac <NFC_TT4_OpenNDEFSession>:
  *                               Kill RF session and open I2C sesssion.
  * @retval SUCCESS : Session is opened
  * @retval ERROR : Not able to open session. 
  */
uint16_t NFC_TT4_OpenNDEFSession ( uint16_t NDEF_fileID, uint16_t Priority )
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	460a      	mov	r2, r1
 8001eb6:	80fb      	strh	r3, [r7, #6]
 8001eb8:	4613      	mov	r3, r2
 8001eba:	80bb      	strh	r3, [r7, #4]
  uint16_t status = ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	81fb      	strh	r3, [r7, #14]
  uint16_t trials = 5; /* wait 1sec, driver is configured to let 200ms for command to complete */
 8001ec0:	2305      	movs	r3, #5
 8001ec2:	81bb      	strh	r3, [r7, #12]
                       /* which is enough for all commands except GetSession if RF session is already opened */
                       /* Smartphone generaly release the session within the second, but customer can modify this value */
  
  if(NDEFSessionOpenID == NDEF_SESSION_CLOSED)
 8001ec4:	4b28      	ldr	r3, [pc, #160]	; (8001f68 <NFC_TT4_OpenNDEFSession+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a28      	ldr	r2, [pc, #160]	; (8001f6c <NFC_TT4_OpenNDEFSession+0xc0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d140      	bne.n	8001f50 <NFC_TT4_OpenNDEFSession+0xa4>
  {
    if( Priority == NFC_TT4_TAKE_SESSION)
 8001ece:	88bb      	ldrh	r3, [r7, #4]
 8001ed0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d10d      	bne.n	8001ef4 <NFC_TT4_OpenNDEFSession+0x48>
    {
      status = M24SR_KillSession(M24SR_I2C_ADDR);
 8001ed8:	20ac      	movs	r0, #172	; 0xac
 8001eda:	f7ff fa70 	bl	80013be <M24SR_KillSession>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	81fb      	strh	r3, [r7, #14]
 8001ee2:	e00e      	b.n	8001f02 <NFC_TT4_OpenNDEFSession+0x56>
    }
    else
    {
      while( status != M24SR_ACTION_COMPLETED && trials)
      {
        status = M24SR_GetSession(M24SR_I2C_ADDR);
 8001ee4:	20ac      	movs	r0, #172	; 0xac
 8001ee6:	f7ff fa45 	bl	8001374 <M24SR_GetSession>
 8001eea:	4603      	mov	r3, r0
 8001eec:	81fb      	strh	r3, [r7, #14]
        trials--;
 8001eee:	89bb      	ldrh	r3, [r7, #12]
 8001ef0:	3b01      	subs	r3, #1
 8001ef2:	81bb      	strh	r3, [r7, #12]
      while( status != M24SR_ACTION_COMPLETED && trials)
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001efa:	d002      	beq.n	8001f02 <NFC_TT4_OpenNDEFSession+0x56>
 8001efc:	89bb      	ldrh	r3, [r7, #12]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1f0      	bne.n	8001ee4 <NFC_TT4_OpenNDEFSession+0x38>
      }
    }
    if (status != M24SR_ACTION_COMPLETED)
 8001f02:	89fb      	ldrh	r3, [r7, #14]
 8001f04:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f08:	d005      	beq.n	8001f16 <NFC_TT4_OpenNDEFSession+0x6a>
    {
      /* seems session already open on RF side */
      /* But in case of I2C issue try to init again */
      M24SR_Init(M24SR_I2C_ADDR, M24SR_I2C_GPO_MODE);
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	20ac      	movs	r0, #172	; 0xac
 8001f0e:	f7ff f9d1 	bl	80012b4 <M24SR_Init>
      return ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e024      	b.n	8001f60 <NFC_TT4_OpenNDEFSession+0xb4>
    }
    
    /*===================================*/
    /* Select the NFC type 4 application */ 
    /*===================================*/
    status = M24SR_SelectApplication(M24SR_I2C_ADDR);
 8001f16:	20ac      	movs	r0, #172	; 0xac
 8001f18:	f7ff fab2 	bl	8001480 <M24SR_SelectApplication>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001f20:	89fb      	ldrh	r3, [r7, #14]
 8001f22:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f26:	d001      	beq.n	8001f2c <NFC_TT4_OpenNDEFSession+0x80>
    {
      return ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e019      	b.n	8001f60 <NFC_TT4_OpenNDEFSession+0xb4>
    }    
    /*====================*/
    /* select NDEF file   */
    /*====================*/
    status = M24SR_SelectNDEFfile(M24SR_I2C_ADDR, NDEF_fileID);
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4619      	mov	r1, r3
 8001f30:	20ac      	movs	r0, #172	; 0xac
 8001f32:	f7ff fc05 	bl	8001740 <M24SR_SelectNDEFfile>
 8001f36:	4603      	mov	r3, r0
 8001f38:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001f3a:	89fb      	ldrh	r3, [r7, #14]
 8001f3c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f40:	d001      	beq.n	8001f46 <NFC_TT4_OpenNDEFSession+0x9a>
    {
      return ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e00c      	b.n	8001f60 <NFC_TT4_OpenNDEFSession+0xb4>
    } 
    
    NDEFSessionOpenID = (uint32_t)(NDEF_fileID);
 8001f46:	88fb      	ldrh	r3, [r7, #6]
 8001f48:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <NFC_TT4_OpenNDEFSession+0xbc>)
 8001f4a:	6013      	str	r3, [r2, #0]
    
    return SUCCESS;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e007      	b.n	8001f60 <NFC_TT4_OpenNDEFSession+0xb4>
  }
  else if(NDEFSessionOpenID == NDEF_fileID)
 8001f50:	88fa      	ldrh	r2, [r7, #6]
 8001f52:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <NFC_TT4_OpenNDEFSession+0xbc>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d101      	bne.n	8001f5e <NFC_TT4_OpenNDEFSession+0xb2>
  {
    /* Session already Open not an issue caller can perform access in NDEF file */
    return SUCCESS;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	e000      	b.n	8001f60 <NFC_TT4_OpenNDEFSession+0xb4>
  }
  
  return ERROR;  
 8001f5e:	2301      	movs	r3, #1
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20000004 	.word	0x20000004
 8001f6c:	deadbeef 	.word	0xdeadbeef

08001f70 <NFC_TT4_CloseNDEFSession>:
  * @param  NDEF_fileID : NDEF identification to select NDEF in M24SR
  * @retval SUCCESS : Session is closed
  * @retval ERROR : Not able to close session. 
  */
uint16_t NFC_TT4_CloseNDEFSession ( uint16_t NDEF_fileID )
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
  uint16_t status = ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	81fb      	strh	r3, [r7, #14]
  
  if(NDEFSessionOpenID == (uint32_t)(NDEF_fileID))
 8001f7e:	88fa      	ldrh	r2, [r7, #6]
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <NFC_TT4_CloseNDEFSession+0x50>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d10f      	bne.n	8001fa8 <NFC_TT4_CloseNDEFSession+0x38>
  {
    status = M24SR_Deselect(M24SR_I2C_ADDR);
 8001f88:	20ac      	movs	r0, #172	; 0xac
 8001f8a:	f7ff fa3d 	bl	8001408 <M24SR_Deselect>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	81fb      	strh	r3, [r7, #14]
    if (status != M24SR_ACTION_COMPLETED)
 8001f92:	89fb      	ldrh	r3, [r7, #14]
 8001f94:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8001f98:	d001      	beq.n	8001f9e <NFC_TT4_CloseNDEFSession+0x2e>
    {
      return ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e00c      	b.n	8001fb8 <NFC_TT4_CloseNDEFSession+0x48>
    }
    NDEFSessionOpenID = NDEF_SESSION_CLOSED;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <NFC_TT4_CloseNDEFSession+0x50>)
 8001fa0:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <NFC_TT4_CloseNDEFSession+0x54>)
 8001fa2:	601a      	str	r2, [r3, #0]
    
    return SUCCESS;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e007      	b.n	8001fb8 <NFC_TT4_CloseNDEFSession+0x48>
  }
  else if(NDEFSessionOpenID == NDEF_SESSION_CLOSED)
 8001fa8:	4b05      	ldr	r3, [pc, #20]	; (8001fc0 <NFC_TT4_CloseNDEFSession+0x50>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <NFC_TT4_CloseNDEFSession+0x54>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d101      	bne.n	8001fb6 <NFC_TT4_CloseNDEFSession+0x46>
  {
    /* Not an error as session is already closed */
    return SUCCESS;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e000      	b.n	8001fb8 <NFC_TT4_CloseNDEFSession+0x48>
  }

  return ERROR;
 8001fb6:	2301      	movs	r3, #1
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3710      	adds	r7, #16
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	20000004 	.word	0x20000004
 8001fc4:	deadbeef 	.word	0xdeadbeef

08001fc8 <NFC_TT4_ReadData>:
  * @param  DataSize : Number of byte to read
  * @param  pData : pointer on buffer to store read data
  * @retval Status (SW1&SW2) : Status of the operation. 
  */
uint16_t NFC_TT4_ReadData ( uint16_t Offset , uint16_t DataSize , uint8_t* pData)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	603a      	str	r2, [r7, #0]
 8001fd2:	80fb      	strh	r3, [r7, #6]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	80bb      	strh	r3, [r7, #4]
  uint16_t status;

  if( DataSize > M24SR_READ_MAX_NBBYTE)
 8001fd8:	88bb      	ldrh	r3, [r7, #4]
 8001fda:	2bf6      	cmp	r3, #246	; 0xf6
 8001fdc:	d928      	bls.n	8002030 <NFC_TT4_ReadData+0x68>
  {
    do
    {
      status = M24SR_ReadBinary (M24SR_I2C_ADDR, Offset, M24SR_READ_MAX_NBBYTE , pData);
 8001fde:	88f9      	ldrh	r1, [r7, #6]
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	22f6      	movs	r2, #246	; 0xf6
 8001fe4:	20ac      	movs	r0, #172	; 0xac
 8001fe6:	f7ff fc1d 	bl	8001824 <M24SR_ReadBinary>
 8001fea:	4603      	mov	r3, r0
 8001fec:	81fb      	strh	r3, [r7, #14]
      Offset += M24SR_READ_MAX_NBBYTE;
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	33f6      	adds	r3, #246	; 0xf6
 8001ff2:	80fb      	strh	r3, [r7, #6]
      pData += M24SR_READ_MAX_NBBYTE;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	33f6      	adds	r3, #246	; 0xf6
 8001ff8:	603b      	str	r3, [r7, #0]
      DataSize -= M24SR_READ_MAX_NBBYTE;
 8001ffa:	88bb      	ldrh	r3, [r7, #4]
 8001ffc:	3bf6      	subs	r3, #246	; 0xf6
 8001ffe:	80bb      	strh	r3, [r7, #4]
    }while( DataSize > M24SR_READ_MAX_NBBYTE && status == M24SR_ACTION_COMPLETED);
 8002000:	88bb      	ldrh	r3, [r7, #4]
 8002002:	2bf6      	cmp	r3, #246	; 0xf6
 8002004:	d903      	bls.n	800200e <NFC_TT4_ReadData+0x46>
 8002006:	89fb      	ldrh	r3, [r7, #14]
 8002008:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800200c:	d0e7      	beq.n	8001fde <NFC_TT4_ReadData+0x16>
    if( status == M24SR_ACTION_COMPLETED && DataSize)
 800200e:	89fb      	ldrh	r3, [r7, #14]
 8002010:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002014:	d115      	bne.n	8002042 <NFC_TT4_ReadData+0x7a>
 8002016:	88bb      	ldrh	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d012      	beq.n	8002042 <NFC_TT4_ReadData+0x7a>
      status = M24SR_ReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 800201c:	88bb      	ldrh	r3, [r7, #4]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	88f9      	ldrh	r1, [r7, #6]
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	20ac      	movs	r0, #172	; 0xac
 8002026:	f7ff fbfd 	bl	8001824 <M24SR_ReadBinary>
 800202a:	4603      	mov	r3, r0
 800202c:	81fb      	strh	r3, [r7, #14]
 800202e:	e008      	b.n	8002042 <NFC_TT4_ReadData+0x7a>
  }
  else
    status = M24SR_ReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 8002030:	88bb      	ldrh	r3, [r7, #4]
 8002032:	b2da      	uxtb	r2, r3
 8002034:	88f9      	ldrh	r1, [r7, #6]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	20ac      	movs	r0, #172	; 0xac
 800203a:	f7ff fbf3 	bl	8001824 <M24SR_ReadBinary>
 800203e:	4603      	mov	r3, r0
 8002040:	81fb      	strh	r3, [r7, #14]

  return status;
 8002042:	89fb      	ldrh	r3, [r7, #14]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <NFC_TT4_ForceReadData>:
  * @param  DataSize : Number of byte to read
  * @param  pData : pointer on buffer to store read data
  * @retval Status (SW1&SW2) : Status of the operation.  
  */
uint16_t NFC_TT4_ForceReadData ( uint16_t Offset , uint16_t DataSize , uint8_t* pData)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	603a      	str	r2, [r7, #0]
 8002056:	80fb      	strh	r3, [r7, #6]
 8002058:	460b      	mov	r3, r1
 800205a:	80bb      	strh	r3, [r7, #4]
  uint16_t status;

  if( DataSize > M24SR_READ_MAX_NBBYTE)
 800205c:	88bb      	ldrh	r3, [r7, #4]
 800205e:	2bf6      	cmp	r3, #246	; 0xf6
 8002060:	d928      	bls.n	80020b4 <NFC_TT4_ForceReadData+0x68>
  {
    do
    {
      status = M24SR_STReadBinary (M24SR_I2C_ADDR, Offset, M24SR_READ_MAX_NBBYTE , pData);
 8002062:	88f9      	ldrh	r1, [r7, #6]
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	22f6      	movs	r2, #246	; 0xf6
 8002068:	20ac      	movs	r0, #172	; 0xac
 800206a:	f7ff fc4b 	bl	8001904 <M24SR_STReadBinary>
 800206e:	4603      	mov	r3, r0
 8002070:	81fb      	strh	r3, [r7, #14]
      Offset += M24SR_READ_MAX_NBBYTE;
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	33f6      	adds	r3, #246	; 0xf6
 8002076:	80fb      	strh	r3, [r7, #6]
      pData += M24SR_READ_MAX_NBBYTE;
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	33f6      	adds	r3, #246	; 0xf6
 800207c:	603b      	str	r3, [r7, #0]
      DataSize -= M24SR_READ_MAX_NBBYTE;
 800207e:	88bb      	ldrh	r3, [r7, #4]
 8002080:	3bf6      	subs	r3, #246	; 0xf6
 8002082:	80bb      	strh	r3, [r7, #4]
    }while( DataSize > M24SR_READ_MAX_NBBYTE && status == M24SR_ACTION_COMPLETED);
 8002084:	88bb      	ldrh	r3, [r7, #4]
 8002086:	2bf6      	cmp	r3, #246	; 0xf6
 8002088:	d903      	bls.n	8002092 <NFC_TT4_ForceReadData+0x46>
 800208a:	89fb      	ldrh	r3, [r7, #14]
 800208c:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002090:	d0e7      	beq.n	8002062 <NFC_TT4_ForceReadData+0x16>
    if( status == M24SR_ACTION_COMPLETED && DataSize)
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002098:	d115      	bne.n	80020c6 <NFC_TT4_ForceReadData+0x7a>
 800209a:	88bb      	ldrh	r3, [r7, #4]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <NFC_TT4_ForceReadData+0x7a>
      status = M24SR_STReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 80020a0:	88bb      	ldrh	r3, [r7, #4]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	88f9      	ldrh	r1, [r7, #6]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	20ac      	movs	r0, #172	; 0xac
 80020aa:	f7ff fc2b 	bl	8001904 <M24SR_STReadBinary>
 80020ae:	4603      	mov	r3, r0
 80020b0:	81fb      	strh	r3, [r7, #14]
 80020b2:	e008      	b.n	80020c6 <NFC_TT4_ForceReadData+0x7a>
  }
  else
    status = M24SR_STReadBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 80020b4:	88bb      	ldrh	r3, [r7, #4]
 80020b6:	b2da      	uxtb	r2, r3
 80020b8:	88f9      	ldrh	r1, [r7, #6]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	20ac      	movs	r0, #172	; 0xac
 80020be:	f7ff fc21 	bl	8001904 <M24SR_STReadBinary>
 80020c2:	4603      	mov	r3, r0
 80020c4:	81fb      	strh	r3, [r7, #14]

  return status;
 80020c6:	89fb      	ldrh	r3, [r7, #14]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <NFC_TT4_WriteData>:
  * @param  DataSize : Number of byte to read
  * @param  pData : pointer on buffer to copy in M24SR
  * @retval Status (SW1&SW2) : Status of the operation.  
  */
uint16_t NFC_TT4_WriteData ( uint16_t Offset , uint16_t DataSize , uint8_t* pData)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	603a      	str	r2, [r7, #0]
 80020da:	80fb      	strh	r3, [r7, #6]
 80020dc:	460b      	mov	r3, r1
 80020de:	80bb      	strh	r3, [r7, #4]
  uint16_t status;

  if( DataSize > M24SR_WRITE_MAX_NBBYTE)
 80020e0:	88bb      	ldrh	r3, [r7, #4]
 80020e2:	2bf6      	cmp	r3, #246	; 0xf6
 80020e4:	d928      	bls.n	8002138 <NFC_TT4_WriteData+0x68>
  {
    do
    {
      status = M24SR_UpdateBinary (M24SR_I2C_ADDR, Offset, M24SR_WRITE_MAX_NBBYTE , pData);
 80020e6:	88f9      	ldrh	r1, [r7, #6]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	22f6      	movs	r2, #246	; 0xf6
 80020ec:	20ac      	movs	r0, #172	; 0xac
 80020ee:	f7ff fc79 	bl	80019e4 <M24SR_UpdateBinary>
 80020f2:	4603      	mov	r3, r0
 80020f4:	81fb      	strh	r3, [r7, #14]
      Offset += M24SR_WRITE_MAX_NBBYTE;
 80020f6:	88fb      	ldrh	r3, [r7, #6]
 80020f8:	33f6      	adds	r3, #246	; 0xf6
 80020fa:	80fb      	strh	r3, [r7, #6]
      pData += M24SR_WRITE_MAX_NBBYTE;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	33f6      	adds	r3, #246	; 0xf6
 8002100:	603b      	str	r3, [r7, #0]
      DataSize -= M24SR_WRITE_MAX_NBBYTE;
 8002102:	88bb      	ldrh	r3, [r7, #4]
 8002104:	3bf6      	subs	r3, #246	; 0xf6
 8002106:	80bb      	strh	r3, [r7, #4]
    }while( DataSize > M24SR_WRITE_MAX_NBBYTE && status == M24SR_ACTION_COMPLETED);
 8002108:	88bb      	ldrh	r3, [r7, #4]
 800210a:	2bf6      	cmp	r3, #246	; 0xf6
 800210c:	d903      	bls.n	8002116 <NFC_TT4_WriteData+0x46>
 800210e:	89fb      	ldrh	r3, [r7, #14]
 8002110:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002114:	d0e7      	beq.n	80020e6 <NFC_TT4_WriteData+0x16>
    if( status == M24SR_ACTION_COMPLETED && DataSize)
 8002116:	89fb      	ldrh	r3, [r7, #14]
 8002118:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800211c:	d115      	bne.n	800214a <NFC_TT4_WriteData+0x7a>
 800211e:	88bb      	ldrh	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d012      	beq.n	800214a <NFC_TT4_WriteData+0x7a>
      status = M24SR_UpdateBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 8002124:	88bb      	ldrh	r3, [r7, #4]
 8002126:	b2da      	uxtb	r2, r3
 8002128:	88f9      	ldrh	r1, [r7, #6]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	20ac      	movs	r0, #172	; 0xac
 800212e:	f7ff fc59 	bl	80019e4 <M24SR_UpdateBinary>
 8002132:	4603      	mov	r3, r0
 8002134:	81fb      	strh	r3, [r7, #14]
 8002136:	e008      	b.n	800214a <NFC_TT4_WriteData+0x7a>
  }
  else
    status = M24SR_UpdateBinary (M24SR_I2C_ADDR, Offset, (uint8_t)(DataSize) , pData);
 8002138:	88bb      	ldrh	r3, [r7, #4]
 800213a:	b2da      	uxtb	r2, r3
 800213c:	88f9      	ldrh	r1, [r7, #6]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	20ac      	movs	r0, #172	; 0xac
 8002142:	f7ff fc4f 	bl	80019e4 <M24SR_UpdateBinary>
 8002146:	4603      	mov	r3, r0
 8002148:	81fb      	strh	r3, [r7, #14]

  return status;
 800214a:	89fb      	ldrh	r3, [r7, #14]
}
 800214c:	4618      	mov	r0, r3
 800214e:	3710      	adds	r7, #16
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <NDEF_IsNDEFPresent>:
  * @param  None :
  * @retval SUCCESS : There is a NDEF file stored in tag
  * @retval ERROR : No NDEF in the tag. 
  */
static uint16_t NDEF_IsNDEFPresent ( void )
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
  uint16_t FileSize;
  uint8_t uM24SR_NDEFHeader [0x2];
  
  /* Check NDEF existence */
  NFC_TT4_ReadData ( NDEF_SIZE_OFFSET , 2 , uM24SR_NDEFHeader);
 800215a:	1d3b      	adds	r3, r7, #4
 800215c:	461a      	mov	r2, r3
 800215e:	2102      	movs	r1, #2
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff ff31 	bl	8001fc8 <NFC_TT4_ReadData>
  FileSize = (uint16_t) ((uM24SR_NDEFHeader[0x00]<<8) | uM24SR_NDEFHeader[0x01]);
 8002166:	793b      	ldrb	r3, [r7, #4]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	b21a      	sxth	r2, r3
 800216c:	797b      	ldrb	r3, [r7, #5]
 800216e:	b21b      	sxth	r3, r3
 8002170:	4313      	orrs	r3, r2
 8002172:	b21b      	sxth	r3, r3
 8002174:	80fb      	strh	r3, [r7, #6]
  
  if( FileSize != 0)
 8002176:	88fb      	ldrh	r3, [r7, #6]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <NDEF_IsNDEFPresent+0x2c>
    return NDEF_SUCCESS;
 800217c:	2300      	movs	r3, #0
 800217e:	e000      	b.n	8002182 <NDEF_IsNDEFPresent+0x2e>
  else
    return NDEF_ERROR;  
 8002180:	2301      	movs	r3, #1
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <NDEF_IdentifySPRecord>:
  * @param  pRecordStruct : pointer on the record structure to fill
  * @param  pPayload : pointer on the payload
  * @retval Status : Status of the operation.
  */
static uint16_t NDEF_IdentifySPRecord ( sRecordInfo *pRecordStruct, uint8_t* pPayload )
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	81fb      	strh	r3, [r7, #14]
  uint16_t SizeOfRecordHeader, TypeNbByte, PayloadLengthField, IDLengthField, IDNbByte;
  
  /* Is ID length field present */
  if( (*pPayload)&IL_Mask)
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f003 0308 	and.w	r3, r3, #8
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d002      	beq.n	80021aa <NDEF_IdentifySPRecord+0x20>
  {
    IDLengthField = ID_LENGTH_FIELD;
 80021a4:	2301      	movs	r3, #1
 80021a6:	827b      	strh	r3, [r7, #18]
 80021a8:	e001      	b.n	80021ae <NDEF_IdentifySPRecord+0x24>
  }
  else
  {
    IDLengthField = 0;
 80021aa:	2300      	movs	r3, #0
 80021ac:	827b      	strh	r3, [r7, #18]
  }
  
  /* it's a SR */
  if( (*pPayload)&SR_Mask)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d010      	beq.n	80021dc <NDEF_IdentifySPRecord+0x52>
  {
    TypeNbByte = pPayload[1];
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 1;
 80021c2:	2301      	movs	r3, #1
 80021c4:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 80021c6:	8a7b      	ldrh	r3, [r7, #18]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d104      	bne.n	80021d6 <NDEF_IdentifySPRecord+0x4c>
      IDNbByte = pPayload[3];
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	3303      	adds	r3, #3
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	823b      	strh	r3, [r7, #16]
 80021d4:	e012      	b.n	80021fc <NDEF_IdentifySPRecord+0x72>
    else
      IDNbByte = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	823b      	strh	r3, [r7, #16]
 80021da:	e00f      	b.n	80021fc <NDEF_IdentifySPRecord+0x72>
  }
  else
  {
    TypeNbByte = pPayload[1];
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	3301      	adds	r3, #1
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 4;
 80021e4:	2304      	movs	r3, #4
 80021e6:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 80021e8:	8a7b      	ldrh	r3, [r7, #18]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d104      	bne.n	80021f8 <NDEF_IdentifySPRecord+0x6e>
      IDNbByte = pPayload[6];
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	3306      	adds	r3, #6
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	823b      	strh	r3, [r7, #16]
 80021f6:	e001      	b.n	80021fc <NDEF_IdentifySPRecord+0x72>
    else
      IDNbByte = 0;
 80021f8:	2300      	movs	r3, #0
 80021fa:	823b      	strh	r3, [r7, #16]
  }
  
  SizeOfRecordHeader = RECORD_FLAG_FIELD + TYPE_LENGTH_FIELD + PayloadLengthField + IDLengthField + TypeNbByte + IDNbByte;
 80021fc:	8aba      	ldrh	r2, [r7, #20]
 80021fe:	8a7b      	ldrh	r3, [r7, #18]
 8002200:	4413      	add	r3, r2
 8002202:	b29a      	uxth	r2, r3
 8002204:	8afb      	ldrh	r3, [r7, #22]
 8002206:	4413      	add	r3, r2
 8002208:	b29a      	uxth	r2, r3
 800220a:	8a3b      	ldrh	r3, [r7, #16]
 800220c:	4413      	add	r3, r2
 800220e:	b29b      	uxth	r3, r3
 8002210:	3302      	adds	r3, #2
 8002212:	81bb      	strh	r3, [r7, #12]
  
  /* it's a SR */
  if( pPayload[0]&SR_Mask)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f003 0310 	and.w	r3, r3, #16
 800221c:	2b00      	cmp	r3, #0
 800221e:	d036      	beq.n	800228e <NDEF_IdentifySPRecord+0x104>
  {
    pRecordStruct->RecordFlags = pPayload[0];
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	781a      	ldrb	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 8002228:	8afb      	ldrh	r3, [r7, #22]
 800222a:	b2da      	uxtb	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = 0;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = 0;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = 0;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pPayload[2];
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	789a      	ldrb	r2, [r3, #2]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 800224a:	8a3b      	ldrh	r3, [r7, #16]
 800224c:	b2da      	uxtb	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pPayload[3+IDNbByte] , TypeNbByte);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	1dd8      	adds	r0, r3, #7
 8002256:	8a3b      	ldrh	r3, [r7, #16]
 8002258:	3303      	adds	r3, #3
 800225a:	461a      	mov	r2, r3
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4413      	add	r3, r2
 8002260:	8afa      	ldrh	r2, [r7, #22]
 8002262:	4619      	mov	r1, r3
 8002264:	f010 fc7c 	bl	8012b60 <memcpy>
    memcpy(pRecordStruct->ID, &pPayload[3+IDNbByte+TypeNbByte] , IDNbByte);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	f503 7083 	add.w	r0, r3, #262	; 0x106
 800226e:	8a3b      	ldrh	r3, [r7, #16]
 8002270:	1cda      	adds	r2, r3, #3
 8002272:	8afb      	ldrh	r3, [r7, #22]
 8002274:	4413      	add	r3, r2
 8002276:	461a      	mov	r2, r3
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	4413      	add	r3, r2
 800227c:	8a3a      	ldrh	r2, [r7, #16]
 800227e:	4619      	mov	r1, r3
 8002280:	f010 fc6e 	bl	8012b60 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	89ba      	ldrh	r2, [r7, #12]
 8002288:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800228c:	e038      	b.n	8002300 <NDEF_IdentifySPRecord+0x176>
  }
  else
  {
    pRecordStruct->RecordFlags = pPayload[0];
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 8002296:	8afb      	ldrh	r3, [r7, #22]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = pPayload[2];
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	789a      	ldrb	r2, [r3, #2]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = pPayload[3];
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	78da      	ldrb	r2, [r3, #3]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = pPayload[4];
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	791a      	ldrb	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pPayload[5];
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	795a      	ldrb	r2, [r3, #5]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 80022be:	8a3b      	ldrh	r3, [r7, #16]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pPayload[6+IDNbByte] , TypeNbByte);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	1dd8      	adds	r0, r3, #7
 80022ca:	8a3b      	ldrh	r3, [r7, #16]
 80022cc:	3306      	adds	r3, #6
 80022ce:	461a      	mov	r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	4413      	add	r3, r2
 80022d4:	8afa      	ldrh	r2, [r7, #22]
 80022d6:	4619      	mov	r1, r3
 80022d8:	f010 fc42 	bl	8012b60 <memcpy>
    memcpy(pRecordStruct->ID, &pPayload[6+IDNbByte+TypeNbByte] , IDNbByte);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f503 7083 	add.w	r0, r3, #262	; 0x106
 80022e2:	8a3b      	ldrh	r3, [r7, #16]
 80022e4:	1d9a      	adds	r2, r3, #6
 80022e6:	8afb      	ldrh	r3, [r7, #22]
 80022e8:	4413      	add	r3, r2
 80022ea:	461a      	mov	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	8a3a      	ldrh	r2, [r7, #16]
 80022f2:	4619      	mov	r1, r3
 80022f4:	f010 fc34 	bl	8012b60 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	89ba      	ldrh	r2, [r7, #12]
 80022fc:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }
  
  pRecordStruct->PayloadBufferAdd = (uint32_t)(pPayload+SizeOfRecordHeader);
 8002300:	89bb      	ldrh	r3, [r7, #12]
 8002302:	683a      	ldr	r2, [r7, #0]
 8002304:	4413      	add	r3, r2
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  
  status = NDEF_ParseRecordHeader(pRecordStruct);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 f807 	bl	8002322 <NDEF_ParseRecordHeader>
 8002314:	4603      	mov	r3, r0
 8002316:	81fb      	strh	r3, [r7, #14]
  
  return status;
 8002318:	89fb      	ldrh	r3, [r7, #14]
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}

08002322 <NDEF_ParseRecordHeader>:
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval SUCCESS : record identified and structure filled
  * @retval ERROR : Not supported 
  */
static uint16_t NDEF_ParseRecordHeader ( sRecordInfo *pRecordStruct )
{ 
 8002322:	b580      	push	{r7, lr}
 8002324:	b084      	sub	sp, #16
 8002326:	af00      	add	r7, sp, #0
 8002328:	6078      	str	r0, [r7, #4]
  uint16_t  status = NDEF_SUCCESS;
 800232a:	2300      	movs	r3, #0
 800232c:	81fb      	strh	r3, [r7, #14]
  
  switch( (pRecordStruct->RecordFlags&TNF_Mask))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	2b04      	cmp	r3, #4
 8002338:	d00e      	beq.n	8002358 <NDEF_ParseRecordHeader+0x36>
 800233a:	2b04      	cmp	r3, #4
 800233c:	dc10      	bgt.n	8002360 <NDEF_ParseRecordHeader+0x3e>
 800233e:	2b01      	cmp	r3, #1
 8002340:	d002      	beq.n	8002348 <NDEF_ParseRecordHeader+0x26>
 8002342:	2b02      	cmp	r3, #2
 8002344:	d004      	beq.n	8002350 <NDEF_ParseRecordHeader+0x2e>
 8002346:	e00b      	b.n	8002360 <NDEF_ParseRecordHeader+0x3e>
  {
  case TNF_WellKnown:
    NDEF_ParseWellKnownType ( pRecordStruct );
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 f815 	bl	8002378 <NDEF_ParseWellKnownType>
    break;      
 800234e:	e00d      	b.n	800236c <NDEF_ParseRecordHeader+0x4a>
    
  case TNF_MediaType:
    NDEF_ParseMediaType ( pRecordStruct );
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f000 f879 	bl	8002448 <NDEF_ParseMediaType>
    break;
 8002356:	e009      	b.n	800236c <NDEF_ParseRecordHeader+0x4a>
    
  case TNF_NFCForumExternal:
    NDEF_ParseForumExternalType ( pRecordStruct);
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 f8a5 	bl	80024a8 <NDEF_ParseForumExternalType>
    break;
 800235e:	e005      	b.n	800236c <NDEF_ParseRecordHeader+0x4a>
    
  default:
    /* currently not supported or unknown*/
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
    status = NDEF_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	81fb      	strh	r3, [r7, #14]
  }
  return status;
 800236c:	89fb      	ldrh	r3, [r7, #14]
}  
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <NDEF_ParseWellKnownType>:
  * @brief  This fonction parse the Well Known type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseWellKnownType ( sRecordInfo *pRecordStruct )
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b084      	sub	sp, #16
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint8_t* pPayload;
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002386:	60fb      	str	r3, [r7, #12]
  
  if( !memcmp( &(pRecordStruct->Type), SMART_POSTER_TYPE_STRING, pRecordStruct->TypeLength))
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	1dd8      	adds	r0, r3, #7
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	785b      	ldrb	r3, [r3, #1]
 8002390:	461a      	mov	r2, r3
 8002392:	492a      	ldr	r1, [pc, #168]	; (800243c <NDEF_ParseWellKnownType+0xc4>)
 8002394:	f010 fbd6 	bl	8012b44 <memcmp>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d107      	bne.n	80023ae <NDEF_ParseWellKnownType+0x36>
  { 
    /* special case where  we have to parse others records */
    pRecordStruct->NDEF_Type = SMARTPOSTER_TYPE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2206      	movs	r2, #6
 80023a2:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
    NDEF_ParseSP(pRecordStruct);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8ce 	bl	8002548 <NDEF_ParseSP>
    pRecordStruct->NDEF_Type = TEXT_TYPE;
  }    
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
  
}
 80023ac:	e042      	b.n	8002434 <NDEF_ParseWellKnownType+0xbc>
  else if( !memcmp( &(pRecordStruct->Type), URI_TYPE_STRING, pRecordStruct->TypeLength))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	1dd8      	adds	r0, r3, #7
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	785b      	ldrb	r3, [r3, #1]
 80023b6:	461a      	mov	r2, r3
 80023b8:	4921      	ldr	r1, [pc, #132]	; (8002440 <NDEF_ParseWellKnownType+0xc8>)
 80023ba:	f010 fbc3 	bl	8012b44 <memcmp>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d122      	bne.n	800240a <NDEF_ParseWellKnownType+0x92>
    if( *pPayload == URI_ID_0x00) 
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d103      	bne.n	80023d4 <NDEF_ParseWellKnownType+0x5c>
      NDEF_ParseURI(pRecordStruct);
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 f889 	bl	80024e4 <NDEF_ParseURI>
}
 80023d2:	e02f      	b.n	8002434 <NDEF_ParseWellKnownType+0xbc>
    else if ( *pPayload > URI_ID_0x00 && *pPayload < URI_RFU ) 
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d011      	beq.n	8002400 <NDEF_ParseWellKnownType+0x88>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b23      	cmp	r3, #35	; 0x23
 80023e2:	d80d      	bhi.n	8002400 <NDEF_ParseWellKnownType+0x88>
      if ( *pPayload == (uint8_t) URI_ID_0x06)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b06      	cmp	r3, #6
 80023ea:	d104      	bne.n	80023f6 <NDEF_ParseWellKnownType+0x7e>
        pRecordStruct->NDEF_Type = URI_EMAIL_TYPE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2205      	movs	r2, #5
 80023f0:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
      if ( *pPayload == (uint8_t) URI_ID_0x06)
 80023f4:	e01e      	b.n	8002434 <NDEF_ParseWellKnownType+0xbc>
        pRecordStruct->NDEF_Type = WELL_KNOWN_ABRIDGED_URI_TYPE;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2202      	movs	r2, #2
 80023fa:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
      if ( *pPayload == (uint8_t) URI_ID_0x06)
 80023fe:	e019      	b.n	8002434 <NDEF_ParseWellKnownType+0xbc>
      pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002408:	e014      	b.n	8002434 <NDEF_ParseWellKnownType+0xbc>
  else if( !memcmp( &(pRecordStruct->Type), TEXT_TYPE_STRING, pRecordStruct->TypeLength))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	1dd8      	adds	r0, r3, #7
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	461a      	mov	r2, r3
 8002414:	490b      	ldr	r1, [pc, #44]	; (8002444 <NDEF_ParseWellKnownType+0xcc>)
 8002416:	f010 fb95 	bl	8012b44 <memcmp>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d104      	bne.n	800242a <NDEF_ParseWellKnownType+0xb2>
    pRecordStruct->NDEF_Type = TEXT_TYPE;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2208      	movs	r2, #8
 8002424:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002428:	e004      	b.n	8002434 <NDEF_ParseWellKnownType+0xbc>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002432:	e7ff      	b.n	8002434 <NDEF_ParseWellKnownType+0xbc>
 8002434:	bf00      	nop
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	08015a24 	.word	0x08015a24
 8002440:	08015a28 	.word	0x08015a28
 8002444:	08015a2c 	.word	0x08015a2c

08002448 <NDEF_ParseMediaType>:
  * @brief  This fonction parse the Media type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseMediaType ( sRecordInfo *pRecordStruct )
{  
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  if( !memcmp( &(pRecordStruct->Type), VCARD_TYPE_STRING, pRecordStruct->TypeLength))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	1dd8      	adds	r0, r3, #7
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	785b      	ldrb	r3, [r3, #1]
 8002458:	461a      	mov	r2, r3
 800245a:	4911      	ldr	r1, [pc, #68]	; (80024a0 <NDEF_ParseMediaType+0x58>)
 800245c:	f010 fb72 	bl	8012b44 <memcmp>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d104      	bne.n	8002470 <NDEF_ParseMediaType+0x28>
    pRecordStruct->NDEF_Type = VCARD_TYPE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
  else if( !memcmp( &(pRecordStruct->Type), XVCARD_TYPE_STRING, pRecordStruct->TypeLength))
    pRecordStruct->NDEF_Type = VCARD_TYPE;
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
}
 800246e:	e013      	b.n	8002498 <NDEF_ParseMediaType+0x50>
  else if( !memcmp( &(pRecordStruct->Type), XVCARD_TYPE_STRING, pRecordStruct->TypeLength))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	1dd8      	adds	r0, r3, #7
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	785b      	ldrb	r3, [r3, #1]
 8002478:	461a      	mov	r2, r3
 800247a:	490a      	ldr	r1, [pc, #40]	; (80024a4 <NDEF_ParseMediaType+0x5c>)
 800247c:	f010 fb62 	bl	8012b44 <memcmp>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d104      	bne.n	8002490 <NDEF_ParseMediaType+0x48>
    pRecordStruct->NDEF_Type = VCARD_TYPE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 800248e:	e003      	b.n	8002498 <NDEF_ParseMediaType+0x50>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	08015a30 	.word	0x08015a30
 80024a4:	08015a3c 	.word	0x08015a3c

080024a8 <NDEF_ParseForumExternalType>:
  * @brief  This fonction parse the Forum External type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseForumExternalType ( sRecordInfo *pRecordStruct )
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  if( !memcmp( &(pRecordStruct->Type), M24SR_DISCOVERY_APP_STRING, pRecordStruct->TypeLength))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	1dd8      	adds	r0, r3, #7
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	785b      	ldrb	r3, [r3, #1]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4909      	ldr	r1, [pc, #36]	; (80024e0 <NDEF_ParseForumExternalType+0x38>)
 80024bc:	f010 fb42 	bl	8012b44 <memcmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d104      	bne.n	80024d0 <NDEF_ParseForumExternalType+0x28>
    pRecordStruct->NDEF_Type = M24SR_DISCOVERY_APP_TYPE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	220a      	movs	r2, #10
 80024ca:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
}
 80024ce:	e003      	b.n	80024d8 <NDEF_ParseForumExternalType+0x30>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 80024d8:	bf00      	nop
 80024da:	3708      	adds	r7, #8
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	08015a4c 	.word	0x08015a4c

080024e4 <NDEF_ParseURI>:
  * @brief  This fonction parse the URI type record
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseURI(sRecordInfo *pRecordStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint8_t* pPayload;
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80024f2:	60fb      	str	r3, [r7, #12]
  pPayload ++; /* to skip URI identifier first URI payload byte */
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	3301      	adds	r3, #1
 80024f8:	60fb      	str	r3, [r7, #12]
  
  if( !memcmp( pPayload, SMS_TYPE_STRING, strlen(SMS_TYPE_STRING)) )
 80024fa:	2204      	movs	r2, #4
 80024fc:	4910      	ldr	r1, [pc, #64]	; (8002540 <NDEF_ParseURI+0x5c>)
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f010 fb20 	bl	8012b44 <memcmp>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d104      	bne.n	8002514 <NDEF_ParseURI+0x30>
  { 
    pRecordStruct->NDEF_Type = URI_SMS_TYPE;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2203      	movs	r2, #3
 800250e:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
    pRecordStruct->NDEF_Type = URI_GEO_TYPE;
  }
  else
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
  
}
 8002512:	e010      	b.n	8002536 <NDEF_ParseURI+0x52>
  else if( !memcmp( pPayload, GEO_TYPE_STRING, strlen(GEO_TYPE_STRING)) )
 8002514:	2204      	movs	r2, #4
 8002516:	490b      	ldr	r1, [pc, #44]	; (8002544 <NDEF_ParseURI+0x60>)
 8002518:	68f8      	ldr	r0, [r7, #12]
 800251a:	f010 fb13 	bl	8012b44 <memcmp>
 800251e:	4603      	mov	r3, r0
 8002520:	2b00      	cmp	r3, #0
 8002522:	d104      	bne.n	800252e <NDEF_ParseURI+0x4a>
    pRecordStruct->NDEF_Type = URI_GEO_TYPE;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2204      	movs	r2, #4
 8002528:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 800252c:	e003      	b.n	8002536 <NDEF_ParseURI+0x52>
    pRecordStruct->NDEF_Type = UNKNOWN_TYPE;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
}
 8002536:	bf00      	nop
 8002538:	3710      	adds	r7, #16
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	08015a6c 	.word	0x08015a6c
 8002544:	08015a74 	.word	0x08015a74

08002548 <NDEF_ParseSP>:
  * @brief  This fonction parse the Smart Poster 
  * @param  pRecordStruct : pointer on the record structure to fill
  * @retval None 
  */
static void NDEF_ParseSP(sRecordInfo *pRecordStruct)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b088      	sub	sp, #32
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint8_t* pPayload;
  uint32_t PayloadSize = 0;
 8002550:	2300      	movs	r3, #0
 8002552:	613b      	str	r3, [r7, #16]
  uint32_t SPPayloadSize = 0;
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
  uint32_t OffsetInSPPayload =0;
 8002558:	2300      	movs	r3, #0
 800255a:	61bb      	str	r3, [r7, #24]
  uint32_t RecordPosition = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  sRecordInfo *pSPRecordStruct;
  
  /* initialize variable with size of the payload and poiter on data */
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	789b      	ldrb	r3, [r3, #2]
 8002564:	061a      	lsls	r2, r3, #24
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	78db      	ldrb	r3, [r3, #3]
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	791b      	ldrb	r3, [r3, #4]
 8002572:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002574:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002584:	61fb      	str	r3, [r7, #28]
  
  pSPRecordStruct = (sRecordInfo *)SPRecordStructAdd[0];
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <NDEF_ParseSP+0xd4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	60bb      	str	r3, [r7, #8]
  
  /* Initailize the number of record find in the SP payload */
  pRecordStruct->NbOfRecordInSPPayload = 0;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
  
  do
  {
    pSPRecordStruct = (sRecordInfo *)SPRecordStructAdd[RecordPosition];
 8002594:	4a21      	ldr	r2, [pc, #132]	; (800261c <NDEF_ParseSP+0xd4>)
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259c:	60bb      	str	r3, [r7, #8]
    /* identify the 1st record in the SP payload */
    if( NDEF_IdentifySPRecord ( pSPRecordStruct, pPayload ))
 800259e:	69f9      	ldr	r1, [r7, #28]
 80025a0:	68b8      	ldr	r0, [r7, #8]
 80025a2:	f7ff fdf2 	bl	800218a <NDEF_IdentifySPRecord>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d02c      	beq.n	8002606 <NDEF_ParseSP+0xbe>
    {
      /* store add of structure that will contain the other record information */
      pRecordStruct->NbOfRecordInSPPayload ++;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
      pRecordStruct->SPRecordStructAdd[RecordPosition] = (void *) pSPRecordStruct;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	3284      	adds	r2, #132	; 0x84
 80025c2:	68b9      	ldr	r1, [r7, #8]
 80025c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      
      /* After SPRecord + First Record check if we are at the end of NDEF file */
      SPPayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	789b      	ldrb	r3, [r3, #2]
 80025cc:	061a      	lsls	r2, r3, #24
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	78db      	ldrb	r3, [r3, #3]
 80025d2:	041b      	lsls	r3, r3, #16
 80025d4:	431a      	orrs	r2, r3
        ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	791b      	ldrb	r3, [r3, #4]
 80025da:	021b      	lsls	r3, r3, #8
      SPPayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80025dc:	4313      	orrs	r3, r2
        ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 80025de:	68ba      	ldr	r2, [r7, #8]
 80025e0:	7952      	ldrb	r2, [r2, #5]
      SPPayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]
      
      OffsetInSPPayload += pSPRecordStruct->PayloadOffset + SPPayloadSize;
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80025ec:	461a      	mov	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	4413      	add	r3, r2
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4413      	add	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      pPayload += OffsetInSPPayload;
 80025f8:	69fa      	ldr	r2, [r7, #28]
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	4413      	add	r3, r2
 80025fe:	61fb      	str	r3, [r7, #28]
      RecordPosition++;    
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	3301      	adds	r3, #1
 8002604:	617b      	str	r3, [r7, #20]
    }
  }
  while(  OffsetInSPPayload < PayloadSize && RecordPosition<SP_MAX_RECORD); /* there is another record */
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	429a      	cmp	r2, r3
 800260c:	d202      	bcs.n	8002614 <NDEF_ParseSP+0xcc>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b02      	cmp	r3, #2
 8002612:	d9bf      	bls.n	8002594 <NDEF_ParseSP+0x4c>
  
}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	2000000c 	.word	0x2000000c

08002620 <NDEF_IdentifyNDEF>:
  * @retval SUCCESS : record struct filled
  * @retval ERROR : record struct not updated
  */

uint16_t NDEF_IdentifyNDEF ( sRecordInfo *pRecordStruct, uint8_t* pNDEF )
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	81fb      	strh	r3, [r7, #14]
  uint16_t SizeOfRecordHeader, TypeNbByte, PayloadLengthField, IDLengthField, IDNbByte;
  uint32_t PayloadSize;
  
  /* check NDEF present */
  if(NDEF_IsNDEFPresent() != NDEF_SUCCESS)
 800262e:	f7ff fd91 	bl	8002154 <NDEF_IsNDEFPresent>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <NDEF_IdentifyNDEF+0x1c>
  {
    return NDEF_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e0f2      	b.n	8002822 <NDEF_IdentifyNDEF+0x202>
  }
  
  /* Analyse record layout */
  NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , 1 , pNDEF);
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	2101      	movs	r1, #1
 8002640:	2002      	movs	r0, #2
 8002642:	f7ff fcc1 	bl	8001fc8 <NFC_TT4_ReadData>
  
  /* Is ID length field present */
  if( (*pNDEF)&IL_Mask)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	f003 0308 	and.w	r3, r3, #8
 800264e:	2b00      	cmp	r3, #0
 8002650:	d002      	beq.n	8002658 <NDEF_IdentifyNDEF+0x38>
  {
    IDLengthField = ID_LENGTH_FIELD;
 8002652:	2301      	movs	r3, #1
 8002654:	827b      	strh	r3, [r7, #18]
 8002656:	e001      	b.n	800265c <NDEF_IdentifyNDEF+0x3c>
  }
  else
  {
    IDLengthField = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	827b      	strh	r3, [r7, #18]
  }
  
  /* it's a SR */
  if( (*pNDEF)&SR_Mask)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	f003 0310 	and.w	r3, r3, #16
 8002664:	2b00      	cmp	r3, #0
 8002666:	d015      	beq.n	8002694 <NDEF_IdentifyNDEF+0x74>
  {
    /* Analyse short record layout */
    NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , 4 , pNDEF);
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	2104      	movs	r1, #4
 800266c:	2002      	movs	r0, #2
 800266e:	f7ff fcab 	bl	8001fc8 <NFC_TT4_ReadData>
    TypeNbByte = pNDEF[1];
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	3301      	adds	r3, #1
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 1;
 800267a:	2301      	movs	r3, #1
 800267c:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 800267e:	8a7b      	ldrh	r3, [r7, #18]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d104      	bne.n	800268e <NDEF_IdentifyNDEF+0x6e>
      IDNbByte = pNDEF[3];
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	3303      	adds	r3, #3
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	823b      	strh	r3, [r7, #16]
 800268c:	e017      	b.n	80026be <NDEF_IdentifyNDEF+0x9e>
    else
      IDNbByte = 0;
 800268e:	2300      	movs	r3, #0
 8002690:	823b      	strh	r3, [r7, #16]
 8002692:	e014      	b.n	80026be <NDEF_IdentifyNDEF+0x9e>
  }
  else
  {
    /* Analyse normal record layout */
    NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , 7 , pNDEF);
 8002694:	683a      	ldr	r2, [r7, #0]
 8002696:	2107      	movs	r1, #7
 8002698:	2002      	movs	r0, #2
 800269a:	f7ff fc95 	bl	8001fc8 <NFC_TT4_ReadData>
    TypeNbByte = pNDEF[1];
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	82fb      	strh	r3, [r7, #22]
    PayloadLengthField = 4;
 80026a6:	2304      	movs	r3, #4
 80026a8:	82bb      	strh	r3, [r7, #20]
    if( IDLengthField == ID_LENGTH_FIELD)
 80026aa:	8a7b      	ldrh	r3, [r7, #18]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d104      	bne.n	80026ba <NDEF_IdentifyNDEF+0x9a>
      IDNbByte = pNDEF[6];
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3306      	adds	r3, #6
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	823b      	strh	r3, [r7, #16]
 80026b8:	e001      	b.n	80026be <NDEF_IdentifyNDEF+0x9e>
    else
      IDNbByte = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	823b      	strh	r3, [r7, #16]
  }
  
  SizeOfRecordHeader = RECORD_FLAG_FIELD + TYPE_LENGTH_FIELD + PayloadLengthField + IDLengthField + TypeNbByte + IDNbByte;
 80026be:	8aba      	ldrh	r2, [r7, #20]
 80026c0:	8a7b      	ldrh	r3, [r7, #18]
 80026c2:	4413      	add	r3, r2
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	8afb      	ldrh	r3, [r7, #22]
 80026c8:	4413      	add	r3, r2
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	8a3b      	ldrh	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	3302      	adds	r3, #2
 80026d4:	81bb      	strh	r3, [r7, #12]
  
  /* Read record header */
  NFC_TT4_ReadData ( FIRST_RECORD_OFFSET , SizeOfRecordHeader , pNDEF);
 80026d6:	89bb      	ldrh	r3, [r7, #12]
 80026d8:	683a      	ldr	r2, [r7, #0]
 80026da:	4619      	mov	r1, r3
 80026dc:	2002      	movs	r0, #2
 80026de:	f7ff fc73 	bl	8001fc8 <NFC_TT4_ReadData>
  /* it's a SR */
  if( pNDEF[0]&SR_Mask)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d036      	beq.n	800275c <NDEF_IdentifyNDEF+0x13c>
  {
    pRecordStruct->RecordFlags = pNDEF[0];
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	781a      	ldrb	r2, [r3, #0]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 80026f6:	8afb      	ldrh	r3, [r7, #22]
 80026f8:	b2da      	uxtb	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = 0;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = 0;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = 0;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pNDEF[2];
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	789a      	ldrb	r2, [r3, #2]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 8002718:	8a3b      	ldrh	r3, [r7, #16]
 800271a:	b2da      	uxtb	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pNDEF[3+IDNbByte] , TypeNbByte);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	1dd8      	adds	r0, r3, #7
 8002724:	8a3b      	ldrh	r3, [r7, #16]
 8002726:	3303      	adds	r3, #3
 8002728:	461a      	mov	r2, r3
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	4413      	add	r3, r2
 800272e:	8afa      	ldrh	r2, [r7, #22]
 8002730:	4619      	mov	r1, r3
 8002732:	f010 fa15 	bl	8012b60 <memcpy>
    memcpy(pRecordStruct->ID, &pNDEF[3+IDNbByte+TypeNbByte] , IDNbByte);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	f503 7083 	add.w	r0, r3, #262	; 0x106
 800273c:	8a3b      	ldrh	r3, [r7, #16]
 800273e:	1cda      	adds	r2, r3, #3
 8002740:	8afb      	ldrh	r3, [r7, #22]
 8002742:	4413      	add	r3, r2
 8002744:	461a      	mov	r2, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	4413      	add	r3, r2
 800274a:	8a3a      	ldrh	r2, [r7, #16]
 800274c:	4619      	mov	r1, r3
 800274e:	f010 fa07 	bl	8012b60 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	89ba      	ldrh	r2, [r7, #12]
 8002756:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
 800275a:	e038      	b.n	80027ce <NDEF_IdentifyNDEF+0x1ae>
  }
  else
  {
    pRecordStruct->RecordFlags = pNDEF[0];
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	781a      	ldrb	r2, [r3, #0]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	701a      	strb	r2, [r3, #0]
    pRecordStruct->TypeLength = TypeNbByte;
 8002764:	8afb      	ldrh	r3, [r7, #22]
 8002766:	b2da      	uxtb	r2, r3
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	705a      	strb	r2, [r3, #1]
    pRecordStruct->PayloadLength3 = pNDEF[2];
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	789a      	ldrb	r2, [r3, #2]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	709a      	strb	r2, [r3, #2]
    pRecordStruct->PayloadLength2 = pNDEF[3];
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	78da      	ldrb	r2, [r3, #3]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	70da      	strb	r2, [r3, #3]
    pRecordStruct->PayloadLength1 = pNDEF[4];
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	791a      	ldrb	r2, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	711a      	strb	r2, [r3, #4]
    pRecordStruct->PayloadLength0 = pNDEF[5];
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	795a      	ldrb	r2, [r3, #5]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	715a      	strb	r2, [r3, #5]
    pRecordStruct->IDLength = IDNbByte;
 800278c:	8a3b      	ldrh	r3, [r7, #16]
 800278e:	b2da      	uxtb	r2, r3
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	719a      	strb	r2, [r3, #6]
    memcpy(pRecordStruct->Type, &pNDEF[6+IDNbByte] , TypeNbByte);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	1dd8      	adds	r0, r3, #7
 8002798:	8a3b      	ldrh	r3, [r7, #16]
 800279a:	3306      	adds	r3, #6
 800279c:	461a      	mov	r2, r3
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	4413      	add	r3, r2
 80027a2:	8afa      	ldrh	r2, [r7, #22]
 80027a4:	4619      	mov	r1, r3
 80027a6:	f010 f9db 	bl	8012b60 <memcpy>
    memcpy(pRecordStruct->ID, &pNDEF[6+IDNbByte+TypeNbByte] , IDNbByte);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f503 7083 	add.w	r0, r3, #262	; 0x106
 80027b0:	8a3b      	ldrh	r3, [r7, #16]
 80027b2:	1d9a      	adds	r2, r3, #6
 80027b4:	8afb      	ldrh	r3, [r7, #22]
 80027b6:	4413      	add	r3, r2
 80027b8:	461a      	mov	r2, r3
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	4413      	add	r3, r2
 80027be:	8a3a      	ldrh	r2, [r7, #16]
 80027c0:	4619      	mov	r1, r3
 80027c2:	f010 f9cd 	bl	8012b60 <memcpy>
    pRecordStruct->PayloadOffset = SizeOfRecordHeader;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	89ba      	ldrh	r2, [r7, #12]
 80027ca:	f8a3 2206 	strh.w	r2, [r3, #518]	; 0x206
  }
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	789b      	ldrb	r3, [r3, #2]
 80027d2:	061a      	lsls	r2, r3, #24
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	78db      	ldrb	r3, [r3, #3]
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	791b      	ldrb	r3, [r3, #4]
 80027e0:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80027e2:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  
  /* read Payload */
  status = NFC_TT4_ReadData ( (uint16_t)((FIRST_RECORD_OFFSET) + pRecordStruct->PayloadOffset) , PayloadSize , pNDEF);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8b3 3206 	ldrh.w	r3, [r3, #518]	; 0x206
 80027f2:	3302      	adds	r3, #2
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	b291      	uxth	r1, r2
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fbe3 	bl	8001fc8 <NFC_TT4_ReadData>
 8002802:	4603      	mov	r3, r0
 8002804:	81fb      	strh	r3, [r7, #14]
  
  if( status != NFC_TT4_ACTION_COMPLETED)
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800280c:	d001      	beq.n	8002812 <NDEF_IdentifyNDEF+0x1f2>
    return status;
 800280e:	89fb      	ldrh	r3, [r7, #14]
 8002810:	e007      	b.n	8002822 <NDEF_IdentifyNDEF+0x202>
  else
    pRecordStruct->PayloadBufferAdd = (uint32_t)(pNDEF);
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  
  NDEF_ParseRecordHeader(pRecordStruct);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7ff fd81 	bl	8002322 <NDEF_ParseRecordHeader>
  
  return NDEF_SUCCESS;
 8002820:	2300      	movs	r3, #0
}  
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <NDEF_WriteNDEF>:
  * @param  pNDEF : pointer on the buffer containing the NDEF data
  * @retval SUCCESS : NDEF file data written in the tag
  * @retval ERROR : not able to store NDEF in tag
  */
uint16_t NDEF_WriteNDEF( uint8_t *pNDEF)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b084      	sub	sp, #16
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	81fb      	strh	r3, [r7, #14]
  uint16_t NDEF_Size = 0;
 8002836:	2300      	movs	r3, #0
 8002838:	81bb      	strh	r3, [r7, #12]
  
  NDEF_Size = (uint16_t) (*pNDEF << 8);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	b29b      	uxth	r3, r3
 8002840:	021b      	lsls	r3, r3, #8
 8002842:	81bb      	strh	r3, [r7, #12]
  NDEF_Size = NDEF_Size | (uint16_t) (*++pNDEF );
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3301      	adds	r3, #1
 8002848:	607b      	str	r3, [r7, #4]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	b29a      	uxth	r2, r3
 8002850:	89bb      	ldrh	r3, [r7, #12]
 8002852:	4313      	orrs	r3, r2
 8002854:	81bb      	strh	r3, [r7, #12]
  
  status = NFC_TT4_WriteData( 0 , NDEF_Size+2 , --pNDEF);
 8002856:	89bb      	ldrh	r3, [r7, #12]
 8002858:	3302      	adds	r3, #2
 800285a:	b299      	uxth	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	3b01      	subs	r3, #1
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	2000      	movs	r0, #0
 8002866:	f7ff fc33 	bl	80020d0 <NFC_TT4_WriteData>
 800286a:	4603      	mov	r3, r0
 800286c:	81fb      	strh	r3, [r7, #14]
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8002874:	d101      	bne.n	800287a <NDEF_WriteNDEF+0x50>
    return NDEF_SUCCESS;
 8002876:	2300      	movs	r3, #0
 8002878:	e000      	b.n	800287c <NDEF_WriteNDEF+0x52>
  else
    return NDEF_ERROR;
 800287a:	2301      	movs	r3, #1
  
}
 800287c:	4618      	mov	r0, r3
 800287e:	3710      	adds	r7, #16
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}

08002884 <NDEF_AddAAR>:
  * @param  pAARStruct : pointer on structure that contain AAR information
  * @retval SUCCESS : AAR added
  * @retval ERROR : Not able to add AAR
  */
uint16_t NDEF_AddAAR ( sAARInfo *pAARStruct )
{
 8002884:	b5b0      	push	{r4, r5, r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	82fb      	strh	r3, [r7, #22]
  uint16_t DataSize;
  uint16_t Offset=0;
 8002890:	2300      	movs	r3, #0
 8002892:	817b      	strh	r3, [r7, #10]
  uint32_t AAROffset = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	613b      	str	r3, [r7, #16]
  uint16_t NDEF_Size = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	81fb      	strh	r3, [r7, #14]
  uint8_t RecordFlag=0;
 800289c:	2300      	movs	r3, #0
 800289e:	737b      	strb	r3, [r7, #13]
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  
  /* Do we have to add AAR to an existing NDEF message */  
  /* retrieve current NDEF size and current record flag*/
  status = NFC_TT4_ForceReadData( 0 , 3 , NDEF_Buffer);
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <NDEF_AddAAR+0x168>)
 80028a2:	2103      	movs	r1, #3
 80028a4:	2000      	movs	r0, #0
 80028a6:	f7ff fbd1 	bl	800204c <NFC_TT4_ForceReadData>
 80028aa:	4603      	mov	r3, r0
 80028ac:	82fb      	strh	r3, [r7, #22]

  if( status == NFC_TT4_ACTION_COMPLETED)
 80028ae:	8afb      	ldrh	r3, [r7, #22]
 80028b0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80028b4:	d10d      	bne.n	80028d2 <NDEF_AddAAR+0x4e>
  {
    NDEF_Size = (uint16_t) (NDEF_Buffer[0] << 8);
 80028b6:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <NDEF_AddAAR+0x168>)
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	b29b      	uxth	r3, r3
 80028bc:	021b      	lsls	r3, r3, #8
 80028be:	81fb      	strh	r3, [r7, #14]
    NDEF_Size = NDEF_Size | (uint16_t) (NDEF_Buffer[1]);
 80028c0:	4b4a      	ldr	r3, [pc, #296]	; (80029ec <NDEF_AddAAR+0x168>)
 80028c2:	785b      	ldrb	r3, [r3, #1]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	89fb      	ldrh	r3, [r7, #14]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	81fb      	strh	r3, [r7, #14]
    RecordFlag = NDEF_Buffer[2];
 80028cc:	4b47      	ldr	r3, [pc, #284]	; (80029ec <NDEF_AddAAR+0x168>)
 80028ce:	789b      	ldrb	r3, [r3, #2]
 80028d0:	737b      	strb	r3, [r7, #13]
  }
  
  if( NDEF_Size != 0)
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d009      	beq.n	80028ec <NDEF_AddAAR+0x68>
  {
    AAROffset = NDEF_Size +2;
 80028d8:	89fb      	ldrh	r3, [r7, #14]
 80028da:	3302      	adds	r3, #2
 80028dc:	613b      	str	r3, [r7, #16]
    RecordFlag &= 0xBF; /* remove ME flag on NDEF */
 80028de:	7b7b      	ldrb	r3, [r7, #13]
 80028e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80028e4:	737b      	strb	r3, [r7, #13]
    AARRecordFlag = 0x54; /* don't put MB flag */
 80028e6:	2354      	movs	r3, #84	; 0x54
 80028e8:	733b      	strb	r3, [r7, #12]
 80028ea:	e003      	b.n	80028f4 <NDEF_AddAAR+0x70>
  }
  else
  {
    AAROffset = 2;
 80028ec:	2302      	movs	r3, #2
 80028ee:	613b      	str	r3, [r7, #16]
    AARRecordFlag = 0xD4; /* put MB and ME flag */
 80028f0:	23d4      	movs	r3, #212	; 0xd4
 80028f2:	733b      	strb	r3, [r7, #12]
  }
  
  /* fill AAR record header */
  Offset = 0;
 80028f4:	2300      	movs	r3, #0
 80028f6:	817b      	strh	r3, [r7, #10]
  NDEF_Buffer[Offset++] = AARRecordFlag;   /* Record Flag */
 80028f8:	897b      	ldrh	r3, [r7, #10]
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	817a      	strh	r2, [r7, #10]
 80028fe:	4619      	mov	r1, r3
 8002900:	4a3a      	ldr	r2, [pc, #232]	; (80029ec <NDEF_AddAAR+0x168>)
 8002902:	7b3b      	ldrb	r3, [r7, #12]
 8002904:	5453      	strb	r3, [r2, r1]
  NDEF_Buffer[Offset++] = AAR_TYPE_STRING_LENGTH;
 8002906:	897b      	ldrh	r3, [r7, #10]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	817a      	strh	r2, [r7, #10]
 800290c:	461a      	mov	r2, r3
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <NDEF_AddAAR+0x168>)
 8002910:	210f      	movs	r1, #15
 8002912:	5499      	strb	r1, [r3, r2]
  NDEF_Buffer[Offset++] = 0x00; /* Will be filled at the end when payload size is known */
 8002914:	897b      	ldrh	r3, [r7, #10]
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	817a      	strh	r2, [r7, #10]
 800291a:	461a      	mov	r2, r3
 800291c:	4b33      	ldr	r3, [pc, #204]	; (80029ec <NDEF_AddAAR+0x168>)
 800291e:	2100      	movs	r1, #0
 8002920:	5499      	strb	r1, [r3, r2]

  memcpy(&NDEF_Buffer[Offset], AAR_TYPE_STRING, AAR_TYPE_STRING_LENGTH);
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	4a31      	ldr	r2, [pc, #196]	; (80029ec <NDEF_AddAAR+0x168>)
 8002926:	4413      	add	r3, r2
 8002928:	220f      	movs	r2, #15
 800292a:	4931      	ldr	r1, [pc, #196]	; (80029f0 <NDEF_AddAAR+0x16c>)
 800292c:	4618      	mov	r0, r3
 800292e:	f010 f917 	bl	8012b60 <memcpy>

  /* fill AAR payload */
  memcpy( &NDEF_Buffer[Offset + AAR_TYPE_STRING_LENGTH], pAARStruct->PakageName,strlen(pAARStruct->PakageName));
 8002932:	897b      	ldrh	r3, [r7, #10]
 8002934:	330f      	adds	r3, #15
 8002936:	4a2d      	ldr	r2, [pc, #180]	; (80029ec <NDEF_AddAAR+0x168>)
 8002938:	189c      	adds	r4, r3, r2
 800293a:	687d      	ldr	r5, [r7, #4]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4618      	mov	r0, r3
 8002940:	f7fd fc46 	bl	80001d0 <strlen>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	4629      	mov	r1, r5
 800294a:	4620      	mov	r0, r4
 800294c:	f010 f908 	bl	8012b60 <memcpy>

  NDEF_Buffer[2] = strlen(pAARStruct->PakageName);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	f7fd fc3c 	bl	80001d0 <strlen>
 8002958:	4603      	mov	r3, r0
 800295a:	b2da      	uxtb	r2, r3
 800295c:	4b23      	ldr	r3, [pc, #140]	; (80029ec <NDEF_AddAAR+0x168>)
 800295e:	709a      	strb	r2, [r3, #2]

  DataSize = Offset + AAR_TYPE_STRING_LENGTH + strlen(pAARStruct->PakageName);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4618      	mov	r0, r3
 8002964:	f7fd fc34 	bl	80001d0 <strlen>
 8002968:	4603      	mov	r3, r0
 800296a:	b29a      	uxth	r2, r3
 800296c:	897b      	ldrh	r3, [r7, #10]
 800296e:	4413      	add	r3, r2
 8002970:	b29b      	uxth	r3, r3
 8002972:	330f      	adds	r3, #15
 8002974:	813b      	strh	r3, [r7, #8]

  /* Write NDEF */
  status = NFC_TT4_WriteData ( AAROffset , DataSize , NDEF_Buffer);
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	b29b      	uxth	r3, r3
 800297a:	8939      	ldrh	r1, [r7, #8]
 800297c:	4a1b      	ldr	r2, [pc, #108]	; (80029ec <NDEF_AddAAR+0x168>)
 800297e:	4618      	mov	r0, r3
 8002980:	f7ff fba6 	bl	80020d0 <NFC_TT4_WriteData>
 8002984:	4603      	mov	r3, r0
 8002986:	82fb      	strh	r3, [r7, #22]

  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 8002988:	8afb      	ldrh	r3, [r7, #22]
 800298a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800298e:	d122      	bne.n	80029d6 <NDEF_AddAAR+0x152>
  {
    DataSize = NDEF_Size + DataSize; /* Must add to the NDEF size the size of the AAR record*/
 8002990:	89fa      	ldrh	r2, [r7, #14]
 8002992:	893b      	ldrh	r3, [r7, #8]
 8002994:	4413      	add	r3, r2
 8002996:	813b      	strh	r3, [r7, #8]
    NDEF_Buffer[0] = (DataSize & 0xFF00)>>8;
 8002998:	893b      	ldrh	r3, [r7, #8]
 800299a:	0a1b      	lsrs	r3, r3, #8
 800299c:	b29b      	uxth	r3, r3
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b12      	ldr	r3, [pc, #72]	; (80029ec <NDEF_AddAAR+0x168>)
 80029a2:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (DataSize & 0x00FF);
 80029a4:	893b      	ldrh	r3, [r7, #8]
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	4b10      	ldr	r3, [pc, #64]	; (80029ec <NDEF_AddAAR+0x168>)
 80029aa:	705a      	strb	r2, [r3, #1]
    if( NDEF_Size != 0)
 80029ac:	89fb      	ldrh	r3, [r7, #14]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00a      	beq.n	80029c8 <NDEF_AddAAR+0x144>
    {
      NDEF_Buffer[2] = RecordFlag;
 80029b2:	4a0e      	ldr	r2, [pc, #56]	; (80029ec <NDEF_AddAAR+0x168>)
 80029b4:	7b7b      	ldrb	r3, [r7, #13]
 80029b6:	7093      	strb	r3, [r2, #2]
      status = NFC_TT4_WriteData ( 0x00 , 3 , NDEF_Buffer);
 80029b8:	4a0c      	ldr	r2, [pc, #48]	; (80029ec <NDEF_AddAAR+0x168>)
 80029ba:	2103      	movs	r1, #3
 80029bc:	2000      	movs	r0, #0
 80029be:	f7ff fb87 	bl	80020d0 <NFC_TT4_WriteData>
 80029c2:	4603      	mov	r3, r0
 80029c4:	82fb      	strh	r3, [r7, #22]
 80029c6:	e006      	b.n	80029d6 <NDEF_AddAAR+0x152>
    }
    else
      status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 80029c8:	4a08      	ldr	r2, [pc, #32]	; (80029ec <NDEF_AddAAR+0x168>)
 80029ca:	2102      	movs	r1, #2
 80029cc:	2000      	movs	r0, #0
 80029ce:	f7ff fb7f 	bl	80020d0 <NFC_TT4_WriteData>
 80029d2:	4603      	mov	r3, r0
 80029d4:	82fb      	strh	r3, [r7, #22]
  }
  
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 80029d6:	8afb      	ldrh	r3, [r7, #22]
 80029d8:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80029dc:	d101      	bne.n	80029e2 <NDEF_AddAAR+0x15e>
    return NDEF_SUCCESS;
 80029de:	2300      	movs	r3, #0
 80029e0:	e000      	b.n	80029e4 <NDEF_AddAAR+0x160>
  else
    return NDEF_ERROR;
 80029e2:	2301      	movs	r3, #1
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bdb0      	pop	{r4, r5, r7, pc}
 80029ec:	20002178 	.word	0x20002178
 80029f0:	08015a7c 	.word	0x08015a7c

080029f4 <NDEF_FillEmailStruct>:
  * @param  PayloadSize : number of data in the payload
  * @param  pEmailStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_FillEmailStruct( uint8_t* pPayload, uint32_t PayloadSize, sEmailInfo *pEmailStruct)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b088      	sub	sp, #32
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	607a      	str	r2, [r7, #4]
  uint8_t* pLastByteAdd, *pLook4Word, *pEndString ;
  uint32_t SizeOfKeyWord;
  
  /* First charactere force to NULL in case not matching found */
  *pEmailStruct->EmailAdd = 0;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
  *pEmailStruct->Subject = 0;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  *pEmailStruct->Message = 0;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  
  /* Interresting information are stored before picture if any */
  /* Moreover picture is not used in this demonstration SW */  
  pLastByteAdd = (uint8_t*)(pPayload + PayloadSize);
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4413      	add	r3, r2
 8002a1c:	61bb      	str	r3, [r7, #24]
  
  /* first byte should be the "mailto:" well know URI type, skip it */
  pLook4Word = ++pPayload;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	3301      	adds	r3, #1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	617b      	str	r3, [r7, #20]
  
  pEndString = pLook4Word;
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	61fb      	str	r3, [r7, #28]
  
  /* Retrieve email add */
  if( pLook4Word != pLastByteAdd)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d01f      	beq.n	8002a74 <NDEF_FillEmailStruct+0x80>
  {  
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002a34:	e002      	b.n	8002a3c <NDEF_FillEmailStruct+0x48>
    {
      pEndString++;
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	61fb      	str	r3, [r7, #28]
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	781a      	ldrb	r2, [r3, #0]
 8002a40:	4b42      	ldr	r3, [pc, #264]	; (8002b4c <NDEF_FillEmailStruct+0x158>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d003      	beq.n	8002a50 <NDEF_FillEmailStruct+0x5c>
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d3f2      	bcc.n	8002a36 <NDEF_FillEmailStruct+0x42>
    }
    if( pEndString != pLastByteAdd)
 8002a50:	69fa      	ldr	r2, [r7, #28]
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d00d      	beq.n	8002a74 <NDEF_FillEmailStruct+0x80>
    {
      memcpy( pEmailStruct->EmailAdd, pLook4Word, pEndString-pLook4Word);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6979      	ldr	r1, [r7, #20]
 8002a64:	f010 f87c 	bl	8012b60 <memcpy>
      /* add end of string charactere */
      pEmailStruct->EmailAdd[pEndString-pLook4Word] = 0;  
 8002a68:	69fa      	ldr	r2, [r7, #28]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	1ad3      	subs	r3, r2, r3
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	2100      	movs	r1, #0
 8002a72:	54d1      	strb	r1, [r2, r3]
    }
  }  
  
  pEndString += URI_FIRST_DATA_END_LENGTH;
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	3301      	adds	r3, #1
 8002a78:	61fb      	str	r3, [r7, #28]
  pLook4Word = pEndString;
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	617b      	str	r3, [r7, #20]
  
  /* check if e-mail subject is present */
  if(!memcmp( pLook4Word, SUBJECT_BEGIN_STRING, SUBJECT_BEGIN_STRING_LENGTH))
 8002a7e:	2208      	movs	r2, #8
 8002a80:	4933      	ldr	r1, [pc, #204]	; (8002b50 <NDEF_FillEmailStruct+0x15c>)
 8002a82:	6978      	ldr	r0, [r7, #20]
 8002a84:	f010 f85e 	bl	8012b44 <memcmp>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d132      	bne.n	8002af4 <NDEF_FillEmailStruct+0x100>
  {    
    SizeOfKeyWord = SUBJECT_BEGIN_STRING_LENGTH;
 8002a8e:	2308      	movs	r3, #8
 8002a90:	613b      	str	r3, [r7, #16]
    
    /* Retrieve subject */
    if( pLook4Word != pLastByteAdd)
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d02c      	beq.n	8002af4 <NDEF_FillEmailStruct+0x100>
    {
      pLook4Word += SizeOfKeyWord;
 8002a9a:	697a      	ldr	r2, [r7, #20]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	617b      	str	r3, [r7, #20]
      pEndString = pLook4Word;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	61fb      	str	r3, [r7, #28]
      while( memcmp( pEndString, URI_SECOND_DATA_END, URI_SECOND_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002aa6:	e002      	b.n	8002aae <NDEF_FillEmailStruct+0xba>
      {
        pEndString++;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
      while( memcmp( pEndString, URI_SECOND_DATA_END, URI_SECOND_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	781a      	ldrb	r2, [r3, #0]
 8002ab2:	4b28      	ldr	r3, [pc, #160]	; (8002b54 <NDEF_FillEmailStruct+0x160>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d003      	beq.n	8002ac2 <NDEF_FillEmailStruct+0xce>
 8002aba:	69fa      	ldr	r2, [r7, #28]
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d3f2      	bcc.n	8002aa8 <NDEF_FillEmailStruct+0xb4>
      }
      if( pEndString != pLastByteAdd)
 8002ac2:	69fa      	ldr	r2, [r7, #28]
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d011      	beq.n	8002aee <NDEF_FillEmailStruct+0xfa>
      {
        memcpy( pEmailStruct->Subject, pLook4Word, pEndString-pLook4Word);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f103 0040 	add.w	r0, r3, #64	; 0x40
 8002ad0:	69fa      	ldr	r2, [r7, #28]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6979      	ldr	r1, [r7, #20]
 8002ada:	f010 f841 	bl	8012b60 <memcpy>
        /* add end of string charactere */
        pEmailStruct->Subject[pEndString-pLook4Word] = 0;  
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      }
      pEndString += URI_SECOND_DATA_END_LENGTH;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3301      	adds	r3, #1
 8002af2:	61fb      	str	r3, [r7, #28]
    }    
  }
  
  pLook4Word = pEndString;  
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	617b      	str	r3, [r7, #20]
  
  /* check if e-mail message is present */
  if(!memcmp( pLook4Word, MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH))
 8002af8:	2205      	movs	r2, #5
 8002afa:	4917      	ldr	r1, [pc, #92]	; (8002b58 <NDEF_FillEmailStruct+0x164>)
 8002afc:	6978      	ldr	r0, [r7, #20]
 8002afe:	f010 f821 	bl	8012b44 <memcmp>
 8002b02:	4603      	mov	r3, r0
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d11c      	bne.n	8002b42 <NDEF_FillEmailStruct+0x14e>
  {
    pEndString += MESSAGE_BEGIN_STRING_LENGTH;
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	3305      	adds	r3, #5
 8002b0c:	61fb      	str	r3, [r7, #28]
    /* Retrieve message */
    memcpy( pEmailStruct->Message, pEndString, PayloadSize-(pEndString-pPayload+1));
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 8002b14:	69fa      	ldr	r2, [r7, #28]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1a9b      	subs	r3, r3, r2
 8002b20:	3b01      	subs	r3, #1
 8002b22:	461a      	mov	r2, r3
 8002b24:	69f9      	ldr	r1, [r7, #28]
 8002b26:	f010 f81b 	bl	8012b60 <memcpy>
    /* add end of string charactere */
    pEmailStruct->Message[PayloadSize-(pEndString-pPayload+1)] = 0;    
 8002b2a:	69fa      	ldr	r2, [r7, #28]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	461a      	mov	r2, r3
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	1a9b      	subs	r3, r3, r2
 8002b36:	3b01      	subs	r3, #1
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
  }
}
 8002b42:	bf00      	nop
 8002b44:	3720      	adds	r7, #32
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	08015a8c 	.word	0x08015a8c
 8002b50:	08015a90 	.word	0x08015a90
 8002b54:	08015a9c 	.word	0x08015a9c
 8002b58:	08015aa0 	.word	0x08015aa0

08002b5c <NDEF_ReadURI_Email>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pEmailStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_ReadURI_Email ( sRecordInfo *pRecordStruct, sEmailInfo *pEmailStruct )
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint8_t* pPayload;
  uint32_t PayloadSize;
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	789b      	ldrb	r3, [r3, #2]
 8002b6a:	061a      	lsls	r2, r3, #24
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	78db      	ldrb	r3, [r3, #3]
 8002b70:	041b      	lsls	r3, r3, #16
 8002b72:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	791b      	ldrb	r3, [r3, #4]
 8002b78:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002b7a:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60fb      	str	r3, [r7, #12]
  
  /* Read record header */
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002b8a:	60bb      	str	r3, [r7, #8]
  
  if( pRecordStruct->NDEF_Type == URI_EMAIL_TYPE)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002b92:	2b05      	cmp	r3, #5
 8002b94:	d104      	bne.n	8002ba0 <NDEF_ReadURI_Email+0x44>
    NDEF_FillEmailStruct(pPayload , PayloadSize, pEmailStruct);
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	68f9      	ldr	r1, [r7, #12]
 8002b9a:	68b8      	ldr	r0, [r7, #8]
 8002b9c:	f7ff ff2a 	bl	80029f4 <NDEF_FillEmailStruct>
  
}
 8002ba0:	bf00      	nop
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <NDEF_ReadEmail>:
  * @param  pEmailStruct : pointer on the structure to fill 
  * @retval SUCCESS : Email information from NDEF have been retrieved
  * @retval ERROR : Not able to retrieve Email information
  */
uint16_t NDEF_ReadEmail(sRecordInfo *pRecordStruct, sEmailInfo *pEmailStruct)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	83fb      	strh	r3, [r7, #30]
  sRecordInfo *pSPRecordStruct;  
  uint32_t PayloadSize, RecordPosition;
  uint8_t* pData;
  
  
  if( pRecordStruct->NDEF_Type == URI_EMAIL_TYPE )
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002bbc:	2b05      	cmp	r3, #5
 8002bbe:	d106      	bne.n	8002bce <NDEF_ReadEmail+0x26>
  {  
    NDEF_ReadURI_Email(pRecordStruct, pEmailStruct );
 8002bc0:	6839      	ldr	r1, [r7, #0]
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f7ff ffca 	bl	8002b5c <NDEF_ReadURI_Email>
    status = NDEF_SUCCESS;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	83fb      	strh	r3, [r7, #30]
 8002bcc:	e048      	b.n	8002c60 <NDEF_ReadEmail+0xb8>
  }
  else if( pRecordStruct->NDEF_Type == SMARTPOSTER_TYPE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002bd4:	2b06      	cmp	r3, #6
 8002bd6:	d143      	bne.n	8002c60 <NDEF_ReadEmail+0xb8>
  {
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8002bd8:	2300      	movs	r3, #0
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e039      	b.n	8002c52 <NDEF_ReadEmail+0xaa>
    {
      pSPRecordStruct = (sRecordInfo *)(pRecordStruct->SPRecordStructAdd[RecordPosition]);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	3284      	adds	r2, #132	; 0x84
 8002be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002be8:	617b      	str	r3, [r7, #20]
      if(pSPRecordStruct->NDEF_Type == URI_EMAIL_TYPE )
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002bf0:	2b05      	cmp	r3, #5
 8002bf2:	d105      	bne.n	8002c00 <NDEF_ReadEmail+0x58>
      {
        NDEF_ReadURI_Email(pSPRecordStruct, pEmailStruct );
 8002bf4:	6839      	ldr	r1, [r7, #0]
 8002bf6:	6978      	ldr	r0, [r7, #20]
 8002bf8:	f7ff ffb0 	bl	8002b5c <NDEF_ReadURI_Email>
        status = NDEF_SUCCESS;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	83fb      	strh	r3, [r7, #30]
      }
      if(pSPRecordStruct->NDEF_Type == TEXT_TYPE )
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d120      	bne.n	8002c4c <NDEF_ReadEmail+0xa4>
      {
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	789b      	ldrb	r3, [r3, #2]
 8002c0e:	061a      	lsls	r2, r3, #24
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	78db      	ldrb	r3, [r3, #3]
 8002c14:	041b      	lsls	r3, r3, #16
 8002c16:	431a      	orrs	r2, r3
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	791b      	ldrb	r3, [r3, #4]
 8002c1c:	021b      	lsls	r3, r3, #8
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8002c1e:	4313      	orrs	r3, r2
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	7952      	ldrb	r2, [r2, #5]
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8002c24:	4313      	orrs	r3, r2
 8002c26:	613b      	str	r3, [r7, #16]
        
        /* The instruction content the UTF-8 language code that is not used here */
        pData = (uint8_t*)pSPRecordStruct->PayloadBufferAdd;
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8002c2e:	60fb      	str	r3, [r7, #12]
        pData += *pData+1;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4413      	add	r3, r2
 8002c3a:	60fb      	str	r3, [r7, #12]
        
        memcpy(pEmailStruct->Information, pData, PayloadSize);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68f9      	ldr	r1, [r7, #12]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f00f ff8a 	bl	8012b60 <memcpy>
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	61bb      	str	r3, [r7, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8002c58:	461a      	mov	r2, r3
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d3be      	bcc.n	8002bde <NDEF_ReadEmail+0x36>
      }
    }
  }

  return status;
 8002c60:	8bfb      	ldrh	r3, [r7, #30]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3720      	adds	r7, #32
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <NDEF_WriteEmail>:
  * @param  pEmailStruct : pointer on structure that contain the Email information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteEmail ( sEmailInfo *pEmailStruct )
{
 8002c6c:	b5b0      	push	{r4, r5, r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	83fb      	strh	r3, [r7, #30]
  uint32_t Offset = 0;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
  /*              TYPE                */
  /*----------------------------------*/
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  /* Leave the size of the file empty */
  NDEF_Buffer[0] = 0;
 8002c7c:	4b6d      	ldr	r3, [pc, #436]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[1] = 0;
 8002c82:	4b6c      	ldr	r3, [pc, #432]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	705a      	strb	r2, [r3, #1]
  Offset = FIRST_RECORD_OFFSET;
 8002c88:	2302      	movs	r3, #2
 8002c8a:	61bb      	str	r3, [r7, #24]
  infoSize = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	617b      	str	r3, [r7, #20]
  
  /* Email : 1+@+1+subject+1+message */
  emailSize = 1+strlen(pEmailStruct->EmailAdd)+URI_FIRST_DATA_END_LENGTH+SUBJECT_BEGIN_STRING_LENGTH+strlen(pEmailStruct->Subject)+URI_SECOND_DATA_END_LENGTH+MESSAGE_BEGIN_STRING_LENGTH+strlen(pEmailStruct->Message);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fa9c 	bl	80001d0 <strlen>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	3340      	adds	r3, #64	; 0x40
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fd fa96 	bl	80001d0 <strlen>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	441c      	add	r4, r3
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	33a4      	adds	r3, #164	; 0xa4
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7fd fa8f 	bl	80001d0 <strlen>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	4423      	add	r3, r4
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	60fb      	str	r3, [r7, #12]
  
  /* Check if a Smart poster is needed */
  if (pEmailStruct->Information[0] != '\0')
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d066      	beq.n	8002d92 <NDEF_WriteEmail+0x126>
  {
    /* Info : 1+2+info */
    infoSize = 1+ISO_ENGLISH_CODE_STRING_LENGTH+strlen(pEmailStruct->Information);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7fd fa80 	bl	80001d0 <strlen>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	3303      	adds	r3, #3
 8002cd4:	617b      	str	r3, [r7, #20]
    /* Total */
    totalSize = 4+emailSize+4+infoSize;
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	4413      	add	r3, r2
 8002cdc:	3308      	adds	r3, #8
 8002cde:	613b      	str	r3, [r7, #16]
    if (emailSize > 255) totalSize+=3; /* Normal Email size */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2bff      	cmp	r3, #255	; 0xff
 8002ce4:	d902      	bls.n	8002cec <NDEF_WriteEmail+0x80>
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	3303      	adds	r3, #3
 8002cea:	613b      	str	r3, [r7, #16]
    if (infoSize > 255) totalSize+=3;  /* Normal Info size */
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	2bff      	cmp	r3, #255	; 0xff
 8002cf0:	d902      	bls.n	8002cf8 <NDEF_WriteEmail+0x8c>
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	3303      	adds	r3, #3
 8002cf6:	613b      	str	r3, [r7, #16]
    
    /* SmartPoster header */
    if (totalSize > 255) 
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	2bff      	cmp	r3, #255	; 0xff
 8002cfc:	d92b      	bls.n	8002d56 <NDEF_WriteEmail+0xea>
    {
      NDEF_Buffer[Offset++] = 0xC1;
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	1c5a      	adds	r2, r3, #1
 8002d02:	61ba      	str	r2, [r7, #24]
 8002d04:	4a4b      	ldr	r2, [pc, #300]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d06:	21c1      	movs	r1, #193	; 0xc1
 8002d08:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	61ba      	str	r2, [r7, #24]
 8002d10:	4a48      	ldr	r2, [pc, #288]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d12:	2102      	movs	r1, #2
 8002d14:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0xFF000000)>>24;
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	0e19      	lsrs	r1, r3, #24
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	1c5a      	adds	r2, r3, #1
 8002d1e:	61ba      	str	r2, [r7, #24]
 8002d20:	b2c9      	uxtb	r1, r1
 8002d22:	4a44      	ldr	r2, [pc, #272]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d24:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x00FF0000)>>16;
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	0c19      	lsrs	r1, r3, #16
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	1c5a      	adds	r2, r3, #1
 8002d2e:	61ba      	str	r2, [r7, #24]
 8002d30:	b2c9      	uxtb	r1, r1
 8002d32:	4a40      	ldr	r2, [pc, #256]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d34:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x0000FF00)>>8;
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	0a19      	lsrs	r1, r3, #8
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	1c5a      	adds	r2, r3, #1
 8002d3e:	61ba      	str	r2, [r7, #24]
 8002d40:	b2c9      	uxtb	r1, r1
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d44:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x000000FF);
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	1c5a      	adds	r2, r3, #1
 8002d4a:	61ba      	str	r2, [r7, #24]
 8002d4c:	693a      	ldr	r2, [r7, #16]
 8002d4e:	b2d1      	uxtb	r1, r2
 8002d50:	4a38      	ldr	r2, [pc, #224]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d52:	54d1      	strb	r1, [r2, r3]
 8002d54:	e012      	b.n	8002d7c <NDEF_WriteEmail+0x110>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0xD1;
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	61ba      	str	r2, [r7, #24]
 8002d5c:	4a35      	ldr	r2, [pc, #212]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d5e:	21d1      	movs	r1, #209	; 0xd1
 8002d60:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	61ba      	str	r2, [r7, #24]
 8002d68:	4a32      	ldr	r2, [pc, #200]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d6a:	2102      	movs	r1, #2
 8002d6c:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)totalSize;
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	61ba      	str	r2, [r7, #24]
 8002d74:	693a      	ldr	r2, [r7, #16]
 8002d76:	b2d1      	uxtb	r1, r2
 8002d78:	4a2e      	ldr	r2, [pc, #184]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d7a:	54d1      	strb	r1, [r2, r3]
    }
    memcpy(&NDEF_Buffer[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH);
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	4a2d      	ldr	r2, [pc, #180]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d80:	4413      	add	r3, r2
 8002d82:	2202      	movs	r2, #2
 8002d84:	492c      	ldr	r1, [pc, #176]	; (8002e38 <NDEF_WriteEmail+0x1cc>)
 8002d86:	4618      	mov	r0, r3
 8002d88:	f00f feea 	bl	8012b60 <memcpy>
    Offset+=SMART_POSTER_TYPE_STRING_LENGTH;
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	3302      	adds	r3, #2
 8002d90:	61bb      	str	r3, [r7, #24]
  }
  
  /* Email header */
  NDEF_Buffer[Offset] = 0x81;
 8002d92:	4a28      	ldr	r2, [pc, #160]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	4413      	add	r3, r2
 8002d98:	2281      	movs	r2, #129	; 0x81
 8002d9a:	701a      	strb	r2, [r3, #0]
  if (emailSize < 256) NDEF_Buffer[Offset] |= 0x10;                      /* Set the SR bit */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2bff      	cmp	r3, #255	; 0xff
 8002da0:	d80b      	bhi.n	8002dba <NDEF_WriteEmail+0x14e>
 8002da2:	4a24      	ldr	r2, [pc, #144]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	4413      	add	r3, r2
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	f043 0310 	orr.w	r3, r3, #16
 8002dae:	b2d9      	uxtb	r1, r3
 8002db0:	4a20      	ldr	r2, [pc, #128]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	4413      	add	r3, r2
 8002db6:	460a      	mov	r2, r1
 8002db8:	701a      	strb	r2, [r3, #0]
  if (pEmailStruct->Information[0] == '\0') NDEF_Buffer[Offset] |= 0x40; /* Set the ME bit */
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d10b      	bne.n	8002ddc <NDEF_WriteEmail+0x170>
 8002dc4:	4a1b      	ldr	r2, [pc, #108]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	4413      	add	r3, r2
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002dd0:	b2d9      	uxtb	r1, r3
 8002dd2:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	460a      	mov	r2, r1
 8002dda:	701a      	strb	r2, [r3, #0]
  Offset++;
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	3301      	adds	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
  
  NDEF_Buffer[Offset++] = URI_TYPE_STRING_LENGTH;
 8002de2:	69bb      	ldr	r3, [r7, #24]
 8002de4:	1c5a      	adds	r2, r3, #1
 8002de6:	61ba      	str	r2, [r7, #24]
 8002de8:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002dea:	2101      	movs	r1, #1
 8002dec:	54d1      	strb	r1, [r2, r3]
  if (emailSize > 255)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2bff      	cmp	r3, #255	; 0xff
 8002df2:	d923      	bls.n	8002e3c <NDEF_WriteEmail+0x1d0>
  {
    NDEF_Buffer[Offset++] = (emailSize & 0xFF000000)>>24;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	0e19      	lsrs	r1, r3, #24
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	61ba      	str	r2, [r7, #24]
 8002dfe:	b2c9      	uxtb	r1, r1
 8002e00:	4a0c      	ldr	r2, [pc, #48]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002e02:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (emailSize & 0x00FF0000)>>16;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	0c19      	lsrs	r1, r3, #16
 8002e08:	69bb      	ldr	r3, [r7, #24]
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	61ba      	str	r2, [r7, #24]
 8002e0e:	b2c9      	uxtb	r1, r1
 8002e10:	4a08      	ldr	r2, [pc, #32]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002e12:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (emailSize & 0x0000FF00)>>8;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	0a19      	lsrs	r1, r3, #8
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	1c5a      	adds	r2, r3, #1
 8002e1c:	61ba      	str	r2, [r7, #24]
 8002e1e:	b2c9      	uxtb	r1, r1
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002e22:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (emailSize & 0x000000FF);
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	61ba      	str	r2, [r7, #24]
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	b2d1      	uxtb	r1, r2
 8002e2e:	4a01      	ldr	r2, [pc, #4]	; (8002e34 <NDEF_WriteEmail+0x1c8>)
 8002e30:	54d1      	strb	r1, [r2, r3]
 8002e32:	e00a      	b.n	8002e4a <NDEF_WriteEmail+0x1de>
 8002e34:	20002178 	.word	0x20002178
 8002e38:	08015aa8 	.word	0x08015aa8
  }
  else
  {
    NDEF_Buffer[Offset++] = (uint8_t)emailSize;
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	61ba      	str	r2, [r7, #24]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	b2d1      	uxtb	r1, r2
 8002e46:	4a99      	ldr	r2, [pc, #612]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002e48:	54d1      	strb	r1, [r2, r3]
  }
  memcpy(&NDEF_Buffer[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH);
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4a97      	ldr	r2, [pc, #604]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002e4e:	4413      	add	r3, r2
 8002e50:	2201      	movs	r2, #1
 8002e52:	4997      	ldr	r1, [pc, #604]	; (80030b0 <NDEF_WriteEmail+0x444>)
 8002e54:	4618      	mov	r0, r3
 8002e56:	f00f fe83 	bl	8012b60 <memcpy>
  Offset+=URI_TYPE_STRING_LENGTH;
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	61bb      	str	r3, [r7, #24]
  
  /* Email payload */
  NDEF_Buffer[Offset++] = URI_ID_0x06;
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	1c5a      	adds	r2, r3, #1
 8002e64:	61ba      	str	r2, [r7, #24]
 8002e66:	4a91      	ldr	r2, [pc, #580]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002e68:	2106      	movs	r1, #6
 8002e6a:	54d1      	strb	r1, [r2, r3]
  memcpy( &NDEF_Buffer[Offset], pEmailStruct->EmailAdd,strlen(pEmailStruct->EmailAdd));
 8002e6c:	69bb      	ldr	r3, [r7, #24]
 8002e6e:	4a8f      	ldr	r2, [pc, #572]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002e70:	189c      	adds	r4, r3, r2
 8002e72:	687d      	ldr	r5, [r7, #4]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd f9aa 	bl	80001d0 <strlen>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	461a      	mov	r2, r3
 8002e80:	4629      	mov	r1, r5
 8002e82:	4620      	mov	r0, r4
 8002e84:	f00f fe6c 	bl	8012b60 <memcpy>
  Offset += strlen(pEmailStruct->EmailAdd);  
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fd f9a0 	bl	80001d0 <strlen>
 8002e90:	4602      	mov	r2, r0
 8002e92:	69bb      	ldr	r3, [r7, #24]
 8002e94:	4413      	add	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], URI_FIRST_DATA_END,URI_FIRST_DATA_END_LENGTH);
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	4a84      	ldr	r2, [pc, #528]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002e9c:	4413      	add	r3, r2
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4984      	ldr	r1, [pc, #528]	; (80030b4 <NDEF_WriteEmail+0x448>)
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f00f fe5c 	bl	8012b60 <memcpy>
  Offset += URI_FIRST_DATA_END_LENGTH;
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	61bb      	str	r3, [r7, #24]
  
  memcpy(&NDEF_Buffer[Offset], SUBJECT_BEGIN_STRING, SUBJECT_BEGIN_STRING_LENGTH);
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	4a7e      	ldr	r2, [pc, #504]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	2208      	movs	r2, #8
 8002eb6:	4980      	ldr	r1, [pc, #512]	; (80030b8 <NDEF_WriteEmail+0x44c>)
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f00f fe51 	bl	8012b60 <memcpy>
  Offset += SUBJECT_BEGIN_STRING_LENGTH;
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], pEmailStruct->Subject,strlen(pEmailStruct->Subject));
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	4a79      	ldr	r2, [pc, #484]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002ec8:	189c      	adds	r4, r3, r2
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f103 0540 	add.w	r5, r3, #64	; 0x40
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3340      	adds	r3, #64	; 0x40
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f7fd f97b 	bl	80001d0 <strlen>
 8002eda:	4603      	mov	r3, r0
 8002edc:	461a      	mov	r2, r3
 8002ede:	4629      	mov	r1, r5
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f00f fe3d 	bl	8012b60 <memcpy>
  Offset += strlen(pEmailStruct->Subject);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd f970 	bl	80001d0 <strlen>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], URI_SECOND_DATA_END,URI_SECOND_DATA_END_LENGTH);
 8002ef8:	69bb      	ldr	r3, [r7, #24]
 8002efa:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002efc:	4413      	add	r3, r2
 8002efe:	2201      	movs	r2, #1
 8002f00:	496e      	ldr	r1, [pc, #440]	; (80030bc <NDEF_WriteEmail+0x450>)
 8002f02:	4618      	mov	r0, r3
 8002f04:	f00f fe2c 	bl	8012b60 <memcpy>
  Offset += URI_SECOND_DATA_END_LENGTH;
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	61bb      	str	r3, [r7, #24]
  
  memcpy( &NDEF_Buffer[Offset], MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH);
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	4a66      	ldr	r2, [pc, #408]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002f12:	4413      	add	r3, r2
 8002f14:	2205      	movs	r2, #5
 8002f16:	496a      	ldr	r1, [pc, #424]	; (80030c0 <NDEF_WriteEmail+0x454>)
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f00f fe21 	bl	8012b60 <memcpy>
  Offset += MESSAGE_BEGIN_STRING_LENGTH;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3305      	adds	r3, #5
 8002f22:	61bb      	str	r3, [r7, #24]
  memcpy( &NDEF_Buffer[Offset], pEmailStruct->Message, strlen(pEmailStruct->Message));
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	4a61      	ldr	r2, [pc, #388]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002f28:	189c      	adds	r4, r3, r2
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f103 05a4 	add.w	r5, r3, #164	; 0xa4
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	33a4      	adds	r3, #164	; 0xa4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7fd f94b 	bl	80001d0 <strlen>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	4629      	mov	r1, r5
 8002f40:	4620      	mov	r0, r4
 8002f42:	f00f fe0d 	bl	8012b60 <memcpy>
  Offset += strlen(pEmailStruct->Message);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	33a4      	adds	r3, #164	; 0xa4
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fd f940 	bl	80001d0 <strlen>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4413      	add	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]

  /* Information header */
  if (pEmailStruct->Information[0] != '\0')
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3234 	ldrb.w	r3, [r3, #564]	; 0x234
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d079      	beq.n	8003056 <NDEF_WriteEmail+0x3ea>
  {
    if (infoSize > 255)
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2bff      	cmp	r3, #255	; 0xff
 8002f66:	d92b      	bls.n	8002fc0 <NDEF_WriteEmail+0x354>
    {
      NDEF_Buffer[Offset++] = 0x41;
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1c5a      	adds	r2, r3, #1
 8002f6c:	61ba      	str	r2, [r7, #24]
 8002f6e:	4a4f      	ldr	r2, [pc, #316]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002f70:	2141      	movs	r1, #65	; 0x41
 8002f72:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	1c5a      	adds	r2, r3, #1
 8002f78:	61ba      	str	r2, [r7, #24]
 8002f7a:	4a4c      	ldr	r2, [pc, #304]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002f7c:	2101      	movs	r1, #1
 8002f7e:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0xFF000000)>>24;
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	0e19      	lsrs	r1, r3, #24
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	61ba      	str	r2, [r7, #24]
 8002f8a:	b2c9      	uxtb	r1, r1
 8002f8c:	4a47      	ldr	r2, [pc, #284]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002f8e:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x00FF0000)>>16;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	0c19      	lsrs	r1, r3, #16
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	61ba      	str	r2, [r7, #24]
 8002f9a:	b2c9      	uxtb	r1, r1
 8002f9c:	4a43      	ldr	r2, [pc, #268]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002f9e:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x0000FF00)>>8;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	0a19      	lsrs	r1, r3, #8
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	61ba      	str	r2, [r7, #24]
 8002faa:	b2c9      	uxtb	r1, r1
 8002fac:	4a3f      	ldr	r2, [pc, #252]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002fae:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x000000FF);
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	61ba      	str	r2, [r7, #24]
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	b2d1      	uxtb	r1, r2
 8002fba:	4a3c      	ldr	r2, [pc, #240]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002fbc:	54d1      	strb	r1, [r2, r3]
 8002fbe:	e012      	b.n	8002fe6 <NDEF_WriteEmail+0x37a>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0x51;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	1c5a      	adds	r2, r3, #1
 8002fc4:	61ba      	str	r2, [r7, #24]
 8002fc6:	4a39      	ldr	r2, [pc, #228]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002fc8:	2151      	movs	r1, #81	; 0x51
 8002fca:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1c5a      	adds	r2, r3, #1
 8002fd0:	61ba      	str	r2, [r7, #24]
 8002fd2:	4a36      	ldr	r2, [pc, #216]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)infoSize;
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	1c5a      	adds	r2, r3, #1
 8002fdc:	61ba      	str	r2, [r7, #24]
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	b2d1      	uxtb	r1, r2
 8002fe2:	4a32      	ldr	r2, [pc, #200]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002fe4:	54d1      	strb	r1, [r2, r3]
    }
    
    memcpy(&NDEF_Buffer[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH);
 8002fe6:	69bb      	ldr	r3, [r7, #24]
 8002fe8:	4a30      	ldr	r2, [pc, #192]	; (80030ac <NDEF_WriteEmail+0x440>)
 8002fea:	4413      	add	r3, r2
 8002fec:	2201      	movs	r2, #1
 8002fee:	4935      	ldr	r1, [pc, #212]	; (80030c4 <NDEF_WriteEmail+0x458>)
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f00f fdb5 	bl	8012b60 <memcpy>
    Offset+=TEXT_TYPE_STRING_LENGTH;
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61bb      	str	r3, [r7, #24]
    NDEF_Buffer[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	61ba      	str	r2, [r7, #24]
 8003002:	4a2a      	ldr	r2, [pc, #168]	; (80030ac <NDEF_WriteEmail+0x440>)
 8003004:	2102      	movs	r1, #2
 8003006:	54d1      	strb	r1, [r2, r3]
    memcpy(&NDEF_Buffer[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH);
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	4a28      	ldr	r2, [pc, #160]	; (80030ac <NDEF_WriteEmail+0x440>)
 800300c:	4413      	add	r3, r2
 800300e:	2202      	movs	r2, #2
 8003010:	492d      	ldr	r1, [pc, #180]	; (80030c8 <NDEF_WriteEmail+0x45c>)
 8003012:	4618      	mov	r0, r3
 8003014:	f00f fda4 	bl	8012b60 <memcpy>
    Offset+=ISO_ENGLISH_CODE_STRING_LENGTH;
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	3302      	adds	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
    
    /* Information payload */
    memcpy( &NDEF_Buffer[Offset], pEmailStruct->Information,strlen(pEmailStruct->Information));
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4a22      	ldr	r2, [pc, #136]	; (80030ac <NDEF_WriteEmail+0x440>)
 8003022:	189c      	adds	r4, r3, r2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f503 750d 	add.w	r5, r3, #564	; 0x234
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd f8cd 	bl	80001d0 <strlen>
 8003036:	4603      	mov	r3, r0
 8003038:	461a      	mov	r2, r3
 800303a:	4629      	mov	r1, r5
 800303c:	4620      	mov	r0, r4
 800303e:	f00f fd8f 	bl	8012b60 <memcpy>
    Offset += strlen(pEmailStruct->Information);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f503 730d 	add.w	r3, r3, #564	; 0x234
 8003048:	4618      	mov	r0, r3
 800304a:	f7fd f8c1 	bl	80001d0 <strlen>
 800304e:	4602      	mov	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	4413      	add	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
  }
  
  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , Offset , NDEF_Buffer);
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4a14      	ldr	r2, [pc, #80]	; (80030ac <NDEF_WriteEmail+0x440>)
 800305c:	4619      	mov	r1, r3
 800305e:	2000      	movs	r0, #0
 8003060:	f7ff f836 	bl	80020d0 <NFC_TT4_WriteData>
 8003064:	4603      	mov	r3, r0
 8003066:	83fb      	strh	r3, [r7, #30]

  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 8003068:	8bfb      	ldrh	r3, [r7, #30]
 800306a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800306e:	d112      	bne.n	8003096 <NDEF_WriteEmail+0x42a>
  {
    Offset -= 2; /* Must not count the 2 byte that represent the NDEF size */
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	3b02      	subs	r3, #2
 8003074:	61bb      	str	r3, [r7, #24]
    NDEF_Buffer[0] = (Offset & 0xFF00)>>8;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	b2da      	uxtb	r2, r3
 800307c:	4b0b      	ldr	r3, [pc, #44]	; (80030ac <NDEF_WriteEmail+0x440>)
 800307e:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (Offset & 0x00FF);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	b2da      	uxtb	r2, r3
 8003084:	4b09      	ldr	r3, [pc, #36]	; (80030ac <NDEF_WriteEmail+0x440>)
 8003086:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 8003088:	4a08      	ldr	r2, [pc, #32]	; (80030ac <NDEF_WriteEmail+0x440>)
 800308a:	2102      	movs	r1, #2
 800308c:	2000      	movs	r0, #0
 800308e:	f7ff f81f 	bl	80020d0 <NFC_TT4_WriteData>
 8003092:	4603      	mov	r3, r0
 8003094:	83fb      	strh	r3, [r7, #30]
  }
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 8003096:	8bfb      	ldrh	r3, [r7, #30]
 8003098:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 800309c:	d101      	bne.n	80030a2 <NDEF_WriteEmail+0x436>
    return NDEF_SUCCESS;
 800309e:	2300      	movs	r3, #0
 80030a0:	e000      	b.n	80030a4 <NDEF_WriteEmail+0x438>
  else
    return NDEF_ERROR;
 80030a2:	2301      	movs	r3, #1
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3720      	adds	r7, #32
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bdb0      	pop	{r4, r5, r7, pc}
 80030ac:	20002178 	.word	0x20002178
 80030b0:	08015aac 	.word	0x08015aac
 80030b4:	08015a8c 	.word	0x08015a8c
 80030b8:	08015a90 	.word	0x08015a90
 80030bc:	08015a9c 	.word	0x08015a9c
 80030c0:	08015aa0 	.word	0x08015aa0
 80030c4:	08015ab0 	.word	0x08015ab0
 80030c8:	08015ab4 	.word	0x08015ab4

080030cc <NDEF_FillSMSStruct>:
  * @param  PayloadSize : number of data in the payload
  * @param  pSMSStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_FillSMSStruct( uint8_t* pPayload, uint32_t PayloadSize, sSMSInfo *pSMSStruct)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b08a      	sub	sp, #40	; 0x28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
  uint8_t* pLastByteAdd, *pLook4Word, *pEndString ;
  char* pKeyWord;
  uint32_t SizeOfKeyWord;
  
  pKeyWord = SMS_TYPE_STRING;
 80030d8:	4b3a      	ldr	r3, [pc, #232]	; (80031c4 <NDEF_FillSMSStruct+0xf8>)
 80030da:	61fb      	str	r3, [r7, #28]
  SizeOfKeyWord = SMS_TYPE_STRING_LENGTH;
 80030dc:	2304      	movs	r3, #4
 80030de:	61bb      	str	r3, [r7, #24]
  
  /* First charactere force to NULL in case not matching found */
  *pSMSStruct->PhoneNumber = 0;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
  *pSMSStruct->Message = 0;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	741a      	strb	r2, [r3, #16]
  
  /* Interresting information are stored before picture if any */
  /* Moreover picture is not used in this demonstration SW */  
  pLastByteAdd = (uint8_t*)(pPayload + PayloadSize);
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	4413      	add	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
  
  pLook4Word = pPayload;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 80030f8:	e002      	b.n	8003100 <NDEF_FillSMSStruct+0x34>
  {
    pLook4Word++;
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	3301      	adds	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	69f9      	ldr	r1, [r7, #28]
 8003104:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003106:	f00f fd1d 	bl	8012b44 <memcmp>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d003      	beq.n	8003118 <NDEF_FillSMSStruct+0x4c>
 8003110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	429a      	cmp	r2, r3
 8003116:	d3f0      	bcc.n	80030fa <NDEF_FillSMSStruct+0x2e>
  }
  
  pEndString = pLook4Word;
 8003118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311a:	623b      	str	r3, [r7, #32]
  /* Retrieve phone number */
  if( pLook4Word != pLastByteAdd)
 800311c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	429a      	cmp	r2, r3
 8003122:	d023      	beq.n	800316c <NDEF_FillSMSStruct+0xa0>
  {  
    pLook4Word += SizeOfKeyWord;
 8003124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	4413      	add	r3, r2
 800312a:	627b      	str	r3, [r7, #36]	; 0x24
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 800312c:	e002      	b.n	8003134 <NDEF_FillSMSStruct+0x68>
    {
      pEndString++;
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	3301      	adds	r3, #1
 8003132:	623b      	str	r3, [r7, #32]
    while( memcmp( pEndString, URI_FIRST_DATA_END, URI_FIRST_DATA_END_LENGTH) && pEndString<pLastByteAdd )
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	781a      	ldrb	r2, [r3, #0]
 8003138:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <NDEF_FillSMSStruct+0xfc>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d003      	beq.n	8003148 <NDEF_FillSMSStruct+0x7c>
 8003140:	6a3a      	ldr	r2, [r7, #32]
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	d3f2      	bcc.n	800312e <NDEF_FillSMSStruct+0x62>
    }
    if( pEndString != pLastByteAdd)
 8003148:	6a3a      	ldr	r2, [r7, #32]
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	429a      	cmp	r2, r3
 800314e:	d00d      	beq.n	800316c <NDEF_FillSMSStruct+0xa0>
    {
      memcpy( pSMSStruct->PhoneNumber, pLook4Word, pEndString-pLook4Word);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	6a3a      	ldr	r2, [r7, #32]
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	461a      	mov	r2, r3
 800315a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800315c:	f00f fd00 	bl	8012b60 <memcpy>
      /* add end of string charactere */
      pSMSStruct->PhoneNumber[pEndString-pLook4Word] = 0;  
 8003160:	6a3a      	ldr	r2, [r7, #32]
 8003162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	2100      	movs	r1, #0
 800316a:	54d1      	strb	r1, [r2, r3]
    }
  }  
  pEndString += URI_FIRST_DATA_END_LENGTH;
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	3301      	adds	r3, #1
 8003170:	623b      	str	r3, [r7, #32]
  pLook4Word = pEndString;
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* check if e-mail subject is present */
  if(!memcmp( pLook4Word, MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH))
 8003176:	2205      	movs	r2, #5
 8003178:	4914      	ldr	r1, [pc, #80]	; (80031cc <NDEF_FillSMSStruct+0x100>)
 800317a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800317c:	f00f fce2 	bl	8012b44 <memcmp>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d119      	bne.n	80031ba <NDEF_FillSMSStruct+0xee>
  {    
    pEndString += MESSAGE_BEGIN_STRING_LENGTH;
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	3305      	adds	r3, #5
 800318a:	623b      	str	r3, [r7, #32]
    /* Retrieve message */
    memcpy( pSMSStruct->Message, pEndString, PayloadSize-(pEndString-pPayload));
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f103 0010 	add.w	r0, r3, #16
 8003192:	6a3a      	ldr	r2, [r7, #32]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	461a      	mov	r2, r3
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	461a      	mov	r2, r3
 80031a0:	6a39      	ldr	r1, [r7, #32]
 80031a2:	f00f fcdd 	bl	8012b60 <memcpy>
    /* add end of string charactere */
    pSMSStruct->Message[PayloadSize-(pEndString-pPayload)] = 0;    
 80031a6:	6a3a      	ldr	r2, [r7, #32]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4413      	add	r3, r2
 80031b6:	2200      	movs	r2, #0
 80031b8:	741a      	strb	r2, [r3, #16]
  }
}
 80031ba:	bf00      	nop
 80031bc:	3728      	adds	r7, #40	; 0x28
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	08015ab8 	.word	0x08015ab8
 80031c8:	08015ac0 	.word	0x08015ac0
 80031cc:	08015ac4 	.word	0x08015ac4

080031d0 <NDEF_ReadURI_SMS>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pSMSStruct : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_ReadURI_SMS ( sRecordInfo *pRecordStruct, sSMSInfo *pSMSStruct )
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  uint8_t* pPayload;
  uint32_t PayloadSize;
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	789b      	ldrb	r3, [r3, #2]
 80031de:	061a      	lsls	r2, r3, #24
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	78db      	ldrb	r3, [r3, #3]
 80031e4:	041b      	lsls	r3, r3, #16
 80031e6:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	791b      	ldrb	r3, [r3, #4]
 80031ec:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80031ee:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* Read record header */
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80031fe:	60bb      	str	r3, [r7, #8]
  
  if( pRecordStruct->NDEF_Type == URI_SMS_TYPE)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003206:	2b03      	cmp	r3, #3
 8003208:	d104      	bne.n	8003214 <NDEF_ReadURI_SMS+0x44>
    NDEF_FillSMSStruct(pPayload , PayloadSize, pSMSStruct);
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	68f9      	ldr	r1, [r7, #12]
 800320e:	68b8      	ldr	r0, [r7, #8]
 8003210:	f7ff ff5c 	bl	80030cc <NDEF_FillSMSStruct>
  
}
 8003214:	bf00      	nop
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <NDEF_ReadSMS>:
  * @param  pSMSStruct : pointer on the structure to fill 
  * @retval SUCCESS : SMS information from NDEF have been retrieve
  * @retval ERROR : Not able to retrieve SMS information
  */
uint16_t NDEF_ReadSMS(sRecordInfo *pRecordStruct, sSMSInfo *pSMSStruct)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b088      	sub	sp, #32
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
 8003224:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	83fb      	strh	r3, [r7, #30]
  uint16_t FileId=0;
 800322a:	2300      	movs	r3, #0
 800322c:	82fb      	strh	r3, [r7, #22]
  sRecordInfo *pSPRecordStruct;  
  uint32_t PayloadSize, RecordPosition;
  uint8_t* pData;
  
  if( pRecordStruct->NDEF_Type == URI_SMS_TYPE )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003234:	2b03      	cmp	r3, #3
 8003236:	d106      	bne.n	8003246 <NDEF_ReadSMS+0x2a>
  {  
    NDEF_ReadURI_SMS(pRecordStruct, pSMSStruct );
 8003238:	6839      	ldr	r1, [r7, #0]
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7ff ffc8 	bl	80031d0 <NDEF_ReadURI_SMS>
    status = NDEF_SUCCESS;
 8003240:	2300      	movs	r3, #0
 8003242:	83fb      	strh	r3, [r7, #30]
 8003244:	e056      	b.n	80032f4 <NDEF_ReadSMS+0xd8>
  }
  else if( pRecordStruct->NDEF_Type == SMARTPOSTER_TYPE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800324c:	2b06      	cmp	r3, #6
 800324e:	d151      	bne.n	80032f4 <NDEF_ReadSMS+0xd8>
  {
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8003250:	2300      	movs	r3, #0
 8003252:	61bb      	str	r3, [r7, #24]
 8003254:	e047      	b.n	80032e6 <NDEF_ReadSMS+0xca>
    {
      pSPRecordStruct = (sRecordInfo *)(pRecordStruct->SPRecordStructAdd[RecordPosition]);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	3284      	adds	r2, #132	; 0x84
 800325c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003260:	613b      	str	r3, [r7, #16]
      if(pSPRecordStruct->NDEF_Type == URI_SMS_TYPE )
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003268:	2b03      	cmp	r3, #3
 800326a:	d105      	bne.n	8003278 <NDEF_ReadSMS+0x5c>
      {
        NDEF_ReadURI_SMS(pSPRecordStruct, pSMSStruct );
 800326c:	6839      	ldr	r1, [r7, #0]
 800326e:	6938      	ldr	r0, [r7, #16]
 8003270:	f7ff ffae 	bl	80031d0 <NDEF_ReadURI_SMS>
        status = NDEF_SUCCESS;
 8003274:	2300      	movs	r3, #0
 8003276:	83fb      	strh	r3, [r7, #30]
      }
      if(pSPRecordStruct->NDEF_Type == TEXT_TYPE )
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 800327e:	2b08      	cmp	r3, #8
 8003280:	d12e      	bne.n	80032e0 <NDEF_ReadSMS+0xc4>
      {
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	789b      	ldrb	r3, [r3, #2]
 8003286:	061a      	lsls	r2, r3, #24
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	78db      	ldrb	r3, [r3, #3]
 800328c:	041b      	lsls	r3, r3, #16
 800328e:	431a      	orrs	r2, r3
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	791b      	ldrb	r3, [r3, #4]
 8003294:	021b      	lsls	r3, r3, #8
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003296:	4313      	orrs	r3, r2
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	7952      	ldrb	r2, [r2, #5]
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 800329c:	4313      	orrs	r3, r2
 800329e:	60fb      	str	r3, [r7, #12]
        
        /* The instruction content the UTF-8 language code that is not used here */
        pData = (uint8_t*)pSPRecordStruct->PayloadBufferAdd;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 80032a6:	60bb      	str	r3, [r7, #8]
        PayloadSize -= *pData+1; /* remove not usefull data */
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1a9b      	subs	r3, r3, r2
 80032b2:	3b01      	subs	r3, #1
 80032b4:	60fb      	str	r3, [r7, #12]
        pData += *pData+1; /* set pointer on usefull data */
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	68ba      	ldr	r2, [r7, #8]
 80032be:	4413      	add	r3, r2
 80032c0:	60bb      	str	r3, [r7, #8]
        
        memcpy(pSMSStruct->Information, pData, PayloadSize);
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	68b9      	ldr	r1, [r7, #8]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f00f fc47 	bl	8012b60 <memcpy>
        /* add end of string charactere */
        pSMSStruct->Information[PayloadSize] = 0;    
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61bb      	str	r3, [r7, #24]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 80032ec:	461a      	mov	r2, r3
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d3b0      	bcc.n	8003256 <NDEF_ReadSMS+0x3a>
      }
    }
  }
  
  NFC_TT4_CloseNDEFSession(FileId);
 80032f4:	8afb      	ldrh	r3, [r7, #22]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7fe fe3a 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  
  return status;
 80032fc:	8bfb      	ldrh	r3, [r7, #30]
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3720      	adds	r7, #32
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <NDEF_WriteSMS>:
  * @param  pSMSStruct : pointer on structure that contain the SMS information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteSMS ( sSMSInfo *pSMSStruct )
{
 8003308:	b5b0      	push	{r4, r5, r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8003310:	2301      	movs	r3, #1
 8003312:	83fb      	strh	r3, [r7, #30]
  uint32_t smsSize, infoSize, totalSize, Offset = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  /*              TYPE                 */
  /*----------------------------------*/
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  
  NDEF_Buffer[0] = 0;
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 800331a:	2200      	movs	r2, #0
 800331c:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[1] = 0;
 800331e:	4b69      	ldr	r3, [pc, #420]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003320:	2200      	movs	r2, #0
 8003322:	705a      	strb	r2, [r3, #1]
  Offset = FIRST_RECORD_OFFSET;
 8003324:	2302      	movs	r3, #2
 8003326:	613b      	str	r3, [r7, #16]
  infoSize = 0;
 8003328:	2300      	movs	r3, #0
 800332a:	61bb      	str	r3, [r7, #24]
  
  /* SMS : 1+sms:+tel+1+body=+message */
  smsSize = 1+SMS_TYPE_STRING_LENGTH+strlen(pSMSStruct->PhoneNumber)+URI_FIRST_DATA_END_LENGTH+MESSAGE_BEGIN_STRING_LENGTH+strlen(pSMSStruct->Message);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4618      	mov	r0, r3
 8003330:	f7fc ff4e 	bl	80001d0 <strlen>
 8003334:	4604      	mov	r4, r0
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	3310      	adds	r3, #16
 800333a:	4618      	mov	r0, r3
 800333c:	f7fc ff48 	bl	80001d0 <strlen>
 8003340:	4603      	mov	r3, r0
 8003342:	4423      	add	r3, r4
 8003344:	330b      	adds	r3, #11
 8003346:	60fb      	str	r3, [r7, #12]

  /* Check if a Smart poster is needed */
  if (pSMSStruct->Information[0] != '\0')
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d066      	beq.n	8003420 <NDEF_WriteSMS+0x118>
  {
    /* Info : 1+2+info */
    infoSize = 1+ISO_ENGLISH_CODE_STRING_LENGTH+strlen(pSMSStruct->Information);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003358:	4618      	mov	r0, r3
 800335a:	f7fc ff39 	bl	80001d0 <strlen>
 800335e:	4603      	mov	r3, r0
 8003360:	3303      	adds	r3, #3
 8003362:	61bb      	str	r3, [r7, #24]
    /* Total */
    totalSize = 4+smsSize+4+infoSize;
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4413      	add	r3, r2
 800336a:	3308      	adds	r3, #8
 800336c:	617b      	str	r3, [r7, #20]
    if (smsSize > 255) totalSize+=3; /* Normal SMS size */
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2bff      	cmp	r3, #255	; 0xff
 8003372:	d902      	bls.n	800337a <NDEF_WriteSMS+0x72>
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	3303      	adds	r3, #3
 8003378:	617b      	str	r3, [r7, #20]
    if (infoSize > 255) totalSize+=3;  /* Normal Info size */
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2bff      	cmp	r3, #255	; 0xff
 800337e:	d902      	bls.n	8003386 <NDEF_WriteSMS+0x7e>
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	3303      	adds	r3, #3
 8003384:	617b      	str	r3, [r7, #20]
    
    /* SmartPoster header */
    if (totalSize > 255) 
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2bff      	cmp	r3, #255	; 0xff
 800338a:	d92b      	bls.n	80033e4 <NDEF_WriteSMS+0xdc>
    {
      NDEF_Buffer[Offset++] = 0xC1;
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	1c5a      	adds	r2, r3, #1
 8003390:	613a      	str	r2, [r7, #16]
 8003392:	4a4c      	ldr	r2, [pc, #304]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003394:	21c1      	movs	r1, #193	; 0xc1
 8003396:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	613a      	str	r2, [r7, #16]
 800339e:	4a49      	ldr	r2, [pc, #292]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80033a0:	2102      	movs	r1, #2
 80033a2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0xFF000000)>>24;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	0e19      	lsrs	r1, r3, #24
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	613a      	str	r2, [r7, #16]
 80033ae:	b2c9      	uxtb	r1, r1
 80033b0:	4a44      	ldr	r2, [pc, #272]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80033b2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x00FF0000)>>16;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	0c19      	lsrs	r1, r3, #16
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	613a      	str	r2, [r7, #16]
 80033be:	b2c9      	uxtb	r1, r1
 80033c0:	4a40      	ldr	r2, [pc, #256]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80033c2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x0000FF00)>>8;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	0a19      	lsrs	r1, r3, #8
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	613a      	str	r2, [r7, #16]
 80033ce:	b2c9      	uxtb	r1, r1
 80033d0:	4a3c      	ldr	r2, [pc, #240]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80033d2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x000000FF);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	613a      	str	r2, [r7, #16]
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	b2d1      	uxtb	r1, r2
 80033de:	4a39      	ldr	r2, [pc, #228]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80033e0:	54d1      	strb	r1, [r2, r3]
 80033e2:	e012      	b.n	800340a <NDEF_WriteSMS+0x102>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0xD1;
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	613a      	str	r2, [r7, #16]
 80033ea:	4a36      	ldr	r2, [pc, #216]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80033ec:	21d1      	movs	r1, #209	; 0xd1
 80033ee:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	613a      	str	r2, [r7, #16]
 80033f6:	4a33      	ldr	r2, [pc, #204]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80033f8:	2102      	movs	r1, #2
 80033fa:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)totalSize;
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	613a      	str	r2, [r7, #16]
 8003402:	697a      	ldr	r2, [r7, #20]
 8003404:	b2d1      	uxtb	r1, r2
 8003406:	4a2f      	ldr	r2, [pc, #188]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003408:	54d1      	strb	r1, [r2, r3]
    }
    memcpy(&NDEF_Buffer[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	4a2d      	ldr	r2, [pc, #180]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 800340e:	4413      	add	r3, r2
 8003410:	2202      	movs	r2, #2
 8003412:	492d      	ldr	r1, [pc, #180]	; (80034c8 <NDEF_WriteSMS+0x1c0>)
 8003414:	4618      	mov	r0, r3
 8003416:	f00f fba3 	bl	8012b60 <memcpy>
    Offset+=SMART_POSTER_TYPE_STRING_LENGTH;
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	3302      	adds	r3, #2
 800341e:	613b      	str	r3, [r7, #16]
  }
  
  /* SMS header */
  NDEF_Buffer[Offset] = 0x81;
 8003420:	4a28      	ldr	r2, [pc, #160]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	2281      	movs	r2, #129	; 0x81
 8003428:	701a      	strb	r2, [r3, #0]
  if (smsSize < 256) NDEF_Buffer[Offset] |= 0x10;                      /* Set the SR bit */
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2bff      	cmp	r3, #255	; 0xff
 800342e:	d80b      	bhi.n	8003448 <NDEF_WriteSMS+0x140>
 8003430:	4a24      	ldr	r2, [pc, #144]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f043 0310 	orr.w	r3, r3, #16
 800343c:	b2d9      	uxtb	r1, r3
 800343e:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	4413      	add	r3, r2
 8003444:	460a      	mov	r2, r1
 8003446:	701a      	strb	r2, [r3, #0]
  if (pSMSStruct->Information[0] == '\0') NDEF_Buffer[Offset] |= 0x40; /* Set the ME bit */
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10b      	bne.n	800346a <NDEF_WriteSMS+0x162>
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	4413      	add	r3, r2
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800345e:	b2d9      	uxtb	r1, r3
 8003460:	4a18      	ldr	r2, [pc, #96]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4413      	add	r3, r2
 8003466:	460a      	mov	r2, r1
 8003468:	701a      	strb	r2, [r3, #0]
  Offset++;
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	3301      	adds	r3, #1
 800346e:	613b      	str	r3, [r7, #16]
  
  NDEF_Buffer[Offset++] = URI_TYPE_STRING_LENGTH;
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	613a      	str	r2, [r7, #16]
 8003476:	4a13      	ldr	r2, [pc, #76]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003478:	2101      	movs	r1, #1
 800347a:	54d1      	strb	r1, [r2, r3]
  if (smsSize > 255)
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2bff      	cmp	r3, #255	; 0xff
 8003480:	d924      	bls.n	80034cc <NDEF_WriteSMS+0x1c4>
  {
    NDEF_Buffer[Offset++] = (smsSize & 0xFF000000)>>24;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	0e19      	lsrs	r1, r3, #24
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	1c5a      	adds	r2, r3, #1
 800348a:	613a      	str	r2, [r7, #16]
 800348c:	b2c9      	uxtb	r1, r1
 800348e:	4a0d      	ldr	r2, [pc, #52]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 8003490:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (smsSize & 0x00FF0000)>>16;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	0c19      	lsrs	r1, r3, #16
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1c5a      	adds	r2, r3, #1
 800349a:	613a      	str	r2, [r7, #16]
 800349c:	b2c9      	uxtb	r1, r1
 800349e:	4a09      	ldr	r2, [pc, #36]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80034a0:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (smsSize & 0x0000FF00)>>8;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	0a19      	lsrs	r1, r3, #8
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	613a      	str	r2, [r7, #16]
 80034ac:	b2c9      	uxtb	r1, r1
 80034ae:	4a05      	ldr	r2, [pc, #20]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80034b0:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (smsSize & 0x000000FF);
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	613a      	str	r2, [r7, #16]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	b2d1      	uxtb	r1, r2
 80034bc:	4a01      	ldr	r2, [pc, #4]	; (80034c4 <NDEF_WriteSMS+0x1bc>)
 80034be:	54d1      	strb	r1, [r2, r3]
 80034c0:	e00b      	b.n	80034da <NDEF_WriteSMS+0x1d2>
 80034c2:	bf00      	nop
 80034c4:	20002178 	.word	0x20002178
 80034c8:	08015acc 	.word	0x08015acc
  }
  else
  {
    NDEF_Buffer[Offset++] = (uint8_t)smsSize;
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	613a      	str	r2, [r7, #16]
 80034d2:	68fa      	ldr	r2, [r7, #12]
 80034d4:	b2d1      	uxtb	r1, r2
 80034d6:	4a87      	ldr	r2, [pc, #540]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80034d8:	54d1      	strb	r1, [r2, r3]
  }
  memcpy(&NDEF_Buffer[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH);
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	4a85      	ldr	r2, [pc, #532]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80034de:	4413      	add	r3, r2
 80034e0:	2201      	movs	r2, #1
 80034e2:	4985      	ldr	r1, [pc, #532]	; (80036f8 <NDEF_WriteSMS+0x3f0>)
 80034e4:	4618      	mov	r0, r3
 80034e6:	f00f fb3b 	bl	8012b60 <memcpy>
  Offset+=URI_TYPE_STRING_LENGTH;
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	3301      	adds	r3, #1
 80034ee:	613b      	str	r3, [r7, #16]
  
  /* SMS payload */
  NDEF_Buffer[Offset++] = URI_ID_0x00; /* URI identifier no abbreviation */
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1c5a      	adds	r2, r3, #1
 80034f4:	613a      	str	r2, [r7, #16]
 80034f6:	4a7f      	ldr	r2, [pc, #508]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80034f8:	2100      	movs	r1, #0
 80034fa:	54d1      	strb	r1, [r2, r3]
  memcpy(&NDEF_Buffer[Offset], SMS_TYPE_STRING, SMS_TYPE_STRING_LENGTH);
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	4a7d      	ldr	r2, [pc, #500]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003500:	4413      	add	r3, r2
 8003502:	2204      	movs	r2, #4
 8003504:	497d      	ldr	r1, [pc, #500]	; (80036fc <NDEF_WriteSMS+0x3f4>)
 8003506:	4618      	mov	r0, r3
 8003508:	f00f fb2a 	bl	8012b60 <memcpy>
  Offset += SMS_TYPE_STRING_LENGTH;
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	3304      	adds	r3, #4
 8003510:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[Offset], pSMSStruct->PhoneNumber,strlen(pSMSStruct->PhoneNumber));
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4a77      	ldr	r2, [pc, #476]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003516:	189c      	adds	r4, r3, r2
 8003518:	687d      	ldr	r5, [r7, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fc fe57 	bl	80001d0 <strlen>
 8003522:	4603      	mov	r3, r0
 8003524:	461a      	mov	r2, r3
 8003526:	4629      	mov	r1, r5
 8003528:	4620      	mov	r0, r4
 800352a:	f00f fb19 	bl	8012b60 <memcpy>
  Offset += strlen(pSMSStruct->PhoneNumber);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4618      	mov	r0, r3
 8003532:	f7fc fe4d 	bl	80001d0 <strlen>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	4413      	add	r3, r2
 800353c:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[Offset], URI_FIRST_DATA_END,URI_FIRST_DATA_END_LENGTH);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	4a6c      	ldr	r2, [pc, #432]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003542:	4413      	add	r3, r2
 8003544:	2201      	movs	r2, #1
 8003546:	496e      	ldr	r1, [pc, #440]	; (8003700 <NDEF_WriteSMS+0x3f8>)
 8003548:	4618      	mov	r0, r3
 800354a:	f00f fb09 	bl	8012b60 <memcpy>
  Offset += URI_FIRST_DATA_END_LENGTH;
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	3301      	adds	r3, #1
 8003552:	613b      	str	r3, [r7, #16]
  
  memcpy( &NDEF_Buffer[Offset], MESSAGE_BEGIN_STRING, MESSAGE_BEGIN_STRING_LENGTH);
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4a67      	ldr	r2, [pc, #412]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003558:	4413      	add	r3, r2
 800355a:	2205      	movs	r2, #5
 800355c:	4969      	ldr	r1, [pc, #420]	; (8003704 <NDEF_WriteSMS+0x3fc>)
 800355e:	4618      	mov	r0, r3
 8003560:	f00f fafe 	bl	8012b60 <memcpy>
  Offset += MESSAGE_BEGIN_STRING_LENGTH;
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	3305      	adds	r3, #5
 8003568:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[Offset], pSMSStruct->Message, strlen(pSMSStruct->Message));
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	4a61      	ldr	r2, [pc, #388]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 800356e:	189c      	adds	r4, r3, r2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f103 0510 	add.w	r5, r3, #16
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3310      	adds	r3, #16
 800357a:	4618      	mov	r0, r3
 800357c:	f7fc fe28 	bl	80001d0 <strlen>
 8003580:	4603      	mov	r3, r0
 8003582:	461a      	mov	r2, r3
 8003584:	4629      	mov	r1, r5
 8003586:	4620      	mov	r0, r4
 8003588:	f00f faea 	bl	8012b60 <memcpy>
  Offset += strlen(pSMSStruct->Message);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3310      	adds	r3, #16
 8003590:	4618      	mov	r0, r3
 8003592:	f7fc fe1d 	bl	80001d0 <strlen>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4413      	add	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
  
  /* Information header */
  if (pSMSStruct->Information[0] != '\0')
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 31a0 	ldrb.w	r3, [r3, #416]	; 0x1a0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d079      	beq.n	800369c <NDEF_WriteSMS+0x394>
  {
    if (infoSize > 255)
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	2bff      	cmp	r3, #255	; 0xff
 80035ac:	d92b      	bls.n	8003606 <NDEF_WriteSMS+0x2fe>
    {
      NDEF_Buffer[Offset++] = 0x41;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	613a      	str	r2, [r7, #16]
 80035b4:	4a4f      	ldr	r2, [pc, #316]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80035b6:	2141      	movs	r1, #65	; 0x41
 80035b8:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	613a      	str	r2, [r7, #16]
 80035c0:	4a4c      	ldr	r2, [pc, #304]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0xFF000000)>>24;
 80035c6:	69bb      	ldr	r3, [r7, #24]
 80035c8:	0e19      	lsrs	r1, r3, #24
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1c5a      	adds	r2, r3, #1
 80035ce:	613a      	str	r2, [r7, #16]
 80035d0:	b2c9      	uxtb	r1, r1
 80035d2:	4a48      	ldr	r2, [pc, #288]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80035d4:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x00FF0000)>>16;
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	0c19      	lsrs	r1, r3, #16
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	613a      	str	r2, [r7, #16]
 80035e0:	b2c9      	uxtb	r1, r1
 80035e2:	4a44      	ldr	r2, [pc, #272]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80035e4:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x0000FF00)>>8;
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	0a19      	lsrs	r1, r3, #8
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1c5a      	adds	r2, r3, #1
 80035ee:	613a      	str	r2, [r7, #16]
 80035f0:	b2c9      	uxtb	r1, r1
 80035f2:	4a40      	ldr	r2, [pc, #256]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80035f4:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x000000FF);
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	613a      	str	r2, [r7, #16]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	b2d1      	uxtb	r1, r2
 8003600:	4a3c      	ldr	r2, [pc, #240]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003602:	54d1      	strb	r1, [r2, r3]
 8003604:	e012      	b.n	800362c <NDEF_WriteSMS+0x324>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0x51;
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	613a      	str	r2, [r7, #16]
 800360c:	4a39      	ldr	r2, [pc, #228]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 800360e:	2151      	movs	r1, #81	; 0x51
 8003610:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	1c5a      	adds	r2, r3, #1
 8003616:	613a      	str	r2, [r7, #16]
 8003618:	4a36      	ldr	r2, [pc, #216]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 800361a:	2101      	movs	r1, #1
 800361c:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)infoSize;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	613a      	str	r2, [r7, #16]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	b2d1      	uxtb	r1, r2
 8003628:	4a32      	ldr	r2, [pc, #200]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 800362a:	54d1      	strb	r1, [r2, r3]
    }
    
    memcpy(&NDEF_Buffer[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH);
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4a31      	ldr	r2, [pc, #196]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003630:	4413      	add	r3, r2
 8003632:	2201      	movs	r2, #1
 8003634:	4934      	ldr	r1, [pc, #208]	; (8003708 <NDEF_WriteSMS+0x400>)
 8003636:	4618      	mov	r0, r3
 8003638:	f00f fa92 	bl	8012b60 <memcpy>
    Offset+=TEXT_TYPE_STRING_LENGTH;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	3301      	adds	r3, #1
 8003640:	613b      	str	r3, [r7, #16]
    NDEF_Buffer[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	613a      	str	r2, [r7, #16]
 8003648:	4a2a      	ldr	r2, [pc, #168]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 800364a:	2102      	movs	r1, #2
 800364c:	54d1      	strb	r1, [r2, r3]
    memcpy(&NDEF_Buffer[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH);
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4a28      	ldr	r2, [pc, #160]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003652:	4413      	add	r3, r2
 8003654:	2202      	movs	r2, #2
 8003656:	492d      	ldr	r1, [pc, #180]	; (800370c <NDEF_WriteSMS+0x404>)
 8003658:	4618      	mov	r0, r3
 800365a:	f00f fa81 	bl	8012b60 <memcpy>
    Offset+=ISO_ENGLISH_CODE_STRING_LENGTH;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	3302      	adds	r3, #2
 8003662:	613b      	str	r3, [r7, #16]
    
    /* Information payload */
    memcpy( &NDEF_Buffer[Offset], pSMSStruct->Information,strlen(pSMSStruct->Information));
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4a23      	ldr	r2, [pc, #140]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 8003668:	189c      	adds	r4, r3, r2
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f503 75d0 	add.w	r5, r3, #416	; 0x1a0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc fdaa 	bl	80001d0 <strlen>
 800367c:	4603      	mov	r3, r0
 800367e:	461a      	mov	r2, r3
 8003680:	4629      	mov	r1, r5
 8003682:	4620      	mov	r0, r4
 8003684:	f00f fa6c 	bl	8012b60 <memcpy>
    Offset += strlen(pSMSStruct->Information);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc fd9e 	bl	80001d0 <strlen>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	4413      	add	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
  }
  
  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , Offset , NDEF_Buffer);
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	b29b      	uxth	r3, r3
 80036a0:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80036a2:	4619      	mov	r1, r3
 80036a4:	2000      	movs	r0, #0
 80036a6:	f7fe fd13 	bl	80020d0 <NFC_TT4_WriteData>
 80036aa:	4603      	mov	r3, r0
 80036ac:	83fb      	strh	r3, [r7, #30]
  
  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 80036ae:	8bfb      	ldrh	r3, [r7, #30]
 80036b0:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80036b4:	d112      	bne.n	80036dc <NDEF_WriteSMS+0x3d4>
  {
    Offset -= 2; /* Must not count the 2 byte that represent the NDEF size */
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3b02      	subs	r3, #2
 80036ba:	613b      	str	r3, [r7, #16]
    NDEF_Buffer[0] = (Offset & 0xFF00)>>8;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	0a1b      	lsrs	r3, r3, #8
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80036c4:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (Offset & 0x00FF);
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	4b0a      	ldr	r3, [pc, #40]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80036cc:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <NDEF_WriteSMS+0x3ec>)
 80036d0:	2102      	movs	r1, #2
 80036d2:	2000      	movs	r0, #0
 80036d4:	f7fe fcfc 	bl	80020d0 <NFC_TT4_WriteData>
 80036d8:	4603      	mov	r3, r0
 80036da:	83fb      	strh	r3, [r7, #30]
  }
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 80036dc:	8bfb      	ldrh	r3, [r7, #30]
 80036de:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 80036e2:	d101      	bne.n	80036e8 <NDEF_WriteSMS+0x3e0>
    return NDEF_SUCCESS;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <NDEF_WriteSMS+0x3e2>
  else
    return NDEF_ERROR;
 80036e8:	2301      	movs	r3, #1
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bdb0      	pop	{r4, r5, r7, pc}
 80036f2:	bf00      	nop
 80036f4:	20002178 	.word	0x20002178
 80036f8:	08015ad0 	.word	0x08015ad0
 80036fc:	08015ab8 	.word	0x08015ab8
 8003700:	08015ac0 	.word	0x08015ac0
 8003704:	08015ac4 	.word	0x08015ac4
 8003708:	08015ad4 	.word	0x08015ad4
 800370c:	08015ad8 	.word	0x08015ad8

08003710 <NDEF_Parse_WellKnowType>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pURI : pointer on the structure to fill
  * @retval NONE 
  */
static void NDEF_Parse_WellKnowType(sRecordInfo *pRecordStruct, sURI_Info* pURI )
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t PayloadSize;
  uint8_t Offset;
  uint8_t* pPayload;
  
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003720:	613b      	str	r3, [r7, #16]
  
  switch( *pPayload)
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	3b01      	subs	r3, #1
 8003728:	2b22      	cmp	r3, #34	; 0x22
 800372a:	f200 8184 	bhi.w	8003a36 <NDEF_Parse_WellKnowType+0x326>
 800372e:	a201      	add	r2, pc, #4	; (adr r2, 8003734 <NDEF_Parse_WellKnowType+0x24>)
 8003730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003734:	080037c1 	.word	0x080037c1
 8003738:	080037d3 	.word	0x080037d3
 800373c:	080037e5 	.word	0x080037e5
 8003740:	080037f7 	.word	0x080037f7
 8003744:	08003809 	.word	0x08003809
 8003748:	0800381b 	.word	0x0800381b
 800374c:	0800382d 	.word	0x0800382d
 8003750:	0800383f 	.word	0x0800383f
 8003754:	08003851 	.word	0x08003851
 8003758:	08003863 	.word	0x08003863
 800375c:	08003875 	.word	0x08003875
 8003760:	08003887 	.word	0x08003887
 8003764:	08003899 	.word	0x08003899
 8003768:	080038ab 	.word	0x080038ab
 800376c:	080038bd 	.word	0x080038bd
 8003770:	080038cf 	.word	0x080038cf
 8003774:	080038e1 	.word	0x080038e1
 8003778:	080038f3 	.word	0x080038f3
 800377c:	08003905 	.word	0x08003905
 8003780:	08003917 	.word	0x08003917
 8003784:	08003929 	.word	0x08003929
 8003788:	0800393b 	.word	0x0800393b
 800378c:	0800394d 	.word	0x0800394d
 8003790:	0800395f 	.word	0x0800395f
 8003794:	08003971 	.word	0x08003971
 8003798:	08003983 	.word	0x08003983
 800379c:	08003995 	.word	0x08003995
 80037a0:	080039a7 	.word	0x080039a7
 80037a4:	080039b9 	.word	0x080039b9
 80037a8:	080039cb 	.word	0x080039cb
 80037ac:	080039dd 	.word	0x080039dd
 80037b0:	080039ef 	.word	0x080039ef
 80037b4:	08003a01 	.word	0x08003a01
 80037b8:	08003a13 	.word	0x08003a13
 80037bc:	08003a25 	.word	0x08003a25
  {
  case URI_ID_0x01:
    memcpy( pURI->protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING));
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	220b      	movs	r2, #11
 80037c4:	49b2      	ldr	r1, [pc, #712]	; (8003a90 <NDEF_Parse_WellKnowType+0x380>)
 80037c6:	4618      	mov	r0, r3
 80037c8:	f00f f9ca 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x01_STRING);
 80037cc:	230b      	movs	r3, #11
 80037ce:	75fb      	strb	r3, [r7, #23]
    break;
 80037d0:	e134      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x02:
    memcpy( pURI->protocol, URI_ID_0x02_STRING, strlen(URI_ID_0x02_STRING));
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	220c      	movs	r2, #12
 80037d6:	49af      	ldr	r1, [pc, #700]	; (8003a94 <NDEF_Parse_WellKnowType+0x384>)
 80037d8:	4618      	mov	r0, r3
 80037da:	f00f f9c1 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x02_STRING);
 80037de:	230c      	movs	r3, #12
 80037e0:	75fb      	strb	r3, [r7, #23]
    break;
 80037e2:	e12b      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x03:
    memcpy( pURI->protocol, URI_ID_0x03_STRING, strlen(URI_ID_0x03_STRING));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2207      	movs	r2, #7
 80037e8:	49ab      	ldr	r1, [pc, #684]	; (8003a98 <NDEF_Parse_WellKnowType+0x388>)
 80037ea:	4618      	mov	r0, r3
 80037ec:	f00f f9b8 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x03_STRING);
 80037f0:	2307      	movs	r3, #7
 80037f2:	75fb      	strb	r3, [r7, #23]
    break;
 80037f4:	e122      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x04:
    memcpy( pURI->protocol, URI_ID_0x04_STRING, strlen(URI_ID_0x04_STRING));
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2208      	movs	r2, #8
 80037fa:	49a8      	ldr	r1, [pc, #672]	; (8003a9c <NDEF_Parse_WellKnowType+0x38c>)
 80037fc:	4618      	mov	r0, r3
 80037fe:	f00f f9af 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x04_STRING);
 8003802:	2308      	movs	r3, #8
 8003804:	75fb      	strb	r3, [r7, #23]
    break;
 8003806:	e119      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x05:
    memcpy( pURI->protocol, URI_ID_0x05_STRING, strlen(URI_ID_0x05_STRING));
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	2204      	movs	r2, #4
 800380c:	49a4      	ldr	r1, [pc, #656]	; (8003aa0 <NDEF_Parse_WellKnowType+0x390>)
 800380e:	4618      	mov	r0, r3
 8003810:	f00f f9a6 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x05_STRING);
 8003814:	2304      	movs	r3, #4
 8003816:	75fb      	strb	r3, [r7, #23]
    break;
 8003818:	e110      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x06:
    memcpy( pURI->protocol, URI_ID_0x06_STRING, strlen(URI_ID_0x06_STRING));
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	2207      	movs	r2, #7
 800381e:	49a1      	ldr	r1, [pc, #644]	; (8003aa4 <NDEF_Parse_WellKnowType+0x394>)
 8003820:	4618      	mov	r0, r3
 8003822:	f00f f99d 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x06_STRING);
 8003826:	2307      	movs	r3, #7
 8003828:	75fb      	strb	r3, [r7, #23]
    break;
 800382a:	e107      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x07:
    memcpy( pURI->protocol, URI_ID_0x07_STRING, strlen(URI_ID_0x07_STRING));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	221a      	movs	r2, #26
 8003830:	499d      	ldr	r1, [pc, #628]	; (8003aa8 <NDEF_Parse_WellKnowType+0x398>)
 8003832:	4618      	mov	r0, r3
 8003834:	f00f f994 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x07_STRING);
 8003838:	231a      	movs	r3, #26
 800383a:	75fb      	strb	r3, [r7, #23]
    break;
 800383c:	e0fe      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x08:
    memcpy( pURI->protocol, URI_ID_0x08_STRING, strlen(URI_ID_0x08_STRING));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	220a      	movs	r2, #10
 8003842:	499a      	ldr	r1, [pc, #616]	; (8003aac <NDEF_Parse_WellKnowType+0x39c>)
 8003844:	4618      	mov	r0, r3
 8003846:	f00f f98b 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x08_STRING);
 800384a:	230a      	movs	r3, #10
 800384c:	75fb      	strb	r3, [r7, #23]
    break;
 800384e:	e0f5      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x09:
    memcpy( pURI->protocol, URI_ID_0x09_STRING, strlen(URI_ID_0x09_STRING));
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	2207      	movs	r2, #7
 8003854:	4996      	ldr	r1, [pc, #600]	; (8003ab0 <NDEF_Parse_WellKnowType+0x3a0>)
 8003856:	4618      	mov	r0, r3
 8003858:	f00f f982 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x09_STRING);
 800385c:	2307      	movs	r3, #7
 800385e:	75fb      	strb	r3, [r7, #23]
    break;
 8003860:	e0ec      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0A:
    memcpy( pURI->protocol, URI_ID_0x0A_STRING, strlen(URI_ID_0x0A_STRING));
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	2207      	movs	r2, #7
 8003866:	4993      	ldr	r1, [pc, #588]	; (8003ab4 <NDEF_Parse_WellKnowType+0x3a4>)
 8003868:	4618      	mov	r0, r3
 800386a:	f00f f979 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x0A_STRING);
 800386e:	2307      	movs	r3, #7
 8003870:	75fb      	strb	r3, [r7, #23]
    break;
 8003872:	e0e3      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0B:
    memcpy( pURI->protocol, URI_ID_0x0B_STRING, strlen(URI_ID_0x0B_STRING));
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2206      	movs	r2, #6
 8003878:	498f      	ldr	r1, [pc, #572]	; (8003ab8 <NDEF_Parse_WellKnowType+0x3a8>)
 800387a:	4618      	mov	r0, r3
 800387c:	f00f f970 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x0B_STRING);
 8003880:	2306      	movs	r3, #6
 8003882:	75fb      	strb	r3, [r7, #23]
    break;
 8003884:	e0da      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0C:
    memcpy( pURI->protocol, URI_ID_0x0C_STRING, strlen(URI_ID_0x0C_STRING));
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2206      	movs	r2, #6
 800388a:	498c      	ldr	r1, [pc, #560]	; (8003abc <NDEF_Parse_WellKnowType+0x3ac>)
 800388c:	4618      	mov	r0, r3
 800388e:	f00f f967 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x0C_STRING);
 8003892:	2306      	movs	r3, #6
 8003894:	75fb      	strb	r3, [r7, #23]
    break;
 8003896:	e0d1      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0D:
    memcpy( pURI->protocol, URI_ID_0x0D_STRING, strlen(URI_ID_0x0D_STRING));
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	2206      	movs	r2, #6
 800389c:	4988      	ldr	r1, [pc, #544]	; (8003ac0 <NDEF_Parse_WellKnowType+0x3b0>)
 800389e:	4618      	mov	r0, r3
 80038a0:	f00f f95e 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x0D_STRING);
 80038a4:	2306      	movs	r3, #6
 80038a6:	75fb      	strb	r3, [r7, #23]
    break;
 80038a8:	e0c8      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0E:
    memcpy( pURI->protocol, URI_ID_0x0E_STRING, strlen(URI_ID_0x0E_STRING));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2206      	movs	r2, #6
 80038ae:	4985      	ldr	r1, [pc, #532]	; (8003ac4 <NDEF_Parse_WellKnowType+0x3b4>)
 80038b0:	4618      	mov	r0, r3
 80038b2:	f00f f955 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x0E_STRING);
 80038b6:	2306      	movs	r3, #6
 80038b8:	75fb      	strb	r3, [r7, #23]
    break;
 80038ba:	e0bf      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x0F:
    memcpy( pURI->protocol, URI_ID_0x0F_STRING, strlen(URI_ID_0x0F_STRING));
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	2205      	movs	r2, #5
 80038c0:	4981      	ldr	r1, [pc, #516]	; (8003ac8 <NDEF_Parse_WellKnowType+0x3b8>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f00f f94c 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x0F_STRING);
 80038c8:	2305      	movs	r3, #5
 80038ca:	75fb      	strb	r3, [r7, #23]
    break;
 80038cc:	e0b6      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x10:
    memcpy( pURI->protocol, URI_ID_0x10_STRING, strlen(URI_ID_0x10_STRING));
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	2209      	movs	r2, #9
 80038d2:	497e      	ldr	r1, [pc, #504]	; (8003acc <NDEF_Parse_WellKnowType+0x3bc>)
 80038d4:	4618      	mov	r0, r3
 80038d6:	f00f f943 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x10_STRING);
 80038da:	2309      	movs	r3, #9
 80038dc:	75fb      	strb	r3, [r7, #23]
    break;
 80038de:	e0ad      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x11:
    memcpy( pURI->protocol, URI_ID_0x11_STRING, strlen(URI_ID_0x11_STRING));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	2205      	movs	r2, #5
 80038e4:	497a      	ldr	r1, [pc, #488]	; (8003ad0 <NDEF_Parse_WellKnowType+0x3c0>)
 80038e6:	4618      	mov	r0, r3
 80038e8:	f00f f93a 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x11_STRING);
 80038ec:	2305      	movs	r3, #5
 80038ee:	75fb      	strb	r3, [r7, #23]
    break;
 80038f0:	e0a4      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x12:
    memcpy( pURI->protocol, URI_ID_0x12_STRING, strlen(URI_ID_0x12_STRING));
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	2207      	movs	r2, #7
 80038f6:	4977      	ldr	r1, [pc, #476]	; (8003ad4 <NDEF_Parse_WellKnowType+0x3c4>)
 80038f8:	4618      	mov	r0, r3
 80038fa:	f00f f931 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x12_STRING);
 80038fe:	2307      	movs	r3, #7
 8003900:	75fb      	strb	r3, [r7, #23]
    break;
 8003902:	e09b      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x13:
    memcpy( pURI->protocol, URI_ID_0x13_STRING, strlen(URI_ID_0x13_STRING));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2204      	movs	r2, #4
 8003908:	4973      	ldr	r1, [pc, #460]	; (8003ad8 <NDEF_Parse_WellKnowType+0x3c8>)
 800390a:	4618      	mov	r0, r3
 800390c:	f00f f928 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x13_STRING);
 8003910:	2304      	movs	r3, #4
 8003912:	75fb      	strb	r3, [r7, #23]
    break;
 8003914:	e092      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x14:
    memcpy( pURI->protocol, URI_ID_0x14_STRING, strlen(URI_ID_0x14_STRING));
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2204      	movs	r2, #4
 800391a:	4970      	ldr	r1, [pc, #448]	; (8003adc <NDEF_Parse_WellKnowType+0x3cc>)
 800391c:	4618      	mov	r0, r3
 800391e:	f00f f91f 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x14_STRING);
 8003922:	2304      	movs	r3, #4
 8003924:	75fb      	strb	r3, [r7, #23]
    break;
 8003926:	e089      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x15:
    memcpy( pURI->protocol, URI_ID_0x15_STRING, strlen(URI_ID_0x15_STRING));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2204      	movs	r2, #4
 800392c:	496c      	ldr	r1, [pc, #432]	; (8003ae0 <NDEF_Parse_WellKnowType+0x3d0>)
 800392e:	4618      	mov	r0, r3
 8003930:	f00f f916 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x15_STRING);
 8003934:	2304      	movs	r3, #4
 8003936:	75fb      	strb	r3, [r7, #23]
    break;
 8003938:	e080      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x16:
    memcpy( pURI->protocol, URI_ID_0x16_STRING, strlen(URI_ID_0x16_STRING));
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	2205      	movs	r2, #5
 800393e:	4969      	ldr	r1, [pc, #420]	; (8003ae4 <NDEF_Parse_WellKnowType+0x3d4>)
 8003940:	4618      	mov	r0, r3
 8003942:	f00f f90d 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x16_STRING);
 8003946:	2305      	movs	r3, #5
 8003948:	75fb      	strb	r3, [r7, #23]
    break;
 800394a:	e077      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x17:
    memcpy( pURI->protocol, URI_ID_0x17_STRING, strlen(URI_ID_0x17_STRING));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	2205      	movs	r2, #5
 8003950:	4965      	ldr	r1, [pc, #404]	; (8003ae8 <NDEF_Parse_WellKnowType+0x3d8>)
 8003952:	4618      	mov	r0, r3
 8003954:	f00f f904 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x17_STRING);
 8003958:	2305      	movs	r3, #5
 800395a:	75fb      	strb	r3, [r7, #23]
    break;
 800395c:	e06e      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x18:
    memcpy( pURI->protocol, URI_ID_0x18_STRING, strlen(URI_ID_0x18_STRING));
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	2208      	movs	r2, #8
 8003962:	4962      	ldr	r1, [pc, #392]	; (8003aec <NDEF_Parse_WellKnowType+0x3dc>)
 8003964:	4618      	mov	r0, r3
 8003966:	f00f f8fb 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x18_STRING);
 800396a:	2308      	movs	r3, #8
 800396c:	75fb      	strb	r3, [r7, #23]
    break;
 800396e:	e065      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x19:
    memcpy( pURI->protocol, URI_ID_0x19_STRING, strlen(URI_ID_0x19_STRING));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	220a      	movs	r2, #10
 8003974:	495e      	ldr	r1, [pc, #376]	; (8003af0 <NDEF_Parse_WellKnowType+0x3e0>)
 8003976:	4618      	mov	r0, r3
 8003978:	f00f f8f2 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x19_STRING);
 800397c:	230a      	movs	r3, #10
 800397e:	75fb      	strb	r3, [r7, #23]
    break;
 8003980:	e05c      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1A:
    memcpy( pURI->protocol, URI_ID_0x1A_STRING, strlen(URI_ID_0x1A_STRING));
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	2209      	movs	r2, #9
 8003986:	495b      	ldr	r1, [pc, #364]	; (8003af4 <NDEF_Parse_WellKnowType+0x3e4>)
 8003988:	4618      	mov	r0, r3
 800398a:	f00f f8e9 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x1A_STRING);
 800398e:	2309      	movs	r3, #9
 8003990:	75fb      	strb	r3, [r7, #23]
    break;
 8003992:	e053      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1B:
    memcpy( pURI->protocol, URI_ID_0x1B_STRING, strlen(URI_ID_0x1B_STRING));
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	220a      	movs	r2, #10
 8003998:	4957      	ldr	r1, [pc, #348]	; (8003af8 <NDEF_Parse_WellKnowType+0x3e8>)
 800399a:	4618      	mov	r0, r3
 800399c:	f00f f8e0 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x1B_STRING);
 80039a0:	230a      	movs	r3, #10
 80039a2:	75fb      	strb	r3, [r7, #23]
    break;
 80039a4:	e04a      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1C:
    memcpy( pURI->protocol, URI_ID_0x1C_STRING, strlen(URI_ID_0x1C_STRING));
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	220b      	movs	r2, #11
 80039aa:	4954      	ldr	r1, [pc, #336]	; (8003afc <NDEF_Parse_WellKnowType+0x3ec>)
 80039ac:	4618      	mov	r0, r3
 80039ae:	f00f f8d7 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x1C_STRING);
 80039b2:	230b      	movs	r3, #11
 80039b4:	75fb      	strb	r3, [r7, #23]
    break;
 80039b6:	e041      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1D:
    memcpy( pURI->protocol, URI_ID_0x1D_STRING, strlen(URI_ID_0x1D_STRING));
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	2207      	movs	r2, #7
 80039bc:	4950      	ldr	r1, [pc, #320]	; (8003b00 <NDEF_Parse_WellKnowType+0x3f0>)
 80039be:	4618      	mov	r0, r3
 80039c0:	f00f f8ce 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x1D_STRING);
 80039c4:	2307      	movs	r3, #7
 80039c6:	75fb      	strb	r3, [r7, #23]
    break;
 80039c8:	e038      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1E:
    memcpy( pURI->protocol, URI_ID_0x1E_STRING, strlen(URI_ID_0x1E_STRING));
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	220b      	movs	r2, #11
 80039ce:	494d      	ldr	r1, [pc, #308]	; (8003b04 <NDEF_Parse_WellKnowType+0x3f4>)
 80039d0:	4618      	mov	r0, r3
 80039d2:	f00f f8c5 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x1E_STRING);
 80039d6:	230b      	movs	r3, #11
 80039d8:	75fb      	strb	r3, [r7, #23]
    break;
 80039da:	e02f      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x1F:
    memcpy( pURI->protocol, URI_ID_0x1F_STRING, strlen(URI_ID_0x1F_STRING));
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	220b      	movs	r2, #11
 80039e0:	4949      	ldr	r1, [pc, #292]	; (8003b08 <NDEF_Parse_WellKnowType+0x3f8>)
 80039e2:	4618      	mov	r0, r3
 80039e4:	f00f f8bc 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x1F_STRING);
 80039e8:	230b      	movs	r3, #11
 80039ea:	75fb      	strb	r3, [r7, #23]
    break;
 80039ec:	e026      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x20:
    memcpy( pURI->protocol, URI_ID_0x20_STRING, strlen(URI_ID_0x20_STRING));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	220c      	movs	r2, #12
 80039f2:	4946      	ldr	r1, [pc, #280]	; (8003b0c <NDEF_Parse_WellKnowType+0x3fc>)
 80039f4:	4618      	mov	r0, r3
 80039f6:	f00f f8b3 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x20_STRING);
 80039fa:	230c      	movs	r3, #12
 80039fc:	75fb      	strb	r3, [r7, #23]
    break;
 80039fe:	e01d      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x21:
    memcpy( pURI->protocol, URI_ID_0x21_STRING, strlen(URI_ID_0x21_STRING));
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	220c      	movs	r2, #12
 8003a04:	4942      	ldr	r1, [pc, #264]	; (8003b10 <NDEF_Parse_WellKnowType+0x400>)
 8003a06:	4618      	mov	r0, r3
 8003a08:	f00f f8aa 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x21_STRING);
 8003a0c:	230c      	movs	r3, #12
 8003a0e:	75fb      	strb	r3, [r7, #23]
    break;
 8003a10:	e014      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x22:
    memcpy( pURI->protocol, URI_ID_0x22_STRING, strlen(URI_ID_0x22_STRING));
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2208      	movs	r2, #8
 8003a16:	493f      	ldr	r1, [pc, #252]	; (8003b14 <NDEF_Parse_WellKnowType+0x404>)
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f00f f8a1 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x22_STRING);
 8003a1e:	2308      	movs	r3, #8
 8003a20:	75fb      	strb	r3, [r7, #23]
    break;
 8003a22:	e00b      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  case URI_ID_0x23:
    memcpy( pURI->protocol, URI_ID_0x23_STRING, strlen(URI_ID_0x23_STRING));
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2208      	movs	r2, #8
 8003a28:	493b      	ldr	r1, [pc, #236]	; (8003b18 <NDEF_Parse_WellKnowType+0x408>)
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f00f f898 	bl	8012b60 <memcpy>
    Offset = strlen(URI_ID_0x23_STRING);
 8003a30:	2308      	movs	r3, #8
 8003a32:	75fb      	strb	r3, [r7, #23]
    break;
 8003a34:	e002      	b.n	8003a3c <NDEF_Parse_WellKnowType+0x32c>
    
  default:
    Offset = 0;
 8003a36:	2300      	movs	r3, #0
 8003a38:	75fb      	strb	r3, [r7, #23]
    /* Should not happened */
    break;
 8003a3a:	bf00      	nop
  }
  /* add end of string charactere */
  pURI->protocol[Offset] = '\0';
 8003a3c:	7dfb      	ldrb	r3, [r7, #23]
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	2100      	movs	r1, #0
 8003a42:	54d1      	strb	r1, [r2, r3]
  
  pPayload++; /* go after well know byte */
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	3301      	adds	r3, #1
 8003a48:	613b      	str	r3, [r7, #16]
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	061a      	lsls	r2, r3, #24
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	78db      	ldrb	r3, [r3, #3]
 8003a54:	041b      	lsls	r3, r3, #16
 8003a56:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	791b      	ldrb	r3, [r3, #4]
 8003a5c:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003a5e:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60fb      	str	r3, [r7, #12]
  
  PayloadSize = PayloadSize -1; /* remove well know byte */
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	60fb      	str	r3, [r7, #12]
  
  memcpy( pURI->URI_Message, pPayload, PayloadSize);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	3350      	adds	r3, #80	; 0x50
 8003a72:	68fa      	ldr	r2, [r7, #12]
 8003a74:	6939      	ldr	r1, [r7, #16]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f00f f872 	bl	8012b60 <memcpy>
  /* add end of string charactere */
  pURI->URI_Message[PayloadSize] = '\0';
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4413      	add	r3, r2
 8003a82:	3350      	adds	r3, #80	; 0x50
 8003a84:	2200      	movs	r2, #0
 8003a86:	701a      	strb	r2, [r3, #0]
  
}
 8003a88:	bf00      	nop
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	08015adc 	.word	0x08015adc
 8003a94:	08015aec 	.word	0x08015aec
 8003a98:	08015afc 	.word	0x08015afc
 8003a9c:	08015b08 	.word	0x08015b08
 8003aa0:	08015b14 	.word	0x08015b14
 8003aa4:	08015b1c 	.word	0x08015b1c
 8003aa8:	08015b28 	.word	0x08015b28
 8003aac:	08015b44 	.word	0x08015b44
 8003ab0:	08015b50 	.word	0x08015b50
 8003ab4:	08015b5c 	.word	0x08015b5c
 8003ab8:	08015b68 	.word	0x08015b68
 8003abc:	08015b70 	.word	0x08015b70
 8003ac0:	08015b78 	.word	0x08015b78
 8003ac4:	08015b80 	.word	0x08015b80
 8003ac8:	08015b88 	.word	0x08015b88
 8003acc:	08015b90 	.word	0x08015b90
 8003ad0:	08015b9c 	.word	0x08015b9c
 8003ad4:	08015ba4 	.word	0x08015ba4
 8003ad8:	08015bb0 	.word	0x08015bb0
 8003adc:	08015bb8 	.word	0x08015bb8
 8003ae0:	08015bc0 	.word	0x08015bc0
 8003ae4:	08015bc8 	.word	0x08015bc8
 8003ae8:	08015bd0 	.word	0x08015bd0
 8003aec:	08015bd8 	.word	0x08015bd8
 8003af0:	08015be4 	.word	0x08015be4
 8003af4:	08015bf0 	.word	0x08015bf0
 8003af8:	08015bfc 	.word	0x08015bfc
 8003afc:	08015c08 	.word	0x08015c08
 8003b00:	08015c18 	.word	0x08015c18
 8003b04:	08015c24 	.word	0x08015c24
 8003b08:	08015c34 	.word	0x08015c34
 8003b0c:	08015c44 	.word	0x08015c44
 8003b10:	08015c54 	.word	0x08015c54
 8003b14:	08015c64 	.word	0x08015c64
 8003b18:	08015c70 	.word	0x08015c70

08003b1c <NDEF_ReadURI>:
  * @param  pURI : pointer on the structure to fill 
  * @retval SUCCESS : URI information from NDEF have been retrieved
  * @retval ERROR : Not able to retrieve URI information
  */
uint16_t NDEF_ReadURI(sRecordInfo *pRecordStruct, sURI_Info *pURI)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b088      	sub	sp, #32
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	83fb      	strh	r3, [r7, #30]
  sRecordInfo *pSPRecordStruct;  
  uint32_t PayloadSize, RecordPosition;
  uint8_t* pData;
  
  if( pRecordStruct->NDEF_Type == WELL_KNOWN_ABRIDGED_URI_TYPE )
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d106      	bne.n	8003b42 <NDEF_ReadURI+0x26>
  {    
    NDEF_Parse_WellKnowType(pRecordStruct, pURI );
 8003b34:	6839      	ldr	r1, [r7, #0]
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f7ff fdea 	bl	8003710 <NDEF_Parse_WellKnowType>
    status = NDEF_SUCCESS;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	83fb      	strh	r3, [r7, #30]
 8003b40:	e04b      	b.n	8003bda <NDEF_ReadURI+0xbe>
  }
  else if( pRecordStruct->NDEF_Type == SMARTPOSTER_TYPE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b48:	2b06      	cmp	r3, #6
 8003b4a:	d144      	bne.n	8003bd6 <NDEF_ReadURI+0xba>
  {
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e039      	b.n	8003bc6 <NDEF_ReadURI+0xaa>
    {
      pSPRecordStruct = (sRecordInfo *)(pRecordStruct->SPRecordStructAdd[RecordPosition]);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	3284      	adds	r2, #132	; 0x84
 8003b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b5c:	617b      	str	r3, [r7, #20]
      if(pSPRecordStruct->NDEF_Type == WELL_KNOWN_ABRIDGED_URI_TYPE )
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d105      	bne.n	8003b74 <NDEF_ReadURI+0x58>
      {
        NDEF_Parse_WellKnowType(pSPRecordStruct, pURI );
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	6978      	ldr	r0, [r7, #20]
 8003b6c:	f7ff fdd0 	bl	8003710 <NDEF_Parse_WellKnowType>
        status = NDEF_SUCCESS;
 8003b70:	2300      	movs	r3, #0
 8003b72:	83fb      	strh	r3, [r7, #30]
      }
      if(pSPRecordStruct->NDEF_Type == TEXT_TYPE )
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d120      	bne.n	8003bc0 <NDEF_ReadURI+0xa4>
      {
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	789b      	ldrb	r3, [r3, #2]
 8003b82:	061a      	lsls	r2, r3, #24
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	78db      	ldrb	r3, [r3, #3]
 8003b88:	041b      	lsls	r3, r3, #16
 8003b8a:	431a      	orrs	r2, r3
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	791b      	ldrb	r3, [r3, #4]
 8003b90:	021b      	lsls	r3, r3, #8
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003b92:	4313      	orrs	r3, r2
          ((uint32_t)(pSPRecordStruct->PayloadLength1)<<8)  | pSPRecordStruct->PayloadLength0;
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	7952      	ldrb	r2, [r2, #5]
        PayloadSize = ((uint32_t)(pSPRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pSPRecordStruct->PayloadLength2)<<16) |
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        
        /* The instruction content the UTF-8 language code that is not used here */
        pData = (uint8_t*)pSPRecordStruct->PayloadBufferAdd;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8003ba2:	60fb      	str	r3, [r7, #12]
        pData += *pData+1;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	3301      	adds	r3, #1
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	60fb      	str	r3, [r7, #12]
        
        memcpy(pURI->Information, pData, PayloadSize);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	68f9      	ldr	r1, [r7, #12]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f00e ffd0 	bl	8012b60 <memcpy>
    for (RecordPosition = 0; RecordPosition<pRecordStruct->NbOfRecordInSPPayload; RecordPosition++)
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	61bb      	str	r3, [r7, #24]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 8003bcc:	461a      	mov	r2, r3
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d3be      	bcc.n	8003b52 <NDEF_ReadURI+0x36>
 8003bd4:	e001      	b.n	8003bda <NDEF_ReadURI+0xbe>
      }
    }
  }
  else 
  {
    status = NDEF_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	83fb      	strh	r3, [r7, #30]
  }
  
  return status;
 8003bda:	8bfb      	ldrh	r3, [r7, #30]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <NDEF_WriteURI>:
  * @param  pURI : pointer on structure that contain the URI information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteURI ( sURI_Info *pURI)
{
 8003be4:	b5b0      	push	{r4, r5, r7, lr}
 8003be6:	b088      	sub	sp, #32
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	83fb      	strh	r3, [r7, #30]
  uint32_t uriSize, infoSize, totalSize, Offset = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	60fb      	str	r3, [r7, #12]
  /*              TYPE                */
  /*----------------------------------*/
  /*               ID                 */  /* <---- Not Used  */ 
  /************************************/
  
  NDEF_Buffer[0] = 0;
 8003bf4:	4b73      	ldr	r3, [pc, #460]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[1] = 0;
 8003bfa:	4b72      	ldr	r3, [pc, #456]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	705a      	strb	r2, [r3, #1]
  Offset = FIRST_RECORD_OFFSET;
 8003c00:	2302      	movs	r3, #2
 8003c02:	60fb      	str	r3, [r7, #12]
  infoSize = 0;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  
  /* We need to know the URI type in order to define if an abreviation is available */
  type = getUriType(pURI->protocol);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 f9dc 	bl	8003fc8 <getUriType>
 8003c10:	4603      	mov	r3, r0
 8003c12:	72fb      	strb	r3, [r7, #11]

  /* URI : 1+URI for abreviate protocol*/
  if (type != URI_ID_0x00)
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <NDEF_WriteURI+0x48>
    uriSize = 1+strlen(pURI->URI_Message);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	3350      	adds	r3, #80	; 0x50
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f7fc fad6 	bl	80001d0 <strlen>
 8003c24:	4603      	mov	r3, r0
 8003c26:	3301      	adds	r3, #1
 8003c28:	61bb      	str	r3, [r7, #24]
 8003c2a:	e00d      	b.n	8003c48 <NDEF_WriteURI+0x64>
  else /*: 1+protocol+URI else*/
    uriSize = 1+strlen(pURI->protocol)+strlen(pURI->URI_Message);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7fc face 	bl	80001d0 <strlen>
 8003c34:	4604      	mov	r4, r0
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	3350      	adds	r3, #80	; 0x50
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fc fac8 	bl	80001d0 <strlen>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4423      	add	r3, r4
 8003c44:	3301      	adds	r3, #1
 8003c46:	61bb      	str	r3, [r7, #24]

  /* Check if a Smart poster is needed */
  if (pURI->Information[0] != '\0')
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d066      	beq.n	8003d20 <NDEF_WriteURI+0x13c>
  {
    /* Info : 1+2+info */
    infoSize = 1+ISO_ENGLISH_CODE_STRING_LENGTH+strlen(pURI->Information);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fab9 	bl	80001d0 <strlen>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	3303      	adds	r3, #3
 8003c62:	617b      	str	r3, [r7, #20]
    /* Total */
    totalSize = 4+uriSize+4+infoSize;
 8003c64:	69ba      	ldr	r2, [r7, #24]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	4413      	add	r3, r2
 8003c6a:	3308      	adds	r3, #8
 8003c6c:	613b      	str	r3, [r7, #16]
    if (uriSize > 255) totalSize+=3; /* Normal URI size */
 8003c6e:	69bb      	ldr	r3, [r7, #24]
 8003c70:	2bff      	cmp	r3, #255	; 0xff
 8003c72:	d902      	bls.n	8003c7a <NDEF_WriteURI+0x96>
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	3303      	adds	r3, #3
 8003c78:	613b      	str	r3, [r7, #16]
    if (infoSize > 255) totalSize+=3;  /* Normal Info size */
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	2bff      	cmp	r3, #255	; 0xff
 8003c7e:	d902      	bls.n	8003c86 <NDEF_WriteURI+0xa2>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3303      	adds	r3, #3
 8003c84:	613b      	str	r3, [r7, #16]
    
    /* SmartPoster header */
    if (totalSize > 255) 
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	2bff      	cmp	r3, #255	; 0xff
 8003c8a:	d92b      	bls.n	8003ce4 <NDEF_WriteURI+0x100>
    {
      NDEF_Buffer[Offset++] = 0xC1;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	1c5a      	adds	r2, r3, #1
 8003c90:	60fa      	str	r2, [r7, #12]
 8003c92:	4a4c      	ldr	r2, [pc, #304]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003c94:	21c1      	movs	r1, #193	; 0xc1
 8003c96:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	1c5a      	adds	r2, r3, #1
 8003c9c:	60fa      	str	r2, [r7, #12]
 8003c9e:	4a49      	ldr	r2, [pc, #292]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003ca0:	2102      	movs	r1, #2
 8003ca2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0xFF000000)>>24;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	0e19      	lsrs	r1, r3, #24
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	60fa      	str	r2, [r7, #12]
 8003cae:	b2c9      	uxtb	r1, r1
 8003cb0:	4a44      	ldr	r2, [pc, #272]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003cb2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x00FF0000)>>16;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	0c19      	lsrs	r1, r3, #16
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	60fa      	str	r2, [r7, #12]
 8003cbe:	b2c9      	uxtb	r1, r1
 8003cc0:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003cc2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x0000FF00)>>8;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	0a19      	lsrs	r1, r3, #8
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	60fa      	str	r2, [r7, #12]
 8003cce:	b2c9      	uxtb	r1, r1
 8003cd0:	4a3c      	ldr	r2, [pc, #240]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003cd2:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (totalSize & 0x000000FF);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	1c5a      	adds	r2, r3, #1
 8003cd8:	60fa      	str	r2, [r7, #12]
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	b2d1      	uxtb	r1, r2
 8003cde:	4a39      	ldr	r2, [pc, #228]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003ce0:	54d1      	strb	r1, [r2, r3]
 8003ce2:	e012      	b.n	8003d0a <NDEF_WriteURI+0x126>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0xD1;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	1c5a      	adds	r2, r3, #1
 8003ce8:	60fa      	str	r2, [r7, #12]
 8003cea:	4a36      	ldr	r2, [pc, #216]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003cec:	21d1      	movs	r1, #209	; 0xd1
 8003cee:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = SMART_POSTER_TYPE_STRING_LENGTH;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	60fa      	str	r2, [r7, #12]
 8003cf6:	4a33      	ldr	r2, [pc, #204]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003cf8:	2102      	movs	r1, #2
 8003cfa:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)totalSize;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	60fa      	str	r2, [r7, #12]
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	b2d1      	uxtb	r1, r2
 8003d06:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d08:	54d1      	strb	r1, [r2, r3]
    }
    memcpy(&NDEF_Buffer[Offset], SMART_POSTER_TYPE_STRING, SMART_POSTER_TYPE_STRING_LENGTH);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	4a2d      	ldr	r2, [pc, #180]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d0e:	4413      	add	r3, r2
 8003d10:	2202      	movs	r2, #2
 8003d12:	492d      	ldr	r1, [pc, #180]	; (8003dc8 <NDEF_WriteURI+0x1e4>)
 8003d14:	4618      	mov	r0, r3
 8003d16:	f00e ff23 	bl	8012b60 <memcpy>
    Offset+=SMART_POSTER_TYPE_STRING_LENGTH;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	3302      	adds	r3, #2
 8003d1e:	60fb      	str	r3, [r7, #12]
  }
  
  /* URI header */
  NDEF_Buffer[Offset] = 0x81;
 8003d20:	4a28      	ldr	r2, [pc, #160]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	4413      	add	r3, r2
 8003d26:	2281      	movs	r2, #129	; 0x81
 8003d28:	701a      	strb	r2, [r3, #0]
  if (uriSize < 256) NDEF_Buffer[Offset] |= 0x10;                      /* Set the SR bit */
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	2bff      	cmp	r3, #255	; 0xff
 8003d2e:	d80b      	bhi.n	8003d48 <NDEF_WriteURI+0x164>
 8003d30:	4a24      	ldr	r2, [pc, #144]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	f043 0310 	orr.w	r3, r3, #16
 8003d3c:	b2d9      	uxtb	r1, r3
 8003d3e:	4a21      	ldr	r2, [pc, #132]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	460a      	mov	r2, r1
 8003d46:	701a      	strb	r2, [r3, #0]
  if (pURI->Information[0] == '\0') NDEF_Buffer[Offset] |= 0x40;       /* Set the ME bit */
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d10b      	bne.n	8003d6a <NDEF_WriteURI+0x186>
 8003d52:	4a1c      	ldr	r2, [pc, #112]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4413      	add	r3, r2
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d5e:	b2d9      	uxtb	r1, r3
 8003d60:	4a18      	ldr	r2, [pc, #96]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	460a      	mov	r2, r1
 8003d68:	701a      	strb	r2, [r3, #0]
  Offset++;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	3301      	adds	r3, #1
 8003d6e:	60fb      	str	r3, [r7, #12]
  
  NDEF_Buffer[Offset++] = URI_TYPE_STRING_LENGTH;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	60fa      	str	r2, [r7, #12]
 8003d76:	4a13      	ldr	r2, [pc, #76]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d78:	2101      	movs	r1, #1
 8003d7a:	54d1      	strb	r1, [r2, r3]
  if (uriSize > 255)
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	2bff      	cmp	r3, #255	; 0xff
 8003d80:	d924      	bls.n	8003dcc <NDEF_WriteURI+0x1e8>
  {
    NDEF_Buffer[Offset++] = (uriSize & 0xFF000000)>>24;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	0e19      	lsrs	r1, r3, #24
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	60fa      	str	r2, [r7, #12]
 8003d8c:	b2c9      	uxtb	r1, r1
 8003d8e:	4a0d      	ldr	r2, [pc, #52]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003d90:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (uriSize & 0x00FF0000)>>16;
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	0c19      	lsrs	r1, r3, #16
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1c5a      	adds	r2, r3, #1
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	b2c9      	uxtb	r1, r1
 8003d9e:	4a09      	ldr	r2, [pc, #36]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003da0:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (uriSize & 0x0000FF00)>>8;
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	0a19      	lsrs	r1, r3, #8
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	1c5a      	adds	r2, r3, #1
 8003daa:	60fa      	str	r2, [r7, #12]
 8003dac:	b2c9      	uxtb	r1, r1
 8003dae:	4a05      	ldr	r2, [pc, #20]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003db0:	54d1      	strb	r1, [r2, r3]
    NDEF_Buffer[Offset++] = (uriSize & 0x000000FF);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	60fa      	str	r2, [r7, #12]
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	b2d1      	uxtb	r1, r2
 8003dbc:	4a01      	ldr	r2, [pc, #4]	; (8003dc4 <NDEF_WriteURI+0x1e0>)
 8003dbe:	54d1      	strb	r1, [r2, r3]
 8003dc0:	e00b      	b.n	8003dda <NDEF_WriteURI+0x1f6>
 8003dc2:	bf00      	nop
 8003dc4:	20002178 	.word	0x20002178
 8003dc8:	08015c7c 	.word	0x08015c7c
  }
  else
  {
    NDEF_Buffer[Offset++] = (uint8_t)uriSize;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	60fa      	str	r2, [r7, #12]
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	b2d1      	uxtb	r1, r2
 8003dd6:	4a78      	ldr	r2, [pc, #480]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003dd8:	54d1      	strb	r1, [r2, r3]
  }
  memcpy(&NDEF_Buffer[Offset], URI_TYPE_STRING, URI_TYPE_STRING_LENGTH);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a76      	ldr	r2, [pc, #472]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003dde:	4413      	add	r3, r2
 8003de0:	2201      	movs	r2, #1
 8003de2:	4976      	ldr	r1, [pc, #472]	; (8003fbc <NDEF_WriteURI+0x3d8>)
 8003de4:	4618      	mov	r0, r3
 8003de6:	f00e febb 	bl	8012b60 <memcpy>
  Offset+=URI_TYPE_STRING_LENGTH;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3301      	adds	r3, #1
 8003dee:	60fb      	str	r3, [r7, #12]

  NDEF_Buffer[Offset++]=type;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	60fa      	str	r2, [r7, #12]
 8003df6:	4970      	ldr	r1, [pc, #448]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003df8:	7afa      	ldrb	r2, [r7, #11]
 8003dfa:	54ca      	strb	r2, [r1, r3]
  if (type == URI_ID_0x00) /* No abreviation */
 8003dfc:	7afb      	ldrb	r3, [r7, #11]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d115      	bne.n	8003e2e <NDEF_WriteURI+0x24a>
  {
    memcpy(&NDEF_Buffer[Offset], pURI->protocol, strlen(pURI->protocol));
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a6c      	ldr	r2, [pc, #432]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003e06:	189c      	adds	r4, r3, r2
 8003e08:	687d      	ldr	r5, [r7, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fc f9df 	bl	80001d0 <strlen>
 8003e12:	4603      	mov	r3, r0
 8003e14:	461a      	mov	r2, r3
 8003e16:	4629      	mov	r1, r5
 8003e18:	4620      	mov	r0, r4
 8003e1a:	f00e fea1 	bl	8012b60 <memcpy>
    Offset+=strlen(pURI->protocol);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fc f9d5 	bl	80001d0 <strlen>
 8003e26:	4602      	mov	r2, r0
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	60fb      	str	r3, [r7, #12]
  }

  memcpy(&NDEF_Buffer[Offset], pURI->URI_Message, strlen(pURI->URI_Message));
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a61      	ldr	r2, [pc, #388]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003e32:	189c      	adds	r4, r3, r2
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	3350      	adds	r3, #80	; 0x50
 8003e3e:	4618      	mov	r0, r3
 8003e40:	f7fc f9c6 	bl	80001d0 <strlen>
 8003e44:	4603      	mov	r3, r0
 8003e46:	461a      	mov	r2, r3
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	f00e fe88 	bl	8012b60 <memcpy>
  Offset+=strlen(pURI->URI_Message);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	3350      	adds	r3, #80	; 0x50
 8003e54:	4618      	mov	r0, r3
 8003e56:	f7fc f9bb 	bl	80001d0 <strlen>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	4413      	add	r3, r2
 8003e60:	60fb      	str	r3, [r7, #12]

  /* Information header */
  if (pURI->Information[0] != '\0')
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d079      	beq.n	8003f60 <NDEF_WriteURI+0x37c>
  {
    if (infoSize > 255)
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	2bff      	cmp	r3, #255	; 0xff
 8003e70:	d92b      	bls.n	8003eca <NDEF_WriteURI+0x2e6>
    {
      NDEF_Buffer[Offset++] = 0x41;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	1c5a      	adds	r2, r3, #1
 8003e76:	60fa      	str	r2, [r7, #12]
 8003e78:	4a4f      	ldr	r2, [pc, #316]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003e7a:	2141      	movs	r1, #65	; 0x41
 8003e7c:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1c5a      	adds	r2, r3, #1
 8003e82:	60fa      	str	r2, [r7, #12]
 8003e84:	4a4c      	ldr	r2, [pc, #304]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003e86:	2101      	movs	r1, #1
 8003e88:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0xFF000000)>>24;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	0e19      	lsrs	r1, r3, #24
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	60fa      	str	r2, [r7, #12]
 8003e94:	b2c9      	uxtb	r1, r1
 8003e96:	4a48      	ldr	r2, [pc, #288]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003e98:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x00FF0000)>>16;
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	0c19      	lsrs	r1, r3, #16
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1c5a      	adds	r2, r3, #1
 8003ea2:	60fa      	str	r2, [r7, #12]
 8003ea4:	b2c9      	uxtb	r1, r1
 8003ea6:	4a44      	ldr	r2, [pc, #272]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003ea8:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x0000FF00)>>8;
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	0a19      	lsrs	r1, r3, #8
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	60fa      	str	r2, [r7, #12]
 8003eb4:	b2c9      	uxtb	r1, r1
 8003eb6:	4a40      	ldr	r2, [pc, #256]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003eb8:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (infoSize & 0x000000FF);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1c5a      	adds	r2, r3, #1
 8003ebe:	60fa      	str	r2, [r7, #12]
 8003ec0:	697a      	ldr	r2, [r7, #20]
 8003ec2:	b2d1      	uxtb	r1, r2
 8003ec4:	4a3c      	ldr	r2, [pc, #240]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003ec6:	54d1      	strb	r1, [r2, r3]
 8003ec8:	e012      	b.n	8003ef0 <NDEF_WriteURI+0x30c>
    }
    else
    {
      NDEF_Buffer[Offset++] = 0x51;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1c5a      	adds	r2, r3, #1
 8003ece:	60fa      	str	r2, [r7, #12]
 8003ed0:	4a39      	ldr	r2, [pc, #228]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003ed2:	2151      	movs	r1, #81	; 0x51
 8003ed4:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = TEXT_TYPE_STRING_LENGTH;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	60fa      	str	r2, [r7, #12]
 8003edc:	4a36      	ldr	r2, [pc, #216]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003ede:	2101      	movs	r1, #1
 8003ee0:	54d1      	strb	r1, [r2, r3]
      NDEF_Buffer[Offset++] = (uint8_t)infoSize;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	60fa      	str	r2, [r7, #12]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	b2d1      	uxtb	r1, r2
 8003eec:	4a32      	ldr	r2, [pc, #200]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003eee:	54d1      	strb	r1, [r2, r3]
    }
    
    memcpy(&NDEF_Buffer[Offset], TEXT_TYPE_STRING, TEXT_TYPE_STRING_LENGTH);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	4a31      	ldr	r2, [pc, #196]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	4931      	ldr	r1, [pc, #196]	; (8003fc0 <NDEF_WriteURI+0x3dc>)
 8003efa:	4618      	mov	r0, r3
 8003efc:	f00e fe30 	bl	8012b60 <memcpy>
    Offset+=TEXT_TYPE_STRING_LENGTH;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	3301      	adds	r3, #1
 8003f04:	60fb      	str	r3, [r7, #12]
    NDEF_Buffer[Offset++] = ISO_ENGLISH_CODE_STRING_LENGTH; /* UTF-8 with x byte language code */
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	60fa      	str	r2, [r7, #12]
 8003f0c:	4a2a      	ldr	r2, [pc, #168]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003f0e:	2102      	movs	r1, #2
 8003f10:	54d1      	strb	r1, [r2, r3]
    memcpy(&NDEF_Buffer[Offset], ISO_ENGLISH_CODE_STRING, ISO_ENGLISH_CODE_STRING_LENGTH);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a28      	ldr	r2, [pc, #160]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003f16:	4413      	add	r3, r2
 8003f18:	2202      	movs	r2, #2
 8003f1a:	492a      	ldr	r1, [pc, #168]	; (8003fc4 <NDEF_WriteURI+0x3e0>)
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f00e fe1f 	bl	8012b60 <memcpy>
    Offset+=ISO_ENGLISH_CODE_STRING_LENGTH;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	3302      	adds	r3, #2
 8003f26:	60fb      	str	r3, [r7, #12]
    
    /* Information payload */
    memcpy( &NDEF_Buffer[Offset], pURI->Information,strlen(pURI->Information));
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4a23      	ldr	r2, [pc, #140]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003f2c:	189c      	adds	r4, r3, r2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f503 758c 	add.w	r5, r3, #280	; 0x118
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fc f948 	bl	80001d0 <strlen>
 8003f40:	4603      	mov	r3, r0
 8003f42:	461a      	mov	r2, r3
 8003f44:	4629      	mov	r1, r5
 8003f46:	4620      	mov	r0, r4
 8003f48:	f00e fe0a 	bl	8012b60 <memcpy>
    Offset += strlen(pURI->Information);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc f93c 	bl	80001d0 <strlen>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	4413      	add	r3, r2
 8003f5e:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , Offset , NDEF_Buffer);
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	4a14      	ldr	r2, [pc, #80]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003f66:	4619      	mov	r1, r3
 8003f68:	2000      	movs	r0, #0
 8003f6a:	f7fe f8b1 	bl	80020d0 <NFC_TT4_WriteData>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	83fb      	strh	r3, [r7, #30]
  
  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 8003f72:	8bfb      	ldrh	r3, [r7, #30]
 8003f74:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8003f78:	d112      	bne.n	8003fa0 <NDEF_WriteURI+0x3bc>
  {
    Offset -= 2; /* Must not count the 2 byte that represent the NDEF size */
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	3b02      	subs	r3, #2
 8003f7e:	60fb      	str	r3, [r7, #12]
    NDEF_Buffer[0] = (Offset & 0xFF00)>>8;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4b0c      	ldr	r3, [pc, #48]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003f88:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (Offset & 0x00FF);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003f90:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 8003f92:	4a09      	ldr	r2, [pc, #36]	; (8003fb8 <NDEF_WriteURI+0x3d4>)
 8003f94:	2102      	movs	r1, #2
 8003f96:	2000      	movs	r0, #0
 8003f98:	f7fe f89a 	bl	80020d0 <NFC_TT4_WriteData>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	83fb      	strh	r3, [r7, #30]
  }
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 8003fa0:	8bfb      	ldrh	r3, [r7, #30]
 8003fa2:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8003fa6:	d101      	bne.n	8003fac <NDEF_WriteURI+0x3c8>
    return NDEF_SUCCESS;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e000      	b.n	8003fae <NDEF_WriteURI+0x3ca>
  else
    return NDEF_ERROR;
 8003fac:	2301      	movs	r3, #1
}
 8003fae:	4618      	mov	r0, r3
 8003fb0:	3720      	adds	r7, #32
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bdb0      	pop	{r4, r5, r7, pc}
 8003fb6:	bf00      	nop
 8003fb8:	20002178 	.word	0x20002178
 8003fbc:	08015c80 	.word	0x08015c80
 8003fc0:	08015c84 	.word	0x08015c84
 8003fc4:	08015c88 	.word	0x08015c88

08003fc8 <getUriType>:

char getUriType(char *protocol)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  if(!memcmp( protocol, URI_ID_0x01_STRING, strlen(URI_ID_0x01_STRING))) return URI_ID_0x01;
 8003fd0:	220b      	movs	r2, #11
 8003fd2:	49b1      	ldr	r1, [pc, #708]	; (8004298 <getUriType+0x2d0>)
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f00e fdb5 	bl	8012b44 <memcmp>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <getUriType+0x1c>
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e154      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x02_STRING, strlen(URI_ID_0x02_STRING))) return URI_ID_0x02;
 8003fe4:	220c      	movs	r2, #12
 8003fe6:	49ad      	ldr	r1, [pc, #692]	; (800429c <getUriType+0x2d4>)
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f00e fdab 	bl	8012b44 <memcmp>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d101      	bne.n	8003ff8 <getUriType+0x30>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	e14a      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x03_STRING, strlen(URI_ID_0x03_STRING))) return URI_ID_0x03;
 8003ff8:	2207      	movs	r2, #7
 8003ffa:	49a9      	ldr	r1, [pc, #676]	; (80042a0 <getUriType+0x2d8>)
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f00e fda1 	bl	8012b44 <memcmp>
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <getUriType+0x44>
 8004008:	2303      	movs	r3, #3
 800400a:	e140      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x04_STRING, strlen(URI_ID_0x04_STRING))) return URI_ID_0x04;
 800400c:	2208      	movs	r2, #8
 800400e:	49a5      	ldr	r1, [pc, #660]	; (80042a4 <getUriType+0x2dc>)
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f00e fd97 	bl	8012b44 <memcmp>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <getUriType+0x58>
 800401c:	2304      	movs	r3, #4
 800401e:	e136      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x05_STRING, strlen(URI_ID_0x05_STRING))) return URI_ID_0x05;
 8004020:	2204      	movs	r2, #4
 8004022:	49a1      	ldr	r1, [pc, #644]	; (80042a8 <getUriType+0x2e0>)
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f00e fd8d 	bl	8012b44 <memcmp>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <getUriType+0x6c>
 8004030:	2305      	movs	r3, #5
 8004032:	e12c      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x06_STRING, strlen(URI_ID_0x06_STRING)))  return URI_ID_0x06;
 8004034:	2207      	movs	r2, #7
 8004036:	499d      	ldr	r1, [pc, #628]	; (80042ac <getUriType+0x2e4>)
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f00e fd83 	bl	8012b44 <memcmp>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <getUriType+0x80>
 8004044:	2306      	movs	r3, #6
 8004046:	e122      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x07_STRING, strlen(URI_ID_0x07_STRING)))  return URI_ID_0x07;
 8004048:	221a      	movs	r2, #26
 800404a:	4999      	ldr	r1, [pc, #612]	; (80042b0 <getUriType+0x2e8>)
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f00e fd79 	bl	8012b44 <memcmp>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d101      	bne.n	800405c <getUriType+0x94>
 8004058:	2307      	movs	r3, #7
 800405a:	e118      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x08_STRING, strlen(URI_ID_0x08_STRING)))  return URI_ID_0x08;
 800405c:	220a      	movs	r2, #10
 800405e:	4995      	ldr	r1, [pc, #596]	; (80042b4 <getUriType+0x2ec>)
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f00e fd6f 	bl	8012b44 <memcmp>
 8004066:	4603      	mov	r3, r0
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <getUriType+0xa8>
 800406c:	2308      	movs	r3, #8
 800406e:	e10e      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x09_STRING, strlen(URI_ID_0x09_STRING)))  return URI_ID_0x09;
 8004070:	2207      	movs	r2, #7
 8004072:	4991      	ldr	r1, [pc, #580]	; (80042b8 <getUriType+0x2f0>)
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f00e fd65 	bl	8012b44 <memcmp>
 800407a:	4603      	mov	r3, r0
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <getUriType+0xbc>
 8004080:	2309      	movs	r3, #9
 8004082:	e104      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0A_STRING, strlen(URI_ID_0x0A_STRING)))  return URI_ID_0x0A;  
 8004084:	2207      	movs	r2, #7
 8004086:	498d      	ldr	r1, [pc, #564]	; (80042bc <getUriType+0x2f4>)
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f00e fd5b 	bl	8012b44 <memcmp>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d101      	bne.n	8004098 <getUriType+0xd0>
 8004094:	230a      	movs	r3, #10
 8004096:	e0fa      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0B_STRING, strlen(URI_ID_0x0B_STRING)))  return URI_ID_0x0B;
 8004098:	2206      	movs	r2, #6
 800409a:	4989      	ldr	r1, [pc, #548]	; (80042c0 <getUriType+0x2f8>)
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f00e fd51 	bl	8012b44 <memcmp>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d101      	bne.n	80040ac <getUriType+0xe4>
 80040a8:	230b      	movs	r3, #11
 80040aa:	e0f0      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0C_STRING, strlen(URI_ID_0x0C_STRING)))  return URI_ID_0x0C;
 80040ac:	2206      	movs	r2, #6
 80040ae:	4985      	ldr	r1, [pc, #532]	; (80042c4 <getUriType+0x2fc>)
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f00e fd47 	bl	8012b44 <memcmp>
 80040b6:	4603      	mov	r3, r0
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d101      	bne.n	80040c0 <getUriType+0xf8>
 80040bc:	230c      	movs	r3, #12
 80040be:	e0e6      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0D_STRING, strlen(URI_ID_0x0D_STRING)))  return URI_ID_0x0D;
 80040c0:	2206      	movs	r2, #6
 80040c2:	4981      	ldr	r1, [pc, #516]	; (80042c8 <getUriType+0x300>)
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f00e fd3d 	bl	8012b44 <memcmp>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <getUriType+0x10c>
 80040d0:	230d      	movs	r3, #13
 80040d2:	e0dc      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0E_STRING, strlen(URI_ID_0x0E_STRING)))  return URI_ID_0x0E;
 80040d4:	2206      	movs	r2, #6
 80040d6:	497d      	ldr	r1, [pc, #500]	; (80042cc <getUriType+0x304>)
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f00e fd33 	bl	8012b44 <memcmp>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <getUriType+0x120>
 80040e4:	230e      	movs	r3, #14
 80040e6:	e0d2      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x0F_STRING, strlen(URI_ID_0x0F_STRING)))  return URI_ID_0x0F;
 80040e8:	2205      	movs	r2, #5
 80040ea:	4979      	ldr	r1, [pc, #484]	; (80042d0 <getUriType+0x308>)
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	f00e fd29 	bl	8012b44 <memcmp>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <getUriType+0x134>
 80040f8:	230f      	movs	r3, #15
 80040fa:	e0c8      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x10_STRING, strlen(URI_ID_0x10_STRING)))  return URI_ID_0x10;
 80040fc:	2209      	movs	r2, #9
 80040fe:	4975      	ldr	r1, [pc, #468]	; (80042d4 <getUriType+0x30c>)
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f00e fd1f 	bl	8012b44 <memcmp>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <getUriType+0x148>
 800410c:	2310      	movs	r3, #16
 800410e:	e0be      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x11_STRING, strlen(URI_ID_0x11_STRING)))  return URI_ID_0x11;
 8004110:	2205      	movs	r2, #5
 8004112:	4971      	ldr	r1, [pc, #452]	; (80042d8 <getUriType+0x310>)
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f00e fd15 	bl	8012b44 <memcmp>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <getUriType+0x15c>
 8004120:	2311      	movs	r3, #17
 8004122:	e0b4      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x12_STRING, strlen(URI_ID_0x12_STRING)))  return URI_ID_0x12;
 8004124:	2207      	movs	r2, #7
 8004126:	496d      	ldr	r1, [pc, #436]	; (80042dc <getUriType+0x314>)
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f00e fd0b 	bl	8012b44 <memcmp>
 800412e:	4603      	mov	r3, r0
 8004130:	2b00      	cmp	r3, #0
 8004132:	d101      	bne.n	8004138 <getUriType+0x170>
 8004134:	2312      	movs	r3, #18
 8004136:	e0aa      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x13_STRING, strlen(URI_ID_0x13_STRING)))  return URI_ID_0x13;
 8004138:	2204      	movs	r2, #4
 800413a:	4969      	ldr	r1, [pc, #420]	; (80042e0 <getUriType+0x318>)
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f00e fd01 	bl	8012b44 <memcmp>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d101      	bne.n	800414c <getUriType+0x184>
 8004148:	2313      	movs	r3, #19
 800414a:	e0a0      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x14_STRING, strlen(URI_ID_0x14_STRING)))  return URI_ID_0x14;
 800414c:	2204      	movs	r2, #4
 800414e:	4965      	ldr	r1, [pc, #404]	; (80042e4 <getUriType+0x31c>)
 8004150:	6878      	ldr	r0, [r7, #4]
 8004152:	f00e fcf7 	bl	8012b44 <memcmp>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <getUriType+0x198>
 800415c:	2314      	movs	r3, #20
 800415e:	e096      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x15_STRING, strlen(URI_ID_0x15_STRING)))  return URI_ID_0x15;
 8004160:	2204      	movs	r2, #4
 8004162:	4961      	ldr	r1, [pc, #388]	; (80042e8 <getUriType+0x320>)
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f00e fced 	bl	8012b44 <memcmp>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d101      	bne.n	8004174 <getUriType+0x1ac>
 8004170:	2315      	movs	r3, #21
 8004172:	e08c      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x16_STRING, strlen(URI_ID_0x16_STRING)))  return URI_ID_0x16;
 8004174:	2205      	movs	r2, #5
 8004176:	495d      	ldr	r1, [pc, #372]	; (80042ec <getUriType+0x324>)
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f00e fce3 	bl	8012b44 <memcmp>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <getUriType+0x1c0>
 8004184:	2316      	movs	r3, #22
 8004186:	e082      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x17_STRING, strlen(URI_ID_0x17_STRING)))  return URI_ID_0x17;
 8004188:	2205      	movs	r2, #5
 800418a:	4959      	ldr	r1, [pc, #356]	; (80042f0 <getUriType+0x328>)
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f00e fcd9 	bl	8012b44 <memcmp>
 8004192:	4603      	mov	r3, r0
 8004194:	2b00      	cmp	r3, #0
 8004196:	d101      	bne.n	800419c <getUriType+0x1d4>
 8004198:	2317      	movs	r3, #23
 800419a:	e078      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x18_STRING, strlen(URI_ID_0x18_STRING)))  return URI_ID_0x18;
 800419c:	2208      	movs	r2, #8
 800419e:	4955      	ldr	r1, [pc, #340]	; (80042f4 <getUriType+0x32c>)
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f00e fccf 	bl	8012b44 <memcmp>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d101      	bne.n	80041b0 <getUriType+0x1e8>
 80041ac:	2318      	movs	r3, #24
 80041ae:	e06e      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x19_STRING, strlen(URI_ID_0x19_STRING)))  return URI_ID_0x19;
 80041b0:	220a      	movs	r2, #10
 80041b2:	4951      	ldr	r1, [pc, #324]	; (80042f8 <getUriType+0x330>)
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f00e fcc5 	bl	8012b44 <memcmp>
 80041ba:	4603      	mov	r3, r0
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d101      	bne.n	80041c4 <getUriType+0x1fc>
 80041c0:	2319      	movs	r3, #25
 80041c2:	e064      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1A_STRING, strlen(URI_ID_0x1A_STRING)))  return URI_ID_0x1A;
 80041c4:	2209      	movs	r2, #9
 80041c6:	494d      	ldr	r1, [pc, #308]	; (80042fc <getUriType+0x334>)
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f00e fcbb 	bl	8012b44 <memcmp>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d101      	bne.n	80041d8 <getUriType+0x210>
 80041d4:	231a      	movs	r3, #26
 80041d6:	e05a      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1B_STRING, strlen(URI_ID_0x1B_STRING)))  return URI_ID_0x1B;
 80041d8:	220a      	movs	r2, #10
 80041da:	4949      	ldr	r1, [pc, #292]	; (8004300 <getUriType+0x338>)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f00e fcb1 	bl	8012b44 <memcmp>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <getUriType+0x224>
 80041e8:	231b      	movs	r3, #27
 80041ea:	e050      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1C_STRING, strlen(URI_ID_0x1C_STRING)))  return URI_ID_0x1C;
 80041ec:	220b      	movs	r2, #11
 80041ee:	4945      	ldr	r1, [pc, #276]	; (8004304 <getUriType+0x33c>)
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f00e fca7 	bl	8012b44 <memcmp>
 80041f6:	4603      	mov	r3, r0
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <getUriType+0x238>
 80041fc:	231c      	movs	r3, #28
 80041fe:	e046      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1D_STRING, strlen(URI_ID_0x1D_STRING)))  return URI_ID_0x1D;
 8004200:	2207      	movs	r2, #7
 8004202:	4941      	ldr	r1, [pc, #260]	; (8004308 <getUriType+0x340>)
 8004204:	6878      	ldr	r0, [r7, #4]
 8004206:	f00e fc9d 	bl	8012b44 <memcmp>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <getUriType+0x24c>
 8004210:	231d      	movs	r3, #29
 8004212:	e03c      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1E_STRING, strlen(URI_ID_0x1E_STRING)))  return URI_ID_0x1E;
 8004214:	220b      	movs	r2, #11
 8004216:	493d      	ldr	r1, [pc, #244]	; (800430c <getUriType+0x344>)
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f00e fc93 	bl	8012b44 <memcmp>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d101      	bne.n	8004228 <getUriType+0x260>
 8004224:	231e      	movs	r3, #30
 8004226:	e032      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x1F_STRING, strlen(URI_ID_0x1F_STRING)))  return URI_ID_0x1F;
 8004228:	220b      	movs	r2, #11
 800422a:	4939      	ldr	r1, [pc, #228]	; (8004310 <getUriType+0x348>)
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f00e fc89 	bl	8012b44 <memcmp>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	d101      	bne.n	800423c <getUriType+0x274>
 8004238:	231f      	movs	r3, #31
 800423a:	e028      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x20_STRING, strlen(URI_ID_0x20_STRING)))  return URI_ID_0x20;
 800423c:	220c      	movs	r2, #12
 800423e:	4935      	ldr	r1, [pc, #212]	; (8004314 <getUriType+0x34c>)
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f00e fc7f 	bl	8012b44 <memcmp>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <getUriType+0x288>
 800424c:	2320      	movs	r3, #32
 800424e:	e01e      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x21_STRING, strlen(URI_ID_0x21_STRING)))  return URI_ID_0x21;
 8004250:	220c      	movs	r2, #12
 8004252:	4931      	ldr	r1, [pc, #196]	; (8004318 <getUriType+0x350>)
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f00e fc75 	bl	8012b44 <memcmp>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d101      	bne.n	8004264 <getUriType+0x29c>
 8004260:	2321      	movs	r3, #33	; 0x21
 8004262:	e014      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x22_STRING, strlen(URI_ID_0x22_STRING)))  return URI_ID_0x22;
 8004264:	2208      	movs	r2, #8
 8004266:	492d      	ldr	r1, [pc, #180]	; (800431c <getUriType+0x354>)
 8004268:	6878      	ldr	r0, [r7, #4]
 800426a:	f00e fc6b 	bl	8012b44 <memcmp>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <getUriType+0x2b0>
 8004274:	2322      	movs	r3, #34	; 0x22
 8004276:	e00a      	b.n	800428e <getUriType+0x2c6>
  else if(!memcmp( protocol, URI_ID_0x23_STRING, strlen(URI_ID_0x23_STRING)))  return URI_ID_0x23;  
 8004278:	2208      	movs	r2, #8
 800427a:	4929      	ldr	r1, [pc, #164]	; (8004320 <getUriType+0x358>)
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f00e fc61 	bl	8012b44 <memcmp>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <getUriType+0x2c4>
 8004288:	2323      	movs	r3, #35	; 0x23
 800428a:	e000      	b.n	800428e <getUriType+0x2c6>
  else return URI_ID_0x00; /* No abreviation for this protocol  */
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	08015adc 	.word	0x08015adc
 800429c:	08015aec 	.word	0x08015aec
 80042a0:	08015afc 	.word	0x08015afc
 80042a4:	08015b08 	.word	0x08015b08
 80042a8:	08015b14 	.word	0x08015b14
 80042ac:	08015b1c 	.word	0x08015b1c
 80042b0:	08015b28 	.word	0x08015b28
 80042b4:	08015b44 	.word	0x08015b44
 80042b8:	08015b50 	.word	0x08015b50
 80042bc:	08015b5c 	.word	0x08015b5c
 80042c0:	08015b68 	.word	0x08015b68
 80042c4:	08015b70 	.word	0x08015b70
 80042c8:	08015b78 	.word	0x08015b78
 80042cc:	08015b80 	.word	0x08015b80
 80042d0:	08015b88 	.word	0x08015b88
 80042d4:	08015b90 	.word	0x08015b90
 80042d8:	08015b9c 	.word	0x08015b9c
 80042dc:	08015ba4 	.word	0x08015ba4
 80042e0:	08015bb0 	.word	0x08015bb0
 80042e4:	08015bb8 	.word	0x08015bb8
 80042e8:	08015bc0 	.word	0x08015bc0
 80042ec:	08015bc8 	.word	0x08015bc8
 80042f0:	08015bd0 	.word	0x08015bd0
 80042f4:	08015bd8 	.word	0x08015bd8
 80042f8:	08015be4 	.word	0x08015be4
 80042fc:	08015bf0 	.word	0x08015bf0
 8004300:	08015bfc 	.word	0x08015bfc
 8004304:	08015c08 	.word	0x08015c08
 8004308:	08015c18 	.word	0x08015c18
 800430c:	08015c24 	.word	0x08015c24
 8004310:	08015c34 	.word	0x08015c34
 8004314:	08015c44 	.word	0x08015c44
 8004318:	08015c54 	.word	0x08015c54
 800431c:	08015c64 	.word	0x08015c64
 8004320:	08015c70 	.word	0x08015c70

08004324 <NDEF_FillVcardStruct>:
  * @param  SizeOfKeyWord : number of byte of the keyword we are looking for
  * @param  pString : Pointer on the data string to fill
  * @retval NONE 
  */
static void NDEF_FillVcardStruct( uint8_t* pPayload, uint32_t PayloadSize, char* pKeyWord, uint32_t SizeOfKeyWord, uint8_t* pString)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
 8004330:	603b      	str	r3, [r7, #0]
  uint8_t* pLastByteAdd, *pLook4Word, *pEndString ;
  
  /* First charactere force to NULL in case not matching found */
  *pString = 0;
 8004332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
  
  /* Interresting information are stored before picture if any */
  /* Moreover picture is not used in this demonstration SW */  
  pLastByteAdd = pPayload;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	61fb      	str	r3, [r7, #28]
  while( memcmp( pLastByteAdd, JPEG, JPEG_STRING_SIZE) && pLastByteAdd<(pPayload+PayloadSize) )
 800433c:	e002      	b.n	8004344 <NDEF_FillVcardStruct+0x20>
  {
    pLastByteAdd++;
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	3301      	adds	r3, #1
 8004342:	61fb      	str	r3, [r7, #28]
  while( memcmp( pLastByteAdd, JPEG, JPEG_STRING_SIZE) && pLastByteAdd<(pPayload+PayloadSize) )
 8004344:	2204      	movs	r2, #4
 8004346:	4929      	ldr	r1, [pc, #164]	; (80043ec <NDEF_FillVcardStruct+0xc8>)
 8004348:	69f8      	ldr	r0, [r7, #28]
 800434a:	f00e fbfb 	bl	8012b44 <memcmp>
 800434e:	4603      	mov	r3, r0
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <NDEF_FillVcardStruct+0x3c>
 8004354:	68fa      	ldr	r2, [r7, #12]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4413      	add	r3, r2
 800435a:	69fa      	ldr	r2, [r7, #28]
 800435c:	429a      	cmp	r2, r3
 800435e:	d3ee      	bcc.n	800433e <NDEF_FillVcardStruct+0x1a>
  }
  
  pLook4Word = pPayload;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	61bb      	str	r3, [r7, #24]
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 8004364:	e002      	b.n	800436c <NDEF_FillVcardStruct+0x48>
  {
    pLook4Word++;
 8004366:	69bb      	ldr	r3, [r7, #24]
 8004368:	3301      	adds	r3, #1
 800436a:	61bb      	str	r3, [r7, #24]
  while( memcmp( pLook4Word, pKeyWord, SizeOfKeyWord) && pLook4Word<pLastByteAdd )
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	6879      	ldr	r1, [r7, #4]
 8004370:	69b8      	ldr	r0, [r7, #24]
 8004372:	f00e fbe7 	bl	8012b44 <memcmp>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <NDEF_FillVcardStruct+0x60>
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	429a      	cmp	r2, r3
 8004382:	d3f0      	bcc.n	8004366 <NDEF_FillVcardStruct+0x42>
  }
  
  /* Word found */
  if( pLook4Word != pLastByteAdd)
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	69fb      	ldr	r3, [r7, #28]
 8004388:	429a      	cmp	r2, r3
 800438a:	d02b      	beq.n	80043e4 <NDEF_FillVcardStruct+0xc0>
  {  
    pLook4Word += SizeOfKeyWord;
 800438c:	69ba      	ldr	r2, [r7, #24]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	4413      	add	r3, r2
 8004392:	61bb      	str	r3, [r7, #24]
    pEndString = pLook4Word;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	617b      	str	r3, [r7, #20]
    while( memcmp( pEndString, LIMIT, LIMIT_STRING_SIZE) && pEndString<pLastByteAdd )
 8004398:	e002      	b.n	80043a0 <NDEF_FillVcardStruct+0x7c>
    {
      pEndString++;
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	3301      	adds	r3, #1
 800439e:	617b      	str	r3, [r7, #20]
    while( memcmp( pEndString, LIMIT, LIMIT_STRING_SIZE) && pEndString<pLastByteAdd )
 80043a0:	2202      	movs	r2, #2
 80043a2:	4913      	ldr	r1, [pc, #76]	; (80043f0 <NDEF_FillVcardStruct+0xcc>)
 80043a4:	6978      	ldr	r0, [r7, #20]
 80043a6:	f00e fbcd 	bl	8012b44 <memcmp>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d003      	beq.n	80043b8 <NDEF_FillVcardStruct+0x94>
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d3f0      	bcc.n	800439a <NDEF_FillVcardStruct+0x76>
    }
    if( pEndString != pLastByteAdd)
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	69fb      	ldr	r3, [r7, #28]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d011      	beq.n	80043e4 <NDEF_FillVcardStruct+0xc0>
    {
      memcpy( pString, pLook4Word, pEndString-pLook4Word);
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	1ad3      	subs	r3, r2, r3
 80043c6:	461a      	mov	r2, r3
 80043c8:	69b9      	ldr	r1, [r7, #24]
 80043ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043cc:	f00e fbc8 	bl	8012b60 <memcpy>
      /* add end of string charactere */
      pString += pEndString-pLook4Word;
 80043d0:	697a      	ldr	r2, [r7, #20]
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	1ad3      	subs	r3, r2, r3
 80043d6:	461a      	mov	r2, r3
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	4413      	add	r3, r2
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
      *pString = '\0';    
 80043de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e0:	2200      	movs	r2, #0
 80043e2:	701a      	strb	r2, [r3, #0]
    }
  }  
}
 80043e4:	bf00      	nop
 80043e6:	3720      	adds	r7, #32
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	08015c8c 	.word	0x08015c8c
 80043f0:	08015c94 	.word	0x08015c94

080043f4 <NDEF_ExtractVcard>:
  * @param  pRecordStruct : Pointer on the record structure
  * @param  pSMSStruct : pointer on the structure to fill
  * @retval NONE  
  */
static void NDEF_ExtractVcard ( sRecordInfo *pRecordStruct, sVcardInfo *pVcardStruct )
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af02      	add	r7, sp, #8
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t PayloadSize;
  uint8_t* pPayload;
  
  
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	789b      	ldrb	r3, [r3, #2]
 8004402:	061a      	lsls	r2, r3, #24
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	78db      	ldrb	r3, [r3, #3]
 8004408:	041b      	lsls	r3, r3, #16
 800440a:	431a      	orrs	r2, r3
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	791b      	ldrb	r3, [r3, #4]
 8004410:	021b      	lsls	r3, r3, #8
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8004412:	4313      	orrs	r3, r2
    ((uint32_t)(pRecordStruct->PayloadLength1)<<8)  | pRecordStruct->PayloadLength0;
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	7952      	ldrb	r2, [r2, #5]
  PayloadSize = ((uint32_t)(pRecordStruct->PayloadLength3)<<24) | ((uint32_t)(pRecordStruct->PayloadLength2)<<16) |
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  
  /* Read record header */
  pPayload = (uint8_t*)(pRecordStruct->PayloadBufferAdd);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f8d3 3208 	ldr.w	r3, [r3, #520]	; 0x208
 8004422:	60bb      	str	r3, [r7, #8]
  
  NDEF_FillVcardStruct(pPayload , PayloadSize,VERSION, VERSION_STRING_SIZE, (uint8_t*)(pVcardStruct->Version));
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	9300      	str	r3, [sp, #0]
 8004428:	2308      	movs	r3, #8
 800442a:	4a3c      	ldr	r2, [pc, #240]	; (800451c <NDEF_ExtractVcard+0x128>)
 800442c:	68f9      	ldr	r1, [r7, #12]
 800442e:	68b8      	ldr	r0, [r7, #8]
 8004430:	f7ff ff78 	bl	8004324 <NDEF_FillVcardStruct>
  if( !memcmp(pVcardStruct->Version, VCARD_VERSION_2_1, VCARD_VERSION_2_1_SIZE))
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2203      	movs	r2, #3
 8004438:	4939      	ldr	r1, [pc, #228]	; (8004520 <NDEF_ExtractVcard+0x12c>)
 800443a:	4618      	mov	r0, r3
 800443c:	f00e fb82 	bl	8012b44 <memcmp>
 8004440:	4603      	mov	r3, r0
 8004442:	2b00      	cmp	r3, #0
 8004444:	d160      	bne.n	8004508 <NDEF_ExtractVcard+0x114>
  {
    NDEF_FillVcardStruct(pPayload , PayloadSize,FIRSTNAME, FIRSTNAME_STRING_SIZE, (uint8_t*)(pVcardStruct->FirstName));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	330a      	adds	r3, #10
 800444a:	9300      	str	r3, [sp, #0]
 800444c:	2303      	movs	r3, #3
 800444e:	4a35      	ldr	r2, [pc, #212]	; (8004524 <NDEF_ExtractVcard+0x130>)
 8004450:	68f9      	ldr	r1, [r7, #12]
 8004452:	68b8      	ldr	r0, [r7, #8]
 8004454:	f7ff ff66 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,TITLE, TITLE_STRING_SIZE, (uint8_t*)(pVcardStruct->Title));
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	335a      	adds	r3, #90	; 0x5a
 800445c:	9300      	str	r3, [sp, #0]
 800445e:	2306      	movs	r3, #6
 8004460:	4a31      	ldr	r2, [pc, #196]	; (8004528 <NDEF_ExtractVcard+0x134>)
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	68b8      	ldr	r0, [r7, #8]
 8004466:	f7ff ff5d 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,ORG, ORG_STRING_SIZE, (uint8_t*)(pVcardStruct->Org));
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	33aa      	adds	r3, #170	; 0xaa
 800446e:	9300      	str	r3, [sp, #0]
 8004470:	2304      	movs	r3, #4
 8004472:	4a2e      	ldr	r2, [pc, #184]	; (800452c <NDEF_ExtractVcard+0x138>)
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	68b8      	ldr	r0, [r7, #8]
 8004478:	f7ff ff54 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,HOME_ADDRESS, HOME_ADDRESS_STRING_SIZE, (uint8_t*)(pVcardStruct->HomeAddress));
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	33fa      	adds	r3, #250	; 0xfa
 8004480:	9300      	str	r3, [sp, #0]
 8004482:	2309      	movs	r3, #9
 8004484:	4a2a      	ldr	r2, [pc, #168]	; (8004530 <NDEF_ExtractVcard+0x13c>)
 8004486:	68f9      	ldr	r1, [r7, #12]
 8004488:	68b8      	ldr	r0, [r7, #8]
 800448a:	f7ff ff4b 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,WORK_ADDRESS, WORK_ADDRESS_STRING_SIZE, (uint8_t*)(pVcardStruct->WorkAddress));    
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2309      	movs	r3, #9
 8004498:	4a26      	ldr	r2, [pc, #152]	; (8004534 <NDEF_ExtractVcard+0x140>)
 800449a:	68f9      	ldr	r1, [r7, #12]
 800449c:	68b8      	ldr	r0, [r7, #8]
 800449e:	f7ff ff41 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,HOME_TEL, HOME_TEL_STRING_SIZE, (uint8_t*)(pVcardStruct->HomeTel));
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	2309      	movs	r3, #9
 80044ac:	4a22      	ldr	r2, [pc, #136]	; (8004538 <NDEF_ExtractVcard+0x144>)
 80044ae:	68f9      	ldr	r1, [r7, #12]
 80044b0:	68b8      	ldr	r0, [r7, #8]
 80044b2:	f7ff ff37 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,WORK_TEL, WORK_TEL_STRING_SIZE, (uint8_t*)(pVcardStruct->WorkTel));    
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	2309      	movs	r3, #9
 80044c0:	4a1e      	ldr	r2, [pc, #120]	; (800453c <NDEF_ExtractVcard+0x148>)
 80044c2:	68f9      	ldr	r1, [r7, #12]
 80044c4:	68b8      	ldr	r0, [r7, #8]
 80044c6:	f7ff ff2d 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,CELL_TEL, CELL_TEL_STRING_SIZE, (uint8_t*)(pVcardStruct->CellTel));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 80044d0:	9300      	str	r3, [sp, #0]
 80044d2:	2309      	movs	r3, #9
 80044d4:	4a1a      	ldr	r2, [pc, #104]	; (8004540 <NDEF_ExtractVcard+0x14c>)
 80044d6:	68f9      	ldr	r1, [r7, #12]
 80044d8:	68b8      	ldr	r0, [r7, #8]
 80044da:	f7ff ff23 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,HOME_EMAIL, HOME_EMAIL_STRING_SIZE, (uint8_t*)(pVcardStruct->HomeEmail));  
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	f203 2312 	addw	r3, r3, #530	; 0x212
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	230b      	movs	r3, #11
 80044e8:	4a16      	ldr	r2, [pc, #88]	; (8004544 <NDEF_ExtractVcard+0x150>)
 80044ea:	68f9      	ldr	r1, [r7, #12]
 80044ec:	68b8      	ldr	r0, [r7, #8]
 80044ee:	f7ff ff19 	bl	8004324 <NDEF_FillVcardStruct>
    NDEF_FillVcardStruct(pPayload , PayloadSize,WORK_EMAIL, WORK_EMAIL_STRING_SIZE, (uint8_t*)(pVcardStruct->WorkEmail));    
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	f203 2362 	addw	r3, r3, #610	; 0x262
 80044f8:	9300      	str	r3, [sp, #0]
 80044fa:	230b      	movs	r3, #11
 80044fc:	4a12      	ldr	r2, [pc, #72]	; (8004548 <NDEF_ExtractVcard+0x154>)
 80044fe:	68f9      	ldr	r1, [r7, #12]
 8004500:	68b8      	ldr	r0, [r7, #8]
 8004502:	f7ff ff0f 	bl	8004324 <NDEF_FillVcardStruct>
  else
  {
    /* maybe new version but not supported in this sw */
  }
  
}
 8004506:	e005      	b.n	8004514 <NDEF_ExtractVcard+0x120>
  else if( !memcmp(pVcardStruct->Version, VCARD_VERSION_3_0, VCARD_VERSION_3_0_SIZE))
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	2203      	movs	r2, #3
 800450c:	490f      	ldr	r1, [pc, #60]	; (800454c <NDEF_ExtractVcard+0x158>)
 800450e:	4618      	mov	r0, r3
 8004510:	f00e fb18 	bl	8012b44 <memcmp>
}
 8004514:	bf00      	nop
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08015c98 	.word	0x08015c98
 8004520:	08015ca4 	.word	0x08015ca4
 8004524:	08015ca8 	.word	0x08015ca8
 8004528:	08015cac 	.word	0x08015cac
 800452c:	08015cb4 	.word	0x08015cb4
 8004530:	08015cbc 	.word	0x08015cbc
 8004534:	08015cc8 	.word	0x08015cc8
 8004538:	08015cd4 	.word	0x08015cd4
 800453c:	08015ce0 	.word	0x08015ce0
 8004540:	08015cec 	.word	0x08015cec
 8004544:	08015cf8 	.word	0x08015cf8
 8004548:	08015d04 	.word	0x08015d04
 800454c:	08015d10 	.word	0x08015d10

08004550 <NDEF_ReadVcard>:
  * @param  pVcardStruct : pointer on the structure to fill 
  * @retval SUCCESS : Vcard information from NDEF have been retrieved
  * @retval ERROR : Not able to retrieve Vcard information
  */
uint16_t NDEF_ReadVcard ( sRecordInfo *pRecordStruct, sVcardInfo *pVcardStruct )
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint16_t status = NDEF_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	81fb      	strh	r3, [r7, #14]
  
  if( pRecordStruct->NDEF_Type == VCARD_TYPE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 320c 	ldrb.w	r3, [r3, #524]	; 0x20c
 8004564:	2b01      	cmp	r3, #1
 8004566:	d105      	bne.n	8004574 <NDEF_ReadVcard+0x24>
  {  
    NDEF_ExtractVcard(pRecordStruct, pVcardStruct );
 8004568:	6839      	ldr	r1, [r7, #0]
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff ff42 	bl	80043f4 <NDEF_ExtractVcard>
    status = NDEF_SUCCESS;
 8004570:	2300      	movs	r3, #0
 8004572:	81fb      	strh	r3, [r7, #14]
  }
  
  return status;
 8004574:	89fb      	ldrh	r3, [r7, #14]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <NDEF_WriteVcard>:
  * @param  pVcardStruct : pointer on structure that contain the Vcard information
  * @retval SUCCESS : the function is succesful
  * @retval ERROR : Not able to store NDEF file inside tag.
  */
uint16_t NDEF_WriteVcard ( sVcardInfo *pVcardStruct )
{
 8004580:	b5b0      	push	{r4, r5, r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	82fb      	strh	r3, [r7, #22]
  uint16_t DataSize;
  uint32_t PayloadSize = 0;
 800458c:	2300      	movs	r3, #0
 800458e:	613b      	str	r3, [r7, #16]
  /* For demonstration purpose in order to fill the 8kB of the M24SR */
  /* We have embedded a NDEF vCard in the STM32 to be able to fill M24SR */
  
  
  /* NDEF file must be written in 2 phases, first phase NDEF size is Null */
  NDEF_Buffer[NDEF_SIZE_OFFSET] = 0x00;
 8004590:	4bba      	ldr	r3, [pc, #744]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004592:	2200      	movs	r2, #0
 8004594:	701a      	strb	r2, [r3, #0]
  NDEF_Buffer[NDEF_SIZE_OFFSET+1] = 0x00;
 8004596:	4bb9      	ldr	r3, [pc, #740]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004598:	2200      	movs	r2, #0
 800459a:	705a      	strb	r2, [r3, #1]
  
  /* fill record header */
  NDEF_Buffer[FIRST_RECORD_OFFSET] = 0xC2;   /* Record Flag */
 800459c:	4bb7      	ldr	r3, [pc, #732]	; (800487c <NDEF_WriteVcard+0x2fc>)
 800459e:	22c2      	movs	r2, #194	; 0xc2
 80045a0:	709a      	strb	r2, [r3, #2]
  NDEF_Buffer[FIRST_RECORD_OFFSET+1] = VCARD_TYPE_STRING_LENGTH;
 80045a2:	4bb6      	ldr	r3, [pc, #728]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045a4:	220a      	movs	r2, #10
 80045a6:	70da      	strb	r2, [r3, #3]
  NDEF_Buffer[FIRST_RECORD_OFFSET+2] = 0x00; /* Will be filled at the end when payload size is known */
 80045a8:	4bb4      	ldr	r3, [pc, #720]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	711a      	strb	r2, [r3, #4]
  NDEF_Buffer[FIRST_RECORD_OFFSET+3] = 0x00;
 80045ae:	4bb3      	ldr	r3, [pc, #716]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	715a      	strb	r2, [r3, #5]
  NDEF_Buffer[FIRST_RECORD_OFFSET+4] = 0x00;
 80045b4:	4bb1      	ldr	r3, [pc, #708]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045b6:	2200      	movs	r2, #0
 80045b8:	719a      	strb	r2, [r3, #6]
  NDEF_Buffer[FIRST_RECORD_OFFSET+5] = 0x00;  
 80045ba:	4bb0      	ldr	r3, [pc, #704]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045bc:	2200      	movs	r2, #0
 80045be:	71da      	strb	r2, [r3, #7]
  memcpy(&NDEF_Buffer[FIRST_RECORD_OFFSET+6], VCARD_TYPE_STRING, VCARD_TYPE_STRING_LENGTH);
 80045c0:	220a      	movs	r2, #10
 80045c2:	49af      	ldr	r1, [pc, #700]	; (8004880 <NDEF_WriteVcard+0x300>)
 80045c4:	48af      	ldr	r0, [pc, #700]	; (8004884 <NDEF_WriteVcard+0x304>)
 80045c6:	f00e facb 	bl	8012b60 <memcpy>
  
  /* Payload is positionned in the NDEF after record header */
  PayloadSize = FIRST_RECORD_OFFSET+6+VCARD_TYPE_STRING_LENGTH;
 80045ca:	2312      	movs	r3, #18
 80045cc:	613b      	str	r3, [r7, #16]
  
  /* "BEGIN:VCARD\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], BEGIN, BEGIN_STRING_SIZE);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4aaa      	ldr	r2, [pc, #680]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045d2:	4413      	add	r3, r2
 80045d4:	2206      	movs	r2, #6
 80045d6:	49ac      	ldr	r1, [pc, #688]	; (8004888 <NDEF_WriteVcard+0x308>)
 80045d8:	4618      	mov	r0, r3
 80045da:	f00e fac1 	bl	8012b60 <memcpy>
  PayloadSize += BEGIN_STRING_SIZE;
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	3306      	adds	r3, #6
 80045e2:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], VCARD,VCARD_STRING_SIZE);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	4aa5      	ldr	r2, [pc, #660]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045e8:	4413      	add	r3, r2
 80045ea:	2205      	movs	r2, #5
 80045ec:	49a7      	ldr	r1, [pc, #668]	; (800488c <NDEF_WriteVcard+0x30c>)
 80045ee:	4618      	mov	r0, r3
 80045f0:	f00e fab6 	bl	8012b60 <memcpy>
  PayloadSize += VCARD_STRING_SIZE;
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	3305      	adds	r3, #5
 80045f8:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	4a9f      	ldr	r2, [pc, #636]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80045fe:	4413      	add	r3, r2
 8004600:	2202      	movs	r2, #2
 8004602:	49a3      	ldr	r1, [pc, #652]	; (8004890 <NDEF_WriteVcard+0x310>)
 8004604:	4618      	mov	r0, r3
 8004606:	f00e faab 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	3302      	adds	r3, #2
 800460e:	613b      	str	r3, [r7, #16]
  
  /* "VERSION:2.1\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], VERSION, VERSION_STRING_SIZE);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4a9a      	ldr	r2, [pc, #616]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004614:	4413      	add	r3, r2
 8004616:	2208      	movs	r2, #8
 8004618:	499e      	ldr	r1, [pc, #632]	; (8004894 <NDEF_WriteVcard+0x314>)
 800461a:	4618      	mov	r0, r3
 800461c:	f00e faa0 	bl	8012b60 <memcpy>
  PayloadSize += VERSION_STRING_SIZE;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	3308      	adds	r3, #8
 8004624:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], VCARD_VERSION_2_1,VCARD_VERSION_2_1_SIZE);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4a94      	ldr	r2, [pc, #592]	; (800487c <NDEF_WriteVcard+0x2fc>)
 800462a:	4413      	add	r3, r2
 800462c:	2203      	movs	r2, #3
 800462e:	499a      	ldr	r1, [pc, #616]	; (8004898 <NDEF_WriteVcard+0x318>)
 8004630:	4618      	mov	r0, r3
 8004632:	f00e fa95 	bl	8012b60 <memcpy>
  PayloadSize += VCARD_VERSION_2_1_SIZE;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3303      	adds	r3, #3
 800463a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	4a8f      	ldr	r2, [pc, #572]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004640:	4413      	add	r3, r2
 8004642:	2202      	movs	r2, #2
 8004644:	4992      	ldr	r1, [pc, #584]	; (8004890 <NDEF_WriteVcard+0x310>)
 8004646:	4618      	mov	r0, r3
 8004648:	f00e fa8a 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	3302      	adds	r3, #2
 8004650:	613b      	str	r3, [r7, #16]
  
  /* "FN:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], FIRSTNAME, FIRSTNAME_STRING_SIZE);
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4a89      	ldr	r2, [pc, #548]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004656:	4413      	add	r3, r2
 8004658:	2203      	movs	r2, #3
 800465a:	4990      	ldr	r1, [pc, #576]	; (800489c <NDEF_WriteVcard+0x31c>)
 800465c:	4618      	mov	r0, r3
 800465e:	f00e fa7f 	bl	8012b60 <memcpy>
  PayloadSize += FIRSTNAME_STRING_SIZE;
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	3303      	adds	r3, #3
 8004666:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->FirstName,strlen(pVcardStruct->FirstName));
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	4a84      	ldr	r2, [pc, #528]	; (800487c <NDEF_WriteVcard+0x2fc>)
 800466c:	189c      	adds	r4, r3, r2
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f103 050a 	add.w	r5, r3, #10
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	330a      	adds	r3, #10
 8004678:	4618      	mov	r0, r3
 800467a:	f7fb fda9 	bl	80001d0 <strlen>
 800467e:	4603      	mov	r3, r0
 8004680:	461a      	mov	r2, r3
 8004682:	4629      	mov	r1, r5
 8004684:	4620      	mov	r0, r4
 8004686:	f00e fa6b 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->FirstName);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	330a      	adds	r3, #10
 800468e:	4618      	mov	r0, r3
 8004690:	f7fb fd9e 	bl	80001d0 <strlen>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	4413      	add	r3, r2
 800469a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	4a77      	ldr	r2, [pc, #476]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80046a0:	4413      	add	r3, r2
 80046a2:	2202      	movs	r2, #2
 80046a4:	497a      	ldr	r1, [pc, #488]	; (8004890 <NDEF_WriteVcard+0x310>)
 80046a6:	4618      	mov	r0, r3
 80046a8:	f00e fa5a 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	3302      	adds	r3, #2
 80046b0:	613b      	str	r3, [r7, #16]
  
  /* "TITLE:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], TITLE,TITLE_STRING_SIZE);
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	4a71      	ldr	r2, [pc, #452]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80046b6:	4413      	add	r3, r2
 80046b8:	2206      	movs	r2, #6
 80046ba:	4979      	ldr	r1, [pc, #484]	; (80048a0 <NDEF_WriteVcard+0x320>)
 80046bc:	4618      	mov	r0, r3
 80046be:	f00e fa4f 	bl	8012b60 <memcpy>
  PayloadSize += TITLE_STRING_SIZE;
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	3306      	adds	r3, #6
 80046c6:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->Title,strlen(pVcardStruct->Title));
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4a6c      	ldr	r2, [pc, #432]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80046cc:	189c      	adds	r4, r3, r2
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	f103 055a 	add.w	r5, r3, #90	; 0x5a
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	335a      	adds	r3, #90	; 0x5a
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fb fd79 	bl	80001d0 <strlen>
 80046de:	4603      	mov	r3, r0
 80046e0:	461a      	mov	r2, r3
 80046e2:	4629      	mov	r1, r5
 80046e4:	4620      	mov	r0, r4
 80046e6:	f00e fa3b 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->Title);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	335a      	adds	r3, #90	; 0x5a
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb fd6e 	bl	80001d0 <strlen>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	4413      	add	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4a5f      	ldr	r2, [pc, #380]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004700:	4413      	add	r3, r2
 8004702:	2202      	movs	r2, #2
 8004704:	4962      	ldr	r1, [pc, #392]	; (8004890 <NDEF_WriteVcard+0x310>)
 8004706:	4618      	mov	r0, r3
 8004708:	f00e fa2a 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	3302      	adds	r3, #2
 8004710:	613b      	str	r3, [r7, #16]
  
  /* "ORG:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], ORG,ORG_STRING_SIZE);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4a59      	ldr	r2, [pc, #356]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004716:	4413      	add	r3, r2
 8004718:	2204      	movs	r2, #4
 800471a:	4962      	ldr	r1, [pc, #392]	; (80048a4 <NDEF_WriteVcard+0x324>)
 800471c:	4618      	mov	r0, r3
 800471e:	f00e fa1f 	bl	8012b60 <memcpy>
  PayloadSize += ORG_STRING_SIZE;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	3304      	adds	r3, #4
 8004726:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->Org,strlen(pVcardStruct->Org));
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	4a54      	ldr	r2, [pc, #336]	; (800487c <NDEF_WriteVcard+0x2fc>)
 800472c:	189c      	adds	r4, r3, r2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f103 05aa 	add.w	r5, r3, #170	; 0xaa
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	33aa      	adds	r3, #170	; 0xaa
 8004738:	4618      	mov	r0, r3
 800473a:	f7fb fd49 	bl	80001d0 <strlen>
 800473e:	4603      	mov	r3, r0
 8004740:	461a      	mov	r2, r3
 8004742:	4629      	mov	r1, r5
 8004744:	4620      	mov	r0, r4
 8004746:	f00e fa0b 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->Org);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	33aa      	adds	r3, #170	; 0xaa
 800474e:	4618      	mov	r0, r3
 8004750:	f7fb fd3e 	bl	80001d0 <strlen>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4a47      	ldr	r2, [pc, #284]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004760:	4413      	add	r3, r2
 8004762:	2202      	movs	r2, #2
 8004764:	494a      	ldr	r1, [pc, #296]	; (8004890 <NDEF_WriteVcard+0x310>)
 8004766:	4618      	mov	r0, r3
 8004768:	f00e f9fa 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	3302      	adds	r3, #2
 8004770:	613b      	str	r3, [r7, #16]
  
  /* "ADR;HOME:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], HOME_ADDRESS,HOME_ADDRESS_STRING_SIZE);
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	4a41      	ldr	r2, [pc, #260]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004776:	4413      	add	r3, r2
 8004778:	2209      	movs	r2, #9
 800477a:	494b      	ldr	r1, [pc, #300]	; (80048a8 <NDEF_WriteVcard+0x328>)
 800477c:	4618      	mov	r0, r3
 800477e:	f00e f9ef 	bl	8012b60 <memcpy>
  PayloadSize += HOME_ADDRESS_STRING_SIZE;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	3309      	adds	r3, #9
 8004786:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->HomeAddress,strlen(pVcardStruct->HomeAddress));
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	4a3c      	ldr	r2, [pc, #240]	; (800487c <NDEF_WriteVcard+0x2fc>)
 800478c:	189c      	adds	r4, r3, r2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f103 05fa 	add.w	r5, r3, #250	; 0xfa
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	33fa      	adds	r3, #250	; 0xfa
 8004798:	4618      	mov	r0, r3
 800479a:	f7fb fd19 	bl	80001d0 <strlen>
 800479e:	4603      	mov	r3, r0
 80047a0:	461a      	mov	r2, r3
 80047a2:	4629      	mov	r1, r5
 80047a4:	4620      	mov	r0, r4
 80047a6:	f00e f9db 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->HomeAddress);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	33fa      	adds	r3, #250	; 0xfa
 80047ae:	4618      	mov	r0, r3
 80047b0:	f7fb fd0e 	bl	80001d0 <strlen>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	4413      	add	r3, r2
 80047ba:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	4a2f      	ldr	r2, [pc, #188]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80047c0:	4413      	add	r3, r2
 80047c2:	2202      	movs	r2, #2
 80047c4:	4932      	ldr	r1, [pc, #200]	; (8004890 <NDEF_WriteVcard+0x310>)
 80047c6:	4618      	mov	r0, r3
 80047c8:	f00e f9ca 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	3302      	adds	r3, #2
 80047d0:	613b      	str	r3, [r7, #16]
  
  /* "ADR;WORK:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], WORK_ADDRESS,WORK_ADDRESS_STRING_SIZE);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	4a29      	ldr	r2, [pc, #164]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80047d6:	4413      	add	r3, r2
 80047d8:	2209      	movs	r2, #9
 80047da:	4934      	ldr	r1, [pc, #208]	; (80048ac <NDEF_WriteVcard+0x32c>)
 80047dc:	4618      	mov	r0, r3
 80047de:	f00e f9bf 	bl	8012b60 <memcpy>
  PayloadSize += WORK_ADDRESS_STRING_SIZE;
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	3309      	adds	r3, #9
 80047e6:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->WorkAddress,strlen(pVcardStruct->WorkAddress));
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4a24      	ldr	r2, [pc, #144]	; (800487c <NDEF_WriteVcard+0x2fc>)
 80047ec:	189c      	adds	r4, r3, r2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f503 75a5 	add.w	r5, r3, #330	; 0x14a
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fb fce8 	bl	80001d0 <strlen>
 8004800:	4603      	mov	r3, r0
 8004802:	461a      	mov	r2, r3
 8004804:	4629      	mov	r1, r5
 8004806:	4620      	mov	r0, r4
 8004808:	f00e f9aa 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->WorkAddress);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f503 73a5 	add.w	r3, r3, #330	; 0x14a
 8004812:	4618      	mov	r0, r3
 8004814:	f7fb fcdc 	bl	80001d0 <strlen>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	4413      	add	r3, r2
 800481e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4a16      	ldr	r2, [pc, #88]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004824:	4413      	add	r3, r2
 8004826:	2202      	movs	r2, #2
 8004828:	4919      	ldr	r1, [pc, #100]	; (8004890 <NDEF_WriteVcard+0x310>)
 800482a:	4618      	mov	r0, r3
 800482c:	f00e f998 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	3302      	adds	r3, #2
 8004834:	613b      	str	r3, [r7, #16]
  
  /* "TEL;HOME:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], HOME_TEL, HOME_TEL_STRING_SIZE);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4a10      	ldr	r2, [pc, #64]	; (800487c <NDEF_WriteVcard+0x2fc>)
 800483a:	4413      	add	r3, r2
 800483c:	2209      	movs	r2, #9
 800483e:	491c      	ldr	r1, [pc, #112]	; (80048b0 <NDEF_WriteVcard+0x330>)
 8004840:	4618      	mov	r0, r3
 8004842:	f00e f98d 	bl	8012b60 <memcpy>
  PayloadSize += HOME_TEL_STRING_SIZE;
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	3309      	adds	r3, #9
 800484a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->HomeTel,strlen(pVcardStruct->HomeTel));
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4a0b      	ldr	r2, [pc, #44]	; (800487c <NDEF_WriteVcard+0x2fc>)
 8004850:	189c      	adds	r4, r3, r2
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f503 75cd 	add.w	r5, r3, #410	; 0x19a
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 800485e:	4618      	mov	r0, r3
 8004860:	f7fb fcb6 	bl	80001d0 <strlen>
 8004864:	4603      	mov	r3, r0
 8004866:	461a      	mov	r2, r3
 8004868:	4629      	mov	r1, r5
 800486a:	4620      	mov	r0, r4
 800486c:	f00e f978 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->HomeTel);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f503 73cd 	add.w	r3, r3, #410	; 0x19a
 8004876:	4618      	mov	r0, r3
 8004878:	e01c      	b.n	80048b4 <NDEF_WriteVcard+0x334>
 800487a:	bf00      	nop
 800487c:	20002178 	.word	0x20002178
 8004880:	08015d14 	.word	0x08015d14
 8004884:	20002180 	.word	0x20002180
 8004888:	08015d20 	.word	0x08015d20
 800488c:	08015d28 	.word	0x08015d28
 8004890:	08015c94 	.word	0x08015c94
 8004894:	08015c98 	.word	0x08015c98
 8004898:	08015ca4 	.word	0x08015ca4
 800489c:	08015ca8 	.word	0x08015ca8
 80048a0:	08015cac 	.word	0x08015cac
 80048a4:	08015cb4 	.word	0x08015cb4
 80048a8:	08015cbc 	.word	0x08015cbc
 80048ac:	08015cc8 	.word	0x08015cc8
 80048b0:	08015cd4 	.word	0x08015cd4
 80048b4:	f7fb fc8c 	bl	80001d0 <strlen>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	4413      	add	r3, r2
 80048be:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4a9b      	ldr	r2, [pc, #620]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 80048c4:	4413      	add	r3, r2
 80048c6:	2202      	movs	r2, #2
 80048c8:	499a      	ldr	r1, [pc, #616]	; (8004b34 <NDEF_WriteVcard+0x5b4>)
 80048ca:	4618      	mov	r0, r3
 80048cc:	f00e f948 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	3302      	adds	r3, #2
 80048d4:	613b      	str	r3, [r7, #16]
  
  /* "TEL;WORK:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], WORK_TEL, WORK_TEL_STRING_SIZE);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	4a95      	ldr	r2, [pc, #596]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 80048da:	4413      	add	r3, r2
 80048dc:	2209      	movs	r2, #9
 80048de:	4996      	ldr	r1, [pc, #600]	; (8004b38 <NDEF_WriteVcard+0x5b8>)
 80048e0:	4618      	mov	r0, r3
 80048e2:	f00e f93d 	bl	8012b60 <memcpy>
  PayloadSize += WORK_TEL_STRING_SIZE;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	3309      	adds	r3, #9
 80048ea:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->WorkTel,strlen(pVcardStruct->WorkTel));
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	4a90      	ldr	r2, [pc, #576]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 80048f0:	189c      	adds	r4, r3, r2
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f503 75e1 	add.w	r5, r3, #450	; 0x1c2
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fb fc66 	bl	80001d0 <strlen>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	4629      	mov	r1, r5
 800490a:	4620      	mov	r0, r4
 800490c:	f00e f928 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->WorkTel);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f503 73e1 	add.w	r3, r3, #450	; 0x1c2
 8004916:	4618      	mov	r0, r3
 8004918:	f7fb fc5a 	bl	80001d0 <strlen>
 800491c:	4602      	mov	r2, r0
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4a82      	ldr	r2, [pc, #520]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004928:	4413      	add	r3, r2
 800492a:	2202      	movs	r2, #2
 800492c:	4981      	ldr	r1, [pc, #516]	; (8004b34 <NDEF_WriteVcard+0x5b4>)
 800492e:	4618      	mov	r0, r3
 8004930:	f00e f916 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	3302      	adds	r3, #2
 8004938:	613b      	str	r3, [r7, #16]
  
  /* "TEL;CELL:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], CELL_TEL, CELL_TEL_STRING_SIZE);
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4a7c      	ldr	r2, [pc, #496]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 800493e:	4413      	add	r3, r2
 8004940:	2209      	movs	r2, #9
 8004942:	497e      	ldr	r1, [pc, #504]	; (8004b3c <NDEF_WriteVcard+0x5bc>)
 8004944:	4618      	mov	r0, r3
 8004946:	f00e f90b 	bl	8012b60 <memcpy>
  PayloadSize += CELL_TEL_STRING_SIZE;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	3309      	adds	r3, #9
 800494e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->CellTel,strlen(pVcardStruct->CellTel));
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	4a77      	ldr	r2, [pc, #476]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004954:	189c      	adds	r4, r3, r2
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	f503 75f5 	add.w	r5, r3, #490	; 0x1ea
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 8004962:	4618      	mov	r0, r3
 8004964:	f7fb fc34 	bl	80001d0 <strlen>
 8004968:	4603      	mov	r3, r0
 800496a:	461a      	mov	r2, r3
 800496c:	4629      	mov	r1, r5
 800496e:	4620      	mov	r0, r4
 8004970:	f00e f8f6 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->CellTel);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f503 73f5 	add.w	r3, r3, #490	; 0x1ea
 800497a:	4618      	mov	r0, r3
 800497c:	f7fb fc28 	bl	80001d0 <strlen>
 8004980:	4602      	mov	r2, r0
 8004982:	693b      	ldr	r3, [r7, #16]
 8004984:	4413      	add	r3, r2
 8004986:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4a69      	ldr	r2, [pc, #420]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 800498c:	4413      	add	r3, r2
 800498e:	2202      	movs	r2, #2
 8004990:	4968      	ldr	r1, [pc, #416]	; (8004b34 <NDEF_WriteVcard+0x5b4>)
 8004992:	4618      	mov	r0, r3
 8004994:	f00e f8e4 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	3302      	adds	r3, #2
 800499c:	613b      	str	r3, [r7, #16]
  
  /* "EMAIL;HOME:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], HOME_EMAIL, HOME_EMAIL_STRING_SIZE);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	4a63      	ldr	r2, [pc, #396]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 80049a2:	4413      	add	r3, r2
 80049a4:	220b      	movs	r2, #11
 80049a6:	4966      	ldr	r1, [pc, #408]	; (8004b40 <NDEF_WriteVcard+0x5c0>)
 80049a8:	4618      	mov	r0, r3
 80049aa:	f00e f8d9 	bl	8012b60 <memcpy>
  PayloadSize += HOME_EMAIL_STRING_SIZE;
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	330b      	adds	r3, #11
 80049b2:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->HomeEmail,strlen(pVcardStruct->HomeEmail));
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	4a5e      	ldr	r2, [pc, #376]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 80049b8:	189c      	adds	r4, r3, r2
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f203 2512 	addw	r5, r3, #530	; 0x212
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f203 2312 	addw	r3, r3, #530	; 0x212
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fb fc02 	bl	80001d0 <strlen>
 80049cc:	4603      	mov	r3, r0
 80049ce:	461a      	mov	r2, r3
 80049d0:	4629      	mov	r1, r5
 80049d2:	4620      	mov	r0, r4
 80049d4:	f00e f8c4 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->HomeEmail);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f203 2312 	addw	r3, r3, #530	; 0x212
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fb fbf6 	bl	80001d0 <strlen>
 80049e4:	4602      	mov	r2, r0
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	4a50      	ldr	r2, [pc, #320]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 80049f0:	4413      	add	r3, r2
 80049f2:	2202      	movs	r2, #2
 80049f4:	494f      	ldr	r1, [pc, #316]	; (8004b34 <NDEF_WriteVcard+0x5b4>)
 80049f6:	4618      	mov	r0, r3
 80049f8:	f00e f8b2 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	3302      	adds	r3, #2
 8004a00:	613b      	str	r3, [r7, #16]
  
  /* "EMAIL;WORK:\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], WORK_EMAIL, WORK_EMAIL_STRING_SIZE);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4a4a      	ldr	r2, [pc, #296]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004a06:	4413      	add	r3, r2
 8004a08:	220b      	movs	r2, #11
 8004a0a:	494e      	ldr	r1, [pc, #312]	; (8004b44 <NDEF_WriteVcard+0x5c4>)
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f00e f8a7 	bl	8012b60 <memcpy>
  PayloadSize += WORK_EMAIL_STRING_SIZE;
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	330b      	adds	r3, #11
 8004a16:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], pVcardStruct->WorkEmail,strlen(pVcardStruct->WorkEmail));
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	4a45      	ldr	r2, [pc, #276]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004a1c:	189c      	adds	r4, r3, r2
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f203 2562 	addw	r5, r3, #610	; 0x262
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f203 2362 	addw	r3, r3, #610	; 0x262
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	f7fb fbd0 	bl	80001d0 <strlen>
 8004a30:	4603      	mov	r3, r0
 8004a32:	461a      	mov	r2, r3
 8004a34:	4629      	mov	r1, r5
 8004a36:	4620      	mov	r0, r4
 8004a38:	f00e f892 	bl	8012b60 <memcpy>
  PayloadSize += strlen(pVcardStruct->WorkEmail);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f203 2362 	addw	r3, r3, #610	; 0x262
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fb fbc4 	bl	80001d0 <strlen>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	4a37      	ldr	r2, [pc, #220]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004a54:	4413      	add	r3, r2
 8004a56:	2202      	movs	r2, #2
 8004a58:	4936      	ldr	r1, [pc, #216]	; (8004b34 <NDEF_WriteVcard+0x5b4>)
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f00e f880 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	3302      	adds	r3, #2
 8004a64:	613b      	str	r3, [r7, #16]
  
  /* "END:VCARD\r\n" */
  memcpy(&NDEF_Buffer[PayloadSize], END,END_STRING_SIZE);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	4a31      	ldr	r2, [pc, #196]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004a6a:	4413      	add	r3, r2
 8004a6c:	2204      	movs	r2, #4
 8004a6e:	4936      	ldr	r1, [pc, #216]	; (8004b48 <NDEF_WriteVcard+0x5c8>)
 8004a70:	4618      	mov	r0, r3
 8004a72:	f00e f875 	bl	8012b60 <memcpy>
  PayloadSize += END_STRING_SIZE;
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	3304      	adds	r3, #4
 8004a7a:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], VCARD,VCARD_STRING_SIZE);
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	4a2c      	ldr	r2, [pc, #176]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004a80:	4413      	add	r3, r2
 8004a82:	2205      	movs	r2, #5
 8004a84:	4931      	ldr	r1, [pc, #196]	; (8004b4c <NDEF_WriteVcard+0x5cc>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f00e f86a 	bl	8012b60 <memcpy>
  PayloadSize += VCARD_STRING_SIZE;
 8004a8c:	693b      	ldr	r3, [r7, #16]
 8004a8e:	3305      	adds	r3, #5
 8004a90:	613b      	str	r3, [r7, #16]
  memcpy( &NDEF_Buffer[PayloadSize], LIMIT, LIMIT_STRING_SIZE);
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	4a26      	ldr	r2, [pc, #152]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004a96:	4413      	add	r3, r2
 8004a98:	2202      	movs	r2, #2
 8004a9a:	4926      	ldr	r1, [pc, #152]	; (8004b34 <NDEF_WriteVcard+0x5b4>)
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f00e f85f 	bl	8012b60 <memcpy>
  PayloadSize += LIMIT_STRING_SIZE;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	3302      	adds	r3, #2
 8004aa6:	613b      	str	r3, [r7, #16]
  
  DataSize = (uint16_t)(PayloadSize); /* Must not count the 2 byte that represent the NDEF size */
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	81fb      	strh	r3, [r7, #14]
  PayloadSize -= FIRST_RECORD_OFFSET+6+VCARD_TYPE_STRING_LENGTH;  
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	3b12      	subs	r3, #18
 8004ab0:	613b      	str	r3, [r7, #16]
  
  NDEF_Buffer[FIRST_RECORD_OFFSET+2] = (PayloadSize & 0xFF000000)>>24;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	0e1b      	lsrs	r3, r3, #24
 8004ab6:	b2da      	uxtb	r2, r3
 8004ab8:	4b1d      	ldr	r3, [pc, #116]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004aba:	711a      	strb	r2, [r3, #4]
  NDEF_Buffer[FIRST_RECORD_OFFSET+3] = (PayloadSize & 0x00FF0000)>>16;
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	0c1b      	lsrs	r3, r3, #16
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	4b1b      	ldr	r3, [pc, #108]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004ac4:	715a      	strb	r2, [r3, #5]
  NDEF_Buffer[FIRST_RECORD_OFFSET+4] = (PayloadSize & 0x0000FF00)>>8;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	0a1b      	lsrs	r3, r3, #8
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004ace:	719a      	strb	r2, [r3, #6]
  NDEF_Buffer[FIRST_RECORD_OFFSET+5] = (PayloadSize & 0x000000FF);
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	b2da      	uxtb	r2, r3
 8004ad4:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004ad6:	71da      	strb	r2, [r3, #7]
  

  /* Write NDEF */
  status = NFC_TT4_WriteData ( 0x00 , DataSize , NDEF_Buffer);
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
 8004ada:	4a15      	ldr	r2, [pc, #84]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004adc:	4619      	mov	r1, r3
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fd faf6 	bl	80020d0 <NFC_TT4_WriteData>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	82fb      	strh	r3, [r7, #22]
  
  /* Write NDEF size to complete*/
  if( status == NFC_TT4_ACTION_COMPLETED)
 8004ae8:	8afb      	ldrh	r3, [r7, #22]
 8004aea:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8004aee:	d113      	bne.n	8004b18 <NDEF_WriteVcard+0x598>
  {
    DataSize -= 2; /* Must not count the 2 byte that represent the NDEF size */
 8004af0:	89fb      	ldrh	r3, [r7, #14]
 8004af2:	3b02      	subs	r3, #2
 8004af4:	81fb      	strh	r3, [r7, #14]
    NDEF_Buffer[0] = (DataSize & 0xFF00)>>8;
 8004af6:	89fb      	ldrh	r3, [r7, #14]
 8004af8:	0a1b      	lsrs	r3, r3, #8
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	b2da      	uxtb	r2, r3
 8004afe:	4b0c      	ldr	r3, [pc, #48]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004b00:	701a      	strb	r2, [r3, #0]
    NDEF_Buffer[1] = (DataSize & 0x00FF);
 8004b02:	89fb      	ldrh	r3, [r7, #14]
 8004b04:	b2da      	uxtb	r2, r3
 8004b06:	4b0a      	ldr	r3, [pc, #40]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004b08:	705a      	strb	r2, [r3, #1]
    
    status = NFC_TT4_WriteData ( 0x00 , 2 , NDEF_Buffer);
 8004b0a:	4a09      	ldr	r2, [pc, #36]	; (8004b30 <NDEF_WriteVcard+0x5b0>)
 8004b0c:	2102      	movs	r1, #2
 8004b0e:	2000      	movs	r0, #0
 8004b10:	f7fd fade 	bl	80020d0 <NFC_TT4_WriteData>
 8004b14:	4603      	mov	r3, r0
 8004b16:	82fb      	strh	r3, [r7, #22]
  }
  
  
  if( status == NFC_TT4_ACTION_COMPLETED)
 8004b18:	8afb      	ldrh	r3, [r7, #22]
 8004b1a:	f5b3 4f10 	cmp.w	r3, #36864	; 0x9000
 8004b1e:	d101      	bne.n	8004b24 <NDEF_WriteVcard+0x5a4>
    return NDEF_SUCCESS;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e000      	b.n	8004b26 <NDEF_WriteVcard+0x5a6>
  else
    return NDEF_ERROR;
 8004b24:	2301      	movs	r3, #1
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3718      	adds	r7, #24
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	bdb0      	pop	{r4, r5, r7, pc}
 8004b2e:	bf00      	nop
 8004b30:	20002178 	.word	0x20002178
 8004b34:	08015c94 	.word	0x08015c94
 8004b38:	08015ce0 	.word	0x08015ce0
 8004b3c:	08015cec 	.word	0x08015cec
 8004b40:	08015cf8 	.word	0x08015cf8
 8004b44:	08015d04 	.word	0x08015d04
 8004b48:	08015d30 	.word	0x08015d30
 8004b4c:	08015d28 	.word	0x08015d28

08004b50 <TT4_Init>:
  * @brief  This fonction initialize Tag Type 4
  * @param  None 
  * @retval SUCCESS : Initialization done
  */
uint16_t TT4_Init (void)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
  uint16_t status = NDEF_SUCCESS;
 8004b56:	2300      	movs	r3, #0
 8004b58:	82fb      	strh	r3, [r7, #22]
  uint8_t CCBuffer[15];
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004b5a:	4b29      	ldr	r3, [pc, #164]	; (8004c00 <TT4_Init+0xb0>)
 8004b5c:	613b      	str	r3, [r7, #16]

  status = NFC_TT4_Initialization( CCBuffer, sizeof(CCBuffer));
 8004b5e:	463b      	mov	r3, r7
 8004b60:	210f      	movs	r1, #15
 8004b62:	4618      	mov	r0, r3
 8004b64:	f7fd f93a 	bl	8001ddc <NFC_TT4_Initialization>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	82fb      	strh	r3, [r7, #22]
  
  if( status == NDEF_SUCCESS)
 8004b6c:	8afb      	ldrh	r3, [r7, #22]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d140      	bne.n	8004bf4 <TT4_Init+0xa4>
  {
    pCCFile->NumberCCByte = (uint16_t) ((CCBuffer[0x00]<<8) | CCBuffer[0x01]);
 8004b72:	783b      	ldrb	r3, [r7, #0]
 8004b74:	021b      	lsls	r3, r3, #8
 8004b76:	b21a      	sxth	r2, r3
 8004b78:	787b      	ldrb	r3, [r7, #1]
 8004b7a:	b21b      	sxth	r3, r3
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	b21b      	sxth	r3, r3
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	801a      	strh	r2, [r3, #0]
    pCCFile->Version = CCBuffer[0x02];
 8004b86:	78ba      	ldrb	r2, [r7, #2]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	709a      	strb	r2, [r3, #2]
    pCCFile->MaxReadByte = (uint16_t) ((CCBuffer[0x03]<<8) | CCBuffer[0x04]);
 8004b8c:	78fb      	ldrb	r3, [r7, #3]
 8004b8e:	021b      	lsls	r3, r3, #8
 8004b90:	b21a      	sxth	r2, r3
 8004b92:	793b      	ldrb	r3, [r7, #4]
 8004b94:	b21b      	sxth	r3, r3
 8004b96:	4313      	orrs	r3, r2
 8004b98:	b21b      	sxth	r3, r3
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	809a      	strh	r2, [r3, #4]
    pCCFile->MaxWriteByte = (uint16_t) ((CCBuffer[0x05]<<8) | CCBuffer[0x06]);
 8004ba0:	797b      	ldrb	r3, [r7, #5]
 8004ba2:	021b      	lsls	r3, r3, #8
 8004ba4:	b21a      	sxth	r2, r3
 8004ba6:	79bb      	ldrb	r3, [r7, #6]
 8004ba8:	b21b      	sxth	r3, r3
 8004baa:	4313      	orrs	r3, r2
 8004bac:	b21b      	sxth	r3, r3
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	80da      	strh	r2, [r3, #6]
    pCCFile->TField = CCBuffer[0x07];
 8004bb4:	79fa      	ldrb	r2, [r7, #7]
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	721a      	strb	r2, [r3, #8]
    pCCFile->LField = CCBuffer[0x08];
 8004bba:	7a3a      	ldrb	r2, [r7, #8]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	725a      	strb	r2, [r3, #9]
    pCCFile->FileID = (uint16_t) ((CCBuffer[0x09]<<8) | CCBuffer[0x0A]);
 8004bc0:	7a7b      	ldrb	r3, [r7, #9]
 8004bc2:	021b      	lsls	r3, r3, #8
 8004bc4:	b21a      	sxth	r2, r3
 8004bc6:	7abb      	ldrb	r3, [r7, #10]
 8004bc8:	b21b      	sxth	r3, r3
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b21b      	sxth	r3, r3
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	815a      	strh	r2, [r3, #10]
    pCCFile->NDEFFileMaxSize = (uint16_t) ((CCBuffer[0x0B]<<8) | CCBuffer[0x0C]);
 8004bd4:	7afb      	ldrb	r3, [r7, #11]
 8004bd6:	021b      	lsls	r3, r3, #8
 8004bd8:	b21a      	sxth	r2, r3
 8004bda:	7b3b      	ldrb	r3, [r7, #12]
 8004bdc:	b21b      	sxth	r3, r3
 8004bde:	4313      	orrs	r3, r2
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	b29a      	uxth	r2, r3
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	819a      	strh	r2, [r3, #12]
    pCCFile->ReadAccess = CCBuffer[0x0D];
 8004be8:	7b7a      	ldrb	r2, [r7, #13]
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	739a      	strb	r2, [r3, #14]
    pCCFile->WriteAccess = CCBuffer[0x0E];  
 8004bee:	7bba      	ldrb	r2, [r7, #14]
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	73da      	strb	r2, [r3, #15]
  }
  
  return status;
 8004bf4:	8afb      	ldrh	r3, [r7, #22]
}  
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3718      	adds	r7, #24
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	20001f48 	.word	0x20001f48

08004c04 <TT4_WriteNDEF>:
  * @param  pNDEF : pointer on buffer that contain the NDEF data
  * @retval SUCCESS : NDEF file data have been stored
  * @retval ERROR : Not able to store NDEF file
  */
uint16_t TT4_WriteNDEF(uint8_t *pNDEF)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004c10:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <TT4_WriteNDEF+0x40>)
 8004c12:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	895b      	ldrh	r3, [r3, #10]
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7fd f946 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d109      	bne.n	8004c3a <TT4_WriteNDEF+0x36>
  {
    status = NDEF_WriteNDEF( pNDEF);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd fdff 	bl	800282a <NDEF_WriteNDEF>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	81fb      	strh	r3, [r7, #14]
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	895b      	ldrh	r3, [r3, #10]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f7fd f99b 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004c3a:	89fb      	ldrh	r3, [r7, #14]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	20001f48 	.word	0x20001f48

08004c48 <TT4_ReadURI>:
  * @param  pURI : pointer on URI structure to fill with read data
  * @retval SUCCESS : URI structure has been updated
  * @retval ERROR : Not able to fill URI structure
  */
uint16_t TT4_ReadURI(sURI_Info *pURI)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004c54:	4b11      	ldr	r3, [pc, #68]	; (8004c9c <TT4_ReadURI+0x54>)
 8004c56:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004c58:	4b11      	ldr	r3, [pc, #68]	; (8004ca0 <TT4_ReadURI+0x58>)
 8004c5a:	60fb      	str	r3, [r7, #12]
  
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	895b      	ldrh	r3, [r3, #10]
 8004c60:	2100      	movs	r1, #0
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fd f922 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d111      	bne.n	8004c92 <TT4_ReadURI+0x4a>
  {
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004c6e:	490d      	ldr	r1, [pc, #52]	; (8004ca4 <TT4_ReadURI+0x5c>)
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f7fd fcd5 	bl	8002620 <NDEF_IdentifyNDEF>
 8004c76:	4603      	mov	r3, r0
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d105      	bne.n	8004c88 <TT4_ReadURI+0x40>
    {
      status = NDEF_ReadURI(pRecordStruct, pURI);
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	f7fe ff4c 	bl	8003b1c <NDEF_ReadURI>
 8004c84:	4603      	mov	r3, r0
 8004c86:	82fb      	strh	r3, [r7, #22]
    }
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	895b      	ldrh	r3, [r3, #10]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fd f96f 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004c92:	8afb      	ldrh	r3, [r7, #22]
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20001f48 	.word	0x20001f48
 8004ca0:	20001f58 	.word	0x20001f58
 8004ca4:	20002178 	.word	0x20002178

08004ca8 <TT4_WriteURI>:
  * @param  pURI : pointer on URI structure to prepare NDEF
  * @retval SUCCESS : NDEF URI stored
  * @retval ERROR : Not able to store NDEF URI
  */
uint16_t TT4_WriteURI(sURI_Info *pURI)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <TT4_WriteURI+0x40>)
 8004cb6:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	895b      	ldrh	r3, [r3, #10]
 8004cbc:	2100      	movs	r1, #0
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7fd f8f4 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d109      	bne.n	8004cde <TT4_WriteURI+0x36>
  {
    status = NDEF_WriteURI ( pURI );
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f7fe ff8a 	bl	8003be4 <NDEF_WriteURI>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	81fb      	strh	r3, [r7, #14]
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	895b      	ldrh	r3, [r3, #10]
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fd f949 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004cde:	89fb      	ldrh	r3, [r7, #14]
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3710      	adds	r7, #16
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20001f48 	.word	0x20001f48

08004cec <TT4_ReadSMS>:
  * @param  pSMS : pointer on SMS structure to fill with read data
  * @retval SUCCESS : SMS structure has been updated
  * @retval ERROR : Not able to fill MS structure
  */
uint16_t TT4_ReadSMS(sSMSInfo *pSMS)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004cf8:	4b11      	ldr	r3, [pc, #68]	; (8004d40 <TT4_ReadSMS+0x54>)
 8004cfa:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004cfc:	4b11      	ldr	r3, [pc, #68]	; (8004d44 <TT4_ReadSMS+0x58>)
 8004cfe:	60fb      	str	r3, [r7, #12]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	895b      	ldrh	r3, [r3, #10]
 8004d04:	2100      	movs	r1, #0
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7fd f8d0 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d111      	bne.n	8004d36 <TT4_ReadSMS+0x4a>
  {
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004d12:	490d      	ldr	r1, [pc, #52]	; (8004d48 <TT4_ReadSMS+0x5c>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f7fd fc83 	bl	8002620 <NDEF_IdentifyNDEF>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d105      	bne.n	8004d2c <TT4_ReadSMS+0x40>
    {
      status = NDEF_ReadSMS(pRecordStruct, pSMS);
 8004d20:	6879      	ldr	r1, [r7, #4]
 8004d22:	68f8      	ldr	r0, [r7, #12]
 8004d24:	f7fe fa7a 	bl	800321c <NDEF_ReadSMS>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	82fb      	strh	r3, [r7, #22]
    }
    NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	895b      	ldrh	r3, [r3, #10]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f7fd f91d 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004d36:	8afb      	ldrh	r3, [r7, #22]
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3718      	adds	r7, #24
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}
 8004d40:	20001f48 	.word	0x20001f48
 8004d44:	20001f58 	.word	0x20001f58
 8004d48:	20002178 	.word	0x20002178

08004d4c <TT4_WriteSMS>:
  * @param  pSMS : pointer on SMS structure to prepare NDEF
  * @retval SUCCESS : NDEF SMS stored
  * @retval ERROR : Not able to store NDEF SMS
  */
uint16_t TT4_WriteSMS(sSMSInfo *pSMS)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <TT4_WriteSMS+0x40>)
 8004d5a:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	895b      	ldrh	r3, [r3, #10]
 8004d60:	2100      	movs	r1, #0
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fd f8a2 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d109      	bne.n	8004d82 <TT4_WriteSMS+0x36>
  {
    status = NDEF_WriteSMS ( pSMS );
 8004d6e:	6878      	ldr	r0, [r7, #4]
 8004d70:	f7fe faca 	bl	8003308 <NDEF_WriteSMS>
 8004d74:	4603      	mov	r3, r0
 8004d76:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	895b      	ldrh	r3, [r3, #10]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f7fd f8f7 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004d82:	89fb      	ldrh	r3, [r7, #14]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	20001f48 	.word	0x20001f48

08004d90 <TT4_ReadEmail>:
  * @param  pEmailStruct : pointer on eMail structure to fill with read data
  * @retval SUCCESS : eMail structure has been updated
  * @retval ERROR : Not able to fill eMail structure
  */
uint16_t TT4_ReadEmail (sEmailInfo *pEmailStruct)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004d98:	2301      	movs	r3, #1
 8004d9a:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004d9c:	4b11      	ldr	r3, [pc, #68]	; (8004de4 <TT4_ReadEmail+0x54>)
 8004d9e:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004da0:	4b11      	ldr	r3, [pc, #68]	; (8004de8 <TT4_ReadEmail+0x58>)
 8004da2:	60fb      	str	r3, [r7, #12]
  
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	895b      	ldrh	r3, [r3, #10]
 8004da8:	2100      	movs	r1, #0
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7fd f87e 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d111      	bne.n	8004dda <TT4_ReadEmail+0x4a>
  {
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004db6:	490d      	ldr	r1, [pc, #52]	; (8004dec <TT4_ReadEmail+0x5c>)
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f7fd fc31 	bl	8002620 <NDEF_IdentifyNDEF>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d105      	bne.n	8004dd0 <TT4_ReadEmail+0x40>
    {
      status = NDEF_ReadEmail(pRecordStruct, pEmailStruct);
 8004dc4:	6879      	ldr	r1, [r7, #4]
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7fd feee 	bl	8002ba8 <NDEF_ReadEmail>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	82fb      	strh	r3, [r7, #22]
    }
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	895b      	ldrh	r3, [r3, #10]
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f7fd f8cb 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;    
 8004dda:	8afb      	ldrh	r3, [r7, #22]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20001f48 	.word	0x20001f48
 8004de8:	20001f58 	.word	0x20001f58
 8004dec:	20002178 	.word	0x20002178

08004df0 <TT4_WriteEmail>:
  * @param  pEmailStruct : pointer on eMail structure to prepare NDEF
  * @retval SUCCESS : NDEF eMail stored
  * @retval ERROR : Not able to store NDEF eMail
  */
uint16_t TT4_WriteEmail(sEmailInfo *pEmailStruct)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004dfc:	4b0c      	ldr	r3, [pc, #48]	; (8004e30 <TT4_WriteEmail+0x40>)
 8004dfe:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	895b      	ldrh	r3, [r3, #10]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd f850 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d109      	bne.n	8004e26 <TT4_WriteEmail+0x36>
  {
    status = NDEF_WriteEmail ( pEmailStruct );
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fd ff2a 	bl	8002c6c <NDEF_WriteEmail>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	895b      	ldrh	r3, [r3, #10]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd f8a5 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004e26:	89fb      	ldrh	r3, [r7, #14]
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3710      	adds	r7, #16
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20001f48 	.word	0x20001f48

08004e34 <TT4_ReadVcard>:
  * @param  pVcard : pointer on Vcard structure to fill with read data
  * @retval SUCCESS : Vcard structure has been updated
  * @retval ERROR : Not able to fill Vcard structure
  */
uint16_t TT4_ReadVcard(sVcardInfo *pVcard)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	82fb      	strh	r3, [r7, #22]
  sCCFileInfo *pCCFile;
  sRecordInfo *pRecordStruct;
  
  pCCFile = &CCFileStruct;
 8004e40:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <TT4_ReadVcard+0x54>)
 8004e42:	613b      	str	r3, [r7, #16]
  pRecordStruct = &RecordStruct;
 8004e44:	4b11      	ldr	r3, [pc, #68]	; (8004e8c <TT4_ReadVcard+0x58>)
 8004e46:	60fb      	str	r3, [r7, #12]
  
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	895b      	ldrh	r3, [r3, #10]
 8004e4c:	2100      	movs	r1, #0
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f7fd f82c 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004e54:	4603      	mov	r3, r0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d111      	bne.n	8004e7e <TT4_ReadVcard+0x4a>
  {  
    if(NDEF_IdentifyNDEF( pRecordStruct, NDEF_Buffer) == NDEF_SUCCESS)
 8004e5a:	490d      	ldr	r1, [pc, #52]	; (8004e90 <TT4_ReadVcard+0x5c>)
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f7fd fbdf 	bl	8002620 <NDEF_IdentifyNDEF>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d105      	bne.n	8004e74 <TT4_ReadVcard+0x40>
    {
      status = NDEF_ReadVcard(pRecordStruct, pVcard);
 8004e68:	6879      	ldr	r1, [r7, #4]
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f7ff fb70 	bl	8004550 <NDEF_ReadVcard>
 8004e70:	4603      	mov	r3, r0
 8004e72:	82fb      	strh	r3, [r7, #22]
    }
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	895b      	ldrh	r3, [r3, #10]
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f7fd f879 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004e7e:	8afb      	ldrh	r3, [r7, #22]
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	20001f48 	.word	0x20001f48
 8004e8c:	20001f58 	.word	0x20001f58
 8004e90:	20002178 	.word	0x20002178

08004e94 <TT4_WriteVcard>:
  * @param  pVcard : pointer on Vcard structure to prepare NDEF
  * @retval SUCCESS : NDEF Vcard stored
  * @retval ERROR : Not able to store NDEF Vcard
  */
uint16_t TT4_WriteVcard(sVcardInfo *pVcard)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004ea0:	4b0c      	ldr	r3, [pc, #48]	; (8004ed4 <TT4_WriteVcard+0x40>)
 8004ea2:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	895b      	ldrh	r3, [r3, #10]
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7fc fffe 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <TT4_WriteVcard+0x36>
  {
    status = NDEF_WriteVcard ( pVcard );
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7ff fb62 	bl	8004580 <NDEF_WriteVcard>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004ec0:	68bb      	ldr	r3, [r7, #8]
 8004ec2:	895b      	ldrh	r3, [r3, #10]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fd f853 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004eca:	89fb      	ldrh	r3, [r7, #14]
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}
 8004ed4:	20001f48 	.word	0x20001f48

08004ed8 <TT4_AddAAR>:
  * @param  pAAR : pointer on structure that contain AAR information
  * @retval SUCCESS : AAR added
  * @retval ERROR : Not able to add AAR
  */
uint16_t TT4_AddAAR(sAARInfo *pAAR)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint16_t status = NDEF_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	81fb      	strh	r3, [r7, #14]
  sCCFileInfo *pCCFile;
  
  pCCFile = &CCFileStruct;
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	; (8004f18 <TT4_AddAAR+0x40>)
 8004ee6:	60bb      	str	r3, [r7, #8]
  
  if(NFC_TT4_OpenNDEFSession(pCCFile->FileID, NFC_TT4_ASK_FOR_SESSION) == NDEF_SUCCESS)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	895b      	ldrh	r3, [r3, #10]
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f7fc ffdc 	bl	8001eac <NFC_TT4_OpenNDEFSession>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d109      	bne.n	8004f0e <TT4_AddAAR+0x36>
  {
    status = NDEF_AddAAR ( pAAR );
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fd fcc2 	bl	8002884 <NDEF_AddAAR>
 8004f00:	4603      	mov	r3, r0
 8004f02:	81fb      	strh	r3, [r7, #14]
     NFC_TT4_CloseNDEFSession(pCCFile->FileID);
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	895b      	ldrh	r3, [r3, #10]
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f7fd f831 	bl	8001f70 <NFC_TT4_CloseNDEFSession>
  }
  
  return status;
 8004f0e:	89fb      	ldrh	r3, [r7, #14]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20001f48 	.word	0x20001f48

08004f1c <EMAILwrite_demo>:
		{AARwrite_demo,"AAR", 8},

	};
/******************************************************************** END **************************************************************/
static void EMAILwrite_demo(void)
{
 8004f1c:	b590      	push	{r4, r7, lr}
 8004f1e:	f5ad 7d77 	sub.w	sp, sp, #988	; 0x3dc
 8004f22:	af02      	add	r7, sp, #8
	if(flag_Email)
 8004f24:	4b3e      	ldr	r3, [pc, #248]	; (8005020 <EMAILwrite_demo+0x104>)
 8004f26:	781b      	ldrb	r3, [r3, #0]
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d073      	beq.n	8005014 <EMAILwrite_demo+0xf8>
	{
		uint16_t status = ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC Email Write Mode\r\n",sizeof("\033\143NFC Email Write Mode\r\n"),10);
 8004f32:	230a      	movs	r3, #10
 8004f34:	2219      	movs	r2, #25
 8004f36:	493b      	ldr	r1, [pc, #236]	; (8005024 <EMAILwrite_demo+0x108>)
 8004f38:	483b      	ldr	r0, [pc, #236]	; (8005028 <EMAILwrite_demo+0x10c>)
 8004f3a:	f00c f9b1 	bl	80112a0 <HAL_UART_Transmit>
		sEmailInfo EmailStruct;
		sEmailInfo *pEmailStruct;

		pEmailStruct = &EmailStruct;
 8004f3e:	1d3b      	adds	r3, r7, #4
 8004f40:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

		memcpy(pEmailStruct->EmailAdd, EmailAdd, strlen(EmailAdd)+1);
 8004f44:	f8d7 43c8 	ldr.w	r4, [r7, #968]	; 0x3c8
 8004f48:	4838      	ldr	r0, [pc, #224]	; (800502c <EMAILwrite_demo+0x110>)
 8004f4a:	f7fb f941 	bl	80001d0 <strlen>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	3301      	adds	r3, #1
 8004f52:	461a      	mov	r2, r3
 8004f54:	4935      	ldr	r1, [pc, #212]	; (800502c <EMAILwrite_demo+0x110>)
 8004f56:	4620      	mov	r0, r4
 8004f58:	f00d fe02 	bl	8012b60 <memcpy>
		memcpy(pEmailStruct->Subject, Subject, strlen(Subject)+1);
 8004f5c:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8004f60:	f103 0440 	add.w	r4, r3, #64	; 0x40
 8004f64:	4832      	ldr	r0, [pc, #200]	; (8005030 <EMAILwrite_demo+0x114>)
 8004f66:	f7fb f933 	bl	80001d0 <strlen>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	3301      	adds	r3, #1
 8004f6e:	461a      	mov	r2, r3
 8004f70:	492f      	ldr	r1, [pc, #188]	; (8005030 <EMAILwrite_demo+0x114>)
 8004f72:	4620      	mov	r0, r4
 8004f74:	f00d fdf4 	bl	8012b60 <memcpy>
		memcpy(pEmailStruct->Message, EmailMessage, strlen(EmailMessage)+1);
 8004f78:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8004f7c:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8004f80:	482c      	ldr	r0, [pc, #176]	; (8005034 <EMAILwrite_demo+0x118>)
 8004f82:	f7fb f925 	bl	80001d0 <strlen>
 8004f86:	4603      	mov	r3, r0
 8004f88:	3301      	adds	r3, #1
 8004f8a:	461a      	mov	r2, r3
 8004f8c:	4929      	ldr	r1, [pc, #164]	; (8005034 <EMAILwrite_demo+0x118>)
 8004f8e:	4620      	mov	r0, r4
 8004f90:	f00d fde6 	bl	8012b60 <memcpy>
		memcpy(pEmailStruct->Information, Information, strlen(Information)+1);
 8004f94:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8004f98:	f503 740d 	add.w	r4, r3, #564	; 0x234
 8004f9c:	4826      	ldr	r0, [pc, #152]	; (8005038 <EMAILwrite_demo+0x11c>)
 8004f9e:	f7fb f917 	bl	80001d0 <strlen>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	4923      	ldr	r1, [pc, #140]	; (8005038 <EMAILwrite_demo+0x11c>)
 8004faa:	4620      	mov	r0, r4
 8004fac:	f00d fdd8 	bl	8012b60 <memcpy>

		status = TT4_WriteEmail ( pEmailStruct );
 8004fb0:	f8d7 03c8 	ldr.w	r0, [r7, #968]	; 0x3c8
 8004fb4:	f7ff ff1c 	bl	8004df0 <TT4_WriteEmail>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce
		if(status == SUCCESS)
 8004fbe:	f8b7 33ce 	ldrh.w	r3, [r7, #974]	; 0x3ce
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d11d      	bne.n	8005002 <EMAILwrite_demo+0xe6>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"NFC Email Write Done\r\n",sizeof("NFC Email Write Done\r\n"),10);
 8004fc6:	230a      	movs	r3, #10
 8004fc8:	2217      	movs	r2, #23
 8004fca:	491c      	ldr	r1, [pc, #112]	; (800503c <EMAILwrite_demo+0x120>)
 8004fcc:	4816      	ldr	r0, [pc, #88]	; (8005028 <EMAILwrite_demo+0x10c>)
 8004fce:	f00c f967 	bl	80112a0 <HAL_UART_Transmit>
			snprintf(str_email,700,"Email Addr 	: %s \r\nSubject 	: %s \r\nMessage 	: %s\r\n",pEmailStruct->EmailAdd,pEmailStruct->Subject,pEmailStruct->Message);
 8004fd2:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 8004fd6:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 8004fda:	3340      	adds	r3, #64	; 0x40
 8004fdc:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 8004fe0:	32a4      	adds	r2, #164	; 0xa4
 8004fe2:	9201      	str	r2, [sp, #4]
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	4a15      	ldr	r2, [pc, #84]	; (8005040 <EMAILwrite_demo+0x124>)
 8004fea:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 8004fee:	4815      	ldr	r0, [pc, #84]	; (8005044 <EMAILwrite_demo+0x128>)
 8004ff0:	f00e fac4 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_email,sizeof(str_email),100);
 8004ff4:	2364      	movs	r3, #100	; 0x64
 8004ff6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8004ffa:	4912      	ldr	r1, [pc, #72]	; (8005044 <EMAILwrite_demo+0x128>)
 8004ffc:	480a      	ldr	r0, [pc, #40]	; (8005028 <EMAILwrite_demo+0x10c>)
 8004ffe:	f00c f94f 	bl	80112a0 <HAL_UART_Transmit>
		}
		if(status != SUCCESS)
 8005002:	f8b7 33ce 	ldrh.w	r3, [r7, #974]	; 0x3ce
 8005006:	2b00      	cmp	r3, #0
 8005008:	d001      	beq.n	800500e <EMAILwrite_demo+0xf2>
		{
			Error_Handler();
 800500a:	f001 fe81 	bl	8006d10 <Error_Handler>
		}

		flag_Email=0;
 800500e:	4b04      	ldr	r3, [pc, #16]	; (8005020 <EMAILwrite_demo+0x104>)
 8005010:	2200      	movs	r2, #0
 8005012:	701a      	strb	r2, [r3, #0]
	}
}
 8005014:	bf00      	nop
 8005016:	f507 7775 	add.w	r7, r7, #980	; 0x3d4
 800501a:	46bd      	mov	sp, r7
 800501c:	bd90      	pop	{r4, r7, pc}
 800501e:	bf00      	nop
 8005020:	20000385 	.word	0x20000385
 8005024:	08015d38 	.word	0x08015d38
 8005028:	20002a24 	.word	0x20002a24
 800502c:	20000390 	.word	0x20000390
 8005030:	200003ac 	.word	0x200003ac
 8005034:	200003c8 	.word	0x200003c8
 8005038:	200003dc 	.word	0x200003dc
 800503c:	08015d54 	.word	0x08015d54
 8005040:	08015d6c 	.word	0x08015d6c
 8005044:	20000ff4 	.word	0x20000ff4

08005048 <EMAILread_demo>:

static void EMAILread_demo(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	f5ad 7d76 	sub.w	sp, sp, #984	; 0x3d8
 800504e:	af02      	add	r7, sp, #8
	if(flag_R_Email)
 8005050:	4b20      	ldr	r3, [pc, #128]	; (80050d4 <EMAILread_demo+0x8c>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d037      	beq.n	80050c8 <EMAILread_demo+0x80>
	{

		uint16_t status = ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce
		sEmailInfo EmailStruct;
		sEmailInfo *pEmailStruct;
		pEmailStruct = &EmailStruct;
 800505e:	1d3b      	adds	r3, r7, #4
 8005060:	f8c7 33c8 	str.w	r3, [r7, #968]	; 0x3c8

		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC Email Read Mode \r\n",sizeof("\033\143 NFC Email Read Mode \r\n"),10);
 8005064:	230a      	movs	r3, #10
 8005066:	221a      	movs	r2, #26
 8005068:	491b      	ldr	r1, [pc, #108]	; (80050d8 <EMAILread_demo+0x90>)
 800506a:	481c      	ldr	r0, [pc, #112]	; (80050dc <EMAILread_demo+0x94>)
 800506c:	f00c f918 	bl	80112a0 <HAL_UART_Transmit>

		status = TT4_ReadEmail ( pEmailStruct );
 8005070:	f8d7 03c8 	ldr.w	r0, [r7, #968]	; 0x3c8
 8005074:	f7ff fe8c 	bl	8004d90 <TT4_ReadEmail>
 8005078:	4603      	mov	r3, r0
 800507a:	f8a7 33ce 	strh.w	r3, [r7, #974]	; 0x3ce
		if(status == SUCCESS)
 800507e:	f8b7 33ce 	ldrh.w	r3, [r7, #974]	; 0x3ce
 8005082:	2b00      	cmp	r3, #0
 8005084:	d11d      	bne.n	80050c2 <EMAILread_demo+0x7a>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC Email Read Done \r\n",sizeof("\033\143 NFC Email Read Done \r\n"),10);
 8005086:	230a      	movs	r3, #10
 8005088:	221a      	movs	r2, #26
 800508a:	4915      	ldr	r1, [pc, #84]	; (80050e0 <EMAILread_demo+0x98>)
 800508c:	4813      	ldr	r0, [pc, #76]	; (80050dc <EMAILread_demo+0x94>)
 800508e:	f00c f907 	bl	80112a0 <HAL_UART_Transmit>
			snprintf(str_email,700,"Email Addr 	: %s \r\nSubject 	: %s \r\nMessage 	: %s\r\n",pEmailStruct->EmailAdd,pEmailStruct->Subject,pEmailStruct->Message);
 8005092:	f8d7 13c8 	ldr.w	r1, [r7, #968]	; 0x3c8
 8005096:	f8d7 33c8 	ldr.w	r3, [r7, #968]	; 0x3c8
 800509a:	3340      	adds	r3, #64	; 0x40
 800509c:	f8d7 23c8 	ldr.w	r2, [r7, #968]	; 0x3c8
 80050a0:	32a4      	adds	r2, #164	; 0xa4
 80050a2:	9201      	str	r2, [sp, #4]
 80050a4:	9300      	str	r3, [sp, #0]
 80050a6:	460b      	mov	r3, r1
 80050a8:	4a0e      	ldr	r2, [pc, #56]	; (80050e4 <EMAILread_demo+0x9c>)
 80050aa:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80050ae:	480e      	ldr	r0, [pc, #56]	; (80050e8 <EMAILread_demo+0xa0>)
 80050b0:	f00e fa64 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_email,sizeof(str_email),10);
 80050b4:	230a      	movs	r3, #10
 80050b6:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80050ba:	490b      	ldr	r1, [pc, #44]	; (80050e8 <EMAILread_demo+0xa0>)
 80050bc:	4807      	ldr	r0, [pc, #28]	; (80050dc <EMAILread_demo+0x94>)
 80050be:	f00c f8ef 	bl	80112a0 <HAL_UART_Transmit>
			//memset(str_email, 0, sizeof(str_email));
		}

		flag_R_Email=0;
 80050c2:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <EMAILread_demo+0x8c>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	701a      	strb	r2, [r3, #0]
	}
}
 80050c8:	bf00      	nop
 80050ca:	f507 7774 	add.w	r7, r7, #976	; 0x3d0
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}
 80050d2:	bf00      	nop
 80050d4:	20000386 	.word	0x20000386
 80050d8:	08015da0 	.word	0x08015da0
 80050dc:	20002a24 	.word	0x20002a24
 80050e0:	08015dbc 	.word	0x08015dbc
 80050e4:	08015d6c 	.word	0x08015d6c
 80050e8:	20000ff4 	.word	0x20000ff4

080050ec <URIwrite_demo>:

/******************************************************************** END **************************************************************/
/************************************* URI API ******************************************/
static void URIwrite_demo(void)
{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b0f9      	sub	sp, #484	; 0x1e4
 80050f0:	af00      	add	r7, sp, #0
	if(flag_URL)
 80050f2:	4b24      	ldr	r3, [pc, #144]	; (8005184 <URIwrite_demo+0x98>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d03e      	beq.n	8005178 <URIwrite_demo+0x8c>
	{
		sURI_Info URI;
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC URL Write Mode\r\n",sizeof("\033\143NFC URL Write Mode\r\n"),10);
 80050fa:	230a      	movs	r3, #10
 80050fc:	2217      	movs	r2, #23
 80050fe:	4922      	ldr	r1, [pc, #136]	; (8005188 <URIwrite_demo+0x9c>)
 8005100:	4822      	ldr	r0, [pc, #136]	; (800518c <URIwrite_demo+0xa0>)
 8005102:	f00c f8cd 	bl	80112a0 <HAL_UART_Transmit>
		//Prepare URI NDEF message content
		strcpy(URI.protocol,URI_ID_0x01_STRING);
 8005106:	463b      	mov	r3, r7
 8005108:	4a21      	ldr	r2, [pc, #132]	; (8005190 <URIwrite_demo+0xa4>)
 800510a:	ca07      	ldmia	r2, {r0, r1, r2}
 800510c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		strcpy(URI.URI_Message,"einfochips.com");
 8005110:	463b      	mov	r3, r7
 8005112:	3350      	adds	r3, #80	; 0x50
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <URIwrite_demo+0xa8>)
 8005116:	461c      	mov	r4, r3
 8005118:	4613      	mov	r3, r2
 800511a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800511c:	c407      	stmia	r4!, {r0, r1, r2}
 800511e:	8023      	strh	r3, [r4, #0]
 8005120:	3402      	adds	r4, #2
 8005122:	0c1b      	lsrs	r3, r3, #16
 8005124:	7023      	strb	r3, [r4, #0]
		strcpy(URI.Information,"\0");
 8005126:	463b      	mov	r3, r7
 8005128:	2200      	movs	r2, #0
 800512a:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
		while (TT4_WriteURI(&URI) != SUCCESS);
 800512e:	bf00      	nop
 8005130:	463b      	mov	r3, r7
 8005132:	4618      	mov	r0, r3
 8005134:	f7ff fdb8 	bl	8004ca8 <TT4_WriteURI>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d1f8      	bne.n	8005130 <URIwrite_demo+0x44>
		HAL_UART_Transmit_IT(&huart1,( uint8_t * )"NFC URL Write Done\r\n",sizeof("NFC URL Write Done\r\n"));
 800513e:	2215      	movs	r2, #21
 8005140:	4915      	ldr	r1, [pc, #84]	; (8005198 <URIwrite_demo+0xac>)
 8005142:	4812      	ldr	r0, [pc, #72]	; (800518c <URIwrite_demo+0xa0>)
 8005144:	f00c f940 	bl	80113c8 <HAL_UART_Transmit_IT>
		snprintf(str_url,300,"URL : %s \r\n",URI.URI_Message);
 8005148:	463b      	mov	r3, r7
 800514a:	3350      	adds	r3, #80	; 0x50
 800514c:	4a13      	ldr	r2, [pc, #76]	; (800519c <URIwrite_demo+0xb0>)
 800514e:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005152:	4813      	ldr	r0, [pc, #76]	; (80051a0 <URIwrite_demo+0xb4>)
 8005154:	f00e fa12 	bl	801357c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_url,sizeof(str_url),10);
 8005158:	230a      	movs	r3, #10
 800515a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800515e:	4910      	ldr	r1, [pc, #64]	; (80051a0 <URIwrite_demo+0xb4>)
 8005160:	480a      	ldr	r0, [pc, #40]	; (800518c <URIwrite_demo+0xa0>)
 8005162:	f00c f89d 	bl	80112a0 <HAL_UART_Transmit>
		memset(str_url, 0, sizeof(str_url));
 8005166:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800516a:	2100      	movs	r1, #0
 800516c:	480c      	ldr	r0, [pc, #48]	; (80051a0 <URIwrite_demo+0xb4>)
 800516e:	f00d fd05 	bl	8012b7c <memset>
		flag_URL = 0;
 8005172:	4b04      	ldr	r3, [pc, #16]	; (8005184 <URIwrite_demo+0x98>)
 8005174:	2200      	movs	r2, #0
 8005176:	701a      	strb	r2, [r3, #0]
	}


}
 8005178:	bf00      	nop
 800517a:	f507 77f2 	add.w	r7, r7, #484	; 0x1e4
 800517e:	46bd      	mov	sp, r7
 8005180:	bd90      	pop	{r4, r7, pc}
 8005182:	bf00      	nop
 8005184:	2000038a 	.word	0x2000038a
 8005188:	08015dd8 	.word	0x08015dd8
 800518c:	20002a24 	.word	0x20002a24
 8005190:	08015df0 	.word	0x08015df0
 8005194:	08015e00 	.word	0x08015e00
 8005198:	08015e10 	.word	0x08015e10
 800519c:	08015e28 	.word	0x08015e28
 80051a0:	20000ec8 	.word	0x20000ec8

080051a4 <URIread_demo>:

static void URIread_demo(void)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b0fa      	sub	sp, #488	; 0x1e8
 80051a8:	af00      	add	r7, sp, #0

	if(flag_R_URL)
 80051aa:	4b1f      	ldr	r3, [pc, #124]	; (8005228 <URIread_demo+0x84>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d035      	beq.n	800521e <URIread_demo+0x7a>
	{
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC URL Read Mode\r\n",sizeof("\033\143NFC URL Read Mode\r\n"),10);
 80051b2:	230a      	movs	r3, #10
 80051b4:	2216      	movs	r2, #22
 80051b6:	491d      	ldr	r1, [pc, #116]	; (800522c <URIread_demo+0x88>)
 80051b8:	481d      	ldr	r0, [pc, #116]	; (8005230 <URIread_demo+0x8c>)
 80051ba:	f00c f871 	bl	80112a0 <HAL_UART_Transmit>
		uint16_t status = ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6
		sURI_Info URI;
		sURI_Info *pURI;
		pURI=&URI;
 80051c4:	463b      	mov	r3, r7
 80051c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

		status = TT4_ReadURI(&URI);
 80051ca:	463b      	mov	r3, r7
 80051cc:	4618      	mov	r0, r3
 80051ce:	f7ff fd3b 	bl	8004c48 <TT4_ReadURI>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f8a7 31e6 	strh.w	r3, [r7, #486]	; 0x1e6

		if(status == SUCCESS)
 80051d8:	f8b7 31e6 	ldrh.w	r3, [r7, #486]	; 0x1e6
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d11b      	bne.n	8005218 <URIread_demo+0x74>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"NFC URL Read Done\r\n",sizeof("NFC URL Read Done\r\n"),10);
 80051e0:	230a      	movs	r3, #10
 80051e2:	2214      	movs	r2, #20
 80051e4:	4913      	ldr	r1, [pc, #76]	; (8005234 <URIread_demo+0x90>)
 80051e6:	4812      	ldr	r0, [pc, #72]	; (8005230 <URIread_demo+0x8c>)
 80051e8:	f00c f85a 	bl	80112a0 <HAL_UART_Transmit>
			snprintf(str_url,300,"URL : %s \r\n",pURI->URI_Message);
 80051ec:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80051f0:	3350      	adds	r3, #80	; 0x50
 80051f2:	4a11      	ldr	r2, [pc, #68]	; (8005238 <URIread_demo+0x94>)
 80051f4:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80051f8:	4810      	ldr	r0, [pc, #64]	; (800523c <URIread_demo+0x98>)
 80051fa:	f00e f9bf 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_url,sizeof(str_url),10);
 80051fe:	230a      	movs	r3, #10
 8005200:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005204:	490d      	ldr	r1, [pc, #52]	; (800523c <URIread_demo+0x98>)
 8005206:	480a      	ldr	r0, [pc, #40]	; (8005230 <URIread_demo+0x8c>)
 8005208:	f00c f84a 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_url, 0, sizeof(str_url));
 800520c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005210:	2100      	movs	r1, #0
 8005212:	480a      	ldr	r0, [pc, #40]	; (800523c <URIread_demo+0x98>)
 8005214:	f00d fcb2 	bl	8012b7c <memset>
		}
		flag_R_URL = 0;
 8005218:	4b03      	ldr	r3, [pc, #12]	; (8005228 <URIread_demo+0x84>)
 800521a:	2200      	movs	r2, #0
 800521c:	701a      	strb	r2, [r3, #0]
	}

}
 800521e:	bf00      	nop
 8005220:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	2000038b 	.word	0x2000038b
 800522c:	08015e34 	.word	0x08015e34
 8005230:	20002a24 	.word	0x20002a24
 8005234:	08015e4c 	.word	0x08015e4c
 8005238:	08015e28 	.word	0x08015e28
 800523c:	20000ec8 	.word	0x20000ec8

08005240 <Vcardwrite_demo2>:
/******************************************************************** END **************************************************************/

/************************************* Vcard API ******************************************/

static void Vcardwrite_demo2(void)
{
 8005240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005242:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 8005246:	af08      	add	r7, sp, #32
	if(flag_Vcard)
 8005248:	4b7e      	ldr	r3, [pc, #504]	; (8005444 <Vcardwrite_demo2+0x204>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	f000 80f3 	beq.w	8005438 <Vcardwrite_demo2+0x1f8>
	{
		uint16_t status = ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
		sVcardInfo VcardStruct;
		sVcardInfo *pVcardStruct;

		pVcardStruct = &VcardStruct;
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

		memcpy(pVcardStruct->FirstName, FirstName, strlen(FirstName)+1);
 8005260:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005264:	f103 040a 	add.w	r4, r3, #10
 8005268:	4877      	ldr	r0, [pc, #476]	; (8005448 <Vcardwrite_demo2+0x208>)
 800526a:	f7fa ffb1 	bl	80001d0 <strlen>
 800526e:	4603      	mov	r3, r0
 8005270:	3301      	adds	r3, #1
 8005272:	461a      	mov	r2, r3
 8005274:	4974      	ldr	r1, [pc, #464]	; (8005448 <Vcardwrite_demo2+0x208>)
 8005276:	4620      	mov	r0, r4
 8005278:	f00d fc72 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->Title, Title, strlen(Title)+1);
 800527c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005280:	f103 045a 	add.w	r4, r3, #90	; 0x5a
 8005284:	4871      	ldr	r0, [pc, #452]	; (800544c <Vcardwrite_demo2+0x20c>)
 8005286:	f7fa ffa3 	bl	80001d0 <strlen>
 800528a:	4603      	mov	r3, r0
 800528c:	3301      	adds	r3, #1
 800528e:	461a      	mov	r2, r3
 8005290:	496e      	ldr	r1, [pc, #440]	; (800544c <Vcardwrite_demo2+0x20c>)
 8005292:	4620      	mov	r0, r4
 8005294:	f00d fc64 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->Org, Org, strlen(Org)+1);
 8005298:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800529c:	f103 04aa 	add.w	r4, r3, #170	; 0xaa
 80052a0:	486b      	ldr	r0, [pc, #428]	; (8005450 <Vcardwrite_demo2+0x210>)
 80052a2:	f7fa ff95 	bl	80001d0 <strlen>
 80052a6:	4603      	mov	r3, r0
 80052a8:	3301      	adds	r3, #1
 80052aa:	461a      	mov	r2, r3
 80052ac:	4968      	ldr	r1, [pc, #416]	; (8005450 <Vcardwrite_demo2+0x210>)
 80052ae:	4620      	mov	r0, r4
 80052b0:	f00d fc56 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->HomeAddress, HomeAddress, strlen(HomeAddress)+1);
 80052b4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80052b8:	f103 04fa 	add.w	r4, r3, #250	; 0xfa
 80052bc:	4865      	ldr	r0, [pc, #404]	; (8005454 <Vcardwrite_demo2+0x214>)
 80052be:	f7fa ff87 	bl	80001d0 <strlen>
 80052c2:	4603      	mov	r3, r0
 80052c4:	3301      	adds	r3, #1
 80052c6:	461a      	mov	r2, r3
 80052c8:	4962      	ldr	r1, [pc, #392]	; (8005454 <Vcardwrite_demo2+0x214>)
 80052ca:	4620      	mov	r0, r4
 80052cc:	f00d fc48 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->WorkAddress, WorkAddress, strlen(WorkAddress)+1);
 80052d0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80052d4:	f503 74a5 	add.w	r4, r3, #330	; 0x14a
 80052d8:	485f      	ldr	r0, [pc, #380]	; (8005458 <Vcardwrite_demo2+0x218>)
 80052da:	f7fa ff79 	bl	80001d0 <strlen>
 80052de:	4603      	mov	r3, r0
 80052e0:	3301      	adds	r3, #1
 80052e2:	461a      	mov	r2, r3
 80052e4:	495c      	ldr	r1, [pc, #368]	; (8005458 <Vcardwrite_demo2+0x218>)
 80052e6:	4620      	mov	r0, r4
 80052e8:	f00d fc3a 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->HomeTel, HomeTel, strlen(HomeTel)+1);
 80052ec:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80052f0:	f503 74cd 	add.w	r4, r3, #410	; 0x19a
 80052f4:	4859      	ldr	r0, [pc, #356]	; (800545c <Vcardwrite_demo2+0x21c>)
 80052f6:	f7fa ff6b 	bl	80001d0 <strlen>
 80052fa:	4603      	mov	r3, r0
 80052fc:	3301      	adds	r3, #1
 80052fe:	461a      	mov	r2, r3
 8005300:	4956      	ldr	r1, [pc, #344]	; (800545c <Vcardwrite_demo2+0x21c>)
 8005302:	4620      	mov	r0, r4
 8005304:	f00d fc2c 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->WorkTel, WorkTel, strlen(WorkTel)+1);
 8005308:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 800530c:	f503 74e1 	add.w	r4, r3, #450	; 0x1c2
 8005310:	4853      	ldr	r0, [pc, #332]	; (8005460 <Vcardwrite_demo2+0x220>)
 8005312:	f7fa ff5d 	bl	80001d0 <strlen>
 8005316:	4603      	mov	r3, r0
 8005318:	3301      	adds	r3, #1
 800531a:	461a      	mov	r2, r3
 800531c:	4950      	ldr	r1, [pc, #320]	; (8005460 <Vcardwrite_demo2+0x220>)
 800531e:	4620      	mov	r0, r4
 8005320:	f00d fc1e 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->CellTel, CellTel, strlen(CellTel)+1);
 8005324:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005328:	f503 74f5 	add.w	r4, r3, #490	; 0x1ea
 800532c:	484d      	ldr	r0, [pc, #308]	; (8005464 <Vcardwrite_demo2+0x224>)
 800532e:	f7fa ff4f 	bl	80001d0 <strlen>
 8005332:	4603      	mov	r3, r0
 8005334:	3301      	adds	r3, #1
 8005336:	461a      	mov	r2, r3
 8005338:	494a      	ldr	r1, [pc, #296]	; (8005464 <Vcardwrite_demo2+0x224>)
 800533a:	4620      	mov	r0, r4
 800533c:	f00d fc10 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->HomeEmail, HomeEmail, strlen(HomeEmail)+1);
 8005340:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005344:	f203 2412 	addw	r4, r3, #530	; 0x212
 8005348:	4847      	ldr	r0, [pc, #284]	; (8005468 <Vcardwrite_demo2+0x228>)
 800534a:	f7fa ff41 	bl	80001d0 <strlen>
 800534e:	4603      	mov	r3, r0
 8005350:	3301      	adds	r3, #1
 8005352:	461a      	mov	r2, r3
 8005354:	4944      	ldr	r1, [pc, #272]	; (8005468 <Vcardwrite_demo2+0x228>)
 8005356:	4620      	mov	r0, r4
 8005358:	f00d fc02 	bl	8012b60 <memcpy>
		memcpy(pVcardStruct->WorkEmail, WorkEmail, strlen(WorkEmail)+1);
 800535c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005360:	f203 2462 	addw	r4, r3, #610	; 0x262
 8005364:	4841      	ldr	r0, [pc, #260]	; (800546c <Vcardwrite_demo2+0x22c>)
 8005366:	f7fa ff33 	bl	80001d0 <strlen>
 800536a:	4603      	mov	r3, r0
 800536c:	3301      	adds	r3, #1
 800536e:	461a      	mov	r2, r3
 8005370:	493e      	ldr	r1, [pc, #248]	; (800546c <Vcardwrite_demo2+0x22c>)
 8005372:	4620      	mov	r0, r4
 8005374:	f00d fbf4 	bl	8012b60 <memcpy>

		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC VCARD Write Mode\r",sizeof("\033\143 NFC VCARD Write Mode\r"),10);
 8005378:	230a      	movs	r3, #10
 800537a:	2219      	movs	r2, #25
 800537c:	493c      	ldr	r1, [pc, #240]	; (8005470 <Vcardwrite_demo2+0x230>)
 800537e:	483d      	ldr	r0, [pc, #244]	; (8005474 <Vcardwrite_demo2+0x234>)
 8005380:	f00b ff8e 	bl	80112a0 <HAL_UART_Transmit>
		status = TT4_WriteVcard ( &VcardStruct );
 8005384:	f107 030c 	add.w	r3, r7, #12
 8005388:	4618      	mov	r0, r3
 800538a:	f7ff fd83 	bl	8004e94 <TT4_WriteVcard>
 800538e:	4603      	mov	r3, r0
 8005390:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6

		if(status != SUCCESS)
 8005394:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 8005398:	2b00      	cmp	r3, #0
 800539a:	d001      	beq.n	80053a0 <Vcardwrite_demo2+0x160>
		{
			Error_Handler();
 800539c:	f001 fcb8 	bl	8006d10 <Error_Handler>
		}
		if(status == SUCCESS)
 80053a0:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d144      	bne.n	8005432 <Vcardwrite_demo2+0x1f2>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC VCARD Write Done\r",sizeof("\033\143 NFC VCARD Write Done\r"),10);
 80053a8:	230a      	movs	r3, #10
 80053aa:	2219      	movs	r2, #25
 80053ac:	4932      	ldr	r1, [pc, #200]	; (8005478 <Vcardwrite_demo2+0x238>)
 80053ae:	4831      	ldr	r0, [pc, #196]	; (8005474 <Vcardwrite_demo2+0x234>)
 80053b0:	f00b ff76 	bl	80112a0 <HAL_UART_Transmit>
			snprintf(str_Vcard,1000,"Name		: %s \r\nTitle		: %s \r\nOrg		: %s\r\nHomeAddress 	: %s\r\nHomeTel 	: %s\r\nWorkTel 	: %s\r\nCellTel 	: %s\r\nHomeEmai 	: %s\r\nHomeEmai 	: %s\r\n",pVcardStruct->FirstName,pVcardStruct->Title,pVcardStruct->Org,pVcardStruct->HomeAddress,pVcardStruct->HomeTel,pVcardStruct->WorkTel,pVcardStruct->CellTel,pVcardStruct->HomeEmail,pVcardStruct->WorkEmail);
 80053b4:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80053b8:	f103 0c0a 	add.w	ip, r3, #10
 80053bc:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80053c0:	335a      	adds	r3, #90	; 0x5a
 80053c2:	607b      	str	r3, [r7, #4]
 80053c4:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80053c8:	32aa      	adds	r2, #170	; 0xaa
 80053ca:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 80053ce:	31fa      	adds	r1, #250	; 0xfa
 80053d0:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 80053d4:	f500 70cd 	add.w	r0, r0, #410	; 0x19a
 80053d8:	f8d7 42c0 	ldr.w	r4, [r7, #704]	; 0x2c0
 80053dc:	f504 74e1 	add.w	r4, r4, #450	; 0x1c2
 80053e0:	f8d7 52c0 	ldr.w	r5, [r7, #704]	; 0x2c0
 80053e4:	f505 75f5 	add.w	r5, r5, #490	; 0x1ea
 80053e8:	f8d7 62c0 	ldr.w	r6, [r7, #704]	; 0x2c0
 80053ec:	f206 2612 	addw	r6, r6, #530	; 0x212
 80053f0:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80053f4:	f203 2362 	addw	r3, r3, #610	; 0x262
 80053f8:	9307      	str	r3, [sp, #28]
 80053fa:	9606      	str	r6, [sp, #24]
 80053fc:	9505      	str	r5, [sp, #20]
 80053fe:	9404      	str	r4, [sp, #16]
 8005400:	9003      	str	r0, [sp, #12]
 8005402:	9102      	str	r1, [sp, #8]
 8005404:	9201      	str	r2, [sp, #4]
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	4663      	mov	r3, ip
 800540c:	4a1b      	ldr	r2, [pc, #108]	; (800547c <Vcardwrite_demo2+0x23c>)
 800540e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005412:	481b      	ldr	r0, [pc, #108]	; (8005480 <Vcardwrite_demo2+0x240>)
 8005414:	f00e f8b2 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_Vcard,sizeof(str_Vcard),100);
 8005418:	2364      	movs	r3, #100	; 0x64
 800541a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800541e:	4918      	ldr	r1, [pc, #96]	; (8005480 <Vcardwrite_demo2+0x240>)
 8005420:	4814      	ldr	r0, [pc, #80]	; (8005474 <Vcardwrite_demo2+0x234>)
 8005422:	f00b ff3d 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_Vcard, 0, sizeof(str_Vcard));
 8005426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800542a:	2100      	movs	r1, #0
 800542c:	4814      	ldr	r0, [pc, #80]	; (8005480 <Vcardwrite_demo2+0x240>)
 800542e:	f00d fba5 	bl	8012b7c <memset>
		}

		flag_Vcard=0;
 8005432:	4b04      	ldr	r3, [pc, #16]	; (8005444 <Vcardwrite_demo2+0x204>)
 8005434:	2200      	movs	r2, #0
 8005436:	701a      	strb	r2, [r3, #0]
	}

}
 8005438:	bf00      	nop
 800543a:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
 800543e:	46bd      	mov	sp, r7
 8005440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005442:	bf00      	nop
 8005444:	20000387 	.word	0x20000387
 8005448:	20000430 	.word	0x20000430
 800544c:	20000440 	.word	0x20000440
 8005450:	20000454 	.word	0x20000454
 8005454:	20000eb8 	.word	0x20000eb8
 8005458:	20000460 	.word	0x20000460
 800545c:	20000ebc 	.word	0x20000ebc
 8005460:	20000ec0 	.word	0x20000ec0
 8005464:	20000478 	.word	0x20000478
 8005468:	20000ec4 	.word	0x20000ec4
 800546c:	20000488 	.word	0x20000488
 8005470:	08015e60 	.word	0x08015e60
 8005474:	20002a24 	.word	0x20002a24
 8005478:	08015e7c 	.word	0x08015e7c
 800547c:	08015e98 	.word	0x08015e98
 8005480:	200012b0 	.word	0x200012b0

08005484 <Vcardread_demo2>:


static void Vcardread_demo2(void)
{
 8005484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005486:	f5ad 7d3b 	sub.w	sp, sp, #748	; 0x2ec
 800548a:	af08      	add	r7, sp, #32
	if(flag_R_Vcard)
 800548c:	4b31      	ldr	r3, [pc, #196]	; (8005554 <Vcardread_demo2+0xd0>)
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d05a      	beq.n	800554a <Vcardread_demo2+0xc6>
	{
		uint16_t status = ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
		sVcardInfo VcardStruct;
		sVcardInfo *pVcardStruct;

		pVcardStruct = &VcardStruct;
 800549a:	f107 030c 	add.w	r3, r7, #12
 800549e:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0

		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143NFC Vcard Read Mode \r\n",sizeof("\033\143 NFC Vcard Read Mode \r\n"),10);
 80054a2:	230a      	movs	r3, #10
 80054a4:	221a      	movs	r2, #26
 80054a6:	492c      	ldr	r1, [pc, #176]	; (8005558 <Vcardread_demo2+0xd4>)
 80054a8:	482c      	ldr	r0, [pc, #176]	; (800555c <Vcardread_demo2+0xd8>)
 80054aa:	f00b fef9 	bl	80112a0 <HAL_UART_Transmit>

		status = TT4_ReadVcard ( &VcardStruct );
 80054ae:	f107 030c 	add.w	r3, r7, #12
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7ff fcbe 	bl	8004e34 <TT4_ReadVcard>
 80054b8:	4603      	mov	r3, r0
 80054ba:	f8a7 32c6 	strh.w	r3, [r7, #710]	; 0x2c6
		if(status == SUCCESS)
 80054be:	f8b7 32c6 	ldrh.w	r3, [r7, #710]	; 0x2c6
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d13e      	bne.n	8005544 <Vcardread_demo2+0xc0>
		{
			snprintf(str_Vcard,1000,"Name		: %s \r\nTitle		: %s \r\nOrg		: %s\r\nHomeAddress 	: %s\r\nHomeTel 	: %s\r\nWorkTel 	: %s\r\nCellTel 	: %s\r\nHomeEmai 	: %s\r\nHomeEmai 	: %s\r\n",pVcardStruct->FirstName,pVcardStruct->Title,pVcardStruct->Org,pVcardStruct->HomeAddress,pVcardStruct->HomeTel,pVcardStruct->WorkTel,pVcardStruct->CellTel,pVcardStruct->HomeEmail,pVcardStruct->WorkEmail);
 80054c6:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80054ca:	f103 0c0a 	add.w	ip, r3, #10
 80054ce:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80054d2:	335a      	adds	r3, #90	; 0x5a
 80054d4:	607b      	str	r3, [r7, #4]
 80054d6:	f8d7 22c0 	ldr.w	r2, [r7, #704]	; 0x2c0
 80054da:	32aa      	adds	r2, #170	; 0xaa
 80054dc:	f8d7 12c0 	ldr.w	r1, [r7, #704]	; 0x2c0
 80054e0:	31fa      	adds	r1, #250	; 0xfa
 80054e2:	f8d7 02c0 	ldr.w	r0, [r7, #704]	; 0x2c0
 80054e6:	f500 70cd 	add.w	r0, r0, #410	; 0x19a
 80054ea:	f8d7 42c0 	ldr.w	r4, [r7, #704]	; 0x2c0
 80054ee:	f504 74e1 	add.w	r4, r4, #450	; 0x1c2
 80054f2:	f8d7 52c0 	ldr.w	r5, [r7, #704]	; 0x2c0
 80054f6:	f505 75f5 	add.w	r5, r5, #490	; 0x1ea
 80054fa:	f8d7 62c0 	ldr.w	r6, [r7, #704]	; 0x2c0
 80054fe:	f206 2612 	addw	r6, r6, #530	; 0x212
 8005502:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 8005506:	f203 2362 	addw	r3, r3, #610	; 0x262
 800550a:	9307      	str	r3, [sp, #28]
 800550c:	9606      	str	r6, [sp, #24]
 800550e:	9505      	str	r5, [sp, #20]
 8005510:	9404      	str	r4, [sp, #16]
 8005512:	9003      	str	r0, [sp, #12]
 8005514:	9102      	str	r1, [sp, #8]
 8005516:	9201      	str	r2, [sp, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	4663      	mov	r3, ip
 800551e:	4a10      	ldr	r2, [pc, #64]	; (8005560 <Vcardread_demo2+0xdc>)
 8005520:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005524:	480f      	ldr	r0, [pc, #60]	; (8005564 <Vcardread_demo2+0xe0>)
 8005526:	f00e f829 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_Vcard,sizeof(str_Vcard),100);
 800552a:	2364      	movs	r3, #100	; 0x64
 800552c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005530:	490c      	ldr	r1, [pc, #48]	; (8005564 <Vcardread_demo2+0xe0>)
 8005532:	480a      	ldr	r0, [pc, #40]	; (800555c <Vcardread_demo2+0xd8>)
 8005534:	f00b feb4 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_Vcard, 0, sizeof(str_Vcard));
 8005538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800553c:	2100      	movs	r1, #0
 800553e:	4809      	ldr	r0, [pc, #36]	; (8005564 <Vcardread_demo2+0xe0>)
 8005540:	f00d fb1c 	bl	8012b7c <memset>
		}

		flag_R_Vcard = 0;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <Vcardread_demo2+0xd0>)
 8005546:	2200      	movs	r2, #0
 8005548:	701a      	strb	r2, [r3, #0]
	}

}
 800554a:	bf00      	nop
 800554c:	f507 7733 	add.w	r7, r7, #716	; 0x2cc
 8005550:	46bd      	mov	sp, r7
 8005552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005554:	20000388 	.word	0x20000388
 8005558:	08015f20 	.word	0x08015f20
 800555c:	20002a24 	.word	0x20002a24
 8005560:	08015e98 	.word	0x08015e98
 8005564:	200012b0 	.word	0x200012b0

08005568 <SMSwrite_demo>:

/******************************************************************** END **************************************************************/

/************************************* SMS API ******************************************/
static void SMSwrite_demo(void)
{
 8005568:	b590      	push	{r4, r7, lr}
 800556a:	f5ad 7d51 	sub.w	sp, sp, #836	; 0x344
 800556e:	af02      	add	r7, sp, #8
	if(flag_sms)
 8005570:	4b37      	ldr	r3, [pc, #220]	; (8005650 <SMSwrite_demo+0xe8>)
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d066      	beq.n	8005646 <SMSwrite_demo+0xde>
	{
		uint16_t status = ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
		sSMSInfo SMSStruct;
		sSMSInfo *pSMSStruct;

		pSMSStruct = &SMSStruct;
 800557e:	463b      	mov	r3, r7
 8005580:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Write Mode\r",sizeof("\033\143 NFC SMS Read Mode\r"),10);
 8005584:	230a      	movs	r3, #10
 8005586:	2216      	movs	r2, #22
 8005588:	4932      	ldr	r1, [pc, #200]	; (8005654 <SMSwrite_demo+0xec>)
 800558a:	4833      	ldr	r0, [pc, #204]	; (8005658 <SMSwrite_demo+0xf0>)
 800558c:	f00b fe88 	bl	80112a0 <HAL_UART_Transmit>

		memcpy(pSMSStruct->PhoneNumber, PhoneNumber, strlen(PhoneNumber)+1);
 8005590:	f8d7 4330 	ldr.w	r4, [r7, #816]	; 0x330
 8005594:	4831      	ldr	r0, [pc, #196]	; (800565c <SMSwrite_demo+0xf4>)
 8005596:	f7fa fe1b 	bl	80001d0 <strlen>
 800559a:	4603      	mov	r3, r0
 800559c:	3301      	adds	r3, #1
 800559e:	461a      	mov	r2, r3
 80055a0:	492e      	ldr	r1, [pc, #184]	; (800565c <SMSwrite_demo+0xf4>)
 80055a2:	4620      	mov	r0, r4
 80055a4:	f00d fadc 	bl	8012b60 <memcpy>
		memcpy(pSMSStruct->Message, Message, strlen(Message)+1);
 80055a8:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80055ac:	f103 0410 	add.w	r4, r3, #16
 80055b0:	482b      	ldr	r0, [pc, #172]	; (8005660 <SMSwrite_demo+0xf8>)
 80055b2:	f7fa fe0d 	bl	80001d0 <strlen>
 80055b6:	4603      	mov	r3, r0
 80055b8:	3301      	adds	r3, #1
 80055ba:	461a      	mov	r2, r3
 80055bc:	4928      	ldr	r1, [pc, #160]	; (8005660 <SMSwrite_demo+0xf8>)
 80055be:	4620      	mov	r0, r4
 80055c0:	f00d face 	bl	8012b60 <memcpy>
		memcpy(pSMSStruct->Information, Instruction, strlen(Instruction)+1);
 80055c4:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80055c8:	f503 74d0 	add.w	r4, r3, #416	; 0x1a0
 80055cc:	4825      	ldr	r0, [pc, #148]	; (8005664 <SMSwrite_demo+0xfc>)
 80055ce:	f7fa fdff 	bl	80001d0 <strlen>
 80055d2:	4603      	mov	r3, r0
 80055d4:	3301      	adds	r3, #1
 80055d6:	461a      	mov	r2, r3
 80055d8:	4922      	ldr	r1, [pc, #136]	; (8005664 <SMSwrite_demo+0xfc>)
 80055da:	4620      	mov	r0, r4
 80055dc:	f00d fac0 	bl	8012b60 <memcpy>

		status = TT4_WriteSMS ( pSMSStruct );
 80055e0:	f8d7 0330 	ldr.w	r0, [r7, #816]	; 0x330
 80055e4:	f7ff fbb2 	bl	8004d4c <TT4_WriteSMS>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336

		if(status != SUCCESS)
 80055ee:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d001      	beq.n	80055fa <SMSwrite_demo+0x92>
		{
			Error_Handler();
 80055f6:	f001 fb8b 	bl	8006d10 <Error_Handler>
		}
		if(status == SUCCESS)
 80055fa:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d11e      	bne.n	8005640 <SMSwrite_demo+0xd8>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Read Done\r\n",sizeof("\033\143 NFC SMS Read Done\r\n"),10);
 8005602:	230a      	movs	r3, #10
 8005604:	2217      	movs	r2, #23
 8005606:	4918      	ldr	r1, [pc, #96]	; (8005668 <SMSwrite_demo+0x100>)
 8005608:	4813      	ldr	r0, [pc, #76]	; (8005658 <SMSwrite_demo+0xf0>)
 800560a:	f00b fe49 	bl	80112a0 <HAL_UART_Transmit>
			snprintf(str_sms,1000,"PhoneNumber 	:  %s \r\nMessage 		:  %s \r\nInformation 	: %s\r\n",pSMSStruct->PhoneNumber,pSMSStruct->Message,pSMSStruct->Information);
 800560e:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 8005612:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 8005616:	3310      	adds	r3, #16
 8005618:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 800561c:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8005620:	9201      	str	r2, [sp, #4]
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	460b      	mov	r3, r1
 8005626:	4a11      	ldr	r2, [pc, #68]	; (800566c <SMSwrite_demo+0x104>)
 8005628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800562c:	4810      	ldr	r0, [pc, #64]	; (8005670 <SMSwrite_demo+0x108>)
 800562e:	f00d ffa5 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_sms,sizeof(str_sms),100);
 8005632:	2364      	movs	r3, #100	; 0x64
 8005634:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005638:	490d      	ldr	r1, [pc, #52]	; (8005670 <SMSwrite_demo+0x108>)
 800563a:	4807      	ldr	r0, [pc, #28]	; (8005658 <SMSwrite_demo+0xf0>)
 800563c:	f00b fe30 	bl	80112a0 <HAL_UART_Transmit>
		}

		flag_R_sms = 0;
 8005640:	4b0c      	ldr	r3, [pc, #48]	; (8005674 <SMSwrite_demo+0x10c>)
 8005642:	2200      	movs	r2, #0
 8005644:	701a      	strb	r2, [r3, #0]
	}
}
 8005646:	bf00      	nop
 8005648:	f507 774f 	add.w	r7, r7, #828	; 0x33c
 800564c:	46bd      	mov	sp, r7
 800564e:	bd90      	pop	{r4, r7, pc}
 8005650:	2000038c 	.word	0x2000038c
 8005654:	08015f3c 	.word	0x08015f3c
 8005658:	20002a24 	.word	0x20002a24
 800565c:	200003e4 	.word	0x200003e4
 8005660:	200003f0 	.word	0x200003f0
 8005664:	20000404 	.word	0x20000404
 8005668:	08015f54 	.word	0x08015f54
 800566c:	08015f6c 	.word	0x08015f6c
 8005670:	20001698 	.word	0x20001698
 8005674:	2000038d 	.word	0x2000038d

08005678 <SMSread_demo>:

static void SMSread_demo(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	f5ad 7d50 	sub.w	sp, sp, #832	; 0x340
 800567e:	af02      	add	r7, sp, #8
	if(flag_R_sms)
 8005680:	4b26      	ldr	r3, [pc, #152]	; (800571c <SMSread_demo+0xa4>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d044      	beq.n	8005712 <SMSread_demo+0x9a>
	{
		uint16_t status = ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
		sSMSInfo SMSStruct;
		sSMSInfo *pSMSStruct;

		pSMSStruct = &SMSStruct;
 800568e:	463b      	mov	r3, r7
 8005690:	f8c7 3330 	str.w	r3, [r7, #816]	; 0x330
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Read Mode\r\n",sizeof("\033\143 NFC SMS Read Mode\r\n"),10);
 8005694:	230a      	movs	r3, #10
 8005696:	2217      	movs	r2, #23
 8005698:	4921      	ldr	r1, [pc, #132]	; (8005720 <SMSread_demo+0xa8>)
 800569a:	4822      	ldr	r0, [pc, #136]	; (8005724 <SMSread_demo+0xac>)
 800569c:	f00b fe00 	bl	80112a0 <HAL_UART_Transmit>
		status = TT4_ReadSMS ( pSMSStruct );
 80056a0:	f8d7 0330 	ldr.w	r0, [r7, #816]	; 0x330
 80056a4:	f7ff fb22 	bl	8004cec <TT4_ReadSMS>
 80056a8:	4603      	mov	r3, r0
 80056aa:	f8a7 3336 	strh.w	r3, [r7, #822]	; 0x336
		printf("check : %d\n",status);
 80056ae:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 80056b2:	4619      	mov	r1, r3
 80056b4:	481c      	ldr	r0, [pc, #112]	; (8005728 <SMSread_demo+0xb0>)
 80056b6:	f00d fed3 	bl	8013460 <iprintf>
		if(status == SUCCESS)
 80056ba:	f8b7 3336 	ldrh.w	r3, [r7, #822]	; 0x336
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d124      	bne.n	800570c <SMSread_demo+0x94>
		{
			HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC SMS Read Done\r\n",sizeof("\033\143 NFC SMS Read Done\r\n"),10);
 80056c2:	230a      	movs	r3, #10
 80056c4:	2217      	movs	r2, #23
 80056c6:	4919      	ldr	r1, [pc, #100]	; (800572c <SMSread_demo+0xb4>)
 80056c8:	4816      	ldr	r0, [pc, #88]	; (8005724 <SMSread_demo+0xac>)
 80056ca:	f00b fde9 	bl	80112a0 <HAL_UART_Transmit>
			snprintf(str_sms,1000,"PhoneNumber 	:  %s \r\nMessage 		:  %s \r\nInformation 	: %s\r\n",pSMSStruct->PhoneNumber,pSMSStruct->Message,pSMSStruct->Information);
 80056ce:	f8d7 1330 	ldr.w	r1, [r7, #816]	; 0x330
 80056d2:	f8d7 3330 	ldr.w	r3, [r7, #816]	; 0x330
 80056d6:	3310      	adds	r3, #16
 80056d8:	f8d7 2330 	ldr.w	r2, [r7, #816]	; 0x330
 80056dc:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 80056e0:	9201      	str	r2, [sp, #4]
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	460b      	mov	r3, r1
 80056e6:	4a12      	ldr	r2, [pc, #72]	; (8005730 <SMSread_demo+0xb8>)
 80056e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056ec:	4811      	ldr	r0, [pc, #68]	; (8005734 <SMSread_demo+0xbc>)
 80056ee:	f00d ff45 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_sms,sizeof(str_sms),100);
 80056f2:	2364      	movs	r3, #100	; 0x64
 80056f4:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056f8:	490e      	ldr	r1, [pc, #56]	; (8005734 <SMSread_demo+0xbc>)
 80056fa:	480a      	ldr	r0, [pc, #40]	; (8005724 <SMSread_demo+0xac>)
 80056fc:	f00b fdd0 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_sms, 0, sizeof(str_sms));
 8005700:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005704:	2100      	movs	r1, #0
 8005706:	480b      	ldr	r0, [pc, #44]	; (8005734 <SMSread_demo+0xbc>)
 8005708:	f00d fa38 	bl	8012b7c <memset>
		}

		flag_R_sms = 0;
 800570c:	4b03      	ldr	r3, [pc, #12]	; (800571c <SMSread_demo+0xa4>)
 800570e:	2200      	movs	r2, #0
 8005710:	701a      	strb	r2, [r3, #0]
	}

}
 8005712:	bf00      	nop
 8005714:	f507 774e 	add.w	r7, r7, #824	; 0x338
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	2000038d 	.word	0x2000038d
 8005720:	08015fa8 	.word	0x08015fa8
 8005724:	20002a24 	.word	0x20002a24
 8005728:	08015fc0 	.word	0x08015fc0
 800572c:	08015f54 	.word	0x08015f54
 8005730:	08015f6c 	.word	0x08015f6c
 8005734:	20001698 	.word	0x20001698

08005738 <AARwrite_demo>:
/******************************************************************** END **************************************************************/
/***************************** Android Application Record *******************************/
static void AARwrite_demo(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b098      	sub	sp, #96	; 0x60
 800573c:	af00      	add	r7, sp, #0
	if(flag_aar)
 800573e:	4b18      	ldr	r3, [pc, #96]	; (80057a0 <AARwrite_demo+0x68>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d027      	beq.n	8005796 <AARwrite_demo+0x5e>
	{
		uint16_t status = ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
		uint8_t NULL_NDEF[2] = {0,0};
 800574c:	2300      	movs	r3, #0
 800574e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
		sAARInfo AAR_struct;
		sAARInfo *pAAR;

		pAAR = &AAR_struct;
 8005752:	1d3b      	adds	r3, r7, #4
 8005754:	65bb      	str	r3, [r7, #88]	; 0x58
		HAL_UART_Transmit(&huart1,( uint8_t * )"\033\143 NFC AAR Write Mode\r\n",sizeof("\033\143 NFC AAR Read Mode\r\n"),10);
 8005756:	230a      	movs	r3, #10
 8005758:	2217      	movs	r2, #23
 800575a:	4912      	ldr	r1, [pc, #72]	; (80057a4 <AARwrite_demo+0x6c>)
 800575c:	4812      	ldr	r0, [pc, #72]	; (80057a8 <AARwrite_demo+0x70>)
 800575e:	f00b fd9f 	bl	80112a0 <HAL_UART_Transmit>
		//to set only AAR force NDEF size to 0 before
		TT4_WriteNDEF(NULL_NDEF);
 8005762:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fa4c 	bl	8004c04 <TT4_WriteNDEF>
		memcpy(pAAR->PakageName, "com.stm.bluetoothlevalidation", strlen("com.stm.bluetoothlevalidation")+1);
 800576c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800576e:	221e      	movs	r2, #30
 8005770:	490e      	ldr	r1, [pc, #56]	; (80057ac <AARwrite_demo+0x74>)
 8005772:	4618      	mov	r0, r3
 8005774:	f00d f9f4 	bl	8012b60 <memcpy>

		status = TT4_AddAAR(pAAR);
 8005778:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800577a:	f7ff fbad 	bl	8004ed8 <TT4_AddAAR>
 800577e:	4603      	mov	r3, r0
 8005780:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e

		if(status != SUCCESS)
 8005784:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8005788:	2b00      	cmp	r3, #0
 800578a:	d001      	beq.n	8005790 <AARwrite_demo+0x58>
		{
			Error_Handler();
 800578c:	f001 fac0 	bl	8006d10 <Error_Handler>
		}
		flag_aar = 0;
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <AARwrite_demo+0x68>)
 8005792:	2200      	movs	r2, #0
 8005794:	701a      	strb	r2, [r3, #0]
	}

}
 8005796:	bf00      	nop
 8005798:	3760      	adds	r7, #96	; 0x60
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	20000389 	.word	0x20000389
 80057a4:	08015fcc 	.word	0x08015fcc
 80057a8:	20002a24 	.word	0x20002a24
 80057ac:	08015fe4 	.word	0x08015fe4

080057b0 <Proximity_Test>:
/******************************************************************** END **************************************************************/

/********************************** Test of VL53L0X proximity sensor *********************************************************************/

void Proximity_Test(void)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	af00      	add	r7, sp, #0
	if(flag_pro)
 80057b4:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <Proximity_Test+0x48>)
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d01a      	beq.n	80057f2 <Proximity_Test+0x42>
	{
		prox_value = VL53L0X_PROXIMITY_GetDistance();
 80057bc:	f000 f87e 	bl	80058bc <VL53L0X_PROXIMITY_GetDistance>
 80057c0:	4603      	mov	r3, r0
 80057c2:	461a      	mov	r2, r3
 80057c4:	4b0d      	ldr	r3, [pc, #52]	; (80057fc <Proximity_Test+0x4c>)
 80057c6:	801a      	strh	r2, [r3, #0]
		snprintf(str_pro,100," \033\143 Distance = %d mm\r", prox_value);
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <Proximity_Test+0x4c>)
 80057ca:	881b      	ldrh	r3, [r3, #0]
 80057cc:	4a0c      	ldr	r2, [pc, #48]	; (8005800 <Proximity_Test+0x50>)
 80057ce:	2164      	movs	r1, #100	; 0x64
 80057d0:	480c      	ldr	r0, [pc, #48]	; (8005804 <Proximity_Test+0x54>)
 80057d2:	f00d fed3 	bl	801357c <sniprintf>
		HAL_UART_Transmit(&huart1,( uint8_t * )str_pro,sizeof(str_pro),10);
 80057d6:	230a      	movs	r3, #10
 80057d8:	2264      	movs	r2, #100	; 0x64
 80057da:	490a      	ldr	r1, [pc, #40]	; (8005804 <Proximity_Test+0x54>)
 80057dc:	480a      	ldr	r0, [pc, #40]	; (8005808 <Proximity_Test+0x58>)
 80057de:	f00b fd5f 	bl	80112a0 <HAL_UART_Transmit>
		memset(str_pro, 0, sizeof(str_pro));
 80057e2:	2264      	movs	r2, #100	; 0x64
 80057e4:	2100      	movs	r1, #0
 80057e6:	4807      	ldr	r0, [pc, #28]	; (8005804 <Proximity_Test+0x54>)
 80057e8:	f00d f9c8 	bl	8012b7c <memset>
		flag_pro=0;
 80057ec:	4b02      	ldr	r3, [pc, #8]	; (80057f8 <Proximity_Test+0x48>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	701a      	strb	r2, [r3, #0]
	}

}
 80057f2:	bf00      	nop
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20000384 	.word	0x20000384
 80057fc:	20000e50 	.word	0x20000e50
 8005800:	08016004 	.word	0x08016004
 8005804:	20000e54 	.word	0x20000e54
 8005808:	20002a24 	.word	0x20002a24

0800580c <VL53L0X_PROXIMITY_Init>:

/**
  * @brief  VL53L0X proximity sensor Initialization.
  */
static void VL53L0X_PROXIMITY_Init(void)
{
 800580c:	b590      	push	{r4, r7, lr}
 800580e:	b0f9      	sub	sp, #484	; 0x1e4
 8005810:	af5e      	add	r7, sp, #376	; 0x178
  uint16_t vl53l0x_id = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
  VL53L0X_DeviceInfo_t VL53L0X_DeviceInfo;

  /* Initialize IO interface */
  SENSOR_IO_Init();
 8005818:	f001 fea0 	bl	800755c <SENSOR_IO_Init>
  VL53L0X_PROXIMITY_MspInit();
 800581c:	f000 f85e 	bl	80058dc <VL53L0X_PROXIMITY_MspInit>

  memset(&VL53L0X_DeviceInfo, 0, sizeof(VL53L0X_DeviceInfo_t));
 8005820:	463b      	mov	r3, r7
 8005822:	2263      	movs	r2, #99	; 0x63
 8005824:	2100      	movs	r1, #0
 8005826:	4618      	mov	r0, r3
 8005828:	f00d f9a8 	bl	8012b7c <memset>

  if (VL53L0X_ERROR_NONE == VL53L0X_GetDeviceInfo(&Dev, &VL53L0X_DeviceInfo))
 800582c:	463b      	mov	r3, r7
 800582e:	4619      	mov	r1, r3
 8005830:	481e      	ldr	r0, [pc, #120]	; (80058ac <VL53L0X_PROXIMITY_Init+0xa0>)
 8005832:	f002 f961 	bl	8007af8 <VL53L0X_GetDeviceInfo>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d12f      	bne.n	800589c <VL53L0X_PROXIMITY_Init+0x90>
  {
    if (VL53L0X_ERROR_NONE == VL53L0X_RdWord(&Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID, (uint16_t *) &vl53l0x_id))
 800583c:	f107 0366 	add.w	r3, r7, #102	; 0x66
 8005840:	461a      	mov	r2, r3
 8005842:	21c0      	movs	r1, #192	; 0xc0
 8005844:	4819      	ldr	r0, [pc, #100]	; (80058ac <VL53L0X_PROXIMITY_Init+0xa0>)
 8005846:	f007 f883 	bl	800c950 <VL53L0X_RdWord>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d121      	bne.n	8005894 <VL53L0X_PROXIMITY_Init+0x88>
    {
      if (vl53l0x_id == VL53L0X_ID)
 8005850:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005854:	f64e 62aa 	movw	r2, #61098	; 0xeeaa
 8005858:	4293      	cmp	r3, r2
 800585a:	d122      	bne.n	80058a2 <VL53L0X_PROXIMITY_Init+0x96>
      {
        if (VL53L0X_ERROR_NONE == VL53L0X_DataInit(&Dev))
 800585c:	4813      	ldr	r0, [pc, #76]	; (80058ac <VL53L0X_PROXIMITY_Init+0xa0>)
 800585e:	f002 f971 	bl	8007b44 <VL53L0X_DataInit>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d111      	bne.n	800588c <VL53L0X_PROXIMITY_Init+0x80>
        {
          Dev.Present = 1;
 8005868:	4b10      	ldr	r3, [pc, #64]	; (80058ac <VL53L0X_PROXIMITY_Init+0xa0>)
 800586a:	2201      	movs	r2, #1
 800586c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
          SetupSingleShot(Dev);
 8005870:	4c0e      	ldr	r4, [pc, #56]	; (80058ac <VL53L0X_PROXIMITY_Init+0xa0>)
 8005872:	4668      	mov	r0, sp
 8005874:	f104 0310 	add.w	r3, r4, #16
 8005878:	f44f 72bc 	mov.w	r2, #376	; 0x178
 800587c:	4619      	mov	r1, r3
 800587e:	f00d f96f 	bl	8012b60 <memcpy>
 8005882:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8005886:	f007 f969 	bl	800cb5c <SetupSingleShot>
  }
  else
  {
    printf("VL53L0X Time of Flight Failed to get infos!\n");
  }
}
 800588a:	e00a      	b.n	80058a2 <VL53L0X_PROXIMITY_Init+0x96>
          printf("VL53L0X Time of Flight Failed to send its ID!\n");
 800588c:	4808      	ldr	r0, [pc, #32]	; (80058b0 <VL53L0X_PROXIMITY_Init+0xa4>)
 800588e:	f00d fe6d 	bl	801356c <puts>
}
 8005892:	e006      	b.n	80058a2 <VL53L0X_PROXIMITY_Init+0x96>
      printf("VL53L0X Time of Flight Failed to Initialize!\n");
 8005894:	4807      	ldr	r0, [pc, #28]	; (80058b4 <VL53L0X_PROXIMITY_Init+0xa8>)
 8005896:	f00d fe69 	bl	801356c <puts>
}
 800589a:	e002      	b.n	80058a2 <VL53L0X_PROXIMITY_Init+0x96>
    printf("VL53L0X Time of Flight Failed to get infos!\n");
 800589c:	4806      	ldr	r0, [pc, #24]	; (80058b8 <VL53L0X_PROXIMITY_Init+0xac>)
 800589e:	f00d fe65 	bl	801356c <puts>
}
 80058a2:	bf00      	nop
 80058a4:	376c      	adds	r7, #108	; 0x6c
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	bf00      	nop
 80058ac:	20000018 	.word	0x20000018
 80058b0:	0801601c 	.word	0x0801601c
 80058b4:	0801604c 	.word	0x0801604c
 80058b8:	0801607c 	.word	0x0801607c

080058bc <VL53L0X_PROXIMITY_GetDistance>:
/**
  * @brief  Get distance from VL53L0X proximity sensor.
  * @retval Distance in mm
  */
static uint16_t VL53L0X_PROXIMITY_GetDistance(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b088      	sub	sp, #32
 80058c0:	af00      	add	r7, sp, #0
  VL53L0X_RangingMeasurementData_t RangingMeasurementData;

  VL53L0X_PerformSingleRangingMeasurement(&Dev, &RangingMeasurementData);
 80058c2:	1d3b      	adds	r3, r7, #4
 80058c4:	4619      	mov	r1, r3
 80058c6:	4804      	ldr	r0, [pc, #16]	; (80058d8 <VL53L0X_PROXIMITY_GetDistance+0x1c>)
 80058c8:	f003 fb86 	bl	8008fd8 <VL53L0X_PerformSingleRangingMeasurement>

  return RangingMeasurementData.RangeMilliMeter;
 80058cc:	89bb      	ldrh	r3, [r7, #12]
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3720      	adds	r7, #32
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	20000018 	.word	0x20000018

080058dc <VL53L0X_PROXIMITY_MspInit>:

/**
  * @brief  VL53L0X proximity sensor Msp Initialization.
  */
static void VL53L0X_PROXIMITY_MspInit(void)
{/*
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
*/

  HAL_GPIO_WritePin(VL53L0X_XSHUT_GPIO_Port, VL53L0X_XSHUT_Pin, GPIO_PIN_SET);
 80058e0:	2201      	movs	r2, #1
 80058e2:	2140      	movs	r1, #64	; 0x40
 80058e4:	4804      	ldr	r0, [pc, #16]	; (80058f8 <VL53L0X_PROXIMITY_MspInit+0x1c>)
 80058e6:	f008 fc79 	bl	800e1dc <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80058ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80058ee:	f008 f80b 	bl	800d908 <HAL_Delay>

}
 80058f2:	bf00      	nop
 80058f4:	bd80      	pop	{r7, pc}
 80058f6:	bf00      	nop
 80058f8:	48000800 	.word	0x48000800

080058fc <f_Temperature>:
/******************************************************************** END **************************************************************/
/************************************** This function use for extracting Temperature data **********************************************/
void f_Temperature(void)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af02      	add	r7, sp, #8
	//printf("Flag state  :%d\n",flag);
	if(flag_temp)
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <f_Temperature+0x88>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d038      	beq.n	800597c <f_Temperature+0x80>
	{

		if(BSP_TSENSOR_Init())
 800590a:	f002 f8cb 	bl	8007aa4 <BSP_TSENSOR_Init>
 800590e:	4603      	mov	r3, r0
 8005910:	2b00      	cmp	r3, #0
 8005912:	d010      	beq.n	8005936 <f_Temperature+0x3a>
		{
			snprintf(str_tmp,100,"\033\143 Not Taking TEMPERATURE Data\r");
 8005914:	4a1c      	ldr	r2, [pc, #112]	; (8005988 <f_Temperature+0x8c>)
 8005916:	2164      	movs	r1, #100	; 0x64
 8005918:	481c      	ldr	r0, [pc, #112]	; (800598c <f_Temperature+0x90>)
 800591a:	f00d fe2f 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 800591e:	230a      	movs	r3, #10
 8005920:	2264      	movs	r2, #100	; 0x64
 8005922:	491a      	ldr	r1, [pc, #104]	; (800598c <f_Temperature+0x90>)
 8005924:	481a      	ldr	r0, [pc, #104]	; (8005990 <f_Temperature+0x94>)
 8005926:	f00b fcbb 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 800592a:	2264      	movs	r2, #100	; 0x64
 800592c:	2100      	movs	r1, #0
 800592e:	4817      	ldr	r0, [pc, #92]	; (800598c <f_Temperature+0x90>)
 8005930:	f00d f924 	bl	8012b7c <memset>
		}


	}

}
 8005934:	e022      	b.n	800597c <f_Temperature+0x80>
			temp_value = BSP_TSENSOR_ReadTemp();
 8005936:	f002 f8d1 	bl	8007adc <BSP_TSENSOR_ReadTemp>
 800593a:	eef0 7a40 	vmov.f32	s15, s0
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <f_Temperature+0x98>)
 8005940:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_tmp,100," \033\143 TEMPERATURE = %.2f \r", temp_value);
 8005944:	4b13      	ldr	r3, [pc, #76]	; (8005994 <f_Temperature+0x98>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4618      	mov	r0, r3
 800594a:	f7fa fdfd 	bl	8000548 <__aeabi_f2d>
 800594e:	4602      	mov	r2, r0
 8005950:	460b      	mov	r3, r1
 8005952:	e9cd 2300 	strd	r2, r3, [sp]
 8005956:	4a10      	ldr	r2, [pc, #64]	; (8005998 <f_Temperature+0x9c>)
 8005958:	2164      	movs	r1, #100	; 0x64
 800595a:	480c      	ldr	r0, [pc, #48]	; (800598c <f_Temperature+0x90>)
 800595c:	f00d fe0e 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_tmp,sizeof(str_tmp),10);
 8005960:	230a      	movs	r3, #10
 8005962:	2264      	movs	r2, #100	; 0x64
 8005964:	4909      	ldr	r1, [pc, #36]	; (800598c <f_Temperature+0x90>)
 8005966:	480a      	ldr	r0, [pc, #40]	; (8005990 <f_Temperature+0x94>)
 8005968:	f00b fc9a 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_tmp, 0, sizeof(str_tmp));
 800596c:	2264      	movs	r2, #100	; 0x64
 800596e:	2100      	movs	r1, #0
 8005970:	4806      	ldr	r0, [pc, #24]	; (800598c <f_Temperature+0x90>)
 8005972:	f00d f903 	bl	8012b7c <memset>
			flag_temp=0;
 8005976:	4b03      	ldr	r3, [pc, #12]	; (8005984 <f_Temperature+0x88>)
 8005978:	2200      	movs	r2, #0
 800597a:	701a      	strb	r2, [r3, #0]
}
 800597c:	bf00      	nop
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	2000037e 	.word	0x2000037e
 8005988:	080160a8 	.word	0x080160a8
 800598c:	20000c3c 	.word	0x20000c3c
 8005990:	20002a24 	.word	0x20002a24
 8005994:	20000c30 	.word	0x20000c30
 8005998:	080160c8 	.word	0x080160c8

0800599c <f_Humidity>:
/*********************************************************** END **************************************************************************/

/*This function use for extracting Humidity data */
void f_Humidity(void)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af02      	add	r7, sp, #8
	if(flag_humi)
 80059a2:	4b20      	ldr	r3, [pc, #128]	; (8005a24 <f_Humidity+0x88>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d038      	beq.n	8005a1c <f_Humidity+0x80>
	{
		if(BSP_HSENSOR_Init())
 80059aa:	f001 ffdb 	bl	8007964 <BSP_HSENSOR_Init>
 80059ae:	4603      	mov	r3, r0
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d010      	beq.n	80059d6 <f_Humidity+0x3a>
		{
			snprintf(str_humi,100,"\033\143 Not Taking HUMIDITY Data \r");
 80059b4:	4a1c      	ldr	r2, [pc, #112]	; (8005a28 <f_Humidity+0x8c>)
 80059b6:	2164      	movs	r1, #100	; 0x64
 80059b8:	481c      	ldr	r0, [pc, #112]	; (8005a2c <f_Humidity+0x90>)
 80059ba:	f00d fddf 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 80059be:	230a      	movs	r3, #10
 80059c0:	2264      	movs	r2, #100	; 0x64
 80059c2:	491a      	ldr	r1, [pc, #104]	; (8005a2c <f_Humidity+0x90>)
 80059c4:	481a      	ldr	r0, [pc, #104]	; (8005a30 <f_Humidity+0x94>)
 80059c6:	f00b fc6b 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 80059ca:	2264      	movs	r2, #100	; 0x64
 80059cc:	2100      	movs	r1, #0
 80059ce:	4817      	ldr	r0, [pc, #92]	; (8005a2c <f_Humidity+0x90>)
 80059d0:	f00d f8d4 	bl	8012b7c <memset>
			memset(str_humi, 0, sizeof(str_humi));
			flag_humi=0;
		}

	}
}
 80059d4:	e022      	b.n	8005a1c <f_Humidity+0x80>
			humi_value = BSP_HSENSOR_ReadHumidity();
 80059d6:	f001 ffe5 	bl	80079a4 <BSP_HSENSOR_ReadHumidity>
 80059da:	eef0 7a40 	vmov.f32	s15, s0
 80059de:	4b15      	ldr	r3, [pc, #84]	; (8005a34 <f_Humidity+0x98>)
 80059e0:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_humi,100,"\033\143 HUMIDITY = %.2f \r", humi_value);
 80059e4:	4b13      	ldr	r3, [pc, #76]	; (8005a34 <f_Humidity+0x98>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7fa fdad 	bl	8000548 <__aeabi_f2d>
 80059ee:	4602      	mov	r2, r0
 80059f0:	460b      	mov	r3, r1
 80059f2:	e9cd 2300 	strd	r2, r3, [sp]
 80059f6:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <f_Humidity+0x9c>)
 80059f8:	2164      	movs	r1, #100	; 0x64
 80059fa:	480c      	ldr	r0, [pc, #48]	; (8005a2c <f_Humidity+0x90>)
 80059fc:	f00d fdbe 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_humi,sizeof(str_humi),10);
 8005a00:	230a      	movs	r3, #10
 8005a02:	2264      	movs	r2, #100	; 0x64
 8005a04:	4909      	ldr	r1, [pc, #36]	; (8005a2c <f_Humidity+0x90>)
 8005a06:	480a      	ldr	r0, [pc, #40]	; (8005a30 <f_Humidity+0x94>)
 8005a08:	f00b fc4a 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_humi, 0, sizeof(str_humi));
 8005a0c:	2264      	movs	r2, #100	; 0x64
 8005a0e:	2100      	movs	r1, #0
 8005a10:	4806      	ldr	r0, [pc, #24]	; (8005a2c <f_Humidity+0x90>)
 8005a12:	f00d f8b3 	bl	8012b7c <memset>
			flag_humi=0;
 8005a16:	4b03      	ldr	r3, [pc, #12]	; (8005a24 <f_Humidity+0x88>)
 8005a18:	2200      	movs	r2, #0
 8005a1a:	701a      	strb	r2, [r3, #0]
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}
 8005a22:	bf00      	nop
 8005a24:	2000037f 	.word	0x2000037f
 8005a28:	080160e4 	.word	0x080160e4
 8005a2c:	20000ca0 	.word	0x20000ca0
 8005a30:	20002a24 	.word	0x20002a24
 8005a34:	20000c34 	.word	0x20000c34
 8005a38:	08016104 	.word	0x08016104

08005a3c <f_Pressure>:
/*********************************************************** END **************************************************************************/

/************************************* This function use for extracting Pressure data *****************************************************/
void f_Pressure(void)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b082      	sub	sp, #8
 8005a40:	af02      	add	r7, sp, #8
	if(flag_pre)
 8005a42:	4b20      	ldr	r3, [pc, #128]	; (8005ac4 <f_Pressure+0x88>)
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d038      	beq.n	8005abc <f_Pressure+0x80>
	{
		if(BSP_PSENSOR_Init())
 8005a4a:	f001 fffd 	bl	8007a48 <BSP_PSENSOR_Init>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d010      	beq.n	8005a76 <f_Pressure+0x3a>
		{
			snprintf(str_pre,100,"\033\143 Not Taking PRESSURE Data \r");
 8005a54:	4a1c      	ldr	r2, [pc, #112]	; (8005ac8 <f_Pressure+0x8c>)
 8005a56:	2164      	movs	r1, #100	; 0x64
 8005a58:	481c      	ldr	r0, [pc, #112]	; (8005acc <f_Pressure+0x90>)
 8005a5a:	f00d fd8f 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8005a5e:	230a      	movs	r3, #10
 8005a60:	2264      	movs	r2, #100	; 0x64
 8005a62:	491a      	ldr	r1, [pc, #104]	; (8005acc <f_Pressure+0x90>)
 8005a64:	481a      	ldr	r0, [pc, #104]	; (8005ad0 <f_Pressure+0x94>)
 8005a66:	f00b fc1b 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 8005a6a:	2264      	movs	r2, #100	; 0x64
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4817      	ldr	r0, [pc, #92]	; (8005acc <f_Pressure+0x90>)
 8005a70:	f00d f884 	bl	8012b7c <memset>
			flag_pre=0;
		}

	}

}
 8005a74:	e022      	b.n	8005abc <f_Pressure+0x80>
			pre_value = BSP_PSENSOR_ReadPressure();
 8005a76:	f002 f807 	bl	8007a88 <BSP_PSENSOR_ReadPressure>
 8005a7a:	eef0 7a40 	vmov.f32	s15, s0
 8005a7e:	4b15      	ldr	r3, [pc, #84]	; (8005ad4 <f_Pressure+0x98>)
 8005a80:	edc3 7a00 	vstr	s15, [r3]
			snprintf(str_pre,100,"\033\143 PRESSURE = %.2f \r", pre_value);
 8005a84:	4b13      	ldr	r3, [pc, #76]	; (8005ad4 <f_Pressure+0x98>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fa fd5d 	bl	8000548 <__aeabi_f2d>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	460b      	mov	r3, r1
 8005a92:	e9cd 2300 	strd	r2, r3, [sp]
 8005a96:	4a10      	ldr	r2, [pc, #64]	; (8005ad8 <f_Pressure+0x9c>)
 8005a98:	2164      	movs	r1, #100	; 0x64
 8005a9a:	480c      	ldr	r0, [pc, #48]	; (8005acc <f_Pressure+0x90>)
 8005a9c:	f00d fd6e 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_pre,sizeof(str_pre),10);
 8005aa0:	230a      	movs	r3, #10
 8005aa2:	2264      	movs	r2, #100	; 0x64
 8005aa4:	4909      	ldr	r1, [pc, #36]	; (8005acc <f_Pressure+0x90>)
 8005aa6:	480a      	ldr	r0, [pc, #40]	; (8005ad0 <f_Pressure+0x94>)
 8005aa8:	f00b fbfa 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_pre, 0, sizeof(str_pre));
 8005aac:	2264      	movs	r2, #100	; 0x64
 8005aae:	2100      	movs	r1, #0
 8005ab0:	4806      	ldr	r0, [pc, #24]	; (8005acc <f_Pressure+0x90>)
 8005ab2:	f00d f863 	bl	8012b7c <memset>
			flag_pre=0;
 8005ab6:	4b03      	ldr	r3, [pc, #12]	; (8005ac4 <f_Pressure+0x88>)
 8005ab8:	2200      	movs	r2, #0
 8005aba:	701a      	strb	r2, [r3, #0]
}
 8005abc:	bf00      	nop
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000380 	.word	0x20000380
 8005ac8:	0801611c 	.word	0x0801611c
 8005acc:	20000d04 	.word	0x20000d04
 8005ad0:	20002a24 	.word	0x20002a24
 8005ad4:	20000c38 	.word	0x20000c38
 8005ad8:	0801613c 	.word	0x0801613c

08005adc <f_ACCELEROMETER>:
/*********************************************************** END **************************************************************************/

/********************************************** This function use for extracting ACCELEROMETER data ***************************************/
void f_ACCELEROMETER(void)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af02      	add	r7, sp, #8
	if(flag_acce)
 8005ae2:	4b22      	ldr	r3, [pc, #136]	; (8005b6c <f_ACCELEROMETER+0x90>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d03c      	beq.n	8005b64 <f_ACCELEROMETER+0x88>
	{
		if(BSP_ACCELERO_Init())
 8005aea:	f001 fe8b 	bl	8007804 <BSP_ACCELERO_Init>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d013      	beq.n	8005b1c <f_ACCELEROMETER+0x40>
		{
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8005af4:	481e      	ldr	r0, [pc, #120]	; (8005b70 <f_ACCELEROMETER+0x94>)
 8005af6:	f001 fec3 	bl	8007880 <BSP_ACCELERO_AccGetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8005afa:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <f_ACCELEROMETER+0x98>)
 8005afc:	2164      	movs	r1, #100	; 0x64
 8005afe:	481e      	ldr	r0, [pc, #120]	; (8005b78 <f_ACCELEROMETER+0x9c>)
 8005b00:	f00d fd3c 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005b04:	230a      	movs	r3, #10
 8005b06:	2264      	movs	r2, #100	; 0x64
 8005b08:	491b      	ldr	r1, [pc, #108]	; (8005b78 <f_ACCELEROMETER+0x9c>)
 8005b0a:	481c      	ldr	r0, [pc, #112]	; (8005b7c <f_ACCELEROMETER+0xa0>)
 8005b0c:	f00b fbc8 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005b10:	2264      	movs	r2, #100	; 0x64
 8005b12:	2100      	movs	r1, #0
 8005b14:	4818      	ldr	r0, [pc, #96]	; (8005b78 <f_ACCELEROMETER+0x9c>)
 8005b16:	f00d f831 	bl	8012b7c <memset>
			flag_acce = 0;
		}

	}

}
 8005b1a:	e023      	b.n	8005b64 <f_ACCELEROMETER+0x88>
			BSP_ACCELERO_AccGetXYZ(pDataXYZ);
 8005b1c:	4814      	ldr	r0, [pc, #80]	; (8005b70 <f_ACCELEROMETER+0x94>)
 8005b1e:	f001 feaf 	bl	8007880 <BSP_ACCELERO_AccGetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 8005b22:	4b13      	ldr	r3, [pc, #76]	; (8005b70 <f_ACCELEROMETER+0x94>)
 8005b24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <f_ACCELEROMETER+0x94>)
 8005b2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <f_ACCELEROMETER+0x94>)
 8005b34:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b38:	9301      	str	r3, [sp, #4]
 8005b3a:	9200      	str	r2, [sp, #0]
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	4a10      	ldr	r2, [pc, #64]	; (8005b80 <f_ACCELEROMETER+0xa4>)
 8005b40:	2164      	movs	r1, #100	; 0x64
 8005b42:	480d      	ldr	r0, [pc, #52]	; (8005b78 <f_ACCELEROMETER+0x9c>)
 8005b44:	f00d fd1a 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005b48:	230a      	movs	r3, #10
 8005b4a:	2264      	movs	r2, #100	; 0x64
 8005b4c:	490a      	ldr	r1, [pc, #40]	; (8005b78 <f_ACCELEROMETER+0x9c>)
 8005b4e:	480b      	ldr	r0, [pc, #44]	; (8005b7c <f_ACCELEROMETER+0xa0>)
 8005b50:	f00b fba6 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005b54:	2264      	movs	r2, #100	; 0x64
 8005b56:	2100      	movs	r1, #0
 8005b58:	4807      	ldr	r0, [pc, #28]	; (8005b78 <f_ACCELEROMETER+0x9c>)
 8005b5a:	f00d f80f 	bl	8012b7c <memset>
			flag_acce = 0;
 8005b5e:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <f_ACCELEROMETER+0x90>)
 8005b60:	2200      	movs	r2, #0
 8005b62:	701a      	strb	r2, [r3, #0]
}
 8005b64:	bf00      	nop
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	20000381 	.word	0x20000381
 8005b70:	20000e30 	.word	0x20000e30
 8005b74:	08016154 	.word	0x08016154
 8005b78:	20000dcc 	.word	0x20000dcc
 8005b7c:	20002a24 	.word	0x20002a24
 8005b80:	08016180 	.word	0x08016180

08005b84 <f_GYRO>:
/*********************************************************** END **************************************************************************/

/************************************************* This function use for extracting GYRO data *********************************************/
void f_GYRO(void)
{
 8005b84:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005b88:	b086      	sub	sp, #24
 8005b8a:	af06      	add	r7, sp, #24
	if(flag_gyro)
 8005b8c:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <f_GYRO+0xac>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d049      	beq.n	8005c28 <f_GYRO+0xa4>
	{
		if(BSP_GYRO_Init())
 8005b94:	f001 fe8c 	bl	80078b0 <BSP_GYRO_Init>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d013      	beq.n	8005bc6 <f_GYRO+0x42>
		{
			BSP_GYRO_GetXYZ(pfData);
 8005b9e:	4825      	ldr	r0, [pc, #148]	; (8005c34 <f_GYRO+0xb0>)
 8005ba0:	f001 fec8 	bl	8007934 <BSP_GYRO_GetXYZ>

			snprintf(str_gyro,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8005ba4:	4a24      	ldr	r2, [pc, #144]	; (8005c38 <f_GYRO+0xb4>)
 8005ba6:	2164      	movs	r1, #100	; 0x64
 8005ba8:	4824      	ldr	r0, [pc, #144]	; (8005c3c <f_GYRO+0xb8>)
 8005baa:	f00d fce7 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 8005bae:	230a      	movs	r3, #10
 8005bb0:	2264      	movs	r2, #100	; 0x64
 8005bb2:	4922      	ldr	r1, [pc, #136]	; (8005c3c <f_GYRO+0xb8>)
 8005bb4:	4822      	ldr	r0, [pc, #136]	; (8005c40 <f_GYRO+0xbc>)
 8005bb6:	f00b fb73 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 8005bba:	2264      	movs	r2, #100	; 0x64
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	481f      	ldr	r0, [pc, #124]	; (8005c3c <f_GYRO+0xb8>)
 8005bc0:	f00c ffdc 	bl	8012b7c <memset>
			memset(str_gyro, 0, sizeof(str_gyro));
			flag_gyro = 0;
		}
	}

}
 8005bc4:	e030      	b.n	8005c28 <f_GYRO+0xa4>
			BSP_GYRO_GetXYZ(pfData);
 8005bc6:	481b      	ldr	r0, [pc, #108]	; (8005c34 <f_GYRO+0xb0>)
 8005bc8:	f001 feb4 	bl	8007934 <BSP_GYRO_GetXYZ>
			snprintf(str_gyro,100,"\033\143 X-axis = %.2f      Y-axis = %.2f      Z-axis = %.2f \r", pfData[0],pfData[1],pfData[2]);
 8005bcc:	4b19      	ldr	r3, [pc, #100]	; (8005c34 <f_GYRO+0xb0>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f7fa fcb9 	bl	8000548 <__aeabi_f2d>
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	460d      	mov	r5, r1
 8005bda:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <f_GYRO+0xb0>)
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	4618      	mov	r0, r3
 8005be0:	f7fa fcb2 	bl	8000548 <__aeabi_f2d>
 8005be4:	4680      	mov	r8, r0
 8005be6:	4689      	mov	r9, r1
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <f_GYRO+0xb0>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fa fcab 	bl	8000548 <__aeabi_f2d>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005bfa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8005bfe:	e9cd 4500 	strd	r4, r5, [sp]
 8005c02:	4a10      	ldr	r2, [pc, #64]	; (8005c44 <f_GYRO+0xc0>)
 8005c04:	2164      	movs	r1, #100	; 0x64
 8005c06:	480d      	ldr	r0, [pc, #52]	; (8005c3c <f_GYRO+0xb8>)
 8005c08:	f00d fcb8 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_gyro,sizeof(str_gyro),10);
 8005c0c:	230a      	movs	r3, #10
 8005c0e:	2264      	movs	r2, #100	; 0x64
 8005c10:	490a      	ldr	r1, [pc, #40]	; (8005c3c <f_GYRO+0xb8>)
 8005c12:	480b      	ldr	r0, [pc, #44]	; (8005c40 <f_GYRO+0xbc>)
 8005c14:	f00b fb44 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_gyro, 0, sizeof(str_gyro));
 8005c18:	2264      	movs	r2, #100	; 0x64
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	4807      	ldr	r0, [pc, #28]	; (8005c3c <f_GYRO+0xb8>)
 8005c1e:	f00c ffad 	bl	8012b7c <memset>
			flag_gyro = 0;
 8005c22:	4b03      	ldr	r3, [pc, #12]	; (8005c30 <f_GYRO+0xac>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	701a      	strb	r2, [r3, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c30:	20000382 	.word	0x20000382
 8005c34:	20000e38 	.word	0x20000e38
 8005c38:	08016154 	.word	0x08016154
 8005c3c:	20000d68 	.word	0x20000d68
 8005c40:	20002a24 	.word	0x20002a24
 8005c44:	080161b4 	.word	0x080161b4

08005c48 <f_MAGNETOMETERR>:
/*********************************************************** END **************************************************************************/

/******************************************This function use for extracting MAGNETOMETER data *********************************************/
void f_MAGNETOMETERR(void)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b082      	sub	sp, #8
 8005c4c:	af02      	add	r7, sp, #8
	if(flag_mag)
 8005c4e:	4b22      	ldr	r3, [pc, #136]	; (8005cd8 <f_MAGNETOMETERR+0x90>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d03c      	beq.n	8005cd0 <f_MAGNETOMETERR+0x88>
	{
		if(BSP_MAGNETO_Init())
 8005c56:	f001 feb3 	bl	80079c0 <BSP_MAGNETO_Init>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d013      	beq.n	8005c88 <f_MAGNETOMETERR+0x40>
		{
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 8005c60:	481e      	ldr	r0, [pc, #120]	; (8005cdc <f_MAGNETOMETERR+0x94>)
 8005c62:	f001 fed9 	bl	8007a18 <BSP_MAGNETO_GetXYZ>

			snprintf(str_acc1,100,"\033\143 X-axis Error	Y-axis Error	Z-axis Error \r");
 8005c66:	4a1e      	ldr	r2, [pc, #120]	; (8005ce0 <f_MAGNETOMETERR+0x98>)
 8005c68:	2164      	movs	r1, #100	; 0x64
 8005c6a:	481e      	ldr	r0, [pc, #120]	; (8005ce4 <f_MAGNETOMETERR+0x9c>)
 8005c6c:	f00d fc86 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005c70:	230a      	movs	r3, #10
 8005c72:	2264      	movs	r2, #100	; 0x64
 8005c74:	491b      	ldr	r1, [pc, #108]	; (8005ce4 <f_MAGNETOMETERR+0x9c>)
 8005c76:	481c      	ldr	r0, [pc, #112]	; (8005ce8 <f_MAGNETOMETERR+0xa0>)
 8005c78:	f00b fb12 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005c7c:	2264      	movs	r2, #100	; 0x64
 8005c7e:	2100      	movs	r1, #0
 8005c80:	4818      	ldr	r0, [pc, #96]	; (8005ce4 <f_MAGNETOMETERR+0x9c>)
 8005c82:	f00c ff7b 	bl	8012b7c <memset>
			flag_mag = 0;
		}

	}

}
 8005c86:	e023      	b.n	8005cd0 <f_MAGNETOMETERR+0x88>
			BSP_MAGNETO_GetXYZ(pDataXYZ);
 8005c88:	4814      	ldr	r0, [pc, #80]	; (8005cdc <f_MAGNETOMETERR+0x94>)
 8005c8a:	f001 fec5 	bl	8007a18 <BSP_MAGNETO_GetXYZ>
			snprintf(str_acc1,100,"\033\143 X-axis = %d      Y-axis = %d      Z-axis = %d \r", pDataXYZ[0],pDataXYZ[1],pDataXYZ[2]);
 8005c8e:	4b13      	ldr	r3, [pc, #76]	; (8005cdc <f_MAGNETOMETERR+0x94>)
 8005c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c94:	4619      	mov	r1, r3
 8005c96:	4b11      	ldr	r3, [pc, #68]	; (8005cdc <f_MAGNETOMETERR+0x94>)
 8005c98:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	4b0f      	ldr	r3, [pc, #60]	; (8005cdc <f_MAGNETOMETERR+0x94>)
 8005ca0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	9200      	str	r2, [sp, #0]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	4a10      	ldr	r2, [pc, #64]	; (8005cec <f_MAGNETOMETERR+0xa4>)
 8005cac:	2164      	movs	r1, #100	; 0x64
 8005cae:	480d      	ldr	r0, [pc, #52]	; (8005ce4 <f_MAGNETOMETERR+0x9c>)
 8005cb0:	f00d fc64 	bl	801357c <sniprintf>
			HAL_UART_Transmit(&huart1,( uint8_t * )str_acc1,sizeof(str_acc1),10);
 8005cb4:	230a      	movs	r3, #10
 8005cb6:	2264      	movs	r2, #100	; 0x64
 8005cb8:	490a      	ldr	r1, [pc, #40]	; (8005ce4 <f_MAGNETOMETERR+0x9c>)
 8005cba:	480b      	ldr	r0, [pc, #44]	; (8005ce8 <f_MAGNETOMETERR+0xa0>)
 8005cbc:	f00b faf0 	bl	80112a0 <HAL_UART_Transmit>
			memset(str_acc1, 0, sizeof(str_acc1));
 8005cc0:	2264      	movs	r2, #100	; 0x64
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4807      	ldr	r0, [pc, #28]	; (8005ce4 <f_MAGNETOMETERR+0x9c>)
 8005cc6:	f00c ff59 	bl	8012b7c <memset>
			flag_mag = 0;
 8005cca:	4b03      	ldr	r3, [pc, #12]	; (8005cd8 <f_MAGNETOMETERR+0x90>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	20000383 	.word	0x20000383
 8005cdc:	20000e30 	.word	0x20000e30
 8005ce0:	08016154 	.word	0x08016154
 8005ce4:	20000dcc 	.word	0x20000dcc
 8005ce8:	20002a24 	.word	0x20002a24
 8005cec:	08016180 	.word	0x08016180

08005cf0 <f_cur_mov>:
/*********************************************************** END **************************************************************************/


/*********************************************************** This function use for Cursor Move ********************************************/
void f_cur_mov(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
	f_INT_count++;
 8005cf4:	4b0d      	ldr	r3, [pc, #52]	; (8005d2c <f_cur_mov+0x3c>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	; (8005d2c <f_cur_mov+0x3c>)
 8005cfe:	701a      	strb	r2, [r3, #0]

	if(f_INT_count <= 16)
 8005d00:	4b0a      	ldr	r3, [pc, #40]	; (8005d2c <f_cur_mov+0x3c>)
 8005d02:	781b      	ldrb	r3, [r3, #0]
 8005d04:	2b10      	cmp	r3, #16
 8005d06:	d806      	bhi.n	8005d16 <f_cur_mov+0x26>
	{
		HAL_UART_Transmit(&huart1,com_dn,sizeof(com_dn),10);
 8005d08:	230a      	movs	r3, #10
 8005d0a:	2204      	movs	r2, #4
 8005d0c:	4908      	ldr	r1, [pc, #32]	; (8005d30 <f_cur_mov+0x40>)
 8005d0e:	4809      	ldr	r0, [pc, #36]	; (8005d34 <f_cur_mov+0x44>)
 8005d10:	f00b fac6 	bl	80112a0 <HAL_UART_Transmit>
	{
		HAL_UART_Transmit(&huart1,com_up,sizeof(com_up),10);
		f_INT_count=1;
	}

}
 8005d14:	e008      	b.n	8005d28 <f_cur_mov+0x38>
		HAL_UART_Transmit(&huart1,com_up,sizeof(com_up),10);
 8005d16:	230a      	movs	r3, #10
 8005d18:	2206      	movs	r2, #6
 8005d1a:	4907      	ldr	r1, [pc, #28]	; (8005d38 <f_cur_mov+0x48>)
 8005d1c:	4805      	ldr	r0, [pc, #20]	; (8005d34 <f_cur_mov+0x44>)
 8005d1e:	f00b fabf 	bl	80112a0 <HAL_UART_Transmit>
		f_INT_count=1;
 8005d22:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <f_cur_mov+0x3c>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	701a      	strb	r2, [r3, #0]
}
 8005d28:	bf00      	nop
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	2000037d 	.word	0x2000037d
 8005d30:	20000354 	.word	0x20000354
 8005d34:	20002a24 	.word	0x20002a24
 8005d38:	2000034c 	.word	0x2000034c

08005d3c <f_cur_sel>:
/*********************************************************** END **************************************************************************/

/*********************************************** This function use for Cursor Select ******************************************************/
void f_cur_sel(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
	switch(f_INT_count)
 8005d40:	4b40      	ldr	r3, [pc, #256]	; (8005e44 <f_cur_sel+0x108>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	3b01      	subs	r3, #1
 8005d46:	2b0f      	cmp	r3, #15
 8005d48:	d877      	bhi.n	8005e3a <f_cur_sel+0xfe>
 8005d4a:	a201      	add	r2, pc, #4	; (adr r2, 8005d50 <f_cur_sel+0x14>)
 8005d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d50:	08005d91 	.word	0x08005d91
 8005d54:	08005d99 	.word	0x08005d99
 8005d58:	08005da1 	.word	0x08005da1
 8005d5c:	08005da9 	.word	0x08005da9
 8005d60:	08005db1 	.word	0x08005db1
 8005d64:	08005db9 	.word	0x08005db9
 8005d68:	08005dc1 	.word	0x08005dc1
 8005d6c:	08005dc9 	.word	0x08005dc9
 8005d70:	08005dd1 	.word	0x08005dd1
 8005d74:	08005dd9 	.word	0x08005dd9
 8005d78:	08005de7 	.word	0x08005de7
 8005d7c:	08005df5 	.word	0x08005df5
 8005d80:	08005e03 	.word	0x08005e03
 8005d84:	08005e11 	.word	0x08005e11
 8005d88:	08005e1f 	.word	0x08005e1f
 8005d8c:	08005e2d 	.word	0x08005e2d
	{
		case 1:
		{
			s_case = f_One;
 8005d90:	4b2d      	ldr	r3, [pc, #180]	; (8005e48 <f_cur_sel+0x10c>)
 8005d92:	2231      	movs	r2, #49	; 0x31
 8005d94:	701a      	strb	r2, [r3, #0]
			break;
 8005d96:	e050      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 2:
		{
			s_case =  f_Two;
 8005d98:	4b2b      	ldr	r3, [pc, #172]	; (8005e48 <f_cur_sel+0x10c>)
 8005d9a:	2232      	movs	r2, #50	; 0x32
 8005d9c:	701a      	strb	r2, [r3, #0]
			break;
 8005d9e:	e04c      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 3:
		{
			s_case = f_Three;
 8005da0:	4b29      	ldr	r3, [pc, #164]	; (8005e48 <f_cur_sel+0x10c>)
 8005da2:	2233      	movs	r2, #51	; 0x33
 8005da4:	701a      	strb	r2, [r3, #0]
			break;
 8005da6:	e048      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 4:
		{
			s_case = f_Four;
 8005da8:	4b27      	ldr	r3, [pc, #156]	; (8005e48 <f_cur_sel+0x10c>)
 8005daa:	2234      	movs	r2, #52	; 0x34
 8005dac:	701a      	strb	r2, [r3, #0]
			break;
 8005dae:	e044      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 5:
		{
			s_case = f_Five;
 8005db0:	4b25      	ldr	r3, [pc, #148]	; (8005e48 <f_cur_sel+0x10c>)
 8005db2:	2235      	movs	r2, #53	; 0x35
 8005db4:	701a      	strb	r2, [r3, #0]
			break;
 8005db6:	e040      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 6:
		{
			s_case = f_Six;
 8005db8:	4b23      	ldr	r3, [pc, #140]	; (8005e48 <f_cur_sel+0x10c>)
 8005dba:	2236      	movs	r2, #54	; 0x36
 8005dbc:	701a      	strb	r2, [r3, #0]
			break;
 8005dbe:	e03c      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 7:
		{
			s_case = f_Seven;
 8005dc0:	4b21      	ldr	r3, [pc, #132]	; (8005e48 <f_cur_sel+0x10c>)
 8005dc2:	2237      	movs	r2, #55	; 0x37
 8005dc4:	701a      	strb	r2, [r3, #0]
			break;
 8005dc6:	e038      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 8:
		{
			s_case	= f_Eight;
 8005dc8:	4b1f      	ldr	r3, [pc, #124]	; (8005e48 <f_cur_sel+0x10c>)
 8005dca:	2238      	movs	r2, #56	; 0x38
 8005dcc:	701a      	strb	r2, [r3, #0]
			break;
 8005dce:	e034      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 9:
		{
			s_case	= f_Nine;
 8005dd0:	4b1d      	ldr	r3, [pc, #116]	; (8005e48 <f_cur_sel+0x10c>)
 8005dd2:	2239      	movs	r2, #57	; 0x39
 8005dd4:	701a      	strb	r2, [r3, #0]
			break;
 8005dd6:	e030      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 10:
		{

			s_case	= f_a;
 8005dd8:	4b1b      	ldr	r3, [pc, #108]	; (8005e48 <f_cur_sel+0x10c>)
 8005dda:	2261      	movs	r2, #97	; 0x61
 8005ddc:	701a      	strb	r2, [r3, #0]
			s_case = f_A;
 8005dde:	4b1a      	ldr	r3, [pc, #104]	; (8005e48 <f_cur_sel+0x10c>)
 8005de0:	2241      	movs	r2, #65	; 0x41
 8005de2:	701a      	strb	r2, [r3, #0]
			break;
 8005de4:	e029      	b.n	8005e3a <f_cur_sel+0xfe>
		}
		case 11:
		{
			s_case	= f_b;
 8005de6:	4b18      	ldr	r3, [pc, #96]	; (8005e48 <f_cur_sel+0x10c>)
 8005de8:	2262      	movs	r2, #98	; 0x62
 8005dea:	701a      	strb	r2, [r3, #0]
			s_case = f_B;
 8005dec:	4b16      	ldr	r3, [pc, #88]	; (8005e48 <f_cur_sel+0x10c>)
 8005dee:	2242      	movs	r2, #66	; 0x42
 8005df0:	701a      	strb	r2, [r3, #0]
			break;
 8005df2:	e022      	b.n	8005e3a <f_cur_sel+0xfe>

		}
		case 12:
		{
			s_case	= f_c;
 8005df4:	4b14      	ldr	r3, [pc, #80]	; (8005e48 <f_cur_sel+0x10c>)
 8005df6:	2263      	movs	r2, #99	; 0x63
 8005df8:	701a      	strb	r2, [r3, #0]
			s_case = f_C;
 8005dfa:	4b13      	ldr	r3, [pc, #76]	; (8005e48 <f_cur_sel+0x10c>)
 8005dfc:	2243      	movs	r2, #67	; 0x43
 8005dfe:	701a      	strb	r2, [r3, #0]
			break;
 8005e00:	e01b      	b.n	8005e3a <f_cur_sel+0xfe>

		}
		case 13:
		{
			s_case	= f_d;
 8005e02:	4b11      	ldr	r3, [pc, #68]	; (8005e48 <f_cur_sel+0x10c>)
 8005e04:	2264      	movs	r2, #100	; 0x64
 8005e06:	701a      	strb	r2, [r3, #0]
			s_case = f_D;
 8005e08:	4b0f      	ldr	r3, [pc, #60]	; (8005e48 <f_cur_sel+0x10c>)
 8005e0a:	2244      	movs	r2, #68	; 0x44
 8005e0c:	701a      	strb	r2, [r3, #0]
			break;
 8005e0e:	e014      	b.n	8005e3a <f_cur_sel+0xfe>

		}
		case 14:
		{
			s_case	= f_e;
 8005e10:	4b0d      	ldr	r3, [pc, #52]	; (8005e48 <f_cur_sel+0x10c>)
 8005e12:	2265      	movs	r2, #101	; 0x65
 8005e14:	701a      	strb	r2, [r3, #0]
			s_case = f_E;
 8005e16:	4b0c      	ldr	r3, [pc, #48]	; (8005e48 <f_cur_sel+0x10c>)
 8005e18:	2245      	movs	r2, #69	; 0x45
 8005e1a:	701a      	strb	r2, [r3, #0]
			break;
 8005e1c:	e00d      	b.n	8005e3a <f_cur_sel+0xfe>

		}
		case 15:
		{
			s_case	= f_f;
 8005e1e:	4b0a      	ldr	r3, [pc, #40]	; (8005e48 <f_cur_sel+0x10c>)
 8005e20:	2266      	movs	r2, #102	; 0x66
 8005e22:	701a      	strb	r2, [r3, #0]
			s_case = f_F;
 8005e24:	4b08      	ldr	r3, [pc, #32]	; (8005e48 <f_cur_sel+0x10c>)
 8005e26:	2246      	movs	r2, #70	; 0x46
 8005e28:	701a      	strb	r2, [r3, #0]
			break;
 8005e2a:	e006      	b.n	8005e3a <f_cur_sel+0xfe>

		}
		case 16:
		{
			s_case	= f_g;
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <f_cur_sel+0x10c>)
 8005e2e:	2267      	movs	r2, #103	; 0x67
 8005e30:	701a      	strb	r2, [r3, #0]
			s_case = f_G;
 8005e32:	4b05      	ldr	r3, [pc, #20]	; (8005e48 <f_cur_sel+0x10c>)
 8005e34:	2247      	movs	r2, #71	; 0x47
 8005e36:	701a      	strb	r2, [r3, #0]
			break;
 8005e38:	bf00      	nop
		}



	}
}
 8005e3a:	bf00      	nop
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr
 8005e44:	2000037d 	.word	0x2000037d
 8005e48:	20000e4b 	.word	0x20000e4b

08005e4c <f_Menu>:
/*********************************************************** END **************************************************************************/
/****************************************** This function use for Printing MENU ***********************************************************/
int f_Menu(void)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),100);
 8005e50:	2364      	movs	r3, #100	; 0x64
 8005e52:	f240 125f 	movw	r2, #351	; 0x15f
 8005e56:	4908      	ldr	r1, [pc, #32]	; (8005e78 <f_Menu+0x2c>)
 8005e58:	4808      	ldr	r0, [pc, #32]	; (8005e7c <f_Menu+0x30>)
 8005e5a:	f00b fa21 	bl	80112a0 <HAL_UART_Transmit>
	f_INT_count=1;
 8005e5e:	4b08      	ldr	r3, [pc, #32]	; (8005e80 <f_Menu+0x34>)
 8005e60:	2201      	movs	r2, #1
 8005e62:	701a      	strb	r2, [r3, #0]
	sw_flag = 1;
 8005e64:	4b07      	ldr	r3, [pc, #28]	; (8005e84 <f_Menu+0x38>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	701a      	strb	r2, [r3, #0]
	s_case = 0;
 8005e6a:	4b07      	ldr	r3, [pc, #28]	; (8005e88 <f_Menu+0x3c>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]

	return 0;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	200001ec 	.word	0x200001ec
 8005e7c:	20002a24 	.word	0x20002a24
 8005e80:	2000037d 	.word	0x2000037d
 8005e84:	20000e4a 	.word	0x20000e4a
 8005e88:	20000e4b 	.word	0x20000e4b

08005e8c <f_Switch>:
/*********************************************************** END **************************************************************************/

/************************************************ This function use for Switch  ***********************************************************/
int f_Switch(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0

	f_reading = HAL_GPIO_ReadPin (GPIOC, f_sw13_Pin);
 8005e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005e94:	485d      	ldr	r0, [pc, #372]	; (800600c <f_Switch+0x180>)
 8005e96:	f008 f989 	bl	800e1ac <HAL_GPIO_ReadPin>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	4b5c      	ldr	r3, [pc, #368]	; (8006010 <f_Switch+0x184>)
 8005ea0:	801a      	strh	r2, [r3, #0]

	if (f_reading != f_lastButtonState)
 8005ea2:	4b5b      	ldr	r3, [pc, #364]	; (8006010 <f_Switch+0x184>)
 8005ea4:	881b      	ldrh	r3, [r3, #0]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	4b5a      	ldr	r3, [pc, #360]	; (8006014 <f_Switch+0x188>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d009      	beq.n	8005ec4 <f_Switch+0x38>
	{
		// reset the debouncing timer
		f_lastDebounceTime = (__HAL_TIM_GET_COUNTER(&htim17)/10);//millis
 8005eb0:	4b59      	ldr	r3, [pc, #356]	; (8006018 <f_Switch+0x18c>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb6:	4a59      	ldr	r2, [pc, #356]	; (800601c <f_Switch+0x190>)
 8005eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ebc:	08db      	lsrs	r3, r3, #3
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	4b57      	ldr	r3, [pc, #348]	; (8006020 <f_Switch+0x194>)
 8005ec2:	801a      	strh	r2, [r3, #0]
	}
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10) - f_lastDebounceTime) > f_debounceDelay)
 8005ec4:	4b54      	ldr	r3, [pc, #336]	; (8006018 <f_Switch+0x18c>)
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	4a54      	ldr	r2, [pc, #336]	; (800601c <f_Switch+0x190>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	08db      	lsrs	r3, r3, #3
 8005ed2:	4a53      	ldr	r2, [pc, #332]	; (8006020 <f_Switch+0x194>)
 8005ed4:	8812      	ldrh	r2, [r2, #0]
 8005ed6:	1a9b      	subs	r3, r3, r2
 8005ed8:	4a52      	ldr	r2, [pc, #328]	; (8006024 <f_Switch+0x198>)
 8005eda:	8812      	ldrh	r2, [r2, #0]
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d90f      	bls.n	8005f00 <f_Switch+0x74>
	{
	  // if the button state has changed:
	  if (f_reading != f_buttonState)
 8005ee0:	4b51      	ldr	r3, [pc, #324]	; (8006028 <f_Switch+0x19c>)
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	4b4a      	ldr	r3, [pc, #296]	; (8006010 <f_Switch+0x184>)
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d008      	beq.n	8005f00 <f_Switch+0x74>
	  {
		f_buttonState = f_reading;
 8005eee:	4b48      	ldr	r3, [pc, #288]	; (8006010 <f_Switch+0x184>)
 8005ef0:	881b      	ldrh	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2da      	uxtb	r2, r3
 8005efc:	4b4a      	ldr	r3, [pc, #296]	; (8006028 <f_Switch+0x19c>)
 8005efe:	701a      	strb	r2, [r3, #0]
	  }
	}
	//printf("button stage : %d\n",f_buttonState)  //when switch is pressed


	if ((f_buttonState == 0) && (f_flag2 == 0))
 8005f00:	4b49      	ldr	r3, [pc, #292]	; (8006028 <f_Switch+0x19c>)
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	f083 0301 	eor.w	r3, r3, #1
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d01c      	beq.n	8005f48 <f_Switch+0xbc>
 8005f0e:	4b47      	ldr	r3, [pc, #284]	; (800602c <f_Switch+0x1a0>)
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	f083 0301 	eor.w	r3, r3, #1
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d015      	beq.n	8005f48 <f_Switch+0xbc>
	{
	  f_presstime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //press time in millis
 8005f1c:	4b3e      	ldr	r3, [pc, #248]	; (8006018 <f_Switch+0x18c>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f22:	4a3e      	ldr	r2, [pc, #248]	; (800601c <f_Switch+0x190>)
 8005f24:	fba2 2303 	umull	r2, r3, r2, r3
 8005f28:	08db      	lsrs	r3, r3, #3
 8005f2a:	b29a      	uxth	r2, r3
 8005f2c:	4b40      	ldr	r3, [pc, #256]	; (8006030 <f_Switch+0x1a4>)
 8005f2e:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 0;
 8005f30:	4b40      	ldr	r3, [pc, #256]	; (8006034 <f_Switch+0x1a8>)
 8005f32:	2200      	movs	r2, #0
 8005f34:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 1;
 8005f36:	4b3d      	ldr	r3, [pc, #244]	; (800602c <f_Switch+0x1a0>)
 8005f38:	2201      	movs	r2, #1
 8005f3a:	701a      	strb	r2, [r3, #0]
	  f_tapCounter++; //tap counter will increase by 1
 8005f3c:	4b3e      	ldr	r3, [pc, #248]	; (8006038 <f_Switch+0x1ac>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	3301      	adds	r3, #1
 8005f42:	b2da      	uxtb	r2, r3
 8005f44:	4b3c      	ldr	r3, [pc, #240]	; (8006038 <f_Switch+0x1ac>)
 8005f46:	701a      	strb	r2, [r3, #0]
	  //printf("Button Press : %d\n",f_tapCounter);
	}


	//when button is released
	if ((f_buttonState == 1) && (f_flag1 == 0))
 8005f48:	4b37      	ldr	r3, [pc, #220]	; (8006028 <f_Switch+0x19c>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01e      	beq.n	8005f8e <f_Switch+0x102>
 8005f50:	4b38      	ldr	r3, [pc, #224]	; (8006034 <f_Switch+0x1a8>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	f083 0301 	eor.w	r3, r3, #1
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d017      	beq.n	8005f8e <f_Switch+0x102>
	{
	  f_releasetime = (__HAL_TIM_GET_COUNTER(&htim17)/10); //release time in millis
 8005f5e:	4b2e      	ldr	r3, [pc, #184]	; (8006018 <f_Switch+0x18c>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f64:	4a2d      	ldr	r2, [pc, #180]	; (800601c <f_Switch+0x190>)
 8005f66:	fba2 2303 	umull	r2, r3, r2, r3
 8005f6a:	08db      	lsrs	r3, r3, #3
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	4b33      	ldr	r3, [pc, #204]	; (800603c <f_Switch+0x1b0>)
 8005f70:	801a      	strh	r2, [r3, #0]
	  f_flag1 = 1;
 8005f72:	4b30      	ldr	r3, [pc, #192]	; (8006034 <f_Switch+0x1a8>)
 8005f74:	2201      	movs	r2, #1
 8005f76:	701a      	strb	r2, [r3, #0]
	  f_flag2 = 0;
 8005f78:	4b2c      	ldr	r3, [pc, #176]	; (800602c <f_Switch+0x1a0>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	701a      	strb	r2, [r3, #0]
	  f_timediff = f_releasetime - f_presstime; //the time gap between press and release
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	; (800603c <f_Switch+0x1b0>)
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	4b2b      	ldr	r3, [pc, #172]	; (8006030 <f_Switch+0x1a4>)
 8005f84:	881b      	ldrh	r3, [r3, #0]
 8005f86:	1ad3      	subs	r3, r2, r3
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	4b2d      	ldr	r3, [pc, #180]	; (8006040 <f_Switch+0x1b4>)
 8005f8c:	801a      	strh	r2, [r3, #0]
	  //printf(" Time gap between Button press and release : %d\n",f_timediff);
	}


  //wait for some time and if sw is in release position
	if (((__HAL_TIM_GET_COUNTER(&htim17)/10)- f_presstime) > 400 && f_buttonState == 1)
 8005f8e:	4b22      	ldr	r3, [pc, #136]	; (8006018 <f_Switch+0x18c>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f94:	4a21      	ldr	r2, [pc, #132]	; (800601c <f_Switch+0x190>)
 8005f96:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9a:	08db      	lsrs	r3, r3, #3
 8005f9c:	4a24      	ldr	r2, [pc, #144]	; (8006030 <f_Switch+0x1a4>)
 8005f9e:	8812      	ldrh	r2, [r2, #0]
 8005fa0:	1a9b      	subs	r3, r3, r2
 8005fa2:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005fa6:	d929      	bls.n	8005ffc <f_Switch+0x170>
 8005fa8:	4b1f      	ldr	r3, [pc, #124]	; (8006028 <f_Switch+0x19c>)
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d025      	beq.n	8005ffc <f_Switch+0x170>
	{
		  if (f_tapCounter == 1) //if tap counter is 1
 8005fb0:	4b21      	ldr	r3, [pc, #132]	; (8006038 <f_Switch+0x1ac>)
 8005fb2:	781b      	ldrb	r3, [r3, #0]
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d114      	bne.n	8005fe2 <f_Switch+0x156>
		  {
			if (f_timediff >= 400) //if time diff is larger than 400 then its a hold
 8005fb8:	4b21      	ldr	r3, [pc, #132]	; (8006040 <f_Switch+0x1b4>)
 8005fba:	881b      	ldrh	r3, [r3, #0]
 8005fbc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005fc0:	d305      	bcc.n	8005fce <f_Switch+0x142>
			{
				printf("Long press\n");
 8005fc2:	4820      	ldr	r0, [pc, #128]	; (8006044 <f_Switch+0x1b8>)
 8005fc4:	f00d fad2 	bl	801356c <puts>
				f_cur_sel();
 8005fc8:	f7ff feb8 	bl	8005d3c <f_cur_sel>
 8005fcc:	e013      	b.n	8005ff6 <f_Switch+0x16a>
			}
			else //if timediff is less than 400 then its a single tap
			{
				printf("single tap\n");
 8005fce:	481e      	ldr	r0, [pc, #120]	; (8006048 <f_Switch+0x1bc>)
 8005fd0:	f00d facc 	bl	801356c <puts>
				if(sw_flag)
 8005fd4:	4b1d      	ldr	r3, [pc, #116]	; (800604c <f_Switch+0x1c0>)
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00c      	beq.n	8005ff6 <f_Switch+0x16a>
				{
					f_cur_mov();
 8005fdc:	f7ff fe88 	bl	8005cf0 <f_cur_mov>
 8005fe0:	e009      	b.n	8005ff6 <f_Switch+0x16a>
				}
			}
		  }
		  else if (f_tapCounter == 2 ) //if tapcounter is 2
 8005fe2:	4b15      	ldr	r3, [pc, #84]	; (8006038 <f_Switch+0x1ac>)
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d105      	bne.n	8005ff6 <f_Switch+0x16a>
		  {
				printf("double tap\n");
 8005fea:	4819      	ldr	r0, [pc, #100]	; (8006050 <f_Switch+0x1c4>)
 8005fec:	f00d fabe 	bl	801356c <puts>
				s_case = f_escape;
 8005ff0:	4b18      	ldr	r3, [pc, #96]	; (8006054 <f_Switch+0x1c8>)
 8005ff2:	221b      	movs	r2, #27
 8005ff4:	701a      	strb	r2, [r3, #0]
		  }

	  f_tapCounter = 0;
 8005ff6:	4b10      	ldr	r3, [pc, #64]	; (8006038 <f_Switch+0x1ac>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	701a      	strb	r2, [r3, #0]
	}

	f_lastButtonState = f_reading;
 8005ffc:	4b04      	ldr	r3, [pc, #16]	; (8006010 <f_Switch+0x184>)
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	4b04      	ldr	r3, [pc, #16]	; (8006014 <f_Switch+0x188>)
 8006004:	601a      	str	r2, [r3, #0]

	return 0;
 8006006:	2300      	movs	r3, #0
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	48000800 	.word	0x48000800
 8006010:	20000e48 	.word	0x20000e48
 8006014:	20000378 	.word	0x20000378
 8006018:	200029d4 	.word	0x200029d4
 800601c:	cccccccd 	.word	0xcccccccd
 8006020:	20000e44 	.word	0x20000e44
 8006024:	20000376 	.word	0x20000376
 8006028:	2000037c 	.word	0x2000037c
 800602c:	2000297c 	.word	0x2000297c
 8006030:	20002a20 	.word	0x20002a20
 8006034:	20002aad 	.word	0x20002aad
 8006038:	20000e46 	.word	0x20000e46
 800603c:	20002b80 	.word	0x20002b80
 8006040:	2000297a 	.word	0x2000297a
 8006044:	080161f0 	.word	0x080161f0
 8006048:	080161fc 	.word	0x080161fc
 800604c:	20000e4a 	.word	0x20000e4a
 8006050:	08016208 	.word	0x08016208
 8006054:	20000e4b 	.word	0x20000e4b

08006058 <f_Invalid>:
/*********************************************************** END **************************************************************************/


/******************************************** This function use for Printing Invalid ******************************************************/
int f_Invalid(void)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	af00      	add	r7, sp, #0

	if(flag_error)
 800605c:	4b09      	ldr	r3, [pc, #36]	; (8006084 <f_Invalid+0x2c>)
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d00c      	beq.n	800607e <f_Invalid+0x26>
	{
		HAL_UART_Transmit_IT(&huart1,(uint8_t*)Invalid,strlen(Invalid));
 8006064:	4808      	ldr	r0, [pc, #32]	; (8006088 <f_Invalid+0x30>)
 8006066:	f7fa f8b3 	bl	80001d0 <strlen>
 800606a:	4603      	mov	r3, r0
 800606c:	b29b      	uxth	r3, r3
 800606e:	461a      	mov	r2, r3
 8006070:	4905      	ldr	r1, [pc, #20]	; (8006088 <f_Invalid+0x30>)
 8006072:	4806      	ldr	r0, [pc, #24]	; (800608c <f_Invalid+0x34>)
 8006074:	f00b f9a8 	bl	80113c8 <HAL_UART_Transmit_IT>
		flag_error = 0;
 8006078:	4b02      	ldr	r3, [pc, #8]	; (8006084 <f_Invalid+0x2c>)
 800607a:	2200      	movs	r2, #0
 800607c:	701a      	strb	r2, [r3, #0]
	}

return 0;
 800607e:	2300      	movs	r3, #0
}
 8006080:	4618      	mov	r0, r3
 8006082:	bd80      	pop	{r7, pc}
 8006084:	2000038e 	.word	0x2000038e
 8006088:	20000358 	.word	0x20000358
 800608c:	20002a24 	.word	0x20002a24

08006090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006094:	f007 fbc4 	bl	800d820 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006098:	f000 fa3a 	bl	8006510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800609c:	f000 fb7a 	bl	8006794 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80060a0:	f000 fb48 	bl	8006734 <MX_USART1_UART_Init>
  MX_UART4_Init();
 80060a4:	f000 fb16 	bl	80066d4 <MX_UART4_Init>
  MX_I2C2_Init();
 80060a8:	f000 fa84 	bl	80065b4 <MX_I2C2_Init>
  MX_TIM16_Init();
 80060ac:	f000 fac2 	bl	8006634 <MX_TIM16_Init>
  MX_TIM17_Init();
 80060b0:	f000 fae8 	bl	8006684 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

	// Start timer
	HAL_TIM_Base_Start_IT(&htim16);
 80060b4:	48cf      	ldr	r0, [pc, #828]	; (80063f4 <main+0x364>)
 80060b6:	f00a fe35 	bl	8010d24 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start(&htim17);
 80060ba:	48cf      	ldr	r0, [pc, #828]	; (80063f8 <main+0x368>)
 80060bc:	f00a fdca 	bl	8010c54 <HAL_TIM_Base_Start>

	BSP_TSENSOR_Init();
 80060c0:	f001 fcf0 	bl	8007aa4 <BSP_TSENSOR_Init>
	BSP_HSENSOR_Init();
 80060c4:	f001 fc4e 	bl	8007964 <BSP_HSENSOR_Init>
	BSP_PSENSOR_Init();
 80060c8:	f001 fcbe 	bl	8007a48 <BSP_PSENSOR_Init>
	BSP_ACCELERO_Init();
 80060cc:	f001 fb9a 	bl	8007804 <BSP_ACCELERO_Init>
	BSP_GYRO_Init();
 80060d0:	f001 fbee 	bl	80078b0 <BSP_GYRO_Init>
	BSP_MAGNETO_Init();
 80060d4:	f001 fc74 	bl	80079c0 <BSP_MAGNETO_Init>
	VL53L0X_PROXIMITY_Init();
 80060d8:	f7ff fb98 	bl	800580c <VL53L0X_PROXIMITY_Init>
	while (TT4_Init() != SUCCESS);
 80060dc:	bf00      	nop
 80060de:	f7fe fd37 	bl	8004b50 <TT4_Init>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d1fa      	bne.n	80060de <main+0x4e>

	HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 80060e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060ec:	222e      	movs	r2, #46	; 0x2e
 80060ee:	49c3      	ldr	r1, [pc, #780]	; (80063fc <main+0x36c>)
 80060f0:	48c3      	ldr	r0, [pc, #780]	; (8006400 <main+0x370>)
 80060f2:	f00b f8d5 	bl	80112a0 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 80060f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80060fa:	2219      	movs	r2, #25
 80060fc:	49c1      	ldr	r1, [pc, #772]	; (8006404 <main+0x374>)
 80060fe:	48c0      	ldr	r0, [pc, #768]	; (8006400 <main+0x370>)
 8006100:	f00b f8ce 	bl	80112a0 <HAL_UART_Transmit>

	s_case = f_escape;
 8006104:	4bc0      	ldr	r3, [pc, #768]	; (8006408 <main+0x378>)
 8006106:	221b      	movs	r2, #27
 8006108:	701a      	strb	r2, [r3, #0]

	HAL_UART_Receive_IT(&huart1,rxData,1);
 800610a:	2201      	movs	r2, #1
 800610c:	49bf      	ldr	r1, [pc, #764]	; (800640c <main+0x37c>)
 800610e:	48bc      	ldr	r0, [pc, #752]	; (8006400 <main+0x370>)
 8006110:	f00b f9c8 	bl	80114a4 <HAL_UART_Receive_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  f_Switch();
 8006114:	f7ff feba 	bl	8005e8c <f_Switch>

	  /*  This if condition is use for UART1 (Interrupt based) */
		if(newMsg)
 8006118:	4bbd      	ldr	r3, [pc, #756]	; (8006410 <main+0x380>)
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d020      	beq.n	8006162 <main+0xd2>
		{

			size = strlen(rxBuffer);
 8006120:	48bc      	ldr	r0, [pc, #752]	; (8006414 <main+0x384>)
 8006122:	f7fa f855 	bl	80001d0 <strlen>
 8006126:	4603      	mov	r3, r0
 8006128:	b2da      	uxtb	r2, r3
 800612a:	4bbb      	ldr	r3, [pc, #748]	; (8006418 <main+0x388>)
 800612c:	701a      	strb	r2, [r3, #0]

			if(size == f_size)
 800612e:	4bba      	ldr	r3, [pc, #744]	; (8006418 <main+0x388>)
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	2b01      	cmp	r3, #1
 8006134:	d10a      	bne.n	800614c <main+0xbc>
			{
				s_case= rxBuffer[0];
 8006136:	4bb7      	ldr	r3, [pc, #732]	; (8006414 <main+0x384>)
 8006138:	781a      	ldrb	r2, [r3, #0]
 800613a:	4bb3      	ldr	r3, [pc, #716]	; (8006408 <main+0x378>)
 800613c:	701a      	strb	r2, [r3, #0]
				printf("%d\n",s_case);
 800613e:	4bb2      	ldr	r3, [pc, #712]	; (8006408 <main+0x378>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	4619      	mov	r1, r3
 8006144:	48b5      	ldr	r0, [pc, #724]	; (800641c <main+0x38c>)
 8006146:	f00d f98b 	bl	8013460 <iprintf>
 800614a:	e002      	b.n	8006152 <main+0xc2>
			}
			else
			{
				s_case = f_error;
 800614c:	4bae      	ldr	r3, [pc, #696]	; (8006408 <main+0x378>)
 800614e:	2248      	movs	r2, #72	; 0x48
 8006150:	701a      	strb	r2, [r3, #0]
			}

			memset(rxBuffer, 0, sizeof(rxBuffer));
 8006152:	2205      	movs	r2, #5
 8006154:	2100      	movs	r1, #0
 8006156:	48af      	ldr	r0, [pc, #700]	; (8006414 <main+0x384>)
 8006158:	f00c fd10 	bl	8012b7c <memset>
			newMsg=0;
 800615c:	4bac      	ldr	r3, [pc, #688]	; (8006410 <main+0x380>)
 800615e:	2200      	movs	r2, #0
 8006160:	701a      	strb	r2, [r3, #0]
		}



		/* This switch case is using for calling Sensor functions */
		switch(s_case)
 8006162:	4ba9      	ldr	r3, [pc, #676]	; (8006408 <main+0x378>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	2b67      	cmp	r3, #103	; 0x67
 8006168:	f200 81c6 	bhi.w	80064f8 <main+0x468>
 800616c:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <main+0xe4>)
 800616e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006172:	bf00      	nop
 8006174:	080064ff 	.word	0x080064ff
 8006178:	080064f9 	.word	0x080064f9
 800617c:	080064f9 	.word	0x080064f9
 8006180:	080064f9 	.word	0x080064f9
 8006184:	080064f9 	.word	0x080064f9
 8006188:	080064f9 	.word	0x080064f9
 800618c:	080064f9 	.word	0x080064f9
 8006190:	080064f9 	.word	0x080064f9
 8006194:	080064f9 	.word	0x080064f9
 8006198:	080064f9 	.word	0x080064f9
 800619c:	080064f9 	.word	0x080064f9
 80061a0:	080064f9 	.word	0x080064f9
 80061a4:	080064f9 	.word	0x080064f9
 80061a8:	080064f9 	.word	0x080064f9
 80061ac:	080064f9 	.word	0x080064f9
 80061b0:	080064f9 	.word	0x080064f9
 80061b4:	080064f9 	.word	0x080064f9
 80061b8:	080064f9 	.word	0x080064f9
 80061bc:	080064f9 	.word	0x080064f9
 80061c0:	080064f9 	.word	0x080064f9
 80061c4:	080064f9 	.word	0x080064f9
 80061c8:	080064f9 	.word	0x080064f9
 80061cc:	080064f9 	.word	0x080064f9
 80061d0:	080064f9 	.word	0x080064f9
 80061d4:	080064f9 	.word	0x080064f9
 80061d8:	080064f9 	.word	0x080064f9
 80061dc:	080064f9 	.word	0x080064f9
 80061e0:	080064ed 	.word	0x080064ed
 80061e4:	080064f9 	.word	0x080064f9
 80061e8:	080064f9 	.word	0x080064f9
 80061ec:	080064f9 	.word	0x080064f9
 80061f0:	080064f9 	.word	0x080064f9
 80061f4:	080064f9 	.word	0x080064f9
 80061f8:	080064f9 	.word	0x080064f9
 80061fc:	080064f9 	.word	0x080064f9
 8006200:	080064f9 	.word	0x080064f9
 8006204:	080064f9 	.word	0x080064f9
 8006208:	080064f9 	.word	0x080064f9
 800620c:	080064f9 	.word	0x080064f9
 8006210:	080064f9 	.word	0x080064f9
 8006214:	080064f9 	.word	0x080064f9
 8006218:	080064f9 	.word	0x080064f9
 800621c:	080064f9 	.word	0x080064f9
 8006220:	080064f9 	.word	0x080064f9
 8006224:	080064f9 	.word	0x080064f9
 8006228:	080064f9 	.word	0x080064f9
 800622c:	080064f9 	.word	0x080064f9
 8006230:	080064f9 	.word	0x080064f9
 8006234:	080064f9 	.word	0x080064f9
 8006238:	08006315 	.word	0x08006315
 800623c:	08006321 	.word	0x08006321
 8006240:	0800632d 	.word	0x0800632d
 8006244:	08006339 	.word	0x08006339
 8006248:	08006345 	.word	0x08006345
 800624c:	08006351 	.word	0x08006351
 8006250:	0800635d 	.word	0x0800635d
 8006254:	08006369 	.word	0x08006369
 8006258:	0800637d 	.word	0x0800637d
 800625c:	080064f9 	.word	0x080064f9
 8006260:	080064f9 	.word	0x080064f9
 8006264:	080064f9 	.word	0x080064f9
 8006268:	080064f9 	.word	0x080064f9
 800626c:	080064f9 	.word	0x080064f9
 8006270:	080064f9 	.word	0x080064f9
 8006274:	080064f9 	.word	0x080064f9
 8006278:	080063a5 	.word	0x080063a5
 800627c:	080063cd 	.word	0x080063cd
 8006280:	08006429 	.word	0x08006429
 8006284:	08006453 	.word	0x08006453
 8006288:	0800647f 	.word	0x0800647f
 800628c:	080064ab 	.word	0x080064ab
 8006290:	080064d7 	.word	0x080064d7
 8006294:	080064f9 	.word	0x080064f9
 8006298:	080064f9 	.word	0x080064f9
 800629c:	080064f9 	.word	0x080064f9
 80062a0:	080064f9 	.word	0x080064f9
 80062a4:	080064f9 	.word	0x080064f9
 80062a8:	080064f9 	.word	0x080064f9
 80062ac:	080064f9 	.word	0x080064f9
 80062b0:	080064f9 	.word	0x080064f9
 80062b4:	080064f9 	.word	0x080064f9
 80062b8:	080064f9 	.word	0x080064f9
 80062bc:	080064f9 	.word	0x080064f9
 80062c0:	080064f9 	.word	0x080064f9
 80062c4:	080064f9 	.word	0x080064f9
 80062c8:	080064f9 	.word	0x080064f9
 80062cc:	080064f9 	.word	0x080064f9
 80062d0:	080064f9 	.word	0x080064f9
 80062d4:	080064f9 	.word	0x080064f9
 80062d8:	080064f9 	.word	0x080064f9
 80062dc:	080064f9 	.word	0x080064f9
 80062e0:	080064f9 	.word	0x080064f9
 80062e4:	080064f9 	.word	0x080064f9
 80062e8:	080064f9 	.word	0x080064f9
 80062ec:	080064f9 	.word	0x080064f9
 80062f0:	080064f9 	.word	0x080064f9
 80062f4:	080064f9 	.word	0x080064f9
 80062f8:	08006391 	.word	0x08006391
 80062fc:	080063b9 	.word	0x080063b9
 8006300:	080063e1 	.word	0x080063e1
 8006304:	0800643d 	.word	0x0800643d
 8006308:	08006469 	.word	0x08006469
 800630c:	08006495 	.word	0x08006495
 8006310:	080064c1 	.word	0x080064c1
			{
				break;
			}
			case f_One:
			{
				sw_flag=0;
 8006314:	4b42      	ldr	r3, [pc, #264]	; (8006420 <main+0x390>)
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
				f_Temperature();
 800631a:	f7ff faef 	bl	80058fc <f_Temperature>
				break;
 800631e:	e0ef      	b.n	8006500 <main+0x470>
			}
			case f_Two:
			{
				sw_flag=0;
 8006320:	4b3f      	ldr	r3, [pc, #252]	; (8006420 <main+0x390>)
 8006322:	2200      	movs	r2, #0
 8006324:	701a      	strb	r2, [r3, #0]
				f_Humidity();
 8006326:	f7ff fb39 	bl	800599c <f_Humidity>
				break;
 800632a:	e0e9      	b.n	8006500 <main+0x470>
			}
			case f_Three:
			{

				sw_flag=0;
 800632c:	4b3c      	ldr	r3, [pc, #240]	; (8006420 <main+0x390>)
 800632e:	2200      	movs	r2, #0
 8006330:	701a      	strb	r2, [r3, #0]
				f_Pressure();
 8006332:	f7ff fb83 	bl	8005a3c <f_Pressure>
				break;
 8006336:	e0e3      	b.n	8006500 <main+0x470>
			}
			case f_Four:
			{
				sw_flag=0;
 8006338:	4b39      	ldr	r3, [pc, #228]	; (8006420 <main+0x390>)
 800633a:	2200      	movs	r2, #0
 800633c:	701a      	strb	r2, [r3, #0]
				f_ACCELEROMETER();
 800633e:	f7ff fbcd 	bl	8005adc <f_ACCELEROMETER>
				break;
 8006342:	e0dd      	b.n	8006500 <main+0x470>
			}
			case f_Five:
			{
				sw_flag=0;
 8006344:	4b36      	ldr	r3, [pc, #216]	; (8006420 <main+0x390>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
				f_GYRO();
 800634a:	f7ff fc1b 	bl	8005b84 <f_GYRO>
				break;
 800634e:	e0d7      	b.n	8006500 <main+0x470>
			}
			case f_Six:
			{
				sw_flag=0;
 8006350:	4b33      	ldr	r3, [pc, #204]	; (8006420 <main+0x390>)
 8006352:	2200      	movs	r2, #0
 8006354:	701a      	strb	r2, [r3, #0]
				f_MAGNETOMETERR();
 8006356:	f7ff fc77 	bl	8005c48 <f_MAGNETOMETERR>
				break;
 800635a:	e0d1      	b.n	8006500 <main+0x470>
			}
			case f_Seven:
			{
				sw_flag=0;
 800635c:	4b30      	ldr	r3, [pc, #192]	; (8006420 <main+0x390>)
 800635e:	2200      	movs	r2, #0
 8006360:	701a      	strb	r2, [r3, #0]
				Proximity_Test();
 8006362:	f7ff fa25 	bl	80057b0 <Proximity_Test>
				break;
 8006366:	e0cb      	b.n	8006500 <main+0x470>
			}
			case f_Eight:
			{
				sw_flag=0;
 8006368:	4b2d      	ldr	r3, [pc, #180]	; (8006420 <main+0x390>)
 800636a:	2200      	movs	r2, #0
 800636c:	701a      	strb	r2, [r3, #0]
				NFC_examples[0].DemoFunc();
 800636e:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <main+0x394>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4798      	blx	r3
				s_case=0;
 8006374:	4b24      	ldr	r3, [pc, #144]	; (8006408 <main+0x378>)
 8006376:	2200      	movs	r2, #0
 8006378:	701a      	strb	r2, [r3, #0]
				break;
 800637a:	e0c1      	b.n	8006500 <main+0x470>
			}
			case f_Nine:
			{
				sw_flag=0;
 800637c:	4b28      	ldr	r3, [pc, #160]	; (8006420 <main+0x390>)
 800637e:	2200      	movs	r2, #0
 8006380:	701a      	strb	r2, [r3, #0]
				NFC_examples[1].DemoFunc();
 8006382:	4b28      	ldr	r3, [pc, #160]	; (8006424 <main+0x394>)
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4798      	blx	r3
				s_case=0;
 8006388:	4b1f      	ldr	r3, [pc, #124]	; (8006408 <main+0x378>)
 800638a:	2200      	movs	r2, #0
 800638c:	701a      	strb	r2, [r3, #0]
				break;
 800638e:	e0b7      	b.n	8006500 <main+0x470>
			}
			case f_a :
			{
				sw_flag=0;
 8006390:	4b23      	ldr	r3, [pc, #140]	; (8006420 <main+0x390>)
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
				NFC_examples[2].DemoFunc();
 8006396:	4b23      	ldr	r3, [pc, #140]	; (8006424 <main+0x394>)
 8006398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639a:	4798      	blx	r3
				s_case=0;
 800639c:	4b1a      	ldr	r3, [pc, #104]	; (8006408 <main+0x378>)
 800639e:	2200      	movs	r2, #0
 80063a0:	701a      	strb	r2, [r3, #0]
				break;
 80063a2:	e0ad      	b.n	8006500 <main+0x470>
			}
			case f_A :
			{
				sw_flag=0;
 80063a4:	4b1e      	ldr	r3, [pc, #120]	; (8006420 <main+0x390>)
 80063a6:	2200      	movs	r2, #0
 80063a8:	701a      	strb	r2, [r3, #0]
				NFC_examples[2].DemoFunc();
 80063aa:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <main+0x394>)
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	4798      	blx	r3
				s_case=0;
 80063b0:	4b15      	ldr	r3, [pc, #84]	; (8006408 <main+0x378>)
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
				break;
 80063b6:	e0a3      	b.n	8006500 <main+0x470>
			}
			case f_b :
			{
				sw_flag=0;
 80063b8:	4b19      	ldr	r3, [pc, #100]	; (8006420 <main+0x390>)
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
				NFC_examples[3].DemoFunc();
 80063be:	4b19      	ldr	r3, [pc, #100]	; (8006424 <main+0x394>)
 80063c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c2:	4798      	blx	r3
				s_case=0;
 80063c4:	4b10      	ldr	r3, [pc, #64]	; (8006408 <main+0x378>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	701a      	strb	r2, [r3, #0]
				break;
 80063ca:	e099      	b.n	8006500 <main+0x470>
			}
			case f_B :
			{
				sw_flag=0;
 80063cc:	4b14      	ldr	r3, [pc, #80]	; (8006420 <main+0x390>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	701a      	strb	r2, [r3, #0]
				NFC_examples[3].DemoFunc();
 80063d2:	4b14      	ldr	r3, [pc, #80]	; (8006424 <main+0x394>)
 80063d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063d6:	4798      	blx	r3
				s_case=0;
 80063d8:	4b0b      	ldr	r3, [pc, #44]	; (8006408 <main+0x378>)
 80063da:	2200      	movs	r2, #0
 80063dc:	701a      	strb	r2, [r3, #0]
				break;
 80063de:	e08f      	b.n	8006500 <main+0x470>
			}
			case f_c :
			{
				sw_flag=0;
 80063e0:	4b0f      	ldr	r3, [pc, #60]	; (8006420 <main+0x390>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	701a      	strb	r2, [r3, #0]
				NFC_examples[4].DemoFunc();
 80063e6:	4b0f      	ldr	r3, [pc, #60]	; (8006424 <main+0x394>)
 80063e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ea:	4798      	blx	r3
				s_case=0;
 80063ec:	4b06      	ldr	r3, [pc, #24]	; (8006408 <main+0x378>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	701a      	strb	r2, [r3, #0]
				break;
 80063f2:	e085      	b.n	8006500 <main+0x470>
 80063f4:	20002b34 	.word	0x20002b34
 80063f8:	200029d4 	.word	0x200029d4
 80063fc:	200001a0 	.word	0x200001a0
 8006400:	20002a24 	.word	0x20002a24
 8006404:	200001d0 	.word	0x200001d0
 8006408:	20000e4b 	.word	0x20000e4b
 800640c:	20002978 	.word	0x20002978
 8006410:	20000e4c 	.word	0x20000e4c
 8006414:	20002aa8 	.word	0x20002aa8
 8006418:	20000e4e 	.word	0x20000e4e
 800641c:	08016214 	.word	0x08016214
 8006420:	20000e4a 	.word	0x20000e4a
 8006424:	200004a8 	.word	0x200004a8
			}
			case f_C :
			{
				sw_flag=0;
 8006428:	4b36      	ldr	r3, [pc, #216]	; (8006504 <main+0x474>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
				NFC_examples[4].DemoFunc();
 800642e:	4b36      	ldr	r3, [pc, #216]	; (8006508 <main+0x478>)
 8006430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006432:	4798      	blx	r3
				s_case=0;
 8006434:	4b35      	ldr	r3, [pc, #212]	; (800650c <main+0x47c>)
 8006436:	2200      	movs	r2, #0
 8006438:	701a      	strb	r2, [r3, #0]
				break;
 800643a:	e061      	b.n	8006500 <main+0x470>
			}
			case f_d :
			{
				sw_flag=0;
 800643c:	4b31      	ldr	r3, [pc, #196]	; (8006504 <main+0x474>)
 800643e:	2200      	movs	r2, #0
 8006440:	701a      	strb	r2, [r3, #0]
				NFC_examples[5].DemoFunc();
 8006442:	4b31      	ldr	r3, [pc, #196]	; (8006508 <main+0x478>)
 8006444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006448:	4798      	blx	r3
				s_case=0;
 800644a:	4b30      	ldr	r3, [pc, #192]	; (800650c <main+0x47c>)
 800644c:	2200      	movs	r2, #0
 800644e:	701a      	strb	r2, [r3, #0]
				break;
 8006450:	e056      	b.n	8006500 <main+0x470>
			}
			case f_D :
			{
				sw_flag=0;
 8006452:	4b2c      	ldr	r3, [pc, #176]	; (8006504 <main+0x474>)
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
				NFC_examples[5].DemoFunc();
 8006458:	4b2b      	ldr	r3, [pc, #172]	; (8006508 <main+0x478>)
 800645a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800645e:	4798      	blx	r3
				s_case=0;
 8006460:	4b2a      	ldr	r3, [pc, #168]	; (800650c <main+0x47c>)
 8006462:	2200      	movs	r2, #0
 8006464:	701a      	strb	r2, [r3, #0]
				break;
 8006466:	e04b      	b.n	8006500 <main+0x470>
			}
			case f_e :
			{
				sw_flag=0;
 8006468:	4b26      	ldr	r3, [pc, #152]	; (8006504 <main+0x474>)
 800646a:	2200      	movs	r2, #0
 800646c:	701a      	strb	r2, [r3, #0]
				NFC_examples[6].DemoFunc();
 800646e:	4b26      	ldr	r3, [pc, #152]	; (8006508 <main+0x478>)
 8006470:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006474:	4798      	blx	r3
				s_case=0;
 8006476:	4b25      	ldr	r3, [pc, #148]	; (800650c <main+0x47c>)
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]
				break;
 800647c:	e040      	b.n	8006500 <main+0x470>
			}
			case f_E :
			{
				sw_flag=0;
 800647e:	4b21      	ldr	r3, [pc, #132]	; (8006504 <main+0x474>)
 8006480:	2200      	movs	r2, #0
 8006482:	701a      	strb	r2, [r3, #0]
				NFC_examples[6].DemoFunc();
 8006484:	4b20      	ldr	r3, [pc, #128]	; (8006508 <main+0x478>)
 8006486:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800648a:	4798      	blx	r3
				s_case=0;
 800648c:	4b1f      	ldr	r3, [pc, #124]	; (800650c <main+0x47c>)
 800648e:	2200      	movs	r2, #0
 8006490:	701a      	strb	r2, [r3, #0]
				break;
 8006492:	e035      	b.n	8006500 <main+0x470>
			}
			case f_f :
			{
				sw_flag=0;
 8006494:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <main+0x474>)
 8006496:	2200      	movs	r2, #0
 8006498:	701a      	strb	r2, [r3, #0]
				NFC_examples[7].DemoFunc();
 800649a:	4b1b      	ldr	r3, [pc, #108]	; (8006508 <main+0x478>)
 800649c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80064a0:	4798      	blx	r3
				s_case=0;
 80064a2:	4b1a      	ldr	r3, [pc, #104]	; (800650c <main+0x47c>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]
				break;
 80064a8:	e02a      	b.n	8006500 <main+0x470>
			}
			case f_F :
			{
				sw_flag=0;
 80064aa:	4b16      	ldr	r3, [pc, #88]	; (8006504 <main+0x474>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	701a      	strb	r2, [r3, #0]
				NFC_examples[7].DemoFunc();
 80064b0:	4b15      	ldr	r3, [pc, #84]	; (8006508 <main+0x478>)
 80064b2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80064b6:	4798      	blx	r3
				s_case=0;
 80064b8:	4b14      	ldr	r3, [pc, #80]	; (800650c <main+0x47c>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
				break;
 80064be:	e01f      	b.n	8006500 <main+0x470>
			}
			case f_g :
			{
				sw_flag=0;;
 80064c0:	4b10      	ldr	r3, [pc, #64]	; (8006504 <main+0x474>)
 80064c2:	2200      	movs	r2, #0
 80064c4:	701a      	strb	r2, [r3, #0]
				NFC_examples[8].DemoFunc();
 80064c6:	4b10      	ldr	r3, [pc, #64]	; (8006508 <main+0x478>)
 80064c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064cc:	4798      	blx	r3
				s_case=0;
 80064ce:	4b0f      	ldr	r3, [pc, #60]	; (800650c <main+0x47c>)
 80064d0:	2200      	movs	r2, #0
 80064d2:	701a      	strb	r2, [r3, #0]
				break;
 80064d4:	e014      	b.n	8006500 <main+0x470>
			}
			case f_G :
			{
				sw_flag=0;
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <main+0x474>)
 80064d8:	2200      	movs	r2, #0
 80064da:	701a      	strb	r2, [r3, #0]
				NFC_examples[8].DemoFunc();
 80064dc:	4b0a      	ldr	r3, [pc, #40]	; (8006508 <main+0x478>)
 80064de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064e2:	4798      	blx	r3
				s_case=0;
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <main+0x47c>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
				break;
 80064ea:	e009      	b.n	8006500 <main+0x470>
			}

			case f_escape:
			{
				sw_flag=0;
 80064ec:	4b05      	ldr	r3, [pc, #20]	; (8006504 <main+0x474>)
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
				f_Menu();
 80064f2:	f7ff fcab 	bl	8005e4c <f_Menu>
				break;
 80064f6:	e003      	b.n	8006500 <main+0x470>
			}
			default :
			{
				f_Invalid();
 80064f8:	f7ff fdae 	bl	8006058 <f_Invalid>
 80064fc:	e60a      	b.n	8006114 <main+0x84>
				break;
 80064fe:	bf00      	nop
	  f_Switch();
 8006500:	e608      	b.n	8006114 <main+0x84>
 8006502:	bf00      	nop
 8006504:	20000e4a 	.word	0x20000e4a
 8006508:	200004a8 	.word	0x200004a8
 800650c:	20000e4b 	.word	0x20000e4b

08006510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b096      	sub	sp, #88	; 0x58
 8006514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006516:	f107 0314 	add.w	r3, r7, #20
 800651a:	2244      	movs	r2, #68	; 0x44
 800651c:	2100      	movs	r1, #0
 800651e:	4618      	mov	r0, r3
 8006520:	f00c fb2c 	bl	8012b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006524:	463b      	mov	r3, r7
 8006526:	2200      	movs	r2, #0
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	605a      	str	r2, [r3, #4]
 800652c:	609a      	str	r2, [r3, #8]
 800652e:	60da      	str	r2, [r3, #12]
 8006530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006536:	f009 f825 	bl	800f584 <HAL_PWREx_ControlVoltageScaling>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d001      	beq.n	8006544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006540:	f000 fbe6 	bl	8006d10 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006544:	2310      	movs	r3, #16
 8006546:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006548:	2301      	movs	r3, #1
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800654c:	2300      	movs	r3, #0
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006550:	2360      	movs	r3, #96	; 0x60
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006554:	2302      	movs	r3, #2
 8006556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006558:	2301      	movs	r3, #1
 800655a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800655c:	2301      	movs	r3, #1
 800655e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006560:	2328      	movs	r3, #40	; 0x28
 8006562:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8006564:	2307      	movs	r3, #7
 8006566:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006568:	2302      	movs	r3, #2
 800656a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800656c:	2302      	movs	r3, #2
 800656e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006570:	f107 0314 	add.w	r3, r7, #20
 8006574:	4618      	mov	r0, r3
 8006576:	f009 f85b 	bl	800f630 <HAL_RCC_OscConfig>
 800657a:	4603      	mov	r3, r0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d001      	beq.n	8006584 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8006580:	f000 fbc6 	bl	8006d10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006584:	230f      	movs	r3, #15
 8006586:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006588:	2303      	movs	r3, #3
 800658a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800658c:	2300      	movs	r3, #0
 800658e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006590:	2300      	movs	r3, #0
 8006592:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006594:	2300      	movs	r3, #0
 8006596:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006598:	463b      	mov	r3, r7
 800659a:	2104      	movs	r1, #4
 800659c:	4618      	mov	r0, r3
 800659e:	f009 fc21 	bl	800fde4 <HAL_RCC_ClockConfig>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80065a8:	f000 fbb2 	bl	8006d10 <Error_Handler>
  }
}
 80065ac:	bf00      	nop
 80065ae:	3758      	adds	r7, #88	; 0x58
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80065b8:	4b1b      	ldr	r3, [pc, #108]	; (8006628 <MX_I2C2_Init+0x74>)
 80065ba:	4a1c      	ldr	r2, [pc, #112]	; (800662c <MX_I2C2_Init+0x78>)
 80065bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 80065be:	4b1a      	ldr	r3, [pc, #104]	; (8006628 <MX_I2C2_Init+0x74>)
 80065c0:	4a1b      	ldr	r2, [pc, #108]	; (8006630 <MX_I2C2_Init+0x7c>)
 80065c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80065c4:	4b18      	ldr	r3, [pc, #96]	; (8006628 <MX_I2C2_Init+0x74>)
 80065c6:	2200      	movs	r2, #0
 80065c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80065ca:	4b17      	ldr	r3, [pc, #92]	; (8006628 <MX_I2C2_Init+0x74>)
 80065cc:	2201      	movs	r2, #1
 80065ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80065d0:	4b15      	ldr	r3, [pc, #84]	; (8006628 <MX_I2C2_Init+0x74>)
 80065d2:	2200      	movs	r2, #0
 80065d4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80065d6:	4b14      	ldr	r3, [pc, #80]	; (8006628 <MX_I2C2_Init+0x74>)
 80065d8:	2200      	movs	r2, #0
 80065da:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80065dc:	4b12      	ldr	r3, [pc, #72]	; (8006628 <MX_I2C2_Init+0x74>)
 80065de:	2200      	movs	r2, #0
 80065e0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80065e2:	4b11      	ldr	r3, [pc, #68]	; (8006628 <MX_I2C2_Init+0x74>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80065e8:	4b0f      	ldr	r3, [pc, #60]	; (8006628 <MX_I2C2_Init+0x74>)
 80065ea:	2200      	movs	r2, #0
 80065ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80065ee:	480e      	ldr	r0, [pc, #56]	; (8006628 <MX_I2C2_Init+0x74>)
 80065f0:	f007 fe24 	bl	800e23c <HAL_I2C_Init>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80065fa:	f000 fb89 	bl	8006d10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80065fe:	2100      	movs	r1, #0
 8006600:	4809      	ldr	r0, [pc, #36]	; (8006628 <MX_I2C2_Init+0x74>)
 8006602:	f008 ff19 	bl	800f438 <HAL_I2CEx_ConfigAnalogFilter>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d001      	beq.n	8006610 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800660c:	f000 fb80 	bl	8006d10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006610:	2100      	movs	r1, #0
 8006612:	4805      	ldr	r0, [pc, #20]	; (8006628 <MX_I2C2_Init+0x74>)
 8006614:	f008 ff5b 	bl	800f4ce <HAL_I2CEx_ConfigDigitalFilter>
 8006618:	4603      	mov	r3, r0
 800661a:	2b00      	cmp	r3, #0
 800661c:	d001      	beq.n	8006622 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800661e:	f000 fb77 	bl	8006d10 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006622:	bf00      	nop
 8006624:	bd80      	pop	{r7, pc}
 8006626:	bf00      	nop
 8006628:	20002980 	.word	0x20002980
 800662c:	40005800 	.word	0x40005800
 8006630:	10909cec 	.word	0x10909cec

08006634 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8006638:	4b10      	ldr	r3, [pc, #64]	; (800667c <MX_TIM16_Init+0x48>)
 800663a:	4a11      	ldr	r2, [pc, #68]	; (8006680 <MX_TIM16_Init+0x4c>)
 800663c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 8000-1;
 800663e:	4b0f      	ldr	r3, [pc, #60]	; (800667c <MX_TIM16_Init+0x48>)
 8006640:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006644:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006646:	4b0d      	ldr	r3, [pc, #52]	; (800667c <MX_TIM16_Init+0x48>)
 8006648:	2200      	movs	r2, #0
 800664a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = f_count;
 800664c:	4b0b      	ldr	r3, [pc, #44]	; (800667c <MX_TIM16_Init+0x48>)
 800664e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006652:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006654:	4b09      	ldr	r3, [pc, #36]	; (800667c <MX_TIM16_Init+0x48>)
 8006656:	2200      	movs	r2, #0
 8006658:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800665a:	4b08      	ldr	r3, [pc, #32]	; (800667c <MX_TIM16_Init+0x48>)
 800665c:	2200      	movs	r2, #0
 800665e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006660:	4b06      	ldr	r3, [pc, #24]	; (800667c <MX_TIM16_Init+0x48>)
 8006662:	2200      	movs	r2, #0
 8006664:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8006666:	4805      	ldr	r0, [pc, #20]	; (800667c <MX_TIM16_Init+0x48>)
 8006668:	f00a fa9c 	bl	8010ba4 <HAL_TIM_Base_Init>
 800666c:	4603      	mov	r3, r0
 800666e:	2b00      	cmp	r3, #0
 8006670:	d001      	beq.n	8006676 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8006672:	f000 fb4d 	bl	8006d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8006676:	bf00      	nop
 8006678:	bd80      	pop	{r7, pc}
 800667a:	bf00      	nop
 800667c:	20002b34 	.word	0x20002b34
 8006680:	40014400 	.word	0x40014400

08006684 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8006688:	4b10      	ldr	r3, [pc, #64]	; (80066cc <MX_TIM17_Init+0x48>)
 800668a:	4a11      	ldr	r2, [pc, #68]	; (80066d0 <MX_TIM17_Init+0x4c>)
 800668c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8000-1;
 800668e:	4b0f      	ldr	r3, [pc, #60]	; (80066cc <MX_TIM17_Init+0x48>)
 8006690:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8006694:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006696:	4b0d      	ldr	r3, [pc, #52]	; (80066cc <MX_TIM17_Init+0x48>)
 8006698:	2200      	movs	r2, #0
 800669a:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 800669c:	4b0b      	ldr	r3, [pc, #44]	; (80066cc <MX_TIM17_Init+0x48>)
 800669e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80066a2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066a4:	4b09      	ldr	r3, [pc, #36]	; (80066cc <MX_TIM17_Init+0x48>)
 80066a6:	2200      	movs	r2, #0
 80066a8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80066aa:	4b08      	ldr	r3, [pc, #32]	; (80066cc <MX_TIM17_Init+0x48>)
 80066ac:	2200      	movs	r2, #0
 80066ae:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80066b0:	4b06      	ldr	r3, [pc, #24]	; (80066cc <MX_TIM17_Init+0x48>)
 80066b2:	2200      	movs	r2, #0
 80066b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80066b6:	4805      	ldr	r0, [pc, #20]	; (80066cc <MX_TIM17_Init+0x48>)
 80066b8:	f00a fa74 	bl	8010ba4 <HAL_TIM_Base_Init>
 80066bc:	4603      	mov	r3, r0
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d001      	beq.n	80066c6 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80066c2:	f000 fb25 	bl	8006d10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80066c6:	bf00      	nop
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop
 80066cc:	200029d4 	.word	0x200029d4
 80066d0:	40014800 	.word	0x40014800

080066d4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80066d8:	4b14      	ldr	r3, [pc, #80]	; (800672c <MX_UART4_Init+0x58>)
 80066da:	4a15      	ldr	r2, [pc, #84]	; (8006730 <MX_UART4_Init+0x5c>)
 80066dc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80066de:	4b13      	ldr	r3, [pc, #76]	; (800672c <MX_UART4_Init+0x58>)
 80066e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80066e4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80066e6:	4b11      	ldr	r3, [pc, #68]	; (800672c <MX_UART4_Init+0x58>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80066ec:	4b0f      	ldr	r3, [pc, #60]	; (800672c <MX_UART4_Init+0x58>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80066f2:	4b0e      	ldr	r3, [pc, #56]	; (800672c <MX_UART4_Init+0x58>)
 80066f4:	2200      	movs	r2, #0
 80066f6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80066f8:	4b0c      	ldr	r3, [pc, #48]	; (800672c <MX_UART4_Init+0x58>)
 80066fa:	220c      	movs	r2, #12
 80066fc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80066fe:	4b0b      	ldr	r3, [pc, #44]	; (800672c <MX_UART4_Init+0x58>)
 8006700:	2200      	movs	r2, #0
 8006702:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8006704:	4b09      	ldr	r3, [pc, #36]	; (800672c <MX_UART4_Init+0x58>)
 8006706:	2200      	movs	r2, #0
 8006708:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800670a:	4b08      	ldr	r3, [pc, #32]	; (800672c <MX_UART4_Init+0x58>)
 800670c:	2200      	movs	r2, #0
 800670e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006710:	4b06      	ldr	r3, [pc, #24]	; (800672c <MX_UART4_Init+0x58>)
 8006712:	2200      	movs	r2, #0
 8006714:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8006716:	4805      	ldr	r0, [pc, #20]	; (800672c <MX_UART4_Init+0x58>)
 8006718:	f00a fd74 	bl	8011204 <HAL_UART_Init>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8006722:	f000 faf5 	bl	8006d10 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8006726:	bf00      	nop
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20002ab0 	.word	0x20002ab0
 8006730:	40004c00 	.word	0x40004c00

08006734 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8006738:	4b14      	ldr	r3, [pc, #80]	; (800678c <MX_USART1_UART_Init+0x58>)
 800673a:	4a15      	ldr	r2, [pc, #84]	; (8006790 <MX_USART1_UART_Init+0x5c>)
 800673c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <MX_USART1_UART_Init+0x58>)
 8006740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006744:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8006746:	4b11      	ldr	r3, [pc, #68]	; (800678c <MX_USART1_UART_Init+0x58>)
 8006748:	2200      	movs	r2, #0
 800674a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800674c:	4b0f      	ldr	r3, [pc, #60]	; (800678c <MX_USART1_UART_Init+0x58>)
 800674e:	2200      	movs	r2, #0
 8006750:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8006752:	4b0e      	ldr	r3, [pc, #56]	; (800678c <MX_USART1_UART_Init+0x58>)
 8006754:	2200      	movs	r2, #0
 8006756:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <MX_USART1_UART_Init+0x58>)
 800675a:	220c      	movs	r2, #12
 800675c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <MX_USART1_UART_Init+0x58>)
 8006760:	2200      	movs	r2, #0
 8006762:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8006764:	4b09      	ldr	r3, [pc, #36]	; (800678c <MX_USART1_UART_Init+0x58>)
 8006766:	2200      	movs	r2, #0
 8006768:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800676a:	4b08      	ldr	r3, [pc, #32]	; (800678c <MX_USART1_UART_Init+0x58>)
 800676c:	2200      	movs	r2, #0
 800676e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006770:	4b06      	ldr	r3, [pc, #24]	; (800678c <MX_USART1_UART_Init+0x58>)
 8006772:	2200      	movs	r2, #0
 8006774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8006776:	4805      	ldr	r0, [pc, #20]	; (800678c <MX_USART1_UART_Init+0x58>)
 8006778:	f00a fd44 	bl	8011204 <HAL_UART_Init>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d001      	beq.n	8006786 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8006782:	f000 fac5 	bl	8006d10 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8006786:	bf00      	nop
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	20002a24 	.word	0x20002a24
 8006790:	40013800 	.word	0x40013800

08006794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800679a:	f107 0314 	add.w	r3, r7, #20
 800679e:	2200      	movs	r2, #0
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	605a      	str	r2, [r3, #4]
 80067a4:	609a      	str	r2, [r3, #8]
 80067a6:	60da      	str	r2, [r3, #12]
 80067a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80067aa:	4bbc      	ldr	r3, [pc, #752]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ae:	4abb      	ldr	r2, [pc, #748]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067b0:	f043 0310 	orr.w	r3, r3, #16
 80067b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067b6:	4bb9      	ldr	r3, [pc, #740]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ba:	f003 0310 	and.w	r3, r3, #16
 80067be:	613b      	str	r3, [r7, #16]
 80067c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80067c2:	4bb6      	ldr	r3, [pc, #728]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067c6:	4ab5      	ldr	r2, [pc, #724]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067c8:	f043 0304 	orr.w	r3, r3, #4
 80067cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067ce:	4bb3      	ldr	r3, [pc, #716]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067d2:	f003 0304 	and.w	r3, r3, #4
 80067d6:	60fb      	str	r3, [r7, #12]
 80067d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80067da:	4bb0      	ldr	r3, [pc, #704]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067de:	4aaf      	ldr	r2, [pc, #700]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067e0:	f043 0301 	orr.w	r3, r3, #1
 80067e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067e6:	4bad      	ldr	r3, [pc, #692]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	f003 0301 	and.w	r3, r3, #1
 80067ee:	60bb      	str	r3, [r7, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80067f2:	4baa      	ldr	r3, [pc, #680]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067f6:	4aa9      	ldr	r2, [pc, #676]	; (8006a9c <MX_GPIO_Init+0x308>)
 80067f8:	f043 0302 	orr.w	r3, r3, #2
 80067fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80067fe:	4ba7      	ldr	r3, [pc, #668]	; (8006a9c <MX_GPIO_Init+0x308>)
 8006800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006802:	f003 0302 	and.w	r3, r3, #2
 8006806:	607b      	str	r3, [r7, #4]
 8006808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800680a:	4ba4      	ldr	r3, [pc, #656]	; (8006a9c <MX_GPIO_Init+0x308>)
 800680c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680e:	4aa3      	ldr	r2, [pc, #652]	; (8006a9c <MX_GPIO_Init+0x308>)
 8006810:	f043 0308 	orr.w	r3, r3, #8
 8006814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006816:	4ba1      	ldr	r3, [pc, #644]	; (8006a9c <MX_GPIO_Init+0x308>)
 8006818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800681a:	f003 0308 	and.w	r3, r3, #8
 800681e:	603b      	str	r3, [r7, #0]
 8006820:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8006822:	2200      	movs	r2, #0
 8006824:	f44f 718a 	mov.w	r1, #276	; 0x114
 8006828:	489d      	ldr	r0, [pc, #628]	; (8006aa0 <MX_GPIO_Init+0x30c>)
 800682a:	f007 fcd7 	bl	800e1dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800682e:	2200      	movs	r2, #0
 8006830:	f248 1104 	movw	r1, #33028	; 0x8104
 8006834:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006838:	f007 fcd0 	bl	800e1dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800683c:	2200      	movs	r2, #0
 800683e:	f24f 0114 	movw	r1, #61460	; 0xf014
 8006842:	4898      	ldr	r0, [pc, #608]	; (8006aa4 <MX_GPIO_Init+0x310>)
 8006844:	f007 fcca 	bl	800e1dc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8006848:	2200      	movs	r2, #0
 800684a:	f241 0181 	movw	r1, #4225	; 0x1081
 800684e:	4896      	ldr	r0, [pc, #600]	; (8006aa8 <MX_GPIO_Init+0x314>)
 8006850:	f007 fcc4 	bl	800e1dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006854:	2201      	movs	r2, #1
 8006856:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800685a:	4893      	ldr	r0, [pc, #588]	; (8006aa8 <MX_GPIO_Init+0x314>)
 800685c:	f007 fcbe 	bl	800e1dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006866:	4891      	ldr	r0, [pc, #580]	; (8006aac <MX_GPIO_Init+0x318>)
 8006868:	f007 fcb8 	bl	800e1dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800686c:	2201      	movs	r2, #1
 800686e:	2120      	movs	r1, #32
 8006870:	488c      	ldr	r0, [pc, #560]	; (8006aa4 <MX_GPIO_Init+0x310>)
 8006872:	f007 fcb3 	bl	800e1dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8006876:	2201      	movs	r2, #1
 8006878:	2101      	movs	r1, #1
 800687a:	4889      	ldr	r0, [pc, #548]	; (8006aa0 <MX_GPIO_Init+0x30c>)
 800687c:	f007 fcae 	bl	800e1dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8006880:	f240 1315 	movw	r3, #277	; 0x115
 8006884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006886:	2301      	movs	r3, #1
 8006888:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800688a:	2300      	movs	r3, #0
 800688c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006892:	f107 0314 	add.w	r3, r7, #20
 8006896:	4619      	mov	r1, r3
 8006898:	4881      	ldr	r0, [pc, #516]	; (8006aa0 <MX_GPIO_Init+0x30c>)
 800689a:	f007 f9e9 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 800689e:	236a      	movs	r3, #106	; 0x6a
 80068a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80068a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80068a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068a8:	2300      	movs	r3, #0
 80068aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80068ac:	f107 0314 	add.w	r3, r7, #20
 80068b0:	4619      	mov	r1, r3
 80068b2:	487b      	ldr	r0, [pc, #492]	; (8006aa0 <MX_GPIO_Init+0x30c>)
 80068b4:	f007 f9dc 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : f_sw13_Pin */
  GPIO_InitStruct.Pin = f_sw13_Pin;
 80068b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80068bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80068be:	2300      	movs	r3, #0
 80068c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068c2:	2300      	movs	r3, #0
 80068c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(f_sw13_GPIO_Port, &GPIO_InitStruct);
 80068c6:	f107 0314 	add.w	r3, r7, #20
 80068ca:	4619      	mov	r1, r3
 80068cc:	4877      	ldr	r0, [pc, #476]	; (8006aac <MX_GPIO_Init+0x318>)
 80068ce:	f007 f9cf 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80068d2:	233f      	movs	r3, #63	; 0x3f
 80068d4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80068d6:	230b      	movs	r3, #11
 80068d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068de:	f107 0314 	add.w	r3, r7, #20
 80068e2:	4619      	mov	r1, r3
 80068e4:	4871      	ldr	r0, [pc, #452]	; (8006aac <MX_GPIO_Init+0x318>)
 80068e6:	f007 f9c3 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80068ea:	f248 1304 	movw	r3, #33028	; 0x8104
 80068ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80068f0:	2301      	movs	r3, #1
 80068f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80068f8:	2300      	movs	r3, #0
 80068fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068fc:	f107 0314 	add.w	r3, r7, #20
 8006900:	4619      	mov	r1, r3
 8006902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006906:	f007 f9b3 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 800690a:	2308      	movs	r3, #8
 800690c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800690e:	2302      	movs	r3, #2
 8006910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006912:	2300      	movs	r3, #0
 8006914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006916:	2300      	movs	r3, #0
 8006918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800691a:	2301      	movs	r3, #1
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 800691e:	f107 0314 	add.w	r3, r7, #20
 8006922:	4619      	mov	r1, r3
 8006924:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006928:	f007 f9a2 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 800692c:	2310      	movs	r3, #16
 800692e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006930:	230b      	movs	r3, #11
 8006932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006934:	2300      	movs	r3, #0
 8006936:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8006938:	f107 0314 	add.w	r3, r7, #20
 800693c:	4619      	mov	r1, r3
 800693e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006942:	f007 f995 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8006946:	23e0      	movs	r3, #224	; 0xe0
 8006948:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800694a:	2302      	movs	r3, #2
 800694c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800694e:	2300      	movs	r3, #0
 8006950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006952:	2303      	movs	r3, #3
 8006954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006956:	2305      	movs	r3, #5
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800695a:	f107 0314 	add.w	r3, r7, #20
 800695e:	4619      	mov	r1, r3
 8006960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006964:	f007 f984 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8006968:	2301      	movs	r3, #1
 800696a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800696c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006972:	2300      	movs	r3, #0
 8006974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8006976:	f107 0314 	add.w	r3, r7, #20
 800697a:	4619      	mov	r1, r3
 800697c:	4849      	ldr	r0, [pc, #292]	; (8006aa4 <MX_GPIO_Init+0x310>)
 800697e:	f007 f977 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8006982:	2302      	movs	r3, #2
 8006984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8006986:	230b      	movs	r3, #11
 8006988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800698a:	2300      	movs	r3, #0
 800698c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800698e:	f107 0314 	add.w	r3, r7, #20
 8006992:	4619      	mov	r1, r3
 8006994:	4843      	ldr	r0, [pc, #268]	; (8006aa4 <MX_GPIO_Init+0x310>)
 8006996:	f007 f96b 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 800699a:	f24f 0334 	movw	r3, #61492	; 0xf034
 800699e:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069a0:	2301      	movs	r3, #1
 80069a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069a8:	2300      	movs	r3, #0
 80069aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80069ac:	f107 0314 	add.w	r3, r7, #20
 80069b0:	4619      	mov	r1, r3
 80069b2:	483c      	ldr	r0, [pc, #240]	; (8006aa4 <MX_GPIO_Init+0x310>)
 80069b4:	f007 f95c 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : DFSDM1_DATIN2_Pin DFSDM1_CKOUT_Pin */
  GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 80069b8:	f44f 7320 	mov.w	r3, #640	; 0x280
 80069bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069be:	2302      	movs	r3, #2
 80069c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069c2:	2300      	movs	r3, #0
 80069c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069c6:	2300      	movs	r3, #0
 80069c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80069ca:	2306      	movs	r3, #6
 80069cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069ce:	f107 0314 	add.w	r3, r7, #20
 80069d2:	4619      	mov	r1, r3
 80069d4:	4832      	ldr	r0, [pc, #200]	; (8006aa0 <MX_GPIO_Init+0x30c>)
 80069d6:	f007 f94b 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : QUADSPI_CLK_Pin QUADSPI_NCS_Pin OQUADSPI_BK1_IO0_Pin QUADSPI_BK1_IO1_Pin
                           QUAD_SPI_BK1_IO2_Pin QUAD_SPI_BK1_IO3_Pin */
  GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80069da:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80069de:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069e0:	2302      	movs	r3, #2
 80069e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069e8:	2303      	movs	r3, #3
 80069ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80069ec:	230a      	movs	r3, #10
 80069ee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80069f0:	f107 0314 	add.w	r3, r7, #20
 80069f4:	4619      	mov	r1, r3
 80069f6:	482a      	ldr	r0, [pc, #168]	; (8006aa0 <MX_GPIO_Init+0x30c>)
 80069f8:	f007 f93a 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_UART3_TX_Pin INTERNAL_UART3_RX_Pin */
  GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80069fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a02:	2302      	movs	r3, #2
 8006a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006a0e:	2307      	movs	r3, #7
 8006a10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a12:	f107 0314 	add.w	r3, r7, #20
 8006a16:	4619      	mov	r1, r3
 8006a18:	4823      	ldr	r0, [pc, #140]	; (8006aa8 <MX_GPIO_Init+0x314>)
 8006a1a:	f007 f929 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8006a1e:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8006a22:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a2e:	f107 0314 	add.w	r3, r7, #20
 8006a32:	4619      	mov	r1, r3
 8006a34:	481c      	ldr	r0, [pc, #112]	; (8006aa8 <MX_GPIO_Init+0x314>)
 8006a36:	f007 f91b 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8006a3a:	f243 0381 	movw	r3, #12417	; 0x3081
 8006a3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a40:	2301      	movs	r3, #1
 8006a42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a44:	2300      	movs	r3, #0
 8006a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a48:	2300      	movs	r3, #0
 8006a4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006a4c:	f107 0314 	add.w	r3, r7, #20
 8006a50:	4619      	mov	r1, r3
 8006a52:	4815      	ldr	r0, [pc, #84]	; (8006aa8 <MX_GPIO_Init+0x314>)
 8006a54:	f007 f90c 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : VL53L0X_XSHUT_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin;
 8006a58:	2340      	movs	r3, #64	; 0x40
 8006a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006a60:	2301      	movs	r3, #1
 8006a62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006a64:	2302      	movs	r3, #2
 8006a66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(VL53L0X_XSHUT_GPIO_Port, &GPIO_InitStruct);
 8006a68:	f107 0314 	add.w	r3, r7, #20
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	480f      	ldr	r0, [pc, #60]	; (8006aac <MX_GPIO_Init+0x318>)
 8006a70:	f007 f8fe 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8006a74:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006a78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8006a7a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8006a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006a84:	f107 0314 	add.w	r3, r7, #20
 8006a88:	4619      	mov	r1, r3
 8006a8a:	4808      	ldr	r0, [pc, #32]	; (8006aac <MX_GPIO_Init+0x318>)
 8006a8c:	f007 f8f0 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = LED3_WIFI__LED4_BLE_Pin;
 8006a90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a96:	2301      	movs	r3, #1
 8006a98:	61bb      	str	r3, [r7, #24]
 8006a9a:	e009      	b.n	8006ab0 <MX_GPIO_Init+0x31c>
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	48001000 	.word	0x48001000
 8006aa4:	48000400 	.word	0x48000400
 8006aa8:	48000c00 	.word	0x48000c00
 8006aac:	48000800 	.word	0x48000800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED3_WIFI__LED4_BLE_GPIO_Port, &GPIO_InitStruct);
 8006ab8:	f107 0314 	add.w	r3, r7, #20
 8006abc:	4619      	mov	r1, r3
 8006abe:	483c      	ldr	r0, [pc, #240]	; (8006bb0 <MX_GPIO_Init+0x41c>)
 8006ac0:	f007 f8d6 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8006ac4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006aca:	2300      	movs	r3, #0
 8006acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8006ad2:	f107 0314 	add.w	r3, r7, #20
 8006ad6:	4619      	mov	r1, r3
 8006ad8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006adc:	f007 f8c8 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_ID_Pin USB_OTG_FS_DM_Pin USB_OTG_FS_DP_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8006ae0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006ae4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ae6:	2302      	movs	r3, #2
 8006ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aea:	2300      	movs	r3, #0
 8006aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aee:	2303      	movs	r3, #3
 8006af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006af2:	230a      	movs	r3, #10
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006af6:	f107 0314 	add.w	r3, r7, #20
 8006afa:	4619      	mov	r1, r3
 8006afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b00:	f007 f8b6 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : INTERNAL_SPI3_SCK_Pin INTERNAL_SPI3_MISO_Pin INTERNAL_SPI3_MOSI_Pin */
  GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8006b04:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006b08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b12:	2303      	movs	r3, #3
 8006b14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006b16:	2306      	movs	r3, #6
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006b1a:	f107 0314 	add.w	r3, r7, #20
 8006b1e:	4619      	mov	r1, r3
 8006b20:	4823      	ldr	r0, [pc, #140]	; (8006bb0 <MX_GPIO_Init+0x41c>)
 8006b22:	f007 f8a5 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8006b26:	2302      	movs	r3, #2
 8006b28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b32:	2303      	movs	r3, #3
 8006b34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8006b36:	2305      	movs	r3, #5
 8006b38:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8006b3a:	f107 0314 	add.w	r3, r7, #20
 8006b3e:	4619      	mov	r1, r3
 8006b40:	481c      	ldr	r0, [pc, #112]	; (8006bb4 <MX_GPIO_Init+0x420>)
 8006b42:	f007 f895 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8006b46:	2378      	movs	r3, #120	; 0x78
 8006b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b52:	2303      	movs	r3, #3
 8006b54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006b56:	2307      	movs	r3, #7
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006b5a:	f107 0314 	add.w	r3, r7, #20
 8006b5e:	4619      	mov	r1, r3
 8006b60:	4814      	ldr	r0, [pc, #80]	; (8006bb4 <MX_GPIO_Init+0x420>)
 8006b62:	f007 f885 	bl	800dc70 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8006b66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b6c:	2312      	movs	r3, #18
 8006b6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b70:	2300      	movs	r3, #0
 8006b72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b74:	2303      	movs	r3, #3
 8006b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006b78:	2304      	movs	r3, #4
 8006b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006b7c:	f107 0314 	add.w	r3, r7, #20
 8006b80:	4619      	mov	r1, r3
 8006b82:	480d      	ldr	r0, [pc, #52]	; (8006bb8 <MX_GPIO_Init+0x424>)
 8006b84:	f007 f874 	bl	800dc70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	2017      	movs	r0, #23
 8006b8e:	f006 ffba 	bl	800db06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8006b92:	2017      	movs	r0, #23
 8006b94:	f006 ffd3 	bl	800db3e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2028      	movs	r0, #40	; 0x28
 8006b9e:	f006 ffb2 	bl	800db06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006ba2:	2028      	movs	r0, #40	; 0x28
 8006ba4:	f006 ffcb 	bl	800db3e <HAL_NVIC_EnableIRQ>

}
 8006ba8:	bf00      	nop
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	48000800 	.word	0x48000800
 8006bb4:	48000c00 	.word	0x48000c00
 8006bb8:	48000400 	.word	0x48000400

08006bbc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
    if(huart -> Instance == USART1)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a11      	ldr	r2, [pc, #68]	; (8006c10 <HAL_UART_RxCpltCallback+0x54>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d11c      	bne.n	8006c08 <HAL_UART_RxCpltCallback+0x4c>
    {
    	if(rxData[0]!='\r')
 8006bce:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <HAL_UART_RxCpltCallback+0x58>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b0d      	cmp	r3, #13
 8006bd4:	d00d      	beq.n	8006bf2 <HAL_UART_RxCpltCallback+0x36>
        {
            rxBuffer[rxIndex]=rxData[0];
 8006bd6:	4b10      	ldr	r3, [pc, #64]	; (8006c18 <HAL_UART_RxCpltCallback+0x5c>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	4b0d      	ldr	r3, [pc, #52]	; (8006c14 <HAL_UART_RxCpltCallback+0x58>)
 8006bde:	7819      	ldrb	r1, [r3, #0]
 8006be0:	4b0e      	ldr	r3, [pc, #56]	; (8006c1c <HAL_UART_RxCpltCallback+0x60>)
 8006be2:	5499      	strb	r1, [r3, r2]
            rxIndex++;
 8006be4:	4b0c      	ldr	r3, [pc, #48]	; (8006c18 <HAL_UART_RxCpltCallback+0x5c>)
 8006be6:	781b      	ldrb	r3, [r3, #0]
 8006be8:	3301      	adds	r3, #1
 8006bea:	b2da      	uxtb	r2, r3
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <HAL_UART_RxCpltCallback+0x5c>)
 8006bee:	701a      	strb	r2, [r3, #0]
 8006bf0:	e005      	b.n	8006bfe <HAL_UART_RxCpltCallback+0x42>
        }
        else
        {
            newMsg=1;
 8006bf2:	4b0b      	ldr	r3, [pc, #44]	; (8006c20 <HAL_UART_RxCpltCallback+0x64>)
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	701a      	strb	r2, [r3, #0]
            rxIndex=0;
 8006bf8:	4b07      	ldr	r3, [pc, #28]	; (8006c18 <HAL_UART_RxCpltCallback+0x5c>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	701a      	strb	r2, [r3, #0]
        }
        HAL_UART_Receive_IT(&huart1 ,rxData,1);
 8006bfe:	2201      	movs	r2, #1
 8006c00:	4904      	ldr	r1, [pc, #16]	; (8006c14 <HAL_UART_RxCpltCallback+0x58>)
 8006c02:	4808      	ldr	r0, [pc, #32]	; (8006c24 <HAL_UART_RxCpltCallback+0x68>)
 8006c04:	f00a fc4e 	bl	80114a4 <HAL_UART_Receive_IT>
    }

}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40013800 	.word	0x40013800
 8006c14:	20002978 	.word	0x20002978
 8006c18:	20000e4d 	.word	0x20000e4d
 8006c1c:	20002aa8 	.word	0x20002aa8
 8006c20:	20000e4c 	.word	0x20000e4c
 8006c24:	20002a24 	.word	0x20002a24

08006c28 <HAL_TIM_PeriodElapsedCallback>:
/*This Callback function use for generating Timer(timer 16) delay  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  // Check the timer triggered this callback
	if(htim -> Instance == TIM16)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a1d      	ldr	r2, [pc, #116]	; (8006cac <HAL_TIM_PeriodElapsedCallback+0x84>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d132      	bne.n	8006ca0 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		flag_temp  		= 1;							//checking the timer callback
 8006c3a:	4b1d      	ldr	r3, [pc, #116]	; (8006cb0 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8006c3c:	2201      	movs	r2, #1
 8006c3e:	701a      	strb	r2, [r3, #0]
		flag_humi  		= 1;
 8006c40:	4b1c      	ldr	r3, [pc, #112]	; (8006cb4 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8006c42:	2201      	movs	r2, #1
 8006c44:	701a      	strb	r2, [r3, #0]
		flag_pre   		= 1;
 8006c46:	4b1c      	ldr	r3, [pc, #112]	; (8006cb8 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]
		flag_acce  		= 1;
 8006c4c:	4b1b      	ldr	r3, [pc, #108]	; (8006cbc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8006c4e:	2201      	movs	r2, #1
 8006c50:	701a      	strb	r2, [r3, #0]
		flag_gyro  		= 1;
 8006c52:	4b1b      	ldr	r3, [pc, #108]	; (8006cc0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8006c54:	2201      	movs	r2, #1
 8006c56:	701a      	strb	r2, [r3, #0]
		flag_mag   		= 1;
 8006c58:	4b1a      	ldr	r3, [pc, #104]	; (8006cc4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
		flag_pro   		= 1;
 8006c5e:	4b1a      	ldr	r3, [pc, #104]	; (8006cc8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8006c60:	2201      	movs	r2, #1
 8006c62:	701a      	strb	r2, [r3, #0]
		flag_Email 		= 1;
 8006c64:	4b19      	ldr	r3, [pc, #100]	; (8006ccc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	701a      	strb	r2, [r3, #0]
		flag_R_Email 	= 1;
 8006c6a:	4b19      	ldr	r3, [pc, #100]	; (8006cd0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	701a      	strb	r2, [r3, #0]
		flag_Vcard		= 1;
 8006c70:	4b18      	ldr	r3, [pc, #96]	; (8006cd4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8006c72:	2201      	movs	r2, #1
 8006c74:	701a      	strb	r2, [r3, #0]
		flag_R_Vcard	= 1;
 8006c76:	4b18      	ldr	r3, [pc, #96]	; (8006cd8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
		flag_URL		= 1;
 8006c7c:	4b17      	ldr	r3, [pc, #92]	; (8006cdc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8006c7e:	2201      	movs	r2, #1
 8006c80:	701a      	strb	r2, [r3, #0]
		flag_R_URL		= 1;
 8006c82:	4b17      	ldr	r3, [pc, #92]	; (8006ce0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8006c84:	2201      	movs	r2, #1
 8006c86:	701a      	strb	r2, [r3, #0]
		flag_aar		= 1;
 8006c88:	4b16      	ldr	r3, [pc, #88]	; (8006ce4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	701a      	strb	r2, [r3, #0]
		flag_sms		= 1;
 8006c8e:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8006c90:	2201      	movs	r2, #1
 8006c92:	701a      	strb	r2, [r3, #0]
		flag_R_sms		= 1;
 8006c94:	4b15      	ldr	r3, [pc, #84]	; (8006cec <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
		flag_error 		= 1;
 8006c9a:	4b15      	ldr	r3, [pc, #84]	; (8006cf0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	701a      	strb	r2, [r3, #0]
	}
}
 8006ca0:	bf00      	nop
 8006ca2:	370c      	adds	r7, #12
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006caa:	4770      	bx	lr
 8006cac:	40014400 	.word	0x40014400
 8006cb0:	2000037e 	.word	0x2000037e
 8006cb4:	2000037f 	.word	0x2000037f
 8006cb8:	20000380 	.word	0x20000380
 8006cbc:	20000381 	.word	0x20000381
 8006cc0:	20000382 	.word	0x20000382
 8006cc4:	20000383 	.word	0x20000383
 8006cc8:	20000384 	.word	0x20000384
 8006ccc:	20000385 	.word	0x20000385
 8006cd0:	20000386 	.word	0x20000386
 8006cd4:	20000387 	.word	0x20000387
 8006cd8:	20000388 	.word	0x20000388
 8006cdc:	2000038a 	.word	0x2000038a
 8006ce0:	2000038b 	.word	0x2000038b
 8006ce4:	20000389 	.word	0x20000389
 8006ce8:	2000038c 	.word	0x2000038c
 8006cec:	2000038d 	.word	0x2000038d
 8006cf0:	2000038e 	.word	0x2000038e

08006cf4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == NFC_GPIO_GPO_PIN)
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b10      	cmp	r3, #16
 8006d02:	d101      	bne.n	8006d08 <HAL_GPIO_EXTI_Callback+0x14>
  {
    M24SR_GPO_Callback();
 8006d04:	f7fa fb24 	bl	8001350 <M24SR_GPO_Callback>
  }
}
 8006d08:	bf00      	nop
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006d14:	b672      	cpsid	i
}
 8006d16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006d18:	e7fe      	b.n	8006d18 <Error_Handler+0x8>
	...

08006d1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b083      	sub	sp, #12
 8006d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d22:	4b0f      	ldr	r3, [pc, #60]	; (8006d60 <HAL_MspInit+0x44>)
 8006d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d26:	4a0e      	ldr	r2, [pc, #56]	; (8006d60 <HAL_MspInit+0x44>)
 8006d28:	f043 0301 	orr.w	r3, r3, #1
 8006d2c:	6613      	str	r3, [r2, #96]	; 0x60
 8006d2e:	4b0c      	ldr	r3, [pc, #48]	; (8006d60 <HAL_MspInit+0x44>)
 8006d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d32:	f003 0301 	and.w	r3, r3, #1
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d3a:	4b09      	ldr	r3, [pc, #36]	; (8006d60 <HAL_MspInit+0x44>)
 8006d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d3e:	4a08      	ldr	r2, [pc, #32]	; (8006d60 <HAL_MspInit+0x44>)
 8006d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d44:	6593      	str	r3, [r2, #88]	; 0x58
 8006d46:	4b06      	ldr	r3, [pc, #24]	; (8006d60 <HAL_MspInit+0x44>)
 8006d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	603b      	str	r3, [r7, #0]
 8006d50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40021000 	.word	0x40021000

08006d64 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b0ac      	sub	sp, #176	; 0xb0
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	605a      	str	r2, [r3, #4]
 8006d76:	609a      	str	r2, [r3, #8]
 8006d78:	60da      	str	r2, [r3, #12]
 8006d7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006d7c:	f107 0314 	add.w	r3, r7, #20
 8006d80:	2288      	movs	r2, #136	; 0x88
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f00b fef9 	bl	8012b7c <memset>
  if(hi2c->Instance==I2C2)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a21      	ldr	r2, [pc, #132]	; (8006e14 <HAL_I2C_MspInit+0xb0>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d13b      	bne.n	8006e0c <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8006d94:	2380      	movs	r3, #128	; 0x80
 8006d96:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006d9c:	f107 0314 	add.w	r3, r7, #20
 8006da0:	4618      	mov	r0, r3
 8006da2:	f009 fa43 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d001      	beq.n	8006db0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006dac:	f7ff ffb0 	bl	8006d10 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006db0:	4b19      	ldr	r3, [pc, #100]	; (8006e18 <HAL_I2C_MspInit+0xb4>)
 8006db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006db4:	4a18      	ldr	r2, [pc, #96]	; (8006e18 <HAL_I2C_MspInit+0xb4>)
 8006db6:	f043 0302 	orr.w	r3, r3, #2
 8006dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dbc:	4b16      	ldr	r3, [pc, #88]	; (8006e18 <HAL_I2C_MspInit+0xb4>)
 8006dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	613b      	str	r3, [r7, #16]
 8006dc6:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8006dc8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006dcc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006dd0:	2312      	movs	r3, #18
 8006dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006de2:	2304      	movs	r3, #4
 8006de4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8006dec:	4619      	mov	r1, r3
 8006dee:	480b      	ldr	r0, [pc, #44]	; (8006e1c <HAL_I2C_MspInit+0xb8>)
 8006df0:	f006 ff3e 	bl	800dc70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006df4:	4b08      	ldr	r3, [pc, #32]	; (8006e18 <HAL_I2C_MspInit+0xb4>)
 8006df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006df8:	4a07      	ldr	r2, [pc, #28]	; (8006e18 <HAL_I2C_MspInit+0xb4>)
 8006dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8006e00:	4b05      	ldr	r3, [pc, #20]	; (8006e18 <HAL_I2C_MspInit+0xb4>)
 8006e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e08:	60fb      	str	r3, [r7, #12]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8006e0c:	bf00      	nop
 8006e0e:	37b0      	adds	r7, #176	; 0xb0
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}
 8006e14:	40005800 	.word	0x40005800
 8006e18:	40021000 	.word	0x40021000
 8006e1c:	48000400 	.word	0x48000400

08006e20 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a0b      	ldr	r2, [pc, #44]	; (8006e5c <HAL_I2C_MspDeInit+0x3c>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d10f      	bne.n	8006e52 <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <HAL_I2C_MspDeInit+0x40>)
 8006e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e36:	4a0a      	ldr	r2, [pc, #40]	; (8006e60 <HAL_I2C_MspDeInit+0x40>)
 8006e38:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8006e3c:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8006e3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e42:	4808      	ldr	r0, [pc, #32]	; (8006e64 <HAL_I2C_MspDeInit+0x44>)
 8006e44:	f007 f8be 	bl	800dfc4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8006e48:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e4c:	4805      	ldr	r0, [pc, #20]	; (8006e64 <HAL_I2C_MspDeInit+0x44>)
 8006e4e:	f007 f8b9 	bl	800dfc4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 8006e52:	bf00      	nop
 8006e54:	3708      	adds	r7, #8
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	40005800 	.word	0x40005800
 8006e60:	40021000 	.word	0x40021000
 8006e64:	48000400 	.word	0x48000400

08006e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a16      	ldr	r2, [pc, #88]	; (8006ed0 <HAL_TIM_Base_MspInit+0x68>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d114      	bne.n	8006ea4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8006e7a:	4b16      	ldr	r3, [pc, #88]	; (8006ed4 <HAL_TIM_Base_MspInit+0x6c>)
 8006e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7e:	4a15      	ldr	r2, [pc, #84]	; (8006ed4 <HAL_TIM_Base_MspInit+0x6c>)
 8006e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e84:	6613      	str	r3, [r2, #96]	; 0x60
 8006e86:	4b13      	ldr	r3, [pc, #76]	; (8006ed4 <HAL_TIM_Base_MspInit+0x6c>)
 8006e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e8e:	60fb      	str	r3, [r7, #12]
 8006e90:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	2019      	movs	r0, #25
 8006e98:	f006 fe35 	bl	800db06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006e9c:	2019      	movs	r0, #25
 8006e9e:	f006 fe4e 	bl	800db3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8006ea2:	e010      	b.n	8006ec6 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM17)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a0b      	ldr	r2, [pc, #44]	; (8006ed8 <HAL_TIM_Base_MspInit+0x70>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d10b      	bne.n	8006ec6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006eae:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <HAL_TIM_Base_MspInit+0x6c>)
 8006eb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb2:	4a08      	ldr	r2, [pc, #32]	; (8006ed4 <HAL_TIM_Base_MspInit+0x6c>)
 8006eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006eb8:	6613      	str	r3, [r2, #96]	; 0x60
 8006eba:	4b06      	ldr	r3, [pc, #24]	; (8006ed4 <HAL_TIM_Base_MspInit+0x6c>)
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ec2:	60bb      	str	r3, [r7, #8]
 8006ec4:	68bb      	ldr	r3, [r7, #8]
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
 8006ece:	bf00      	nop
 8006ed0:	40014400 	.word	0x40014400
 8006ed4:	40021000 	.word	0x40021000
 8006ed8:	40014800 	.word	0x40014800

08006edc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b0ae      	sub	sp, #184	; 0xb8
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ee4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006ee8:	2200      	movs	r2, #0
 8006eea:	601a      	str	r2, [r3, #0]
 8006eec:	605a      	str	r2, [r3, #4]
 8006eee:	609a      	str	r2, [r3, #8]
 8006ef0:	60da      	str	r2, [r3, #12]
 8006ef2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006ef4:	f107 031c 	add.w	r3, r7, #28
 8006ef8:	2288      	movs	r2, #136	; 0x88
 8006efa:	2100      	movs	r1, #0
 8006efc:	4618      	mov	r0, r3
 8006efe:	f00b fe3d 	bl	8012b7c <memset>
  if(huart->Instance==UART4)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a4a      	ldr	r2, [pc, #296]	; (8007030 <HAL_UART_MspInit+0x154>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d144      	bne.n	8006f96 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8006f0c:	2308      	movs	r3, #8
 8006f0e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8006f10:	2300      	movs	r3, #0
 8006f12:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006f14:	f107 031c 	add.w	r3, r7, #28
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f009 f987 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8006f24:	f7ff fef4 	bl	8006d10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8006f28:	4b42      	ldr	r3, [pc, #264]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f2c:	4a41      	ldr	r2, [pc, #260]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006f2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f32:	6593      	str	r3, [r2, #88]	; 0x58
 8006f34:	4b3f      	ldr	r3, [pc, #252]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f40:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006f42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f44:	4a3b      	ldr	r2, [pc, #236]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f4c:	4b39      	ldr	r3, [pc, #228]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006f4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f50:	f003 0301 	and.w	r3, r3, #1
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f5e:	2302      	movs	r3, #2
 8006f60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f64:	2300      	movs	r3, #0
 8006f66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006f70:	2308      	movs	r3, #8
 8006f72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f76:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006f80:	f006 fe76 	bl	800dc70 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8006f84:	2200      	movs	r2, #0
 8006f86:	2100      	movs	r1, #0
 8006f88:	2034      	movs	r0, #52	; 0x34
 8006f8a:	f006 fdbc 	bl	800db06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8006f8e:	2034      	movs	r0, #52	; 0x34
 8006f90:	f006 fdd5 	bl	800db3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8006f94:	e047      	b.n	8007026 <HAL_UART_MspInit+0x14a>
  else if(huart->Instance==USART1)
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a27      	ldr	r2, [pc, #156]	; (8007038 <HAL_UART_MspInit+0x15c>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d142      	bne.n	8007026 <HAL_UART_MspInit+0x14a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006fa8:	f107 031c 	add.w	r3, r7, #28
 8006fac:	4618      	mov	r0, r3
 8006fae:	f009 f93d 	bl	801022c <HAL_RCCEx_PeriphCLKConfig>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8006fb8:	f7ff feaa 	bl	8006d10 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8006fbc:	4b1d      	ldr	r3, [pc, #116]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006fbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fc6:	6613      	str	r3, [r2, #96]	; 0x60
 8006fc8:	4b1a      	ldr	r3, [pc, #104]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006fca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fd0:	613b      	str	r3, [r7, #16]
 8006fd2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fd4:	4b17      	ldr	r3, [pc, #92]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006fd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fd8:	4a16      	ldr	r2, [pc, #88]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006fda:	f043 0302 	orr.w	r3, r3, #2
 8006fde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006fe0:	4b14      	ldr	r3, [pc, #80]	; (8007034 <HAL_UART_MspInit+0x158>)
 8006fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006fe4:	f003 0302 	and.w	r3, r3, #2
 8006fe8:	60fb      	str	r3, [r7, #12]
 8006fea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8006fec:	23c0      	movs	r3, #192	; 0xc0
 8006fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ff2:	2302      	movs	r3, #2
 8006ff4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ffe:	2303      	movs	r3, #3
 8007000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007004:	2307      	movs	r3, #7
 8007006:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800700a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800700e:	4619      	mov	r1, r3
 8007010:	480a      	ldr	r0, [pc, #40]	; (800703c <HAL_UART_MspInit+0x160>)
 8007012:	f006 fe2d 	bl	800dc70 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007016:	2200      	movs	r2, #0
 8007018:	2100      	movs	r1, #0
 800701a:	2025      	movs	r0, #37	; 0x25
 800701c:	f006 fd73 	bl	800db06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007020:	2025      	movs	r0, #37	; 0x25
 8007022:	f006 fd8c 	bl	800db3e <HAL_NVIC_EnableIRQ>
}
 8007026:	bf00      	nop
 8007028:	37b8      	adds	r7, #184	; 0xb8
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40004c00 	.word	0x40004c00
 8007034:	40021000 	.word	0x40021000
 8007038:	40013800 	.word	0x40013800
 800703c:	48000400 	.word	0x48000400

08007040 <EXTI4_IRQHandler>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void EXTI4_IRQHandler(void)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(NFC_GPIO_GPO_PIN);
 8007044:	2010      	movs	r0, #16
 8007046:	f007 f8e1 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
}
 800704a:	bf00      	nop
 800704c:	bd80      	pop	{r7, pc}

0800704e <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800704e:	b480      	push	{r7}
 8007050:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007052:	e7fe      	b.n	8007052 <NMI_Handler+0x4>

08007054 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007058:	e7fe      	b.n	8007058 <HardFault_Handler+0x4>

0800705a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800705a:	b480      	push	{r7}
 800705c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800705e:	e7fe      	b.n	800705e <MemManage_Handler+0x4>

08007060 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007060:	b480      	push	{r7}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007064:	e7fe      	b.n	8007064 <BusFault_Handler+0x4>

08007066 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007066:	b480      	push	{r7}
 8007068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800706a:	e7fe      	b.n	800706a <UsageFault_Handler+0x4>

0800706c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007070:	bf00      	nop
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800707a:	b480      	push	{r7}
 800707c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800707e:	bf00      	nop
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800708c:	bf00      	nop
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr

08007096 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007096:	b580      	push	{r7, lr}
 8007098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800709a:	f006 fc15 	bl	800d8c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800709e:	bf00      	nop
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80070a6:	2020      	movs	r0, #32
 80070a8:	f007 f8b0 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80070ac:	2040      	movs	r0, #64	; 0x40
 80070ae:	f007 f8ad 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80070b2:	2080      	movs	r0, #128	; 0x80
 80070b4:	f007 f8aa 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80070b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80070bc:	f007 f8a6 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80070c0:	bf00      	nop
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80070c8:	4802      	ldr	r0, [pc, #8]	; (80070d4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80070ca:	f009 fe9b 	bl	8010e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20002b34 	.word	0x20002b34

080070d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80070dc:	4802      	ldr	r0, [pc, #8]	; (80070e8 <USART1_IRQHandler+0x10>)
 80070de:	f00a fa37 	bl	8011550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20002a24 	.word	0x20002a24

080070ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80070f0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80070f4:	f007 f88a 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80070f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80070fc:	f007 f886 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8007100:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007104:	f007 f882 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8007108:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800710c:	f007 f87e 	bl	800e20c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007110:	bf00      	nop
 8007112:	bd80      	pop	{r7, pc}

08007114 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8007118:	4802      	ldr	r0, [pc, #8]	; (8007124 <UART4_IRQHandler+0x10>)
 800711a:	f00a fa19 	bl	8011550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800711e:	bf00      	nop
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	20002ab0 	.word	0x20002ab0

08007128 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	4603      	mov	r3, r0
 8007130:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8007132:	4b0f      	ldr	r3, [pc, #60]	; (8007170 <ITM_SendChar+0x48>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a0e      	ldr	r2, [pc, #56]	; (8007170 <ITM_SendChar+0x48>)
 8007138:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800713c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <ITM_SendChar+0x4c>)
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	4a0c      	ldr	r2, [pc, #48]	; (8007174 <ITM_SendChar+0x4c>)
 8007144:	f043 0301 	orr.w	r3, r3, #1
 8007148:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 800714a:	bf00      	nop
 800714c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 0301 	and.w	r3, r3, #1
 8007156:	2b00      	cmp	r3, #0
 8007158:	d0f8      	beq.n	800714c <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 800715a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	6013      	str	r3, [r2, #0]
}
 8007162:	bf00      	nop
 8007164:	370c      	adds	r7, #12
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr
 800716e:	bf00      	nop
 8007170:	e000edfc 	.word	0xe000edfc
 8007174:	e0000e00 	.word	0xe0000e00

08007178 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007178:	b480      	push	{r7}
 800717a:	af00      	add	r7, sp, #0
	return 1;
 800717c:	2301      	movs	r3, #1
}
 800717e:	4618      	mov	r0, r3
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <_kill>:

int _kill(int pid, int sig)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b082      	sub	sp, #8
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8007192:	f00b fcad 	bl	8012af0 <__errno>
 8007196:	4603      	mov	r3, r0
 8007198:	2216      	movs	r2, #22
 800719a:	601a      	str	r2, [r3, #0]
	return -1;
 800719c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3708      	adds	r7, #8
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <_exit>:

void _exit (int status)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80071b0:	f04f 31ff 	mov.w	r1, #4294967295
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7ff ffe7 	bl	8007188 <_kill>
	while (1) {}		/* Make sure we hang here */
 80071ba:	e7fe      	b.n	80071ba <_exit+0x12>

080071bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071c8:	2300      	movs	r3, #0
 80071ca:	617b      	str	r3, [r7, #20]
 80071cc:	e00a      	b.n	80071e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80071ce:	f3af 8000 	nop.w
 80071d2:	4601      	mov	r1, r0
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	60ba      	str	r2, [r7, #8]
 80071da:	b2ca      	uxtb	r2, r1
 80071dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	3301      	adds	r3, #1
 80071e2:	617b      	str	r3, [r7, #20]
 80071e4:	697a      	ldr	r2, [r7, #20]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	429a      	cmp	r2, r3
 80071ea:	dbf0      	blt.n	80071ce <_read+0x12>
	}

return len;
 80071ec:	687b      	ldr	r3, [r7, #4]
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3718      	adds	r7, #24
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b086      	sub	sp, #24
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	60f8      	str	r0, [r7, #12]
 80071fe:	60b9      	str	r1, [r7, #8]
 8007200:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007202:	2300      	movs	r3, #0
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e009      	b.n	800721c <_write+0x26>
	{
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	1c5a      	adds	r2, r3, #1
 800720c:	60ba      	str	r2, [r7, #8]
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	4618      	mov	r0, r3
 8007212:	f7ff ff89 	bl	8007128 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007216:	697b      	ldr	r3, [r7, #20]
 8007218:	3301      	adds	r3, #1
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	429a      	cmp	r2, r3
 8007222:	dbf1      	blt.n	8007208 <_write+0x12>
	}
	return len;
 8007224:	687b      	ldr	r3, [r7, #4]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3718      	adds	r7, #24
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <_close>:

int _close(int file)
{
 800722e:	b480      	push	{r7}
 8007230:	b083      	sub	sp, #12
 8007232:	af00      	add	r7, sp, #0
 8007234:	6078      	str	r0, [r7, #4]
	return -1;
 8007236:	f04f 33ff 	mov.w	r3, #4294967295
}
 800723a:	4618      	mov	r0, r3
 800723c:	370c      	adds	r7, #12
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007246:	b480      	push	{r7}
 8007248:	b083      	sub	sp, #12
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007256:	605a      	str	r2, [r3, #4]
	return 0;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr

08007266 <_isatty>:

int _isatty(int file)
{
 8007266:	b480      	push	{r7}
 8007268:	b083      	sub	sp, #12
 800726a:	af00      	add	r7, sp, #0
 800726c:	6078      	str	r0, [r7, #4]
	return 1;
 800726e:	2301      	movs	r3, #1
}
 8007270:	4618      	mov	r0, r3
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800727c:	b480      	push	{r7}
 800727e:	b085      	sub	sp, #20
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
	return 0;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3714      	adds	r7, #20
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
	...

08007298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b086      	sub	sp, #24
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80072a0:	4a14      	ldr	r2, [pc, #80]	; (80072f4 <_sbrk+0x5c>)
 80072a2:	4b15      	ldr	r3, [pc, #84]	; (80072f8 <_sbrk+0x60>)
 80072a4:	1ad3      	subs	r3, r2, r3
 80072a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80072ac:	4b13      	ldr	r3, [pc, #76]	; (80072fc <_sbrk+0x64>)
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d102      	bne.n	80072ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80072b4:	4b11      	ldr	r3, [pc, #68]	; (80072fc <_sbrk+0x64>)
 80072b6:	4a12      	ldr	r2, [pc, #72]	; (8007300 <_sbrk+0x68>)
 80072b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80072ba:	4b10      	ldr	r3, [pc, #64]	; (80072fc <_sbrk+0x64>)
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4413      	add	r3, r2
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d207      	bcs.n	80072d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80072c8:	f00b fc12 	bl	8012af0 <__errno>
 80072cc:	4603      	mov	r3, r0
 80072ce:	220c      	movs	r2, #12
 80072d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80072d2:	f04f 33ff 	mov.w	r3, #4294967295
 80072d6:	e009      	b.n	80072ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80072d8:	4b08      	ldr	r3, [pc, #32]	; (80072fc <_sbrk+0x64>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80072de:	4b07      	ldr	r3, [pc, #28]	; (80072fc <_sbrk+0x64>)
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4413      	add	r3, r2
 80072e6:	4a05      	ldr	r2, [pc, #20]	; (80072fc <_sbrk+0x64>)
 80072e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80072ea:	68fb      	ldr	r3, [r7, #12]
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3718      	adds	r7, #24
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	20018000 	.word	0x20018000
 80072f8:	00000400 	.word	0x00000400
 80072fc:	200017c4 	.word	0x200017c4
 8007300:	20002c30 	.word	0x20002c30

08007304 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8007304:	b480      	push	{r7}
 8007306:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8007308:	4b06      	ldr	r3, [pc, #24]	; (8007324 <SystemInit+0x20>)
 800730a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800730e:	4a05      	ldr	r2, [pc, #20]	; (8007324 <SystemInit+0x20>)
 8007310:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007314:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8007318:	bf00      	nop
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	e000ed00 	.word	0xe000ed00

08007328 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007328:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007360 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800732c:	f7ff ffea 	bl	8007304 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007330:	480c      	ldr	r0, [pc, #48]	; (8007364 <LoopForever+0x6>)
  ldr r1, =_edata
 8007332:	490d      	ldr	r1, [pc, #52]	; (8007368 <LoopForever+0xa>)
  ldr r2, =_sidata
 8007334:	4a0d      	ldr	r2, [pc, #52]	; (800736c <LoopForever+0xe>)
  movs r3, #0
 8007336:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007338:	e002      	b.n	8007340 <LoopCopyDataInit>

0800733a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800733a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800733c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800733e:	3304      	adds	r3, #4

08007340 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007340:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007342:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007344:	d3f9      	bcc.n	800733a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007346:	4a0a      	ldr	r2, [pc, #40]	; (8007370 <LoopForever+0x12>)
  ldr r4, =_ebss
 8007348:	4c0a      	ldr	r4, [pc, #40]	; (8007374 <LoopForever+0x16>)
  movs r3, #0
 800734a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800734c:	e001      	b.n	8007352 <LoopFillZerobss>

0800734e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800734e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007350:	3204      	adds	r2, #4

08007352 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007352:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007354:	d3fb      	bcc.n	800734e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8007356:	f00b fbd1 	bl	8012afc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800735a:	f7fe fe99 	bl	8006090 <main>

0800735e <LoopForever>:

LoopForever:
    b LoopForever
 800735e:	e7fe      	b.n	800735e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007360:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8007364:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007368:	20000b00 	.word	0x20000b00
  ldr r2, =_sidata
 800736c:	08016c24 	.word	0x08016c24
  ldr r2, =_sbss
 8007370:	20000b00 	.word	0x20000b00
  ldr r4, =_ebss
 8007374:	20002c2c 	.word	0x20002c2c

08007378 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007378:	e7fe      	b.n	8007378 <ADC1_2_IRQHandler>
	...

0800737c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b08a      	sub	sp, #40	; 0x28
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8007384:	4b27      	ldr	r3, [pc, #156]	; (8007424 <I2Cx_MspInit+0xa8>)
 8007386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007388:	4a26      	ldr	r2, [pc, #152]	; (8007424 <I2Cx_MspInit+0xa8>)
 800738a:	f043 0302 	orr.w	r3, r3, #2
 800738e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007390:	4b24      	ldr	r3, [pc, #144]	; (8007424 <I2Cx_MspInit+0xa8>)
 8007392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007394:	f003 0302 	and.w	r3, r3, #2
 8007398:	613b      	str	r3, [r7, #16]
 800739a:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800739c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80073a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80073a2:	2312      	movs	r3, #18
 80073a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80073a6:	2301      	movs	r3, #1
 80073a8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073aa:	2303      	movs	r3, #3
 80073ac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80073ae:	2304      	movs	r3, #4
 80073b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80073b2:	f107 0314 	add.w	r3, r7, #20
 80073b6:	4619      	mov	r1, r3
 80073b8:	481b      	ldr	r0, [pc, #108]	; (8007428 <I2Cx_MspInit+0xac>)
 80073ba:	f006 fc59 	bl	800dc70 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	4619      	mov	r1, r3
 80073c4:	4818      	ldr	r0, [pc, #96]	; (8007428 <I2Cx_MspInit+0xac>)
 80073c6:	f006 fc53 	bl	800dc70 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80073ca:	4b16      	ldr	r3, [pc, #88]	; (8007424 <I2Cx_MspInit+0xa8>)
 80073cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073ce:	4a15      	ldr	r2, [pc, #84]	; (8007424 <I2Cx_MspInit+0xa8>)
 80073d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073d4:	6593      	str	r3, [r2, #88]	; 0x58
 80073d6:	4b13      	ldr	r3, [pc, #76]	; (8007424 <I2Cx_MspInit+0xa8>)
 80073d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073de:	60fb      	str	r3, [r7, #12]
 80073e0:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 80073e2:	4b10      	ldr	r3, [pc, #64]	; (8007424 <I2Cx_MspInit+0xa8>)
 80073e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073e6:	4a0f      	ldr	r2, [pc, #60]	; (8007424 <I2Cx_MspInit+0xa8>)
 80073e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80073ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 80073ee:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <I2Cx_MspInit+0xa8>)
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <I2Cx_MspInit+0xa8>)
 80073f4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80073f8:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 80073fa:	2200      	movs	r2, #0
 80073fc:	210f      	movs	r1, #15
 80073fe:	2021      	movs	r0, #33	; 0x21
 8007400:	f006 fb81 	bl	800db06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8007404:	2021      	movs	r0, #33	; 0x21
 8007406:	f006 fb9a 	bl	800db3e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800740a:	2200      	movs	r2, #0
 800740c:	210f      	movs	r1, #15
 800740e:	2022      	movs	r0, #34	; 0x22
 8007410:	f006 fb79 	bl	800db06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8007414:	2022      	movs	r0, #34	; 0x22
 8007416:	f006 fb92 	bl	800db3e <HAL_NVIC_EnableIRQ>
}
 800741a:	bf00      	nop
 800741c:	3728      	adds	r7, #40	; 0x28
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	40021000 	.word	0x40021000
 8007428:	48000400 	.word	0x48000400

0800742c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a12      	ldr	r2, [pc, #72]	; (8007480 <I2Cx_Init+0x54>)
 8007438:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	4a11      	ldr	r2, [pc, #68]	; (8007484 <I2Cx_Init+0x58>)
 800743e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2200      	movs	r2, #0
 800745c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f7ff ff89 	bl	800737c <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f006 fee6 	bl	800e23c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 8007470:	2100      	movs	r1, #0
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f007 ffe0 	bl	800f438 <HAL_I2CEx_ConfigAnalogFilter>
}
 8007478:	bf00      	nop
 800747a:	3708      	adds	r7, #8
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	40005800 	.word	0x40005800
 8007484:	00702681 	.word	0x00702681

08007488 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	; 0x28
 800748c:	af04      	add	r7, sp, #16
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	4608      	mov	r0, r1
 8007492:	4611      	mov	r1, r2
 8007494:	461a      	mov	r2, r3
 8007496:	4603      	mov	r3, r0
 8007498:	72fb      	strb	r3, [r7, #11]
 800749a:	460b      	mov	r3, r1
 800749c:	813b      	strh	r3, [r7, #8]
 800749e:	4613      	mov	r3, r2
 80074a0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80074a2:	2300      	movs	r3, #0
 80074a4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80074a6:	7afb      	ldrb	r3, [r7, #11]
 80074a8:	b299      	uxth	r1, r3
 80074aa:	88f8      	ldrh	r0, [r7, #6]
 80074ac:	893a      	ldrh	r2, [r7, #8]
 80074ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80074b2:	9302      	str	r3, [sp, #8]
 80074b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074b6:	9301      	str	r3, [sp, #4]
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	9300      	str	r3, [sp, #0]
 80074bc:	4603      	mov	r3, r0
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f007 fa78 	bl	800e9b4 <HAL_I2C_Mem_Read>
 80074c4:	4603      	mov	r3, r0
 80074c6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80074c8:	7dfb      	ldrb	r3, [r7, #23]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d004      	beq.n	80074d8 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	4619      	mov	r1, r3
 80074d2:	68f8      	ldr	r0, [r7, #12]
 80074d4:	f000 f832 	bl	800753c <I2Cx_Error>
  }
  return status;
 80074d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80074da:	4618      	mov	r0, r3
 80074dc:	3718      	adds	r7, #24
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08a      	sub	sp, #40	; 0x28
 80074e6:	af04      	add	r7, sp, #16
 80074e8:	60f8      	str	r0, [r7, #12]
 80074ea:	4608      	mov	r0, r1
 80074ec:	4611      	mov	r1, r2
 80074ee:	461a      	mov	r2, r3
 80074f0:	4603      	mov	r3, r0
 80074f2:	72fb      	strb	r3, [r7, #11]
 80074f4:	460b      	mov	r3, r1
 80074f6:	813b      	strh	r3, [r7, #8]
 80074f8:	4613      	mov	r3, r2
 80074fa:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80074fc:	2300      	movs	r3, #0
 80074fe:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8007500:	7afb      	ldrb	r3, [r7, #11]
 8007502:	b299      	uxth	r1, r3
 8007504:	88f8      	ldrh	r0, [r7, #6]
 8007506:	893a      	ldrh	r2, [r7, #8]
 8007508:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800750c:	9302      	str	r3, [sp, #8]
 800750e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	6a3b      	ldr	r3, [r7, #32]
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4603      	mov	r3, r0
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f007 f937 	bl	800e78c <HAL_I2C_Mem_Write>
 800751e:	4603      	mov	r3, r0
 8007520:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8007522:	7dfb      	ldrb	r3, [r7, #23]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d004      	beq.n	8007532 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	4619      	mov	r1, r3
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f805 	bl	800753c <I2Cx_Error>
  }
  return status;
 8007532:	7dfb      	ldrb	r3, [r7, #23]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3718      	adds	r7, #24
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b082      	sub	sp, #8
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f006 ff06 	bl	800e35a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff ff6c 	bl	800742c <I2Cx_Init>
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8007560:	4802      	ldr	r0, [pc, #8]	; (800756c <SENSOR_IO_Init+0x10>)
 8007562:	f7ff ff63 	bl	800742c <I2Cx_Init>
}
 8007566:	bf00      	nop
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	20002b84 	.word	0x20002b84

08007570 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af02      	add	r7, sp, #8
 8007576:	4603      	mov	r3, r0
 8007578:	71fb      	strb	r3, [r7, #7]
 800757a:	460b      	mov	r3, r1
 800757c:	71bb      	strb	r3, [r7, #6]
 800757e:	4613      	mov	r3, r2
 8007580:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8007582:	79bb      	ldrb	r3, [r7, #6]
 8007584:	b29a      	uxth	r2, r3
 8007586:	79f9      	ldrb	r1, [r7, #7]
 8007588:	2301      	movs	r3, #1
 800758a:	9301      	str	r3, [sp, #4]
 800758c:	1d7b      	adds	r3, r7, #5
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	2301      	movs	r3, #1
 8007592:	4803      	ldr	r0, [pc, #12]	; (80075a0 <SENSOR_IO_Write+0x30>)
 8007594:	f7ff ffa5 	bl	80074e2 <I2Cx_WriteMultiple>
}
 8007598:	bf00      	nop
 800759a:	3708      	adds	r7, #8
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	20002b84 	.word	0x20002b84

080075a4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b086      	sub	sp, #24
 80075a8:	af02      	add	r7, sp, #8
 80075aa:	4603      	mov	r3, r0
 80075ac:	460a      	mov	r2, r1
 80075ae:	71fb      	strb	r3, [r7, #7]
 80075b0:	4613      	mov	r3, r2
 80075b2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80075b8:	79bb      	ldrb	r3, [r7, #6]
 80075ba:	b29a      	uxth	r2, r3
 80075bc:	79f9      	ldrb	r1, [r7, #7]
 80075be:	2301      	movs	r3, #1
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	f107 030f 	add.w	r3, r7, #15
 80075c6:	9300      	str	r3, [sp, #0]
 80075c8:	2301      	movs	r3, #1
 80075ca:	4804      	ldr	r0, [pc, #16]	; (80075dc <SENSOR_IO_Read+0x38>)
 80075cc:	f7ff ff5c 	bl	8007488 <I2Cx_ReadMultiple>

  return read_value;
 80075d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	20002b84 	.word	0x20002b84

080075e0 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af02      	add	r7, sp, #8
 80075e6:	603a      	str	r2, [r7, #0]
 80075e8:	461a      	mov	r2, r3
 80075ea:	4603      	mov	r3, r0
 80075ec:	71fb      	strb	r3, [r7, #7]
 80075ee:	460b      	mov	r3, r1
 80075f0:	71bb      	strb	r3, [r7, #6]
 80075f2:	4613      	mov	r3, r2
 80075f4:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 80075f6:	79bb      	ldrb	r3, [r7, #6]
 80075f8:	b29a      	uxth	r2, r3
 80075fa:	79f9      	ldrb	r1, [r7, #7]
 80075fc:	88bb      	ldrh	r3, [r7, #4]
 80075fe:	9301      	str	r3, [sp, #4]
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	2301      	movs	r3, #1
 8007606:	4804      	ldr	r0, [pc, #16]	; (8007618 <SENSOR_IO_ReadMultiple+0x38>)
 8007608:	f7ff ff3e 	bl	8007488 <I2Cx_ReadMultiple>
 800760c:	4603      	mov	r3, r0
 800760e:	b29b      	uxth	r3, r3
}
 8007610:	4618      	mov	r0, r3
 8007612:	3708      	adds	r7, #8
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20002b84 	.word	0x20002b84

0800761c <NFC_IO_Init>:
  * @brief  Initializes Sensors low level.
  * @param  GpoIrqEnable  0x0 is disable, otherwise enabled  
  * @retval None
  */
void NFC_IO_Init(uint8_t GpoIrqEnable)
{
 800761c:	b580      	push	{r7, lr}
 800761e:	b088      	sub	sp, #32
 8007620:	af00      	add	r7, sp, #0
 8007622:	4603      	mov	r3, r0
 8007624:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef GPIO_InitStruct;

  /* I2C init */
  I2Cx_Init(&hI2cHandler);
 8007626:	4824      	ldr	r0, [pc, #144]	; (80076b8 <NFC_IO_Init+0x9c>)
 8007628:	f7ff ff00 	bl	800742c <I2Cx_Init>
  
  /* GPIO Ports Clock Enable */
  NFC_GPIO_CLK_ENABLE();
 800762c:	4b23      	ldr	r3, [pc, #140]	; (80076bc <NFC_IO_Init+0xa0>)
 800762e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007630:	4a22      	ldr	r2, [pc, #136]	; (80076bc <NFC_IO_Init+0xa0>)
 8007632:	f043 0310 	orr.w	r3, r3, #16
 8007636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007638:	4b20      	ldr	r3, [pc, #128]	; (80076bc <NFC_IO_Init+0xa0>)
 800763a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800763c:	f003 0310 	and.w	r3, r3, #16
 8007640:	60bb      	str	r3, [r7, #8]
 8007642:	68bb      	ldr	r3, [r7, #8]
  
  /* Configure GPIO pins for GPO (PE4) */
  if(GpoIrqEnable == 0)
 8007644:	79fb      	ldrb	r3, [r7, #7]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10e      	bne.n	8007668 <NFC_IO_Init+0x4c>
  {
    GPIO_InitStruct.Pin = NFC_GPIO_GPO_PIN;
 800764a:	2310      	movs	r3, #16
 800764c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT; 
 800764e:	2300      	movs	r3, #0
 8007650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007652:	2301      	movs	r3, #1
 8007654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007656:	2303      	movs	r3, #3
 8007658:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NFC_GPIO_GPO_PIN_PORT, &GPIO_InitStruct);
 800765a:	f107 030c 	add.w	r3, r7, #12
 800765e:	4619      	mov	r1, r3
 8007660:	4817      	ldr	r0, [pc, #92]	; (80076c0 <NFC_IO_Init+0xa4>)
 8007662:	f006 fb05 	bl	800dc70 <HAL_GPIO_Init>
 8007666:	e016      	b.n	8007696 <NFC_IO_Init+0x7a>
  }
  else
  {
    GPIO_InitStruct.Pin = NFC_GPIO_GPO_PIN;
 8007668:	2310      	movs	r3, #16
 800766a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800766c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007670:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007672:	2301      	movs	r3, #1
 8007674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007676:	2303      	movs	r3, #3
 8007678:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(NFC_GPIO_GPO_PIN_PORT, &GPIO_InitStruct);
 800767a:	f107 030c 	add.w	r3, r7, #12
 800767e:	4619      	mov	r1, r3
 8007680:	480f      	ldr	r0, [pc, #60]	; (80076c0 <NFC_IO_Init+0xa4>)
 8007682:	f006 faf5 	bl	800dc70 <HAL_GPIO_Init>
    /* Enable and set EXTI4_IRQn Interrupt to the lowest priority */
    HAL_NVIC_SetPriority(EXTI4_IRQn, 3, 0);
 8007686:	2200      	movs	r2, #0
 8007688:	2103      	movs	r1, #3
 800768a:	200a      	movs	r0, #10
 800768c:	f006 fa3b 	bl	800db06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_IRQn);    
 8007690:	200a      	movs	r0, #10
 8007692:	f006 fa54 	bl	800db3e <HAL_NVIC_EnableIRQ>
  }
  
  /* Configure GPIO pins for DISABLE (PE2)*/
  GPIO_InitStruct.Pin = NFC_GPIO_RFDISABLE_PIN;
 8007696:	2304      	movs	r3, #4
 8007698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800769a:	2301      	movs	r3, #1
 800769c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769e:	2300      	movs	r3, #0
 80076a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(NFC_GPIO_RFDISABLE_PIN_PORT, &GPIO_InitStruct);
 80076a2:	f107 030c 	add.w	r3, r7, #12
 80076a6:	4619      	mov	r1, r3
 80076a8:	4805      	ldr	r0, [pc, #20]	; (80076c0 <NFC_IO_Init+0xa4>)
 80076aa:	f006 fae1 	bl	800dc70 <HAL_GPIO_Init>
}
 80076ae:	bf00      	nop
 80076b0:	3720      	adds	r7, #32
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	20002b84 	.word	0x20002b84
 80076bc:	40021000 	.word	0x40021000
 80076c0:	48001000 	.word	0x48001000

080076c4 <NFC_IO_ReadMultiple>:
  * @param  pBuffer  Pointer on the buffer to retrieve M24SR response
  * @param  Length  Length of the data
  * @retval Status  Success or Timeout
  */
uint16_t NFC_IO_ReadMultiple (uint8_t Addr, uint8_t *pBuffer, uint16_t Length )
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b086      	sub	sp, #24
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	4603      	mov	r3, r0
 80076cc:	6039      	str	r1, [r7, #0]
 80076ce:	71fb      	strb	r3, [r7, #7]
 80076d0:	4613      	mov	r3, r2
 80076d2:	80bb      	strh	r3, [r7, #4]
  uint16_t status ;
    
    /* Before calling this function M24SR must be ready: check to detect potential issues */
  status = NFC_IO_IsDeviceReady(Addr, NFC_I2C_TRIALS);
 80076d4:	79fb      	ldrb	r3, [r7, #7]
 80076d6:	2101      	movs	r1, #1
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 f847 	bl	800776c <NFC_IO_IsDeviceReady>
 80076de:	4603      	mov	r3, r0
 80076e0:	81fb      	strh	r3, [r7, #14]
  if (status != NFC_I2C_STATUS_SUCCESS)
 80076e2:	89fb      	ldrh	r3, [r7, #14]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d001      	beq.n	80076ec <NFC_IO_ReadMultiple+0x28>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 80076e8:	2311      	movs	r3, #17
 80076ea:	e00e      	b.n	800770a <NFC_IO_ReadMultiple+0x46>
  } 
    
  if( HAL_I2C_Master_Receive(&hI2cHandler, Addr, (uint8_t*)pBuffer, Length, NFC_I2C_TIMEOUT_STD) != HAL_OK)
 80076ec:	79fb      	ldrb	r3, [r7, #7]
 80076ee:	b299      	uxth	r1, r3
 80076f0:	88bb      	ldrh	r3, [r7, #4]
 80076f2:	2208      	movs	r2, #8
 80076f4:	9200      	str	r2, [sp, #0]
 80076f6:	683a      	ldr	r2, [r7, #0]
 80076f8:	4806      	ldr	r0, [pc, #24]	; (8007714 <NFC_IO_ReadMultiple+0x50>)
 80076fa:	f006 ff51 	bl	800e5a0 <HAL_I2C_Master_Receive>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <NFC_IO_ReadMultiple+0x44>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 8007704:	2311      	movs	r3, #17
 8007706:	e000      	b.n	800770a <NFC_IO_ReadMultiple+0x46>
  }
    
  return NFC_I2C_STATUS_SUCCESS;    
 8007708:	2300      	movs	r3, #0
}
 800770a:	4618      	mov	r0, r3
 800770c:	3710      	adds	r7, #16
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20002b84 	.word	0x20002b84

08007718 <NFC_IO_WriteMultiple>:
  * @param  pBuffer  pointer to the buffer to send to the M24SR
  * @param  Length  Length of the data
  * @retval Status  Success or Timeout
  */
uint16_t  NFC_IO_WriteMultiple (uint8_t Addr, uint8_t *pBuffer, uint16_t Length) 
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af02      	add	r7, sp, #8
 800771e:	4603      	mov	r3, r0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
 8007724:	4613      	mov	r3, r2
 8007726:	80bb      	strh	r3, [r7, #4]
  uint16_t status ;
    
  /* Before calling this function M24SR must be ready: check to detect potential issues */
  status = NFC_IO_IsDeviceReady(Addr, NFC_I2C_TRIALS);
 8007728:	79fb      	ldrb	r3, [r7, #7]
 800772a:	2101      	movs	r1, #1
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f81d 	bl	800776c <NFC_IO_IsDeviceReady>
 8007732:	4603      	mov	r3, r0
 8007734:	81fb      	strh	r3, [r7, #14]
  if (status != NFC_I2C_STATUS_SUCCESS)
 8007736:	89fb      	ldrh	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d001      	beq.n	8007740 <NFC_IO_WriteMultiple+0x28>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 800773c:	2311      	movs	r3, #17
 800773e:	e00e      	b.n	800775e <NFC_IO_WriteMultiple+0x46>
  } 
    
  if( HAL_I2C_Master_Transmit(&hI2cHandler, Addr, (uint8_t*)pBuffer, Length, NFC_I2C_TIMEOUT_STD) != HAL_OK)    
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	b299      	uxth	r1, r3
 8007744:	88bb      	ldrh	r3, [r7, #4]
 8007746:	2208      	movs	r2, #8
 8007748:	9200      	str	r2, [sp, #0]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	4806      	ldr	r0, [pc, #24]	; (8007768 <NFC_IO_WriteMultiple+0x50>)
 800774e:	f006 fe33 	bl	800e3b8 <HAL_I2C_Master_Transmit>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d001      	beq.n	800775c <NFC_IO_WriteMultiple+0x44>
  {
    return NFC_I2C_ERROR_TIMEOUT;
 8007758:	2311      	movs	r3, #17
 800775a:	e000      	b.n	800775e <NFC_IO_WriteMultiple+0x46>
  }

  return NFC_I2C_STATUS_SUCCESS;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3710      	adds	r7, #16
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}
 8007766:	bf00      	nop
 8007768:	20002b84 	.word	0x20002b84

0800776c <NFC_IO_IsDeviceReady>:
  * @param  Addr  M24SR I2C address
  * @param  Trials  Number of trials (currently not present in M24sr)
  * @retval Status  Success or Timeout
  */
uint16_t   NFC_IO_IsDeviceReady (uint8_t Addr, uint32_t Trials)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b086      	sub	sp, #24
 8007770:	af00      	add	r7, sp, #0
 8007772:	4603      	mov	r3, r0
 8007774:	6039      	str	r1, [r7, #0]
 8007776:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    uint32_t tickstart = 0;
 8007778:	2300      	movs	r3, #0
 800777a:	617b      	str	r3, [r7, #20]
    uint32_t currenttick = 0;
 800777c:	2300      	movs	r3, #0
 800777e:	613b      	str	r3, [r7, #16]
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8007780:	f006 f8b6 	bl	800d8f0 <HAL_GetTick>
 8007784:	6178      	str	r0, [r7, #20]
    
    /* Wait until M24SR is ready or timeout occurs */
    do
    {
        status = HAL_I2C_IsDeviceReady(&hI2cHandler, Addr, Trials, NFC_I2C_TIMEOUT_STD);
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	b299      	uxth	r1, r3
 800778a:	2308      	movs	r3, #8
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	480d      	ldr	r0, [pc, #52]	; (80077c4 <NFC_IO_IsDeviceReady+0x58>)
 8007790:	f007 fa2a 	bl	800ebe8 <HAL_I2C_IsDeviceReady>
 8007794:	4603      	mov	r3, r0
 8007796:	73fb      	strb	r3, [r7, #15]
        currenttick = HAL_GetTick();
 8007798:	f006 f8aa 	bl	800d8f0 <HAL_GetTick>
 800779c:	6138      	str	r0, [r7, #16]
    } while( ( (currenttick - tickstart) < NFC_I2C_TIMEOUT_MAX) && (status != HAL_OK) );
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	1ad3      	subs	r3, r2, r3
 80077a4:	2bc7      	cmp	r3, #199	; 0xc7
 80077a6:	d802      	bhi.n	80077ae <NFC_IO_IsDeviceReady+0x42>
 80077a8:	7bfb      	ldrb	r3, [r7, #15]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d1eb      	bne.n	8007786 <NFC_IO_IsDeviceReady+0x1a>
    
    if (status != HAL_OK)
 80077ae:	7bfb      	ldrb	r3, [r7, #15]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <NFC_IO_IsDeviceReady+0x4c>
    {
        return NFC_I2C_ERROR_TIMEOUT;
 80077b4:	2311      	movs	r3, #17
 80077b6:	e000      	b.n	80077ba <NFC_IO_IsDeviceReady+0x4e>
    } 

    return NFC_I2C_STATUS_SUCCESS;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20002b84 	.word	0x20002b84

080077c8 <NFC_IO_ReadState>:
/**
  * @brief  This function read the state of the M24SR GPO
  * @retval GPIO_PinState  state of the M24SR GPO
  */
void NFC_IO_ReadState(uint8_t * pPinState)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  *pPinState = (uint8_t)HAL_GPIO_ReadPin(NFC_GPIO_GPO_PIN_PORT,NFC_GPIO_GPO_PIN);
 80077d0:	2110      	movs	r1, #16
 80077d2:	4805      	ldr	r0, [pc, #20]	; (80077e8 <NFC_IO_ReadState+0x20>)
 80077d4:	f006 fcea 	bl	800e1ac <HAL_GPIO_ReadPin>
 80077d8:	4603      	mov	r3, r0
 80077da:	461a      	mov	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	701a      	strb	r2, [r3, #0]
}
 80077e0:	bf00      	nop
 80077e2:	3708      	adds	r7, #8
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	48001000 	.word	0x48001000

080077ec <NFC_IO_Delay>:
  * @brief  Delay function used in M24SR low level driver.
  * @param  Delay  Delay in ms
  * @retval None
  */
void NFC_IO_Delay(uint32_t Delay)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f006 f887 	bl	800d908 <HAL_Delay>
}
 80077fa:	bf00      	nop
 80077fc:	3708      	adds	r7, #8
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
	...

08007804 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800780a:	2300      	movs	r3, #0
 800780c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800780e:	2300      	movs	r3, #0
 8007810:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8007812:	4b19      	ldr	r3, [pc, #100]	; (8007878 <BSP_ACCELERO_Init+0x74>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	4798      	blx	r3
 8007818:	4603      	mov	r3, r0
 800781a:	2b6a      	cmp	r3, #106	; 0x6a
 800781c:	d002      	beq.n	8007824 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	73fb      	strb	r3, [r7, #15]
 8007822:	e024      	b.n	800786e <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8007824:	4b15      	ldr	r3, [pc, #84]	; (800787c <BSP_ACCELERO_Init+0x78>)
 8007826:	4a14      	ldr	r2, [pc, #80]	; (8007878 <BSP_ACCELERO_Init+0x74>)
 8007828:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800782a:	2330      	movs	r3, #48	; 0x30
 800782c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800782e:	2300      	movs	r3, #0
 8007830:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_2G;
 8007832:	2300      	movs	r3, #0
 8007834:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8007836:	2340      	movs	r3, #64	; 0x40
 8007838:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800783e:	2300      	movs	r3, #0
 8007840:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8007842:	797a      	ldrb	r2, [r7, #5]
 8007844:	7abb      	ldrb	r3, [r7, #10]
 8007846:	4313      	orrs	r3, r2
 8007848:	b2db      	uxtb	r3, r3
 800784a:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800784c:	7a3b      	ldrb	r3, [r7, #8]
 800784e:	f043 0304 	orr.w	r3, r3, #4
 8007852:	b2db      	uxtb	r3, r3
 8007854:	021b      	lsls	r3, r3, #8
 8007856:	b21a      	sxth	r2, r3
 8007858:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800785c:	4313      	orrs	r3, r2
 800785e:	b21b      	sxth	r3, r3
 8007860:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8007862:	4b06      	ldr	r3, [pc, #24]	; (800787c <BSP_ACCELERO_Init+0x78>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	89ba      	ldrh	r2, [r7, #12]
 800786a:	4610      	mov	r0, r2
 800786c:	4798      	blx	r3
  }  

  return ret;
 800786e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007870:	4618      	mov	r0, r3
 8007872:	3710      	adds	r7, #16
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}
 8007878:	200008c0 	.word	0x200008c0
 800787c:	200017c8 	.word	0x200017c8

08007880 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b082      	sub	sp, #8
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8007888:	4b08      	ldr	r3, [pc, #32]	; (80078ac <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8007890:	4b06      	ldr	r3, [pc, #24]	; (80078ac <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007896:	2b00      	cmp	r3, #0
 8007898:	d004      	beq.n	80078a4 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800789a:	4b04      	ldr	r3, [pc, #16]	; (80078ac <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
    }
  }
}
 80078a4:	bf00      	nop
 80078a6:	3708      	adds	r7, #8
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	200017c8 	.word	0x200017c8

080078b0 <BSP_GYRO_Init>:
/**
  * @brief  Initialize Gyroscope.
  * @retval GYRO_OK or GYRO_ERROR
  */
uint8_t BSP_GYRO_Init(void)
{  
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
  uint8_t ret = GYRO_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 80078ba:	2300      	movs	r3, #0
 80078bc:	81bb      	strh	r3, [r7, #12]
  GYRO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslGyroDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 80078be:	4b1b      	ldr	r3, [pc, #108]	; (800792c <BSP_GYRO_Init+0x7c>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	4798      	blx	r3
 80078c4:	4603      	mov	r3, r0
 80078c6:	2b6a      	cmp	r3, #106	; 0x6a
 80078c8:	d002      	beq.n	80078d0 <BSP_GYRO_Init+0x20>
  {
    ret = GYRO_ERROR;
 80078ca:	2301      	movs	r3, #1
 80078cc:	73fb      	strb	r3, [r7, #15]
 80078ce:	e028      	b.n	8007922 <BSP_GYRO_Init+0x72>
  }
  else
  {
    /* Initialize the gyroscope driver structure */
    GyroscopeDrv = &Lsm6dslGyroDrv;
 80078d0:	4b17      	ldr	r3, [pc, #92]	; (8007930 <BSP_GYRO_Init+0x80>)
 80078d2:	4a16      	ldr	r2, [pc, #88]	; (800792c <BSP_GYRO_Init+0x7c>)
 80078d4:	601a      	str	r2, [r3, #0]

    /* Configure Mems : data rate, power mode, full scale and axes */
    LSM6DSL_InitStructure.Power_Mode = 0;
 80078d6:	2300      	movs	r3, #0
 80078d8:	713b      	strb	r3, [r7, #4]
    LSM6DSL_InitStructure.Output_DataRate = LSM6DSL_ODR_52Hz;
 80078da:	2330      	movs	r3, #48	; 0x30
 80078dc:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 80078de:	2300      	movs	r3, #0
 80078e0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.Band_Width = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80078e6:	2340      	movs	r3, #64	; 0x40
 80078e8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.Endianness = 0;
 80078ea:	2300      	movs	r3, #0
 80078ec:	727b      	strb	r3, [r7, #9]
    LSM6DSL_InitStructure.Full_Scale = LSM6DSL_GYRO_FS_2000; 
 80078ee:	230c      	movs	r3, #12
 80078f0:	72bb      	strb	r3, [r7, #10]

    /* Configure MEMS: data rate, full scale  */
    ctrl = (LSM6DSL_InitStructure.Full_Scale | LSM6DSL_InitStructure.Output_DataRate);
 80078f2:	7aba      	ldrb	r2, [r7, #10]
 80078f4:	797b      	ldrb	r3, [r7, #5]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	81bb      	strh	r3, [r7, #12]

    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80078fc:	7a3b      	ldrb	r3, [r7, #8]
 80078fe:	f043 0304 	orr.w	r3, r3, #4
 8007902:	b2db      	uxtb	r3, r3
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	b21a      	sxth	r2, r3
 8007908:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800790c:	4313      	orrs	r3, r2
 800790e:	b21b      	sxth	r3, r3
 8007910:	81bb      	strh	r3, [r7, #12]

    /* Initialize component */
    GyroscopeDrv->Init(ctrl);
 8007912:	4b07      	ldr	r3, [pc, #28]	; (8007930 <BSP_GYRO_Init+0x80>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	89ba      	ldrh	r2, [r7, #12]
 800791a:	4610      	mov	r0, r2
 800791c:	4798      	blx	r3
    
    ret = GYRO_OK;
 800791e:	2300      	movs	r3, #0
 8007920:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8007922:	7bfb      	ldrb	r3, [r7, #15]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}
 800792c:	200008f4 	.word	0x200008f4
 8007930:	200017cc 	.word	0x200017cc

08007934 <BSP_GYRO_GetXYZ>:
/**
  * @brief  Get XYZ angular acceleration from the Gyroscope.
  * @param  pfData: pointer on floating array         
  */
void BSP_GYRO_GetXYZ(float* pfData)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  if(GyroscopeDrv != NULL)
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <BSP_GYRO_GetXYZ+0x2c>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d009      	beq.n	8007958 <BSP_GYRO_GetXYZ+0x24>
  {
    if(GyroscopeDrv->GetXYZ!= NULL)
 8007944:	4b06      	ldr	r3, [pc, #24]	; (8007960 <BSP_GYRO_GetXYZ+0x2c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794a:	2b00      	cmp	r3, #0
 800794c:	d004      	beq.n	8007958 <BSP_GYRO_GetXYZ+0x24>
    {
      GyroscopeDrv->GetXYZ(pfData);
 800794e:	4b04      	ldr	r3, [pc, #16]	; (8007960 <BSP_GYRO_GetXYZ+0x2c>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007954:	6878      	ldr	r0, [r7, #4]
 8007956:	4798      	blx	r3
    }
  }
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}
 8007960:	200017cc 	.word	0x200017cc

08007964 <BSP_HSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Humidity Sensor driver.
  * @retval HSENSOR status
  */
uint32_t BSP_HSENSOR_Init(void)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
  uint32_t ret;
  
  if(HTS221_H_Drv.ReadID(HTS221_I2C_ADDRESS) != HTS221_WHO_AM_I_VAL)
 800796a:	4b0c      	ldr	r3, [pc, #48]	; (800799c <BSP_HSENSOR_Init+0x38>)
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	20be      	movs	r0, #190	; 0xbe
 8007970:	4798      	blx	r3
 8007972:	4603      	mov	r3, r0
 8007974:	2bbc      	cmp	r3, #188	; 0xbc
 8007976:	d002      	beq.n	800797e <BSP_HSENSOR_Init+0x1a>
  {
    ret = HSENSOR_ERROR;
 8007978:	2301      	movs	r3, #1
 800797a:	607b      	str	r3, [r7, #4]
 800797c:	e009      	b.n	8007992 <BSP_HSENSOR_Init+0x2e>
  }
  else
  {
    Hsensor_drv = &HTS221_H_Drv;
 800797e:	4b08      	ldr	r3, [pc, #32]	; (80079a0 <BSP_HSENSOR_Init+0x3c>)
 8007980:	4a06      	ldr	r2, [pc, #24]	; (800799c <BSP_HSENSOR_Init+0x38>)
 8007982:	601a      	str	r2, [r3, #0]
    /* HSENSOR Init */   
    Hsensor_drv->Init(HTS221_I2C_ADDRESS);
 8007984:	4b06      	ldr	r3, [pc, #24]	; (80079a0 <BSP_HSENSOR_Init+0x3c>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	20be      	movs	r0, #190	; 0xbe
 800798c:	4798      	blx	r3
    ret = HSENSOR_OK;
 800798e:	2300      	movs	r3, #0
 8007990:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007992:	687b      	ldr	r3, [r7, #4]
}
 8007994:	4618      	mov	r0, r3
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}
 800799c:	20000864 	.word	0x20000864
 80079a0:	200017d0 	.word	0x200017d0

080079a4 <BSP_HSENSOR_ReadHumidity>:
/**
  * @brief  Read Humidity register of HTS221.
  * @retval HTS221 measured humidity value.
  */
float BSP_HSENSOR_ReadHumidity(void)
{ 
 80079a4:	b580      	push	{r7, lr}
 80079a6:	af00      	add	r7, sp, #0
  return Hsensor_drv->ReadHumidity(HTS221_I2C_ADDRESS);
 80079a8:	4b04      	ldr	r3, [pc, #16]	; (80079bc <BSP_HSENSOR_ReadHumidity+0x18>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	20be      	movs	r0, #190	; 0xbe
 80079b0:	4798      	blx	r3
 80079b2:	eef0 7a40 	vmov.f32	s15, s0
}
 80079b6:	eeb0 0a67 	vmov.f32	s0, s15
 80079ba:	bd80      	pop	{r7, pc}
 80079bc:	200017d0 	.word	0x200017d0

080079c0 <BSP_MAGNETO_Init>:
/**
 * @brief Initialize a magnetometer sensor
 * @retval COMPONENT_ERROR in case of failure
 */
MAGNETO_StatusTypeDef BSP_MAGNETO_Init(void)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
  MAGNETO_StatusTypeDef ret = MAGNETO_OK;
 80079c6:	2300      	movs	r3, #0
 80079c8:	71fb      	strb	r3, [r7, #7]
  MAGNETO_InitTypeDef LIS3MDL_InitStructureMag;

  if(Lis3mdlMagDrv.ReadID() != I_AM_LIS3MDL)
 80079ca:	4b11      	ldr	r3, [pc, #68]	; (8007a10 <BSP_MAGNETO_Init+0x50>)
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	4798      	blx	r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b3d      	cmp	r3, #61	; 0x3d
 80079d4:	d002      	beq.n	80079dc <BSP_MAGNETO_Init+0x1c>
  {
    ret = MAGNETO_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	71fb      	strb	r3, [r7, #7]
 80079da:	e013      	b.n	8007a04 <BSP_MAGNETO_Init+0x44>
  }
  else
  {
    /* Initialize the MAGNETO magnetometer driver structure */
    MagnetoDrv = &Lis3mdlMagDrv;
 80079dc:	4b0d      	ldr	r3, [pc, #52]	; (8007a14 <BSP_MAGNETO_Init+0x54>)
 80079de:	4a0c      	ldr	r2, [pc, #48]	; (8007a10 <BSP_MAGNETO_Init+0x50>)
 80079e0:	601a      	str	r2, [r3, #0]
    
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the MAGNETO magnetometer structure */
    LIS3MDL_InitStructureMag.Register1 = LIS3MDL_MAG_TEMPSENSOR_DISABLE | LIS3MDL_MAG_OM_XY_HIGH | LIS3MDL_MAG_ODR_40_HZ;
 80079e2:	2358      	movs	r3, #88	; 0x58
 80079e4:	703b      	strb	r3, [r7, #0]
    LIS3MDL_InitStructureMag.Register2 = LIS3MDL_MAG_FS_4_GA | LIS3MDL_MAG_REBOOT_DEFAULT | LIS3MDL_MAG_SOFT_RESET_DEFAULT;
 80079e6:	2300      	movs	r3, #0
 80079e8:	707b      	strb	r3, [r7, #1]
    LIS3MDL_InitStructureMag.Register3 = LIS3MDL_MAG_CONFIG_NORMAL_MODE | LIS3MDL_MAG_CONTINUOUS_MODE;
 80079ea:	2300      	movs	r3, #0
 80079ec:	70bb      	strb	r3, [r7, #2]
    LIS3MDL_InitStructureMag.Register4 = LIS3MDL_MAG_OM_Z_HIGH | LIS3MDL_MAG_BLE_LSB;
 80079ee:	2308      	movs	r3, #8
 80079f0:	70fb      	strb	r3, [r7, #3]
    LIS3MDL_InitStructureMag.Register5 = LIS3MDL_MAG_BDU_MSBLSB;
 80079f2:	2340      	movs	r3, #64	; 0x40
 80079f4:	713b      	strb	r3, [r7, #4]
    /* Configure the MAGNETO magnetometer main parameters */
    MagnetoDrv->Init(LIS3MDL_InitStructureMag);
 80079f6:	4b07      	ldr	r3, [pc, #28]	; (8007a14 <BSP_MAGNETO_Init+0x54>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	463a      	mov	r2, r7
 80079fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007a02:	4798      	blx	r3
  } 

  return ret;  
 8007a04:	79fb      	ldrb	r3, [r7, #7]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
 8007a0e:	bf00      	nop
 8007a10:	20000880 	.word	0x20000880
 8007a14:	200017d4 	.word	0x200017d4

08007a18 <BSP_MAGNETO_GetXYZ>:
  * @brief  Get XYZ magnetometer values.
  * @param  pDataXYZ Pointer on 3 magnetometer values table with
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis 
  */
void BSP_MAGNETO_GetXYZ(int16_t *pDataXYZ)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  if(MagnetoDrv != NULL)
 8007a20:	4b08      	ldr	r3, [pc, #32]	; (8007a44 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d009      	beq.n	8007a3c <BSP_MAGNETO_GetXYZ+0x24>
  {
    if(MagnetoDrv->GetXYZ != NULL)
 8007a28:	4b06      	ldr	r3, [pc, #24]	; (8007a44 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d004      	beq.n	8007a3c <BSP_MAGNETO_GetXYZ+0x24>
    {   
      MagnetoDrv->GetXYZ(pDataXYZ);
 8007a32:	4b04      	ldr	r3, [pc, #16]	; (8007a44 <BSP_MAGNETO_GetXYZ+0x2c>)
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	4798      	blx	r3
    }
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	200017d4 	.word	0x200017d4

08007a48 <BSP_PSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Pressure Sensor driver.
  * @retval PSENSOR status
  */
uint32_t BSP_PSENSOR_Init(void)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
  uint32_t ret;
   
  if(LPS22HB_P_Drv.ReadID(LPS22HB_I2C_ADDRESS) != LPS22HB_WHO_AM_I_VAL)
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	; (8007a80 <BSP_PSENSOR_Init+0x38>)
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	20ba      	movs	r0, #186	; 0xba
 8007a54:	4798      	blx	r3
 8007a56:	4603      	mov	r3, r0
 8007a58:	2bb1      	cmp	r3, #177	; 0xb1
 8007a5a:	d002      	beq.n	8007a62 <BSP_PSENSOR_Init+0x1a>
  {
    ret = PSENSOR_ERROR;
 8007a5c:	2301      	movs	r3, #1
 8007a5e:	607b      	str	r3, [r7, #4]
 8007a60:	e009      	b.n	8007a76 <BSP_PSENSOR_Init+0x2e>
  }
  else
  {
     Psensor_drv = &LPS22HB_P_Drv;
 8007a62:	4b08      	ldr	r3, [pc, #32]	; (8007a84 <BSP_PSENSOR_Init+0x3c>)
 8007a64:	4a06      	ldr	r2, [pc, #24]	; (8007a80 <BSP_PSENSOR_Init+0x38>)
 8007a66:	601a      	str	r2, [r3, #0]
     
    /* PSENSOR Init */   
    Psensor_drv->Init(LPS22HB_I2C_ADDRESS);
 8007a68:	4b06      	ldr	r3, [pc, #24]	; (8007a84 <BSP_PSENSOR_Init+0x3c>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	20ba      	movs	r0, #186	; 0xba
 8007a70:	4798      	blx	r3
    ret = PSENSOR_OK;
 8007a72:	2300      	movs	r3, #0
 8007a74:	607b      	str	r3, [r7, #4]
  }
  
  return ret;
 8007a76:	687b      	ldr	r3, [r7, #4]
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}
 8007a80:	200008b4 	.word	0x200008b4
 8007a84:	200017d8 	.word	0x200017d8

08007a88 <BSP_PSENSOR_ReadPressure>:
/**
  * @brief  Read Pressure register of LPS22HB.
  * @retval LPS22HB measured pressure value.
  */
float BSP_PSENSOR_ReadPressure(void)
{ 
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	af00      	add	r7, sp, #0
  return Psensor_drv->ReadPressure(LPS22HB_I2C_ADDRESS);
 8007a8c:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <BSP_PSENSOR_ReadPressure+0x18>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	689b      	ldr	r3, [r3, #8]
 8007a92:	20ba      	movs	r0, #186	; 0xba
 8007a94:	4798      	blx	r3
 8007a96:	eef0 7a40 	vmov.f32	s15, s0
}
 8007a9a:	eeb0 0a67 	vmov.f32	s0, s15
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	200017d8 	.word	0x200017d8

08007aa4 <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8007aae:	4b09      	ldr	r3, [pc, #36]	; (8007ad4 <BSP_TSENSOR_Init+0x30>)
 8007ab0:	4a09      	ldr	r2, [pc, #36]	; (8007ad8 <BSP_TSENSOR_Init+0x34>)
 8007ab2:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8007ab4:	f7ff fd52 	bl	800755c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <BSP_TSENSOR_Init+0x30>)
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	2100      	movs	r1, #0
 8007ac0:	20be      	movs	r0, #190	; 0xbe
 8007ac2:	4798      	blx	r3

  ret = TSENSOR_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8007ac8:	79fb      	ldrb	r3, [r7, #7]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
 8007ad2:	bf00      	nop
 8007ad4:	200017dc 	.word	0x200017dc
 8007ad8:	20000870 	.word	0x20000870

08007adc <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8007ae0:	4b04      	ldr	r3, [pc, #16]	; (8007af4 <BSP_TSENSOR_ReadTemp+0x18>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	20be      	movs	r0, #190	; 0xbe
 8007ae8:	4798      	blx	r3
 8007aea:	eef0 7a40 	vmov.f32	s15, s0
}
 8007aee:	eeb0 0a67 	vmov.f32	s0, s15
 8007af2:	bd80      	pop	{r7, pc}
 8007af4:	200017dc 	.word	0x200017dc

08007af8 <VL53L0X_GetDeviceInfo>:

}

VL53L0X_Error VL53L0X_GetDeviceInfo(VL53L0X_DEV Dev,
	VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_device_info(Dev, pVL53L0X_DeviceInfo);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f004 fdd5 	bl	800c6b8 <VL53L0X_get_device_info>
 8007b0e:	4603      	mov	r3, r0
 8007b10:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8007b12:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <VL53L0X_GetOffsetCalibrationDataMicroMeter>:
	return Status;
}

VL53L0X_Error VL53L0X_GetOffsetCalibrationDataMicroMeter(VL53L0X_DEV Dev,
	int32_t *pOffsetCalibrationDataMicroMeter)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_offset_calibration_data_micro_meter(Dev,
 8007b2c:	6839      	ldr	r1, [r7, #0]
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f001 fc53 	bl	80093da <VL53L0X_get_offset_calibration_data_micro_meter>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
		pOffsetCalibrationDataMicroMeter);

	LOG_FUNCTION_END(Status);
	return Status;
 8007b38:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3710      	adds	r7, #16
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <VL53L0X_DataInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_DataInit(VL53L0X_DEV Dev)
{
 8007b44:	b5b0      	push	{r4, r5, r7, lr}
 8007b46:	b094      	sub	sp, #80	; 0x50
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		0xFE,
		0x01);
#endif

	/* Set I2C standard mode */
	if (Status == VL53L0X_ERROR_NONE)
 8007b52:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d107      	bne.n	8007b6a <VL53L0X_DataInit+0x26>
		Status = VL53L0X_WrByte(Dev, 0x88, 0x00);
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	2188      	movs	r1, #136	; 0x88
 8007b5e:	6878      	ldr	r0, [r7, #4]
 8007b60:	f004 ff6a 	bl	800ca38 <VL53L0X_WrByte>
 8007b64:	4603      	mov	r3, r0
 8007b66:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone, 0);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	if (Status == VL53L0X_ERROR_NONE)
		Status = VL53L0X_apply_offset_adjustment(Dev);
#endif

	/* Default value is 1000 for Linearity Corrective Gain */
	PALDevDataSet(Dev, LinearityCorrectiveGain, 1000);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007b78:	f8a3 214e 	strh.w	r2, [r3, #334]	; 0x14e

	/* Dmax default Parameter */
	PALDevDataSet(Dev, DmaxCalRangeMilliMeter, 400);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8007b82:	f8a3 2150 	strh.w	r2, [r3, #336]	; 0x150
	PALDevDataSet(Dev, DmaxCalSignalRateRtnMegaCps,
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	4a71      	ldr	r2, [pc, #452]	; (8007d50 <VL53L0X_DataInit+0x20c>)
 8007b8a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		(FixPoint1616_t)((0x00016B85))); /* 1.42 No Cover Glass*/

	/* Set Default static parameters
	 *set first temporary values 9.44MHz * 65536 = 618660 */
	VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz, 618660);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	4a70      	ldr	r2, [pc, #448]	; (8007d54 <VL53L0X_DataInit+0x210>)
 8007b92:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4

	/* Set Default XTalkCompensationRateMegaCps to 0  */
	VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps, 0);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	621a      	str	r2, [r3, #32]

	/* Get default parameters */
	Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007b9c:	f107 0308 	add.w	r3, r7, #8
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 fa5a 	bl	800805c <VL53L0X_GetDeviceParameters>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (Status == VL53L0X_ERROR_NONE) {
 8007bae:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d112      	bne.n	8007bdc <VL53L0X_DataInit+0x98>
		/* initialize PAL values */
		CurrentParameters.DeviceMode = VL53L0X_DEVICEMODE_SINGLE_RANGING;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	723b      	strb	r3, [r7, #8]
		CurrentParameters.HistogramMode = VL53L0X_HISTOGRAMMODE_DISABLED;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	727b      	strb	r3, [r7, #9]
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	f103 0410 	add.w	r4, r3, #16
 8007bc4:	f107 0508 	add.w	r5, r7, #8
 8007bc8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bcc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007bd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007bd4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007bd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	/* Sigma estimator variable */
	PALDevDataSet(Dev, SigmaEstRefArray, 100);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2264      	movs	r2, #100	; 0x64
 8007be0:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	PALDevDataSet(Dev, SigmaEstEffPulseWidth, 900);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f44f 7261 	mov.w	r2, #900	; 0x384
 8007bea:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
	PALDevDataSet(Dev, SigmaEstEffAmbWidth, 500);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8007bf4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
	PALDevDataSet(Dev, targetRefRate, 0x0A00); /* 20 MCPS in 9:7 format */
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8007bfe:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a

	/* Use internal default settings */
	PALDevDataSet(Dev, UseInternalTuningSettings, 1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c

	/* Enable all check */
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c0e:	e014      	b.n	8007c3a <VL53L0X_DataInit+0xf6>
		if (Status == VL53L0X_ERROR_NONE)
 8007c10:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d114      	bne.n	8007c42 <VL53L0X_DataInit+0xfe>
			Status |= VL53L0X_SetLimitCheckEnable(Dev, i, 1);
 8007c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fd67 	bl	80086f4 <VL53L0X_SetLimitCheckEnable>
 8007c26:	4603      	mov	r3, r0
 8007c28:	461a      	mov	r2, r3
 8007c2a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c2e:	4313      	orrs	r3, r2
 8007c30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 8007c34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c36:	3301      	adds	r3, #1
 8007c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c3c:	2b05      	cmp	r3, #5
 8007c3e:	dde7      	ble.n	8007c10 <VL53L0X_DataInit+0xcc>
 8007c40:	e000      	b.n	8007c44 <VL53L0X_DataInit+0x100>
		else
			break;
 8007c42:	bf00      	nop

	}

	/* Disable the following checks */
	if (Status == VL53L0X_ERROR_NONE)
 8007c44:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d107      	bne.n	8007c5c <VL53L0X_DataInit+0x118>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007c4c:	2200      	movs	r2, #0
 8007c4e:	2102      	movs	r1, #2
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fd4f 	bl	80086f4 <VL53L0X_SetLimitCheckEnable>
 8007c56:	4603      	mov	r3, r0
 8007c58:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007c5c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d107      	bne.n	8007c74 <VL53L0X_DataInit+0x130>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007c64:	2200      	movs	r2, #0
 8007c66:	2103      	movs	r1, #3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 fd43 	bl	80086f4 <VL53L0X_SetLimitCheckEnable>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007c74:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d107      	bne.n	8007c8c <VL53L0X_DataInit+0x148>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	2104      	movs	r1, #4
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f000 fd37 	bl	80086f4 <VL53L0X_SetLimitCheckEnable>
 8007c86:	4603      	mov	r3, r0
 8007c88:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC, 0);

	if (Status == VL53L0X_ERROR_NONE)
 8007c8c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d107      	bne.n	8007ca4 <VL53L0X_DataInit+0x160>
		Status = VL53L0X_SetLimitCheckEnable(Dev,
 8007c94:	2200      	movs	r2, #0
 8007c96:	2105      	movs	r1, #5
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fd2b 	bl	80086f4 <VL53L0X_SetLimitCheckEnable>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE, 0);

	/* Limit default values */
	if (Status == VL53L0X_ERROR_NONE) {
 8007ca4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d108      	bne.n	8007cbe <VL53L0X_DataInit+0x17a>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007cac:	f44f 1290 	mov.w	r2, #1179648	; 0x120000
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f000 fdce 	bl	8008854 <VL53L0X_SetLimitCheckValue>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				(FixPoint1616_t)(18 * 65536));
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8007cbe:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d108      	bne.n	8007cd8 <VL53L0X_DataInit+0x194>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007cca:	2101      	movs	r1, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 fdc1 	bl	8008854 <VL53L0X_SetLimitCheckValue>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				(FixPoint1616_t)(25 * 65536 / 100));
				/* 0.25 * 65536 */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cd8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d108      	bne.n	8007cf2 <VL53L0X_DataInit+0x1ae>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007ce0:	f44f 120c 	mov.w	r2, #2293760	; 0x230000
 8007ce4:	2102      	movs	r1, #2
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 fdb4 	bl	8008854 <VL53L0X_SetLimitCheckValue>
 8007cec:	4603      	mov	r3, r0
 8007cee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				(FixPoint1616_t)(35 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007cf2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d107      	bne.n	8007d0a <VL53L0X_DataInit+0x1c6>
		Status = VL53L0X_SetLimitCheckValue(Dev,
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	2103      	movs	r1, #3
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 fda8 	bl	8008854 <VL53L0X_SetLimitCheckValue>
 8007d04:	4603      	mov	r3, r0
 8007d06:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				(FixPoint1616_t)(0 * 65536));
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007d0a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10f      	bne.n	8007d32 <VL53L0X_DataInit+0x1ee>

		PALDevDataSet(Dev, SequenceConfig, 0xFF);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8007d1a:	22ff      	movs	r2, #255	; 0xff
 8007d1c:	2101      	movs	r1, #1
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f004 fe8a 	bl	800ca38 <VL53L0X_WrByte>
 8007d24:	4603      	mov	r3, r0
 8007d26:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			0xFF);

		/* Set PAL state to tell that we are waiting for call to
		 * VL53L0X_StaticInit */
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_WAIT_STATICINIT);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
	}

	if (Status == VL53L0X_ERROR_NONE)
 8007d32:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d103      	bne.n	8007d42 <VL53L0X_DataInit+0x1fe>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 0);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115


	LOG_FUNCTION_END(Status);
	return Status;
 8007d42:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3750      	adds	r7, #80	; 0x50
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bdb0      	pop	{r4, r5, r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	00016b85 	.word	0x00016b85
 8007d54:	000970a4 	.word	0x000970a4

08007d58 <VL53L0X_StaticInit>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_StaticInit(VL53L0X_DEV Dev)
{
 8007d58:	b5b0      	push	{r4, r5, r7, lr}
 8007d5a:	b09e      	sub	sp, #120	; 0x78
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	VL53L0X_DeviceParameters_t CurrentParameters = {0};
 8007d66:	f107 031c 	add.w	r3, r7, #28
 8007d6a:	2240      	movs	r2, #64	; 0x40
 8007d6c:	2100      	movs	r1, #0
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f00a ff04 	bl	8012b7c <memset>
	uint8_t *pTuningSettingBuffer;
	uint16_t tempword = 0;
 8007d74:	2300      	movs	r3, #0
 8007d76:	837b      	strh	r3, [r7, #26]
	uint8_t tempbyte = 0;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	767b      	strb	r3, [r7, #25]
	uint8_t UseInternalTuningSettings = 0;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint32_t count = 0;
 8007d82:	2300      	movs	r3, #0
 8007d84:	663b      	str	r3, [r7, #96]	; 0x60
	uint8_t isApertureSpads = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	763b      	strb	r3, [r7, #24]
	uint32_t refSpadCount = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	617b      	str	r3, [r7, #20]
	uint8_t ApertureSpads = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t vcselPulsePeriodPCLK;
	FixPoint1616_t seqTimeoutMilliSecs;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 1);
 8007d94:	2101      	movs	r1, #1
 8007d96:	6878      	ldr	r0, [r7, #4]
 8007d98:	f002 fa72 	bl	800a280 <VL53L0X_get_info_from_device>
 8007d9c:	4603      	mov	r3, r0
 8007d9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	/* set the ref spad from NVM */
	count	= (uint32_t)VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f893 3113 	ldrb.w	r3, [r3, #275]	; 0x113
 8007da8:	663b      	str	r3, [r7, #96]	; 0x60
		ReferenceSpadCount);
	ApertureSpads = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
 8007db0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		ReferenceSpadType);

	/* NVM value invalid */
	if ((ApertureSpads > 1) ||
 8007db4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007db8:	2b01      	cmp	r3, #1
 8007dba:	d80d      	bhi.n	8007dd8 <VL53L0X_StaticInit+0x80>
 8007dbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d102      	bne.n	8007dca <VL53L0X_StaticInit+0x72>
		((ApertureSpads == 1) && (count > 32)) ||
 8007dc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dc6:	2b20      	cmp	r3, #32
 8007dc8:	d806      	bhi.n	8007dd8 <VL53L0X_StaticInit+0x80>
 8007dca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10e      	bne.n	8007df0 <VL53L0X_StaticInit+0x98>
		((ApertureSpads == 0) && (count > 12)))
 8007dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dd4:	2b0c      	cmp	r3, #12
 8007dd6:	d90b      	bls.n	8007df0 <VL53L0X_StaticInit+0x98>
		Status = VL53L0X_perform_ref_spad_management(Dev, &refSpadCount,
 8007dd8:	f107 0218 	add.w	r2, r7, #24
 8007ddc:	f107 0314 	add.w	r3, r7, #20
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f001 fcf4 	bl	80097d0 <VL53L0X_perform_ref_spad_management>
 8007de8:	4603      	mov	r3, r0
 8007dea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007dee:	e009      	b.n	8007e04 <VL53L0X_StaticInit+0xac>
			&isApertureSpads);
	else
		Status = VL53L0X_set_reference_spads(Dev, count, ApertureSpads);
 8007df0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007df4:	461a      	mov	r2, r3
 8007df6:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007df8:	6878      	ldr	r0, [r7, #4]
 8007dfa:	f001 fef5 	bl	8009be8 <VL53L0X_set_reference_spads>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Initialize tuning settings buffer to prevent compiler warning. */
	pTuningSettingBuffer = DefaultTuningSettings;
 8007e04:	4b94      	ldr	r3, [pc, #592]	; (8008058 <VL53L0X_StaticInit+0x300>)
 8007e06:	66bb      	str	r3, [r7, #104]	; 0x68

	if (Status == VL53L0X_ERROR_NONE) {
 8007e08:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d10f      	bne.n	8007e30 <VL53L0X_StaticInit+0xd8>
		UseInternalTuningSettings = PALDevDataGet(Dev,
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8007e16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			UseInternalTuningSettings);

		if (UseInternalTuningSettings == 0)
 8007e1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d104      	bne.n	8007e2c <VL53L0X_StaticInit+0xd4>
			pTuningSettingBuffer = PALDevDataGet(Dev,
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8007e28:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e2a:	e001      	b.n	8007e30 <VL53L0X_StaticInit+0xd8>
				pTuningSettingsPointer);
		else
			pTuningSettingBuffer = DefaultTuningSettings;
 8007e2c:	4b8a      	ldr	r3, [pc, #552]	; (8008058 <VL53L0X_StaticInit+0x300>)
 8007e2e:	66bb      	str	r3, [r7, #104]	; 0x68

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007e30:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d106      	bne.n	8007e46 <VL53L0X_StaticInit+0xee>
		Status = VL53L0X_load_tuning_settings(Dev, pTuningSettingBuffer);
 8007e38:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	f003 fdca 	bl	800b9d4 <VL53L0X_load_tuning_settings>
 8007e40:	4603      	mov	r3, r0
 8007e42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	/* Set interrupt config to new sample ready */
	if (Status == VL53L0X_ERROR_NONE) {
 8007e46:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10a      	bne.n	8007e64 <VL53L0X_StaticInit+0x10c>
		Status = VL53L0X_SetGpioConfig(Dev, 0, 0,
 8007e4e:	2300      	movs	r3, #0
 8007e50:	9300      	str	r3, [sp, #0]
 8007e52:	2304      	movs	r3, #4
 8007e54:	2200      	movs	r2, #0
 8007e56:	2100      	movs	r1, #0
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f001 f8ed 	bl	8009038 <VL53L0X_SetGpioConfig>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY,
		VL53L0X_INTERRUPTPOLARITY_LOW);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007e64:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d121      	bne.n	8007eb0 <VL53L0X_StaticInit+0x158>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	21ff      	movs	r1, #255	; 0xff
 8007e70:	6878      	ldr	r0, [r7, #4]
 8007e72:	f004 fde1 	bl	800ca38 <VL53L0X_WrByte>
 8007e76:	4603      	mov	r3, r0
 8007e78:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_RdWord(Dev, 0x84, &tempword);
 8007e7c:	f107 031a 	add.w	r3, r7, #26
 8007e80:	461a      	mov	r2, r3
 8007e82:	2184      	movs	r1, #132	; 0x84
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f004 fd63 	bl	800c950 <VL53L0X_RdWord>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8007e98:	2200      	movs	r2, #0
 8007e9a:	21ff      	movs	r1, #255	; 0xff
 8007e9c:	6878      	ldr	r0, [r7, #4]
 8007e9e:	f004 fdcb 	bl	800ca38 <VL53L0X_WrByte>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	461a      	mov	r2, r3
 8007ea6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007eb0:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d105      	bne.n	8007ec4 <VL53L0X_StaticInit+0x16c>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, OscFrequencyMHz,
 8007eb8:	8b7b      	ldrh	r3, [r7, #26]
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
			VL53L0X_FIXPOINT412TOFIXPOINT1616(tempword));
	}

	/* After static init, some device parameters may be changed,
	 * so update them */
	if (Status == VL53L0X_ERROR_NONE)
 8007ec4:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d108      	bne.n	8007ede <VL53L0X_StaticInit+0x186>
		Status = VL53L0X_GetDeviceParameters(Dev, &CurrentParameters);
 8007ecc:	f107 031c 	add.w	r3, r7, #28
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f8c2 	bl	800805c <VL53L0X_GetDeviceParameters>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f


	if (Status == VL53L0X_ERROR_NONE) {
 8007ede:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d110      	bne.n	8007f08 <VL53L0X_StaticInit+0x1b0>
		Status = VL53L0X_GetFractionEnable(Dev, &tempbyte);
 8007ee6:	f107 0319 	add.w	r3, r7, #25
 8007eea:	4619      	mov	r1, r3
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 f984 	bl	80081fa <VL53L0X_GetFractionEnable>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (Status == VL53L0X_ERROR_NONE)
 8007ef8:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d103      	bne.n	8007f08 <VL53L0X_StaticInit+0x1b0>
			PALDevDataSet(Dev, RangeFractionalEnable, tempbyte);
 8007f00:	7e7a      	ldrb	r2, [r7, #25]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f883 2131 	strb.w	r2, [r3, #305]	; 0x131

	}

	if (Status == VL53L0X_ERROR_NONE)
 8007f08:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10e      	bne.n	8007f2e <VL53L0X_StaticInit+0x1d6>
		PALDevDataSet(Dev, CurrentParameters, CurrentParameters);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f103 0410 	add.w	r4, r3, #16
 8007f16:	f107 051c 	add.w	r5, r7, #28
 8007f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f1e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007f24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007f26:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007f2a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}


	/* read the sequence config and save it */
	if (Status == VL53L0X_ERROR_NONE) {
 8007f2e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d111      	bne.n	8007f5a <VL53L0X_StaticInit+0x202>
		Status = VL53L0X_RdByte(Dev,
 8007f36:	f107 0319 	add.w	r3, r7, #25
 8007f3a:	461a      	mov	r2, r3
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	f004 fc7f 	bl	800c842 <VL53L0X_RdByte>
 8007f44:	4603      	mov	r3, r0
 8007f46:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &tempbyte);
		if (Status == VL53L0X_ERROR_NONE)
 8007f4a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d103      	bne.n	8007f5a <VL53L0X_StaticInit+0x202>
			PALDevDataSet(Dev, SequenceConfig, tempbyte);
 8007f52:	7e7a      	ldrb	r2, [r7, #25]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	/* Disable MSRC and TCC by default */
	if (Status == VL53L0X_ERROR_NONE)
 8007f5a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d107      	bne.n	8007f72 <VL53L0X_StaticInit+0x21a>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007f62:	2200      	movs	r2, #0
 8007f64:	2100      	movs	r1, #0
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 f9bc 	bl	80082e4 <VL53L0X_SetSequenceStepEnable>
 8007f6c:	4603      	mov	r3, r0
 8007f6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					VL53L0X_SEQUENCESTEP_TCC, 0);


	if (Status == VL53L0X_ERROR_NONE)
 8007f72:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d107      	bne.n	8007f8a <VL53L0X_StaticInit+0x232>
		Status = VL53L0X_SetSequenceStepEnable(Dev,
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	2102      	movs	r1, #2
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f9b0 	bl	80082e4 <VL53L0X_SetSequenceStepEnable>
 8007f84:	4603      	mov	r3, r0
 8007f86:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		VL53L0X_SEQUENCESTEP_MSRC, 0);


	/* Set PAL State to standby */
	if (Status == VL53L0X_ERROR_NONE)
 8007f8a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <VL53L0X_StaticInit+0x242>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	2203      	movs	r2, #3
 8007f96:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132



	/* Store pre-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007f9a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d109      	bne.n	8007fb6 <VL53L0X_StaticInit+0x25e>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007fa2:	f107 0313 	add.w	r3, r7, #19
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	2100      	movs	r1, #0
 8007faa:	6878      	ldr	r0, [r7, #4]
 8007fac:	f000 f982 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 8007fb0:	4603      	mov	r3, r0
 8007fb2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_PRE_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007fb6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d103      	bne.n	8007fc6 <VL53L0X_StaticInit+0x26e>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007fbe:	7cfa      	ldrb	r2, [r7, #19]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				PreRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store final-range vcsel period */
	if (Status == VL53L0X_ERROR_NONE) {
 8007fc6:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <VL53L0X_StaticInit+0x28a>
		Status = VL53L0X_GetVcselPulsePeriod(
 8007fce:	f107 0313 	add.w	r3, r7, #19
 8007fd2:	461a      	mov	r2, r3
 8007fd4:	2101      	movs	r1, #1
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f000 f96c 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
			&vcselPulsePeriodPCLK);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8007fe2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d103      	bne.n	8007ff2 <VL53L0X_StaticInit+0x29a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(
 8007fea:	7cfa      	ldrb	r2, [r7, #19]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				FinalRangeVcselPulsePeriod,
				vcselPulsePeriodPCLK);
	}

	/* Store pre-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 8007ff2:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d109      	bne.n	800800e <VL53L0X_StaticInit+0x2b6>
		Status = VL53L0X_GetSequenceStepTimeout(
 8007ffa:	f107 030c 	add.w	r3, r7, #12
 8007ffe:	461a      	mov	r2, r3
 8008000:	2103      	movs	r1, #3
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 faba 	bl	800857c <VL53L0X_GetSequenceStepTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_PRE_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800800e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008012:	2b00      	cmp	r3, #0
 8008014:	d103      	bne.n	800801e <VL53L0X_StaticInit+0x2c6>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
			PreRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	/* Store final-range timeout */
	if (Status == VL53L0X_ERROR_NONE) {
 800801e:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 8008022:	2b00      	cmp	r3, #0
 8008024:	d109      	bne.n	800803a <VL53L0X_StaticInit+0x2e2>
		Status = VL53L0X_GetSequenceStepTimeout(
 8008026:	f107 030c 	add.w	r3, r7, #12
 800802a:	461a      	mov	r2, r3
 800802c:	2104      	movs	r1, #4
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f000 faa4 	bl	800857c <VL53L0X_GetSequenceStepTimeout>
 8008034:	4603      	mov	r3, r0
 8008036:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
			Dev,
			VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			&seqTimeoutMilliSecs);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800803a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
 800803e:	2b00      	cmp	r3, #0
 8008040:	d103      	bne.n	800804a <VL53L0X_StaticInit+0x2f2>
		VL53L0X_SETDEVICESPECIFICPARAMETER(
 8008042:	68fa      	ldr	r2, [r7, #12]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
			FinalRangeTimeoutMicroSecs,
			seqTimeoutMilliSecs);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800804a:	f997 306f 	ldrsb.w	r3, [r7, #111]	; 0x6f
}
 800804e:	4618      	mov	r0, r3
 8008050:	3770      	adds	r7, #112	; 0x70
 8008052:	46bd      	mov	sp, r7
 8008054:	bdb0      	pop	{r4, r5, r7, pc}
 8008056:	bf00      	nop
 8008058:	200005a8 	.word	0x200005a8

0800805c <VL53L0X_GetDeviceParameters>:
	return Status;
}

VL53L0X_Error VL53L0X_GetDeviceParameters(VL53L0X_DEV Dev,
	VL53L0X_DeviceParameters_t *pDeviceParameters)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008066:	2300      	movs	r3, #0
 8008068:	73fb      	strb	r3, [r7, #15]
	int i;

	LOG_FUNCTION_START("");

	Status = VL53L0X_GetDeviceMode(Dev, &(pDeviceParameters->DeviceMode));
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	4619      	mov	r1, r3
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f000 f8b0 	bl	80081d4 <VL53L0X_GetDeviceMode>
 8008074:	4603      	mov	r3, r0
 8008076:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008078:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d107      	bne.n	8008090 <VL53L0X_GetDeviceParameters+0x34>
		Status = VL53L0X_GetInterMeasurementPeriodMilliSeconds(Dev,
 8008080:	683b      	ldr	r3, [r7, #0]
 8008082:	3308      	adds	r3, #8
 8008084:	4619      	mov	r1, r3
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 fab8 	bl	80085fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>
 800808c:	4603      	mov	r3, r0
 800808e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->InterMeasurementPeriodMilliSeconds));


	if (Status == VL53L0X_ERROR_NONE)
 8008090:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <VL53L0X_GetDeviceParameters+0x42>
		pDeviceParameters->XTalkCompensationEnable = 0;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	2200      	movs	r2, #0
 800809c:	731a      	strb	r2, [r3, #12]

	if (Status == VL53L0X_ERROR_NONE)
 800809e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d107      	bne.n	80080b6 <VL53L0X_GetDeviceParameters+0x5a>
		Status = VL53L0X_GetXTalkCompensationRateMegaCps(Dev,
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	3310      	adds	r3, #16
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 faee 	bl	800868e <VL53L0X_GetXTalkCompensationRateMegaCps>
 80080b2:	4603      	mov	r3, r0
 80080b4:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->XTalkCompensationRateMegaCps));


	if (Status == VL53L0X_ERROR_NONE)
 80080b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d107      	bne.n	80080ce <VL53L0X_GetDeviceParameters+0x72>
		Status = VL53L0X_GetOffsetCalibrationDataMicroMeter(Dev,
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	3314      	adds	r3, #20
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff fd2a 	bl	8007b1e <VL53L0X_GetOffsetCalibrationDataMicroMeter>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->RangeOffsetMicroMeters));


	if (Status == VL53L0X_ERROR_NONE) {
 80080ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d134      	bne.n	8008140 <VL53L0X_GetDeviceParameters+0xe4>
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 80080d6:	2300      	movs	r3, #0
 80080d8:	60bb      	str	r3, [r7, #8]
 80080da:	e02a      	b.n	8008132 <VL53L0X_GetDeviceParameters+0xd6>
			/* get first the values, then the enables.
			 * VL53L0X_GetLimitCheckValue will modify the enable
			 * flags
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 80080dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d12a      	bne.n	800813a <VL53L0X_GetDeviceParameters+0xde>
				Status |= VL53L0X_GetLimitCheckValue(Dev, i,
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	b299      	uxth	r1, r3
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	3308      	adds	r3, #8
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	683a      	ldr	r2, [r7, #0]
 80080f0:	4413      	add	r3, r2
 80080f2:	3304      	adds	r3, #4
 80080f4:	461a      	mov	r2, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 fc0e 	bl	8008918 <VL53L0X_GetLimitCheckValue>
 80080fc:	4603      	mov	r3, r0
 80080fe:	461a      	mov	r2, r3
 8008100:	7bfb      	ldrb	r3, [r7, #15]
 8008102:	4313      	orrs	r3, r2
 8008104:	73fb      	strb	r3, [r7, #15]
				&(pDeviceParameters->LimitChecksValue[i]));
			} else {
				break;
			}
			if (Status == VL53L0X_ERROR_NONE) {
 8008106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800810a:	2b00      	cmp	r3, #0
 800810c:	d117      	bne.n	800813e <VL53L0X_GetDeviceParameters+0xe2>
				Status |= VL53L0X_GetLimitCheckEnable(Dev, i,
 800810e:	68bb      	ldr	r3, [r7, #8]
 8008110:	b299      	uxth	r1, r3
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3318      	adds	r3, #24
 8008116:	683a      	ldr	r2, [r7, #0]
 8008118:	4413      	add	r3, r2
 800811a:	461a      	mov	r2, r3
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 fb75 	bl	800880c <VL53L0X_GetLimitCheckEnable>
 8008122:	4603      	mov	r3, r0
 8008124:	461a      	mov	r2, r3
 8008126:	7bfb      	ldrb	r3, [r7, #15]
 8008128:	4313      	orrs	r3, r2
 800812a:	73fb      	strb	r3, [r7, #15]
		for (i = 0; i < VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS; i++) {
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	3301      	adds	r3, #1
 8008130:	60bb      	str	r3, [r7, #8]
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	2b05      	cmp	r3, #5
 8008136:	ddd1      	ble.n	80080dc <VL53L0X_GetDeviceParameters+0x80>
 8008138:	e002      	b.n	8008140 <VL53L0X_GetDeviceParameters+0xe4>
				break;
 800813a:	bf00      	nop
 800813c:	e000      	b.n	8008140 <VL53L0X_GetDeviceParameters+0xe4>
				&(pDeviceParameters->LimitChecksEnable[i]));
			} else {
				break;
 800813e:	bf00      	nop
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d107      	bne.n	8008158 <VL53L0X_GetDeviceParameters+0xfc>
		Status = VL53L0X_GetWrapAroundCheckEnable(Dev,
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	333c      	adds	r3, #60	; 0x3c
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 fc70 	bl	8008a34 <VL53L0X_GetWrapAroundCheckEnable>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
			&(pDeviceParameters->WrapAroundCheckEnable));
	}

	/* Need to be done at the end as it uses VCSELPulsePeriod */
	if (Status == VL53L0X_ERROR_NONE) {
 8008158:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d107      	bne.n	8008170 <VL53L0X_GetDeviceParameters+0x114>
		Status = VL53L0X_GetMeasurementTimingBudgetMicroSeconds(Dev,
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	3304      	adds	r3, #4
 8008164:	4619      	mov	r1, r3
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f879 	bl	800825e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]
		&(pDeviceParameters->MeasurementTimingBudgetMicroSeconds));
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008170:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008174:	4618      	mov	r0, r3
 8008176:	3710      	adds	r7, #16
 8008178:	46bd      	mov	sp, r7
 800817a:	bd80      	pop	{r7, pc}

0800817c <VL53L0X_SetDeviceMode>:

VL53L0X_Error VL53L0X_SetDeviceMode(VL53L0X_DEV Dev, VL53L0X_DeviceModes DeviceMode)
{
 800817c:	b480      	push	{r7}
 800817e:	b085      	sub	sp, #20
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("%d", (int)DeviceMode);

	switch (DeviceMode) {
 800818c:	78fb      	ldrb	r3, [r7, #3]
 800818e:	2b15      	cmp	r3, #21
 8008190:	bf8c      	ite	hi
 8008192:	2201      	movhi	r2, #1
 8008194:	2200      	movls	r2, #0
 8008196:	b2d2      	uxtb	r2, r2
 8008198:	2a00      	cmp	r2, #0
 800819a:	d10e      	bne.n	80081ba <VL53L0X_SetDeviceMode+0x3e>
 800819c:	2201      	movs	r2, #1
 800819e:	409a      	lsls	r2, r3
 80081a0:	4b0b      	ldr	r3, [pc, #44]	; (80081d0 <VL53L0X_SetDeviceMode+0x54>)
 80081a2:	4013      	ands	r3, r2
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	bf14      	ite	ne
 80081a8:	2301      	movne	r3, #1
 80081aa:	2300      	moveq	r3, #0
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <VL53L0X_SetDeviceMode+0x3e>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
	case VL53L0X_DEVICEMODE_GPIO_DRIVE:
	case VL53L0X_DEVICEMODE_GPIO_OSC:
		/* Supported modes */
		VL53L0X_SETPARAMETERFIELD(Dev, DeviceMode, DeviceMode);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	78fa      	ldrb	r2, [r7, #3]
 80081b6:	741a      	strb	r2, [r3, #16]
		break;
 80081b8:	e001      	b.n	80081be <VL53L0X_SetDeviceMode+0x42>
	default:
		/* Unsupported mode */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 80081ba:	23f8      	movs	r3, #248	; 0xf8
 80081bc:	73fb      	strb	r3, [r7, #15]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80081be:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	0030000b 	.word	0x0030000b

080081d4 <VL53L0X_GetDeviceMode>:

VL53L0X_Error VL53L0X_GetDeviceMode(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes *pDeviceMode)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80081de:	2300      	movs	r3, #0
 80081e0:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, DeviceMode, *pDeviceMode);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	7c1a      	ldrb	r2, [r3, #16]
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 80081ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <VL53L0X_GetFractionEnable>:
	LOG_FUNCTION_END(Status);
	return Status;
}

VL53L0X_Error VL53L0X_GetFractionEnable(VL53L0X_DEV Dev, uint8_t *pEnabled)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b084      	sub	sp, #16
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008204:	2300      	movs	r3, #0
 8008206:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_RANGE_CONFIG, pEnabled);
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	2109      	movs	r1, #9
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f004 fb18 	bl	800c842 <VL53L0X_RdByte>
 8008212:	4603      	mov	r3, r0
 8008214:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d106      	bne.n	800822c <VL53L0X_GetFractionEnable+0x32>
		*pEnabled = (*pEnabled & 1);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	781b      	ldrb	r3, [r3, #0]
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	b2da      	uxtb	r2, r3
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800822c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_SetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t MeasurementTimingBudgetMicroSeconds)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b084      	sub	sp, #16
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008242:	2300      	movs	r3, #0
 8008244:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_measurement_timing_budget_micro_seconds(Dev,
 8008246:	6839      	ldr	r1, [r7, #0]
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f003 fa32 	bl	800b6b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]
		MeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);

	return Status;
 8008252:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008256:	4618      	mov	r0, r3
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <VL53L0X_GetMeasurementTimingBudgetMicroSeconds>:

VL53L0X_Error VL53L0X_GetMeasurementTimingBudgetMicroSeconds(VL53L0X_DEV Dev,
	uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
 8008266:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008268:	2300      	movs	r3, #0
 800826a:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_measurement_timing_budget_micro_seconds(Dev,
 800826c:	6839      	ldr	r1, [r7, #0]
 800826e:	6878      	ldr	r0, [r7, #4]
 8008270:	f003 faff 	bl	800b872 <VL53L0X_get_measurement_timing_budget_micro_seconds>
 8008274:	4603      	mov	r3, r0
 8008276:	73fb      	strb	r3, [r7, #15]
		pMeasurementTimingBudgetMicroSeconds);

	LOG_FUNCTION_END(Status);
	return Status;
 8008278:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800827c:	4618      	mov	r0, r3
 800827e:	3710      	adds	r7, #16
 8008280:	46bd      	mov	sp, r7
 8008282:	bd80      	pop	{r7, pc}

08008284 <VL53L0X_SetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_SetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
 800828c:	460b      	mov	r3, r1
 800828e:	70fb      	strb	r3, [r7, #3]
 8008290:	4613      	mov	r3, r2
 8008292:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
	LOG_FUNCTION_START("");

	Status = VL53L0X_set_vcsel_pulse_period(Dev, VcselPeriodType,
 8008298:	78ba      	ldrb	r2, [r7, #2]
 800829a:	78fb      	ldrb	r3, [r7, #3]
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f002 ff47 	bl	800b132 <VL53L0X_set_vcsel_pulse_period>
 80082a4:	4603      	mov	r3, r0
 80082a6:	73fb      	strb	r3, [r7, #15]
		VCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80082a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3710      	adds	r7, #16
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bd80      	pop	{r7, pc}

080082b4 <VL53L0X_GetVcselPulsePeriod>:

VL53L0X_Error VL53L0X_GetVcselPulsePeriod(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b086      	sub	sp, #24
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	460b      	mov	r3, r1
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_get_vcsel_pulse_period(Dev, VcselPeriodType,
 80082c6:	7afb      	ldrb	r3, [r7, #11]
 80082c8:	687a      	ldr	r2, [r7, #4]
 80082ca:	4619      	mov	r1, r3
 80082cc:	68f8      	ldr	r0, [r7, #12]
 80082ce:	f003 f9b9 	bl	800b644 <VL53L0X_get_vcsel_pulse_period>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]
		pVCSELPulsePeriodPCLK);

	LOG_FUNCTION_END(Status);
	return Status;
 80082d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}
	...

080082e4 <VL53L0X_SetSequenceStepEnable>:

VL53L0X_Error VL53L0X_SetSequenceStepEnable(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceStepEnabled)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b086      	sub	sp, #24
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
 80082f0:	4613      	mov	r3, r2
 80082f2:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80082f4:	2300      	movs	r3, #0
 80082f6:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 80082f8:	2300      	movs	r3, #0
 80082fa:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfigNew = 0;
 80082fc:	2300      	movs	r3, #0
 80082fe:	75bb      	strb	r3, [r7, #22]
	uint32_t MeasurementTimingBudgetMicroSeconds;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8008300:	f107 030f 	add.w	r3, r7, #15
 8008304:	461a      	mov	r2, r3
 8008306:	2101      	movs	r1, #1
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f004 fa9a 	bl	800c842 <VL53L0X_RdByte>
 800830e:	4603      	mov	r3, r0
 8008310:	75fb      	strb	r3, [r7, #23]
		&SequenceConfig);

	SequenceConfigNew = SequenceConfig;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	75bb      	strb	r3, [r7, #22]

	if (Status == VL53L0X_ERROR_NONE) {
 8008316:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d15a      	bne.n	80083d4 <VL53L0X_SetSequenceStepEnable+0xf0>
		if (SequenceStepEnabled == 1) {
 800831e:	78bb      	ldrb	r3, [r7, #2]
 8008320:	2b01      	cmp	r3, #1
 8008322:	d12b      	bne.n	800837c <VL53L0X_SetSequenceStepEnable+0x98>

			/* Enable requested sequence step
			 */
			switch (SequenceStepId) {
 8008324:	78fb      	ldrb	r3, [r7, #3]
 8008326:	2b04      	cmp	r3, #4
 8008328:	d825      	bhi.n	8008376 <VL53L0X_SetSequenceStepEnable+0x92>
 800832a:	a201      	add	r2, pc, #4	; (adr r2, 8008330 <VL53L0X_SetSequenceStepEnable+0x4c>)
 800832c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008330:	08008345 	.word	0x08008345
 8008334:	0800834f 	.word	0x0800834f
 8008338:	08008359 	.word	0x08008359
 800833c:	08008363 	.word	0x08008363
 8008340:	0800836d 	.word	0x0800836d
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew |= 0x10;
 8008344:	7dbb      	ldrb	r3, [r7, #22]
 8008346:	f043 0310 	orr.w	r3, r3, #16
 800834a:	75bb      	strb	r3, [r7, #22]
				break;
 800834c:	e043      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew |= 0x28;
 800834e:	7dbb      	ldrb	r3, [r7, #22]
 8008350:	f043 0328 	orr.w	r3, r3, #40	; 0x28
 8008354:	75bb      	strb	r3, [r7, #22]
				break;
 8008356:	e03e      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew |= 0x04;
 8008358:	7dbb      	ldrb	r3, [r7, #22]
 800835a:	f043 0304 	orr.w	r3, r3, #4
 800835e:	75bb      	strb	r3, [r7, #22]
				break;
 8008360:	e039      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew |= 0x40;
 8008362:	7dbb      	ldrb	r3, [r7, #22]
 8008364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008368:	75bb      	strb	r3, [r7, #22]
				break;
 800836a:	e034      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew |= 0x80;
 800836c:	7dbb      	ldrb	r3, [r7, #22]
 800836e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008372:	75bb      	strb	r3, [r7, #22]
				break;
 8008374:	e02f      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008376:	23fc      	movs	r3, #252	; 0xfc
 8008378:	75fb      	strb	r3, [r7, #23]
 800837a:	e02c      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		} else {
			/* Disable requested sequence step
			 */
			switch (SequenceStepId) {
 800837c:	78fb      	ldrb	r3, [r7, #3]
 800837e:	2b04      	cmp	r3, #4
 8008380:	d825      	bhi.n	80083ce <VL53L0X_SetSequenceStepEnable+0xea>
 8008382:	a201      	add	r2, pc, #4	; (adr r2, 8008388 <VL53L0X_SetSequenceStepEnable+0xa4>)
 8008384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008388:	0800839d 	.word	0x0800839d
 800838c:	080083a7 	.word	0x080083a7
 8008390:	080083b1 	.word	0x080083b1
 8008394:	080083bb 	.word	0x080083bb
 8008398:	080083c5 	.word	0x080083c5
			case VL53L0X_SEQUENCESTEP_TCC:
				SequenceConfigNew &= 0xef;
 800839c:	7dbb      	ldrb	r3, [r7, #22]
 800839e:	f023 0310 	bic.w	r3, r3, #16
 80083a2:	75bb      	strb	r3, [r7, #22]
				break;
 80083a4:	e017      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_DSS:
				SequenceConfigNew &= 0xd7;
 80083a6:	7dbb      	ldrb	r3, [r7, #22]
 80083a8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80083ac:	75bb      	strb	r3, [r7, #22]
				break;
 80083ae:	e012      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_MSRC:
				SequenceConfigNew &= 0xfb;
 80083b0:	7dbb      	ldrb	r3, [r7, #22]
 80083b2:	f023 0304 	bic.w	r3, r3, #4
 80083b6:	75bb      	strb	r3, [r7, #22]
				break;
 80083b8:	e00d      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_PRE_RANGE:
				SequenceConfigNew &= 0xbf;
 80083ba:	7dbb      	ldrb	r3, [r7, #22]
 80083bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083c0:	75bb      	strb	r3, [r7, #22]
				break;
 80083c2:	e008      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
				SequenceConfigNew &= 0x7f;
 80083c4:	7dbb      	ldrb	r3, [r7, #22]
 80083c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083ca:	75bb      	strb	r3, [r7, #22]
				break;
 80083cc:	e003      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			default:
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 80083ce:	23fc      	movs	r3, #252	; 0xfc
 80083d0:	75fb      	strb	r3, [r7, #23]
 80083d2:	e000      	b.n	80083d6 <VL53L0X_SetSequenceStepEnable+0xf2>
			}
		}
 80083d4:	bf00      	nop
	}

	if (SequenceConfigNew != SequenceConfig) {
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
 80083d8:	7dba      	ldrb	r2, [r7, #22]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d01e      	beq.n	800841c <VL53L0X_SetSequenceStepEnable+0x138>
		/* Apply New Setting */
		if (Status == VL53L0X_ERROR_NONE) {
 80083de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d107      	bne.n	80083f6 <VL53L0X_SetSequenceStepEnable+0x112>
			Status = VL53L0X_WrByte(Dev,
 80083e6:	7dbb      	ldrb	r3, [r7, #22]
 80083e8:	461a      	mov	r2, r3
 80083ea:	2101      	movs	r1, #1
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f004 fb23 	bl	800ca38 <VL53L0X_WrByte>
 80083f2:	4603      	mov	r3, r0
 80083f4:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, SequenceConfigNew);
		}
		if (Status == VL53L0X_ERROR_NONE)
 80083f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d103      	bne.n	8008406 <VL53L0X_SetSequenceStepEnable+0x122>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfigNew);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	7dba      	ldrb	r2, [r7, #22]
 8008402:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130


		/* Recalculate timing budget */
		if (Status == VL53L0X_ERROR_NONE) {
 8008406:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <VL53L0X_SetSequenceStepEnable+0x138>
			VL53L0X_GETPARAMETERFIELD(Dev,
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	695b      	ldr	r3, [r3, #20]
 8008412:	613b      	str	r3, [r7, #16]
				MeasurementTimingBudgetMicroSeconds,
				MeasurementTimingBudgetMicroSeconds);

			VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 8008414:	6939      	ldr	r1, [r7, #16]
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f7ff ff0e 	bl	8008238 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
		}
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800841c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008420:	4618      	mov	r0, r3
 8008422:	3718      	adds	r7, #24
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <sequence_step_enabled>:

VL53L0X_Error sequence_step_enabled(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, uint8_t SequenceConfig,
	uint8_t *pSequenceStepEnabled)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	607b      	str	r3, [r7, #4]
 8008432:	460b      	mov	r3, r1
 8008434:	72fb      	strb	r3, [r7, #11]
 8008436:	4613      	mov	r3, r2
 8008438:	72bb      	strb	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800843a:	2300      	movs	r3, #0
 800843c:	75fb      	strb	r3, [r7, #23]
	*pSequenceStepEnabled = 0;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2200      	movs	r2, #0
 8008442:	701a      	strb	r2, [r3, #0]
	LOG_FUNCTION_START("");

	switch (SequenceStepId) {
 8008444:	7afb      	ldrb	r3, [r7, #11]
 8008446:	2b04      	cmp	r3, #4
 8008448:	d836      	bhi.n	80084b8 <sequence_step_enabled+0x90>
 800844a:	a201      	add	r2, pc, #4	; (adr r2, 8008450 <sequence_step_enabled+0x28>)
 800844c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008450:	08008465 	.word	0x08008465
 8008454:	08008477 	.word	0x08008477
 8008458:	08008489 	.word	0x08008489
 800845c:	0800849b 	.word	0x0800849b
 8008460:	080084ad 	.word	0x080084ad
	case VL53L0X_SEQUENCESTEP_TCC:
		*pSequenceStepEnabled = (SequenceConfig & 0x10) >> 4;
 8008464:	7abb      	ldrb	r3, [r7, #10]
 8008466:	111b      	asrs	r3, r3, #4
 8008468:	b2db      	uxtb	r3, r3
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	b2da      	uxtb	r2, r3
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	701a      	strb	r2, [r3, #0]
		break;
 8008474:	e022      	b.n	80084bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_DSS:
		*pSequenceStepEnabled = (SequenceConfig & 0x08) >> 3;
 8008476:	7abb      	ldrb	r3, [r7, #10]
 8008478:	10db      	asrs	r3, r3, #3
 800847a:	b2db      	uxtb	r3, r3
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	b2da      	uxtb	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	701a      	strb	r2, [r3, #0]
		break;
 8008486:	e019      	b.n	80084bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_MSRC:
		*pSequenceStepEnabled = (SequenceConfig & 0x04) >> 2;
 8008488:	7abb      	ldrb	r3, [r7, #10]
 800848a:	109b      	asrs	r3, r3, #2
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	b2da      	uxtb	r2, r3
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	701a      	strb	r2, [r3, #0]
		break;
 8008498:	e010      	b.n	80084bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_PRE_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x40) >> 6;
 800849a:	7abb      	ldrb	r3, [r7, #10]
 800849c:	119b      	asrs	r3, r3, #6
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	b2da      	uxtb	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	701a      	strb	r2, [r3, #0]
		break;
 80084aa:	e007      	b.n	80084bc <sequence_step_enabled+0x94>
	case VL53L0X_SEQUENCESTEP_FINAL_RANGE:
		*pSequenceStepEnabled = (SequenceConfig & 0x80) >> 7;
 80084ac:	7abb      	ldrb	r3, [r7, #10]
 80084ae:	09db      	lsrs	r3, r3, #7
 80084b0:	b2da      	uxtb	r2, r3
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	701a      	strb	r2, [r3, #0]
		break;
 80084b6:	e001      	b.n	80084bc <sequence_step_enabled+0x94>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80084b8:	23fc      	movs	r3, #252	; 0xfc
 80084ba:	75fb      	strb	r3, [r7, #23]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80084bc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	371c      	adds	r7, #28
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <VL53L0X_GetSequenceStepEnables>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepEnables(VL53L0X_DEV Dev,
	VL53L0X_SchedulerSequenceSteps_t *pSchedulerSequenceSteps)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b084      	sub	sp, #16
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80084d6:	2300      	movs	r3, #0
 80084d8:	73fb      	strb	r3, [r7, #15]
	uint8_t SequenceConfig = 0;
 80084da:	2300      	movs	r3, #0
 80084dc:	73bb      	strb	r3, [r7, #14]
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 80084de:	f107 030e 	add.w	r3, r7, #14
 80084e2:	461a      	mov	r2, r3
 80084e4:	2101      	movs	r1, #1
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f004 f9ab 	bl	800c842 <VL53L0X_RdByte>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]
		&SequenceConfig);

	if (Status == VL53L0X_ERROR_NONE) {
 80084f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d107      	bne.n	8008508 <VL53L0X_GetSequenceStepEnables+0x3c>
		Status = sequence_step_enabled(Dev,
 80084f8:	7bba      	ldrb	r2, [r7, #14]
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	2100      	movs	r1, #0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f7ff ff92 	bl	8008428 <sequence_step_enabled>
 8008504:	4603      	mov	r3, r0
 8008506:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_TCC, SequenceConfig,
			&pSchedulerSequenceSteps->TccOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008508:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d108      	bne.n	8008522 <VL53L0X_GetSequenceStepEnables+0x56>
		Status = sequence_step_enabled(Dev,
 8008510:	7bba      	ldrb	r2, [r7, #14]
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	3302      	adds	r3, #2
 8008516:	2101      	movs	r1, #1
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f7ff ff85 	bl	8008428 <sequence_step_enabled>
 800851e:	4603      	mov	r3, r0
 8008520:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_DSS, SequenceConfig,
			&pSchedulerSequenceSteps->DssOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d108      	bne.n	800853c <VL53L0X_GetSequenceStepEnables+0x70>
		Status = sequence_step_enabled(Dev,
 800852a:	7bba      	ldrb	r2, [r7, #14]
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	3301      	adds	r3, #1
 8008530:	2102      	movs	r1, #2
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ff78 	bl	8008428 <sequence_step_enabled>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_MSRC, SequenceConfig,
			&pSchedulerSequenceSteps->MsrcOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 800853c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d108      	bne.n	8008556 <VL53L0X_GetSequenceStepEnables+0x8a>
		Status = sequence_step_enabled(Dev,
 8008544:	7bba      	ldrb	r2, [r7, #14]
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	3303      	adds	r3, #3
 800854a:	2103      	movs	r1, #3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f7ff ff6b 	bl	8008428 <sequence_step_enabled>
 8008552:	4603      	mov	r3, r0
 8008554:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_PRE_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->PreRangeOn);
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008556:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d108      	bne.n	8008570 <VL53L0X_GetSequenceStepEnables+0xa4>
		Status = sequence_step_enabled(Dev,
 800855e:	7bba      	ldrb	r2, [r7, #14]
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	3304      	adds	r3, #4
 8008564:	2104      	movs	r1, #4
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7ff ff5e 	bl	8008428 <sequence_step_enabled>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
		VL53L0X_SEQUENCESTEP_FINAL_RANGE, SequenceConfig,
			&pSchedulerSequenceSteps->FinalRangeOn);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008570:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008574:	4618      	mov	r0, r3
 8008576:	3710      	adds	r7, #16
 8008578:	46bd      	mov	sp, r7
 800857a:	bd80      	pop	{r7, pc}

0800857c <VL53L0X_GetSequenceStepTimeout>:
	return Status;
}

VL53L0X_Error VL53L0X_GetSequenceStepTimeout(VL53L0X_DEV Dev,
	VL53L0X_SequenceStepId SequenceStepId, FixPoint1616_t *pTimeOutMilliSecs)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b088      	sub	sp, #32
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	460b      	mov	r3, r1
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800858a:	2300      	movs	r3, #0
 800858c:	77fb      	strb	r3, [r7, #31]
	uint32_t TimeoutMicroSeconds;
	uint32_t WholeNumber_ms = 0;
 800858e:	2300      	movs	r3, #0
 8008590:	61bb      	str	r3, [r7, #24]
	uint32_t Fraction_ms = 0;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
	LOG_FUNCTION_START("");

	Status = get_sequence_step_timeout(Dev, SequenceStepId,
 8008596:	f107 0210 	add.w	r2, r7, #16
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	4619      	mov	r1, r3
 800859e:	68f8      	ldr	r0, [r7, #12]
 80085a0:	f002 fbf2 	bl	800ad88 <get_sequence_step_timeout>
 80085a4:	4603      	mov	r3, r0
 80085a6:	77fb      	strb	r3, [r7, #31]
		&TimeoutMicroSeconds);
	if (Status == VL53L0X_ERROR_NONE) {
 80085a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d11c      	bne.n	80085ea <VL53L0X_GetSequenceStepTimeout+0x6e>
		WholeNumber_ms = TimeoutMicroSeconds / 1000;
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	4a11      	ldr	r2, [pc, #68]	; (80085f8 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80085b4:	fba2 2303 	umull	r2, r3, r2, r3
 80085b8:	099b      	lsrs	r3, r3, #6
 80085ba:	61bb      	str	r3, [r7, #24]
		Fraction_ms = TimeoutMicroSeconds - (WholeNumber_ms * 1000);
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	69bb      	ldr	r3, [r7, #24]
 80085c0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80085c4:	fb01 f303 	mul.w	r3, r1, r3
 80085c8:	1ad3      	subs	r3, r2, r3
 80085ca:	617b      	str	r3, [r7, #20]
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	0419      	lsls	r1, r3, #16
			+ (((Fraction_ms * 0xffff) + 500) / 1000);
 80085d0:	697a      	ldr	r2, [r7, #20]
 80085d2:	4613      	mov	r3, r2
 80085d4:	041b      	lsls	r3, r3, #16
 80085d6:	1a9b      	subs	r3, r3, r2
 80085d8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80085dc:	4a06      	ldr	r2, [pc, #24]	; (80085f8 <VL53L0X_GetSequenceStepTimeout+0x7c>)
 80085de:	fba2 2303 	umull	r2, r3, r2, r3
 80085e2:	099b      	lsrs	r3, r3, #6
 80085e4:	18ca      	adds	r2, r1, r3
		*pTimeOutMilliSecs = (WholeNumber_ms << 16)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	601a      	str	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80085ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80085ee:	4618      	mov	r0, r3
 80085f0:	3720      	adds	r7, #32
 80085f2:	46bd      	mov	sp, r7
 80085f4:	bd80      	pop	{r7, pc}
 80085f6:	bf00      	nop
 80085f8:	10624dd3 	.word	0x10624dd3

080085fc <VL53L0X_GetInterMeasurementPeriodMilliSeconds>:
	return Status;
}

VL53L0X_Error VL53L0X_GetInterMeasurementPeriodMilliSeconds(VL53L0X_DEV Dev,
	uint32_t *pInterMeasurementPeriodMilliSeconds)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]
	uint16_t osc_calibrate_val;
	uint32_t IMPeriodMilliSeconds;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_OSC_CALIBRATE_VAL,
 800860a:	f107 030c 	add.w	r3, r7, #12
 800860e:	461a      	mov	r2, r3
 8008610:	21f8      	movs	r1, #248	; 0xf8
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f004 f99c 	bl	800c950 <VL53L0X_RdWord>
 8008618:	4603      	mov	r3, r0
 800861a:	73fb      	strb	r3, [r7, #15]
		&osc_calibrate_val);

	if (Status == VL53L0X_ERROR_NONE) {
 800861c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d108      	bne.n	8008636 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x3a>
		Status = VL53L0X_RdDWord(Dev,
 8008624:	f107 0308 	add.w	r3, r7, #8
 8008628:	461a      	mov	r2, r3
 800862a:	2104      	movs	r1, #4
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f004 f9c7 	bl	800c9c0 <VL53L0X_RdDWord>
 8008632:	4603      	mov	r3, r0
 8008634:	73fb      	strb	r3, [r7, #15]
		VL53L0X_REG_SYSTEM_INTERMEASUREMENT_PERIOD,
			&IMPeriodMilliSeconds);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d10c      	bne.n	8008658 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x5c>
		if (osc_calibrate_val != 0) {
 800863e:	89bb      	ldrh	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d005      	beq.n	8008650 <VL53L0X_GetInterMeasurementPeriodMilliSeconds+0x54>
			*pInterMeasurementPeriodMilliSeconds =
				IMPeriodMilliSeconds / osc_calibrate_val;
 8008644:	68bb      	ldr	r3, [r7, #8]
 8008646:	89ba      	ldrh	r2, [r7, #12]
 8008648:	fbb3 f2f2 	udiv	r2, r3, r2
			*pInterMeasurementPeriodMilliSeconds =
 800864c:	683b      	ldr	r3, [r7, #0]
 800864e:	601a      	str	r2, [r3, #0]
		}
		VL53L0X_SETPARAMETERFIELD(Dev,
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	619a      	str	r2, [r3, #24]
			InterMeasurementPeriodMilliSeconds,
			*pInterMeasurementPeriodMilliSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008658:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800865c:	4618      	mov	r0, r3
 800865e:	3710      	adds	r7, #16
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}

08008664 <VL53L0X_GetXTalkCompensationEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationEnable(VL53L0X_DEV Dev,
	uint8_t *pXTalkCompensationEnable)
{
 8008664:	b480      	push	{r7}
 8008666:	b085      	sub	sp, #20
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
 800866c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800866e:	2300      	movs	r3, #0
 8008670:	73fb      	strb	r3, [r7, #15]
	uint8_t Temp8;
	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable, Temp8);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	7f1b      	ldrb	r3, [r3, #28]
 8008676:	73bb      	strb	r3, [r7, #14]
	*pXTalkCompensationEnable = Temp8;
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	7bba      	ldrb	r2, [r7, #14]
 800867c:	701a      	strb	r2, [r3, #0]

	LOG_FUNCTION_END(Status);
	return Status;
 800867e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr

0800868e <VL53L0X_GetXTalkCompensationRateMegaCps>:
	return Status;
}

VL53L0X_Error VL53L0X_GetXTalkCompensationRateMegaCps(VL53L0X_DEV Dev,
	FixPoint1616_t *pXTalkCompensationRateMegaCps)
{
 800868e:	b580      	push	{r7, lr}
 8008690:	b086      	sub	sp, #24
 8008692:	af00      	add	r7, sp, #0
 8008694:	6078      	str	r0, [r7, #4]
 8008696:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008698:	2300      	movs	r3, #0
 800869a:	75fb      	strb	r3, [r7, #23]
	uint16_t Value;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdWord(Dev,
 800869c:	f107 030e 	add.w	r3, r7, #14
 80086a0:	461a      	mov	r2, r3
 80086a2:	2120      	movs	r1, #32
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f004 f953 	bl	800c950 <VL53L0X_RdWord>
 80086aa:	4603      	mov	r3, r0
 80086ac:	75fb      	strb	r3, [r7, #23]
	VL53L0X_REG_CROSSTALK_COMPENSATION_PEAK_RATE_MCPS, (uint16_t *)&Value);
	if (Status == VL53L0X_ERROR_NONE) {
 80086ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d118      	bne.n	80086e8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
		if (Value == 0) {
 80086b6:	89fb      	ldrh	r3, [r7, #14]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d109      	bne.n	80086d0 <VL53L0X_GetXTalkCompensationRateMegaCps+0x42>
			/* the Xtalk is disabled return value from memory */
			VL53L0X_GETPARAMETERFIELD(Dev,
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	613b      	str	r3, [r7, #16]
				XTalkCompensationRateMegaCps, TempFix1616);
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	771a      	strb	r2, [r3, #28]
 80086ce:	e00b      	b.n	80086e8 <VL53L0X_GetXTalkCompensationRateMegaCps+0x5a>
				0);
		} else {
			TempFix1616 = VL53L0X_FIXPOINT313TOFIXPOINT1616(Value);
 80086d0:	89fb      	ldrh	r3, [r7, #14]
 80086d2:	00db      	lsls	r3, r3, #3
 80086d4:	613b      	str	r3, [r7, #16]
			*pXTalkCompensationRateMegaCps = TempFix1616;
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	693a      	ldr	r2, [r7, #16]
 80086da:	601a      	str	r2, [r3, #0]
			VL53L0X_SETPARAMETERFIELD(Dev,
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	693a      	ldr	r2, [r7, #16]
 80086e0:	621a      	str	r2, [r3, #32]
				XTalkCompensationRateMegaCps, TempFix1616);
			VL53L0X_SETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	771a      	strb	r2, [r3, #28]
				1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80086e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3718      	adds	r7, #24
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <VL53L0X_SetLimitCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_SetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t LimitCheckEnable)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b086      	sub	sp, #24
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	807b      	strh	r3, [r7, #2]
 8008700:	4613      	mov	r3, r2
 8008702:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008704:	2300      	movs	r3, #0
 8008706:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t TempFix1616 = 0;
 8008708:	2300      	movs	r3, #0
 800870a:	613b      	str	r3, [r7, #16]
	uint8_t LimitCheckEnableInt = 0;
 800870c:	2300      	movs	r3, #0
 800870e:	73fb      	strb	r3, [r7, #15]
	uint8_t LimitCheckDisable = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	73bb      	strb	r3, [r7, #14]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 8008714:	887b      	ldrh	r3, [r7, #2]
 8008716:	2b05      	cmp	r3, #5
 8008718:	d902      	bls.n	8008720 <VL53L0X_SetLimitCheckEnable+0x2c>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800871a:	23fc      	movs	r3, #252	; 0xfc
 800871c:	75fb      	strb	r3, [r7, #23]
 800871e:	e05b      	b.n	80087d8 <VL53L0X_SetLimitCheckEnable+0xe4>
	} else {
		if (LimitCheckEnable == 0) {
 8008720:	787b      	ldrb	r3, [r7, #1]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d106      	bne.n	8008734 <VL53L0X_SetLimitCheckEnable+0x40>
			TempFix1616 = 0;
 8008726:	2300      	movs	r3, #0
 8008728:	613b      	str	r3, [r7, #16]
			LimitCheckEnableInt = 0;
 800872a:	2300      	movs	r3, #0
 800872c:	73fb      	strb	r3, [r7, #15]
			LimitCheckDisable = 1;
 800872e:	2301      	movs	r3, #1
 8008730:	73bb      	strb	r3, [r7, #14]
 8008732:	e00a      	b.n	800874a <VL53L0X_SetLimitCheckEnable+0x56>

		} else {
			VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008734:	887b      	ldrh	r3, [r7, #2]
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	330c      	adds	r3, #12
 800873a:	009b      	lsls	r3, r3, #2
 800873c:	4413      	add	r3, r2
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	613b      	str	r3, [r7, #16]
				LimitCheckId, TempFix1616);
			LimitCheckDisable = 0;
 8008742:	2300      	movs	r3, #0
 8008744:	73bb      	strb	r3, [r7, #14]
			/* this to be sure to have either 0 or 1 */
			LimitCheckEnableInt = 1;
 8008746:	2301      	movs	r3, #1
 8008748:	73fb      	strb	r3, [r7, #15]
		}

		switch (LimitCheckId) {
 800874a:	887b      	ldrh	r3, [r7, #2]
 800874c:	2b05      	cmp	r3, #5
 800874e:	d841      	bhi.n	80087d4 <VL53L0X_SetLimitCheckEnable+0xe0>
 8008750:	a201      	add	r2, pc, #4	; (adr r2, 8008758 <VL53L0X_SetLimitCheckEnable+0x64>)
 8008752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008756:	bf00      	nop
 8008758:	08008771 	.word	0x08008771
 800875c:	0800877b 	.word	0x0800877b
 8008760:	08008791 	.word	0x08008791
 8008764:	0800879b 	.word	0x0800879b
 8008768:	080087a5 	.word	0x080087a5
 800876c:	080087bd 	.word	0x080087bd

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7bfa      	ldrb	r2, [r7, #15]
 8008774:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckEnableInt);

			break;
 8008778:	e02e      	b.n	80087d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(TempFix1616));
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 800877e:	b29b      	uxth	r3, r3
 8008780:	461a      	mov	r2, r3
 8008782:	2144      	movs	r1, #68	; 0x44
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f004 f97b 	bl	800ca80 <VL53L0X_WrWord>
 800878a:	4603      	mov	r3, r0
 800878c:	75fb      	strb	r3, [r7, #23]

			break;
 800878e:	e023      	b.n	80087d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	7bfa      	ldrb	r2, [r7, #15]
 8008794:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckEnableInt);

			break;
 8008798:	e01e      	b.n	80087d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	7bfa      	ldrb	r2, [r7, #15]
 800879e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckEnableInt);

			break;
 80087a2:	e019      	b.n	80087d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:

			Temp8 = (uint8_t)(LimitCheckDisable << 1);
 80087a4:	7bbb      	ldrb	r3, [r7, #14]
 80087a6:	005b      	lsls	r3, r3, #1
 80087a8:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80087aa:	7b7b      	ldrb	r3, [r7, #13]
 80087ac:	22fe      	movs	r2, #254	; 0xfe
 80087ae:	2160      	movs	r1, #96	; 0x60
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f004 f98f 	bl	800cad4 <VL53L0X_UpdateByte>
 80087b6:	4603      	mov	r3, r0
 80087b8:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xFE, Temp8);

			break;
 80087ba:	e00d      	b.n	80087d8 <VL53L0X_SetLimitCheckEnable+0xe4>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Temp8 = (uint8_t)(LimitCheckDisable << 4);
 80087bc:	7bbb      	ldrb	r3, [r7, #14]
 80087be:	011b      	lsls	r3, r3, #4
 80087c0:	737b      	strb	r3, [r7, #13]
			Status = VL53L0X_UpdateByte(Dev,
 80087c2:	7b7b      	ldrb	r3, [r7, #13]
 80087c4:	22ef      	movs	r2, #239	; 0xef
 80087c6:	2160      	movs	r1, #96	; 0x60
 80087c8:	6878      	ldr	r0, [r7, #4]
 80087ca:	f004 f983 	bl	800cad4 <VL53L0X_UpdateByte>
 80087ce:	4603      	mov	r3, r0
 80087d0:	75fb      	strb	r3, [r7, #23]
				VL53L0X_REG_MSRC_CONFIG_CONTROL,
				0xEF, Temp8);

			break;
 80087d2:	e001      	b.n	80087d8 <VL53L0X_SetLimitCheckEnable+0xe4>


		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80087d4:	23fc      	movs	r3, #252	; 0xfc
 80087d6:	75fb      	strb	r3, [r7, #23]

		}

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80087d8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10f      	bne.n	8008800 <VL53L0X_SetLimitCheckEnable+0x10c>
		if (LimitCheckEnable == 0) {
 80087e0:	787b      	ldrb	r3, [r7, #1]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d106      	bne.n	80087f4 <VL53L0X_SetLimitCheckEnable+0x100>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80087e6:	887b      	ldrh	r3, [r7, #2]
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4413      	add	r3, r2
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80087f2:	e005      	b.n	8008800 <VL53L0X_SetLimitCheckEnable+0x10c>
				LimitCheckId, 0);
		} else {
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 80087f4:	887b      	ldrh	r3, [r7, #2]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	4413      	add	r3, r2
 80087fa:	2201      	movs	r2, #1
 80087fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				LimitCheckId, 1);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008804:	4618      	mov	r0, r3
 8008806:	3718      	adds	r7, #24
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <VL53L0X_GetLimitCheckEnable>:

VL53L0X_Error VL53L0X_GetLimitCheckEnable(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	uint8_t *pLimitCheckEnable)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	460b      	mov	r3, r1
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800881a:	2300      	movs	r3, #0
 800881c:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	if (LimitCheckId >= VL53L0X_CHECKENABLE_NUMBER_OF_CHECKS) {
 800881e:	897b      	ldrh	r3, [r7, #10]
 8008820:	2b05      	cmp	r3, #5
 8008822:	d905      	bls.n	8008830 <VL53L0X_GetLimitCheckEnable+0x24>
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 8008824:	23fc      	movs	r3, #252	; 0xfc
 8008826:	75fb      	strb	r3, [r7, #23]
		*pLimitCheckEnable = 0;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	701a      	strb	r2, [r3, #0]
 800882e:	e008      	b.n	8008842 <VL53L0X_GetLimitCheckEnable+0x36>
	} else {
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable,
 8008830:	897b      	ldrh	r3, [r7, #10]
 8008832:	68fa      	ldr	r2, [r7, #12]
 8008834:	4413      	add	r3, r2
 8008836:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800883a:	75bb      	strb	r3, [r7, #22]
			LimitCheckId, Temp8);
		*pLimitCheckEnable = Temp8;
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7dba      	ldrb	r2, [r7, #22]
 8008840:	701a      	strb	r2, [r3, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008846:	4618      	mov	r0, r3
 8008848:	371c      	adds	r7, #28
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
	...

08008854 <VL53L0X_SetLimitCheckValue>:

VL53L0X_Error VL53L0X_SetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t LimitCheckValue)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b086      	sub	sp, #24
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	460b      	mov	r3, r1
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]
	uint8_t Temp8;

	LOG_FUNCTION_START("");

	VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksEnable, LimitCheckId,
 8008866:	897b      	ldrh	r3, [r7, #10]
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4413      	add	r3, r2
 800886c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008870:	75bb      	strb	r3, [r7, #22]
		Temp8);

	if (Temp8 == 0) { /* disabled write only internal value */
 8008872:	7dbb      	ldrb	r3, [r7, #22]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d107      	bne.n	8008888 <VL53L0X_SetLimitCheckValue+0x34>
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008878:	897b      	ldrh	r3, [r7, #10]
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	330c      	adds	r3, #12
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	687a      	ldr	r2, [r7, #4]
 8008884:	605a      	str	r2, [r3, #4]
 8008886:	e040      	b.n	800890a <VL53L0X_SetLimitCheckValue+0xb6>
			LimitCheckId, LimitCheckValue);
	} else {

		switch (LimitCheckId) {
 8008888:	897b      	ldrh	r3, [r7, #10]
 800888a:	2b05      	cmp	r3, #5
 800888c:	d830      	bhi.n	80088f0 <VL53L0X_SetLimitCheckValue+0x9c>
 800888e:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <VL53L0X_SetLimitCheckValue+0x40>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	080088ad 	.word	0x080088ad
 8008898:	080088b5 	.word	0x080088b5
 800889c:	080088cb 	.word	0x080088cb
 80088a0:	080088d3 	.word	0x080088d3
 80088a4:	080088db 	.word	0x080088db
 80088a8:	080088db 	.word	0x080088db

		case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	687a      	ldr	r2, [r7, #4]
 80088b0:	635a      	str	r2, [r3, #52]	; 0x34
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				LimitCheckValue);
			break;
 80088b2:	e01f      	b.n	80088f4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:

			Status = VL53L0X_WrWord(Dev,
			VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80088b8:	b29b      	uxth	r3, r3
 80088ba:	461a      	mov	r2, r3
 80088bc:	2144      	movs	r1, #68	; 0x44
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f004 f8de 	bl	800ca80 <VL53L0X_WrWord>
 80088c4:	4603      	mov	r3, r0
 80088c6:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80088c8:	e014      	b.n	80088f4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	63da      	str	r2, [r3, #60]	; 0x3c
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				LimitCheckValue);

			break;
 80088d0:	e010      	b.n	80088f4 <VL53L0X_SetLimitCheckValue+0xa0>

		case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:

			/* internal computation: */
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	641a      	str	r2, [r3, #64]	; 0x40
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				LimitCheckValue);

			break;
 80088d8:	e00c      	b.n	80088f4 <VL53L0X_SetLimitCheckValue+0xa0>
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
		case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:

			Status = VL53L0X_WrWord(Dev,
				VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
				VL53L0X_FIXPOINT1616TOFIXPOINT97(
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	0a5b      	lsrs	r3, r3, #9
			Status = VL53L0X_WrWord(Dev,
 80088de:	b29b      	uxth	r3, r3
 80088e0:	461a      	mov	r2, r3
 80088e2:	2164      	movs	r1, #100	; 0x64
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f004 f8cb 	bl	800ca80 <VL53L0X_WrWord>
 80088ea:	4603      	mov	r3, r0
 80088ec:	75fb      	strb	r3, [r7, #23]
					LimitCheckValue));

			break;
 80088ee:	e001      	b.n	80088f4 <VL53L0X_SetLimitCheckValue+0xa0>

		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 80088f0:	23fc      	movs	r3, #252	; 0xfc
 80088f2:	75fb      	strb	r3, [r7, #23]

		}

		if (Status == VL53L0X_ERROR_NONE) {
 80088f4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d106      	bne.n	800890a <VL53L0X_SetLimitCheckValue+0xb6>
			VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 80088fc:	897b      	ldrh	r3, [r7, #10]
 80088fe:	68fa      	ldr	r2, [r7, #12]
 8008900:	330c      	adds	r3, #12
 8008902:	009b      	lsls	r3, r3, #2
 8008904:	4413      	add	r3, r2
 8008906:	687a      	ldr	r2, [r7, #4]
 8008908:	605a      	str	r2, [r3, #4]
				LimitCheckId, LimitCheckValue);
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800890a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800890e:	4618      	mov	r0, r3
 8008910:	3718      	adds	r7, #24
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop

08008918 <VL53L0X_GetLimitCheckValue>:

VL53L0X_Error VL53L0X_GetLimitCheckValue(VL53L0X_DEV Dev, uint16_t LimitCheckId,
	FixPoint1616_t *pLimitCheckValue)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b088      	sub	sp, #32
 800891c:	af00      	add	r7, sp, #0
 800891e:	60f8      	str	r0, [r7, #12]
 8008920:	460b      	mov	r3, r1
 8008922:	607a      	str	r2, [r7, #4]
 8008924:	817b      	strh	r3, [r7, #10]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008926:	2300      	movs	r3, #0
 8008928:	77fb      	strb	r3, [r7, #31]
	uint8_t EnableZeroValue = 0;
 800892a:	2300      	movs	r3, #0
 800892c:	77bb      	strb	r3, [r7, #30]
	uint16_t Temp16;
	FixPoint1616_t TempFix1616;

	LOG_FUNCTION_START("");

	switch (LimitCheckId) {
 800892e:	897b      	ldrh	r3, [r7, #10]
 8008930:	2b05      	cmp	r3, #5
 8008932:	d847      	bhi.n	80089c4 <VL53L0X_GetLimitCheckValue+0xac>
 8008934:	a201      	add	r2, pc, #4	; (adr r2, 800893c <VL53L0X_GetLimitCheckValue+0x24>)
 8008936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893a:	bf00      	nop
 800893c:	08008955 	.word	0x08008955
 8008940:	08008961 	.word	0x08008961
 8008944:	08008987 	.word	0x08008987
 8008948:	08008993 	.word	0x08008993
 800894c:	0800899f 	.word	0x0800899f
 8008950:	0800899f 	.word	0x0800899f

	case VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008958:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, TempFix1616);
		EnableZeroValue = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	77bb      	strb	r3, [r7, #30]
		break;
 800895e:	e033      	b.n	80089c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE:
		Status = VL53L0X_RdWord(Dev,
 8008960:	f107 0316 	add.w	r3, r7, #22
 8008964:	461a      	mov	r2, r3
 8008966:	2144      	movs	r1, #68	; 0x44
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f003 fff1 	bl	800c950 <VL53L0X_RdWord>
 800896e:	4603      	mov	r3, r0
 8008970:	77fb      	strb	r3, [r7, #31]
		VL53L0X_REG_FINAL_RANGE_CONFIG_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 8008972:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d102      	bne.n	8008980 <VL53L0X_GetLimitCheckValue+0x68>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 800897a:	8afb      	ldrh	r3, [r7, #22]
 800897c:	025b      	lsls	r3, r3, #9
 800897e:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 1;
 8008980:	2301      	movs	r3, #1
 8008982:	77bb      	strb	r3, [r7, #30]
		break;
 8008984:	e020      	b.n	80089c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800898a:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, TempFix1616);
		EnableZeroValue = 0;
 800898c:	2300      	movs	r3, #0
 800898e:	77bb      	strb	r3, [r7, #30]
		break;
 8008990:	e01a      	b.n	80089c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD:
		/* internal computation: */
		VL53L0X_GETARRAYPARAMETERFIELD(Dev, LimitChecksValue,
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008996:	61bb      	str	r3, [r7, #24]
			VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD, TempFix1616);
		EnableZeroValue = 0;
 8008998:	2300      	movs	r3, #0
 800899a:	77bb      	strb	r3, [r7, #30]
		break;
 800899c:	e014      	b.n	80089c8 <VL53L0X_GetLimitCheckValue+0xb0>

	case VL53L0X_CHECKENABLE_SIGNAL_RATE_MSRC:
	case VL53L0X_CHECKENABLE_SIGNAL_RATE_PRE_RANGE:
		Status = VL53L0X_RdWord(Dev,
 800899e:	f107 0316 	add.w	r3, r7, #22
 80089a2:	461a      	mov	r2, r3
 80089a4:	2164      	movs	r1, #100	; 0x64
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f003 ffd2 	bl	800c950 <VL53L0X_RdWord>
 80089ac:	4603      	mov	r3, r0
 80089ae:	77fb      	strb	r3, [r7, #31]
			VL53L0X_REG_PRE_RANGE_MIN_COUNT_RATE_RTN_LIMIT,
			&Temp16);
		if (Status == VL53L0X_ERROR_NONE)
 80089b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d102      	bne.n	80089be <VL53L0X_GetLimitCheckValue+0xa6>
			TempFix1616 = VL53L0X_FIXPOINT97TOFIXPOINT1616(Temp16);
 80089b8:	8afb      	ldrh	r3, [r7, #22]
 80089ba:	025b      	lsls	r3, r3, #9
 80089bc:	61bb      	str	r3, [r7, #24]


		EnableZeroValue = 0;
 80089be:	2300      	movs	r3, #0
 80089c0:	77bb      	strb	r3, [r7, #30]
		break;
 80089c2:	e001      	b.n	80089c8 <VL53L0X_GetLimitCheckValue+0xb0>

	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 80089c4:	23fc      	movs	r3, #252	; 0xfc
 80089c6:	77fb      	strb	r3, [r7, #31]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 80089c8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d12a      	bne.n	8008a26 <VL53L0X_GetLimitCheckValue+0x10e>

		if (EnableZeroValue == 1) {
 80089d0:	7fbb      	ldrb	r3, [r7, #30]
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d124      	bne.n	8008a20 <VL53L0X_GetLimitCheckValue+0x108>

			if (TempFix1616 == 0) {
 80089d6:	69bb      	ldr	r3, [r7, #24]
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d110      	bne.n	80089fe <VL53L0X_GetLimitCheckValue+0xe6>
				/* disabled: return value from memory */
				VL53L0X_GETARRAYPARAMETERFIELD(Dev,
 80089dc:	897b      	ldrh	r3, [r7, #10]
 80089de:	68fa      	ldr	r2, [r7, #12]
 80089e0:	330c      	adds	r3, #12
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	4413      	add	r3, r2
 80089e6:	685b      	ldr	r3, [r3, #4]
 80089e8:	61bb      	str	r3, [r7, #24]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				*pLimitCheckValue = TempFix1616;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	69ba      	ldr	r2, [r7, #24]
 80089ee:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 80089f0:	897b      	ldrh	r3, [r7, #10]
 80089f2:	68fa      	ldr	r2, [r7, #12]
 80089f4:	4413      	add	r3, r2
 80089f6:	2200      	movs	r2, #0
 80089f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80089fc:	e013      	b.n	8008a26 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 0);
			} else {
				*pLimitCheckValue = TempFix1616;
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	601a      	str	r2, [r3, #0]
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008a04:	897b      	ldrh	r3, [r7, #10]
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	330c      	adds	r3, #12
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	4413      	add	r3, r2
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	605a      	str	r2, [r3, #4]
					LimitChecksValue, LimitCheckId,
					TempFix1616);
				VL53L0X_SETARRAYPARAMETERFIELD(Dev,
 8008a12:	897b      	ldrh	r3, [r7, #10]
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4413      	add	r3, r2
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8008a1e:	e002      	b.n	8008a26 <VL53L0X_GetLimitCheckValue+0x10e>
					LimitChecksEnable, LimitCheckId, 1);
			}
		} else {
			*pLimitCheckValue = TempFix1616;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69ba      	ldr	r2, [r7, #24]
 8008a24:	601a      	str	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a26:	f997 301f 	ldrsb.w	r3, [r7, #31]

}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3720      	adds	r7, #32
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
 8008a32:	bf00      	nop

08008a34 <VL53L0X_GetWrapAroundCheckEnable>:
	return Status;
}

VL53L0X_Error VL53L0X_GetWrapAroundCheckEnable(VL53L0X_DEV Dev,
	uint8_t *pWrapAroundCheckEnable)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, &data);
 8008a42:	f107 030e 	add.w	r3, r7, #14
 8008a46:	461a      	mov	r2, r3
 8008a48:	2101      	movs	r1, #1
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f003 fef9 	bl	800c842 <VL53L0X_RdByte>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]
	if (Status == VL53L0X_ERROR_NONE) {
 8008a54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10e      	bne.n	8008a7a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		PALDevDataSet(Dev, SequenceConfig, data);
 8008a5c:	7bba      	ldrb	r2, [r7, #14]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
		if (data & (0x01 << 7))
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	b25b      	sxtb	r3, r3
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	da03      	bge.n	8008a74 <VL53L0X_GetWrapAroundCheckEnable+0x40>
			*pWrapAroundCheckEnable = 0x01;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2201      	movs	r2, #1
 8008a70:	701a      	strb	r2, [r3, #0]
 8008a72:	e002      	b.n	8008a7a <VL53L0X_GetWrapAroundCheckEnable+0x46>
		else
			*pWrapAroundCheckEnable = 0x00;
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2200      	movs	r2, #0
 8008a78:	701a      	strb	r2, [r3, #0]
	}
	if (Status == VL53L0X_ERROR_NONE) {
 8008a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d104      	bne.n	8008a8c <VL53L0X_GetWrapAroundCheckEnable+0x58>
		VL53L0X_SETPARAMETERFIELD(Dev, WrapAroundCheckEnable,
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781a      	ldrb	r2, [r3, #0]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
			*pWrapAroundCheckEnable);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a90:	4618      	mov	r0, r3
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <VL53L0X_PerformSingleMeasurement>:

/* End Group PAL Parameters Functions */

/* Group PAL Measurement Functions */
VL53L0X_Error VL53L0X_PerformSingleMeasurement(VL53L0X_DEV Dev)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
	VL53L0X_DeviceModes DeviceMode;

	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	Status = VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008aa4:	f107 030e 	add.w	r3, r7, #14
 8008aa8:	4619      	mov	r1, r3
 8008aaa:	6878      	ldr	r0, [r7, #4]
 8008aac:	f7ff fb92 	bl	80081d4 <VL53L0X_GetDeviceMode>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73fb      	strb	r3, [r7, #15]

	/* Start immediately to run a single ranging measurement in case of
	 * single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d107      	bne.n	8008acc <VL53L0X_PerformSingleMeasurement+0x34>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008abc:	7bbb      	ldrb	r3, [r7, #14]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d104      	bne.n	8008acc <VL53L0X_PerformSingleMeasurement+0x34>
		Status = VL53L0X_StartMeasurement(Dev);
 8008ac2:	6878      	ldr	r0, [r7, #4]
 8008ac4:	f000 f898 	bl	8008bf8 <VL53L0X_StartMeasurement>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8008acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d104      	bne.n	8008ade <VL53L0X_PerformSingleMeasurement+0x46>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8008ad4:	6878      	ldr	r0, [r7, #4]
 8008ad6:	f001 fb09 	bl	800a0ec <VL53L0X_measurement_poll_for_completion>
 8008ada:	4603      	mov	r3, r0
 8008adc:	73fb      	strb	r3, [r7, #15]


	/* Change PAL State in case of single ranging or single histogram */
	if (Status == VL53L0X_ERROR_NONE
 8008ade:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d106      	bne.n	8008af4 <VL53L0X_PerformSingleMeasurement+0x5c>
		&& DeviceMode == VL53L0X_DEVICEMODE_SINGLE_RANGING)
 8008ae6:	7bbb      	ldrb	r3, [r7, #14]
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d103      	bne.n	8008af4 <VL53L0X_PerformSingleMeasurement+0x5c>
		PALDevDataSet(Dev, PalState, VL53L0X_STATE_IDLE);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2203      	movs	r2, #3
 8008af0:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132


	LOG_FUNCTION_END(Status);
	return Status;
 8008af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3710      	adds	r7, #16
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <VL53L0X_PerformRefCalibration>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefCalibration(VL53L0X_DEV Dev, uint8_t *pVhvSettings,
	uint8_t *pPhaseCal)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b086      	sub	sp, #24
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b0c:	2300      	movs	r3, #0
 8008b0e:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_calibration(Dev, pVhvSettings,
 8008b10:	2301      	movs	r3, #1
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	f001 faab 	bl	800a072 <VL53L0X_perform_ref_calibration>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	75fb      	strb	r3, [r7, #23]
		pPhaseCal, 1);

	LOG_FUNCTION_END(Status);
	return Status;
 8008b20:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3718      	adds	r7, #24
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}

08008b2c <VL53L0X_CheckAndLoadInterruptSettings>:
	return Status;
}

VL53L0X_Error VL53L0X_CheckAndLoadInterruptSettings(VL53L0X_DEV Dev,
	uint8_t StartNotStopFlag)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b086      	sub	sp, #24
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
 8008b34:	460b      	mov	r3, r1
 8008b36:	70fb      	strb	r3, [r7, #3]
	uint8_t InterruptConfig;
	FixPoint1616_t ThresholdLow;
	FixPoint1616_t ThresholdHigh;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008b38:	2300      	movs	r3, #0
 8008b3a:	75fb      	strb	r3, [r7, #23]

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008b42:	75bb      	strb	r3, [r7, #22]
		Pin0GpioFunctionality);

	if ((InterruptConfig ==
 8008b44:	7dbb      	ldrb	r3, [r7, #22]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d005      	beq.n	8008b56 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW) ||
 8008b4a:	7dbb      	ldrb	r3, [r7, #22]
 8008b4c:	2b02      	cmp	r3, #2
 8008b4e:	d002      	beq.n	8008b56 <VL53L0X_CheckAndLoadInterruptSettings+0x2a>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH) ||
 8008b50:	7dbb      	ldrb	r3, [r7, #22]
 8008b52:	2b03      	cmp	r3, #3
 8008b54:	d147      	bne.n	8008be6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
		(InterruptConfig ==
		VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT)) {

		Status = VL53L0X_GetInterruptThresholds(Dev,
 8008b56:	f107 030c 	add.w	r3, r7, #12
 8008b5a:	f107 0210 	add.w	r2, r7, #16
 8008b5e:	2101      	movs	r1, #1
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	f000 fb8d 	bl	8009280 <VL53L0X_GetInterruptThresholds>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75fb      	strb	r3, [r7, #23]
			VL53L0X_DEVICEMODE_CONTINUOUS_RANGING,
			&ThresholdLow, &ThresholdHigh);

		if (((ThresholdLow > 255*65536) ||
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008b70:	d803      	bhi.n	8008b7a <VL53L0X_CheckAndLoadInterruptSettings+0x4e>
			(ThresholdHigh > 255*65536)) &&
 8008b72:	68fb      	ldr	r3, [r7, #12]
		if (((ThresholdLow > 255*65536) ||
 8008b74:	f5b3 0f7f 	cmp.w	r3, #16711680	; 0xff0000
 8008b78:	d935      	bls.n	8008be6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(ThresholdHigh > 255*65536)) &&
 8008b7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d131      	bne.n	8008be6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
			(Status == VL53L0X_ERROR_NONE)) {

			if (StartNotStopFlag != 0) {
 8008b82:	78fb      	ldrb	r3, [r7, #3]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d006      	beq.n	8008b96 <VL53L0X_CheckAndLoadInterruptSettings+0x6a>
				Status = VL53L0X_load_tuning_settings(Dev,
 8008b88:	491a      	ldr	r1, [pc, #104]	; (8008bf4 <VL53L0X_CheckAndLoadInterruptSettings+0xc8>)
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f002 ff22 	bl	800b9d4 <VL53L0X_load_tuning_settings>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]
 8008b94:	e027      	b.n	8008be6 <VL53L0X_CheckAndLoadInterruptSettings+0xba>
					InterruptThresholdSettings);
			} else {
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x04);
 8008b96:	2204      	movs	r2, #4
 8008b98:	21ff      	movs	r1, #255	; 0xff
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f003 ff4c 	bl	800ca38 <VL53L0X_WrByte>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x70, 0x00);
 8008baa:	2200      	movs	r2, #0
 8008bac:	2170      	movs	r1, #112	; 0x70
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f003 ff42 	bl	800ca38 <VL53L0X_WrByte>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	21ff      	movs	r1, #255	; 0xff
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f003 ff38 	bl	800ca38 <VL53L0X_WrByte>
 8008bc8:	4603      	mov	r3, r0
 8008bca:	461a      	mov	r2, r3
 8008bcc:	7dfb      	ldrb	r3, [r7, #23]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	75fb      	strb	r3, [r7, #23]
				Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2180      	movs	r1, #128	; 0x80
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f003 ff2e 	bl	800ca38 <VL53L0X_WrByte>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	461a      	mov	r2, r3
 8008be0:	7dfb      	ldrb	r3, [r7, #23]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	75fb      	strb	r3, [r7, #23]
		}


	}

	return Status;
 8008be6:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	2000069c 	.word	0x2000069c

08008bf8 <VL53L0X_StartMeasurement>:


VL53L0X_Error VL53L0X_StartMeasurement(VL53L0X_DEV Dev)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b086      	sub	sp, #24
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008c00:	2300      	movs	r3, #0
 8008c02:	75fb      	strb	r3, [r7, #23]
	VL53L0X_DeviceModes DeviceMode;
	uint8_t Byte;
	uint8_t StartStopByte = VL53L0X_REG_SYSRANGE_MODE_START_STOP;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	/* Get Current DeviceMode */
	VL53L0X_GetDeviceMode(Dev, &DeviceMode);
 8008c08:	f107 030e 	add.w	r3, r7, #14
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f7ff fae0 	bl	80081d4 <VL53L0X_GetDeviceMode>

	switch (DeviceMode) {
 8008c14:	7bbb      	ldrb	r3, [r7, #14]
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d052      	beq.n	8008cc0 <VL53L0X_StartMeasurement+0xc8>
 8008c1a:	2b03      	cmp	r3, #3
 8008c1c:	dc6a      	bgt.n	8008cf4 <VL53L0X_StartMeasurement+0xfc>
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d002      	beq.n	8008c28 <VL53L0X_StartMeasurement+0x30>
 8008c22:	2b01      	cmp	r3, #1
 8008c24:	d032      	beq.n	8008c8c <VL53L0X_StartMeasurement+0x94>
 8008c26:	e065      	b.n	8008cf4 <VL53L0X_StartMeasurement+0xfc>
	case VL53L0X_DEVICEMODE_SINGLE_RANGING:
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x01);
 8008c28:	2201      	movs	r2, #1
 8008c2a:	2100      	movs	r1, #0
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f003 ff03 	bl	800ca38 <VL53L0X_WrByte>
 8008c32:	4603      	mov	r3, r0
 8008c34:	75fb      	strb	r3, [r7, #23]

		Byte = StartStopByte;
 8008c36:	7bfb      	ldrb	r3, [r7, #15]
 8008c38:	737b      	strb	r3, [r7, #13]
		if (Status == VL53L0X_ERROR_NONE) {
 8008c3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d15b      	bne.n	8008cfa <VL53L0X_StartMeasurement+0x102>
			/* Wait until start bit has been cleared */
			LoopNb = 0;
 8008c42:	2300      	movs	r3, #0
 8008c44:	613b      	str	r3, [r7, #16]
			do {
				if (LoopNb > 0)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d008      	beq.n	8008c5e <VL53L0X_StartMeasurement+0x66>
					Status = VL53L0X_RdByte(Dev,
 8008c4c:	f107 030d 	add.w	r3, r7, #13
 8008c50:	461a      	mov	r2, r3
 8008c52:	2100      	movs	r1, #0
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f003 fdf4 	bl	800c842 <VL53L0X_RdByte>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	75fb      	strb	r3, [r7, #23]
					VL53L0X_REG_SYSRANGE_START, &Byte);
				LoopNb = LoopNb + 1;
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	3301      	adds	r3, #1
 8008c62:	613b      	str	r3, [r7, #16]
			} while (((Byte & StartStopByte) == StartStopByte)
 8008c64:	7b7a      	ldrb	r2, [r7, #13]
 8008c66:	7bfb      	ldrb	r3, [r7, #15]
 8008c68:	4013      	ands	r3, r2
 8008c6a:	b2db      	uxtb	r3, r3
				&& (Status == VL53L0X_ERROR_NONE)
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008c6c:	7bfa      	ldrb	r2, [r7, #15]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d106      	bne.n	8008c80 <VL53L0X_StartMeasurement+0x88>
				&& (Status == VL53L0X_ERROR_NONE)
 8008c72:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d102      	bne.n	8008c80 <VL53L0X_StartMeasurement+0x88>
				&& (LoopNb < VL53L0X_DEFAULT_MAX_LOOP));
 8008c7a:	693b      	ldr	r3, [r7, #16]
 8008c7c:	2bc7      	cmp	r3, #199	; 0xc7
 8008c7e:	d9e2      	bls.n	8008c46 <VL53L0X_StartMeasurement+0x4e>

			if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 8008c80:	693b      	ldr	r3, [r7, #16]
 8008c82:	2bc7      	cmp	r3, #199	; 0xc7
 8008c84:	d939      	bls.n	8008cfa <VL53L0X_StartMeasurement+0x102>
				Status = VL53L0X_ERROR_TIME_OUT;
 8008c86:	23f9      	movs	r3, #249	; 0xf9
 8008c88:	75fb      	strb	r3, [r7, #23]

		}

		break;
 8008c8a:	e036      	b.n	8008cfa <VL53L0X_StartMeasurement+0x102>
	case VL53L0X_DEVICEMODE_CONTINUOUS_RANGING:
		/* Back-to-back mode */

		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008c8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <VL53L0X_StartMeasurement+0xa8>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008c94:	2101      	movs	r1, #1
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff ff48 	bl	8008b2c <VL53L0X_CheckAndLoadInterruptSettings>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008ca0:	2202      	movs	r2, #2
 8008ca2:	2100      	movs	r1, #0
 8008ca4:	6878      	ldr	r0, [r7, #4]
 8008ca6:	f003 fec7 	bl	800ca38 <VL53L0X_WrByte>
 8008caa:	4603      	mov	r3, r0
 8008cac:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_BACKTOBACK);
		if (Status == VL53L0X_ERROR_NONE) {
 8008cae:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d123      	bne.n	8008cfe <VL53L0X_StartMeasurement+0x106>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	2204      	movs	r2, #4
 8008cba:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008cbe:	e01e      	b.n	8008cfe <VL53L0X_StartMeasurement+0x106>
	case VL53L0X_DEVICEMODE_CONTINUOUS_TIMED_RANGING:
		/* Continuous mode */
		/* Check if need to apply interrupt settings */
		if (Status == VL53L0X_ERROR_NONE)
 8008cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d105      	bne.n	8008cd4 <VL53L0X_StartMeasurement+0xdc>
			Status = VL53L0X_CheckAndLoadInterruptSettings(Dev, 1);
 8008cc8:	2101      	movs	r1, #1
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f7ff ff2e 	bl	8008b2c <VL53L0X_CheckAndLoadInterruptSettings>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75fb      	strb	r3, [r7, #23]

		Status = VL53L0X_WrByte(Dev,
 8008cd4:	2204      	movs	r2, #4
 8008cd6:	2100      	movs	r1, #0
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f003 fead 	bl	800ca38 <VL53L0X_WrByte>
 8008cde:	4603      	mov	r3, r0
 8008ce0:	75fb      	strb	r3, [r7, #23]
		VL53L0X_REG_SYSRANGE_START,
		VL53L0X_REG_SYSRANGE_MODE_TIMED);

		if (Status == VL53L0X_ERROR_NONE) {
 8008ce2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d10b      	bne.n	8008d02 <VL53L0X_StartMeasurement+0x10a>
			/* Set PAL State to Running */
			PALDevDataSet(Dev, PalState, VL53L0X_STATE_RUNNING);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2204      	movs	r2, #4
 8008cee:	f883 2132 	strb.w	r2, [r3, #306]	; 0x132
		}
		break;
 8008cf2:	e006      	b.n	8008d02 <VL53L0X_StartMeasurement+0x10a>
	default:
		/* Selected mode not supported */
		Status = VL53L0X_ERROR_MODE_NOT_SUPPORTED;
 8008cf4:	23f8      	movs	r3, #248	; 0xf8
 8008cf6:	75fb      	strb	r3, [r7, #23]
 8008cf8:	e004      	b.n	8008d04 <VL53L0X_StartMeasurement+0x10c>
		break;
 8008cfa:	bf00      	nop
 8008cfc:	e002      	b.n	8008d04 <VL53L0X_StartMeasurement+0x10c>
		break;
 8008cfe:	bf00      	nop
 8008d00:	e000      	b.n	8008d04 <VL53L0X_StartMeasurement+0x10c>
		break;
 8008d02:	bf00      	nop
	}


	LOG_FUNCTION_END(Status);
	return Status;
 8008d04:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008d08:	4618      	mov	r0, r3
 8008d0a:	3718      	adds	r7, #24
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	bd80      	pop	{r7, pc}

08008d10 <VL53L0X_GetMeasurementDataReady>:
	return Status;
}

VL53L0X_Error VL53L0X_GetMeasurementDataReady(VL53L0X_DEV Dev,
	uint8_t *pMeasurementDataReady)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	73fb      	strb	r3, [r7, #15]
	uint8_t SysRangeStatusRegister;
	uint8_t InterruptConfig;
	uint32_t InterruptMask;
	LOG_FUNCTION_START("");

	InterruptConfig = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 30da 	ldrb.w	r3, [r3, #218]	; 0xda
 8008d24:	73bb      	strb	r3, [r7, #14]
		Pin0GpioFunctionality);

	if (InterruptConfig ==
 8008d26:	7bbb      	ldrb	r3, [r7, #14]
 8008d28:	2b04      	cmp	r3, #4
 8008d2a:	d112      	bne.n	8008d52 <VL53L0X_GetMeasurementDataReady+0x42>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY) {
		Status = VL53L0X_GetInterruptMaskStatus(Dev, &InterruptMask);
 8008d2c:	f107 0308 	add.w	r3, r7, #8
 8008d30:	4619      	mov	r1, r3
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 fb1a 	bl	800936c <VL53L0X_GetInterruptMaskStatus>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	73fb      	strb	r3, [r7, #15]
		if (InterruptMask ==
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	2b04      	cmp	r3, #4
 8008d40:	d103      	bne.n	8008d4a <VL53L0X_GetMeasurementDataReady+0x3a>
		VL53L0X_REG_SYSTEM_INTERRUPT_GPIO_NEW_SAMPLE_READY)
			*pMeasurementDataReady = 1;
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	2201      	movs	r2, #1
 8008d46:	701a      	strb	r2, [r3, #0]
 8008d48:	e01c      	b.n	8008d84 <VL53L0X_GetMeasurementDataReady+0x74>
		else
			*pMeasurementDataReady = 0;
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	701a      	strb	r2, [r3, #0]
 8008d50:	e018      	b.n	8008d84 <VL53L0X_GetMeasurementDataReady+0x74>
	} else {
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_RANGE_STATUS,
 8008d52:	f107 030d 	add.w	r3, r7, #13
 8008d56:	461a      	mov	r2, r3
 8008d58:	2114      	movs	r1, #20
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f003 fd71 	bl	800c842 <VL53L0X_RdByte>
 8008d60:	4603      	mov	r3, r0
 8008d62:	73fb      	strb	r3, [r7, #15]
			&SysRangeStatusRegister);
		if (Status == VL53L0X_ERROR_NONE) {
 8008d64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d10b      	bne.n	8008d84 <VL53L0X_GetMeasurementDataReady+0x74>
			if (SysRangeStatusRegister & 0x01)
 8008d6c:	7b7b      	ldrb	r3, [r7, #13]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <VL53L0X_GetMeasurementDataReady+0x6e>
				*pMeasurementDataReady = 1;
 8008d76:	683b      	ldr	r3, [r7, #0]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	701a      	strb	r2, [r3, #0]
 8008d7c:	e002      	b.n	8008d84 <VL53L0X_GetMeasurementDataReady+0x74>
			else
				*pMeasurementDataReady = 0;
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2200      	movs	r2, #0
 8008d82:	701a      	strb	r2, [r3, #0]
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3710      	adds	r7, #16
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <VL53L0X_GetRangingMeasurementData>:
}


VL53L0X_Error VL53L0X_GetRangingMeasurementData(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008d90:	b5b0      	push	{r4, r5, r7, lr}
 8008d92:	b096      	sub	sp, #88	; 0x58
 8008d94:	af02      	add	r7, sp, #8
 8008d96:	6078      	str	r0, [r7, #4]
 8008d98:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	 * use multi read even if some registers are not useful, result will
	 * be more efficient
	 * start reading at 0x14 dec20
	 * end reading at 0x21 dec33 total 14 bytes to read
	 */
	Status = VL53L0X_ReadMulti(Dev, 0x14, localBuffer, 12);
 8008da0:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8008da4:	230c      	movs	r3, #12
 8008da6:	2114      	movs	r1, #20
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f003 fda5 	bl	800c8f8 <VL53L0X_ReadMulti>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	if (Status == VL53L0X_ERROR_NONE) {
 8008db4:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 80d1 	bne.w	8008f60 <VL53L0X_GetRangingMeasurementData+0x1d0>

		pRangingMeasurementData->ZoneId = 0; /* Only one zone */
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	759a      	strb	r2, [r3, #22]
		pRangingMeasurementData->TimeStamp = 0; /* Not Implemented */
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	601a      	str	r2, [r3, #0]

		tmpuint16 = VL53L0X_MAKEUINT16(localBuffer[11], localBuffer[10]);
 8008dca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8008dce:	b29b      	uxth	r3, r3
 8008dd0:	021b      	lsls	r3, r3, #8
 8008dd2:	b29a      	uxth	r2, r3
 8008dd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008dd8:	b29b      	uxth	r3, r3
 8008dda:	4413      	add	r3, r2
 8008ddc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
		/* cut1.1 if SYSTEM__RANGE_CONFIG if 1 range is 2bits fractional
		 *(format 11.2) else no fractional
		 */

		pRangingMeasurementData->MeasurementTimeUsec = 0;
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2200      	movs	r2, #0
 8008de4:	605a      	str	r2, [r3, #4]

		SignalRate = VL53L0X_FIXPOINT97TOFIXPOINT1616(
 8008de6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8008dea:	b29b      	uxth	r3, r3
 8008dec:	021b      	lsls	r3, r3, #8
 8008dee:	b29a      	uxth	r2, r3
 8008df0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008df4:	b29b      	uxth	r3, r3
 8008df6:	4413      	add	r3, r2
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	025b      	lsls	r3, r3, #9
 8008dfc:	647b      	str	r3, [r7, #68]	; 0x44
			VL53L0X_MAKEUINT16(localBuffer[7], localBuffer[6]));
		/* peak_signal_count_rate_rtn_mcps */
		pRangingMeasurementData->SignalRateRtnMegaCps = SignalRate;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008e02:	60da      	str	r2, [r3, #12]

		AmbientRate = VL53L0X_MAKEUINT16(localBuffer[9], localBuffer[8]);
 8008e04:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	021b      	lsls	r3, r3, #8
 8008e0c:	b29a      	uxth	r2, r3
 8008e0e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8008e12:	b29b      	uxth	r3, r3
 8008e14:	4413      	add	r3, r2
 8008e16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		pRangingMeasurementData->AmbientRateRtnMegaCps =
			VL53L0X_FIXPOINT97TOFIXPOINT1616(AmbientRate);
 8008e1a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008e1e:	025b      	lsls	r3, r3, #9
 8008e20:	461a      	mov	r2, r3
		pRangingMeasurementData->AmbientRateRtnMegaCps =
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	611a      	str	r2, [r3, #16]

		EffectiveSpadRtnCount = VL53L0X_MAKEUINT16(localBuffer[3],
 8008e26:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8008e2a:	b29b      	uxth	r3, r3
 8008e2c:	021b      	lsls	r3, r3, #8
 8008e2e:	b29a      	uxth	r2, r3
 8008e30:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	4413      	add	r3, r2
 8008e38:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
			localBuffer[2]);
		/* EffectiveSpadRtnCount is 8.8 format */
		pRangingMeasurementData->EffectiveSpadRtnCount =
 8008e3c:	683b      	ldr	r3, [r7, #0]
 8008e3e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008e42:	829a      	strh	r2, [r3, #20]
			EffectiveSpadRtnCount;

		DeviceRangeStatus = localBuffer[0];
 8008e44:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

		/* Get Linearity Corrective Gain */
		LinearityCorrectiveGain = PALDevDataGet(Dev,
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8b3 314e 	ldrh.w	r3, [r3, #334]	; 0x14e
 8008e52:	87bb      	strh	r3, [r7, #60]	; 0x3c
			LinearityCorrectiveGain);

		/* Get ranging configuration */
		RangeFractionalEnable = PALDevDataGet(Dev,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f893 3131 	ldrb.w	r3, [r3, #305]	; 0x131
 8008e5a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
			RangeFractionalEnable);

		if (LinearityCorrectiveGain != 1000) {
 8008e5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e64:	d046      	beq.n	8008ef4 <VL53L0X_GetRangingMeasurementData+0x164>

			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
				* tmpuint16 + 500) / 1000);
 8008e66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8008e68:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008e6c:	fb02 f303 	mul.w	r3, r2, r3
 8008e70:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8008e74:	4a57      	ldr	r2, [pc, #348]	; (8008fd4 <VL53L0X_GetRangingMeasurementData+0x244>)
 8008e76:	fb82 1203 	smull	r1, r2, r2, r3
 8008e7a:	1192      	asrs	r2, r2, #6
 8008e7c:	17db      	asrs	r3, r3, #31
 8008e7e:	1ad3      	subs	r3, r2, r3
			tmpuint16 = (uint16_t)((LinearityCorrectiveGain
 8008e80:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

			/* Implement Xtalk */
			VL53L0X_GETPARAMETERFIELD(Dev,
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6a1b      	ldr	r3, [r3, #32]
 8008e88:	873b      	strh	r3, [r7, #56]	; 0x38
				XTalkCompensationRateMegaCps,
				XTalkCompensationRateMegaCps);
			VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationEnable,
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	7f1b      	ldrb	r3, [r3, #28]
 8008e8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				XTalkCompensationEnable);

			if (XTalkCompensationEnable) {
 8008e92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d02c      	beq.n	8008ef4 <VL53L0X_GetRangingMeasurementData+0x164>

				if ((SignalRate
					- ((XTalkCompensationRateMegaCps
					* EffectiveSpadRtnCount) >> 8))
 8008e9a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008e9c:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008ea0:	fb02 f303 	mul.w	r3, r2, r3
 8008ea4:	121a      	asrs	r2, r3, #8
					<= 0) {
 8008ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
				if ((SignalRate
 8008ea8:	429a      	cmp	r2, r3
 8008eaa:	d10d      	bne.n	8008ec8 <VL53L0X_GetRangingMeasurementData+0x138>
					if (RangeFractionalEnable)
 8008eac:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d004      	beq.n	8008ebe <VL53L0X_GetRangingMeasurementData+0x12e>
						XtalkRangeMilliMeter = 8888;
 8008eb4:	f242 23b8 	movw	r3, #8888	; 0x22b8
 8008eb8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ebc:	e016      	b.n	8008eec <VL53L0X_GetRangingMeasurementData+0x15c>
					else
						XtalkRangeMilliMeter = 8888
 8008ebe:	f648 23e0 	movw	r3, #35552	; 0x8ae0
 8008ec2:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8008ec6:	e011      	b.n	8008eec <VL53L0X_GetRangingMeasurementData+0x15c>
							<< 2;
				} else {
					XtalkRangeMilliMeter =
					(tmpuint16 * SignalRate)
 8008ec8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008ecc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008ece:	fb02 f203 	mul.w	r2, r2, r3
						/ (SignalRate
						- ((XTalkCompensationRateMegaCps
						* EffectiveSpadRtnCount)
 8008ed2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8008ed4:	f8b7 1040 	ldrh.w	r1, [r7, #64]	; 0x40
 8008ed8:	fb01 f303 	mul.w	r3, r1, r3
						>> 8));
 8008edc:	121b      	asrs	r3, r3, #8
 8008ede:	4619      	mov	r1, r3
						- ((XTalkCompensationRateMegaCps
 8008ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ee2:	1a5b      	subs	r3, r3, r1
						/ (SignalRate
 8008ee4:	fbb2 f3f3 	udiv	r3, r2, r3
					XtalkRangeMilliMeter =
 8008ee8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
				}

				tmpuint16 = XtalkRangeMilliMeter;
 8008eec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8008ef0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
			}

		}

		if (RangeFractionalEnable) {
 8008ef4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00d      	beq.n	8008f18 <VL53L0X_GetRangingMeasurementData+0x188>
			pRangingMeasurementData->RangeMilliMeter =
				(uint16_t)((tmpuint16) >> 2);
 8008efc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008f00:	089b      	lsrs	r3, r3, #2
 8008f02:	b29a      	uxth	r2, r3
			pRangingMeasurementData->RangeMilliMeter =
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart =
				(uint8_t)((tmpuint16 & 0x03) << 6);
 8008f08:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	019b      	lsls	r3, r3, #6
 8008f10:	b2da      	uxtb	r2, r3
			pRangingMeasurementData->RangeFractionalPart =
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	75da      	strb	r2, [r3, #23]
 8008f16:	e006      	b.n	8008f26 <VL53L0X_GetRangingMeasurementData+0x196>
		} else {
			pRangingMeasurementData->RangeMilliMeter = tmpuint16;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8008f1e:	811a      	strh	r2, [r3, #8]
			pRangingMeasurementData->RangeFractionalPart = 0;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2200      	movs	r2, #0
 8008f24:	75da      	strb	r2, [r3, #23]
		 * For a standard definition of RangeStatus, this should
		 * return 0 in case of good result after a ranging
		 * The range status depends on the device so call a device
		 * specific function to obtain the right Status.
		 */
		Status |= VL53L0X_get_pal_range_status(Dev, DeviceRangeStatus,
 8008f26:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8008f2a:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 8008f2e:	f107 0336 	add.w	r3, r7, #54	; 0x36
 8008f32:	9301      	str	r3, [sp, #4]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	9300      	str	r3, [sp, #0]
 8008f38:	4613      	mov	r3, r2
 8008f3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f003 f9ab 	bl	800c298 <VL53L0X_get_pal_range_status>
 8008f42:	4603      	mov	r3, r0
 8008f44:	461a      	mov	r2, r3
 8008f46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			SignalRate, EffectiveSpadRtnCount,
			pRangingMeasurementData, &PalRangeStatus);

		if (Status == VL53L0X_ERROR_NONE)
 8008f50:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d103      	bne.n	8008f60 <VL53L0X_GetRangingMeasurementData+0x1d0>
			pRangingMeasurementData->RangeStatus = PalRangeStatus;
 8008f58:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	761a      	strb	r2, [r3, #24]

	}

	if (Status == VL53L0X_ERROR_NONE) {
 8008f60:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d12f      	bne.n	8008fc8 <VL53L0X_GetRangingMeasurementData+0x238>
		/* Copy last read data into Dev buffer */
		LastRangeDataBuffer = PALDevDataGet(Dev, LastRangeMeasure);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f107 040c 	add.w	r4, r7, #12
 8008f6e:	f103 0550 	add.w	r5, r3, #80	; 0x50
 8008f72:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008f74:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008f76:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008f7a:	e884 0007 	stmia.w	r4, {r0, r1, r2}

		LastRangeDataBuffer.RangeMilliMeter =
			pRangingMeasurementData->RangeMilliMeter;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	891b      	ldrh	r3, [r3, #8]
		LastRangeDataBuffer.RangeMilliMeter =
 8008f82:	82bb      	strh	r3, [r7, #20]
		LastRangeDataBuffer.RangeFractionalPart =
			pRangingMeasurementData->RangeFractionalPart;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	7ddb      	ldrb	r3, [r3, #23]
		LastRangeDataBuffer.RangeFractionalPart =
 8008f88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		LastRangeDataBuffer.RangeDMaxMilliMeter =
			pRangingMeasurementData->RangeDMaxMilliMeter;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	895b      	ldrh	r3, [r3, #10]
		LastRangeDataBuffer.RangeDMaxMilliMeter =
 8008f90:	82fb      	strh	r3, [r7, #22]
		LastRangeDataBuffer.MeasurementTimeUsec =
			pRangingMeasurementData->MeasurementTimeUsec;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
		LastRangeDataBuffer.MeasurementTimeUsec =
 8008f96:	613b      	str	r3, [r7, #16]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
			pRangingMeasurementData->SignalRateRtnMegaCps;
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
		LastRangeDataBuffer.SignalRateRtnMegaCps =
 8008f9c:	61bb      	str	r3, [r7, #24]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
			pRangingMeasurementData->AmbientRateRtnMegaCps;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	691b      	ldr	r3, [r3, #16]
		LastRangeDataBuffer.AmbientRateRtnMegaCps =
 8008fa2:	61fb      	str	r3, [r7, #28]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
			pRangingMeasurementData->EffectiveSpadRtnCount;
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	8a9b      	ldrh	r3, [r3, #20]
		LastRangeDataBuffer.EffectiveSpadRtnCount =
 8008fa8:	843b      	strh	r3, [r7, #32]
		LastRangeDataBuffer.RangeStatus =
			pRangingMeasurementData->RangeStatus;
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	7e1b      	ldrb	r3, [r3, #24]
		LastRangeDataBuffer.RangeStatus =
 8008fae:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

		PALDevDataSet(Dev, LastRangeMeasure, LastRangeDataBuffer);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8008fb8:	f107 050c 	add.w	r5, r7, #12
 8008fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008fc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 8008fc8:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3750      	adds	r7, #80	; 0x50
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8008fd4:	10624dd3 	.word	0x10624dd3

08008fd8 <VL53L0X_PerformSingleRangingMeasurement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformSingleRangingMeasurement(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b084      	sub	sp, #16
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_START("");

	/* This function will do a complete single ranging
	 * Here we fix the mode! */
	Status = VL53L0X_SetDeviceMode(Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING);
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f7ff f8c7 	bl	800817c <VL53L0X_SetDeviceMode>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8008ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d104      	bne.n	8009004 <VL53L0X_PerformSingleRangingMeasurement+0x2c>
		Status = VL53L0X_PerformSingleMeasurement(Dev);
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f7ff fd4c 	bl	8008a98 <VL53L0X_PerformSingleMeasurement>
 8009000:	4603      	mov	r3, r0
 8009002:	73fb      	strb	r3, [r7, #15]


	if (Status == VL53L0X_ERROR_NONE)
 8009004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d105      	bne.n	8009018 <VL53L0X_PerformSingleRangingMeasurement+0x40>
		Status = VL53L0X_GetRangingMeasurementData(Dev,
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff febe 	bl	8008d90 <VL53L0X_GetRangingMeasurementData>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]
			pRangingMeasurementData);


	if (Status == VL53L0X_ERROR_NONE)
 8009018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d105      	bne.n	800902c <VL53L0X_PerformSingleRangingMeasurement+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009020:	2100      	movs	r1, #0
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 f962 	bl	80092ec <VL53L0X_ClearInterruptMask>
 8009028:	4603      	mov	r3, r0
 800902a:	73fb      	strb	r3, [r7, #15]


	LOG_FUNCTION_END(Status);
	return Status;
 800902c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009030:	4618      	mov	r0, r3
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <VL53L0X_SetGpioConfig>:
/* End Group PAL Measurement Functions */

VL53L0X_Error VL53L0X_SetGpioConfig(VL53L0X_DEV Dev, uint8_t Pin,
	VL53L0X_DeviceModes DeviceMode, VL53L0X_GpioFunctionality Functionality,
	VL53L0X_InterruptPolarity Polarity)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	4608      	mov	r0, r1
 8009042:	4611      	mov	r1, r2
 8009044:	461a      	mov	r2, r3
 8009046:	4603      	mov	r3, r0
 8009048:	70fb      	strb	r3, [r7, #3]
 800904a:	460b      	mov	r3, r1
 800904c:	70bb      	strb	r3, [r7, #2]
 800904e:	4613      	mov	r3, r2
 8009050:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009052:	2300      	movs	r3, #0
 8009054:	73fb      	strb	r3, [r7, #15]
	uint8_t data;

	LOG_FUNCTION_START("");

	if (Pin != 0) {
 8009056:	78fb      	ldrb	r3, [r7, #3]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d002      	beq.n	8009062 <VL53L0X_SetGpioConfig+0x2a>
		Status = VL53L0X_ERROR_GPIO_NOT_EXISTING;
 800905c:	23f6      	movs	r3, #246	; 0xf6
 800905e:	73fb      	strb	r3, [r7, #15]
 8009060:	e107      	b.n	8009272 <VL53L0X_SetGpioConfig+0x23a>
	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_DRIVE) {
 8009062:	78bb      	ldrb	r3, [r7, #2]
 8009064:	2b14      	cmp	r3, #20
 8009066:	d110      	bne.n	800908a <VL53L0X_SetGpioConfig+0x52>
		if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 8009068:	7e3b      	ldrb	r3, [r7, #24]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <VL53L0X_SetGpioConfig+0x3c>
			data = 0x10;
 800906e:	2310      	movs	r3, #16
 8009070:	73bb      	strb	r3, [r7, #14]
 8009072:	e001      	b.n	8009078 <VL53L0X_SetGpioConfig+0x40>
		else
			data = 1;
 8009074:	2301      	movs	r3, #1
 8009076:	73bb      	strb	r3, [r7, #14]

		Status = VL53L0X_WrByte(Dev,
 8009078:	7bbb      	ldrb	r3, [r7, #14]
 800907a:	461a      	mov	r2, r3
 800907c:	2184      	movs	r1, #132	; 0x84
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f003 fcda 	bl	800ca38 <VL53L0X_WrByte>
 8009084:	4603      	mov	r3, r0
 8009086:	73fb      	strb	r3, [r7, #15]
 8009088:	e0f3      	b.n	8009272 <VL53L0X_SetGpioConfig+0x23a>
		VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, data);

	} else if (DeviceMode == VL53L0X_DEVICEMODE_GPIO_OSC) {
 800908a:	78bb      	ldrb	r3, [r7, #2]
 800908c:	2b15      	cmp	r3, #21
 800908e:	f040 8097 	bne.w	80091c0 <VL53L0X_SetGpioConfig+0x188>

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009092:	2201      	movs	r2, #1
 8009094:	21ff      	movs	r1, #255	; 0xff
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f003 fcce 	bl	800ca38 <VL53L0X_WrByte>
 800909c:	4603      	mov	r3, r0
 800909e:	461a      	mov	r2, r3
 80090a0:	7bfb      	ldrb	r3, [r7, #15]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80090a6:	2200      	movs	r2, #0
 80090a8:	2100      	movs	r1, #0
 80090aa:	6878      	ldr	r0, [r7, #4]
 80090ac:	f003 fcc4 	bl	800ca38 <VL53L0X_WrByte>
 80090b0:	4603      	mov	r3, r0
 80090b2:	461a      	mov	r2, r3
 80090b4:	7bfb      	ldrb	r3, [r7, #15]
 80090b6:	4313      	orrs	r3, r2
 80090b8:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 80090ba:	2200      	movs	r2, #0
 80090bc:	21ff      	movs	r1, #255	; 0xff
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	f003 fcba 	bl	800ca38 <VL53L0X_WrByte>
 80090c4:	4603      	mov	r3, r0
 80090c6:	461a      	mov	r2, r3
 80090c8:	7bfb      	ldrb	r3, [r7, #15]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 80090ce:	2201      	movs	r2, #1
 80090d0:	2180      	movs	r1, #128	; 0x80
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f003 fcb0 	bl	800ca38 <VL53L0X_WrByte>
 80090d8:	4603      	mov	r3, r0
 80090da:	461a      	mov	r2, r3
 80090dc:	7bfb      	ldrb	r3, [r7, #15]
 80090de:	4313      	orrs	r3, r2
 80090e0:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x85, 0x02);
 80090e2:	2202      	movs	r2, #2
 80090e4:	2185      	movs	r1, #133	; 0x85
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f003 fca6 	bl	800ca38 <VL53L0X_WrByte>
 80090ec:	4603      	mov	r3, r0
 80090ee:	461a      	mov	r2, r3
 80090f0:	7bfb      	ldrb	r3, [r7, #15]
 80090f2:	4313      	orrs	r3, r2
 80090f4:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x04);
 80090f6:	2204      	movs	r2, #4
 80090f8:	21ff      	movs	r1, #255	; 0xff
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f003 fc9c 	bl	800ca38 <VL53L0X_WrByte>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	7bfb      	ldrb	r3, [r7, #15]
 8009106:	4313      	orrs	r3, r2
 8009108:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcd, 0x00);
 800910a:	2200      	movs	r2, #0
 800910c:	21cd      	movs	r1, #205	; 0xcd
 800910e:	6878      	ldr	r0, [r7, #4]
 8009110:	f003 fc92 	bl	800ca38 <VL53L0X_WrByte>
 8009114:	4603      	mov	r3, r0
 8009116:	461a      	mov	r2, r3
 8009118:	7bfb      	ldrb	r3, [r7, #15]
 800911a:	4313      	orrs	r3, r2
 800911c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x11);
 800911e:	2211      	movs	r2, #17
 8009120:	21cc      	movs	r1, #204	; 0xcc
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f003 fc88 	bl	800ca38 <VL53L0X_WrByte>
 8009128:	4603      	mov	r3, r0
 800912a:	461a      	mov	r2, r3
 800912c:	7bfb      	ldrb	r3, [r7, #15]
 800912e:	4313      	orrs	r3, r2
 8009130:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x07);
 8009132:	2207      	movs	r2, #7
 8009134:	21ff      	movs	r1, #255	; 0xff
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f003 fc7e 	bl	800ca38 <VL53L0X_WrByte>
 800913c:	4603      	mov	r3, r0
 800913e:	461a      	mov	r2, r3
 8009140:	7bfb      	ldrb	r3, [r7, #15]
 8009142:	4313      	orrs	r3, r2
 8009144:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xbe, 0x00);
 8009146:	2200      	movs	r2, #0
 8009148:	21be      	movs	r1, #190	; 0xbe
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f003 fc74 	bl	800ca38 <VL53L0X_WrByte>
 8009150:	4603      	mov	r3, r0
 8009152:	461a      	mov	r2, r3
 8009154:	7bfb      	ldrb	r3, [r7, #15]
 8009156:	4313      	orrs	r3, r2
 8009158:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x06);
 800915a:	2206      	movs	r2, #6
 800915c:	21ff      	movs	r1, #255	; 0xff
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f003 fc6a 	bl	800ca38 <VL53L0X_WrByte>
 8009164:	4603      	mov	r3, r0
 8009166:	461a      	mov	r2, r3
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	4313      	orrs	r3, r2
 800916c:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xcc, 0x09);
 800916e:	2209      	movs	r2, #9
 8009170:	21cc      	movs	r1, #204	; 0xcc
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f003 fc60 	bl	800ca38 <VL53L0X_WrByte>
 8009178:	4603      	mov	r3, r0
 800917a:	461a      	mov	r2, r3
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	4313      	orrs	r3, r2
 8009180:	73fb      	strb	r3, [r7, #15]

		Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 8009182:	2200      	movs	r2, #0
 8009184:	21ff      	movs	r1, #255	; 0xff
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f003 fc56 	bl	800ca38 <VL53L0X_WrByte>
 800918c:	4603      	mov	r3, r0
 800918e:	461a      	mov	r2, r3
 8009190:	7bfb      	ldrb	r3, [r7, #15]
 8009192:	4313      	orrs	r3, r2
 8009194:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 8009196:	2201      	movs	r2, #1
 8009198:	21ff      	movs	r1, #255	; 0xff
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f003 fc4c 	bl	800ca38 <VL53L0X_WrByte>
 80091a0:	4603      	mov	r3, r0
 80091a2:	461a      	mov	r2, r3
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	73fb      	strb	r3, [r7, #15]
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 80091aa:	2200      	movs	r2, #0
 80091ac:	2100      	movs	r1, #0
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f003 fc42 	bl	800ca38 <VL53L0X_WrByte>
 80091b4:	4603      	mov	r3, r0
 80091b6:	461a      	mov	r2, r3
 80091b8:	7bfb      	ldrb	r3, [r7, #15]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	73fb      	strb	r3, [r7, #15]
 80091be:	e058      	b.n	8009272 <VL53L0X_SetGpioConfig+0x23a>

	} else {

		if (Status == VL53L0X_ERROR_NONE) {
 80091c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d121      	bne.n	800920c <VL53L0X_SetGpioConfig+0x1d4>
			switch (Functionality) {
 80091c8:	787b      	ldrb	r3, [r7, #1]
 80091ca:	2b04      	cmp	r3, #4
 80091cc:	d81b      	bhi.n	8009206 <VL53L0X_SetGpioConfig+0x1ce>
 80091ce:	a201      	add	r2, pc, #4	; (adr r2, 80091d4 <VL53L0X_SetGpioConfig+0x19c>)
 80091d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091d4:	080091e9 	.word	0x080091e9
 80091d8:	080091ef 	.word	0x080091ef
 80091dc:	080091f5 	.word	0x080091f5
 80091e0:	080091fb 	.word	0x080091fb
 80091e4:	08009201 	.word	0x08009201
			case VL53L0X_GPIOFUNCTIONALITY_OFF:
				data = 0x00;
 80091e8:	2300      	movs	r3, #0
 80091ea:	73bb      	strb	r3, [r7, #14]
				break;
 80091ec:	e00f      	b.n	800920e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_LOW:
				data = 0x01;
 80091ee:	2301      	movs	r3, #1
 80091f0:	73bb      	strb	r3, [r7, #14]
				break;
 80091f2:	e00c      	b.n	800920e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_HIGH:
				data = 0x02;
 80091f4:	2302      	movs	r3, #2
 80091f6:	73bb      	strb	r3, [r7, #14]
				break;
 80091f8:	e009      	b.n	800920e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_THRESHOLD_CROSSED_OUT:
				data = 0x03;
 80091fa:	2303      	movs	r3, #3
 80091fc:	73bb      	strb	r3, [r7, #14]
				break;
 80091fe:	e006      	b.n	800920e <VL53L0X_SetGpioConfig+0x1d6>
			case VL53L0X_GPIOFUNCTIONALITY_NEW_MEASURE_READY:
				data = 0x04;
 8009200:	2304      	movs	r3, #4
 8009202:	73bb      	strb	r3, [r7, #14]
				break;
 8009204:	e003      	b.n	800920e <VL53L0X_SetGpioConfig+0x1d6>
			default:
				Status =
 8009206:	23f5      	movs	r3, #245	; 0xf5
 8009208:	73fb      	strb	r3, [r7, #15]
 800920a:	e000      	b.n	800920e <VL53L0X_SetGpioConfig+0x1d6>
				VL53L0X_ERROR_GPIO_FUNCTIONALITY_NOT_SUPPORTED;
			}
		}
 800920c:	bf00      	nop

		if (Status == VL53L0X_ERROR_NONE)
 800920e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d107      	bne.n	8009226 <VL53L0X_SetGpioConfig+0x1ee>
			Status = VL53L0X_WrByte(Dev,
 8009216:	7bbb      	ldrb	r3, [r7, #14]
 8009218:	461a      	mov	r2, r3
 800921a:	210a      	movs	r1, #10
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f003 fc0b 	bl	800ca38 <VL53L0X_WrByte>
 8009222:	4603      	mov	r3, r0
 8009224:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CONFIG_GPIO, data);

		if (Status == VL53L0X_ERROR_NONE) {
 8009226:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d10f      	bne.n	800924e <VL53L0X_SetGpioConfig+0x216>
			if (Polarity == VL53L0X_INTERRUPTPOLARITY_LOW)
 800922e:	7e3b      	ldrb	r3, [r7, #24]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d102      	bne.n	800923a <VL53L0X_SetGpioConfig+0x202>
				data = 0;
 8009234:	2300      	movs	r3, #0
 8009236:	73bb      	strb	r3, [r7, #14]
 8009238:	e001      	b.n	800923e <VL53L0X_SetGpioConfig+0x206>
			else
				data = (uint8_t)(1 << 4);
 800923a:	2310      	movs	r3, #16
 800923c:	73bb      	strb	r3, [r7, #14]

			Status = VL53L0X_UpdateByte(Dev,
 800923e:	7bbb      	ldrb	r3, [r7, #14]
 8009240:	22ef      	movs	r2, #239	; 0xef
 8009242:	2184      	movs	r1, #132	; 0x84
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f003 fc45 	bl	800cad4 <VL53L0X_UpdateByte>
 800924a:	4603      	mov	r3, r0
 800924c:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_GPIO_HV_MUX_ACTIVE_HIGH, 0xEF, data);
		}

		if (Status == VL53L0X_ERROR_NONE)
 800924e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d103      	bne.n	800925e <VL53L0X_SetGpioConfig+0x226>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	787a      	ldrb	r2, [r7, #1]
 800925a:	f883 20da 	strb.w	r2, [r3, #218]	; 0xda
				Pin0GpioFunctionality, Functionality);

		if (Status == VL53L0X_ERROR_NONE)
 800925e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d105      	bne.n	8009272 <VL53L0X_SetGpioConfig+0x23a>
			Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009266:	2100      	movs	r1, #0
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 f83f 	bl	80092ec <VL53L0X_ClearInterruptMask>
 800926e:	4603      	mov	r3, r0
 8009270:	73fb      	strb	r3, [r7, #15]

	}

	LOG_FUNCTION_END(Status);
	return Status;
 8009272:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009276:	4618      	mov	r0, r3
 8009278:	3710      	adds	r7, #16
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop

08009280 <VL53L0X_GetInterruptThresholds>:
}

VL53L0X_Error VL53L0X_GetInterruptThresholds(VL53L0X_DEV Dev,
	VL53L0X_DeviceModes DeviceMode, FixPoint1616_t *pThresholdLow,
	FixPoint1616_t *pThresholdHigh)
{
 8009280:	b580      	push	{r7, lr}
 8009282:	b086      	sub	sp, #24
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	607a      	str	r2, [r7, #4]
 800928a:	603b      	str	r3, [r7, #0]
 800928c:	460b      	mov	r3, r1
 800928e:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009290:	2300      	movs	r3, #0
 8009292:	75fb      	strb	r3, [r7, #23]
	uint16_t Threshold16;
	LOG_FUNCTION_START("");

	/* no dependency on DeviceMode for Ewok */

	Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_LOW, &Threshold16);
 8009294:	f107 0314 	add.w	r3, r7, #20
 8009298:	461a      	mov	r2, r3
 800929a:	210e      	movs	r1, #14
 800929c:	68f8      	ldr	r0, [r7, #12]
 800929e:	f003 fb57 	bl	800c950 <VL53L0X_RdWord>
 80092a2:	4603      	mov	r3, r0
 80092a4:	75fb      	strb	r3, [r7, #23]
	/* Need to multiply by 2 because the FW will apply a x2 */
	*pThresholdLow = (FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80092a6:	8abb      	ldrh	r3, [r7, #20]
 80092a8:	045b      	lsls	r3, r3, #17
 80092aa:	461a      	mov	r2, r3
 80092ac:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <VL53L0X_GetInterruptThresholds+0x68>)
 80092ae:	4013      	ands	r3, r2
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	6013      	str	r3, [r2, #0]

	if (Status == VL53L0X_ERROR_NONE) {
 80092b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10f      	bne.n	80092dc <VL53L0X_GetInterruptThresholds+0x5c>
		Status = VL53L0X_RdWord(Dev, VL53L0X_REG_SYSTEM_THRESH_HIGH,
 80092bc:	f107 0314 	add.w	r3, r7, #20
 80092c0:	461a      	mov	r2, r3
 80092c2:	210c      	movs	r1, #12
 80092c4:	68f8      	ldr	r0, [r7, #12]
 80092c6:	f003 fb43 	bl	800c950 <VL53L0X_RdWord>
 80092ca:	4603      	mov	r3, r0
 80092cc:	75fb      	strb	r3, [r7, #23]
			&Threshold16);
		/* Need to multiply by 2 because the FW will apply a x2 */
		*pThresholdHigh =
			(FixPoint1616_t)((0x00fff & Threshold16) << 17);
 80092ce:	8abb      	ldrh	r3, [r7, #20]
 80092d0:	045b      	lsls	r3, r3, #17
 80092d2:	461a      	mov	r2, r3
 80092d4:	4b04      	ldr	r3, [pc, #16]	; (80092e8 <VL53L0X_GetInterruptThresholds+0x68>)
 80092d6:	4013      	ands	r3, r2
		*pThresholdHigh =
 80092d8:	683a      	ldr	r2, [r7, #0]
 80092da:	6013      	str	r3, [r2, #0]
	}

	LOG_FUNCTION_END(Status);
	return Status;
 80092dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3718      	adds	r7, #24
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}
 80092e8:	1ffe0000 	.word	0x1ffe0000

080092ec <VL53L0X_ClearInterruptMask>:
	return Status;
}

/* Group PAL Interrupt Functions */
VL53L0X_Error VL53L0X_ClearInterruptMask(VL53L0X_DEV Dev, uint32_t InterruptMask)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80092f6:	2300      	movs	r3, #0
 80092f8:	73fb      	strb	r3, [r7, #15]
	uint8_t LoopCount;
	uint8_t Byte;
	LOG_FUNCTION_START("");

	/* clear bit 0 range interrupt, bit 1 error interrupt */
	LoopCount = 0;
 80092fa:	2300      	movs	r3, #0
 80092fc:	73bb      	strb	r3, [r7, #14]
	do {
		Status = VL53L0X_WrByte(Dev,
 80092fe:	2201      	movs	r2, #1
 8009300:	210b      	movs	r1, #11
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f003 fb98 	bl	800ca38 <VL53L0X_WrByte>
 8009308:	4603      	mov	r3, r0
 800930a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x01);
		Status |= VL53L0X_WrByte(Dev,
 800930c:	2200      	movs	r2, #0
 800930e:	210b      	movs	r1, #11
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f003 fb91 	bl	800ca38 <VL53L0X_WrByte>
 8009316:	4603      	mov	r3, r0
 8009318:	461a      	mov	r2, r3
 800931a:	7bfb      	ldrb	r3, [r7, #15]
 800931c:	4313      	orrs	r3, r2
 800931e:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_SYSTEM_INTERRUPT_CLEAR, 0x00);
		Status |= VL53L0X_RdByte(Dev,
 8009320:	f107 030d 	add.w	r3, r7, #13
 8009324:	461a      	mov	r2, r3
 8009326:	2113      	movs	r1, #19
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f003 fa8a 	bl	800c842 <VL53L0X_RdByte>
 800932e:	4603      	mov	r3, r0
 8009330:	461a      	mov	r2, r3
 8009332:	7bfb      	ldrb	r3, [r7, #15]
 8009334:	4313      	orrs	r3, r2
 8009336:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
		LoopCount++;
 8009338:	7bbb      	ldrb	r3, [r7, #14]
 800933a:	3301      	adds	r3, #1
 800933c:	73bb      	strb	r3, [r7, #14]
	} while (((Byte & 0x07) != 0x00)
 800933e:	7b7b      	ldrb	r3, [r7, #13]
 8009340:	f003 0307 	and.w	r3, r3, #7
			&& (LoopCount < 3)
			&& (Status == VL53L0X_ERROR_NONE));
 8009344:	2b00      	cmp	r3, #0
 8009346:	d006      	beq.n	8009356 <VL53L0X_ClearInterruptMask+0x6a>
			&& (LoopCount < 3)
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	2b02      	cmp	r3, #2
 800934c:	d803      	bhi.n	8009356 <VL53L0X_ClearInterruptMask+0x6a>
			&& (Status == VL53L0X_ERROR_NONE));
 800934e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0d3      	beq.n	80092fe <VL53L0X_ClearInterruptMask+0x12>


	if (LoopCount >= 3)
 8009356:	7bbb      	ldrb	r3, [r7, #14]
 8009358:	2b02      	cmp	r3, #2
 800935a:	d901      	bls.n	8009360 <VL53L0X_ClearInterruptMask+0x74>
		Status = VL53L0X_ERROR_INTERRUPT_NOT_CLEARED;
 800935c:	23f4      	movs	r3, #244	; 0xf4
 800935e:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 8009360:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3710      	adds	r7, #16
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}

0800936c <VL53L0X_GetInterruptMaskStatus>:

VL53L0X_Error VL53L0X_GetInterruptMaskStatus(VL53L0X_DEV Dev,
	uint32_t *pInterruptMaskStatus)
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b084      	sub	sp, #16
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009376:	2300      	movs	r3, #0
 8009378:	73fb      	strb	r3, [r7, #15]
	uint8_t Byte;
	LOG_FUNCTION_START("");

	Status = VL53L0X_RdByte(Dev, VL53L0X_REG_RESULT_INTERRUPT_STATUS, &Byte);
 800937a:	f107 030e 	add.w	r3, r7, #14
 800937e:	461a      	mov	r2, r3
 8009380:	2113      	movs	r1, #19
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f003 fa5d 	bl	800c842 <VL53L0X_RdByte>
 8009388:	4603      	mov	r3, r0
 800938a:	73fb      	strb	r3, [r7, #15]
	*pInterruptMaskStatus = Byte & 0x07;
 800938c:	7bbb      	ldrb	r3, [r7, #14]
 800938e:	f003 0207 	and.w	r2, r3, #7
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	601a      	str	r2, [r3, #0]

	if (Byte & 0x18)
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	f003 0318 	and.w	r3, r3, #24
 800939c:	2b00      	cmp	r3, #0
 800939e:	d001      	beq.n	80093a4 <VL53L0X_GetInterruptMaskStatus+0x38>
		Status = VL53L0X_ERROR_RANGE_ERROR;
 80093a0:	23fa      	movs	r3, #250	; 0xfa
 80093a2:	73fb      	strb	r3, [r7, #15]

	LOG_FUNCTION_END(Status);
	return Status;
 80093a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <VL53L0X_PerformRefSpadManagement>:
	return Status;
}

VL53L0X_Error VL53L0X_PerformRefSpadManagement(VL53L0X_DEV Dev,
	uint32_t *refSpadCount, uint8_t *isApertureSpads)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b086      	sub	sp, #24
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093bc:	2300      	movs	r3, #0
 80093be:	75fb      	strb	r3, [r7, #23]
	LOG_FUNCTION_START("");

	Status = VL53L0X_perform_ref_spad_management(Dev, refSpadCount,
 80093c0:	687a      	ldr	r2, [r7, #4]
 80093c2:	68b9      	ldr	r1, [r7, #8]
 80093c4:	68f8      	ldr	r0, [r7, #12]
 80093c6:	f000 fa03 	bl	80097d0 <VL53L0X_perform_ref_spad_management>
 80093ca:	4603      	mov	r3, r0
 80093cc:	75fb      	strb	r3, [r7, #23]
		isApertureSpads);

	LOG_FUNCTION_END(Status);

	return Status;
 80093ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80093d2:	4618      	mov	r0, r3
 80093d4:	3718      	adds	r7, #24
 80093d6:	46bd      	mov	sp, r7
 80093d8:	bd80      	pop	{r7, pc}

080093da <VL53L0X_get_offset_calibration_data_micro_meter>:
	return Status;
}

VL53L0X_Error VL53L0X_get_offset_calibration_data_micro_meter(VL53L0X_DEV Dev,
		int32_t *pOffsetCalibrationDataMicroMeter)
{
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80093e4:	2300      	movs	r3, #0
 80093e6:	73fb      	strb	r3, [r7, #15]
	uint16_t RangeOffsetRegister;
	int16_t cMaxOffset = 2047;
 80093e8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80093ec:	81bb      	strh	r3, [r7, #12]
	int16_t cOffsetRange = 4096;
 80093ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093f2:	817b      	strh	r3, [r7, #10]

	/* Note that offset has 10.2 format */

	Status = VL53L0X_RdWord(Dev,
 80093f4:	f107 0308 	add.w	r3, r7, #8
 80093f8:	461a      	mov	r2, r3
 80093fa:	2128      	movs	r1, #40	; 0x28
 80093fc:	6878      	ldr	r0, [r7, #4]
 80093fe:	f003 faa7 	bl	800c950 <VL53L0X_RdWord>
 8009402:	4603      	mov	r3, r0
 8009404:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_ALGO_PART_TO_PART_RANGE_OFFSET_MM,
				&RangeOffsetRegister);

	if (Status == VL53L0X_ERROR_NONE) {
 8009406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d11e      	bne.n	800944c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		RangeOffsetRegister = (RangeOffsetRegister & 0x0fff);
 800940e:	893b      	ldrh	r3, [r7, #8]
 8009410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009414:	b29b      	uxth	r3, r3
 8009416:	813b      	strh	r3, [r7, #8]

		/* Apply 12 bit 2's compliment conversion */
		if (RangeOffsetRegister > cMaxOffset)
 8009418:	893b      	ldrh	r3, [r7, #8]
 800941a:	461a      	mov	r2, r3
 800941c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009420:	429a      	cmp	r2, r3
 8009422:	dd0b      	ble.n	800943c <VL53L0X_get_offset_calibration_data_micro_meter+0x62>
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)(RangeOffsetRegister - cOffsetRange)
 8009424:	893a      	ldrh	r2, [r7, #8]
 8009426:	897b      	ldrh	r3, [r7, #10]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	b29b      	uxth	r3, r3
 800942c:	b21b      	sxth	r3, r3
 800942e:	461a      	mov	r2, r3
					* 250;
 8009430:	23fa      	movs	r3, #250	; 0xfa
 8009432:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	e007      	b.n	800944c <VL53L0X_get_offset_calibration_data_micro_meter+0x72>
		else
			*pOffsetCalibrationDataMicroMeter =
				(int16_t)RangeOffsetRegister * 250;
 800943c:	893b      	ldrh	r3, [r7, #8]
 800943e:	b21b      	sxth	r3, r3
 8009440:	461a      	mov	r2, r3
 8009442:	23fa      	movs	r3, #250	; 0xfa
 8009444:	fb03 f202 	mul.w	r2, r3, r2
			*pOffsetCalibrationDataMicroMeter =
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	601a      	str	r2, [r3, #0]

	}

	return Status;
 800944c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009450:	4618      	mov	r0, r3
 8009452:	3710      	adds	r7, #16
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}

08009458 <get_next_good_spad>:
	return Status;
}

void get_next_good_spad(uint8_t goodSpadArray[], uint32_t size,
			uint32_t curr, int32_t *next)
{
 8009458:	b480      	push	{r7}
 800945a:	b08b      	sub	sp, #44	; 0x2c
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
	uint32_t startIndex;
	uint32_t fineOffset;
	uint32_t cSpadsPerByte = 8;
 8009466:	2308      	movs	r3, #8
 8009468:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;
	uint8_t dataByte;
	uint8_t success = 0;
 800946a:	2300      	movs	r3, #0
 800946c:	77bb      	strb	r3, [r7, #30]
	 *
	 * The coarse index is the byte index of the array and the fine index is
	 * the index of the bit within each byte.
	 */

	*next = -1;
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	601a      	str	r2, [r3, #0]

	startIndex = curr / cSpadsPerByte;
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	69bb      	ldr	r3, [r7, #24]
 800947a:	fbb2 f3f3 	udiv	r3, r2, r3
 800947e:	617b      	str	r3, [r7, #20]
	fineOffset = curr % cSpadsPerByte;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	fbb3 f2f2 	udiv	r2, r3, r2
 8009488:	69b9      	ldr	r1, [r7, #24]
 800948a:	fb01 f202 	mul.w	r2, r1, r2
 800948e:	1a9b      	subs	r3, r3, r2
 8009490:	613b      	str	r3, [r7, #16]

	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	627b      	str	r3, [r7, #36]	; 0x24
 8009496:	e030      	b.n	80094fa <get_next_good_spad+0xa2>
				coarseIndex++) {
		fineIndex = 0;
 8009498:	2300      	movs	r3, #0
 800949a:	623b      	str	r3, [r7, #32]
		dataByte = goodSpadArray[coarseIndex];
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	4413      	add	r3, r2
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	77fb      	strb	r3, [r7, #31]

		if (coarseIndex == startIndex) {
 80094a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	429a      	cmp	r2, r3
 80094ac:	d11e      	bne.n	80094ec <get_next_good_spad+0x94>
			/* locate the bit position of the provided current
			 * spad bit before iterating */
			dataByte >>= fineOffset;
 80094ae:	7ffa      	ldrb	r2, [r7, #31]
 80094b0:	693b      	ldr	r3, [r7, #16]
 80094b2:	fa42 f303 	asr.w	r3, r2, r3
 80094b6:	77fb      	strb	r3, [r7, #31]
			fineIndex = fineOffset;
 80094b8:	693b      	ldr	r3, [r7, #16]
 80094ba:	623b      	str	r3, [r7, #32]
		}

		while (fineIndex < cSpadsPerByte) {
 80094bc:	e016      	b.n	80094ec <get_next_good_spad+0x94>
			if ((dataByte & 0x1) == 1) {
 80094be:	7ffb      	ldrb	r3, [r7, #31]
 80094c0:	f003 0301 	and.w	r3, r3, #1
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00b      	beq.n	80094e0 <get_next_good_spad+0x88>
				success = 1;
 80094c8:	2301      	movs	r3, #1
 80094ca:	77bb      	strb	r3, [r7, #30]
				*next = coarseIndex * cSpadsPerByte + fineIndex;
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	69ba      	ldr	r2, [r7, #24]
 80094d0:	fb02 f203 	mul.w	r2, r2, r3
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	4413      	add	r3, r2
 80094d8:	461a      	mov	r2, r3
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	601a      	str	r2, [r3, #0]
				break;
 80094de:	e009      	b.n	80094f4 <get_next_good_spad+0x9c>
			}
			dataByte >>= 1;
 80094e0:	7ffb      	ldrb	r3, [r7, #31]
 80094e2:	085b      	lsrs	r3, r3, #1
 80094e4:	77fb      	strb	r3, [r7, #31]
			fineIndex++;
 80094e6:	6a3b      	ldr	r3, [r7, #32]
 80094e8:	3301      	adds	r3, #1
 80094ea:	623b      	str	r3, [r7, #32]
		while (fineIndex < cSpadsPerByte) {
 80094ec:	6a3a      	ldr	r2, [r7, #32]
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d3e4      	bcc.n	80094be <get_next_good_spad+0x66>
				coarseIndex++) {
 80094f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f6:	3301      	adds	r3, #1
 80094f8:	627b      	str	r3, [r7, #36]	; 0x24
	for (coarseIndex = startIndex; ((coarseIndex < size) && !success);
 80094fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	429a      	cmp	r2, r3
 8009500:	d202      	bcs.n	8009508 <get_next_good_spad+0xb0>
 8009502:	7fbb      	ldrb	r3, [r7, #30]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d0c7      	beq.n	8009498 <get_next_good_spad+0x40>
		}
	}
}
 8009508:	bf00      	nop
 800950a:	372c      	adds	r7, #44	; 0x2c
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <is_aperture>:


uint8_t is_aperture(uint32_t spadIndex)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
	/*
	 * This function reports if a given spad index is an aperture SPAD by
	 * deriving the quadrant.
	 */
	uint32_t quadrant;
	uint8_t isAperture = 1;
 800951c:	2301      	movs	r3, #1
 800951e:	73fb      	strb	r3, [r7, #15]
	quadrant = spadIndex >> 6;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	099b      	lsrs	r3, r3, #6
 8009524:	60bb      	str	r3, [r7, #8]
	if (refArrayQuadrants[quadrant] == REF_ARRAY_SPAD_0)
 8009526:	4a07      	ldr	r2, [pc, #28]	; (8009544 <is_aperture+0x30>)
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <is_aperture+0x22>
		isAperture = 0;
 8009532:	2300      	movs	r3, #0
 8009534:	73fb      	strb	r3, [r7, #15]

	return isAperture;
 8009536:	7bfb      	ldrb	r3, [r7, #15]
}
 8009538:	4618      	mov	r0, r3
 800953a:	3714      	adds	r7, #20
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr
 8009544:	20000854 	.word	0x20000854

08009548 <enable_spad_bit>:


VL53L0X_Error enable_spad_bit(uint8_t spadArray[], uint32_t size,
	uint32_t spadIndex)
{
 8009548:	b480      	push	{r7}
 800954a:	b089      	sub	sp, #36	; 0x24
 800954c:	af00      	add	r7, sp, #0
 800954e:	60f8      	str	r0, [r7, #12]
 8009550:	60b9      	str	r1, [r7, #8]
 8009552:	607a      	str	r2, [r7, #4]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009554:	2300      	movs	r3, #0
 8009556:	77fb      	strb	r3, [r7, #31]
	uint32_t cSpadsPerByte = 8;
 8009558:	2308      	movs	r3, #8
 800955a:	61bb      	str	r3, [r7, #24]
	uint32_t coarseIndex;
	uint32_t fineIndex;

	coarseIndex = spadIndex / cSpadsPerByte;
 800955c:	687a      	ldr	r2, [r7, #4]
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	fbb2 f3f3 	udiv	r3, r2, r3
 8009564:	617b      	str	r3, [r7, #20]
	fineIndex = spadIndex % cSpadsPerByte;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	69ba      	ldr	r2, [r7, #24]
 800956a:	fbb3 f2f2 	udiv	r2, r3, r2
 800956e:	69b9      	ldr	r1, [r7, #24]
 8009570:	fb01 f202 	mul.w	r2, r1, r2
 8009574:	1a9b      	subs	r3, r3, r2
 8009576:	613b      	str	r3, [r7, #16]
	if (coarseIndex >= size)
 8009578:	697a      	ldr	r2, [r7, #20]
 800957a:	68bb      	ldr	r3, [r7, #8]
 800957c:	429a      	cmp	r2, r3
 800957e:	d302      	bcc.n	8009586 <enable_spad_bit+0x3e>
		status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009580:	23ce      	movs	r3, #206	; 0xce
 8009582:	77fb      	strb	r3, [r7, #31]
 8009584:	e010      	b.n	80095a8 <enable_spad_bit+0x60>
	else
		spadArray[coarseIndex] |= (1 << fineIndex);
 8009586:	68fa      	ldr	r2, [r7, #12]
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	4413      	add	r3, r2
 800958c:	781b      	ldrb	r3, [r3, #0]
 800958e:	b25a      	sxtb	r2, r3
 8009590:	2101      	movs	r1, #1
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	fa01 f303 	lsl.w	r3, r1, r3
 8009598:	b25b      	sxtb	r3, r3
 800959a:	4313      	orrs	r3, r2
 800959c:	b259      	sxtb	r1, r3
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	4413      	add	r3, r2
 80095a4:	b2ca      	uxtb	r2, r1
 80095a6:	701a      	strb	r2, [r3, #0]

	return status;
 80095a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3724      	adds	r7, #36	; 0x24
 80095b0:	46bd      	mov	sp, r7
 80095b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b6:	4770      	bx	lr

080095b8 <set_ref_spad_map>:

	return status;
}

VL53L0X_Error set_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_WriteMulti(Dev,
 80095c2:	2306      	movs	r3, #6
 80095c4:	683a      	ldr	r2, [r7, #0]
 80095c6:	21b0      	movs	r1, #176	; 0xb0
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f003 f965 	bl	800c898 <VL53L0X_WriteMulti>
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray, 6);
	return status;
 80095d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3710      	adds	r7, #16
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <get_ref_spad_map>:

VL53L0X_Error get_ref_spad_map(VL53L0X_DEV Dev, uint8_t *refSpadArray)
{
 80095de:	b580      	push	{r7, lr}
 80095e0:	b084      	sub	sp, #16
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ReadMulti(Dev,
 80095e8:	2306      	movs	r3, #6
 80095ea:	683a      	ldr	r2, [r7, #0]
 80095ec:	21b0      	movs	r1, #176	; 0xb0
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f003 f982 	bl	800c8f8 <VL53L0X_ReadMulti>
 80095f4:	4603      	mov	r3, r0
 80095f6:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_GLOBAL_CONFIG_SPAD_ENABLES_REF_0,
				refSpadArray,
				6);
	return status;
 80095f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	3710      	adds	r7, #16
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <enable_ref_spads>:
				uint32_t size,
				uint32_t start,
				uint32_t offset,
				uint32_t spadCount,
				uint32_t *lastSpad)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b08c      	sub	sp, #48	; 0x30
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	607a      	str	r2, [r7, #4]
 800960e:	603b      	str	r3, [r7, #0]
 8009610:	460b      	mov	r3, r1
 8009612:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009614:	2300      	movs	r3, #0
 8009616:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t index;
	uint32_t i;
	int32_t nextGoodSpad = offset;
 800961a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800961c:	61fb      	str	r3, [r7, #28]
	 *
	 * This function applies to only aperture or only non-aperture spads.
	 * Checks are performed to ensure this.
	 */

	currentSpad = offset;
 800961e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009620:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 8009622:	2300      	movs	r3, #0
 8009624:	62bb      	str	r3, [r7, #40]	; 0x28
 8009626:	e02b      	b.n	8009680 <enable_ref_spads+0x7c>
		get_next_good_spad(goodSpadArray, size, currentSpad,
 8009628:	f107 031c 	add.w	r3, r7, #28
 800962c:	6a3a      	ldr	r2, [r7, #32]
 800962e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009630:	6878      	ldr	r0, [r7, #4]
 8009632:	f7ff ff11 	bl	8009458 <get_next_good_spad>
			&nextGoodSpad);

		if (nextGoodSpad == -1) {
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d103      	bne.n	8009646 <enable_ref_spads+0x42>
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800963e:	23ce      	movs	r3, #206	; 0xce
 8009640:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009644:	e020      	b.n	8009688 <enable_ref_spads+0x84>
		}

		/* Confirm that the next good SPAD is non-aperture */
		if (is_aperture(start + nextGoodSpad) != apertureSpads) {
 8009646:	69fb      	ldr	r3, [r7, #28]
 8009648:	461a      	mov	r2, r3
 800964a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800964c:	4413      	add	r3, r2
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff ff60 	bl	8009514 <is_aperture>
 8009654:	4603      	mov	r3, r0
 8009656:	461a      	mov	r2, r3
 8009658:	7afb      	ldrb	r3, [r7, #11]
 800965a:	4293      	cmp	r3, r2
 800965c:	d003      	beq.n	8009666 <enable_ref_spads+0x62>
			/* if we can't get the required number of good aperture
			 * spads from the current quadrant then this is an error
			 */
			status = VL53L0X_ERROR_REF_SPAD_INIT;
 800965e:	23ce      	movs	r3, #206	; 0xce
 8009660:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8009664:	e010      	b.n	8009688 <enable_ref_spads+0x84>
		}
		currentSpad = (uint32_t)nextGoodSpad;
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	623b      	str	r3, [r7, #32]
		enable_spad_bit(spadArray, size, currentSpad);
 800966a:	6a3a      	ldr	r2, [r7, #32]
 800966c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800966e:	6838      	ldr	r0, [r7, #0]
 8009670:	f7ff ff6a 	bl	8009548 <enable_spad_bit>
		currentSpad++;
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	3301      	adds	r3, #1
 8009678:	623b      	str	r3, [r7, #32]
	for (index = 0; index < spadCount; index++) {
 800967a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800967c:	3301      	adds	r3, #1
 800967e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009680:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009684:	429a      	cmp	r2, r3
 8009686:	d3cf      	bcc.n	8009628 <enable_ref_spads+0x24>
	}
	*lastSpad = currentSpad;
 8009688:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800968a:	6a3a      	ldr	r2, [r7, #32]
 800968c:	601a      	str	r2, [r3, #0]

	if (status == VL53L0X_ERROR_NONE)
 800968e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009692:	2b00      	cmp	r3, #0
 8009694:	d106      	bne.n	80096a4 <enable_ref_spads+0xa0>
		status = set_ref_spad_map(Dev, spadArray);
 8009696:	6839      	ldr	r1, [r7, #0]
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f7ff ff8d 	bl	80095b8 <set_ref_spad_map>
 800969e:	4603      	mov	r3, r0
 80096a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f


	if (status == VL53L0X_ERROR_NONE) {
 80096a4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d121      	bne.n	80096f0 <enable_ref_spads+0xec>
		status = get_ref_spad_map(Dev, checkSpadArray);
 80096ac:	f107 0314 	add.w	r3, r7, #20
 80096b0:	4619      	mov	r1, r3
 80096b2:	68f8      	ldr	r0, [r7, #12]
 80096b4:	f7ff ff93 	bl	80095de <get_ref_spad_map>
 80096b8:	4603      	mov	r3, r0
 80096ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

		i = 0;
 80096be:	2300      	movs	r3, #0
 80096c0:	627b      	str	r3, [r7, #36]	; 0x24

		/* Compare spad maps. If not equal report error. */
		while (i < size) {
 80096c2:	e011      	b.n	80096e8 <enable_ref_spads+0xe4>
			if (spadArray[i] != checkSpadArray[i]) {
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	4413      	add	r3, r2
 80096ca:	781a      	ldrb	r2, [r3, #0]
 80096cc:	f107 0114 	add.w	r1, r7, #20
 80096d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d2:	440b      	add	r3, r1
 80096d4:	781b      	ldrb	r3, [r3, #0]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d003      	beq.n	80096e2 <enable_ref_spads+0xde>
				status = VL53L0X_ERROR_REF_SPAD_INIT;
 80096da:	23ce      	movs	r3, #206	; 0xce
 80096dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				break;
 80096e0:	e006      	b.n	80096f0 <enable_ref_spads+0xec>
			}
			i++;
 80096e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096e4:	3301      	adds	r3, #1
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
		while (i < size) {
 80096e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096ec:	429a      	cmp	r2, r3
 80096ee:	d3e9      	bcc.n	80096c4 <enable_ref_spads+0xc0>
		}
	}
	return status;
 80096f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80096f4:	4618      	mov	r0, r3
 80096f6:	3730      	adds	r7, #48	; 0x30
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <perform_ref_signal_measurement>:


VL53L0X_Error perform_ref_signal_measurement(VL53L0X_DEV Dev,
		uint16_t *refSignalRate)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b08a      	sub	sp, #40	; 0x28
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
	VL53L0X_Error status = VL53L0X_ERROR_NONE;
 8009706:	2300      	movs	r3, #0
 8009708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	VL53L0X_RangingMeasurementData_t rangingMeasurementData;

	uint8_t SequenceConfig = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009718:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	/*
	 * This function performs a reference signal rate measurement.
	 */
	if (status == VL53L0X_ERROR_NONE)
 800971c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009720:	2b00      	cmp	r3, #0
 8009722:	d107      	bne.n	8009734 <perform_ref_signal_measurement+0x38>
		status = VL53L0X_WrByte(Dev,
 8009724:	22c0      	movs	r2, #192	; 0xc0
 8009726:	2101      	movs	r1, #1
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f003 f985 	bl	800ca38 <VL53L0X_WrByte>
 800972e:	4603      	mov	r3, r0
 8009730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0xC0);

	if (status == VL53L0X_ERROR_NONE)
 8009734:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009738:	2b00      	cmp	r3, #0
 800973a:	d108      	bne.n	800974e <perform_ref_signal_measurement+0x52>
		status = VL53L0X_PerformSingleRangingMeasurement(Dev,
 800973c:	f107 0308 	add.w	r3, r7, #8
 8009740:	4619      	mov	r1, r3
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f7ff fc48 	bl	8008fd8 <VL53L0X_PerformSingleRangingMeasurement>
 8009748:	4603      	mov	r3, r0
 800974a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				&rangingMeasurementData);

	if (status == VL53L0X_ERROR_NONE)
 800974e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009752:	2b00      	cmp	r3, #0
 8009754:	d107      	bne.n	8009766 <perform_ref_signal_measurement+0x6a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009756:	2201      	movs	r2, #1
 8009758:	21ff      	movs	r1, #255	; 0xff
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f003 f96c 	bl	800ca38 <VL53L0X_WrByte>
 8009760:	4603      	mov	r3, r0
 8009762:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE)
 8009766:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800976a:	2b00      	cmp	r3, #0
 800976c:	d107      	bne.n	800977e <perform_ref_signal_measurement+0x82>
		status = VL53L0X_RdWord(Dev,
 800976e:	683a      	ldr	r2, [r7, #0]
 8009770:	21b6      	movs	r1, #182	; 0xb6
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f003 f8ec 	bl	800c950 <VL53L0X_RdWord>
 8009778:	4603      	mov	r3, r0
 800977a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			refSignalRate);

	if (status == VL53L0X_ERROR_NONE)
 800977e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009782:	2b00      	cmp	r3, #0
 8009784:	d107      	bne.n	8009796 <perform_ref_signal_measurement+0x9a>
		status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009786:	2200      	movs	r2, #0
 8009788:	21ff      	movs	r1, #255	; 0xff
 800978a:	6878      	ldr	r0, [r7, #4]
 800978c:	f003 f954 	bl	800ca38 <VL53L0X_WrByte>
 8009790:	4603      	mov	r3, r0
 8009792:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (status == VL53L0X_ERROR_NONE) {
 8009796:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800979a:	2b00      	cmp	r3, #0
 800979c:	d112      	bne.n	80097c4 <perform_ref_signal_measurement+0xc8>
		/* restore the previous Sequence Config */
		status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800979e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80097a2:	461a      	mov	r2, r3
 80097a4:	2101      	movs	r1, #1
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f003 f946 	bl	800ca38 <VL53L0X_WrByte>
 80097ac:	4603      	mov	r3, r0
 80097ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				SequenceConfig);
		if (status == VL53L0X_ERROR_NONE)
 80097b2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d104      	bne.n	80097c4 <perform_ref_signal_measurement+0xc8>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80097c0:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
	}

	return status;
 80097c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3728      	adds	r7, #40	; 0x28
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <VL53L0X_perform_ref_spad_management>:

VL53L0X_Error VL53L0X_perform_ref_spad_management(VL53L0X_DEV Dev,
				uint32_t *refSpadCount,
				uint8_t *isApertureSpads)
{
 80097d0:	b590      	push	{r4, r7, lr}
 80097d2:	b09d      	sub	sp, #116	; 0x74
 80097d4:	af06      	add	r7, sp, #24
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 80097dc:	2300      	movs	r3, #0
 80097de:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t lastSpadArray[6];
	uint8_t startSelect = 0xB4;
 80097e2:	23b4      	movs	r3, #180	; 0xb4
 80097e4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint32_t minimumSpadCount = 3;
 80097e8:	2303      	movs	r3, #3
 80097ea:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t maxSpadCount = 44;
 80097ec:	232c      	movs	r3, #44	; 0x2c
 80097ee:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t currentSpadIndex = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t lastSpadIndex = 0;
 80097f4:	2300      	movs	r3, #0
 80097f6:	61bb      	str	r3, [r7, #24]
	int32_t nextGoodSpad = 0;
 80097f8:	2300      	movs	r3, #0
 80097fa:	617b      	str	r3, [r7, #20]
	uint16_t targetRefRate = 0x0A00; /* 20 MCPS in 9:7 format */
 80097fc:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8009800:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t peakSignalRateRef;
	uint32_t needAptSpads = 0;
 8009802:	2300      	movs	r3, #0
 8009804:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t index = 0;
 8009806:	2300      	movs	r3, #0
 8009808:	64bb      	str	r3, [r7, #72]	; 0x48
	uint32_t spadArraySize = 6;
 800980a:	2306      	movs	r3, #6
 800980c:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t signalRateDiff = 0;
 800980e:	2300      	movs	r3, #0
 8009810:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t lastSignalRateDiff = 0;
 8009812:	2300      	movs	r3, #0
 8009814:	647b      	str	r3, [r7, #68]	; 0x44
	uint8_t complete = 0;
 8009816:	2300      	movs	r3, #0
 8009818:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t VhvSettings = 0;
 800981c:	2300      	movs	r3, #0
 800981e:	747b      	strb	r3, [r7, #17]
	uint8_t PhaseCal = 0;
 8009820:	2300      	movs	r3, #0
 8009822:	743b      	strb	r3, [r7, #16]
	uint32_t refSpadCount_int = 0;
 8009824:	2300      	movs	r3, #0
 8009826:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t	 isApertureSpads_int = 0;
 8009828:	2300      	movs	r3, #0
 800982a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	 * of the non-aperture quadrant and runs in to the adjacent aperture
	 * quadrant.
	 */


	targetRefRate = PALDevDataGet(Dev, targetRefRate);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	f8b3 313a 	ldrh.w	r3, [r3, #314]	; 0x13a
 8009834:	85fb      	strh	r3, [r7, #46]	; 0x2e
	 * This is a short term implementation. The good spad map will be
	 * provided as an input.
	 * Note that there are 6 bytes. Only the first 44 bits will be used to
	 * represent spads.
	 */
	for (index = 0; index < spadArraySize; index++)
 8009836:	2300      	movs	r3, #0
 8009838:	64bb      	str	r3, [r7, #72]	; 0x48
 800983a:	e009      	b.n	8009850 <VL53L0X_perform_ref_spad_management+0x80>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009840:	4413      	add	r3, r2
 8009842:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009846:	2200      	movs	r2, #0
 8009848:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 800984a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800984c:	3301      	adds	r3, #1
 800984e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009850:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009854:	429a      	cmp	r2, r3
 8009856:	d3f1      	bcc.n	800983c <VL53L0X_perform_ref_spad_management+0x6c>


	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009858:	2201      	movs	r2, #1
 800985a:	21ff      	movs	r1, #255	; 0xff
 800985c:	68f8      	ldr	r0, [r7, #12]
 800985e:	f003 f8eb 	bl	800ca38 <VL53L0X_WrByte>
 8009862:	4603      	mov	r3, r0
 8009864:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 8009868:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800986c:	2b00      	cmp	r3, #0
 800986e:	d107      	bne.n	8009880 <VL53L0X_perform_ref_spad_management+0xb0>
		Status = VL53L0X_WrByte(Dev,
 8009870:	2200      	movs	r2, #0
 8009872:	214f      	movs	r1, #79	; 0x4f
 8009874:	68f8      	ldr	r0, [r7, #12]
 8009876:	f003 f8df 	bl	800ca38 <VL53L0X_WrByte>
 800987a:	4603      	mov	r3, r0
 800987c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009880:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009884:	2b00      	cmp	r3, #0
 8009886:	d107      	bne.n	8009898 <VL53L0X_perform_ref_spad_management+0xc8>
		Status = VL53L0X_WrByte(Dev,
 8009888:	222c      	movs	r2, #44	; 0x2c
 800988a:	214e      	movs	r1, #78	; 0x4e
 800988c:	68f8      	ldr	r0, [r7, #12]
 800988e:	f003 f8d3 	bl	800ca38 <VL53L0X_WrByte>
 8009892:	4603      	mov	r3, r0
 8009894:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009898:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 800989c:	2b00      	cmp	r3, #0
 800989e:	d107      	bne.n	80098b0 <VL53L0X_perform_ref_spad_management+0xe0>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 80098a0:	2200      	movs	r2, #0
 80098a2:	21ff      	movs	r1, #255	; 0xff
 80098a4:	68f8      	ldr	r0, [r7, #12]
 80098a6:	f003 f8c7 	bl	800ca38 <VL53L0X_WrByte>
 80098aa:	4603      	mov	r3, r0
 80098ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	if (Status == VL53L0X_ERROR_NONE)
 80098b0:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <VL53L0X_perform_ref_spad_management+0xfc>
		Status = VL53L0X_WrByte(Dev,
 80098b8:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80098bc:	461a      	mov	r2, r3
 80098be:	21b6      	movs	r1, #182	; 0xb6
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f003 f8b9 	bl	800ca38 <VL53L0X_WrByte>
 80098c6:	4603      	mov	r3, r0
 80098c8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);


	if (Status == VL53L0X_ERROR_NONE)
 80098cc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d107      	bne.n	80098e4 <VL53L0X_perform_ref_spad_management+0x114>
		Status = VL53L0X_WrByte(Dev,
 80098d4:	2200      	movs	r2, #0
 80098d6:	2180      	movs	r1, #128	; 0x80
 80098d8:	68f8      	ldr	r0, [r7, #12]
 80098da:	f003 f8ad 	bl	800ca38 <VL53L0X_WrByte>
 80098de:	4603      	mov	r3, r0
 80098e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				VL53L0X_REG_POWER_MANAGEMENT_GO1_POWER_FORCE, 0);

	/* Perform ref calibration */
	if (Status == VL53L0X_ERROR_NONE)
 80098e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d10a      	bne.n	8009902 <VL53L0X_perform_ref_spad_management+0x132>
		Status = VL53L0X_perform_ref_calibration(Dev, &VhvSettings,
 80098ec:	f107 0210 	add.w	r2, r7, #16
 80098f0:	f107 0111 	add.w	r1, r7, #17
 80098f4:	2300      	movs	r3, #0
 80098f6:	68f8      	ldr	r0, [r7, #12]
 80098f8:	f000 fbbb 	bl	800a072 <VL53L0X_perform_ref_calibration>
 80098fc:	4603      	mov	r3, r0
 80098fe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&PhaseCal, 0);

	if (Status == VL53L0X_ERROR_NONE) {
 8009902:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009906:	2b00      	cmp	r3, #0
 8009908:	d121      	bne.n	800994e <VL53L0X_perform_ref_spad_management+0x17e>
		/* Enable Minimum NON-APERTURE Spads */
		currentSpadIndex = 0;
 800990a:	2300      	movs	r3, #0
 800990c:	653b      	str	r3, [r7, #80]	; 0x50
		lastSpadIndex = currentSpadIndex;
 800990e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009910:	61bb      	str	r3, [r7, #24]
		needAptSpads = 0;
 8009912:	2300      	movs	r3, #0
 8009914:	64fb      	str	r3, [r7, #76]	; 0x4c
		Status = enable_ref_spads(Dev,
 8009916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009918:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	f503 7492 	add.w	r4, r3, #292	; 0x124
		Status = enable_ref_spads(Dev,
 8009926:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800992a:	f107 0218 	add.w	r2, r7, #24
 800992e:	9204      	str	r2, [sp, #16]
 8009930:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009932:	9203      	str	r2, [sp, #12]
 8009934:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009936:	9202      	str	r2, [sp, #8]
 8009938:	9301      	str	r3, [sp, #4]
 800993a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800993c:	9300      	str	r3, [sp, #0]
 800993e:	4623      	mov	r3, r4
 8009940:	4602      	mov	r2, r0
 8009942:	68f8      	ldr	r0, [r7, #12]
 8009944:	f7ff fe5e 	bl	8009604 <enable_ref_spads>
 8009948:	4603      	mov	r3, r0
 800994a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800994e:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009952:	2b00      	cmp	r3, #0
 8009954:	d174      	bne.n	8009a40 <VL53L0X_perform_ref_spad_management+0x270>
		currentSpadIndex = lastSpadIndex;
 8009956:	69bb      	ldr	r3, [r7, #24]
 8009958:	653b      	str	r3, [r7, #80]	; 0x50

		Status = perform_ref_signal_measurement(Dev,
 800995a:	f107 0312 	add.w	r3, r7, #18
 800995e:	4619      	mov	r1, r3
 8009960:	68f8      	ldr	r0, [r7, #12]
 8009962:	f7ff fecb 	bl	80096fc <perform_ref_signal_measurement>
 8009966:	4603      	mov	r3, r0
 8009968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			&peakSignalRateRef);
		if ((Status == VL53L0X_ERROR_NONE) &&
 800996c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009970:	2b00      	cmp	r3, #0
 8009972:	d161      	bne.n	8009a38 <VL53L0X_perform_ref_spad_management+0x268>
			(peakSignalRateRef > targetRefRate)) {
 8009974:	8a7b      	ldrh	r3, [r7, #18]
		if ((Status == VL53L0X_ERROR_NONE) &&
 8009976:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009978:	429a      	cmp	r2, r3
 800997a:	d25d      	bcs.n	8009a38 <VL53L0X_perform_ref_spad_management+0x268>
			/* Signal rate measurement too high,
			 * switch to APERTURE SPADs */

			for (index = 0; index < spadArraySize; index++)
 800997c:	2300      	movs	r3, #0
 800997e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009980:	e009      	b.n	8009996 <VL53L0X_perform_ref_spad_management+0x1c6>
				Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009986:	4413      	add	r3, r2
 8009988:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800998c:	2200      	movs	r2, #0
 800998e:	701a      	strb	r2, [r3, #0]
			for (index = 0; index < spadArraySize; index++)
 8009990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009992:	3301      	adds	r3, #1
 8009994:	64bb      	str	r3, [r7, #72]	; 0x48
 8009996:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800999a:	429a      	cmp	r2, r3
 800999c:	d3f1      	bcc.n	8009982 <VL53L0X_perform_ref_spad_management+0x1b2>


			/* Increment to the first APERTURE spad */
			while ((is_aperture(startSelect + currentSpadIndex)
 800999e:	e002      	b.n	80099a6 <VL53L0X_perform_ref_spad_management+0x1d6>
				== 0) && (currentSpadIndex < maxSpadCount)) {
				currentSpadIndex++;
 80099a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099a2:	3301      	adds	r3, #1
 80099a4:	653b      	str	r3, [r7, #80]	; 0x50
			while ((is_aperture(startSelect + currentSpadIndex)
 80099a6:	f897 203a 	ldrb.w	r2, [r7, #58]	; 0x3a
 80099aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099ac:	4413      	add	r3, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff fdb0 	bl	8009514 <is_aperture>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d103      	bne.n	80099c2 <VL53L0X_perform_ref_spad_management+0x1f2>
				== 0) && (currentSpadIndex < maxSpadCount)) {
 80099ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	429a      	cmp	r2, r3
 80099c0:	d3ee      	bcc.n	80099a0 <VL53L0X_perform_ref_spad_management+0x1d0>
			}

			needAptSpads = 1;
 80099c2:	2301      	movs	r3, #1
 80099c4:	64fb      	str	r3, [r7, #76]	; 0x4c

			Status = enable_ref_spads(Dev,
 80099c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099c8:	b2d9      	uxtb	r1, r3
					needAptSpads,
					Dev->Data.SpadData.RefGoodSpadMap,
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f503 7095 	add.w	r0, r3, #298	; 0x12a
					Dev->Data.SpadData.RefSpadEnables,
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	f503 7492 	add.w	r4, r3, #292	; 0x124
			Status = enable_ref_spads(Dev,
 80099d6:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 80099da:	f107 0218 	add.w	r2, r7, #24
 80099de:	9204      	str	r2, [sp, #16]
 80099e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099e2:	9203      	str	r2, [sp, #12]
 80099e4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80099e6:	9202      	str	r2, [sp, #8]
 80099e8:	9301      	str	r3, [sp, #4]
 80099ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	4623      	mov	r3, r4
 80099f0:	4602      	mov	r2, r0
 80099f2:	68f8      	ldr	r0, [r7, #12]
 80099f4:	f7ff fe06 	bl	8009604 <enable_ref_spads>
 80099f8:	4603      	mov	r3, r0
 80099fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					startSelect,
					currentSpadIndex,
					minimumSpadCount,
					&lastSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 80099fe:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d11b      	bne.n	8009a3e <VL53L0X_perform_ref_spad_management+0x26e>
				currentSpadIndex = lastSpadIndex;
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	653b      	str	r3, [r7, #80]	; 0x50
				Status = perform_ref_signal_measurement(Dev,
 8009a0a:	f107 0312 	add.w	r3, r7, #18
 8009a0e:	4619      	mov	r1, r3
 8009a10:	68f8      	ldr	r0, [r7, #12]
 8009a12:	f7ff fe73 	bl	80096fc <perform_ref_signal_measurement>
 8009a16:	4603      	mov	r3, r0
 8009a18:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
						&peakSignalRateRef);

				if ((Status == VL53L0X_ERROR_NONE) &&
 8009a1c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10c      	bne.n	8009a3e <VL53L0X_perform_ref_spad_management+0x26e>
					(peakSignalRateRef > targetRefRate)) {
 8009a24:	8a7b      	ldrh	r3, [r7, #18]
				if ((Status == VL53L0X_ERROR_NONE) &&
 8009a26:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d208      	bcs.n	8009a3e <VL53L0X_perform_ref_spad_management+0x26e>
					 * setting the minimum number of
					 * APERTURE spads. Can do no more
					 * therefore set the min number of
					 * aperture spads as the result.
					 */
					isApertureSpads_int = 1;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
					refSpadCount_int = minimumSpadCount;
 8009a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a34:	63fb      	str	r3, [r7, #60]	; 0x3c
			if (Status == VL53L0X_ERROR_NONE) {
 8009a36:	e002      	b.n	8009a3e <VL53L0X_perform_ref_spad_management+0x26e>
				}
			}
		} else {
			needAptSpads = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a3c:	e000      	b.n	8009a40 <VL53L0X_perform_ref_spad_management+0x270>
			if (Status == VL53L0X_ERROR_NONE) {
 8009a3e:	bf00      	nop
		}
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 8009a40:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f040 80af 	bne.w	8009ba8 <VL53L0X_perform_ref_spad_management+0x3d8>
		(peakSignalRateRef < targetRefRate)) {
 8009a4a:	8a7b      	ldrh	r3, [r7, #18]
	if ((Status == VL53L0X_ERROR_NONE) &&
 8009a4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	f240 80aa 	bls.w	8009ba8 <VL53L0X_perform_ref_spad_management+0x3d8>
		/* At this point, the minimum number of either aperture
		 * or non-aperture spads have been set. Proceed to add
		 * spads and perform measurements until the target
		 * reference is reached.
		 */
		isApertureSpads_int = needAptSpads;
 8009a54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a56:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		refSpadCount_int	= minimumSpadCount;
 8009a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a5c:	63fb      	str	r3, [r7, #60]	; 0x3c

		memcpy(lastSpadArray, Dev->Data.SpadData.RefSpadEnables,
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	f503 7192 	add.w	r1, r3, #292	; 0x124
 8009a64:	f107 031c 	add.w	r3, r7, #28
 8009a68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f009 f878 	bl	8012b60 <memcpy>
				spadArraySize);
		lastSignalRateDiff = abs(peakSignalRateRef -
 8009a70:	8a7b      	ldrh	r3, [r7, #18]
 8009a72:	461a      	mov	r2, r3
 8009a74:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	bfb8      	it	lt
 8009a7c:	425b      	neglt	r3, r3
 8009a7e:	647b      	str	r3, [r7, #68]	; 0x44
			targetRefRate);
		complete = 0;
 8009a80:	2300      	movs	r3, #0
 8009a82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

		while (!complete) {
 8009a86:	e086      	b.n	8009b96 <VL53L0X_perform_ref_spad_management+0x3c6>
			get_next_good_spad(
				Dev->Data.SpadData.RefGoodSpadMap,
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	f503 7095 	add.w	r0, r3, #298	; 0x12a
			get_next_good_spad(
 8009a8e:	f107 0314 	add.w	r3, r7, #20
 8009a92:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009a94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a96:	f7ff fcdf 	bl	8009458 <get_next_good_spad>
				spadArraySize, currentSpadIndex,
				&nextGoodSpad);

			if (nextGoodSpad == -1) {
 8009a9a:	697b      	ldr	r3, [r7, #20]
 8009a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009aa0:	d103      	bne.n	8009aaa <VL53L0X_perform_ref_spad_management+0x2da>
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009aa2:	23ce      	movs	r3, #206	; 0xce
 8009aa4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009aa8:	e07e      	b.n	8009ba8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			(refSpadCount_int)++;
 8009aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009aac:	3301      	adds	r3, #1
 8009aae:	63fb      	str	r3, [r7, #60]	; 0x3c

			/* Cannot combine Aperture and Non-Aperture spads, so
			 * ensure the current spad is of the correct type.
			 */
			if (is_aperture((uint32_t)startSelect + nextGoodSpad) !=
 8009ab0:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	4618      	mov	r0, r3
 8009aba:	f7ff fd2b 	bl	8009514 <is_aperture>
 8009abe:	4603      	mov	r3, r0
 8009ac0:	461a      	mov	r2, r3
 8009ac2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d003      	beq.n	8009ad0 <VL53L0X_perform_ref_spad_management+0x300>
					needAptSpads) {
				Status = VL53L0X_ERROR_REF_SPAD_INIT;
 8009ac8:	23ce      	movs	r3, #206	; 0xce
 8009aca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
				break;
 8009ace:	e06b      	b.n	8009ba8 <VL53L0X_perform_ref_spad_management+0x3d8>
			}

			currentSpadIndex = nextGoodSpad;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	653b      	str	r3, [r7, #80]	; 0x50
			Status = enable_spad_bit(
					Dev->Data.SpadData.RefSpadEnables,
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	f503 7392 	add.w	r3, r3, #292	; 0x124
			Status = enable_spad_bit(
 8009ada:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009adc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ade:	4618      	mov	r0, r3
 8009ae0:	f7ff fd32 	bl	8009548 <enable_spad_bit>
 8009ae4:	4603      	mov	r3, r0
 8009ae6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					spadArraySize, currentSpadIndex);

			if (Status == VL53L0X_ERROR_NONE) {
 8009aea:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d10c      	bne.n	8009b0c <VL53L0X_perform_ref_spad_management+0x33c>
				currentSpadIndex++;
 8009af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009af4:	3301      	adds	r3, #1
 8009af6:	653b      	str	r3, [r7, #80]	; 0x50
				/* Proceed to apply the additional spad and
				 * perform measurement. */
				Status = set_ref_spad_map(Dev,
					Dev->Data.SpadData.RefSpadEnables);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f503 7392 	add.w	r3, r3, #292	; 0x124
				Status = set_ref_spad_map(Dev,
 8009afe:	4619      	mov	r1, r3
 8009b00:	68f8      	ldr	r0, [r7, #12]
 8009b02:	f7ff fd59 	bl	80095b8 <set_ref_spad_map>
 8009b06:	4603      	mov	r3, r0
 8009b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			}

			if (Status != VL53L0X_ERROR_NONE)
 8009b0c:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d146      	bne.n	8009ba2 <VL53L0X_perform_ref_spad_management+0x3d2>
				break;

			Status = perform_ref_signal_measurement(Dev,
 8009b14:	f107 0312 	add.w	r3, r7, #18
 8009b18:	4619      	mov	r1, r3
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff fdee 	bl	80096fc <perform_ref_signal_measurement>
 8009b20:	4603      	mov	r3, r0
 8009b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
					&peakSignalRateRef);

			if (Status != VL53L0X_ERROR_NONE)
 8009b26:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d13b      	bne.n	8009ba6 <VL53L0X_perform_ref_spad_management+0x3d6>
				break;

			signalRateDiff = abs(peakSignalRateRef - targetRefRate);
 8009b2e:	8a7b      	ldrh	r3, [r7, #18]
 8009b30:	461a      	mov	r2, r3
 8009b32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009b34:	1ad3      	subs	r3, r2, r3
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	bfb8      	it	lt
 8009b3a:	425b      	neglt	r3, r3
 8009b3c:	627b      	str	r3, [r7, #36]	; 0x24

			if (peakSignalRateRef > targetRefRate) {
 8009b3e:	8a7b      	ldrh	r3, [r7, #18]
 8009b40:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d21c      	bcs.n	8009b80 <VL53L0X_perform_ref_spad_management+0x3b0>
				/* Select the spad map that provides the
				 * measurement closest to the target rate,
				 * either above or below it.
				 */
				if (signalRateDiff > lastSignalRateDiff) {
 8009b46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b4a:	429a      	cmp	r2, r3
 8009b4c:	d914      	bls.n	8009b78 <VL53L0X_perform_ref_spad_management+0x3a8>
					/* Previous spad map produced a closer
					 * measurement, so choose this. */
					Status = set_ref_spad_map(Dev,
 8009b4e:	f107 031c 	add.w	r3, r7, #28
 8009b52:	4619      	mov	r1, r3
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f7ff fd2f 	bl	80095b8 <set_ref_spad_map>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
							lastSpadArray);
					memcpy(
					Dev->Data.SpadData.RefSpadEnables,
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	f503 7392 	add.w	r3, r3, #292	; 0x124
					memcpy(
 8009b66:	f107 011c 	add.w	r1, r7, #28
 8009b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	f008 fff7 	bl	8012b60 <memcpy>
					lastSpadArray, spadArraySize);

					(refSpadCount_int)--;
 8009b72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b74:	3b01      	subs	r3, #1
 8009b76:	63fb      	str	r3, [r7, #60]	; 0x3c
				}
				complete = 1;
 8009b78:	2301      	movs	r3, #1
 8009b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009b7e:	e00a      	b.n	8009b96 <VL53L0X_perform_ref_spad_management+0x3c6>
			} else {
				/* Continue to add spads */
				lastSignalRateDiff = signalRateDiff;
 8009b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b82:	647b      	str	r3, [r7, #68]	; 0x44
				memcpy(lastSpadArray,
					Dev->Data.SpadData.RefSpadEnables,
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f503 7192 	add.w	r1, r3, #292	; 0x124
				memcpy(lastSpadArray,
 8009b8a:	f107 031c 	add.w	r3, r7, #28
 8009b8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009b90:	4618      	mov	r0, r3
 8009b92:	f008 ffe5 	bl	8012b60 <memcpy>
		while (!complete) {
 8009b96:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f43f af74 	beq.w	8009a88 <VL53L0X_perform_ref_spad_management+0x2b8>
 8009ba0:	e002      	b.n	8009ba8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009ba2:	bf00      	nop
 8009ba4:	e000      	b.n	8009ba8 <VL53L0X_perform_ref_spad_management+0x3d8>
				break;
 8009ba6:	bf00      	nop
			}

		} /* while */
	}

	if (Status == VL53L0X_ERROR_NONE) {
 8009ba8:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d115      	bne.n	8009bdc <VL53L0X_perform_ref_spad_management+0x40c>
		*refSpadCount = refSpadCount_int;
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bb4:	601a      	str	r2, [r3, #0]
		*isApertureSpads = isApertureSpads_int;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8009bbc:	701a      	strb	r2, [r3, #0]

		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	b2da      	uxtb	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(*refSpadCount));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	781a      	ldrb	r2, [r3, #0]
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, *isApertureSpads);
	}

	return Status;
 8009bdc:	f997 3057 	ldrsb.w	r3, [r7, #87]	; 0x57
}
 8009be0:	4618      	mov	r0, r3
 8009be2:	375c      	adds	r7, #92	; 0x5c
 8009be4:	46bd      	mov	sp, r7
 8009be6:	bd90      	pop	{r4, r7, pc}

08009be8 <VL53L0X_set_reference_spads>:

VL53L0X_Error VL53L0X_set_reference_spads(VL53L0X_DEV Dev,
				 uint32_t count, uint8_t isApertureSpads)
{
 8009be8:	b590      	push	{r4, r7, lr}
 8009bea:	b093      	sub	sp, #76	; 0x4c
 8009bec:	af06      	add	r7, sp, #24
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	71fb      	strb	r3, [r7, #7]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint32_t currentSpadIndex = 0;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	62bb      	str	r3, [r7, #40]	; 0x28
	uint8_t startSelect = 0xB4;
 8009c00:	23b4      	movs	r3, #180	; 0xb4
 8009c02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t spadArraySize = 6;
 8009c06:	2306      	movs	r3, #6
 8009c08:	61fb      	str	r3, [r7, #28]
	uint32_t maxSpadCount = 44;
 8009c0a:	232c      	movs	r3, #44	; 0x2c
 8009c0c:	61bb      	str	r3, [r7, #24]
	 * aperture or
	 * non-aperture, as requested.
	 * The good spad map will be applied.
	 */

	Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009c0e:	2201      	movs	r2, #1
 8009c10:	21ff      	movs	r1, #255	; 0xff
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f002 ff10 	bl	800ca38 <VL53L0X_WrByte>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009c1e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d107      	bne.n	8009c36 <VL53L0X_set_reference_spads+0x4e>
		Status = VL53L0X_WrByte(Dev,
 8009c26:	2200      	movs	r2, #0
 8009c28:	214f      	movs	r1, #79	; 0x4f
 8009c2a:	68f8      	ldr	r0, [r7, #12]
 8009c2c:	f002 ff04 	bl	800ca38 <VL53L0X_WrByte>
 8009c30:	4603      	mov	r3, r0
 8009c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_REF_EN_START_OFFSET, 0x00);

	if (Status == VL53L0X_ERROR_NONE)
 8009c36:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d107      	bne.n	8009c4e <VL53L0X_set_reference_spads+0x66>
		Status = VL53L0X_WrByte(Dev,
 8009c3e:	222c      	movs	r2, #44	; 0x2c
 8009c40:	214e      	movs	r1, #78	; 0x4e
 8009c42:	68f8      	ldr	r0, [r7, #12]
 8009c44:	f002 fef8 	bl	800ca38 <VL53L0X_WrByte>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_DYNAMIC_SPAD_NUM_REQUESTED_REF_SPAD, 0x2C);

	if (Status == VL53L0X_ERROR_NONE)
 8009c4e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d107      	bne.n	8009c66 <VL53L0X_set_reference_spads+0x7e>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009c56:	2200      	movs	r2, #0
 8009c58:	21ff      	movs	r1, #255	; 0xff
 8009c5a:	68f8      	ldr	r0, [r7, #12]
 8009c5c:	f002 feec 	bl	800ca38 <VL53L0X_WrByte>
 8009c60:	4603      	mov	r3, r0
 8009c62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (Status == VL53L0X_ERROR_NONE)
 8009c66:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d109      	bne.n	8009c82 <VL53L0X_set_reference_spads+0x9a>
		Status = VL53L0X_WrByte(Dev,
 8009c6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009c72:	461a      	mov	r2, r3
 8009c74:	21b6      	movs	r1, #182	; 0xb6
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f002 fede 	bl	800ca38 <VL53L0X_WrByte>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			VL53L0X_REG_GLOBAL_CONFIG_REF_EN_START_SELECT,
			startSelect);

	for (index = 0; index < spadArraySize; index++)
 8009c82:	2300      	movs	r3, #0
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
 8009c86:	e009      	b.n	8009c9c <VL53L0X_set_reference_spads+0xb4>
		Dev->Data.SpadData.RefSpadEnables[index] = 0;
 8009c88:	68fa      	ldr	r2, [r7, #12]
 8009c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c8c:	4413      	add	r3, r2
 8009c8e:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
	for (index = 0; index < spadArraySize; index++)
 8009c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c98:	3301      	adds	r3, #1
 8009c9a:	627b      	str	r3, [r7, #36]	; 0x24
 8009c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9e:	69fb      	ldr	r3, [r7, #28]
 8009ca0:	429a      	cmp	r2, r3
 8009ca2:	d3f1      	bcc.n	8009c88 <VL53L0X_set_reference_spads+0xa0>

	if (isApertureSpads) {
 8009ca4:	79fb      	ldrb	r3, [r7, #7]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d011      	beq.n	8009cce <VL53L0X_set_reference_spads+0xe6>
		/* Increment to the first APERTURE spad */
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009caa:	e002      	b.n	8009cb2 <VL53L0X_set_reference_spads+0xca>
			  (currentSpadIndex < maxSpadCount)) {
			currentSpadIndex++;
 8009cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cae:	3301      	adds	r3, #1
 8009cb0:	62bb      	str	r3, [r7, #40]	; 0x28
		while ((is_aperture(startSelect + currentSpadIndex) == 0) &&
 8009cb2:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8009cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb8:	4413      	add	r3, r2
 8009cba:	4618      	mov	r0, r3
 8009cbc:	f7ff fc2a 	bl	8009514 <is_aperture>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d103      	bne.n	8009cce <VL53L0X_set_reference_spads+0xe6>
 8009cc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cc8:	69bb      	ldr	r3, [r7, #24]
 8009cca:	429a      	cmp	r2, r3
 8009ccc:	d3ee      	bcc.n	8009cac <VL53L0X_set_reference_spads+0xc4>
		}
	}
	Status = enable_ref_spads(Dev,
				isApertureSpads,
				Dev->Data.SpadData.RefGoodSpadMap,
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	f503 7095 	add.w	r0, r3, #298	; 0x12a
				Dev->Data.SpadData.RefSpadEnables,
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f503 7492 	add.w	r4, r3, #292	; 0x124
	Status = enable_ref_spads(Dev,
 8009cda:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009cde:	79f9      	ldrb	r1, [r7, #7]
 8009ce0:	f107 0214 	add.w	r2, r7, #20
 8009ce4:	9204      	str	r2, [sp, #16]
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	9203      	str	r2, [sp, #12]
 8009cea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009cec:	9202      	str	r2, [sp, #8]
 8009cee:	9301      	str	r3, [sp, #4]
 8009cf0:	69fb      	ldr	r3, [r7, #28]
 8009cf2:	9300      	str	r3, [sp, #0]
 8009cf4:	4623      	mov	r3, r4
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f7ff fc83 	bl	8009604 <enable_ref_spads>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				startSelect,
				currentSpadIndex,
				count,
				&lastSpadIndex);

	if (Status == VL53L0X_ERROR_NONE) {
 8009d04:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10c      	bne.n	8009d26 <VL53L0X_set_reference_spads+0x13e>
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, RefSpadsInitialised, 1);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	b2da      	uxtb	r2, r3
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
			ReferenceSpadCount, (uint8_t)(count));
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	79fa      	ldrb	r2, [r7, #7]
 8009d22:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
			ReferenceSpadType, isApertureSpads);
	}

	return Status;
 8009d26:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3734      	adds	r7, #52	; 0x34
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd90      	pop	{r4, r7, pc}

08009d32 <VL53L0X_perform_single_ref_calibration>:
}


VL53L0X_Error VL53L0X_perform_single_ref_calibration(VL53L0X_DEV Dev,
		uint8_t vhv_init_byte)
{
 8009d32:	b580      	push	{r7, lr}
 8009d34:	b084      	sub	sp, #16
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009d3e:	2300      	movs	r3, #0
 8009d40:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009d42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d10a      	bne.n	8009d60 <VL53L0X_perform_single_ref_calibration+0x2e>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START,
 8009d4a:	78fb      	ldrb	r3, [r7, #3]
 8009d4c:	f043 0301 	orr.w	r3, r3, #1
 8009d50:	b2db      	uxtb	r3, r3
 8009d52:	461a      	mov	r2, r3
 8009d54:	2100      	movs	r1, #0
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f002 fe6e 	bl	800ca38 <VL53L0X_WrByte>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]
				VL53L0X_REG_SYSRANGE_MODE_START_STOP |
				vhv_init_byte);

	if (Status == VL53L0X_ERROR_NONE)
 8009d60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d104      	bne.n	8009d72 <VL53L0X_perform_single_ref_calibration+0x40>
		Status = VL53L0X_measurement_poll_for_completion(Dev);
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f000 f9bf 	bl	800a0ec <VL53L0X_measurement_poll_for_completion>
 8009d6e:	4603      	mov	r3, r0
 8009d70:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009d72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d105      	bne.n	8009d86 <VL53L0X_perform_single_ref_calibration+0x54>
		Status = VL53L0X_ClearInterruptMask(Dev, 0);
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff fab5 	bl	80092ec <VL53L0X_ClearInterruptMask>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE)
 8009d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d106      	bne.n	8009d9c <VL53L0X_perform_single_ref_calibration+0x6a>
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSRANGE_START, 0x00);
 8009d8e:	2200      	movs	r2, #0
 8009d90:	2100      	movs	r1, #0
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f002 fe50 	bl	800ca38 <VL53L0X_WrByte>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	73fb      	strb	r3, [r7, #15]

	return Status;
 8009d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3710      	adds	r7, #16
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}

08009da8 <VL53L0X_ref_calibration_io>:

VL53L0X_Error VL53L0X_ref_calibration_io(VL53L0X_DEV Dev, uint8_t read_not_write,
	uint8_t VhvSettings, uint8_t PhaseCal,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal,
	const uint8_t vhv_enable, const uint8_t phase_enable)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
 8009db0:	4608      	mov	r0, r1
 8009db2:	4611      	mov	r1, r2
 8009db4:	461a      	mov	r2, r3
 8009db6:	4603      	mov	r3, r0
 8009db8:	70fb      	strb	r3, [r7, #3]
 8009dba:	460b      	mov	r3, r1
 8009dbc:	70bb      	strb	r3, [r7, #2]
 8009dbe:	4613      	mov	r3, r2
 8009dc0:	707b      	strb	r3, [r7, #1]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	73fb      	strb	r3, [r7, #15]
	uint8_t PhaseCalint = 0;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	73bb      	strb	r3, [r7, #14]

	/* Read VHV from device */
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009dca:	2201      	movs	r2, #1
 8009dcc:	21ff      	movs	r1, #255	; 0xff
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f002 fe32 	bl	800ca38 <VL53L0X_WrByte>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	461a      	mov	r2, r3
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
 8009dda:	4313      	orrs	r3, r2
 8009ddc:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 8009dde:	2200      	movs	r2, #0
 8009de0:	2100      	movs	r1, #0
 8009de2:	6878      	ldr	r0, [r7, #4]
 8009de4:	f002 fe28 	bl	800ca38 <VL53L0X_WrByte>
 8009de8:	4603      	mov	r3, r0
 8009dea:	461a      	mov	r2, r3
 8009dec:	7bfb      	ldrb	r3, [r7, #15]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009df2:	2200      	movs	r2, #0
 8009df4:	21ff      	movs	r1, #255	; 0xff
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f002 fe1e 	bl	800ca38 <VL53L0X_WrByte>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	461a      	mov	r2, r3
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	4313      	orrs	r3, r2
 8009e04:	73fb      	strb	r3, [r7, #15]

	if (read_not_write) {
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d01e      	beq.n	8009e4a <VL53L0X_ref_calibration_io+0xa2>
		if (vhv_enable)
 8009e0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d009      	beq.n	8009e28 <VL53L0X_ref_calibration_io+0x80>
			Status |= VL53L0X_RdByte(Dev, 0xCB, pVhvSettings);
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	21cb      	movs	r1, #203	; 0xcb
 8009e18:	6878      	ldr	r0, [r7, #4]
 8009e1a:	f002 fd12 	bl	800c842 <VL53L0X_RdByte>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	461a      	mov	r2, r3
 8009e22:	7bfb      	ldrb	r3, [r7, #15]
 8009e24:	4313      	orrs	r3, r2
 8009e26:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009e28:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d02a      	beq.n	8009e86 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_RdByte(Dev, 0xEE, &PhaseCalint);
 8009e30:	f107 030e 	add.w	r3, r7, #14
 8009e34:	461a      	mov	r2, r3
 8009e36:	21ee      	movs	r1, #238	; 0xee
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f002 fd02 	bl	800c842 <VL53L0X_RdByte>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	461a      	mov	r2, r3
 8009e42:	7bfb      	ldrb	r3, [r7, #15]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	73fb      	strb	r3, [r7, #15]
 8009e48:	e01d      	b.n	8009e86 <VL53L0X_ref_calibration_io+0xde>
	} else {
		if (vhv_enable)
 8009e4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d00a      	beq.n	8009e68 <VL53L0X_ref_calibration_io+0xc0>
			Status |= VL53L0X_WrByte(Dev, 0xCB, VhvSettings);
 8009e52:	78bb      	ldrb	r3, [r7, #2]
 8009e54:	461a      	mov	r2, r3
 8009e56:	21cb      	movs	r1, #203	; 0xcb
 8009e58:	6878      	ldr	r0, [r7, #4]
 8009e5a:	f002 fded 	bl	800ca38 <VL53L0X_WrByte>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	461a      	mov	r2, r3
 8009e62:	7bfb      	ldrb	r3, [r7, #15]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	73fb      	strb	r3, [r7, #15]
		if (phase_enable)
 8009e68:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d00a      	beq.n	8009e86 <VL53L0X_ref_calibration_io+0xde>
			Status |= VL53L0X_UpdateByte(Dev, 0xEE, 0x80, PhaseCal);
 8009e70:	787b      	ldrb	r3, [r7, #1]
 8009e72:	2280      	movs	r2, #128	; 0x80
 8009e74:	21ee      	movs	r1, #238	; 0xee
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f002 fe2c 	bl	800cad4 <VL53L0X_UpdateByte>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	461a      	mov	r2, r3
 8009e80:	7bfb      	ldrb	r3, [r7, #15]
 8009e82:	4313      	orrs	r3, r2
 8009e84:	73fb      	strb	r3, [r7, #15]
	}

	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 8009e86:	2201      	movs	r2, #1
 8009e88:	21ff      	movs	r1, #255	; 0xff
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f002 fdd4 	bl	800ca38 <VL53L0X_WrByte>
 8009e90:	4603      	mov	r3, r0
 8009e92:	461a      	mov	r2, r3
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	4313      	orrs	r3, r2
 8009e98:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 8009e9a:	2201      	movs	r2, #1
 8009e9c:	2100      	movs	r1, #0
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f002 fdca 	bl	800ca38 <VL53L0X_WrByte>
 8009ea4:	4603      	mov	r3, r0
 8009ea6:	461a      	mov	r2, r3
 8009ea8:	7bfb      	ldrb	r3, [r7, #15]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	73fb      	strb	r3, [r7, #15]
	Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 8009eae:	2200      	movs	r2, #0
 8009eb0:	21ff      	movs	r1, #255	; 0xff
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f002 fdc0 	bl	800ca38 <VL53L0X_WrByte>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	461a      	mov	r2, r3
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	4313      	orrs	r3, r2
 8009ec0:	73fb      	strb	r3, [r7, #15]

	*pPhaseCal = (uint8_t)(PhaseCalint&0xEF);
 8009ec2:	7bbb      	ldrb	r3, [r7, #14]
 8009ec4:	f023 0310 	bic.w	r3, r3, #16
 8009ec8:	b2da      	uxtb	r2, r3
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	701a      	strb	r2, [r3, #0]

	return Status;
 8009ece:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}

08009eda <VL53L0X_perform_vhv_calibration>:


VL53L0X_Error VL53L0X_perform_vhv_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009eda:	b580      	push	{r7, lr}
 8009edc:	b08a      	sub	sp, #40	; 0x28
 8009ede:	af04      	add	r7, sp, #16
 8009ee0:	60f8      	str	r0, [r7, #12]
 8009ee2:	60b9      	str	r1, [r7, #8]
 8009ee4:	4611      	mov	r1, r2
 8009ee6:	461a      	mov	r2, r3
 8009ee8:	460b      	mov	r3, r1
 8009eea:	71fb      	strb	r3, [r7, #7]
 8009eec:	4613      	mov	r3, r2
 8009eee:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009efc:	2300      	movs	r3, #0
 8009efe:	753b      	strb	r3, [r7, #20]
	uint8_t PhaseCalInt = 0;
 8009f00:	2300      	movs	r3, #0
 8009f02:	74fb      	strb	r3, [r7, #19]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009f04:	79bb      	ldrb	r3, [r7, #6]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d003      	beq.n	8009f12 <VL53L0X_perform_vhv_calibration+0x38>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009f10:	75bb      	strb	r3, [r7, #22]

	/* Run VHV */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x01);
 8009f12:	2201      	movs	r2, #1
 8009f14:	2101      	movs	r1, #1
 8009f16:	68f8      	ldr	r0, [r7, #12]
 8009f18:	f002 fd8e 	bl	800ca38 <VL53L0X_WrByte>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009f20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d105      	bne.n	8009f34 <VL53L0X_perform_vhv_calibration+0x5a>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x40);
 8009f28:	2140      	movs	r1, #64	; 0x40
 8009f2a:	68f8      	ldr	r0, [r7, #12]
 8009f2c:	f7ff ff01 	bl	8009d32 <VL53L0X_perform_single_ref_calibration>
 8009f30:	4603      	mov	r3, r0
 8009f32:	75fb      	strb	r3, [r7, #23]

	/* Read VHV from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009f34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d115      	bne.n	8009f68 <VL53L0X_perform_vhv_calibration+0x8e>
 8009f3c:	79fb      	ldrb	r3, [r7, #7]
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d112      	bne.n	8009f68 <VL53L0X_perform_vhv_calibration+0x8e>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 8009f42:	7d39      	ldrb	r1, [r7, #20]
 8009f44:	7d7a      	ldrb	r2, [r7, #21]
 8009f46:	2300      	movs	r3, #0
 8009f48:	9303      	str	r3, [sp, #12]
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	9302      	str	r3, [sp, #8]
 8009f4e:	f107 0313 	add.w	r3, r7, #19
 8009f52:	9301      	str	r3, [sp, #4]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	9300      	str	r3, [sp, #0]
 8009f58:	460b      	mov	r3, r1
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f7ff ff23 	bl	8009da8 <VL53L0X_ref_calibration_io>
 8009f62:	4603      	mov	r3, r0
 8009f64:	75fb      	strb	r3, [r7, #23]
 8009f66:	e002      	b.n	8009f6e <VL53L0X_perform_vhv_calibration+0x94>
			VhvSettings, PhaseCal, /* Not used here */
			pVhvSettings, &PhaseCalInt,
			1, 0);
	} else
		*pVhvSettings = 0;
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 8009f6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d112      	bne.n	8009f9c <VL53L0X_perform_vhv_calibration+0xc2>
 8009f76:	79bb      	ldrb	r3, [r7, #6]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d00f      	beq.n	8009f9c <VL53L0X_perform_vhv_calibration+0xc2>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 8009f7c:	7dbb      	ldrb	r3, [r7, #22]
 8009f7e:	461a      	mov	r2, r3
 8009f80:	2101      	movs	r1, #1
 8009f82:	68f8      	ldr	r0, [r7, #12]
 8009f84:	f002 fd58 	bl	800ca38 <VL53L0X_WrByte>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 8009f8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d103      	bne.n	8009f9c <VL53L0X_perform_vhv_calibration+0xc2>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	7dba      	ldrb	r2, [r7, #22]
 8009f98:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 8009f9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3718      	adds	r7, #24
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <VL53L0X_perform_phase_calibration>:

VL53L0X_Error VL53L0X_perform_phase_calibration(VL53L0X_DEV Dev,
	uint8_t *pPhaseCal, const uint8_t get_data_enable,
	const uint8_t restore_config)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b08a      	sub	sp, #40	; 0x28
 8009fac:	af04      	add	r7, sp, #16
 8009fae:	60f8      	str	r0, [r7, #12]
 8009fb0:	60b9      	str	r1, [r7, #8]
 8009fb2:	4611      	mov	r1, r2
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	71fb      	strb	r3, [r7, #7]
 8009fba:	4613      	mov	r3, r2
 8009fbc:	71bb      	strb	r3, [r7, #6]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 8009fbe:	2300      	movs	r3, #0
 8009fc0:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	75bb      	strb	r3, [r7, #22]
	uint8_t VhvSettings = 0;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	757b      	strb	r3, [r7, #21]
	uint8_t PhaseCal = 0;
 8009fca:	2300      	movs	r3, #0
 8009fcc:	753b      	strb	r3, [r7, #20]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	if (restore_config)
 8009fce:	79bb      	ldrb	r3, [r7, #6]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d003      	beq.n	8009fdc <VL53L0X_perform_phase_calibration+0x34>
		SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009fda:	75bb      	strb	r3, [r7, #22]

	/* Run PhaseCal */
	Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG, 0x02);
 8009fdc:	2202      	movs	r2, #2
 8009fde:	2101      	movs	r1, #1
 8009fe0:	68f8      	ldr	r0, [r7, #12]
 8009fe2:	f002 fd29 	bl	800ca38 <VL53L0X_WrByte>
 8009fe6:	4603      	mov	r3, r0
 8009fe8:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE)
 8009fea:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d105      	bne.n	8009ffe <VL53L0X_perform_phase_calibration+0x56>
		Status = VL53L0X_perform_single_ref_calibration(Dev, 0x0);
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f7ff fe9c 	bl	8009d32 <VL53L0X_perform_single_ref_calibration>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	75fb      	strb	r3, [r7, #23]

	/* Read PhaseCal from device */
	if ((Status == VL53L0X_ERROR_NONE) && (get_data_enable == 1)) {
 8009ffe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d115      	bne.n	800a032 <VL53L0X_perform_phase_calibration+0x8a>
 800a006:	79fb      	ldrb	r3, [r7, #7]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d112      	bne.n	800a032 <VL53L0X_perform_phase_calibration+0x8a>
		Status = VL53L0X_ref_calibration_io(Dev, 1,
 800a00c:	7d39      	ldrb	r1, [r7, #20]
 800a00e:	7d7a      	ldrb	r2, [r7, #21]
 800a010:	2301      	movs	r3, #1
 800a012:	9303      	str	r3, [sp, #12]
 800a014:	2300      	movs	r3, #0
 800a016:	9302      	str	r3, [sp, #8]
 800a018:	68bb      	ldr	r3, [r7, #8]
 800a01a:	9301      	str	r3, [sp, #4]
 800a01c:	f107 0313 	add.w	r3, r7, #19
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	460b      	mov	r3, r1
 800a024:	2101      	movs	r1, #1
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f7ff febe 	bl	8009da8 <VL53L0X_ref_calibration_io>
 800a02c:	4603      	mov	r3, r0
 800a02e:	75fb      	strb	r3, [r7, #23]
 800a030:	e002      	b.n	800a038 <VL53L0X_perform_phase_calibration+0x90>
			VhvSettings, PhaseCal, /* Not used here */
			&VhvSettingsint, pPhaseCal,
			0, 1);
	} else
		*pPhaseCal = 0;
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	2200      	movs	r2, #0
 800a036:	701a      	strb	r2, [r3, #0]


	if ((Status == VL53L0X_ERROR_NONE) && restore_config) {
 800a038:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d112      	bne.n	800a066 <VL53L0X_perform_phase_calibration+0xbe>
 800a040:	79bb      	ldrb	r3, [r7, #6]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d00f      	beq.n	800a066 <VL53L0X_perform_phase_calibration+0xbe>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a046:	7dbb      	ldrb	r3, [r7, #22]
 800a048:	461a      	mov	r2, r3
 800a04a:	2101      	movs	r1, #1
 800a04c:	68f8      	ldr	r0, [r7, #12]
 800a04e:	f002 fcf3 	bl	800ca38 <VL53L0X_WrByte>
 800a052:	4603      	mov	r3, r0
 800a054:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a056:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d103      	bne.n	800a066 <VL53L0X_perform_phase_calibration+0xbe>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	7dba      	ldrb	r2, [r7, #22]
 800a062:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a066:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <VL53L0X_perform_ref_calibration>:

VL53L0X_Error VL53L0X_perform_ref_calibration(VL53L0X_DEV Dev,
	uint8_t *pVhvSettings, uint8_t *pPhaseCal, uint8_t get_data_enable)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b086      	sub	sp, #24
 800a076:	af00      	add	r7, sp, #0
 800a078:	60f8      	str	r0, [r7, #12]
 800a07a:	60b9      	str	r1, [r7, #8]
 800a07c:	607a      	str	r2, [r7, #4]
 800a07e:	70fb      	strb	r3, [r7, #3]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a080:	2300      	movs	r3, #0
 800a082:	75fb      	strb	r3, [r7, #23]
	uint8_t SequenceConfig = 0;
 800a084:	2300      	movs	r3, #0
 800a086:	75bb      	strb	r3, [r7, #22]

	/* store the value of the sequence config,
	 * this will be reset before the end of the function
	 */

	SequenceConfig = PALDevDataGet(Dev, SequenceConfig);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800a08e:	75bb      	strb	r3, [r7, #22]

	/* In the following function we don't save the config to optimize
	 * writes on device. Config is saved and restored only once. */
	Status = VL53L0X_perform_vhv_calibration(
 800a090:	78fa      	ldrb	r2, [r7, #3]
 800a092:	2300      	movs	r3, #0
 800a094:	68b9      	ldr	r1, [r7, #8]
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f7ff ff1f 	bl	8009eda <VL53L0X_perform_vhv_calibration>
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]
			Dev, pVhvSettings, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE)
 800a0a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d107      	bne.n	800a0b8 <VL53L0X_perform_ref_calibration+0x46>
		Status = VL53L0X_perform_phase_calibration(
 800a0a8:	78fa      	ldrb	r2, [r7, #3]
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	6879      	ldr	r1, [r7, #4]
 800a0ae:	68f8      	ldr	r0, [r7, #12]
 800a0b0:	f7ff ff7a 	bl	8009fa8 <VL53L0X_perform_phase_calibration>
 800a0b4:	4603      	mov	r3, r0
 800a0b6:	75fb      	strb	r3, [r7, #23]
			Dev, pPhaseCal, get_data_enable, 0);


	if (Status == VL53L0X_ERROR_NONE) {
 800a0b8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10f      	bne.n	800a0e0 <VL53L0X_perform_ref_calibration+0x6e>
		/* restore the previous Sequence Config */
		Status = VL53L0X_WrByte(Dev, VL53L0X_REG_SYSTEM_SEQUENCE_CONFIG,
 800a0c0:	7dbb      	ldrb	r3, [r7, #22]
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2101      	movs	r1, #1
 800a0c6:	68f8      	ldr	r0, [r7, #12]
 800a0c8:	f002 fcb6 	bl	800ca38 <VL53L0X_WrByte>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	75fb      	strb	r3, [r7, #23]
				SequenceConfig);
		if (Status == VL53L0X_ERROR_NONE)
 800a0d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d103      	bne.n	800a0e0 <VL53L0X_perform_ref_calibration+0x6e>
			PALDevDataSet(Dev, SequenceConfig, SequenceConfig);
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	7dba      	ldrb	r2, [r7, #22]
 800a0dc:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130

	}

	return Status;
 800a0e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3718      	adds	r7, #24
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}

0800a0ec <VL53L0X_measurement_poll_for_completion>:
	}
	return Status;
}

VL53L0X_Error VL53L0X_measurement_poll_for_completion(VL53L0X_DEV Dev)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	75fb      	strb	r3, [r7, #23]
	uint8_t NewDataReady = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	73fb      	strb	r3, [r7, #15]
	uint32_t LoopNb;

	LOG_FUNCTION_START("");

	LoopNb = 0;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	613b      	str	r3, [r7, #16]

	do {
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a100:	f107 030f 	add.w	r3, r7, #15
 800a104:	4619      	mov	r1, r3
 800a106:	6878      	ldr	r0, [r7, #4]
 800a108:	f7fe fe02 	bl	8008d10 <VL53L0X_GetMeasurementDataReady>
 800a10c:	4603      	mov	r3, r0
 800a10e:	75fb      	strb	r3, [r7, #23]
		if (Status != 0)
 800a110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10f      	bne.n	800a138 <VL53L0X_measurement_poll_for_completion+0x4c>
			break; /* the error is set */

		if (NewDataReady == 1)
 800a118:	7bfb      	ldrb	r3, [r7, #15]
 800a11a:	2b01      	cmp	r3, #1
 800a11c:	d00e      	beq.n	800a13c <VL53L0X_measurement_poll_for_completion+0x50>
			break; /* done note that status == 0 */

		LoopNb++;
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	3301      	adds	r3, #1
 800a122:	613b      	str	r3, [r7, #16]
		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP) {
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	2bc7      	cmp	r3, #199	; 0xc7
 800a128:	d902      	bls.n	800a130 <VL53L0X_measurement_poll_for_completion+0x44>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a12a:	23f9      	movs	r3, #249	; 0xf9
 800a12c:	75fb      	strb	r3, [r7, #23]
			break;
 800a12e:	e006      	b.n	800a13e <VL53L0X_measurement_poll_for_completion+0x52>
		}

		VL53L0X_PollingDelay(Dev);
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f002 fd03 	bl	800cb3c <VL53L0X_PollingDelay>
		Status = VL53L0X_GetMeasurementDataReady(Dev, &NewDataReady);
 800a136:	e7e3      	b.n	800a100 <VL53L0X_measurement_poll_for_completion+0x14>
			break; /* the error is set */
 800a138:	bf00      	nop
 800a13a:	e000      	b.n	800a13e <VL53L0X_measurement_poll_for_completion+0x52>
			break; /* done note that status == 0 */
 800a13c:	bf00      	nop
	} while (1);

	LOG_FUNCTION_END(Status);

	return Status;
 800a13e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a142:	4618      	mov	r0, r3
 800a144:	3718      	adds	r7, #24
 800a146:	46bd      	mov	sp, r7
 800a148:	bd80      	pop	{r7, pc}

0800a14a <VL53L0X_decode_vcsel_period>:


uint8_t VL53L0X_decode_vcsel_period(uint8_t vcsel_period_reg)
{
 800a14a:	b480      	push	{r7}
 800a14c:	b085      	sub	sp, #20
 800a14e:	af00      	add	r7, sp, #0
 800a150:	4603      	mov	r3, r0
 800a152:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real
	 * period in PLL clocks
	 */

	uint8_t vcsel_period_pclks = 0;
 800a154:	2300      	movs	r3, #0
 800a156:	73fb      	strb	r3, [r7, #15]

	vcsel_period_pclks = (vcsel_period_reg + 1) << 1;
 800a158:	79fb      	ldrb	r3, [r7, #7]
 800a15a:	3301      	adds	r3, #1
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	005b      	lsls	r3, r3, #1
 800a160:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_pclks;
 800a162:	7bfb      	ldrb	r3, [r7, #15]
}
 800a164:	4618      	mov	r0, r3
 800a166:	3714      	adds	r7, #20
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <VL53L0X_encode_vcsel_period>:

uint8_t VL53L0X_encode_vcsel_period(uint8_t vcsel_period_pclks)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	4603      	mov	r3, r0
 800a178:	71fb      	strb	r3, [r7, #7]
	/*!
	 * Converts the encoded VCSEL period register value into the real period
	 * in PLL clocks
	 */

	uint8_t vcsel_period_reg = 0;
 800a17a:	2300      	movs	r3, #0
 800a17c:	73fb      	strb	r3, [r7, #15]

	vcsel_period_reg = (vcsel_period_pclks >> 1) - 1;
 800a17e:	79fb      	ldrb	r3, [r7, #7]
 800a180:	085b      	lsrs	r3, r3, #1
 800a182:	b2db      	uxtb	r3, r3
 800a184:	3b01      	subs	r3, #1
 800a186:	73fb      	strb	r3, [r7, #15]

	return vcsel_period_reg;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3714      	adds	r7, #20
 800a18e:	46bd      	mov	sp, r7
 800a190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a194:	4770      	bx	lr

0800a196 <VL53L0X_isqrt>:


uint32_t VL53L0X_isqrt(uint32_t num)
{
 800a196:	b480      	push	{r7}
 800a198:	b085      	sub	sp, #20
 800a19a:	af00      	add	r7, sp, #0
 800a19c:	6078      	str	r0, [r7, #4]
	 * Implements an integer square root
	 *
	 * From: http://en.wikipedia.org/wiki/Methods_of_computing_square_roots
	 */

	uint32_t  res = 0;
 800a19e:	2300      	movs	r3, #0
 800a1a0:	60fb      	str	r3, [r7, #12]
	uint32_t  bit = 1 << 30;
 800a1a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a1a6:	60bb      	str	r3, [r7, #8]
	/* The second-to-top bit is set:
	 *	1 << 14 for 16-bits, 1 << 30 for 32 bits */

	 /* "bit" starts at the highest power of four <= the argument. */
	while (bit > num)
 800a1a8:	e002      	b.n	800a1b0 <VL53L0X_isqrt+0x1a>
		bit >>= 2;
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	089b      	lsrs	r3, r3, #2
 800a1ae:	60bb      	str	r3, [r7, #8]
	while (bit > num)
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d8f8      	bhi.n	800a1aa <VL53L0X_isqrt+0x14>


	while (bit != 0) {
 800a1b8:	e017      	b.n	800a1ea <VL53L0X_isqrt+0x54>
		if (num >= res + bit) {
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	68bb      	ldr	r3, [r7, #8]
 800a1be:	4413      	add	r3, r2
 800a1c0:	687a      	ldr	r2, [r7, #4]
 800a1c2:	429a      	cmp	r2, r3
 800a1c4:	d30b      	bcc.n	800a1de <VL53L0X_isqrt+0x48>
			num -= res + bit;
 800a1c6:	68fa      	ldr	r2, [r7, #12]
 800a1c8:	68bb      	ldr	r3, [r7, #8]
 800a1ca:	4413      	add	r3, r2
 800a1cc:	687a      	ldr	r2, [r7, #4]
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	607b      	str	r3, [r7, #4]
			res = (res >> 1) + bit;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	085b      	lsrs	r3, r3, #1
 800a1d6:	68ba      	ldr	r2, [r7, #8]
 800a1d8:	4413      	add	r3, r2
 800a1da:	60fb      	str	r3, [r7, #12]
 800a1dc:	e002      	b.n	800a1e4 <VL53L0X_isqrt+0x4e>
		} else
			res >>= 1;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	085b      	lsrs	r3, r3, #1
 800a1e2:	60fb      	str	r3, [r7, #12]

		bit >>= 2;
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	089b      	lsrs	r3, r3, #2
 800a1e8:	60bb      	str	r3, [r7, #8]
	while (bit != 0) {
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d1e4      	bne.n	800a1ba <VL53L0X_isqrt+0x24>
	}

	return res;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
}
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	3714      	adds	r7, #20
 800a1f6:	46bd      	mov	sp, r7
 800a1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1fc:	4770      	bx	lr

0800a1fe <VL53L0X_device_read_strobe>:
	return res;
}


VL53L0X_Error VL53L0X_device_read_strobe(VL53L0X_DEV Dev)
{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af00      	add	r7, sp, #0
 800a204:	6078      	str	r0, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a206:	2300      	movs	r3, #0
 800a208:	75fb      	strb	r3, [r7, #23]
	uint8_t strobe;
	uint32_t LoopNb;
	LOG_FUNCTION_START("");

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x00);
 800a20a:	2200      	movs	r2, #0
 800a20c:	2183      	movs	r1, #131	; 0x83
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f002 fc12 	bl	800ca38 <VL53L0X_WrByte>
 800a214:	4603      	mov	r3, r0
 800a216:	461a      	mov	r2, r3
 800a218:	7dfb      	ldrb	r3, [r7, #23]
 800a21a:	4313      	orrs	r3, r2
 800a21c:	75fb      	strb	r3, [r7, #23]

	/* polling
	 * use timeout to avoid deadlock*/
	if (Status == VL53L0X_ERROR_NONE) {
 800a21e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d11c      	bne.n	800a260 <VL53L0X_device_read_strobe+0x62>
		LoopNb = 0;
 800a226:	2300      	movs	r3, #0
 800a228:	613b      	str	r3, [r7, #16]
		do {
			Status = VL53L0X_RdByte(Dev, 0x83, &strobe);
 800a22a:	f107 030f 	add.w	r3, r7, #15
 800a22e:	461a      	mov	r2, r3
 800a230:	2183      	movs	r1, #131	; 0x83
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f002 fb05 	bl	800c842 <VL53L0X_RdByte>
 800a238:	4603      	mov	r3, r0
 800a23a:	75fb      	strb	r3, [r7, #23]
			if ((strobe != 0x00) || Status != VL53L0X_ERROR_NONE)
 800a23c:	7bfb      	ldrb	r3, [r7, #15]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d109      	bne.n	800a256 <VL53L0X_device_read_strobe+0x58>
 800a242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d105      	bne.n	800a256 <VL53L0X_device_read_strobe+0x58>
					break;

			LoopNb = LoopNb + 1;
 800a24a:	693b      	ldr	r3, [r7, #16]
 800a24c:	3301      	adds	r3, #1
 800a24e:	613b      	str	r3, [r7, #16]
		} while (LoopNb < VL53L0X_DEFAULT_MAX_LOOP);
 800a250:	693b      	ldr	r3, [r7, #16]
 800a252:	2bc7      	cmp	r3, #199	; 0xc7
 800a254:	d9e9      	bls.n	800a22a <VL53L0X_device_read_strobe+0x2c>

		if (LoopNb >= VL53L0X_DEFAULT_MAX_LOOP)
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	2bc7      	cmp	r3, #199	; 0xc7
 800a25a:	d901      	bls.n	800a260 <VL53L0X_device_read_strobe+0x62>
			Status = VL53L0X_ERROR_TIME_OUT;
 800a25c:	23f9      	movs	r3, #249	; 0xf9
 800a25e:	75fb      	strb	r3, [r7, #23]

	}

	Status |= VL53L0X_WrByte(Dev, 0x83, 0x01);
 800a260:	2201      	movs	r2, #1
 800a262:	2183      	movs	r1, #131	; 0x83
 800a264:	6878      	ldr	r0, [r7, #4]
 800a266:	f002 fbe7 	bl	800ca38 <VL53L0X_WrByte>
 800a26a:	4603      	mov	r3, r0
 800a26c:	461a      	mov	r2, r3
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
 800a270:	4313      	orrs	r3, r2
 800a272:	75fb      	strb	r3, [r7, #23]

	LOG_FUNCTION_END(Status);
	return Status;
 800a274:	f997 3017 	ldrsb.w	r3, [r7, #23]

}
 800a278:	4618      	mov	r0, r3
 800a27a:	3718      	adds	r7, #24
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}

0800a280 <VL53L0X_get_info_from_device>:

VL53L0X_Error VL53L0X_get_info_from_device(VL53L0X_DEV Dev, uint8_t option)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b098      	sub	sp, #96	; 0x60
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	460b      	mov	r3, r1
 800a28a:	70fb      	strb	r3, [r7, #3]

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t byte;
	uint32_t TmpDWord;
	uint8_t ModuleId;
	uint8_t Revision;
	uint8_t ReferenceSpadCount = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t ReferenceSpadType = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
	uint32_t PartUIDUpper = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PartUIDLower = 0;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t OffsetFixed1104_mm = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	64bb      	str	r3, [r7, #72]	; 0x48
	int16_t OffsetMicroMeters = 0;
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	uint32_t DistMeasTgtFixed1104_mm = 400 << 4;
 800a2b0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800a2b4:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t DistMeasFixed1104_400_mm = 0;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t SignalRateMeasFixed1104_400_mm = 0;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	653b      	str	r3, [r7, #80]	; 0x50
	char ProductId[19];
	char *ProductId_tmp;
	uint8_t ReadDataFromDeviceDone;
	FixPoint1616_t SignalRateMeasFixed400mmFix = 0;
 800a2be:	2300      	movs	r3, #0
 800a2c0:	643b      	str	r3, [r7, #64]	; 0x40
	int i;


	LOG_FUNCTION_START("");

	ReadDataFromDeviceDone = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f893 30f0 	ldrb.w	r3, [r3, #240]	; 0xf0
 800a2c8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			ReadDataFromDeviceDone);

	/* This access is done only once after that a GetDeviceInfo or
	 * datainit is done*/
	if (ReadDataFromDeviceDone != 7) {
 800a2cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a2d0:	2b07      	cmp	r3, #7
 800a2d2:	f000 8408 	beq.w	800aae6 <VL53L0X_get_info_from_device+0x866>

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	2180      	movs	r1, #128	; 0x80
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f002 fbac 	bl	800ca38 <VL53L0X_WrByte>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a2e8:	4313      	orrs	r3, r2
 800a2ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	21ff      	movs	r1, #255	; 0xff
 800a2f2:	6878      	ldr	r0, [r7, #4]
 800a2f4:	f002 fba0 	bl	800ca38 <VL53L0X_WrByte>
 800a2f8:	4603      	mov	r3, r0
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a300:	4313      	orrs	r3, r2
 800a302:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x00);
 800a306:	2200      	movs	r2, #0
 800a308:	2100      	movs	r1, #0
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f002 fb94 	bl	800ca38 <VL53L0X_WrByte>
 800a310:	4603      	mov	r3, r0
 800a312:	461a      	mov	r2, r3
 800a314:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a318:	4313      	orrs	r3, r2
 800a31a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800a31e:	2206      	movs	r2, #6
 800a320:	21ff      	movs	r1, #255	; 0xff
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f002 fb88 	bl	800ca38 <VL53L0X_WrByte>
 800a328:	4603      	mov	r3, r0
 800a32a:	461a      	mov	r2, r3
 800a32c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a330:	4313      	orrs	r3, r2
 800a332:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800a336:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800a33a:	461a      	mov	r2, r3
 800a33c:	2183      	movs	r1, #131	; 0x83
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f002 fa7f 	bl	800c842 <VL53L0X_RdByte>
 800a344:	4603      	mov	r3, r0
 800a346:	461a      	mov	r2, r3
 800a348:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a34c:	4313      	orrs	r3, r2
 800a34e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte|4);
 800a352:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a356:	f043 0304 	orr.w	r3, r3, #4
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	461a      	mov	r2, r3
 800a35e:	2183      	movs	r1, #131	; 0x83
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f002 fb69 	bl	800ca38 <VL53L0X_WrByte>
 800a366:	4603      	mov	r3, r0
 800a368:	461a      	mov	r2, r3
 800a36a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a36e:	4313      	orrs	r3, r2
 800a370:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x07);
 800a374:	2207      	movs	r2, #7
 800a376:	21ff      	movs	r1, #255	; 0xff
 800a378:	6878      	ldr	r0, [r7, #4]
 800a37a:	f002 fb5d 	bl	800ca38 <VL53L0X_WrByte>
 800a37e:	4603      	mov	r3, r0
 800a380:	461a      	mov	r2, r3
 800a382:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a386:	4313      	orrs	r3, r2
 800a388:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x81, 0x01);
 800a38c:	2201      	movs	r2, #1
 800a38e:	2181      	movs	r1, #129	; 0x81
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f002 fb51 	bl	800ca38 <VL53L0X_WrByte>
 800a396:	4603      	mov	r3, r0
 800a398:	461a      	mov	r2, r3
 800a39a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a39e:	4313      	orrs	r3, r2
 800a3a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_PollingDelay(Dev);
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f002 fbc9 	bl	800cb3c <VL53L0X_PollingDelay>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0x80, 0x01);
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	2180      	movs	r1, #128	; 0x80
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f002 fb3b 	bl	800ca38 <VL53L0X_WrByte>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	461a      	mov	r2, r3
 800a3c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		if (((option & 1) == 1) &&
 800a3d0:	78fb      	ldrb	r3, [r7, #3]
 800a3d2:	f003 0301 	and.w	r3, r3, #1
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	f000 8098 	beq.w	800a50c <VL53L0X_get_info_from_device+0x28c>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800a3dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a3e0:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	f040 8091 	bne.w	800a50c <VL53L0X_get_info_from_device+0x28c>
			Status |= VL53L0X_WrByte(Dev, 0x94, 0x6b);
 800a3ea:	226b      	movs	r2, #107	; 0x6b
 800a3ec:	2194      	movs	r1, #148	; 0x94
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f002 fb22 	bl	800ca38 <VL53L0X_WrByte>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	461a      	mov	r2, r3
 800a3f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a3fc:	4313      	orrs	r3, r2
 800a3fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	f7ff fefb 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a408:	4603      	mov	r3, r0
 800a40a:	461a      	mov	r2, r3
 800a40c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a410:	4313      	orrs	r3, r2
 800a412:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a416:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a41a:	461a      	mov	r2, r3
 800a41c:	2190      	movs	r1, #144	; 0x90
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f002 face 	bl	800c9c0 <VL53L0X_RdDWord>
 800a424:	4603      	mov	r3, r0
 800a426:	461a      	mov	r2, r3
 800a428:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a42c:	4313      	orrs	r3, r2
 800a42e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ReferenceSpadCount = (uint8_t)((TmpDWord >> 8) & 0x07f);
 800a432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a434:	0a1b      	lsrs	r3, r3, #8
 800a436:	b2db      	uxtb	r3, r3
 800a438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a43c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			ReferenceSpadType  = (uint8_t)((TmpDWord >> 15) & 0x01);
 800a440:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a442:	0bdb      	lsrs	r3, r3, #15
 800a444:	b2db      	uxtb	r3, r3
 800a446:	f003 0301 	and.w	r3, r3, #1
 800a44a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x24);
 800a44e:	2224      	movs	r2, #36	; 0x24
 800a450:	2194      	movs	r1, #148	; 0x94
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	f002 faf0 	bl	800ca38 <VL53L0X_WrByte>
 800a458:	4603      	mov	r3, r0
 800a45a:	461a      	mov	r2, r3
 800a45c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a460:	4313      	orrs	r3, r2
 800a462:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f7ff fec9 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a46c:	4603      	mov	r3, r0
 800a46e:	461a      	mov	r2, r3
 800a470:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a474:	4313      	orrs	r3, r2
 800a476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a47a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a47e:	461a      	mov	r2, r3
 800a480:	2190      	movs	r1, #144	; 0x90
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f002 fa9c 	bl	800c9c0 <VL53L0X_RdDWord>
 800a488:	4603      	mov	r3, r0
 800a48a:	461a      	mov	r2, r3
 800a48c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a490:	4313      	orrs	r3, r2
 800a492:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


			NvmRefGoodSpadMap[0] = (uint8_t)((TmpDWord >> 24)
 800a496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a498:	0e1b      	lsrs	r3, r3, #24
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	723b      	strb	r3, [r7, #8]
				& 0xff);
			NvmRefGoodSpadMap[1] = (uint8_t)((TmpDWord >> 16)
 800a49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a0:	0c1b      	lsrs	r3, r3, #16
 800a4a2:	b2db      	uxtb	r3, r3
 800a4a4:	727b      	strb	r3, [r7, #9]
				& 0xff);
			NvmRefGoodSpadMap[2] = (uint8_t)((TmpDWord >> 8)
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4a8:	0a1b      	lsrs	r3, r3, #8
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	72bb      	strb	r3, [r7, #10]
				& 0xff);
			NvmRefGoodSpadMap[3] = (uint8_t)(TmpDWord & 0xff);
 800a4ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4b0:	b2db      	uxtb	r3, r3
 800a4b2:	72fb      	strb	r3, [r7, #11]

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x25);
 800a4b4:	2225      	movs	r2, #37	; 0x25
 800a4b6:	2194      	movs	r1, #148	; 0x94
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f002 fabd 	bl	800ca38 <VL53L0X_WrByte>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f7ff fe96 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a4d2:	4603      	mov	r3, r0
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a4e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a4e4:	461a      	mov	r2, r3
 800a4e6:	2190      	movs	r1, #144	; 0x90
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	f002 fa69 	bl	800c9c0 <VL53L0X_RdDWord>
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			NvmRefGoodSpadMap[4] = (uint8_t)((TmpDWord >> 24)
 800a4fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fe:	0e1b      	lsrs	r3, r3, #24
 800a500:	b2db      	uxtb	r3, r3
 800a502:	733b      	strb	r3, [r7, #12]
				& 0xff);
			NvmRefGoodSpadMap[5] = (uint8_t)((TmpDWord >> 16)
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	0c1b      	lsrs	r3, r3, #16
 800a508:	b2db      	uxtb	r3, r3
 800a50a:	737b      	strb	r3, [r7, #13]
				& 0xff);
		}

		if (((option & 2) == 2) &&
 800a50c:	78fb      	ldrb	r3, [r7, #3]
 800a50e:	f003 0302 	and.w	r3, r3, #2
 800a512:	2b00      	cmp	r3, #0
 800a514:	f000 8189 	beq.w	800a82a <VL53L0X_get_info_from_device+0x5aa>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800a518:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a51c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800a520:	2b00      	cmp	r3, #0
 800a522:	f040 8182 	bne.w	800a82a <VL53L0X_get_info_from_device+0x5aa>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x02);
 800a526:	2202      	movs	r2, #2
 800a528:	2194      	movs	r1, #148	; 0x94
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f002 fa84 	bl	800ca38 <VL53L0X_WrByte>
 800a530:	4603      	mov	r3, r0
 800a532:	461a      	mov	r2, r3
 800a534:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a538:	4313      	orrs	r3, r2
 800a53a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f7ff fe5d 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a544:	4603      	mov	r3, r0
 800a546:	461a      	mov	r2, r3
 800a548:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a54c:	4313      	orrs	r3, r2
 800a54e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &ModuleId);
 800a552:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 800a556:	461a      	mov	r2, r3
 800a558:	2190      	movs	r1, #144	; 0x90
 800a55a:	6878      	ldr	r0, [r7, #4]
 800a55c:	f002 f971 	bl	800c842 <VL53L0X_RdByte>
 800a560:	4603      	mov	r3, r0
 800a562:	461a      	mov	r2, r3
 800a564:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a568:	4313      	orrs	r3, r2
 800a56a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a56e:	227b      	movs	r2, #123	; 0x7b
 800a570:	2194      	movs	r1, #148	; 0x94
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f002 fa60 	bl	800ca38 <VL53L0X_WrByte>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a580:	4313      	orrs	r3, r2
 800a582:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a586:	6878      	ldr	r0, [r7, #4]
 800a588:	f7ff fe39 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a58c:	4603      	mov	r3, r0
 800a58e:	461a      	mov	r2, r3
 800a590:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a594:	4313      	orrs	r3, r2
 800a596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdByte(Dev, 0x90, &Revision);
 800a59a:	f107 032e 	add.w	r3, r7, #46	; 0x2e
 800a59e:	461a      	mov	r2, r3
 800a5a0:	2190      	movs	r1, #144	; 0x90
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f002 f94d 	bl	800c842 <VL53L0X_RdByte>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x77);
 800a5b6:	2277      	movs	r2, #119	; 0x77
 800a5b8:	2194      	movs	r1, #148	; 0x94
 800a5ba:	6878      	ldr	r0, [r7, #4]
 800a5bc:	f002 fa3c 	bl	800ca38 <VL53L0X_WrByte>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5c8:	4313      	orrs	r3, r2
 800a5ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7ff fe15 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	461a      	mov	r2, r3
 800a5d8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a5e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	2190      	movs	r1, #144	; 0x90
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f002 f9e8 	bl	800c9c0 <VL53L0X_RdDWord>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[0] = (char)((TmpDWord >> 25) & 0x07f);
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a600:	0e5b      	lsrs	r3, r3, #25
 800a602:	b2db      	uxtb	r3, r3
 800a604:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	743b      	strb	r3, [r7, #16]
			ProductId[1] = (char)((TmpDWord >> 18) & 0x07f);
 800a60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a60e:	0c9b      	lsrs	r3, r3, #18
 800a610:	b2db      	uxtb	r3, r3
 800a612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a616:	b2db      	uxtb	r3, r3
 800a618:	747b      	strb	r3, [r7, #17]
			ProductId[2] = (char)((TmpDWord >> 11) & 0x07f);
 800a61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a61c:	0adb      	lsrs	r3, r3, #11
 800a61e:	b2db      	uxtb	r3, r3
 800a620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a624:	b2db      	uxtb	r3, r3
 800a626:	74bb      	strb	r3, [r7, #18]
			ProductId[3] = (char)((TmpDWord >> 4) & 0x07f);
 800a628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a62a:	091b      	lsrs	r3, r3, #4
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a632:	b2db      	uxtb	r3, r3
 800a634:	74fb      	strb	r3, [r7, #19]

			byte = (uint8_t)((TmpDWord & 0x00f) << 3);
 800a636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	00db      	lsls	r3, r3, #3
 800a63c:	b2db      	uxtb	r3, r3
 800a63e:	f003 0378 	and.w	r3, r3, #120	; 0x78
 800a642:	b2db      	uxtb	r3, r3
 800a644:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x78);
 800a648:	2278      	movs	r2, #120	; 0x78
 800a64a:	2194      	movs	r1, #148	; 0x94
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f002 f9f3 	bl	800ca38 <VL53L0X_WrByte>
 800a652:	4603      	mov	r3, r0
 800a654:	461a      	mov	r2, r3
 800a656:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7ff fdcc 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a666:	4603      	mov	r3, r0
 800a668:	461a      	mov	r2, r3
 800a66a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a66e:	4313      	orrs	r3, r2
 800a670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a674:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a678:	461a      	mov	r2, r3
 800a67a:	2190      	movs	r1, #144	; 0x90
 800a67c:	6878      	ldr	r0, [r7, #4]
 800a67e:	f002 f99f 	bl	800c9c0 <VL53L0X_RdDWord>
 800a682:	4603      	mov	r3, r0
 800a684:	461a      	mov	r2, r3
 800a686:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a68a:	4313      	orrs	r3, r2
 800a68c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[4] = (char)(byte +
					((TmpDWord >> 29) & 0x07f));
 800a690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a692:	0f5b      	lsrs	r3, r3, #29
 800a694:	b2db      	uxtb	r3, r3
 800a696:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a69a:	b2da      	uxtb	r2, r3
			ProductId[4] = (char)(byte +
 800a69c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a6a0:	4413      	add	r3, r2
 800a6a2:	b2db      	uxtb	r3, r3
 800a6a4:	753b      	strb	r3, [r7, #20]
			ProductId[5] = (char)((TmpDWord >> 22) & 0x07f);
 800a6a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a8:	0d9b      	lsrs	r3, r3, #22
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	757b      	strb	r3, [r7, #21]
			ProductId[6] = (char)((TmpDWord >> 15) & 0x07f);
 800a6b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b6:	0bdb      	lsrs	r3, r3, #15
 800a6b8:	b2db      	uxtb	r3, r3
 800a6ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6be:	b2db      	uxtb	r3, r3
 800a6c0:	75bb      	strb	r3, [r7, #22]
			ProductId[7] = (char)((TmpDWord >> 8) & 0x07f);
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	0a1b      	lsrs	r3, r3, #8
 800a6c6:	b2db      	uxtb	r3, r3
 800a6c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6cc:	b2db      	uxtb	r3, r3
 800a6ce:	75fb      	strb	r3, [r7, #23]
			ProductId[8] = (char)((TmpDWord >> 1) & 0x07f);
 800a6d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d2:	085b      	lsrs	r3, r3, #1
 800a6d4:	b2db      	uxtb	r3, r3
 800a6d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6da:	b2db      	uxtb	r3, r3
 800a6dc:	763b      	strb	r3, [r7, #24]

			byte = (uint8_t)((TmpDWord & 0x001) << 6);
 800a6de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	019b      	lsls	r3, r3, #6
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x79);
 800a6f0:	2279      	movs	r2, #121	; 0x79
 800a6f2:	2194      	movs	r1, #148	; 0x94
 800a6f4:	6878      	ldr	r0, [r7, #4]
 800a6f6:	f002 f99f 	bl	800ca38 <VL53L0X_WrByte>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	461a      	mov	r2, r3
 800a6fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a702:	4313      	orrs	r3, r2
 800a704:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f7ff fd78 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a70e:	4603      	mov	r3, r0
 800a710:	461a      	mov	r2, r3
 800a712:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a716:	4313      	orrs	r3, r2
 800a718:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a71c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a720:	461a      	mov	r2, r3
 800a722:	2190      	movs	r1, #144	; 0x90
 800a724:	6878      	ldr	r0, [r7, #4]
 800a726:	f002 f94b 	bl	800c9c0 <VL53L0X_RdDWord>
 800a72a:	4603      	mov	r3, r0
 800a72c:	461a      	mov	r2, r3
 800a72e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a732:	4313      	orrs	r3, r2
 800a734:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[9] = (char)(byte +
					((TmpDWord >> 26) & 0x07f));
 800a738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a73a:	0e9b      	lsrs	r3, r3, #26
 800a73c:	b2db      	uxtb	r3, r3
 800a73e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a742:	b2da      	uxtb	r2, r3
			ProductId[9] = (char)(byte +
 800a744:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a748:	4413      	add	r3, r2
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	767b      	strb	r3, [r7, #25]
			ProductId[10] = (char)((TmpDWord >> 19) & 0x07f);
 800a74e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a750:	0cdb      	lsrs	r3, r3, #19
 800a752:	b2db      	uxtb	r3, r3
 800a754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a758:	b2db      	uxtb	r3, r3
 800a75a:	76bb      	strb	r3, [r7, #26]
			ProductId[11] = (char)((TmpDWord >> 12) & 0x07f);
 800a75c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a75e:	0b1b      	lsrs	r3, r3, #12
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a766:	b2db      	uxtb	r3, r3
 800a768:	76fb      	strb	r3, [r7, #27]
			ProductId[12] = (char)((TmpDWord >> 5) & 0x07f);
 800a76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a76c:	095b      	lsrs	r3, r3, #5
 800a76e:	b2db      	uxtb	r3, r3
 800a770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a774:	b2db      	uxtb	r3, r3
 800a776:	773b      	strb	r3, [r7, #28]

			byte = (uint8_t)((TmpDWord & 0x01f) << 2);
 800a778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	009b      	lsls	r3, r3, #2
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	f003 037c 	and.w	r3, r3, #124	; 0x7c
 800a784:	b2db      	uxtb	r3, r3
 800a786:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7A);
 800a78a:	227a      	movs	r2, #122	; 0x7a
 800a78c:	2194      	movs	r1, #148	; 0x94
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	f002 f952 	bl	800ca38 <VL53L0X_WrByte>
 800a794:	4603      	mov	r3, r0
 800a796:	461a      	mov	r2, r3
 800a798:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a79c:	4313      	orrs	r3, r2
 800a79e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_device_read_strobe(Dev);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff fd2b 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	461a      	mov	r2, r3
 800a7ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a7b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	2190      	movs	r1, #144	; 0x90
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f002 f8fe 	bl	800c9c0 <VL53L0X_RdDWord>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			ProductId[13] = (char)(byte +
					((TmpDWord >> 30) & 0x07f));
 800a7d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7d4:	0f9b      	lsrs	r3, r3, #30
 800a7d6:	b2db      	uxtb	r3, r3
 800a7d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7dc:	b2da      	uxtb	r2, r3
			ProductId[13] = (char)(byte +
 800a7de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a7e2:	4413      	add	r3, r2
 800a7e4:	b2db      	uxtb	r3, r3
 800a7e6:	777b      	strb	r3, [r7, #29]
			ProductId[14] = (char)((TmpDWord >> 23) & 0x07f);
 800a7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7ea:	0ddb      	lsrs	r3, r3, #23
 800a7ec:	b2db      	uxtb	r3, r3
 800a7ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7f2:	b2db      	uxtb	r3, r3
 800a7f4:	77bb      	strb	r3, [r7, #30]
			ProductId[15] = (char)((TmpDWord >> 16) & 0x07f);
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	0c1b      	lsrs	r3, r3, #16
 800a7fa:	b2db      	uxtb	r3, r3
 800a7fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a800:	b2db      	uxtb	r3, r3
 800a802:	77fb      	strb	r3, [r7, #31]
			ProductId[16] = (char)((TmpDWord >> 9) & 0x07f);
 800a804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a806:	0a5b      	lsrs	r3, r3, #9
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a80e:	b2db      	uxtb	r3, r3
 800a810:	f887 3020 	strb.w	r3, [r7, #32]
			ProductId[17] = (char)((TmpDWord >> 2) & 0x07f);
 800a814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a816:	089b      	lsrs	r3, r3, #2
 800a818:	b2db      	uxtb	r3, r3
 800a81a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			ProductId[18] = '\0';
 800a824:	2300      	movs	r3, #0
 800a826:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		}

		if (((option & 4) == 4) &&
 800a82a:	78fb      	ldrb	r3, [r7, #3]
 800a82c:	f003 0304 	and.w	r3, r3, #4
 800a830:	2b00      	cmp	r3, #0
 800a832:	f000 80f1 	beq.w	800aa18 <VL53L0X_get_info_from_device+0x798>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800a836:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800a83a:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800a83e:	2b00      	cmp	r3, #0
 800a840:	f040 80ea 	bne.w	800aa18 <VL53L0X_get_info_from_device+0x798>

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7B);
 800a844:	227b      	movs	r2, #123	; 0x7b
 800a846:	2194      	movs	r1, #148	; 0x94
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f002 f8f5 	bl	800ca38 <VL53L0X_WrByte>
 800a84e:	4603      	mov	r3, r0
 800a850:	461a      	mov	r2, r3
 800a852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a856:	4313      	orrs	r3, r2
 800a858:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f7ff fcce 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a862:	4603      	mov	r3, r0
 800a864:	461a      	mov	r2, r3
 800a866:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a86a:	4313      	orrs	r3, r2
 800a86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDUpper);
 800a870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a874:	461a      	mov	r2, r3
 800a876:	2190      	movs	r1, #144	; 0x90
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f002 f8a1 	bl	800c9c0 <VL53L0X_RdDWord>
 800a87e:	4603      	mov	r3, r0
 800a880:	461a      	mov	r2, r3
 800a882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a886:	4313      	orrs	r3, r2
 800a888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x7C);
 800a88c:	227c      	movs	r2, #124	; 0x7c
 800a88e:	2194      	movs	r1, #148	; 0x94
 800a890:	6878      	ldr	r0, [r7, #4]
 800a892:	f002 f8d1 	bl	800ca38 <VL53L0X_WrByte>
 800a896:	4603      	mov	r3, r0
 800a898:	461a      	mov	r2, r3
 800a89a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a89e:	4313      	orrs	r3, r2
 800a8a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f7ff fcaa 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	461a      	mov	r2, r3
 800a8ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8b2:	4313      	orrs	r3, r2
 800a8b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &PartUIDLower);
 800a8b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8bc:	461a      	mov	r2, r3
 800a8be:	2190      	movs	r1, #144	; 0x90
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f002 f87d 	bl	800c9c0 <VL53L0X_RdDWord>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x73);
 800a8d4:	2273      	movs	r2, #115	; 0x73
 800a8d6:	2194      	movs	r1, #148	; 0x94
 800a8d8:	6878      	ldr	r0, [r7, #4]
 800a8da:	f002 f8ad 	bl	800ca38 <VL53L0X_WrByte>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	461a      	mov	r2, r3
 800a8e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8e6:	4313      	orrs	r3, r2
 800a8e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f7ff fc86 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a900:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a904:	461a      	mov	r2, r3
 800a906:	2190      	movs	r1, #144	; 0x90
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f002 f859 	bl	800c9c0 <VL53L0X_RdDWord>
 800a90e:	4603      	mov	r3, r0
 800a910:	461a      	mov	r2, r3
 800a912:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a916:	4313      	orrs	r3, r2
 800a918:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm = (TmpDWord &
				0x000000ff) << 8;
 800a91c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91e:	021b      	lsls	r3, r3, #8
			SignalRateMeasFixed1104_400_mm = (TmpDWord &
 800a920:	b29b      	uxth	r3, r3
 800a922:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x74);
 800a924:	2274      	movs	r2, #116	; 0x74
 800a926:	2194      	movs	r1, #148	; 0x94
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f002 f885 	bl	800ca38 <VL53L0X_WrByte>
 800a92e:	4603      	mov	r3, r0
 800a930:	461a      	mov	r2, r3
 800a932:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a936:	4313      	orrs	r3, r2
 800a938:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	f7ff fc5e 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a942:	4603      	mov	r3, r0
 800a944:	461a      	mov	r2, r3
 800a946:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a94a:	4313      	orrs	r3, r2
 800a94c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a950:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a954:	461a      	mov	r2, r3
 800a956:	2190      	movs	r1, #144	; 0x90
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f002 f831 	bl	800c9c0 <VL53L0X_RdDWord>
 800a95e:	4603      	mov	r3, r0
 800a960:	461a      	mov	r2, r3
 800a962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a966:	4313      	orrs	r3, r2
 800a968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
				0xff000000) >> 24);
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	0e1b      	lsrs	r3, r3, #24
			SignalRateMeasFixed1104_400_mm |= ((TmpDWord &
 800a970:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a972:	4313      	orrs	r3, r2
 800a974:	653b      	str	r3, [r7, #80]	; 0x50

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x75);
 800a976:	2275      	movs	r2, #117	; 0x75
 800a978:	2194      	movs	r1, #148	; 0x94
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f002 f85c 	bl	800ca38 <VL53L0X_WrByte>
 800a980:	4603      	mov	r3, r0
 800a982:	461a      	mov	r2, r3
 800a984:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a988:	4313      	orrs	r3, r2
 800a98a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f7ff fc35 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a994:	4603      	mov	r3, r0
 800a996:	461a      	mov	r2, r3
 800a998:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a99c:	4313      	orrs	r3, r2
 800a99e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a9a2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	2190      	movs	r1, #144	; 0x90
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f002 f808 	bl	800c9c0 <VL53L0X_RdDWord>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
							<< 8;
 800a9be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c0:	021b      	lsls	r3, r3, #8
			DistMeasFixed1104_400_mm = (TmpDWord & 0x000000ff)
 800a9c2:	b29b      	uxth	r3, r3
 800a9c4:	657b      	str	r3, [r7, #84]	; 0x54

			Status |= VL53L0X_WrByte(Dev, 0x94, 0x76);
 800a9c6:	2276      	movs	r2, #118	; 0x76
 800a9c8:	2194      	movs	r1, #148	; 0x94
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f002 f834 	bl	800ca38 <VL53L0X_WrByte>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_device_read_strobe(Dev);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f7ff fc0d 	bl	800a1fe <VL53L0X_device_read_strobe>
 800a9e4:	4603      	mov	r3, r0
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			Status |= VL53L0X_RdDWord(Dev, 0x90, &TmpDWord);
 800a9f2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	2190      	movs	r1, #144	; 0x90
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f001 ffe0 	bl	800c9c0 <VL53L0X_RdDWord>
 800aa00:	4603      	mov	r3, r0
 800aa02:	461a      	mov	r2, r3
 800aa04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
							>> 24);
 800aa0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa10:	0e1b      	lsrs	r3, r3, #24
			DistMeasFixed1104_400_mm |= ((TmpDWord & 0xff000000)
 800aa12:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa14:	4313      	orrs	r3, r2
 800aa16:	657b      	str	r3, [r7, #84]	; 0x54
		}

		Status |= VL53L0X_WrByte(Dev, 0x81, 0x00);
 800aa18:	2200      	movs	r2, #0
 800aa1a:	2181      	movs	r1, #129	; 0x81
 800aa1c:	6878      	ldr	r0, [r7, #4]
 800aa1e:	f002 f80b 	bl	800ca38 <VL53L0X_WrByte>
 800aa22:	4603      	mov	r3, r0
 800aa24:	461a      	mov	r2, r3
 800aa26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa2a:	4313      	orrs	r3, r2
 800aa2c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x06);
 800aa30:	2206      	movs	r2, #6
 800aa32:	21ff      	movs	r1, #255	; 0xff
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f001 ffff 	bl	800ca38 <VL53L0X_WrByte>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa42:	4313      	orrs	r3, r2
 800aa44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_RdByte(Dev, 0x83, &byte);
 800aa48:	f107 0337 	add.w	r3, r7, #55	; 0x37
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	2183      	movs	r1, #131	; 0x83
 800aa50:	6878      	ldr	r0, [r7, #4]
 800aa52:	f001 fef6 	bl	800c842 <VL53L0X_RdByte>
 800aa56:	4603      	mov	r3, r0
 800aa58:	461a      	mov	r2, r3
 800aa5a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa5e:	4313      	orrs	r3, r2
 800aa60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x83, byte&0xfb);
 800aa64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800aa68:	f023 0304 	bic.w	r3, r3, #4
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	461a      	mov	r2, r3
 800aa70:	2183      	movs	r1, #131	; 0x83
 800aa72:	6878      	ldr	r0, [r7, #4]
 800aa74:	f001 ffe0 	bl	800ca38 <VL53L0X_WrByte>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	461a      	mov	r2, r3
 800aa7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa80:	4313      	orrs	r3, r2
 800aa82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800aa86:	2201      	movs	r2, #1
 800aa88:	21ff      	movs	r1, #255	; 0xff
 800aa8a:	6878      	ldr	r0, [r7, #4]
 800aa8c:	f001 ffd4 	bl	800ca38 <VL53L0X_WrByte>
 800aa90:	4603      	mov	r3, r0
 800aa92:	461a      	mov	r2, r3
 800aa94:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x00, 0x01);
 800aa9e:	2201      	movs	r2, #1
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f001 ffc8 	bl	800ca38 <VL53L0X_WrByte>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	461a      	mov	r2, r3
 800aaac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aab0:	4313      	orrs	r3, r2
 800aab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

		Status |= VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800aab6:	2200      	movs	r2, #0
 800aab8:	21ff      	movs	r1, #255	; 0xff
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f001 ffbc 	bl	800ca38 <VL53L0X_WrByte>
 800aac0:	4603      	mov	r3, r0
 800aac2:	461a      	mov	r2, r3
 800aac4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aac8:	4313      	orrs	r3, r2
 800aaca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		Status |= VL53L0X_WrByte(Dev, 0x80, 0x00);
 800aace:	2200      	movs	r2, #0
 800aad0:	2180      	movs	r1, #128	; 0x80
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f001 ffb0 	bl	800ca38 <VL53L0X_WrByte>
 800aad8:	4603      	mov	r3, r0
 800aada:	461a      	mov	r2, r3
 800aadc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aae0:	4313      	orrs	r3, r2
 800aae2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	if ((Status == VL53L0X_ERROR_NONE) &&
 800aae6:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	f040 808f 	bne.w	800ac0e <VL53L0X_get_info_from_device+0x98e>
 800aaf0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800aaf4:	2b07      	cmp	r3, #7
 800aaf6:	f000 808a 	beq.w	800ac0e <VL53L0X_get_info_from_device+0x98e>
		(ReadDataFromDeviceDone != 7)) {
		/* Assign to variable if status is ok */
		if (((option & 1) == 1) &&
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	f003 0301 	and.w	r3, r3, #1
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d024      	beq.n	800ab4e <VL53L0X_get_info_from_device+0x8ce>
			((ReadDataFromDeviceDone & 1) == 0)) {
 800ab04:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab08:	f003 0301 	and.w	r3, r3, #1
		if (((option & 1) == 1) &&
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d11e      	bne.n	800ab4e <VL53L0X_get_info_from_device+0x8ce>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f897 205e 	ldrb.w	r2, [r7, #94]	; 0x5e
 800ab16:	f883 2113 	strb.w	r2, [r3, #275]	; 0x113
				ReferenceSpadCount, ReferenceSpadCount);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 800ab20:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
				ReferenceSpadType, ReferenceSpadType);

			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ab24:	2300      	movs	r3, #0
 800ab26:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab28:	e00e      	b.n	800ab48 <VL53L0X_get_info_from_device+0x8c8>
				Dev->Data.SpadData.RefGoodSpadMap[i] =
					NvmRefGoodSpadMap[i];
 800ab2a:	f107 0208 	add.w	r2, r7, #8
 800ab2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab30:	4413      	add	r3, r2
 800ab32:	7819      	ldrb	r1, [r3, #0]
				Dev->Data.SpadData.RefGoodSpadMap[i] =
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab38:	4413      	add	r3, r2
 800ab3a:	f503 7395 	add.w	r3, r3, #298	; 0x12a
 800ab3e:	460a      	mov	r2, r1
 800ab40:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < VL53L0X_REF_SPAD_BUFFER_SIZE; i++) {
 800ab42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab44:	3301      	adds	r3, #1
 800ab46:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab4a:	2b05      	cmp	r3, #5
 800ab4c:	dded      	ble.n	800ab2a <VL53L0X_get_info_from_device+0x8aa>
			}
		}

		if (((option & 2) == 2) &&
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	f003 0302 	and.w	r3, r3, #2
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d018      	beq.n	800ab8a <VL53L0X_get_info_from_device+0x90a>
			((ReadDataFromDeviceDone & 2) == 0)) {
 800ab58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab5c:	f003 0302 	and.w	r3, r3, #2
		if (((option & 2) == 2) &&
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d112      	bne.n	800ab8a <VL53L0X_get_info_from_device+0x90a>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab64:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
					ModuleId, ModuleId);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800ab6e:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
					Revision, Revision);

			ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	33f3      	adds	r3, #243	; 0xf3
 800ab7c:	63bb      	str	r3, [r7, #56]	; 0x38
					ProductId);
			VL53L0X_COPYSTRING(ProductId_tmp, ProductId);
 800ab7e:	f107 0310 	add.w	r3, r7, #16
 800ab82:	4619      	mov	r1, r3
 800ab84:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab86:	f008 fd2d 	bl	80135e4 <strcpy>

		}

		if (((option & 4) == 4) &&
 800ab8a:	78fb      	ldrb	r3, [r7, #3]
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d030      	beq.n	800abf6 <VL53L0X_get_info_from_device+0x976>
			((ReadDataFromDeviceDone & 4) == 0)) {
 800ab94:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab98:	f003 0304 	and.w	r3, r3, #4
		if (((option & 4) == 4) &&
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d12a      	bne.n	800abf6 <VL53L0X_get_info_from_device+0x976>
			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aba0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
						PartUIDUpper, PartUIDUpper);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800aba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
						PartUIDLower, PartUIDLower);

			SignalRateMeasFixed400mmFix =
 800abb0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abb2:	025b      	lsls	r3, r3, #9
 800abb4:	643b      	str	r3, [r7, #64]	; 0x40
				VL53L0X_FIXPOINT97TOFIXPOINT1616(
					SignalRateMeasFixed1104_400_mm);

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abba:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
				SignalRateMeasFixed400mm,
				SignalRateMeasFixed400mmFix);

			OffsetMicroMeters = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			if (DistMeasFixed1104_400_mm != 0) {
 800abc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d011      	beq.n	800abee <VL53L0X_get_info_from_device+0x96e>
					OffsetFixed1104_mm =
 800abca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800abce:	1ad3      	subs	r3, r2, r3
 800abd0:	64bb      	str	r3, [r7, #72]	; 0x48
						DistMeasFixed1104_400_mm -
						DistMeasTgtFixed1104_mm;
					OffsetMicroMeters = (OffsetFixed1104_mm
						* 1000) >> 4;
 800abd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abd4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800abd8:	fb02 f303 	mul.w	r3, r2, r3
 800abdc:	091b      	lsrs	r3, r3, #4
					OffsetMicroMeters = (OffsetFixed1104_mm
 800abde:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
					OffsetMicroMeters *= -1;
 800abe2:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 800abe6:	425b      	negs	r3, r3
 800abe8:	b29b      	uxth	r3, r3
 800abea:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
			}

			PALDevDataSet(Dev,
 800abee:	f9b7 205a 	ldrsh.w	r2, [r7, #90]	; 0x5a
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	60da      	str	r2, [r3, #12]
				Part2PartOffsetAdjustmentNVMMicroMeter,
				OffsetMicroMeters);
		}
		byte = (uint8_t)(ReadDataFromDeviceDone|option);
 800abf6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	4313      	orrs	r3, r2
 800abfe:	b2db      	uxtb	r3, r3
 800ac00:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		VL53L0X_SETDEVICESPECIFICPARAMETER(Dev, ReadDataFromDeviceDone,
 800ac04:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
				byte);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800ac0e:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
}
 800ac12:	4618      	mov	r0, r3
 800ac14:	3760      	adds	r7, #96	; 0x60
 800ac16:	46bd      	mov	sp, r7
 800ac18:	bd80      	pop	{r7, pc}

0800ac1a <VL53L0X_calc_macro_period_ps>:


uint32_t VL53L0X_calc_macro_period_ps(VL53L0X_DEV Dev, uint8_t vcsel_period_pclks)
{
 800ac1a:	b480      	push	{r7}
 800ac1c:	b087      	sub	sp, #28
 800ac1e:	af00      	add	r7, sp, #0
 800ac20:	6078      	str	r0, [r7, #4]
 800ac22:	460b      	mov	r3, r1
 800ac24:	70fb      	strb	r3, [r7, #3]
	LOG_FUNCTION_START("");

	/* The above calculation will produce rounding errors,
	   therefore set fixed value
	*/
	PLL_period_ps = 1655;
 800ac26:	f240 6277 	movw	r2, #1655	; 0x677
 800ac2a:	f04f 0300 	mov.w	r3, #0
 800ac2e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	macro_period_vclks = 2304;
 800ac32:	f44f 6310 	mov.w	r3, #2304	; 0x900
 800ac36:	60fb      	str	r3, [r7, #12]
	macro_period_ps = (uint32_t)(macro_period_vclks
			* vcsel_period_pclks * PLL_period_ps);
 800ac38:	78fb      	ldrb	r3, [r7, #3]
 800ac3a:	68fa      	ldr	r2, [r7, #12]
 800ac3c:	fb02 f303 	mul.w	r3, r2, r3
	macro_period_ps = (uint32_t)(macro_period_vclks
 800ac40:	693a      	ldr	r2, [r7, #16]
 800ac42:	fb02 f303 	mul.w	r3, r2, r3
 800ac46:	60bb      	str	r3, [r7, #8]

	LOG_FUNCTION_END("");
	return macro_period_ps;
 800ac48:	68bb      	ldr	r3, [r7, #8]
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	371c      	adds	r7, #28
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac54:	4770      	bx	lr

0800ac56 <VL53L0X_encode_timeout>:

uint16_t VL53L0X_encode_timeout(uint32_t timeout_macro_clks)
{
 800ac56:	b480      	push	{r7}
 800ac58:	b087      	sub	sp, #28
 800ac5a:	af00      	add	r7, sp, #0
 800ac5c:	6078      	str	r0, [r7, #4]
	/*!
	 * Encode timeout in macro periods in (LSByte * 2^MSByte) + 1 format
	 */

	uint16_t encoded_timeout = 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	82fb      	strh	r3, [r7, #22]
	uint32_t ls_byte = 0;
 800ac62:	2300      	movs	r3, #0
 800ac64:	613b      	str	r3, [r7, #16]
	uint16_t ms_byte = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	81fb      	strh	r3, [r7, #14]

	if (timeout_macro_clks > 0) {
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d017      	beq.n	800aca0 <VL53L0X_encode_timeout+0x4a>
		ls_byte = timeout_macro_clks - 1;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	613b      	str	r3, [r7, #16]

		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ac76:	e005      	b.n	800ac84 <VL53L0X_encode_timeout+0x2e>
			ls_byte = ls_byte >> 1;
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	085b      	lsrs	r3, r3, #1
 800ac7c:	613b      	str	r3, [r7, #16]
			ms_byte++;
 800ac7e:	89fb      	ldrh	r3, [r7, #14]
 800ac80:	3301      	adds	r3, #1
 800ac82:	81fb      	strh	r3, [r7, #14]
		while ((ls_byte & 0xFFFFFF00) > 0) {
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1f4      	bne.n	800ac78 <VL53L0X_encode_timeout+0x22>
		}

		encoded_timeout = (ms_byte << 8)
 800ac8e:	89fb      	ldrh	r3, [r7, #14]
 800ac90:	021b      	lsls	r3, r3, #8
 800ac92:	b29a      	uxth	r2, r3
				+ (uint16_t) (ls_byte & 0x000000FF);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	b2db      	uxtb	r3, r3
 800ac9a:	b29b      	uxth	r3, r3
		encoded_timeout = (ms_byte << 8)
 800ac9c:	4413      	add	r3, r2
 800ac9e:	82fb      	strh	r3, [r7, #22]
	}

	return encoded_timeout;
 800aca0:	8afb      	ldrh	r3, [r7, #22]

}
 800aca2:	4618      	mov	r0, r3
 800aca4:	371c      	adds	r7, #28
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr

0800acae <VL53L0X_decode_timeout>:

uint32_t VL53L0X_decode_timeout(uint16_t encoded_timeout)
{
 800acae:	b480      	push	{r7}
 800acb0:	b085      	sub	sp, #20
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	4603      	mov	r3, r0
 800acb6:	80fb      	strh	r3, [r7, #6]
	/*!
	 * Decode 16-bit timeout register value - format (LSByte * 2^MSByte) + 1
	 */

	uint32_t timeout_macro_clks = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]

	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800acbc:	88fb      	ldrh	r3, [r7, #6]
 800acbe:	b2db      	uxtb	r3, r3
			<< (uint32_t) ((encoded_timeout & 0xFF00) >> 8)) + 1;
 800acc0:	88fa      	ldrh	r2, [r7, #6]
 800acc2:	0a12      	lsrs	r2, r2, #8
 800acc4:	b292      	uxth	r2, r2
 800acc6:	4093      	lsls	r3, r2
	timeout_macro_clks = ((uint32_t) (encoded_timeout & 0x00FF)
 800acc8:	3301      	adds	r3, #1
 800acca:	60fb      	str	r3, [r7, #12]

	return timeout_macro_clks;
 800accc:	68fb      	ldr	r3, [r7, #12]
}
 800acce:	4618      	mov	r0, r3
 800acd0:	3714      	adds	r7, #20
 800acd2:	46bd      	mov	sp, r7
 800acd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd8:	4770      	bx	lr
	...

0800acdc <VL53L0X_calc_timeout_mclks>:

/* To convert ms into register value */
uint32_t VL53L0X_calc_timeout_mclks(VL53L0X_DEV Dev,
		uint32_t timeout_period_us,
		uint8_t vcsel_period_pclks)
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b088      	sub	sp, #32
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	4613      	mov	r3, r2
 800ace8:	71fb      	strb	r3, [r7, #7]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t timeout_period_mclks = 0;
 800acea:	2300      	movs	r3, #0
 800acec:	61fb      	str	r3, [r7, #28]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800acee:	79fb      	ldrb	r3, [r7, #7]
 800acf0:	4619      	mov	r1, r3
 800acf2:	68f8      	ldr	r0, [r7, #12]
 800acf4:	f7ff ff91 	bl	800ac1a <VL53L0X_calc_macro_period_ps>
 800acf8:	61b8      	str	r0, [r7, #24]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad00:	4a0a      	ldr	r2, [pc, #40]	; (800ad2c <VL53L0X_calc_timeout_mclks+0x50>)
 800ad02:	fba2 2303 	umull	r2, r3, r2, r3
 800ad06:	099b      	lsrs	r3, r3, #6
 800ad08:	617b      	str	r3, [r7, #20]

	timeout_period_mclks =
		(uint32_t) (((timeout_period_us * 1000)
 800ad0a:	68bb      	ldr	r3, [r7, #8]
 800ad0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ad10:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / macro_period_ns);
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	085b      	lsrs	r3, r3, #1
 800ad18:	441a      	add	r2, r3
	timeout_period_mclks =
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad20:	61fb      	str	r3, [r7, #28]

	return timeout_period_mclks;
 800ad22:	69fb      	ldr	r3, [r7, #28]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3720      	adds	r7, #32
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	10624dd3 	.word	0x10624dd3

0800ad30 <VL53L0X_calc_timeout_us>:

/* To convert register value into us */
uint32_t VL53L0X_calc_timeout_us(VL53L0X_DEV Dev,
		uint16_t timeout_period_mclks,
		uint8_t vcsel_period_pclks)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
 800ad38:	460b      	mov	r3, r1
 800ad3a:	807b      	strh	r3, [r7, #2]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	707b      	strb	r3, [r7, #1]
	uint32_t macro_period_ps;
	uint32_t macro_period_ns;
	uint32_t actual_timeout_period_us = 0;
 800ad40:	2300      	movs	r3, #0
 800ad42:	617b      	str	r3, [r7, #20]

	macro_period_ps = VL53L0X_calc_macro_period_ps(Dev, vcsel_period_pclks);
 800ad44:	787b      	ldrb	r3, [r7, #1]
 800ad46:	4619      	mov	r1, r3
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff ff66 	bl	800ac1a <VL53L0X_calc_macro_period_ps>
 800ad4e:	6138      	str	r0, [r7, #16]
	macro_period_ns = (macro_period_ps + 500) / 1000;
 800ad50:	693b      	ldr	r3, [r7, #16]
 800ad52:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800ad56:	4a0b      	ldr	r2, [pc, #44]	; (800ad84 <VL53L0X_calc_timeout_us+0x54>)
 800ad58:	fba2 2303 	umull	r2, r3, r2, r3
 800ad5c:	099b      	lsrs	r3, r3, #6
 800ad5e:	60fb      	str	r3, [r7, #12]

	actual_timeout_period_us =
		((timeout_period_mclks * macro_period_ns)
 800ad60:	887b      	ldrh	r3, [r7, #2]
 800ad62:	68fa      	ldr	r2, [r7, #12]
 800ad64:	fb02 f203 	mul.w	r2, r2, r3
		+ (macro_period_ns / 2)) / 1000;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	085b      	lsrs	r3, r3, #1
 800ad6c:	4413      	add	r3, r2
	actual_timeout_period_us =
 800ad6e:	4a05      	ldr	r2, [pc, #20]	; (800ad84 <VL53L0X_calc_timeout_us+0x54>)
 800ad70:	fba2 2303 	umull	r2, r3, r2, r3
 800ad74:	099b      	lsrs	r3, r3, #6
 800ad76:	617b      	str	r3, [r7, #20]

	return actual_timeout_period_us;
 800ad78:	697b      	ldr	r3, [r7, #20]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	3718      	adds	r7, #24
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	bd80      	pop	{r7, pc}
 800ad82:	bf00      	nop
 800ad84:	10624dd3 	.word	0x10624dd3

0800ad88 <get_sequence_step_timeout>:


VL53L0X_Error get_sequence_step_timeout(VL53L0X_DEV Dev,
				VL53L0X_SequenceStepId SequenceStepId,
				uint32_t *pTimeOutMicroSecs)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b08c      	sub	sp, #48	; 0x30
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	60f8      	str	r0, [r7, #12]
 800ad90:	460b      	mov	r3, r1
 800ad92:	607a      	str	r2, [r7, #4]
 800ad94:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ad96:	2300      	movs	r3, #0
 800ad98:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t CurrentVCSELPulsePeriodPClk;
	uint8_t EncodedTimeOutByte = 0;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	f887 3020 	strb.w	r3, [r7, #32]
	uint32_t TimeoutMicroSeconds = 0;
 800ada2:	2300      	movs	r3, #0
 800ada4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint16_t PreRangeEncodedTimeOut = 0;
 800ada6:	2300      	movs	r3, #0
 800ada8:	83fb      	strh	r3, [r7, #30]
	uint16_t MsrcTimeOutMClks;
	uint16_t PreRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800adae:	7afb      	ldrb	r3, [r7, #11]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d005      	beq.n	800adc0 <get_sequence_step_timeout+0x38>
 800adb4:	7afb      	ldrb	r3, [r7, #11]
 800adb6:	2b01      	cmp	r3, #1
 800adb8:	d002      	beq.n	800adc0 <get_sequence_step_timeout+0x38>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800adba:	7afb      	ldrb	r3, [r7, #11]
 800adbc:	2b02      	cmp	r3, #2
 800adbe:	d128      	bne.n	800ae12 <get_sequence_step_timeout+0x8a>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800adc0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800adc4:	461a      	mov	r2, r3
 800adc6:	2100      	movs	r1, #0
 800adc8:	68f8      	ldr	r0, [r7, #12]
 800adca:	f7fd fa73 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800adce:	4603      	mov	r3, r0
 800add0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		if (Status == VL53L0X_ERROR_NONE) {
 800add4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800add8:	2b00      	cmp	r3, #0
 800adda:	d109      	bne.n	800adf0 <get_sequence_step_timeout+0x68>
			Status = VL53L0X_RdByte(Dev,
 800addc:	f107 0320 	add.w	r3, r7, #32
 800ade0:	461a      	mov	r2, r3
 800ade2:	2146      	movs	r1, #70	; 0x46
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f001 fd2c 	bl	800c842 <VL53L0X_RdByte>
 800adea:	4603      	mov	r3, r0
 800adec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
					&EncodedTimeOutByte);
		}
		MsrcTimeOutMClks = VL53L0X_decode_timeout(EncodedTimeOutByte);
 800adf0:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	4618      	mov	r0, r3
 800adf8:	f7ff ff59 	bl	800acae <VL53L0X_decode_timeout>
 800adfc:	4603      	mov	r3, r0
 800adfe:	847b      	strh	r3, [r7, #34]	; 0x22

		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ae00:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ae04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae06:	4619      	mov	r1, r3
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f7ff ff91 	bl	800ad30 <VL53L0X_calc_timeout_us>
 800ae0e:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae10:	e092      	b.n	800af38 <get_sequence_step_timeout+0x1b0>
						MsrcTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800ae12:	7afb      	ldrb	r3, [r7, #11]
 800ae14:	2b03      	cmp	r3, #3
 800ae16:	d135      	bne.n	800ae84 <get_sequence_step_timeout+0xfc>
		/* Retrieve PRE-RANGE VCSEL Period */
		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ae18:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	2100      	movs	r1, #0
 800ae20:	68f8      	ldr	r0, [r7, #12]
 800ae22:	f7fd fa47 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800ae26:	4603      	mov	r3, r0
 800ae28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);

		/* Retrieve PRE-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800ae2c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f040 8081 	bne.w	800af38 <get_sequence_step_timeout+0x1b0>

			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800ae36:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800ae3a:	461a      	mov	r2, r3
 800ae3c:	2100      	movs	r1, #0
 800ae3e:	68f8      	ldr	r0, [r7, #12]
 800ae40:	f7fd fa38 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800ae44:	4603      	mov	r3, r0
 800ae46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

			if (Status == VL53L0X_ERROR_NONE) {
 800ae4a:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d109      	bne.n	800ae66 <get_sequence_step_timeout+0xde>
				Status = VL53L0X_RdWord(Dev,
 800ae52:	f107 031e 	add.w	r3, r7, #30
 800ae56:	461a      	mov	r2, r3
 800ae58:	2151      	movs	r1, #81	; 0x51
 800ae5a:	68f8      	ldr	r0, [r7, #12]
 800ae5c:	f001 fd78 	bl	800c950 <VL53L0X_RdWord>
 800ae60:	4603      	mov	r3, r0
 800ae62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
			}

			PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800ae66:	8bfb      	ldrh	r3, [r7, #30]
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f7ff ff20 	bl	800acae <VL53L0X_decode_timeout>
 800ae6e:	4603      	mov	r3, r0
 800ae70:	84fb      	strh	r3, [r7, #38]	; 0x26
					PreRangeEncodedTimeOut);

			TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800ae72:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800ae76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae78:	4619      	mov	r1, r3
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f7ff ff58 	bl	800ad30 <VL53L0X_calc_timeout_us>
 800ae80:	62b8      	str	r0, [r7, #40]	; 0x28
 800ae82:	e059      	b.n	800af38 <get_sequence_step_timeout+0x1b0>
					PreRangeTimeOutMClks,
					CurrentVCSELPulsePeriodPClk);
		}
	} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800ae84:	7afb      	ldrb	r3, [r7, #11]
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d156      	bne.n	800af38 <get_sequence_step_timeout+0x1b0>

		VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800ae8a:	f107 0314 	add.w	r3, r7, #20
 800ae8e:	4619      	mov	r1, r3
 800ae90:	68f8      	ldr	r0, [r7, #12]
 800ae92:	f7fd fb1b 	bl	80084cc <VL53L0X_GetSequenceStepEnables>
		PreRangeTimeOutMClks = 0;
 800ae96:	2300      	movs	r3, #0
 800ae98:	84fb      	strh	r3, [r7, #38]	; 0x26

		if (SchedulerSequenceSteps.PreRangeOn) {
 800ae9a:	7dfb      	ldrb	r3, [r7, #23]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01d      	beq.n	800aedc <get_sequence_step_timeout+0x154>
			/* Retrieve PRE-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aea0:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aea4:	461a      	mov	r2, r3
 800aea6:	2100      	movs	r1, #0
 800aea8:	68f8      	ldr	r0, [r7, #12]
 800aeaa:	f7fd fa03 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_VCSEL_PERIOD_PRE_RANGE,
				&CurrentVCSELPulsePeriodPClk);

			/* Retrieve PRE-RANGE Timeout in Macro periods
			 * (MCLKS) */
			if (Status == VL53L0X_ERROR_NONE) {
 800aeb4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d10f      	bne.n	800aedc <get_sequence_step_timeout+0x154>
				Status = VL53L0X_RdWord(Dev,
 800aebc:	f107 031e 	add.w	r3, r7, #30
 800aec0:	461a      	mov	r2, r3
 800aec2:	2151      	movs	r1, #81	; 0x51
 800aec4:	68f8      	ldr	r0, [r7, #12]
 800aec6:	f001 fd43 	bl	800c950 <VL53L0X_RdWord>
 800aeca:	4603      	mov	r3, r0
 800aecc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&PreRangeEncodedTimeOut);
				PreRangeTimeOutMClks = VL53L0X_decode_timeout(
 800aed0:	8bfb      	ldrh	r3, [r7, #30]
 800aed2:	4618      	mov	r0, r3
 800aed4:	f7ff feeb 	bl	800acae <VL53L0X_decode_timeout>
 800aed8:	4603      	mov	r3, r0
 800aeda:	84fb      	strh	r3, [r7, #38]	; 0x26
						PreRangeEncodedTimeOut);
			}
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800aedc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d109      	bne.n	800aef8 <get_sequence_step_timeout+0x170>
			/* Retrieve FINAL-RANGE VCSEL Period */
			Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aee4:	f107 0321 	add.w	r3, r7, #33	; 0x21
 800aee8:	461a      	mov	r2, r3
 800aeea:	2101      	movs	r1, #1
 800aeec:	68f8      	ldr	r0, [r7, #12]
 800aeee:	f7fd f9e1 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800aef2:	4603      	mov	r3, r0
 800aef4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
					&CurrentVCSELPulsePeriodPClk);
		}

		/* Retrieve FINAL-RANGE Timeout in Macro periods (MCLKS) */
		if (Status == VL53L0X_ERROR_NONE) {
 800aef8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10f      	bne.n	800af20 <get_sequence_step_timeout+0x198>
			Status = VL53L0X_RdWord(Dev,
 800af00:	f107 031c 	add.w	r3, r7, #28
 800af04:	461a      	mov	r2, r3
 800af06:	2171      	movs	r1, #113	; 0x71
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f001 fd21 	bl	800c950 <VL53L0X_RdWord>
 800af0e:	4603      	mov	r3, r0
 800af10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				VL53L0X_REG_FINAL_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				&FinalRangeEncodedTimeOut);
			FinalRangeTimeOutMClks = VL53L0X_decode_timeout(
 800af14:	8bbb      	ldrh	r3, [r7, #28]
 800af16:	4618      	mov	r0, r3
 800af18:	f7ff fec9 	bl	800acae <VL53L0X_decode_timeout>
 800af1c:	4603      	mov	r3, r0
 800af1e:	84bb      	strh	r3, [r7, #36]	; 0x24
					FinalRangeEncodedTimeOut);
		}

		FinalRangeTimeOutMClks -= PreRangeTimeOutMClks;
 800af20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800af22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800af24:	1ad3      	subs	r3, r2, r3
 800af26:	84bb      	strh	r3, [r7, #36]	; 0x24
		TimeoutMicroSeconds = VL53L0X_calc_timeout_us(Dev,
 800af28:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800af2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800af2e:	4619      	mov	r1, r3
 800af30:	68f8      	ldr	r0, [r7, #12]
 800af32:	f7ff fefd 	bl	800ad30 <VL53L0X_calc_timeout_us>
 800af36:	62b8      	str	r0, [r7, #40]	; 0x28
						FinalRangeTimeOutMClks,
						CurrentVCSELPulsePeriodPClk);
	}

	*pTimeOutMicroSecs = TimeoutMicroSeconds;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af3c:	601a      	str	r2, [r3, #0]

	return Status;
 800af3e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800af42:	4618      	mov	r0, r3
 800af44:	3730      	adds	r7, #48	; 0x30
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <set_sequence_step_timeout>:


VL53L0X_Error set_sequence_step_timeout(VL53L0X_DEV Dev,
					VL53L0X_SequenceStepId SequenceStepId,
					uint32_t TimeOutMicroSecs)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b08a      	sub	sp, #40	; 0x28
 800af4e:	af00      	add	r7, sp, #0
 800af50:	60f8      	str	r0, [r7, #12]
 800af52:	460b      	mov	r3, r1
 800af54:	607a      	str	r2, [r7, #4]
 800af56:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800af58:	2300      	movs	r3, #0
 800af5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t MsrcRangeTimeOutMClks;
	uint16_t FinalRangeTimeOutMClks;
	uint16_t FinalRangeEncodedTimeOut;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;

	if ((SequenceStepId == VL53L0X_SEQUENCESTEP_TCC)	 ||
 800af5e:	7afb      	ldrb	r3, [r7, #11]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d005      	beq.n	800af70 <set_sequence_step_timeout+0x26>
 800af64:	7afb      	ldrb	r3, [r7, #11]
 800af66:	2b01      	cmp	r3, #1
 800af68:	d002      	beq.n	800af70 <set_sequence_step_timeout+0x26>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_DSS)	 ||
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d138      	bne.n	800afe2 <set_sequence_step_timeout+0x98>
		(SequenceStepId == VL53L0X_SEQUENCESTEP_MSRC)) {

		Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800af70:	f107 031d 	add.w	r3, r7, #29
 800af74:	461a      	mov	r2, r3
 800af76:	2100      	movs	r1, #0
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7fd f99b 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800af7e:	4603      	mov	r3, r0
 800af80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

		if (Status == VL53L0X_ERROR_NONE) {
 800af84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d11a      	bne.n	800afc2 <set_sequence_step_timeout+0x78>
			MsrcRangeTimeOutMClks = VL53L0X_calc_timeout_mclks(Dev,
 800af8c:	7f7b      	ldrb	r3, [r7, #29]
 800af8e:	461a      	mov	r2, r3
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	68f8      	ldr	r0, [r7, #12]
 800af94:	f7ff fea2 	bl	800acdc <VL53L0X_calc_timeout_mclks>
 800af98:	4603      	mov	r3, r0
 800af9a:	83fb      	strh	r3, [r7, #30]
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);

			if (MsrcRangeTimeOutMClks > 256)
 800af9c:	8bfb      	ldrh	r3, [r7, #30]
 800af9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afa2:	d903      	bls.n	800afac <set_sequence_step_timeout+0x62>
				MsrcEncodedTimeOut = 255;
 800afa4:	23ff      	movs	r3, #255	; 0xff
 800afa6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800afaa:	e004      	b.n	800afb6 <set_sequence_step_timeout+0x6c>
			else
				MsrcEncodedTimeOut =
					(uint8_t)MsrcRangeTimeOutMClks - 1;
 800afac:	8bfb      	ldrh	r3, [r7, #30]
 800afae:	b2db      	uxtb	r3, r3
				MsrcEncodedTimeOut =
 800afb0:	3b01      	subs	r3, #1
 800afb2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

			VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800afb6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afba:	b29a      	uxth	r2, r3
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
				LastEncodedTimeout,
				MsrcEncodedTimeOut);
		}

		if (Status == VL53L0X_ERROR_NONE) {
 800afc2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	f040 80ad 	bne.w	800b126 <set_sequence_step_timeout+0x1dc>
			Status = VL53L0X_WrByte(Dev,
 800afcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800afd0:	461a      	mov	r2, r3
 800afd2:	2146      	movs	r1, #70	; 0x46
 800afd4:	68f8      	ldr	r0, [r7, #12]
 800afd6:	f001 fd2f 	bl	800ca38 <VL53L0X_WrByte>
 800afda:	4603      	mov	r3, r0
 800afdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (Status == VL53L0X_ERROR_NONE) {
 800afe0:	e0a1      	b.n	800b126 <set_sequence_step_timeout+0x1dc>
				VL53L0X_REG_MSRC_CONFIG_TIMEOUT_MACROP,
				MsrcEncodedTimeOut);
		}
	} else {

		if (SequenceStepId == VL53L0X_SEQUENCESTEP_PRE_RANGE) {
 800afe2:	7afb      	ldrb	r3, [r7, #11]
 800afe4:	2b03      	cmp	r3, #3
 800afe6:	d135      	bne.n	800b054 <set_sequence_step_timeout+0x10a>

			if (Status == VL53L0X_ERROR_NONE) {
 800afe8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800afec:	2b00      	cmp	r3, #0
 800afee:	d11b      	bne.n	800b028 <set_sequence_step_timeout+0xde>
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800aff0:	f107 031d 	add.w	r3, r7, #29
 800aff4:	461a      	mov	r2, r3
 800aff6:	2100      	movs	r1, #0
 800aff8:	68f8      	ldr	r0, [r7, #12]
 800affa:	f7fd f95b 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800affe:	4603      	mov	r3, r0
 800b000:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_PRE_RANGE,
						&CurrentVCSELPulsePeriodPClk);
				PreRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b004:	7f7b      	ldrb	r3, [r7, #29]
 800b006:	461a      	mov	r2, r3
 800b008:	6879      	ldr	r1, [r7, #4]
 800b00a:	68f8      	ldr	r0, [r7, #12]
 800b00c:	f7ff fe66 	bl	800acdc <VL53L0X_calc_timeout_mclks>
 800b010:	4603      	mov	r3, r0
				PreRangeTimeOutMClks =
 800b012:	84bb      	strh	r3, [r7, #36]	; 0x24
					TimeOutMicroSecs,
					(uint8_t)CurrentVCSELPulsePeriodPClk);
				PreRangeEncodedTimeOut = VL53L0X_encode_timeout(
 800b014:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b016:	4618      	mov	r0, r3
 800b018:	f7ff fe1d 	bl	800ac56 <VL53L0X_encode_timeout>
 800b01c:	4603      	mov	r3, r0
 800b01e:	837b      	strh	r3, [r7, #26]
					PreRangeTimeOutMClks);

				VL53L0X_SETDEVICESPECIFICPARAMETER(Dev,
 800b020:	8b7a      	ldrh	r2, [r7, #26]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
					LastEncodedTimeout,
					PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b028:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d108      	bne.n	800b042 <set_sequence_step_timeout+0xf8>
				Status = VL53L0X_WrWord(Dev,
 800b030:	8b7b      	ldrh	r3, [r7, #26]
 800b032:	461a      	mov	r2, r3
 800b034:	2151      	movs	r1, #81	; 0x51
 800b036:	68f8      	ldr	r0, [r7, #12]
 800b038:	f001 fd22 	bl	800ca80 <VL53L0X_WrWord>
 800b03c:	4603      	mov	r3, r0
 800b03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_TIMEOUT_MACROP_HI,
				PreRangeEncodedTimeOut);
			}

			if (Status == VL53L0X_ERROR_NONE) {
 800b042:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b046:	2b00      	cmp	r3, #0
 800b048:	d16d      	bne.n	800b126 <set_sequence_step_timeout+0x1dc>
				VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
 800b052:	e068      	b.n	800b126 <set_sequence_step_timeout+0x1dc>
					Dev,
					PreRangeTimeoutMicroSecs,
					TimeOutMicroSecs);
			}
		} else if (SequenceStepId == VL53L0X_SEQUENCESTEP_FINAL_RANGE) {
 800b054:	7afb      	ldrb	r3, [r7, #11]
 800b056:	2b04      	cmp	r3, #4
 800b058:	d162      	bne.n	800b120 <set_sequence_step_timeout+0x1d6>
			 * must be added. To do this both final and pre-range
			 * timeouts must be expressed in macro periods MClks
			 * because they have different vcsel periods.
			 */

			VL53L0X_GetSequenceStepEnables(Dev,
 800b05a:	f107 0314 	add.w	r3, r7, #20
 800b05e:	4619      	mov	r1, r3
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7fd fa33 	bl	80084cc <VL53L0X_GetSequenceStepEnables>
					&SchedulerSequenceSteps);
			PreRangeTimeOutMClks = 0;
 800b066:	2300      	movs	r3, #0
 800b068:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (SchedulerSequenceSteps.PreRangeOn) {
 800b06a:	7dfb      	ldrb	r3, [r7, #23]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d01d      	beq.n	800b0ac <set_sequence_step_timeout+0x162>

				/* Retrieve PRE-RANGE VCSEL Period */
				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b070:	f107 031d 	add.w	r3, r7, #29
 800b074:	461a      	mov	r2, r3
 800b076:	2100      	movs	r1, #0
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f7fd f91b 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800b07e:	4603      	mov	r3, r0
 800b080:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_VCSEL_PERIOD_PRE_RANGE,
					&CurrentVCSELPulsePeriodPClk);

				/* Retrieve PRE-RANGE Timeout in Macro periods
				 * (MCLKS) */
				if (Status == VL53L0X_ERROR_NONE) {
 800b084:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10f      	bne.n	800b0ac <set_sequence_step_timeout+0x162>
					Status = VL53L0X_RdWord(Dev, 0x51,
 800b08c:	f107 031a 	add.w	r3, r7, #26
 800b090:	461a      	mov	r2, r3
 800b092:	2151      	movs	r1, #81	; 0x51
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f001 fc5b 	bl	800c950 <VL53L0X_RdWord>
 800b09a:	4603      	mov	r3, r0
 800b09c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						&PreRangeEncodedTimeOut);
					PreRangeTimeOutMClks =
						VL53L0X_decode_timeout(
 800b0a0:	8b7b      	ldrh	r3, [r7, #26]
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f7ff fe03 	bl	800acae <VL53L0X_decode_timeout>
 800b0a8:	4603      	mov	r3, r0
					PreRangeTimeOutMClks =
 800b0aa:	84bb      	strh	r3, [r7, #36]	; 0x24
			}

			/* Calculate FINAL RANGE Timeout in Macro Periods
			 * (MCLKS) and add PRE-RANGE value
			 */
			if (Status == VL53L0X_ERROR_NONE) {
 800b0ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d109      	bne.n	800b0c8 <set_sequence_step_timeout+0x17e>

				Status = VL53L0X_GetVcselPulsePeriod(Dev,
 800b0b4:	f107 031d 	add.w	r3, r7, #29
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	2101      	movs	r1, #1
 800b0bc:	68f8      	ldr	r0, [r7, #12]
 800b0be:	f7fd f8f9 	bl	80082b4 <VL53L0X_GetVcselPulsePeriod>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						VL53L0X_VCSEL_PERIOD_FINAL_RANGE,
						&CurrentVCSELPulsePeriodPClk);
			}
			if (Status == VL53L0X_ERROR_NONE) {
 800b0c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d12a      	bne.n	800b126 <set_sequence_step_timeout+0x1dc>

				FinalRangeTimeOutMClks =
					VL53L0X_calc_timeout_mclks(Dev,
 800b0d0:	7f7b      	ldrb	r3, [r7, #29]
 800b0d2:	461a      	mov	r2, r3
 800b0d4:	6879      	ldr	r1, [r7, #4]
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f7ff fe00 	bl	800acdc <VL53L0X_calc_timeout_mclks>
 800b0dc:	4603      	mov	r3, r0
				FinalRangeTimeOutMClks =
 800b0de:	847b      	strh	r3, [r7, #34]	; 0x22
					TimeOutMicroSecs,
					(uint8_t) CurrentVCSELPulsePeriodPClk);

				FinalRangeTimeOutMClks += PreRangeTimeOutMClks;
 800b0e0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800b0e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0e4:	4413      	add	r3, r2
 800b0e6:	847b      	strh	r3, [r7, #34]	; 0x22

				FinalRangeEncodedTimeOut =
				VL53L0X_encode_timeout(FinalRangeTimeOutMClks);
 800b0e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff fdb3 	bl	800ac56 <VL53L0X_encode_timeout>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	843b      	strh	r3, [r7, #32]

				if (Status == VL53L0X_ERROR_NONE) {
 800b0f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d108      	bne.n	800b10e <set_sequence_step_timeout+0x1c4>
					Status = VL53L0X_WrWord(Dev, 0x71,
 800b0fc:	8c3b      	ldrh	r3, [r7, #32]
 800b0fe:	461a      	mov	r2, r3
 800b100:	2171      	movs	r1, #113	; 0x71
 800b102:	68f8      	ldr	r0, [r7, #12]
 800b104:	f001 fcbc 	bl	800ca80 <VL53L0X_WrWord>
 800b108:	4603      	mov	r3, r0
 800b10a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					FinalRangeEncodedTimeOut);
				}

				if (Status == VL53L0X_ERROR_NONE) {
 800b10e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b112:	2b00      	cmp	r3, #0
 800b114:	d107      	bne.n	800b126 <set_sequence_step_timeout+0x1dc>
					VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	687a      	ldr	r2, [r7, #4]
 800b11a:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800b11e:	e002      	b.n	800b126 <set_sequence_step_timeout+0x1dc>
						FinalRangeTimeoutMicroSecs,
						TimeOutMicroSecs);
				}
			}
		} else
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b120:	23fc      	movs	r3, #252	; 0xfc
 800b122:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	}
	return Status;
 800b126:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3728      	adds	r7, #40	; 0x28
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}

0800b132 <VL53L0X_set_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_set_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t VCSELPulsePeriodPCLK)
{
 800b132:	b580      	push	{r7, lr}
 800b134:	b08a      	sub	sp, #40	; 0x28
 800b136:	af00      	add	r7, sp, #0
 800b138:	6078      	str	r0, [r7, #4]
 800b13a:	460b      	mov	r3, r1
 800b13c:	70fb      	strb	r3, [r7, #3]
 800b13e:	4613      	mov	r3, r2
 800b140:	70bb      	strb	r3, [r7, #2]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b142:	2300      	movs	r3, #0
 800b144:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t vcsel_period_reg;
	uint8_t MinPreVcselPeriodPCLK = 12;
 800b148:	230c      	movs	r3, #12
 800b14a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t MaxPreVcselPeriodPCLK = 18;
 800b14e:	2312      	movs	r3, #18
 800b150:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t MinFinalVcselPeriodPCLK = 8;
 800b154:	2308      	movs	r3, #8
 800b156:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	uint8_t MaxFinalVcselPeriodPCLK = 14;
 800b15a:	230e      	movs	r3, #14
 800b15c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint32_t MeasurementTimingBudgetMicroSeconds;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t PreRangeTimeoutMicroSeconds;
	uint32_t MsrcTimeoutMicroSeconds;
	uint8_t PhaseCalInt = 0;
 800b160:	2300      	movs	r3, #0
 800b162:	73fb      	strb	r3, [r7, #15]

	/* Check if valid clock period requested */

	if ((VCSELPulsePeriodPCLK % 2) != 0) {
 800b164:	78bb      	ldrb	r3, [r7, #2]
 800b166:	f003 0301 	and.w	r3, r3, #1
 800b16a:	b2db      	uxtb	r3, r3
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d003      	beq.n	800b178 <VL53L0X_set_vcsel_pulse_period+0x46>
		/* Value must be an even number */
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b170:	23fc      	movs	r3, #252	; 0xfc
 800b172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b176:	e020      	b.n	800b1ba <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE &&
 800b178:	78fb      	ldrb	r3, [r7, #3]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10d      	bne.n	800b19a <VL53L0X_set_vcsel_pulse_period+0x68>
 800b17e:	78ba      	ldrb	r2, [r7, #2]
 800b180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b184:	429a      	cmp	r2, r3
 800b186:	d304      	bcc.n	800b192 <VL53L0X_set_vcsel_pulse_period+0x60>
		(VCSELPulsePeriodPCLK < MinPreVcselPeriodPCLK ||
 800b188:	78ba      	ldrb	r2, [r7, #2]
 800b18a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b18e:	429a      	cmp	r2, r3
 800b190:	d903      	bls.n	800b19a <VL53L0X_set_vcsel_pulse_period+0x68>
		VCSELPulsePeriodPCLK > MaxPreVcselPeriodPCLK)) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b192:	23fc      	movs	r3, #252	; 0xfc
 800b194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b198:	e00f      	b.n	800b1ba <VL53L0X_set_vcsel_pulse_period+0x88>
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE &&
 800b19a:	78fb      	ldrb	r3, [r7, #3]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d10c      	bne.n	800b1ba <VL53L0X_set_vcsel_pulse_period+0x88>
 800b1a0:	78ba      	ldrb	r2, [r7, #2]
 800b1a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d304      	bcc.n	800b1b4 <VL53L0X_set_vcsel_pulse_period+0x82>
		(VCSELPulsePeriodPCLK < MinFinalVcselPeriodPCLK ||
 800b1aa:	78ba      	ldrb	r2, [r7, #2]
 800b1ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d902      	bls.n	800b1ba <VL53L0X_set_vcsel_pulse_period+0x88>
		 VCSELPulsePeriodPCLK > MaxFinalVcselPeriodPCLK)) {

		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b1b4:	23fc      	movs	r3, #252	; 0xfc
 800b1b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Apply specific settings for the requested clock period */

	if (Status != VL53L0X_ERROR_NONE)
 800b1ba:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d002      	beq.n	800b1c8 <VL53L0X_set_vcsel_pulse_period+0x96>
		return Status;
 800b1c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b1c6:	e239      	b.n	800b63c <VL53L0X_set_vcsel_pulse_period+0x50a>


	if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_PRE_RANGE) {
 800b1c8:	78fb      	ldrb	r3, [r7, #3]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d150      	bne.n	800b270 <VL53L0X_set_vcsel_pulse_period+0x13e>

		/* Set phase check limits */
		if (VCSELPulsePeriodPCLK == 12) {
 800b1ce:	78bb      	ldrb	r3, [r7, #2]
 800b1d0:	2b0c      	cmp	r3, #12
 800b1d2:	d110      	bne.n	800b1f6 <VL53L0X_set_vcsel_pulse_period+0xc4>

			Status = VL53L0X_WrByte(Dev,
 800b1d4:	2218      	movs	r2, #24
 800b1d6:	2157      	movs	r1, #87	; 0x57
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f001 fc2d 	bl	800ca38 <VL53L0X_WrByte>
 800b1de:	4603      	mov	r3, r0
 800b1e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x18);
			Status = VL53L0X_WrByte(Dev,
 800b1e4:	2208      	movs	r2, #8
 800b1e6:	2156      	movs	r1, #86	; 0x56
 800b1e8:	6878      	ldr	r0, [r7, #4]
 800b1ea:	f001 fc25 	bl	800ca38 <VL53L0X_WrByte>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b1f4:	e17f      	b.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b1f6:	78bb      	ldrb	r3, [r7, #2]
 800b1f8:	2b0e      	cmp	r3, #14
 800b1fa:	d110      	bne.n	800b21e <VL53L0X_set_vcsel_pulse_period+0xec>

			Status = VL53L0X_WrByte(Dev,
 800b1fc:	2230      	movs	r2, #48	; 0x30
 800b1fe:	2157      	movs	r1, #87	; 0x57
 800b200:	6878      	ldr	r0, [r7, #4]
 800b202:	f001 fc19 	bl	800ca38 <VL53L0X_WrByte>
 800b206:	4603      	mov	r3, r0
 800b208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x30);
			Status = VL53L0X_WrByte(Dev,
 800b20c:	2208      	movs	r2, #8
 800b20e:	2156      	movs	r1, #86	; 0x56
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f001 fc11 	bl	800ca38 <VL53L0X_WrByte>
 800b216:	4603      	mov	r3, r0
 800b218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b21c:	e16b      	b.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 16) {
 800b21e:	78bb      	ldrb	r3, [r7, #2]
 800b220:	2b10      	cmp	r3, #16
 800b222:	d110      	bne.n	800b246 <VL53L0X_set_vcsel_pulse_period+0x114>

			Status = VL53L0X_WrByte(Dev,
 800b224:	2240      	movs	r2, #64	; 0x40
 800b226:	2157      	movs	r1, #87	; 0x57
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f001 fc05 	bl	800ca38 <VL53L0X_WrByte>
 800b22e:	4603      	mov	r3, r0
 800b230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x40);
			Status = VL53L0X_WrByte(Dev,
 800b234:	2208      	movs	r2, #8
 800b236:	2156      	movs	r1, #86	; 0x56
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f001 fbfd 	bl	800ca38 <VL53L0X_WrByte>
 800b23e:	4603      	mov	r3, r0
 800b240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b244:	e157      	b.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		} else if (VCSELPulsePeriodPCLK == 18) {
 800b246:	78bb      	ldrb	r3, [r7, #2]
 800b248:	2b12      	cmp	r3, #18
 800b24a:	f040 8154 	bne.w	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b24e:	2250      	movs	r2, #80	; 0x50
 800b250:	2157      	movs	r1, #87	; 0x57
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f001 fbf0 	bl	800ca38 <VL53L0X_WrByte>
 800b258:	4603      	mov	r3, r0
 800b25a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x50);
			Status = VL53L0X_WrByte(Dev,
 800b25e:	2208      	movs	r2, #8
 800b260:	2156      	movs	r1, #86	; 0x56
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f001 fbe8 	bl	800ca38 <VL53L0X_WrByte>
 800b268:	4603      	mov	r3, r0
 800b26a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b26e:	e142      	b.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
				VL53L0X_REG_PRE_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);
		}
	} else if (VcselPeriodType == VL53L0X_VCSEL_PERIOD_FINAL_RANGE) {
 800b270:	78fb      	ldrb	r3, [r7, #3]
 800b272:	2b01      	cmp	r3, #1
 800b274:	f040 813f 	bne.w	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

		if (VCSELPulsePeriodPCLK == 8) {
 800b278:	78bb      	ldrb	r3, [r7, #2]
 800b27a:	2b08      	cmp	r3, #8
 800b27c:	d14c      	bne.n	800b318 <VL53L0X_set_vcsel_pulse_period+0x1e6>

			Status = VL53L0X_WrByte(Dev,
 800b27e:	2210      	movs	r2, #16
 800b280:	2148      	movs	r1, #72	; 0x48
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f001 fbd8 	bl	800ca38 <VL53L0X_WrByte>
 800b288:	4603      	mov	r3, r0
 800b28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x10);
			Status = VL53L0X_WrByte(Dev,
 800b28e:	2208      	movs	r2, #8
 800b290:	2147      	movs	r1, #71	; 0x47
 800b292:	6878      	ldr	r0, [r7, #4]
 800b294:	f001 fbd0 	bl	800ca38 <VL53L0X_WrByte>
 800b298:	4603      	mov	r3, r0
 800b29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b29e:	2202      	movs	r2, #2
 800b2a0:	2132      	movs	r1, #50	; 0x32
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f001 fbc8 	bl	800ca38 <VL53L0X_WrByte>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	461a      	mov	r2, r3
 800b2ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x02);
			Status |= VL53L0X_WrByte(Dev,
 800b2b6:	220c      	movs	r2, #12
 800b2b8:	2130      	movs	r1, #48	; 0x30
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f001 fbbc 	bl	800ca38 <VL53L0X_WrByte>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2c8:	4313      	orrs	r3, r2
 800b2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x0C);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b2ce:	2201      	movs	r2, #1
 800b2d0:	21ff      	movs	r1, #255	; 0xff
 800b2d2:	6878      	ldr	r0, [r7, #4]
 800b2d4:	f001 fbb0 	bl	800ca38 <VL53L0X_WrByte>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	461a      	mov	r2, r3
 800b2dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2e0:	4313      	orrs	r3, r2
 800b2e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b2e6:	2230      	movs	r2, #48	; 0x30
 800b2e8:	2130      	movs	r1, #48	; 0x30
 800b2ea:	6878      	ldr	r0, [r7, #4]
 800b2ec:	f001 fba4 	bl	800ca38 <VL53L0X_WrByte>
 800b2f0:	4603      	mov	r3, r0
 800b2f2:	461a      	mov	r2, r3
 800b2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x30);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b2fe:	2200      	movs	r2, #0
 800b300:	21ff      	movs	r1, #255	; 0xff
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 fb98 	bl	800ca38 <VL53L0X_WrByte>
 800b308:	4603      	mov	r3, r0
 800b30a:	461a      	mov	r2, r3
 800b30c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b310:	4313      	orrs	r3, r2
 800b312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b316:	e0ee      	b.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 10) {
 800b318:	78bb      	ldrb	r3, [r7, #2]
 800b31a:	2b0a      	cmp	r3, #10
 800b31c:	d14c      	bne.n	800b3b8 <VL53L0X_set_vcsel_pulse_period+0x286>

			Status = VL53L0X_WrByte(Dev,
 800b31e:	2228      	movs	r2, #40	; 0x28
 800b320:	2148      	movs	r1, #72	; 0x48
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	f001 fb88 	bl	800ca38 <VL53L0X_WrByte>
 800b328:	4603      	mov	r3, r0
 800b32a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x28);
			Status = VL53L0X_WrByte(Dev,
 800b32e:	2208      	movs	r2, #8
 800b330:	2147      	movs	r1, #71	; 0x47
 800b332:	6878      	ldr	r0, [r7, #4]
 800b334:	f001 fb80 	bl	800ca38 <VL53L0X_WrByte>
 800b338:	4603      	mov	r3, r0
 800b33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b33e:	2203      	movs	r2, #3
 800b340:	2132      	movs	r1, #50	; 0x32
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f001 fb78 	bl	800ca38 <VL53L0X_WrByte>
 800b348:	4603      	mov	r3, r0
 800b34a:	461a      	mov	r2, r3
 800b34c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b350:	4313      	orrs	r3, r2
 800b352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b356:	2209      	movs	r2, #9
 800b358:	2130      	movs	r1, #48	; 0x30
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f001 fb6c 	bl	800ca38 <VL53L0X_WrByte>
 800b360:	4603      	mov	r3, r0
 800b362:	461a      	mov	r2, r3
 800b364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b368:	4313      	orrs	r3, r2
 800b36a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x09);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b36e:	2201      	movs	r2, #1
 800b370:	21ff      	movs	r1, #255	; 0xff
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 fb60 	bl	800ca38 <VL53L0X_WrByte>
 800b378:	4603      	mov	r3, r0
 800b37a:	461a      	mov	r2, r3
 800b37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b380:	4313      	orrs	r3, r2
 800b382:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b386:	2220      	movs	r2, #32
 800b388:	2130      	movs	r1, #48	; 0x30
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f001 fb54 	bl	800ca38 <VL53L0X_WrByte>
 800b390:	4603      	mov	r3, r0
 800b392:	461a      	mov	r2, r3
 800b394:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b398:	4313      	orrs	r3, r2
 800b39a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b39e:	2200      	movs	r2, #0
 800b3a0:	21ff      	movs	r1, #255	; 0xff
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f001 fb48 	bl	800ca38 <VL53L0X_WrByte>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b3b6:	e09e      	b.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 12) {
 800b3b8:	78bb      	ldrb	r3, [r7, #2]
 800b3ba:	2b0c      	cmp	r3, #12
 800b3bc:	d14c      	bne.n	800b458 <VL53L0X_set_vcsel_pulse_period+0x326>

			Status = VL53L0X_WrByte(Dev,
 800b3be:	2238      	movs	r2, #56	; 0x38
 800b3c0:	2148      	movs	r1, #72	; 0x48
 800b3c2:	6878      	ldr	r0, [r7, #4]
 800b3c4:	f001 fb38 	bl	800ca38 <VL53L0X_WrByte>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x38);
			Status = VL53L0X_WrByte(Dev,
 800b3ce:	2208      	movs	r2, #8
 800b3d0:	2147      	movs	r1, #71	; 0x47
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f001 fb30 	bl	800ca38 <VL53L0X_WrByte>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b3de:	2203      	movs	r2, #3
 800b3e0:	2132      	movs	r1, #50	; 0x32
 800b3e2:	6878      	ldr	r0, [r7, #4]
 800b3e4:	f001 fb28 	bl	800ca38 <VL53L0X_WrByte>
 800b3e8:	4603      	mov	r3, r0
 800b3ea:	461a      	mov	r2, r3
 800b3ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b3f6:	2208      	movs	r2, #8
 800b3f8:	2130      	movs	r1, #48	; 0x30
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	f001 fb1c 	bl	800ca38 <VL53L0X_WrByte>
 800b400:	4603      	mov	r3, r0
 800b402:	461a      	mov	r2, r3
 800b404:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b408:	4313      	orrs	r3, r2
 800b40a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x08);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b40e:	2201      	movs	r2, #1
 800b410:	21ff      	movs	r1, #255	; 0xff
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f001 fb10 	bl	800ca38 <VL53L0X_WrByte>
 800b418:	4603      	mov	r3, r0
 800b41a:	461a      	mov	r2, r3
 800b41c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b420:	4313      	orrs	r3, r2
 800b422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b426:	2220      	movs	r2, #32
 800b428:	2130      	movs	r1, #48	; 0x30
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f001 fb04 	bl	800ca38 <VL53L0X_WrByte>
 800b430:	4603      	mov	r3, r0
 800b432:	461a      	mov	r2, r3
 800b434:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b438:	4313      	orrs	r3, r2
 800b43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b43e:	2200      	movs	r2, #0
 800b440:	21ff      	movs	r1, #255	; 0xff
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	f001 faf8 	bl	800ca38 <VL53L0X_WrByte>
 800b448:	4603      	mov	r3, r0
 800b44a:	461a      	mov	r2, r3
 800b44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b450:	4313      	orrs	r3, r2
 800b452:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b456:	e04e      	b.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>
		} else if (VCSELPulsePeriodPCLK == 14) {
 800b458:	78bb      	ldrb	r3, [r7, #2]
 800b45a:	2b0e      	cmp	r3, #14
 800b45c:	d14b      	bne.n	800b4f6 <VL53L0X_set_vcsel_pulse_period+0x3c4>

			Status = VL53L0X_WrByte(Dev,
 800b45e:	2248      	movs	r2, #72	; 0x48
 800b460:	2148      	movs	r1, #72	; 0x48
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f001 fae8 	bl	800ca38 <VL53L0X_WrByte>
 800b468:	4603      	mov	r3, r0
 800b46a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_HIGH,
				0x048);
			Status = VL53L0X_WrByte(Dev,
 800b46e:	2208      	movs	r2, #8
 800b470:	2147      	movs	r1, #71	; 0x47
 800b472:	6878      	ldr	r0, [r7, #4]
 800b474:	f001 fae0 	bl	800ca38 <VL53L0X_WrByte>
 800b478:	4603      	mov	r3, r0
 800b47a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VALID_PHASE_LOW,
				0x08);

			Status |= VL53L0X_WrByte(Dev,
 800b47e:	2203      	movs	r2, #3
 800b480:	2132      	movs	r1, #50	; 0x32
 800b482:	6878      	ldr	r0, [r7, #4]
 800b484:	f001 fad8 	bl	800ca38 <VL53L0X_WrByte>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b490:	4313      	orrs	r3, r2
 800b492:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_GLOBAL_CONFIG_VCSEL_WIDTH, 0x03);
			Status |= VL53L0X_WrByte(Dev,
 800b496:	2207      	movs	r2, #7
 800b498:	2130      	movs	r1, #48	; 0x30
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	f001 facc 	bl	800ca38 <VL53L0X_WrByte>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	461a      	mov	r2, r3
 800b4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4a8:	4313      	orrs	r3, r2
 800b4aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_CONFIG_TIMEOUT, 0x07);

			Status |= VL53L0X_WrByte(Dev, 0xff, 0x01);
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	21ff      	movs	r1, #255	; 0xff
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 fac0 	bl	800ca38 <VL53L0X_WrByte>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4c0:	4313      	orrs	r3, r2
 800b4c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Status |= VL53L0X_WrByte(Dev,
 800b4c6:	2220      	movs	r2, #32
 800b4c8:	2130      	movs	r1, #48	; 0x30
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f001 fab4 	bl	800ca38 <VL53L0X_WrByte>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	461a      	mov	r2, r3
 800b4d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_ALGO_PHASECAL_LIM,
				0x20);
			Status |= VL53L0X_WrByte(Dev, 0xff, 0x00);
 800b4de:	2200      	movs	r2, #0
 800b4e0:	21ff      	movs	r1, #255	; 0xff
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f001 faa8 	bl	800ca38 <VL53L0X_WrByte>
 800b4e8:	4603      	mov	r3, r0
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


	/* Re-calculate and apply timeouts, in macro periods */

	if (Status == VL53L0X_ERROR_NONE) {
 800b4f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d17f      	bne.n	800b5fe <VL53L0X_set_vcsel_pulse_period+0x4cc>
		vcsel_period_reg = VL53L0X_encode_vcsel_period((uint8_t)
 800b4fe:	78bb      	ldrb	r3, [r7, #2]
 800b500:	4618      	mov	r0, r3
 800b502:	f7fe fe35 	bl	800a170 <VL53L0X_encode_vcsel_period>
 800b506:	4603      	mov	r3, r0
 800b508:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		* using the new VCSEL period.
		*
		* For the MSRC timeout, the same applies - this timeout being
		* dependant on the pre-range vcsel period.
		*/
		switch (VcselPeriodType) {
 800b50c:	78fb      	ldrb	r3, [r7, #3]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d002      	beq.n	800b518 <VL53L0X_set_vcsel_pulse_period+0x3e6>
 800b512:	2b01      	cmp	r3, #1
 800b514:	d045      	beq.n	800b5a2 <VL53L0X_set_vcsel_pulse_period+0x470>
 800b516:	e06e      	b.n	800b5f6 <VL53L0X_set_vcsel_pulse_period+0x4c4>
		case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b518:	f107 0314 	add.w	r3, r7, #20
 800b51c:	461a      	mov	r2, r3
 800b51e:	2103      	movs	r1, #3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff fc31 	bl	800ad88 <get_sequence_step_timeout>
 800b526:	4603      	mov	r3, r0
 800b528:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b52c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b530:	2b00      	cmp	r3, #0
 800b532:	d109      	bne.n	800b548 <VL53L0X_set_vcsel_pulse_period+0x416>
				Status = get_sequence_step_timeout(Dev,
 800b534:	f107 0310 	add.w	r3, r7, #16
 800b538:	461a      	mov	r2, r3
 800b53a:	2102      	movs	r1, #2
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fc23 	bl	800ad88 <get_sequence_step_timeout>
 800b542:	4603      	mov	r3, r0
 800b544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					&MsrcTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b548:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d109      	bne.n	800b564 <VL53L0X_set_vcsel_pulse_period+0x432>
				Status = VL53L0X_WrByte(Dev,
 800b550:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b554:	461a      	mov	r2, r3
 800b556:	2150      	movs	r1, #80	; 0x50
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f001 fa6d 	bl	800ca38 <VL53L0X_WrByte>
 800b55e:	4603      	mov	r3, r0
 800b560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b564:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d108      	bne.n	800b57e <VL53L0X_set_vcsel_pulse_period+0x44c>
				Status = set_sequence_step_timeout(Dev,
 800b56c:	697b      	ldr	r3, [r7, #20]
 800b56e:	461a      	mov	r2, r3
 800b570:	2103      	movs	r1, #3
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f7ff fce9 	bl	800af4a <set_sequence_step_timeout>
 800b578:	4603      	mov	r3, r0
 800b57a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_PRE_RANGE,
					PreRangeTimeoutMicroSeconds);


			if (Status == VL53L0X_ERROR_NONE)
 800b57e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b582:	2b00      	cmp	r3, #0
 800b584:	d108      	bne.n	800b598 <VL53L0X_set_vcsel_pulse_period+0x466>
				Status = set_sequence_step_timeout(Dev,
 800b586:	693b      	ldr	r3, [r7, #16]
 800b588:	461a      	mov	r2, r3
 800b58a:	2102      	movs	r1, #2
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f7ff fcdc 	bl	800af4a <set_sequence_step_timeout>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_MSRC,
					MsrcTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	78ba      	ldrb	r2, [r7, #2]
 800b59c:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
				Dev,
				PreRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b5a0:	e02e      	b.n	800b600 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
			Status = get_sequence_step_timeout(Dev,
 800b5a2:	f107 0318 	add.w	r3, r7, #24
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	2104      	movs	r1, #4
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7ff fbec 	bl	800ad88 <get_sequence_step_timeout>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_SEQUENCESTEP_FINAL_RANGE,
				&FinalRangeTimeoutMicroSeconds);

			if (Status == VL53L0X_ERROR_NONE)
 800b5b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d109      	bne.n	800b5d2 <VL53L0X_set_vcsel_pulse_period+0x4a0>
				Status = VL53L0X_WrByte(Dev,
 800b5be:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	2170      	movs	r1, #112	; 0x70
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f001 fa36 	bl	800ca38 <VL53L0X_WrByte>
 800b5cc:	4603      	mov	r3, r0
 800b5ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
					vcsel_period_reg);


			if (Status == VL53L0X_ERROR_NONE)
 800b5d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d108      	bne.n	800b5ec <VL53L0X_set_vcsel_pulse_period+0x4ba>
				Status = set_sequence_step_timeout(Dev,
 800b5da:	69bb      	ldr	r3, [r7, #24]
 800b5dc:	461a      	mov	r2, r3
 800b5de:	2104      	movs	r1, #4
 800b5e0:	6878      	ldr	r0, [r7, #4]
 800b5e2:	f7ff fcb2 	bl	800af4a <set_sequence_step_timeout>
 800b5e6:	4603      	mov	r3, r0
 800b5e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					FinalRangeTimeoutMicroSeconds);

			VL53L0X_SETDEVICESPECIFICPARAMETER(
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	78ba      	ldrb	r2, [r7, #2]
 800b5f0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
				Dev,
				FinalRangeVcselPulsePeriod,
				VCSELPulsePeriodPCLK);
			break;
 800b5f4:	e004      	b.n	800b600 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		default:
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b5f6:	23fc      	movs	r3, #252	; 0xfc
 800b5f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b5fc:	e000      	b.n	800b600 <VL53L0X_set_vcsel_pulse_period+0x4ce>
		}
	}
 800b5fe:	bf00      	nop

	/* Finally, the timing budget must be re-applied */
	if (Status == VL53L0X_ERROR_NONE) {
 800b600:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b604:	2b00      	cmp	r3, #0
 800b606:	d109      	bne.n	800b61c <VL53L0X_set_vcsel_pulse_period+0x4ea>
		VL53L0X_GETPARAMETERFIELD(Dev,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	695b      	ldr	r3, [r3, #20]
 800b60c:	61fb      	str	r3, [r7, #28]
			MeasurementTimingBudgetMicroSeconds,
			MeasurementTimingBudgetMicroSeconds);

		Status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(Dev,
 800b60e:	69f9      	ldr	r1, [r7, #28]
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7fc fe11 	bl	8008238 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800b616:	4603      	mov	r3, r0
 800b618:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	/* Perform the phase calibration. This is needed after changing on
	 * vcsel period.
	 * get_data_enable = 0, restore_config = 1 */
	if (Status == VL53L0X_ERROR_NONE)
 800b61c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b620:	2b00      	cmp	r3, #0
 800b622:	d109      	bne.n	800b638 <VL53L0X_set_vcsel_pulse_period+0x506>
		Status = VL53L0X_perform_phase_calibration(
 800b624:	f107 010f 	add.w	r1, r7, #15
 800b628:	2301      	movs	r3, #1
 800b62a:	2200      	movs	r2, #0
 800b62c:	6878      	ldr	r0, [r7, #4]
 800b62e:	f7fe fcbb 	bl	8009fa8 <VL53L0X_perform_phase_calibration>
 800b632:	4603      	mov	r3, r0
 800b634:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			Dev, &PhaseCalInt, 0, 1);

	return Status;
 800b638:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3728      	adds	r7, #40	; 0x28
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <VL53L0X_get_vcsel_pulse_period>:

VL53L0X_Error VL53L0X_get_vcsel_pulse_period(VL53L0X_DEV Dev,
	VL53L0X_VcselPeriod VcselPeriodType, uint8_t *pVCSELPulsePeriodPCLK)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b086      	sub	sp, #24
 800b648:	af00      	add	r7, sp, #0
 800b64a:	60f8      	str	r0, [r7, #12]
 800b64c:	460b      	mov	r3, r1
 800b64e:	607a      	str	r2, [r7, #4]
 800b650:	72fb      	strb	r3, [r7, #11]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b652:	2300      	movs	r3, #0
 800b654:	75fb      	strb	r3, [r7, #23]
	uint8_t vcsel_period_reg;

	switch (VcselPeriodType) {
 800b656:	7afb      	ldrb	r3, [r7, #11]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <VL53L0X_get_vcsel_pulse_period+0x1e>
 800b65c:	2b01      	cmp	r3, #1
 800b65e:	d00a      	beq.n	800b676 <VL53L0X_get_vcsel_pulse_period+0x32>
 800b660:	e013      	b.n	800b68a <VL53L0X_get_vcsel_pulse_period+0x46>
	case VL53L0X_VCSEL_PERIOD_PRE_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b662:	f107 0316 	add.w	r3, r7, #22
 800b666:	461a      	mov	r2, r3
 800b668:	2150      	movs	r1, #80	; 0x50
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f001 f8e9 	bl	800c842 <VL53L0X_RdByte>
 800b670:	4603      	mov	r3, r0
 800b672:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_PRE_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b674:	e00b      	b.n	800b68e <VL53L0X_get_vcsel_pulse_period+0x4a>
	case VL53L0X_VCSEL_PERIOD_FINAL_RANGE:
		Status = VL53L0X_RdByte(Dev,
 800b676:	f107 0316 	add.w	r3, r7, #22
 800b67a:	461a      	mov	r2, r3
 800b67c:	2170      	movs	r1, #112	; 0x70
 800b67e:	68f8      	ldr	r0, [r7, #12]
 800b680:	f001 f8df 	bl	800c842 <VL53L0X_RdByte>
 800b684:	4603      	mov	r3, r0
 800b686:	75fb      	strb	r3, [r7, #23]
			VL53L0X_REG_FINAL_RANGE_CONFIG_VCSEL_PERIOD,
			&vcsel_period_reg);
	break;
 800b688:	e001      	b.n	800b68e <VL53L0X_get_vcsel_pulse_period+0x4a>
	default:
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b68a:	23fc      	movs	r3, #252	; 0xfc
 800b68c:	75fb      	strb	r3, [r7, #23]
	}

	if (Status == VL53L0X_ERROR_NONE)
 800b68e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d107      	bne.n	800b6a6 <VL53L0X_get_vcsel_pulse_period+0x62>
		*pVCSELPulsePeriodPCLK =
			VL53L0X_decode_vcsel_period(vcsel_period_reg);
 800b696:	7dbb      	ldrb	r3, [r7, #22]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fe fd56 	bl	800a14a <VL53L0X_decode_vcsel_period>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	461a      	mov	r2, r3
		*pVCSELPulsePeriodPCLK =
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	701a      	strb	r2, [r3, #0]

	return Status;
 800b6a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	3718      	adds	r7, #24
 800b6ae:	46bd      	mov	sp, r7
 800b6b0:	bd80      	pop	{r7, pc}

0800b6b2 <VL53L0X_set_measurement_timing_budget_micro_seconds>:



VL53L0X_Error VL53L0X_set_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t MeasurementTimingBudgetMicroSeconds)
{
 800b6b2:	b580      	push	{r7, lr}
 800b6b4:	b092      	sub	sp, #72	; 0x48
 800b6b6:	af00      	add	r7, sp, #0
 800b6b8:	6078      	str	r0, [r7, #4]
 800b6ba:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t FinalRangeTimingBudgetMicroSeconds;
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b6c2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b6c6:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1320;
 800b6c8:	f44f 63a5 	mov.w	r3, #1320	; 0x528
 800b6cc:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint32_t EndOverheadMicroSeconds		= 960;
 800b6ce:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b6d2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b6d4:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b6d8:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t TccOverheadMicroSeconds		= 590;
 800b6da:	f240 234e 	movw	r3, #590	; 0x24e
 800b6de:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t DssOverheadMicroSeconds		= 690;
 800b6e0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b6e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b6e6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b6ea:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b6ec:	f240 2326 	movw	r3, #550	; 0x226
 800b6f0:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
	uint32_t cMinTimingBudgetMicroSeconds	= 20000;
 800b6f6:	f644 6320 	movw	r3, #20000	; 0x4e20
 800b6fa:	623b      	str	r3, [r7, #32]
	uint32_t SubTimeout = 0;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	61fb      	str	r3, [r7, #28]

	LOG_FUNCTION_START("");

	if (MeasurementTimingBudgetMicroSeconds
 800b700:	683a      	ldr	r2, [r7, #0]
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	429a      	cmp	r2, r3
 800b706:	d205      	bcs.n	800b714 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x62>
			< cMinTimingBudgetMicroSeconds) {
		Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b708:	23fc      	movs	r3, #252	; 0xfc
 800b70a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		return Status;
 800b70e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b712:	e0aa      	b.n	800b86a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	FinalRangeTimingBudgetMicroSeconds =
		MeasurementTimingBudgetMicroSeconds -
		(StartOverheadMicroSeconds + EndOverheadMicroSeconds);
 800b714:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b718:	4413      	add	r3, r2
	FinalRangeTimingBudgetMicroSeconds =
 800b71a:	683a      	ldr	r2, [r7, #0]
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	643b      	str	r3, [r7, #64]	; 0x40

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b720:	f107 0314 	add.w	r3, r7, #20
 800b724:	4619      	mov	r1, r3
 800b726:	6878      	ldr	r0, [r7, #4]
 800b728:	f7fc fed0 	bl	80084cc <VL53L0X_GetSequenceStepEnables>
 800b72c:	4603      	mov	r3, r0
 800b72e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (Status == VL53L0X_ERROR_NONE &&
 800b732:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b736:	2b00      	cmp	r3, #0
 800b738:	d15b      	bne.n	800b7f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
		(SchedulerSequenceSteps.TccOn  ||
 800b73a:	7d3b      	ldrb	r3, [r7, #20]
	if (Status == VL53L0X_ERROR_NONE &&
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d105      	bne.n	800b74c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.MsrcOn ||
 800b740:	7d7b      	ldrb	r3, [r7, #21]
		(SchedulerSequenceSteps.TccOn  ||
 800b742:	2b00      	cmp	r3, #0
 800b744:	d102      	bne.n	800b74c <VL53L0X_set_measurement_timing_budget_micro_seconds+0x9a>
		SchedulerSequenceSteps.DssOn)) {
 800b746:	7dbb      	ldrb	r3, [r7, #22]
		SchedulerSequenceSteps.MsrcOn ||
 800b748:	2b00      	cmp	r3, #0
 800b74a:	d052      	beq.n	800b7f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>

		/* TCC, MSRC and DSS all share the same timeout */
		Status = get_sequence_step_timeout(Dev,
 800b74c:	f107 0310 	add.w	r3, r7, #16
 800b750:	461a      	mov	r2, r3
 800b752:	2102      	movs	r1, #2
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff fb17 	bl	800ad88 <get_sequence_step_timeout>
 800b75a:	4603      	mov	r3, r0
 800b75c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					&MsrcDccTccTimeoutMicroSeconds);

		/* Subtract the TCC, MSRC and DSS timeouts if they are
		 * enabled. */

		if (Status != VL53L0X_ERROR_NONE)
 800b760:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b764:	2b00      	cmp	r3, #0
 800b766:	d002      	beq.n	800b76e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xbc>
			return Status;
 800b768:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b76c:	e07d      	b.n	800b86a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>

		/* TCC */
		if (SchedulerSequenceSteps.TccOn) {
 800b76e:	7d3b      	ldrb	r3, [r7, #20]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d00f      	beq.n	800b794 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>

			SubTimeout = MsrcDccTccTimeoutMicroSeconds
				+ TccOverheadMicroSeconds;
 800b774:	693b      	ldr	r3, [r7, #16]
			SubTimeout = MsrcDccTccTimeoutMicroSeconds
 800b776:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b778:	4413      	add	r3, r2
 800b77a:	61fb      	str	r3, [r7, #28]

			if (SubTimeout <
 800b77c:	69fa      	ldr	r2, [r7, #28]
 800b77e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b780:	429a      	cmp	r2, r3
 800b782:	d204      	bcs.n	800b78e <VL53L0X_set_measurement_timing_budget_micro_seconds+0xdc>
				FinalRangeTimingBudgetMicroSeconds) {
				FinalRangeTimingBudgetMicroSeconds -=
 800b784:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b786:	69fb      	ldr	r3, [r7, #28]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	643b      	str	r3, [r7, #64]	; 0x40
 800b78c:	e002      	b.n	800b794 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xe2>
							SubTimeout;
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b78e:	23fc      	movs	r3, #252	; 0xfc
 800b790:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

		if (Status != VL53L0X_ERROR_NONE) {
 800b794:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d002      	beq.n	800b7a2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0xf0>
			LOG_FUNCTION_END(Status);
			return Status;
 800b79c:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b7a0:	e063      	b.n	800b86a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
		}

		/* DSS */
		if (SchedulerSequenceSteps.DssOn) {
 800b7a2:	7dbb      	ldrb	r3, [r7, #22]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d011      	beq.n	800b7cc <VL53L0X_set_measurement_timing_budget_micro_seconds+0x11a>

			SubTimeout = 2 * (MsrcDccTccTimeoutMicroSeconds +
 800b7a8:	693a      	ldr	r2, [r7, #16]
 800b7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7ac:	4413      	add	r3, r2
 800b7ae:	005b      	lsls	r3, r3, #1
 800b7b0:	61fb      	str	r3, [r7, #28]
				DssOverheadMicroSeconds);

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b7b2:	69fa      	ldr	r2, [r7, #28]
 800b7b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d204      	bcs.n	800b7c4 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x112>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b7ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	643b      	str	r3, [r7, #64]	; 0x40
 800b7c2:	e016      	b.n	800b7f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b7c4:	23fc      	movs	r3, #252	; 0xfc
 800b7c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b7ca:	e012      	b.n	800b7f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			}
		} else if (SchedulerSequenceSteps.MsrcOn) {
 800b7cc:	7d7b      	ldrb	r3, [r7, #21]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d00f      	beq.n	800b7f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			/* MSRC */
			SubTimeout = MsrcDccTccTimeoutMicroSeconds +
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b7d6:	4413      	add	r3, r2
 800b7d8:	61fb      	str	r3, [r7, #28]
						MsrcOverheadMicroSeconds;

			if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b7da:	69fa      	ldr	r2, [r7, #28]
 800b7dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7de:	429a      	cmp	r2, r3
 800b7e0:	d204      	bcs.n	800b7ec <VL53L0X_set_measurement_timing_budget_micro_seconds+0x13a>
				FinalRangeTimingBudgetMicroSeconds
							-= SubTimeout;
 800b7e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b7e4:	69fb      	ldr	r3, [r7, #28]
 800b7e6:	1ad3      	subs	r3, r2, r3
 800b7e8:	643b      	str	r3, [r7, #64]	; 0x40
 800b7ea:	e002      	b.n	800b7f2 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x140>
			} else {
				/* Requested timeout too big. */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b7ec:	23fc      	movs	r3, #252	; 0xfc
 800b7ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			}
		}

	}

	if (Status != VL53L0X_ERROR_NONE) {
 800b7f2:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d002      	beq.n	800b800 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x14e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b7fa:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b7fe:	e034      	b.n	800b86a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b8>
	}

	if (SchedulerSequenceSteps.PreRangeOn) {
 800b800:	7dfb      	ldrb	r3, [r7, #23]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d019      	beq.n	800b83a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>

		/* Subtract the Pre-range timeout if enabled. */

		Status = get_sequence_step_timeout(Dev,
 800b806:	f107 030c 	add.w	r3, r7, #12
 800b80a:	461a      	mov	r2, r3
 800b80c:	2103      	movs	r1, #3
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f7ff faba 	bl	800ad88 <get_sequence_step_timeout>
 800b814:	4603      	mov	r3, r0
 800b816:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);

		SubTimeout = PreRangeTimeoutMicroSeconds +
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b81e:	4413      	add	r3, r2
 800b820:	61fb      	str	r3, [r7, #28]
				PreRangeOverheadMicroSeconds;

		if (SubTimeout < FinalRangeTimingBudgetMicroSeconds) {
 800b822:	69fa      	ldr	r2, [r7, #28]
 800b824:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b826:	429a      	cmp	r2, r3
 800b828:	d204      	bcs.n	800b834 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x182>
			FinalRangeTimingBudgetMicroSeconds -= SubTimeout;
 800b82a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b82c:	69fb      	ldr	r3, [r7, #28]
 800b82e:	1ad3      	subs	r3, r2, r3
 800b830:	643b      	str	r3, [r7, #64]	; 0x40
 800b832:	e002      	b.n	800b83a <VL53L0X_set_measurement_timing_budget_micro_seconds+0x188>
		} else {
			/* Requested timeout too big. */
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800b834:	23fc      	movs	r3, #252	; 0xfc
 800b836:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		}
	}


	if (Status == VL53L0X_ERROR_NONE &&
 800b83a:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d111      	bne.n	800b866 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>
		SchedulerSequenceSteps.FinalRangeOn) {
 800b842:	7e3b      	ldrb	r3, [r7, #24]
	if (Status == VL53L0X_ERROR_NONE &&
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00e      	beq.n	800b866 <VL53L0X_set_measurement_timing_budget_micro_seconds+0x1b4>

		FinalRangeTimingBudgetMicroSeconds -=
 800b848:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	1ad3      	subs	r3, r2, r3
 800b84e:	643b      	str	r3, [r7, #64]	; 0x40
		* budget and the sum of all other timeouts within the sequence.
		* If there is no room for the final range timeout, then an error
		* will be set. Otherwise the remaining time will be applied to
		* the final range.
		*/
		Status = set_sequence_step_timeout(Dev,
 800b850:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b852:	2104      	movs	r1, #4
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f7ff fb78 	bl	800af4a <set_sequence_step_timeout>
 800b85a:	4603      	mov	r3, r0
 800b85c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			   VL53L0X_SEQUENCESTEP_FINAL_RANGE,
			   FinalRangeTimingBudgetMicroSeconds);

		VL53L0X_SETPARAMETERFIELD(Dev,
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	683a      	ldr	r2, [r7, #0]
 800b864:	615a      	str	r2, [r3, #20]
			   MeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);

	return Status;
 800b866:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3748      	adds	r7, #72	; 0x48
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <VL53L0X_get_measurement_timing_budget_micro_seconds>:

VL53L0X_Error VL53L0X_get_measurement_timing_budget_micro_seconds(VL53L0X_DEV Dev,
		uint32_t *pMeasurementTimingBudgetMicroSeconds)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b090      	sub	sp, #64	; 0x40
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b87c:	2300      	movs	r3, #0
 800b87e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	VL53L0X_SchedulerSequenceSteps_t SchedulerSequenceSteps;
	uint32_t FinalRangeTimeoutMicroSeconds;
	uint32_t MsrcDccTccTimeoutMicroSeconds	= 2000;
 800b882:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800b886:	613b      	str	r3, [r7, #16]
	uint32_t StartOverheadMicroSeconds		= 1910;
 800b888:	f240 7376 	movw	r3, #1910	; 0x776
 800b88c:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t EndOverheadMicroSeconds		= 960;
 800b88e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800b892:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t MsrcOverheadMicroSeconds		= 660;
 800b894:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b898:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t TccOverheadMicroSeconds		= 590;
 800b89a:	f240 234e 	movw	r3, #590	; 0x24e
 800b89e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t DssOverheadMicroSeconds		= 690;
 800b8a0:	f240 23b2 	movw	r3, #690	; 0x2b2
 800b8a4:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t PreRangeOverheadMicroSeconds	= 660;
 800b8a6:	f44f 7325 	mov.w	r3, #660	; 0x294
 800b8aa:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t FinalRangeOverheadMicroSeconds = 550;
 800b8ac:	f240 2326 	movw	r3, #550	; 0x226
 800b8b0:	623b      	str	r3, [r7, #32]
	uint32_t PreRangeTimeoutMicroSeconds	= 0;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	60fb      	str	r3, [r7, #12]

	LOG_FUNCTION_START("");

	/* Start and end overhead times always present */
	*pMeasurementTimingBudgetMicroSeconds
		= StartOverheadMicroSeconds + EndOverheadMicroSeconds;
 800b8b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8ba:	441a      	add	r2, r3
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetSequenceStepEnables(Dev, &SchedulerSequenceSteps);
 800b8c0:	f107 0318 	add.w	r3, r7, #24
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f7fc fe00 	bl	80084cc <VL53L0X_GetSequenceStepEnables>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status != VL53L0X_ERROR_NONE) {
 800b8d2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d002      	beq.n	800b8e0 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x6e>
		LOG_FUNCTION_END(Status);
		return Status;
 800b8da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b8de:	e075      	b.n	800b9cc <VL53L0X_get_measurement_timing_budget_micro_seconds+0x15a>
	}


	if (SchedulerSequenceSteps.TccOn  ||
 800b8e0:	7e3b      	ldrb	r3, [r7, #24]
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d105      	bne.n	800b8f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.MsrcOn ||
 800b8e6:	7e7b      	ldrb	r3, [r7, #25]
	if (SchedulerSequenceSteps.TccOn  ||
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d102      	bne.n	800b8f2 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x80>
		SchedulerSequenceSteps.DssOn) {
 800b8ec:	7ebb      	ldrb	r3, [r7, #26]
		SchedulerSequenceSteps.MsrcOn ||
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d030      	beq.n	800b954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>

		Status = get_sequence_step_timeout(Dev,
 800b8f2:	f107 0310 	add.w	r3, r7, #16
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	2102      	movs	r1, #2
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7ff fa44 	bl	800ad88 <get_sequence_step_timeout>
 800b900:	4603      	mov	r3, r0
 800b902:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_MSRC,
				&MsrcDccTccTimeoutMicroSeconds);

		if (Status == VL53L0X_ERROR_NONE) {
 800b906:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d122      	bne.n	800b954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
			if (SchedulerSequenceSteps.TccOn) {
 800b90e:	7e3b      	ldrb	r3, [r7, #24]
 800b910:	2b00      	cmp	r3, #0
 800b912:	d007      	beq.n	800b924 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xb2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b918:	6939      	ldr	r1, [r7, #16]
 800b91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b91c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b91e:	441a      	add	r2, r3
 800b920:	683b      	ldr	r3, [r7, #0]
 800b922:	601a      	str	r2, [r3, #0]
					TccOverheadMicroSeconds;
			}

			if (SchedulerSequenceSteps.DssOn) {
 800b924:	7ebb      	ldrb	r3, [r7, #26]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d009      	beq.n	800b93e <VL53L0X_get_measurement_timing_budget_micro_seconds+0xcc>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	681a      	ldr	r2, [r3, #0]
				2 * (MsrcDccTccTimeoutMicroSeconds +
 800b92e:	6939      	ldr	r1, [r7, #16]
 800b930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b932:	440b      	add	r3, r1
 800b934:	005b      	lsls	r3, r3, #1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b936:	441a      	add	r2, r3
 800b938:	683b      	ldr	r3, [r7, #0]
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	e00a      	b.n	800b954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
					DssOverheadMicroSeconds);
			} else if (SchedulerSequenceSteps.MsrcOn) {
 800b93e:	7e7b      	ldrb	r3, [r7, #25]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d007      	beq.n	800b954 <VL53L0X_get_measurement_timing_budget_micro_seconds+0xe2>
				*pMeasurementTimingBudgetMicroSeconds +=
 800b944:	683b      	ldr	r3, [r7, #0]
 800b946:	681a      	ldr	r2, [r3, #0]
					MsrcDccTccTimeoutMicroSeconds +
 800b948:	6939      	ldr	r1, [r7, #16]
 800b94a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b94c:	440b      	add	r3, r1
				*pMeasurementTimingBudgetMicroSeconds +=
 800b94e:	441a      	add	r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	601a      	str	r2, [r3, #0]
					MsrcOverheadMicroSeconds;
			}
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b954:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d114      	bne.n	800b986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
		if (SchedulerSequenceSteps.PreRangeOn) {
 800b95c:	7efb      	ldrb	r3, [r7, #27]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d011      	beq.n	800b986 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x114>
			Status = get_sequence_step_timeout(Dev,
 800b962:	f107 030c 	add.w	r3, r7, #12
 800b966:	461a      	mov	r2, r3
 800b968:	2103      	movs	r1, #3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7ff fa0c 	bl	800ad88 <get_sequence_step_timeout>
 800b970:	4603      	mov	r3, r0
 800b972:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_SEQUENCESTEP_PRE_RANGE,
				&PreRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
				PreRangeTimeoutMicroSeconds +
 800b97a:	68f9      	ldr	r1, [r7, #12]
 800b97c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b97e:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b980:	441a      	add	r2, r3
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	601a      	str	r2, [r3, #0]
				PreRangeOverheadMicroSeconds;
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b986:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d114      	bne.n	800b9b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
		if (SchedulerSequenceSteps.FinalRangeOn) {
 800b98e:	7f3b      	ldrb	r3, [r7, #28]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d011      	beq.n	800b9b8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x146>
			Status = get_sequence_step_timeout(Dev,
 800b994:	f107 0314 	add.w	r3, r7, #20
 800b998:	461a      	mov	r2, r3
 800b99a:	2104      	movs	r1, #4
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f7ff f9f3 	bl	800ad88 <get_sequence_step_timeout>
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
					VL53L0X_SEQUENCESTEP_FINAL_RANGE,
					&FinalRangeTimeoutMicroSeconds);
			*pMeasurementTimingBudgetMicroSeconds +=
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	681a      	ldr	r2, [r3, #0]
				(FinalRangeTimeoutMicroSeconds +
 800b9ac:	6979      	ldr	r1, [r7, #20]
 800b9ae:	6a3b      	ldr	r3, [r7, #32]
 800b9b0:	440b      	add	r3, r1
			*pMeasurementTimingBudgetMicroSeconds +=
 800b9b2:	441a      	add	r2, r3
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	601a      	str	r2, [r3, #0]
				FinalRangeOverheadMicroSeconds);
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800b9b8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d103      	bne.n	800b9c8 <VL53L0X_get_measurement_timing_budget_micro_seconds+0x156>
		VL53L0X_SETPARAMETERFIELD(Dev,
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	615a      	str	r2, [r3, #20]
			MeasurementTimingBudgetMicroSeconds,
			*pMeasurementTimingBudgetMicroSeconds);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800b9c8:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3740      	adds	r7, #64	; 0x40
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}

0800b9d4 <VL53L0X_load_tuning_settings>:



VL53L0X_Error VL53L0X_load_tuning_settings(VL53L0X_DEV Dev,
		uint8_t *pTuningSettingBuffer)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	77fb      	strb	r3, [r7, #31]
	uint8_t localBuffer[4]; /* max */
	uint16_t Temp16;

	LOG_FUNCTION_START("");

	Index = 0;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	617b      	str	r3, [r7, #20]

	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800b9e6:	e0c6      	b.n	800bb76 <VL53L0X_load_tuning_settings+0x1a2>
			(Status == VL53L0X_ERROR_NONE)) {
		NumberOfWrites = *(pTuningSettingBuffer + Index);
 800b9e8:	697b      	ldr	r3, [r7, #20]
 800b9ea:	683a      	ldr	r2, [r7, #0]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	781b      	ldrb	r3, [r3, #0]
 800b9f0:	74fb      	strb	r3, [r7, #19]
		Index++;
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	617b      	str	r3, [r7, #20]
		if (NumberOfWrites == 0xFF) {
 800b9f8:	7cfb      	ldrb	r3, [r7, #19]
 800b9fa:	2bff      	cmp	r3, #255	; 0xff
 800b9fc:	f040 808d 	bne.w	800bb1a <VL53L0X_load_tuning_settings+0x146>
			/* internal parameters */
			SelectParam = *(pTuningSettingBuffer + Index);
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	683a      	ldr	r2, [r7, #0]
 800ba04:	4413      	add	r3, r2
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	747b      	strb	r3, [r7, #17]
			Index++;
 800ba0a:	697b      	ldr	r3, [r7, #20]
 800ba0c:	3301      	adds	r3, #1
 800ba0e:	617b      	str	r3, [r7, #20]
			switch (SelectParam) {
 800ba10:	7c7b      	ldrb	r3, [r7, #17]
 800ba12:	2b03      	cmp	r3, #3
 800ba14:	d87e      	bhi.n	800bb14 <VL53L0X_load_tuning_settings+0x140>
 800ba16:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <VL53L0X_load_tuning_settings+0x48>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba2d 	.word	0x0800ba2d
 800ba20:	0800ba67 	.word	0x0800ba67
 800ba24:	0800baa1 	.word	0x0800baa1
 800ba28:	0800badb 	.word	0x0800badb
			case 0: /* uint16_t SigmaEstRefArray -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	683a      	ldr	r2, [r7, #0]
 800ba30:	4413      	add	r3, r2
 800ba32:	781b      	ldrb	r3, [r3, #0]
 800ba34:	743b      	strb	r3, [r7, #16]
				Index++;
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	3301      	adds	r3, #1
 800ba3a:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ba3c:	697b      	ldr	r3, [r7, #20]
 800ba3e:	683a      	ldr	r2, [r7, #0]
 800ba40:	4413      	add	r3, r2
 800ba42:	781b      	ldrb	r3, [r3, #0]
 800ba44:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	3301      	adds	r3, #1
 800ba4a:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ba4c:	7c3b      	ldrb	r3, [r7, #16]
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	021b      	lsls	r3, r3, #8
 800ba52:	b29a      	uxth	r2, r3
 800ba54:	7bfb      	ldrb	r3, [r7, #15]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	4413      	add	r3, r2
 800ba5a:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstRefArray, Temp16);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	89ba      	ldrh	r2, [r7, #12]
 800ba60:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				break;
 800ba64:	e087      	b.n	800bb76 <VL53L0X_load_tuning_settings+0x1a2>
			case 1: /* uint16_t SigmaEstEffPulseWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	683a      	ldr	r2, [r7, #0]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	781b      	ldrb	r3, [r3, #0]
 800ba6e:	743b      	strb	r3, [r7, #16]
				Index++;
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	3301      	adds	r3, #1
 800ba74:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	683a      	ldr	r2, [r7, #0]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	73fb      	strb	r3, [r7, #15]
				Index++;
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	3301      	adds	r3, #1
 800ba84:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800ba86:	7c3b      	ldrb	r3, [r7, #16]
 800ba88:	b29b      	uxth	r3, r3
 800ba8a:	021b      	lsls	r3, r3, #8
 800ba8c:	b29a      	uxth	r2, r3
 800ba8e:	7bfb      	ldrb	r3, [r7, #15]
 800ba90:	b29b      	uxth	r3, r3
 800ba92:	4413      	add	r3, r2
 800ba94:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffPulseWidth,
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	89ba      	ldrh	r2, [r7, #12]
 800ba9a:	f8a3 2136 	strh.w	r2, [r3, #310]	; 0x136
					Temp16);
				break;
 800ba9e:	e06a      	b.n	800bb76 <VL53L0X_load_tuning_settings+0x1a2>
			case 2: /* uint16_t SigmaEstEffAmbWidth -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	4413      	add	r3, r2
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	743b      	strb	r3, [r7, #16]
				Index++;
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	3301      	adds	r3, #1
 800baae:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	683a      	ldr	r2, [r7, #0]
 800bab4:	4413      	add	r3, r2
 800bab6:	781b      	ldrb	r3, [r3, #0]
 800bab8:	73fb      	strb	r3, [r7, #15]
				Index++;
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	3301      	adds	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bac0:	7c3b      	ldrb	r3, [r7, #16]
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	7bfb      	ldrb	r3, [r7, #15]
 800baca:	b29b      	uxth	r3, r3
 800bacc:	4413      	add	r3, r2
 800bace:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, SigmaEstEffAmbWidth, Temp16);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	89ba      	ldrh	r2, [r7, #12]
 800bad4:	f8a3 2138 	strh.w	r2, [r3, #312]	; 0x138
				break;
 800bad8:	e04d      	b.n	800bb76 <VL53L0X_load_tuning_settings+0x1a2>
			case 3: /* uint16_t targetRefRate -> 2 bytes */
				msb = *(pTuningSettingBuffer + Index);
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	683a      	ldr	r2, [r7, #0]
 800bade:	4413      	add	r3, r2
 800bae0:	781b      	ldrb	r3, [r3, #0]
 800bae2:	743b      	strb	r3, [r7, #16]
				Index++;
 800bae4:	697b      	ldr	r3, [r7, #20]
 800bae6:	3301      	adds	r3, #1
 800bae8:	617b      	str	r3, [r7, #20]
				lsb = *(pTuningSettingBuffer + Index);
 800baea:	697b      	ldr	r3, [r7, #20]
 800baec:	683a      	ldr	r2, [r7, #0]
 800baee:	4413      	add	r3, r2
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	73fb      	strb	r3, [r7, #15]
				Index++;
 800baf4:	697b      	ldr	r3, [r7, #20]
 800baf6:	3301      	adds	r3, #1
 800baf8:	617b      	str	r3, [r7, #20]
				Temp16 = VL53L0X_MAKEUINT16(lsb, msb);
 800bafa:	7c3b      	ldrb	r3, [r7, #16]
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	021b      	lsls	r3, r3, #8
 800bb00:	b29a      	uxth	r2, r3
 800bb02:	7bfb      	ldrb	r3, [r7, #15]
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	4413      	add	r3, r2
 800bb08:	81bb      	strh	r3, [r7, #12]
				PALDevDataSet(Dev, targetRefRate, Temp16);
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	89ba      	ldrh	r2, [r7, #12]
 800bb0e:	f8a3 213a 	strh.w	r2, [r3, #314]	; 0x13a
				break;
 800bb12:	e030      	b.n	800bb76 <VL53L0X_load_tuning_settings+0x1a2>
			default: /* invalid parameter */
				Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb14:	23fc      	movs	r3, #252	; 0xfc
 800bb16:	77fb      	strb	r3, [r7, #31]
 800bb18:	e02d      	b.n	800bb76 <VL53L0X_load_tuning_settings+0x1a2>
			}

		} else if (NumberOfWrites <= 4) {
 800bb1a:	7cfb      	ldrb	r3, [r7, #19]
 800bb1c:	2b04      	cmp	r3, #4
 800bb1e:	d828      	bhi.n	800bb72 <VL53L0X_load_tuning_settings+0x19e>
			Address = *(pTuningSettingBuffer + Index);
 800bb20:	697b      	ldr	r3, [r7, #20]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	4413      	add	r3, r2
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	74bb      	strb	r3, [r7, #18]
			Index++;
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	617b      	str	r3, [r7, #20]

			for (i = 0; i < NumberOfWrites; i++) {
 800bb30:	2300      	movs	r3, #0
 800bb32:	61bb      	str	r3, [r7, #24]
 800bb34:	e00f      	b.n	800bb56 <VL53L0X_load_tuning_settings+0x182>
				localBuffer[i] = *(pTuningSettingBuffer +
 800bb36:	697b      	ldr	r3, [r7, #20]
 800bb38:	683a      	ldr	r2, [r7, #0]
 800bb3a:	4413      	add	r3, r2
 800bb3c:	7819      	ldrb	r1, [r3, #0]
 800bb3e:	f107 0208 	add.w	r2, r7, #8
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	4413      	add	r3, r2
 800bb46:	460a      	mov	r2, r1
 800bb48:	701a      	strb	r2, [r3, #0]
							Index);
				Index++;
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	3301      	adds	r3, #1
 800bb4e:	617b      	str	r3, [r7, #20]
			for (i = 0; i < NumberOfWrites; i++) {
 800bb50:	69bb      	ldr	r3, [r7, #24]
 800bb52:	3301      	adds	r3, #1
 800bb54:	61bb      	str	r3, [r7, #24]
 800bb56:	7cfb      	ldrb	r3, [r7, #19]
 800bb58:	69ba      	ldr	r2, [r7, #24]
 800bb5a:	429a      	cmp	r2, r3
 800bb5c:	dbeb      	blt.n	800bb36 <VL53L0X_load_tuning_settings+0x162>
			}

			Status = VL53L0X_WriteMulti(Dev, Address, localBuffer,
 800bb5e:	7cfb      	ldrb	r3, [r7, #19]
 800bb60:	f107 0208 	add.w	r2, r7, #8
 800bb64:	7cb9      	ldrb	r1, [r7, #18]
 800bb66:	6878      	ldr	r0, [r7, #4]
 800bb68:	f000 fe96 	bl	800c898 <VL53L0X_WriteMulti>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	77fb      	strb	r3, [r7, #31]
 800bb70:	e001      	b.n	800bb76 <VL53L0X_load_tuning_settings+0x1a2>
					NumberOfWrites);

		} else {
			Status = VL53L0X_ERROR_INVALID_PARAMS;
 800bb72:	23fc      	movs	r3, #252	; 0xfc
 800bb74:	77fb      	strb	r3, [r7, #31]
	while ((*(pTuningSettingBuffer + Index) != 0) &&
 800bb76:	697b      	ldr	r3, [r7, #20]
 800bb78:	683a      	ldr	r2, [r7, #0]
 800bb7a:	4413      	add	r3, r2
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	d004      	beq.n	800bb8c <VL53L0X_load_tuning_settings+0x1b8>
 800bb82:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	f43f af2e 	beq.w	800b9e8 <VL53L0X_load_tuning_settings+0x14>
		}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800bb8c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3720      	adds	r7, #32
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <VL53L0X_get_total_xtalk_rate>:

VL53L0X_Error VL53L0X_get_total_xtalk_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_xtalk_rate_mcps)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b088      	sub	sp, #32
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	60f8      	str	r0, [r7, #12]
 800bba0:	60b9      	str	r1, [r7, #8]
 800bba2:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bba4:	2300      	movs	r3, #0
 800bba6:	77fb      	strb	r3, [r7, #31]

	uint8_t xtalkCompEnable;
	FixPoint1616_t totalXtalkMegaCps;
	FixPoint1616_t xtalkPerSpadMegaCps;

	*ptotal_xtalk_rate_mcps = 0;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2200      	movs	r2, #0
 800bbac:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_GetXTalkCompensationEnable(Dev, &xtalkCompEnable);
 800bbae:	f107 0313 	add.w	r3, r7, #19
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	68f8      	ldr	r0, [r7, #12]
 800bbb6:	f7fc fd55 	bl	8008664 <VL53L0X_GetXTalkCompensationEnable>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	77fb      	strb	r3, [r7, #31]
	if (Status == VL53L0X_ERROR_NONE) {
 800bbbe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d111      	bne.n	800bbea <VL53L0X_get_total_xtalk_rate+0x52>

		if (xtalkCompEnable) {
 800bbc6:	7cfb      	ldrb	r3, [r7, #19]
 800bbc8:	2b00      	cmp	r3, #0
 800bbca:	d00e      	beq.n	800bbea <VL53L0X_get_total_xtalk_rate+0x52>

			VL53L0X_GETPARAMETERFIELD(
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	6a1b      	ldr	r3, [r3, #32]
 800bbd0:	61bb      	str	r3, [r7, #24]
				XTalkCompensationRateMegaCps,
				xtalkPerSpadMegaCps);

			/* FixPoint1616 * FixPoint 8:8 = FixPoint0824 */
			totalXtalkMegaCps =
				pRangingMeasurementData->EffectiveSpadRtnCount *
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	8a9b      	ldrh	r3, [r3, #20]
 800bbd6:	461a      	mov	r2, r3
			totalXtalkMegaCps =
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	fb02 f303 	mul.w	r3, r2, r3
 800bbde:	617b      	str	r3, [r7, #20]
				xtalkPerSpadMegaCps;

			/* FixPoint0824 >> 8 = FixPoint1616 */
			*ptotal_xtalk_rate_mcps =
				(totalXtalkMegaCps + 0x80) >> 8;
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	3380      	adds	r3, #128	; 0x80
 800bbe4:	0a1a      	lsrs	r2, r3, #8
			*ptotal_xtalk_rate_mcps =
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	601a      	str	r2, [r3, #0]
		}
	}

	return Status;
 800bbea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3720      	adds	r7, #32
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <VL53L0X_get_total_signal_rate>:

VL53L0X_Error VL53L0X_get_total_signal_rate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *ptotal_signal_rate_mcps)
{
 800bbf6:	b580      	push	{r7, lr}
 800bbf8:	b086      	sub	sp, #24
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc02:	2300      	movs	r3, #0
 800bc04:	75fb      	strb	r3, [r7, #23]
	FixPoint1616_t totalXtalkMegaCps;

	LOG_FUNCTION_START("");

	*ptotal_signal_rate_mcps =
		pRangingMeasurementData->SignalRateRtnMegaCps;
 800bc06:	68bb      	ldr	r3, [r7, #8]
 800bc08:	68da      	ldr	r2, [r3, #12]
	*ptotal_signal_rate_mcps =
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	601a      	str	r2, [r3, #0]

	Status = VL53L0X_get_total_xtalk_rate(
 800bc0e:	f107 0310 	add.w	r3, r7, #16
 800bc12:	461a      	mov	r2, r3
 800bc14:	68b9      	ldr	r1, [r7, #8]
 800bc16:	68f8      	ldr	r0, [r7, #12]
 800bc18:	f7ff ffbe 	bl	800bb98 <VL53L0X_get_total_xtalk_rate>
 800bc1c:	4603      	mov	r3, r0
 800bc1e:	75fb      	strb	r3, [r7, #23]
		Dev, pRangingMeasurementData, &totalXtalkMegaCps);

	if (Status == VL53L0X_ERROR_NONE)
 800bc20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d105      	bne.n	800bc34 <VL53L0X_get_total_signal_rate+0x3e>
		*ptotal_signal_rate_mcps += totalXtalkMegaCps;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	693b      	ldr	r3, [r7, #16]
 800bc2e:	441a      	add	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	601a      	str	r2, [r3, #0]

	return Status;
 800bc34:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <VL53L0X_calc_dmax>:
	FixPoint1616_t pwMult,
	uint32_t sigmaEstimateP1,
	FixPoint1616_t sigmaEstimateP2,
	uint32_t peakVcselDuration_us,
	uint32_t *pdmax_mm)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b09a      	sub	sp, #104	; 0x68
 800bc44:	af00      	add	r7, sp, #0
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
	const uint32_t cSigmaLimit		= 18;
 800bc4e:	2312      	movs	r3, #18
 800bc50:	657b      	str	r3, [r7, #84]	; 0x54
	const FixPoint1616_t cSignalLimit	= 0x4000; /* 0.25 */
 800bc52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bc56:	653b      	str	r3, [r7, #80]	; 0x50
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800bc58:	2342      	movs	r3, #66	; 0x42
 800bc5a:	64fb      	str	r3, [r7, #76]	; 0x4c
	const uint32_t cAmbEffWidthSigmaEst_ns = 6;
 800bc5c:	2306      	movs	r3, #6
 800bc5e:	64bb      	str	r3, [r7, #72]	; 0x48
	const uint32_t cAmbEffWidthDMax_ns	   = 7;
 800bc60:	2307      	movs	r3, #7
 800bc62:	647b      	str	r3, [r7, #68]	; 0x44
	FixPoint1616_t dmaxAmbient;
	FixPoint1616_t dmaxDarkTmp;
	FixPoint1616_t sigmaEstP2Tmp;
	uint32_t signalRateTemp_mcps;

	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bc64:	2300      	movs	r3, #0
 800bc66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	LOG_FUNCTION_START("");

	dmaxCalRange_mm =
		PALDevDataGet(Dev, DmaxCalRangeMilliMeter);
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	f8b3 3150 	ldrh.w	r3, [r3, #336]	; 0x150
	dmaxCalRange_mm =
 800bc70:	63fb      	str	r3, [r7, #60]	; 0x3c

	dmaxCalSignalRateRtn_mcps =
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800bc78:	63bb      	str	r3, [r7, #56]	; 0x38
		PALDevDataGet(Dev, DmaxCalSignalRateRtnMegaCps);

	/* uint32 * FixPoint1616 = FixPoint1616 */
	SignalAt0mm = dmaxCalRange_mm * dmaxCalSignalRateRtn_mcps;
 800bc7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bc7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc7e:	fb02 f303 	mul.w	r3, r2, r3
 800bc82:	637b      	str	r3, [r7, #52]	; 0x34

	/* FixPoint1616 >> 8 = FixPoint2408 */
	SignalAt0mm = (SignalAt0mm + 0x80) >> 8;
 800bc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc86:	3380      	adds	r3, #128	; 0x80
 800bc88:	0a1b      	lsrs	r3, r3, #8
 800bc8a:	637b      	str	r3, [r7, #52]	; 0x34
	SignalAt0mm *= dmaxCalRange_mm;
 800bc8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bc8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bc90:	fb02 f303 	mul.w	r3, r2, r3
 800bc94:	637b      	str	r3, [r7, #52]	; 0x34

	minSignalNeeded_p1 = 0;
 800bc96:	2300      	movs	r3, #0
 800bc98:	667b      	str	r3, [r7, #100]	; 0x64
	if (totalCorrSignalRate_mcps > 0) {
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d01a      	beq.n	800bcd6 <VL53L0X_calc_dmax+0x96>

		/* Shift by 10 bits to increase resolution prior to the
		 * division */
		signalRateTemp_mcps = totalSignalRate_mcps << 10;
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	029b      	lsls	r3, r3, #10
 800bca4:	633b      	str	r3, [r7, #48]	; 0x30

		/* Add rounding value prior to division */
		minSignalNeeded_p1 = signalRateTemp_mcps +
			(totalCorrSignalRate_mcps/2);
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	085b      	lsrs	r3, r3, #1
		minSignalNeeded_p1 = signalRateTemp_mcps +
 800bcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bcac:	4413      	add	r3, r2
 800bcae:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint0626/FixPoint1616 = FixPoint2210 */
		minSignalNeeded_p1 /= totalCorrSignalRate_mcps;
 800bcb0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcb8:	667b      	str	r3, [r7, #100]	; 0x64

		/* Apply a factored version of the speed of light.
		 Correction to be applied at the end */
		minSignalNeeded_p1 *= 3;
 800bcba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bcbc:	4613      	mov	r3, r2
 800bcbe:	005b      	lsls	r3, r3, #1
 800bcc0:	4413      	add	r3, r2
 800bcc2:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint2210 * FixPoint2210 = FixPoint1220 */
		minSignalNeeded_p1 *= minSignalNeeded_p1;
 800bcc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcc6:	fb03 f303 	mul.w	r3, r3, r3
 800bcca:	667b      	str	r3, [r7, #100]	; 0x64

		/* FixPoint1220 >> 16 = FixPoint2804 */
		minSignalNeeded_p1 = (minSignalNeeded_p1 + 0x8000) >> 16;
 800bccc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bcce:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bcd2:	0c1b      	lsrs	r3, r3, #16
 800bcd4:	667b      	str	r3, [r7, #100]	; 0x64
	}

	minSignalNeeded_p2 = pwMult * sigmaEstimateP1;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bcda:	fb02 f303 	mul.w	r3, r2, r3
 800bcde:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* FixPoint1616 >> 16 =	 uint32 */
	minSignalNeeded_p2 = (minSignalNeeded_p2 + 0x8000) >> 16;
 800bce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce2:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bce6:	0c1b      	lsrs	r3, r3, #16
 800bce8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* uint32 * uint32	=  uint32 */
	minSignalNeeded_p2 *= minSignalNeeded_p2;
 800bcea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcec:	fb03 f303 	mul.w	r3, r3, r3
 800bcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
	/* Check sigmaEstimateP2
	 * If this value is too high there is not enough signal rate
	 * to calculate dmax value so set a suitable value to ensure
	 * a very small dmax.
	 */
	sigmaEstP2Tmp = (sigmaEstimateP2 + 0x8000) >> 16;
 800bcf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bcf4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bcf8:	0c1b      	lsrs	r3, r3, #16
 800bcfa:	62bb      	str	r3, [r7, #40]	; 0x28
	sigmaEstP2Tmp = (sigmaEstP2Tmp + cAmbEffWidthSigmaEst_ns/2)/
 800bcfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcfe:	085a      	lsrs	r2, r3, #1
 800bd00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd02:	441a      	add	r2, r3
 800bd04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd06:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd0a:	62bb      	str	r3, [r7, #40]	; 0x28
		cAmbEffWidthSigmaEst_ns;
	sigmaEstP2Tmp *= cAmbEffWidthDMax_ns;
 800bd0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd10:	fb02 f303 	mul.w	r3, r2, r3
 800bd14:	62bb      	str	r3, [r7, #40]	; 0x28

	if (sigmaEstP2Tmp > 0xffff) {
 800bd16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd1c:	d302      	bcc.n	800bd24 <VL53L0X_calc_dmax+0xe4>
		minSignalNeeded_p3 = 0xfff00000;
 800bd1e:	4b54      	ldr	r3, [pc, #336]	; (800be70 <VL53L0X_calc_dmax+0x230>)
 800bd20:	663b      	str	r3, [r7, #96]	; 0x60
 800bd22:	e015      	b.n	800bd50 <VL53L0X_calc_dmax+0x110>

		/* DMAX uses a different ambient width from sigma, so apply
		 * correction.
		 * Perform division before multiplication to prevent overflow.
		 */
		sigmaEstimateP2 = (sigmaEstimateP2 + cAmbEffWidthSigmaEst_ns/2)/
 800bd24:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd26:	085a      	lsrs	r2, r3, #1
 800bd28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd2a:	441a      	add	r2, r3
 800bd2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd2e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd32:	677b      	str	r3, [r7, #116]	; 0x74
			cAmbEffWidthSigmaEst_ns;
		sigmaEstimateP2 *= cAmbEffWidthDMax_ns;
 800bd34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd38:	fb02 f303 	mul.w	r3, r2, r3
 800bd3c:	677b      	str	r3, [r7, #116]	; 0x74

		/* FixPoint1616 >> 16 = uint32 */
		minSignalNeeded_p3 = (sigmaEstimateP2 + 0x8000) >> 16;
 800bd3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bd40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bd44:	0c1b      	lsrs	r3, r3, #16
 800bd46:	663b      	str	r3, [r7, #96]	; 0x60

		minSignalNeeded_p3 *= minSignalNeeded_p3;
 800bd48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd4a:	fb03 f303 	mul.w	r3, r3, r3
 800bd4e:	663b      	str	r3, [r7, #96]	; 0x60

	}

	/* FixPoint1814 / uint32 = FixPoint1814 */
	sigmaLimitTmp = ((cSigmaLimit << 14) + 500) / 1000;
 800bd50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bd52:	039b      	lsls	r3, r3, #14
 800bd54:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bd58:	4a46      	ldr	r2, [pc, #280]	; (800be74 <VL53L0X_calc_dmax+0x234>)
 800bd5a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd5e:	099b      	lsrs	r3, r3, #6
 800bd60:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1814 * FixPoint1814 = FixPoint3628 := FixPoint0428 */
	sigmaLimitTmp *= sigmaLimitTmp;
 800bd62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd64:	fb03 f303 	mul.w	r3, r3, r3
 800bd68:	627b      	str	r3, [r7, #36]	; 0x24

	/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
	sigmaEstSqTmp = cSigmaEstRef * cSigmaEstRef;
 800bd6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd6c:	fb03 f303 	mul.w	r3, r3, r3
 800bd70:	623b      	str	r3, [r7, #32]

	/* FixPoint3232 >> 4 = FixPoint0428 */
	sigmaEstSqTmp = (sigmaEstSqTmp + 0x08) >> 4;
 800bd72:	6a3b      	ldr	r3, [r7, #32]
 800bd74:	3308      	adds	r3, #8
 800bd76:	091b      	lsrs	r3, r3, #4
 800bd78:	623b      	str	r3, [r7, #32]

	/* FixPoint0428 - FixPoint0428	= FixPoint0428 */
	sigmaLimitTmp -=  sigmaEstSqTmp;
 800bd7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd7c:	6a3b      	ldr	r3, [r7, #32]
 800bd7e:	1ad3      	subs	r3, r2, r3
 800bd80:	627b      	str	r3, [r7, #36]	; 0x24

	/* uint32_t * FixPoint0428 = FixPoint0428 */
	minSignalNeeded_p4 = 4 * 12 * sigmaLimitTmp;
 800bd82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bd84:	4613      	mov	r3, r2
 800bd86:	005b      	lsls	r3, r3, #1
 800bd88:	4413      	add	r3, r2
 800bd8a:	011b      	lsls	r3, r3, #4
 800bd8c:	61fb      	str	r3, [r7, #28]

	/* FixPoint0428 >> 14 = FixPoint1814 */
	minSignalNeeded_p4 = (minSignalNeeded_p4 + 0x2000) >> 14;
 800bd8e:	69fb      	ldr	r3, [r7, #28]
 800bd90:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800bd94:	0b9b      	lsrs	r3, r3, #14
 800bd96:	61fb      	str	r3, [r7, #28]

	/* uint32 + uint32 = uint32 */
	minSignalNeeded = (minSignalNeeded_p2 + minSignalNeeded_p3);
 800bd98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bd9c:	4413      	add	r3, r2
 800bd9e:	61bb      	str	r3, [r7, #24]

	/* uint32 / uint32 = uint32 */
	minSignalNeeded += (peakVcselDuration_us/2);
 800bda0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bda2:	085b      	lsrs	r3, r3, #1
 800bda4:	69ba      	ldr	r2, [r7, #24]
 800bda6:	4413      	add	r3, r2
 800bda8:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= peakVcselDuration_us;
 800bdaa:	69ba      	ldr	r2, [r7, #24]
 800bdac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bdae:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdb2:	61bb      	str	r3, [r7, #24]

	/* uint32 << 14 = FixPoint1814 */
	minSignalNeeded <<= 14;
 800bdb4:	69bb      	ldr	r3, [r7, #24]
 800bdb6:	039b      	lsls	r3, r3, #14
 800bdb8:	61bb      	str	r3, [r7, #24]

	/* FixPoint1814 / FixPoint1814 = uint32 */
	minSignalNeeded += (minSignalNeeded_p4/2);
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	085b      	lsrs	r3, r3, #1
 800bdbe:	69ba      	ldr	r2, [r7, #24]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	61bb      	str	r3, [r7, #24]
	minSignalNeeded /= minSignalNeeded_p4;
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdcc:	61bb      	str	r3, [r7, #24]

	/* FixPoint3200 * FixPoint2804 := FixPoint2804*/
	minSignalNeeded *= minSignalNeeded_p1;
 800bdce:	69bb      	ldr	r3, [r7, #24]
 800bdd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800bdd2:	fb02 f303 	mul.w	r3, r2, r3
 800bdd6:	61bb      	str	r3, [r7, #24]
	 * and 10E-22 on the denominator.
	 * We do this because 32bit fix point calculation can't
	 * handle the larger and smaller elements of this equation,
	 * i.e. speed of light and pulse widths.
	 */
	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bdde:	4a25      	ldr	r2, [pc, #148]	; (800be74 <VL53L0X_calc_dmax+0x234>)
 800bde0:	fba2 2303 	umull	r2, r3, r2, r3
 800bde4:	099b      	lsrs	r3, r3, #6
 800bde6:	61bb      	str	r3, [r7, #24]
	minSignalNeeded <<= 4;
 800bde8:	69bb      	ldr	r3, [r7, #24]
 800bdea:	011b      	lsls	r3, r3, #4
 800bdec:	61bb      	str	r3, [r7, #24]

	minSignalNeeded = (minSignalNeeded + 500) / 1000;
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bdf4:	4a1f      	ldr	r2, [pc, #124]	; (800be74 <VL53L0X_calc_dmax+0x234>)
 800bdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfa:	099b      	lsrs	r3, r3, #6
 800bdfc:	61bb      	str	r3, [r7, #24]

	/* FixPoint1616 >> 8 = FixPoint2408 */
	signalLimitTmp = (cSignalLimit + 0x80) >> 8;
 800bdfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800be00:	3380      	adds	r3, #128	; 0x80
 800be02:	0a1b      	lsrs	r3, r3, #8
 800be04:	617b      	str	r3, [r7, #20]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (signalLimitTmp != 0)
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d008      	beq.n	800be1e <VL53L0X_calc_dmax+0x1de>
		dmaxDarkTmp = (SignalAt0mm + (signalLimitTmp / 2))
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	085a      	lsrs	r2, r3, #1
 800be10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be12:	441a      	add	r2, r3
 800be14:	697b      	ldr	r3, [r7, #20]
 800be16:	fbb2 f3f3 	udiv	r3, r2, r3
 800be1a:	65bb      	str	r3, [r7, #88]	; 0x58
 800be1c:	e001      	b.n	800be22 <VL53L0X_calc_dmax+0x1e2>
			/ signalLimitTmp;
	else
		dmaxDarkTmp = 0;
 800be1e:	2300      	movs	r3, #0
 800be20:	65bb      	str	r3, [r7, #88]	; 0x58

	dmaxDark = VL53L0X_isqrt(dmaxDarkTmp);
 800be22:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800be24:	f7fe f9b7 	bl	800a196 <VL53L0X_isqrt>
 800be28:	6138      	str	r0, [r7, #16]

	/* FixPoint2408/FixPoint2408 = uint32 */
	if (minSignalNeeded != 0)
 800be2a:	69bb      	ldr	r3, [r7, #24]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d008      	beq.n	800be42 <VL53L0X_calc_dmax+0x202>
		dmaxAmbient = (SignalAt0mm + minSignalNeeded/2)
 800be30:	69bb      	ldr	r3, [r7, #24]
 800be32:	085a      	lsrs	r2, r3, #1
 800be34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be36:	441a      	add	r2, r3
 800be38:	69bb      	ldr	r3, [r7, #24]
 800be3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be40:	e001      	b.n	800be46 <VL53L0X_calc_dmax+0x206>
			/ minSignalNeeded;
	else
		dmaxAmbient = 0;
 800be42:	2300      	movs	r3, #0
 800be44:	65fb      	str	r3, [r7, #92]	; 0x5c

	dmaxAmbient = VL53L0X_isqrt(dmaxAmbient);
 800be46:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800be48:	f7fe f9a5 	bl	800a196 <VL53L0X_isqrt>
 800be4c:	65f8      	str	r0, [r7, #92]	; 0x5c

	*pdmax_mm = dmaxDark;
 800be4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be50:	693a      	ldr	r2, [r7, #16]
 800be52:	601a      	str	r2, [r3, #0]
	if (dmaxDark > dmaxAmbient)
 800be54:	693a      	ldr	r2, [r7, #16]
 800be56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be58:	429a      	cmp	r2, r3
 800be5a:	d902      	bls.n	800be62 <VL53L0X_calc_dmax+0x222>
		*pdmax_mm = dmaxAmbient;
 800be5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800be5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800be60:	601a      	str	r2, [r3, #0]

	LOG_FUNCTION_END(Status);

	return Status;
 800be62:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
}
 800be66:	4618      	mov	r0, r3
 800be68:	3768      	adds	r7, #104	; 0x68
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	fff00000 	.word	0xfff00000
 800be74:	10624dd3 	.word	0x10624dd3

0800be78 <VL53L0X_calc_sigma_estimate>:

VL53L0X_Error VL53L0X_calc_sigma_estimate(VL53L0X_DEV Dev,
	VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
	FixPoint1616_t *pSigmaEstimate,
	uint32_t *pDmax_mm)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b0b2      	sub	sp, #200	; 0xc8
 800be7c:	af04      	add	r7, sp, #16
 800be7e:	60f8      	str	r0, [r7, #12]
 800be80:	60b9      	str	r1, [r7, #8]
 800be82:	607a      	str	r2, [r7, #4]
 800be84:	603b      	str	r3, [r7, #0]
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cPulseEffectiveWidth_centi_ns   = 800;
 800be86:	f44f 7348 	mov.w	r3, #800	; 0x320
 800be8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	/* Expressed in 100ths of a ns, i.e. centi-ns */
	const uint32_t cAmbientEffectiveWidth_centi_ns = 600;
 800be8e:	f44f 7316 	mov.w	r3, #600	; 0x258
 800be92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	const FixPoint1616_t cSigmaEstRef	= 0x00000042; /* 0.001 */
 800be96:	2342      	movs	r3, #66	; 0x42
 800be98:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	const uint32_t cVcselPulseWidth_ps	= 4700; /* pico secs */
 800be9c:	f241 235c 	movw	r3, #4700	; 0x125c
 800bea0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	const FixPoint1616_t cSigmaEstMax	= 0x028F87AE;
 800bea4:	4b6b      	ldr	r3, [pc, #428]	; (800c054 <VL53L0X_calc_sigma_estimate+0x1dc>)
 800bea6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	const FixPoint1616_t cSigmaEstRtnMax	= 0xF000;
 800beaa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800beae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	const FixPoint1616_t cAmbToSignalRatioMax = 0xF0000000/
 800beb2:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 800beb6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800beba:	fbb2 f3f3 	udiv	r3, r2, r3
 800bebe:	67fb      	str	r3, [r7, #124]	; 0x7c
		cAmbientEffectiveWidth_centi_ns;
	/* Time Of Flight per mm (6.6 pico secs) */
	const FixPoint1616_t cTOF_per_mm_ps		= 0x0006999A;
 800bec0:	4b65      	ldr	r3, [pc, #404]	; (800c058 <VL53L0X_calc_sigma_estimate+0x1e0>)
 800bec2:	67bb      	str	r3, [r7, #120]	; 0x78
	const uint32_t c16BitRoundingParam		= 0x00008000;
 800bec4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bec8:	677b      	str	r3, [r7, #116]	; 0x74
	const FixPoint1616_t cMaxXTalk_kcps		= 0x00320000;
 800beca:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 800bece:	673b      	str	r3, [r7, #112]	; 0x70
	const uint32_t cPllPeriod_ps			= 1655;
 800bed0:	f240 6377 	movw	r3, #1655	; 0x677
 800bed4:	66fb      	str	r3, [r7, #108]	; 0x6c
	FixPoint1616_t xTalkCorrection;
	FixPoint1616_t ambientRate_kcps;
	FixPoint1616_t peakSignalRate_kcps;
	FixPoint1616_t xTalkCompRate_mcps;
	uint32_t xTalkCompRate_kcps;
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800bed6:	2300      	movs	r3, #0
 800bed8:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
	 *	- SigmaEstEffAmbWidth
	 */

	LOG_FUNCTION_START("");

	VL53L0X_GETPARAMETERFIELD(Dev, XTalkCompensationRateMegaCps,
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	6a1b      	ldr	r3, [r3, #32]
 800bee0:	617b      	str	r3, [r7, #20]
	 * We work in kcps rather than mcps as this helps keep within the
	 * confines of the 32 Fix1616 type.
	 */

	ambientRate_kcps =
		(pRangingMeasurementData->AmbientRateRtnMegaCps * 1000) >> 16;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800beea:	fb02 f303 	mul.w	r3, r2, r3
	ambientRate_kcps =
 800beee:	0c1b      	lsrs	r3, r3, #16
 800bef0:	66bb      	str	r3, [r7, #104]	; 0x68

	correctedSignalRate_mcps =
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	667b      	str	r3, [r7, #100]	; 0x64
		pRangingMeasurementData->SignalRateRtnMegaCps;


	Status = VL53L0X_get_total_signal_rate(
 800bef8:	f107 0310 	add.w	r3, r7, #16
 800befc:	461a      	mov	r2, r3
 800befe:	68b9      	ldr	r1, [r7, #8]
 800bf00:	68f8      	ldr	r0, [r7, #12]
 800bf02:	f7ff fe78 	bl	800bbf6 <VL53L0X_get_total_signal_rate>
 800bf06:	4603      	mov	r3, r0
 800bf08:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
		Dev, pRangingMeasurementData, &totalSignalRate_mcps);
	Status = VL53L0X_get_total_xtalk_rate(
 800bf0c:	f107 0314 	add.w	r3, r7, #20
 800bf10:	461a      	mov	r2, r3
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	68f8      	ldr	r0, [r7, #12]
 800bf16:	f7ff fe3f 	bl	800bb98 <VL53L0X_get_total_xtalk_rate>
 800bf1a:	4603      	mov	r3, r0
 800bf1c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3


	/* Signal rate measurement provided by device is the
	 * peak signal rate, not average.
	 */
	peakSignalRate_kcps = (totalSignalRate_mcps * 1000);
 800bf20:	693b      	ldr	r3, [r7, #16]
 800bf22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf26:	fb02 f303 	mul.w	r3, r2, r3
 800bf2a:	663b      	str	r3, [r7, #96]	; 0x60
	peakSignalRate_kcps = (peakSignalRate_kcps + 0x8000) >> 16;
 800bf2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf2e:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800bf32:	0c1b      	lsrs	r3, r3, #16
 800bf34:	663b      	str	r3, [r7, #96]	; 0x60

	xTalkCompRate_kcps = xTalkCompRate_mcps * 1000;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bf3c:	fb02 f303 	mul.w	r3, r2, r3
 800bf40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (xTalkCompRate_kcps > cMaxXTalk_kcps)
 800bf44:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800bf48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf4a:	429a      	cmp	r2, r3
 800bf4c:	d902      	bls.n	800bf54 <VL53L0X_calc_sigma_estimate+0xdc>
		xTalkCompRate_kcps = cMaxXTalk_kcps;
 800bf4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	if (Status == VL53L0X_ERROR_NONE) {
 800bf54:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d164      	bne.n	800c026 <VL53L0X_calc_sigma_estimate+0x1ae>

		/* Calculate final range macro periods */
		finalRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800bf62:	65fb      	str	r3, [r7, #92]	; 0x5c
			Dev, FinalRangeTimeoutMicroSecs);

		finalRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	f893 30e0 	ldrb.w	r3, [r3, #224]	; 0xe0
 800bf6a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
			Dev, FinalRangeVcselPulsePeriod);

		finalRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800bf6e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bf72:	461a      	mov	r2, r3
 800bf74:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f7fe feb0 	bl	800acdc <VL53L0X_calc_timeout_mclks>
 800bf7c:	6578      	str	r0, [r7, #84]	; 0x54
			Dev, finalRangeTimeoutMicroSecs, finalRangeVcselPCLKS);

		/* Calculate pre-range macro periods */
		preRangeTimeoutMicroSecs = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800bf84:	653b      	str	r3, [r7, #80]	; 0x50
			Dev, PreRangeTimeoutMicroSecs);

		preRangeVcselPCLKS = VL53L0X_GETDEVICESPECIFICPARAMETER(
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f893 30e8 	ldrb.w	r3, [r3, #232]	; 0xe8
 800bf8c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			Dev, PreRangeVcselPulsePeriod);

		preRangeMacroPCLKS = VL53L0X_calc_timeout_mclks(
 800bf90:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800bf94:	461a      	mov	r2, r3
 800bf96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bf98:	68f8      	ldr	r0, [r7, #12]
 800bf9a:	f7fe fe9f 	bl	800acdc <VL53L0X_calc_timeout_mclks>
 800bf9e:	64b8      	str	r0, [r7, #72]	; 0x48
			Dev, preRangeTimeoutMicroSecs, preRangeVcselPCLKS);

		vcselWidth = 3;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
		if (finalRangeVcselPCLKS == 8)
 800bfa6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800bfaa:	2b08      	cmp	r3, #8
 800bfac:	d102      	bne.n	800bfb4 <VL53L0X_calc_sigma_estimate+0x13c>
			vcselWidth = 2;
 800bfae:	2302      	movs	r3, #2
 800bfb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c


		peakVcselDuration_us = vcselWidth * 2048 *
			(preRangeMacroPCLKS + finalRangeMacroPCLKS);
 800bfb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bfb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfb8:	4413      	add	r3, r2
		peakVcselDuration_us = vcselWidth * 2048 *
 800bfba:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800bfbe:	fb02 f303 	mul.w	r3, r2, r3
 800bfc2:	02db      	lsls	r3, r3, #11
 800bfc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800bfc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfcc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bfd0:	4a22      	ldr	r2, [pc, #136]	; (800c05c <VL53L0X_calc_sigma_estimate+0x1e4>)
 800bfd2:	fba2 2303 	umull	r2, r3, r2, r3
 800bfd6:	099b      	lsrs	r3, r3, #6
 800bfd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us *= cPllPeriod_ps;
 800bfdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfe0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bfe2:	fb02 f303 	mul.w	r3, r2, r3
 800bfe6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
		peakVcselDuration_us = (peakVcselDuration_us + 500)/1000;
 800bfea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bfee:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800bff2:	4a1a      	ldr	r2, [pc, #104]	; (800c05c <VL53L0X_calc_sigma_estimate+0x1e4>)
 800bff4:	fba2 2303 	umull	r2, r3, r2, r3
 800bff8:	099b      	lsrs	r3, r3, #6
 800bffa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

		/* Fix1616 >> 8 = Fix2408 */
		totalSignalRate_mcps = (totalSignalRate_mcps + 0x80) >> 8;
 800bffe:	693b      	ldr	r3, [r7, #16]
 800c000:	3380      	adds	r3, #128	; 0x80
 800c002:	0a1b      	lsrs	r3, r3, #8
 800c004:	613b      	str	r3, [r7, #16]

		/* Fix2408 * uint32 = Fix2408 */
		vcselTotalEventsRtn = totalSignalRate_mcps *
 800c006:	693a      	ldr	r2, [r7, #16]
 800c008:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c00c:	fb02 f303 	mul.w	r3, r2, r3
 800c010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			peakVcselDuration_us;

		/* Fix2408 >> 8 = uint32 */
		vcselTotalEventsRtn = (vcselTotalEventsRtn + 0x80) >> 8;
 800c014:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c018:	3380      	adds	r3, #128	; 0x80
 800c01a:	0a1b      	lsrs	r3, r3, #8
 800c01c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

		/* Fix2408 << 8 = Fix1616 = */
		totalSignalRate_mcps <<= 8;
 800c020:	693b      	ldr	r3, [r7, #16]
 800c022:	021b      	lsls	r3, r3, #8
 800c024:	613b      	str	r3, [r7, #16]
	}

	if (Status != VL53L0X_ERROR_NONE) {
 800c026:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d002      	beq.n	800c034 <VL53L0X_calc_sigma_estimate+0x1bc>
		LOG_FUNCTION_END(Status);
		return Status;
 800c02e:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
 800c032:	e127      	b.n	800c284 <VL53L0X_calc_sigma_estimate+0x40c>
	}

	if (peakSignalRate_kcps == 0) {
 800c034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c036:	2b00      	cmp	r3, #0
 800c038:	d112      	bne.n	800c060 <VL53L0X_calc_sigma_estimate+0x1e8>
		*pSigmaEstimate = cSigmaEstMax;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c040:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, cSigmaEstMax);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c048:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		*pDmax_mm = 0;
 800c04c:	683b      	ldr	r3, [r7, #0]
 800c04e:	2200      	movs	r2, #0
 800c050:	601a      	str	r2, [r3, #0]
 800c052:	e115      	b.n	800c280 <VL53L0X_calc_sigma_estimate+0x408>
 800c054:	028f87ae 	.word	0x028f87ae
 800c058:	0006999a 	.word	0x0006999a
 800c05c:	10624dd3 	.word	0x10624dd3
	} else {
		if (vcselTotalEventsRtn < 1)
 800c060:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c064:	2b00      	cmp	r3, #0
 800c066:	d102      	bne.n	800c06e <VL53L0X_calc_sigma_estimate+0x1f6>
			vcselTotalEventsRtn = 1;
 800c068:	2301      	movs	r3, #1
 800c06a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		 * deltaT_ps represents the time of flight in pico secs for the
		 * current range measurement, using the "TOF per mm" constant
		 * (in ps).
		 */

		sigmaEstimateP1 = cPulseEffectiveWidth_centi_ns;
 800c06e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800c072:	647b      	str	r3, [r7, #68]	; 0x44

		/* ((FixPoint1616 << 16)* uint32)/uint32 = FixPoint1616 */
		sigmaEstimateP2 = (ambientRate_kcps << 16)/peakSignalRate_kcps;
 800c074:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c076:	041a      	lsls	r2, r3, #16
 800c078:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c07a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c07e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		if (sigmaEstimateP2 > cAmbToSignalRatioMax) {
 800c082:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c086:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c088:	429a      	cmp	r2, r3
 800c08a:	d902      	bls.n	800c092 <VL53L0X_calc_sigma_estimate+0x21a>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstimateP2 = cAmbToSignalRatioMax;
 800c08c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800c08e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		}
		sigmaEstimateP2 *= cAmbientEffectiveWidth_centi_ns;
 800c092:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c096:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800c09a:	fb02 f303 	mul.w	r3, r2, r3
 800c09e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

		sigmaEstimateP3 = 2 * VL53L0X_isqrt(vcselTotalEventsRtn * 12);
 800c0a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0a6:	4613      	mov	r3, r2
 800c0a8:	005b      	lsls	r3, r3, #1
 800c0aa:	4413      	add	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f7fe f871 	bl	800a196 <VL53L0X_isqrt>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	005b      	lsls	r3, r3, #1
 800c0b8:	643b      	str	r3, [r7, #64]	; 0x40

		/* uint32 * FixPoint1616 = FixPoint1616 */
		deltaT_ps = pRangingMeasurementData->RangeMilliMeter *
 800c0ba:	68bb      	ldr	r3, [r7, #8]
 800c0bc:	891b      	ldrh	r3, [r3, #8]
 800c0be:	461a      	mov	r2, r3
 800c0c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c2:	fb02 f303 	mul.w	r3, r2, r3
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		 * (uint32 << 16) - FixPoint1616 = FixPoint1616.
		 * Divide result by 1000 to convert to mcps.
		 * 500 is added to ensure rounding when integer division
		 * truncates.
		 */
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c0c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0ca:	041a      	lsls	r2, r3, #16
 800c0cc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0d0:	1ad3      	subs	r3, r2, r3
			xTalkCompRate_kcps) + 500)/1000;
 800c0d2:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff1_mcps = (((peakSignalRate_kcps << 16) -
 800c0d6:	4a6d      	ldr	r2, [pc, #436]	; (800c28c <VL53L0X_calc_sigma_estimate+0x414>)
 800c0d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c0dc:	099b      	lsrs	r3, r3, #6
 800c0de:	63bb      	str	r3, [r7, #56]	; 0x38

		/* vcselRate + xtalkCompRate */
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800c0e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c0e2:	041a      	lsls	r2, r3, #16
 800c0e4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c0e8:	4413      	add	r3, r2
			xTalkCompRate_kcps) + 500)/1000;
 800c0ea:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
		diff2_mcps = (((peakSignalRate_kcps << 16) +
 800c0ee:	4a67      	ldr	r2, [pc, #412]	; (800c28c <VL53L0X_calc_sigma_estimate+0x414>)
 800c0f0:	fba2 2303 	umull	r2, r3, r2, r3
 800c0f4:	099b      	lsrs	r3, r3, #6
 800c0f6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Shift by 8 bits to increase resolution prior to the
		 * division */
		diff1_mcps <<= 8;
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	021b      	lsls	r3, r3, #8
 800c0fc:	63bb      	str	r3, [r7, #56]	; 0x38

		/* FixPoint0824/FixPoint1616 = FixPoint2408 */
		xTalkCorrection	 = abs(diff1_mcps/diff2_mcps);
 800c0fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c100:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c102:	fbb2 f3f3 	udiv	r3, r2, r3
 800c106:	2b00      	cmp	r3, #0
 800c108:	bfb8      	it	lt
 800c10a:	425b      	neglt	r3, r3
 800c10c:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint2408 << 8 = FixPoint1616 */
		xTalkCorrection <<= 8;
 800c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c110:	021b      	lsls	r3, r3, #8
 800c112:	633b      	str	r3, [r7, #48]	; 0x30

		/* FixPoint1616/uint32 = FixPoint1616 */
		pwMult = deltaT_ps/cVcselPulseWidth_ps; /* smaller than 1.0f */
 800c114:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c116:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c11a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c11e:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * FixPoint1616 * FixPoint1616 = FixPoint3232, however both
		 * values are small enough such that32 bits will not be
		 * exceeded.
		 */
		pwMult *= ((1 << 16) - xTalkCorrection);
 800c120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c122:	f5c3 3280 	rsb	r2, r3, #65536	; 0x10000
 800c126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c128:	fb02 f303 	mul.w	r3, r2, r3
 800c12c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3232 >> 16) = FixPoint1616 */
		pwMult =  (pwMult + c16BitRoundingParam) >> 16;
 800c12e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c132:	4413      	add	r3, r2
 800c134:	0c1b      	lsrs	r3, r3, #16
 800c136:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 + FixPoint1616 = FixPoint1616 */
		pwMult += (1 << 16);
 800c138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800c13e:	62fb      	str	r3, [r7, #44]	; 0x2c
		/*
		 * At this point the value will be 1.xx, therefore if we square
		 * the value this will exceed 32 bits. To address this perform
		 * a single shift to the right before the multiplication.
		 */
		pwMult >>= 1;
 800c140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c142:	085b      	lsrs	r3, r3, #1
 800c144:	62fb      	str	r3, [r7, #44]	; 0x2c
		/* FixPoint1715 * FixPoint1715 = FixPoint3430 */
		pwMult = pwMult * pwMult;
 800c146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c148:	fb03 f303 	mul.w	r3, r3, r3
 800c14c:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* (FixPoint3430 >> 14) = Fix1616 */
		pwMult >>= 14;
 800c14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c150:	0b9b      	lsrs	r3, r3, #14
 800c152:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* FixPoint1616 * uint32 = FixPoint1616 */
		sqr1 = pwMult * sigmaEstimateP1;
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c158:	fb02 f303 	mul.w	r3, r2, r3
 800c15c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr1 = (sqr1 + 0x8000) >> 16;
 800c15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c160:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c164:	0c1b      	lsrs	r3, r3, #16
 800c166:	62bb      	str	r3, [r7, #40]	; 0x28

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr1 *= sqr1;
 800c168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c16a:	fb03 f303 	mul.w	r3, r3, r3
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28

		sqr2 = sigmaEstimateP2;
 800c170:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c174:	627b      	str	r3, [r7, #36]	; 0x24

		/* (FixPoint1616 >> 16) = FixPoint3200 */
		sqr2 = (sqr2 + 0x8000) >> 16;
 800c176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c178:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800c17c:	0c1b      	lsrs	r3, r3, #16
 800c17e:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint3200 * FixPoint3200 = FixPoint6400 */
		sqr2 *= sqr2;
 800c180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c182:	fb03 f303 	mul.w	r3, r3, r3
 800c186:	627b      	str	r3, [r7, #36]	; 0x24

		/* FixPoint64000 + FixPoint6400 = FixPoint6400 */
		sqrSum = sqr1 + sqr2;
 800c188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18c:	4413      	add	r3, r2
 800c18e:	623b      	str	r3, [r7, #32]

		/* SQRT(FixPoin6400) = FixPoint3200 */
		sqrtResult_centi_ns = VL53L0X_isqrt(sqrSum);
 800c190:	6a38      	ldr	r0, [r7, #32]
 800c192:	f7fe f800 	bl	800a196 <VL53L0X_isqrt>
 800c196:	61f8      	str	r0, [r7, #28]

		/* (FixPoint3200 << 16) = FixPoint1616 */
		sqrtResult_centi_ns <<= 16;
 800c198:	69fb      	ldr	r3, [r7, #28]
 800c19a:	041b      	lsls	r3, r3, #16
 800c19c:	61fb      	str	r3, [r7, #28]
		/*
		 * Note that the Speed Of Light is expressed in um per 1E-10
		 * seconds (2997) Therefore to get mm/ns we have to divide by
		 * 10000
		 */
		sigmaEstRtn = (((sqrtResult_centi_ns+50)/100) /
 800c19e:	69fb      	ldr	r3, [r7, #28]
 800c1a0:	3332      	adds	r3, #50	; 0x32
 800c1a2:	4a3b      	ldr	r2, [pc, #236]	; (800c290 <VL53L0X_calc_sigma_estimate+0x418>)
 800c1a4:	fba2 2303 	umull	r2, r3, r2, r3
 800c1a8:	095a      	lsrs	r2, r3, #5
 800c1aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
				sigmaEstimateP3);
		sigmaEstRtn		 *= VL53L0X_SPEED_OF_LIGHT_IN_AIR;
 800c1b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1b8:	f640 32b5 	movw	r2, #2997	; 0xbb5
 800c1bc:	fb02 f303 	mul.w	r3, r2, r3
 800c1c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		/* Add 5000 before dividing by 10000 to ensure rounding. */
		sigmaEstRtn		 += 5000;
 800c1c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1c8:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		sigmaEstRtn		 /= 10000;
 800c1d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1d6:	4a2f      	ldr	r2, [pc, #188]	; (800c294 <VL53L0X_calc_sigma_estimate+0x41c>)
 800c1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c1dc:	0b5b      	lsrs	r3, r3, #13
 800c1de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

		if (sigmaEstRtn > cSigmaEstRtnMax) {
 800c1e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c1e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1ea:	429a      	cmp	r2, r3
 800c1ec:	d903      	bls.n	800c1f6 <VL53L0X_calc_sigma_estimate+0x37e>
			/* Clip to prevent overflow. Will ensure safe
			 * max result. */
			sigmaEstRtn = cSigmaEstRtnMax;
 800c1ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c1f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		}

		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr1 = sigmaEstRtn * sigmaEstRtn;
 800c1f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c1fa:	fb03 f303 	mul.w	r3, r3, r3
 800c1fe:	62bb      	str	r3, [r7, #40]	; 0x28
		/* FixPoint1616 * FixPoint1616 = FixPoint3232 */
		sqr2 = cSigmaEstRef * cSigmaEstRef;
 800c200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c204:	fb03 f303 	mul.w	r3, r3, r3
 800c208:	627b      	str	r3, [r7, #36]	; 0x24

		/* sqrt(FixPoint3232) = FixPoint1616 */
		sqrtResult = VL53L0X_isqrt((sqr1 + sqr2));
 800c20a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c20e:	4413      	add	r3, r2
 800c210:	4618      	mov	r0, r3
 800c212:	f7fd ffc0 	bl	800a196 <VL53L0X_isqrt>
 800c216:	61b8      	str	r0, [r7, #24]
		 * Note that the Shift by 4 bits increases resolution prior to
		 * the sqrt, therefore the result must be shifted by 2 bits to
		 * the right to revert back to the FixPoint1616 format.
		 */

		sigmaEstimate	 = 1000 * sqrtResult;
 800c218:	69bb      	ldr	r3, [r7, #24]
 800c21a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

		if ((peakSignalRate_kcps < 1) || (vcselTotalEventsRtn < 1) ||
 800c226:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d009      	beq.n	800c240 <VL53L0X_calc_sigma_estimate+0x3c8>
 800c22c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800c230:	2b00      	cmp	r3, #0
 800c232:	d005      	beq.n	800c240 <VL53L0X_calc_sigma_estimate+0x3c8>
 800c234:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c238:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d903      	bls.n	800c248 <VL53L0X_calc_sigma_estimate+0x3d0>
				(sigmaEstimate > cSigmaEstMax)) {
				sigmaEstimate = cSigmaEstMax;
 800c240:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c244:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		}

		*pSigmaEstimate = (uint32_t)(sigmaEstimate);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c24e:	601a      	str	r2, [r3, #0]
		PALDevDataSet(Dev, SigmaEstimate, *pSigmaEstimate);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681a      	ldr	r2, [r3, #0]
 800c254:	68fb      	ldr	r3, [r7, #12]
 800c256:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
		Status = VL53L0X_calc_dmax(
 800c25a:	6939      	ldr	r1, [r7, #16]
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	9303      	str	r3, [sp, #12]
 800c260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c264:	9302      	str	r3, [sp, #8]
 800c266:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800c26a:	9301      	str	r3, [sp, #4]
 800c26c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c26e:	9300      	str	r3, [sp, #0]
 800c270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c272:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	f7ff fce3 	bl	800bc40 <VL53L0X_calc_dmax>
 800c27a:	4603      	mov	r3, r0
 800c27c:	f887 30a3 	strb.w	r3, [r7, #163]	; 0xa3
			peakVcselDuration_us,
			pDmax_mm);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c280:	f997 30a3 	ldrsb.w	r3, [r7, #163]	; 0xa3
}
 800c284:	4618      	mov	r0, r3
 800c286:	37b8      	adds	r7, #184	; 0xb8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}
 800c28c:	10624dd3 	.word	0x10624dd3
 800c290:	51eb851f 	.word	0x51eb851f
 800c294:	d1b71759 	.word	0xd1b71759

0800c298 <VL53L0X_get_pal_range_status>:
		uint8_t DeviceRangeStatus,
		FixPoint1616_t SignalRate,
		uint16_t EffectiveSpadRtnCount,
		VL53L0X_RangingMeasurementData_t *pRangingMeasurementData,
		uint8_t *pPalRangeStatus)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b090      	sub	sp, #64	; 0x40
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	60f8      	str	r0, [r7, #12]
 800c2a0:	607a      	str	r2, [r7, #4]
 800c2a2:	461a      	mov	r2, r3
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	72fb      	strb	r3, [r7, #11]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	813b      	strh	r3, [r7, #8]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t NoneFlag;
	uint8_t SigmaLimitflag = 0;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	uint8_t SignalRefClipflag = 0;
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	uint8_t RangeIgnoreThresholdflag = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	uint8_t SigmaLimitCheckEnable = 0;
 800c2c4:	2300      	movs	r3, #0
 800c2c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t SignalRateFinalRangeLimitCheckEnable = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint8_t SignalRefClipLimitCheckEnable = 0;
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	uint8_t RangeIgnoreThresholdLimitCheckEnable = 0;
 800c2d6:	2300      	movs	r3, #0
 800c2d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	FixPoint1616_t SigmaEstimate;
	FixPoint1616_t SigmaLimitValue;
	FixPoint1616_t SignalRefClipValue;
	FixPoint1616_t RangeIgnoreThresholdValue;
	FixPoint1616_t SignalRatePerSpad;
	uint8_t DeviceRangeStatusInternal = 0;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint16_t tmpWord = 0;
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp8;
	uint32_t Dmax_mm = 0;
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	613b      	str	r3, [r7, #16]
	 * the value 11 in the DeviceRangeStatus.
	 * In addition, the SigmaEstimator is not included in the VL53L0X
	 * DeviceRangeStatus, this will be added in the PalRangeStatus.
	 */

	DeviceRangeStatusInternal = ((DeviceRangeStatus & 0x78) >> 3);
 800c2ea:	7afb      	ldrb	r3, [r7, #11]
 800c2ec:	10db      	asrs	r3, r3, #3
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	f003 030f 	and.w	r3, r3, #15
 800c2f4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	if (DeviceRangeStatusInternal == 0 ||
 800c2f8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d017      	beq.n	800c330 <VL53L0X_get_pal_range_status+0x98>
 800c300:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c304:	2b05      	cmp	r3, #5
 800c306:	d013      	beq.n	800c330 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 5 ||
 800c308:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c30c:	2b07      	cmp	r3, #7
 800c30e:	d00f      	beq.n	800c330 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 7 ||
 800c310:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c314:	2b0c      	cmp	r3, #12
 800c316:	d00b      	beq.n	800c330 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 12 ||
 800c318:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c31c:	2b0d      	cmp	r3, #13
 800c31e:	d007      	beq.n	800c330 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 13 ||
 800c320:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c324:	2b0e      	cmp	r3, #14
 800c326:	d003      	beq.n	800c330 <VL53L0X_get_pal_range_status+0x98>
		DeviceRangeStatusInternal == 14 ||
 800c328:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c32c:	2b0f      	cmp	r3, #15
 800c32e:	d103      	bne.n	800c338 <VL53L0X_get_pal_range_status+0xa0>
		DeviceRangeStatusInternal == 15
			) {
		NoneFlag = 1;
 800c330:	2301      	movs	r3, #1
 800c332:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 800c336:	e002      	b.n	800c33e <VL53L0X_get_pal_range_status+0xa6>
	} else {
		NoneFlag = 0;
 800c338:	2300      	movs	r3, #0
 800c33a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	}

	/* LastSignalRefMcps */
	if (Status == VL53L0X_ERROR_NONE)
 800c33e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c342:	2b00      	cmp	r3, #0
 800c344:	d107      	bne.n	800c356 <VL53L0X_get_pal_range_status+0xbe>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x01);
 800c346:	2201      	movs	r2, #1
 800c348:	21ff      	movs	r1, #255	; 0xff
 800c34a:	68f8      	ldr	r0, [r7, #12]
 800c34c:	f000 fb74 	bl	800ca38 <VL53L0X_WrByte>
 800c350:	4603      	mov	r3, r0
 800c352:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if (Status == VL53L0X_ERROR_NONE)
 800c356:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d109      	bne.n	800c372 <VL53L0X_get_pal_range_status+0xda>
		Status = VL53L0X_RdWord(Dev,
 800c35e:	f107 0316 	add.w	r3, r7, #22
 800c362:	461a      	mov	r2, r3
 800c364:	21b6      	movs	r1, #182	; 0xb6
 800c366:	68f8      	ldr	r0, [r7, #12]
 800c368:	f000 faf2 	bl	800c950 <VL53L0X_RdWord>
 800c36c:	4603      	mov	r3, r0
 800c36e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_REG_RESULT_PEAK_SIGNAL_RATE_REF,
			&tmpWord);

	LastSignalRefMcps = VL53L0X_FIXPOINT97TOFIXPOINT1616(tmpWord);
 800c372:	8afb      	ldrh	r3, [r7, #22]
 800c374:	025b      	lsls	r3, r3, #9
 800c376:	62fb      	str	r3, [r7, #44]	; 0x2c

	if (Status == VL53L0X_ERROR_NONE)
 800c378:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d107      	bne.n	800c390 <VL53L0X_get_pal_range_status+0xf8>
		Status = VL53L0X_WrByte(Dev, 0xFF, 0x00);
 800c380:	2200      	movs	r2, #0
 800c382:	21ff      	movs	r1, #255	; 0xff
 800c384:	68f8      	ldr	r0, [r7, #12]
 800c386:	f000 fb57 	bl	800ca38 <VL53L0X_WrByte>
 800c38a:	4603      	mov	r3, r0
 800c38c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	PALDevDataSet(Dev, LastSignalRefMcps, LastSignalRefMcps);
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c394:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	/*
	 * Check if Sigma limit is enabled, if yes then do comparison with limit
	 * value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c398:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d109      	bne.n	800c3b4 <VL53L0X_get_pal_range_status+0x11c>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c3a0:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 800c3a4:	461a      	mov	r2, r3
 800c3a6:	2100      	movs	r1, #0
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7fc fa2f 	bl	800880c <VL53L0X_GetLimitCheckEnable>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
			&SigmaLimitCheckEnable);

	if ((SigmaLimitCheckEnable != 0) && (Status == VL53L0X_ERROR_NONE)) {
 800c3b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d02e      	beq.n	800c41a <VL53L0X_get_pal_range_status+0x182>
 800c3bc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d12a      	bne.n	800c41a <VL53L0X_get_pal_range_status+0x182>
		/*
		* compute the Sigma and check with limit
		*/
		Status = VL53L0X_calc_sigma_estimate(
 800c3c4:	f107 0310 	add.w	r3, r7, #16
 800c3c8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800c3cc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c3ce:	68f8      	ldr	r0, [r7, #12]
 800c3d0:	f7ff fd52 	bl	800be78 <VL53L0X_calc_sigma_estimate>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			Dev,
			pRangingMeasurementData,
			&SigmaEstimate,
			&Dmax_mm);
		if (Status == VL53L0X_ERROR_NONE)
 800c3da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d103      	bne.n	800c3ea <VL53L0X_get_pal_range_status+0x152>
			pRangingMeasurementData->RangeDMaxMilliMeter = Dmax_mm;
 800c3e2:	693b      	ldr	r3, [r7, #16]
 800c3e4:	b29a      	uxth	r2, r3
 800c3e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c3e8:	815a      	strh	r2, [r3, #10]

		if (Status == VL53L0X_ERROR_NONE) {
 800c3ea:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d113      	bne.n	800c41a <VL53L0X_get_pal_range_status+0x182>
			Status = VL53L0X_GetLimitCheckValue(Dev,
 800c3f2:	f107 0320 	add.w	r3, r7, #32
 800c3f6:	461a      	mov	r2, r3
 800c3f8:	2100      	movs	r1, #0
 800c3fa:	68f8      	ldr	r0, [r7, #12]
 800c3fc:	f7fc fa8c 	bl	8008918 <VL53L0X_GetLimitCheckValue>
 800c400:	4603      	mov	r3, r0
 800c402:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE,
				&SigmaLimitValue);

			if ((SigmaLimitValue > 0) &&
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d006      	beq.n	800c41a <VL53L0X_get_pal_range_status+0x182>
				(SigmaEstimate > SigmaLimitValue))
 800c40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c40e:	6a3b      	ldr	r3, [r7, #32]
			if ((SigmaLimitValue > 0) &&
 800c410:	429a      	cmp	r2, r3
 800c412:	d902      	bls.n	800c41a <VL53L0X_get_pal_range_status+0x182>
					/* Limit Fail */
					SigmaLimitflag = 1;
 800c414:	2301      	movs	r3, #1
 800c416:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

	/*
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c41a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d109      	bne.n	800c436 <VL53L0X_get_pal_range_status+0x19e>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c422:	f107 0329 	add.w	r3, r7, #41	; 0x29
 800c426:	461a      	mov	r2, r3
 800c428:	2102      	movs	r1, #2
 800c42a:	68f8      	ldr	r0, [r7, #12]
 800c42c:	f7fc f9ee 	bl	800880c <VL53L0X_GetLimitCheckEnable>
 800c430:	4603      	mov	r3, r0
 800c432:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipLimitCheckEnable);

	if ((SignalRefClipLimitCheckEnable != 0) &&
 800c436:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d017      	beq.n	800c46e <VL53L0X_get_pal_range_status+0x1d6>
 800c43e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c442:	2b00      	cmp	r3, #0
 800c444:	d113      	bne.n	800c46e <VL53L0X_get_pal_range_status+0x1d6>
			(Status == VL53L0X_ERROR_NONE)) {

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c446:	f107 031c 	add.w	r3, r7, #28
 800c44a:	461a      	mov	r2, r3
 800c44c:	2102      	movs	r1, #2
 800c44e:	68f8      	ldr	r0, [r7, #12]
 800c450:	f7fc fa62 	bl	8008918 <VL53L0X_GetLimitCheckValue>
 800c454:	4603      	mov	r3, r0
 800c456:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP,
				&SignalRefClipValue);

		if ((SignalRefClipValue > 0) &&
 800c45a:	69fb      	ldr	r3, [r7, #28]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	d006      	beq.n	800c46e <VL53L0X_get_pal_range_status+0x1d6>
				(LastSignalRefMcps > SignalRefClipValue)) {
 800c460:	69fb      	ldr	r3, [r7, #28]
		if ((SignalRefClipValue > 0) &&
 800c462:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c464:	429a      	cmp	r2, r3
 800c466:	d902      	bls.n	800c46e <VL53L0X_get_pal_range_status+0x1d6>
			/* Limit Fail */
			SignalRefClipflag = 1;
 800c468:	2301      	movs	r3, #1
 800c46a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	 * Check if Signal ref clip limit is enabled, if yes then do comparison
	 * with limit value and put the result back into pPalRangeStatus.
	 * EffectiveSpadRtnCount has a format 8.8
	 * If (Return signal rate < (1.5 x Xtalk x number of Spads)) : FAIL
	 */
	if (Status == VL53L0X_ERROR_NONE)
 800c46e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c472:	2b00      	cmp	r3, #0
 800c474:	d109      	bne.n	800c48a <VL53L0X_get_pal_range_status+0x1f2>
		Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c47a:	461a      	mov	r2, r3
 800c47c:	2103      	movs	r1, #3
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7fc f9c4 	bl	800880c <VL53L0X_GetLimitCheckEnable>
 800c484:	4603      	mov	r3, r0
 800c486:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdLimitCheckEnable);

	if ((RangeIgnoreThresholdLimitCheckEnable != 0) &&
 800c48a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d023      	beq.n	800c4da <VL53L0X_get_pal_range_status+0x242>
 800c492:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c496:	2b00      	cmp	r3, #0
 800c498:	d11f      	bne.n	800c4da <VL53L0X_get_pal_range_status+0x242>
			(Status == VL53L0X_ERROR_NONE)) {

		/* Compute the signal rate per spad */
		if (EffectiveSpadRtnCount == 0) {
 800c49a:	893b      	ldrh	r3, [r7, #8]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d102      	bne.n	800c4a6 <VL53L0X_get_pal_range_status+0x20e>
			SignalRatePerSpad = 0;
 800c4a0:	2300      	movs	r3, #0
 800c4a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c4a4:	e005      	b.n	800c4b2 <VL53L0X_get_pal_range_status+0x21a>
		} else {
			SignalRatePerSpad = (FixPoint1616_t)((256 * SignalRate)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	021a      	lsls	r2, r3, #8
 800c4aa:	893b      	ldrh	r3, [r7, #8]
 800c4ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4b0:	637b      	str	r3, [r7, #52]	; 0x34
				/ EffectiveSpadRtnCount);
		}

		Status = VL53L0X_GetLimitCheckValue(Dev,
 800c4b2:	f107 0318 	add.w	r3, r7, #24
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	2103      	movs	r1, #3
 800c4ba:	68f8      	ldr	r0, [r7, #12]
 800c4bc:	f7fc fa2c 	bl	8008918 <VL53L0X_GetLimitCheckValue>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				&RangeIgnoreThresholdValue);

		if ((RangeIgnoreThresholdValue > 0) &&
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d006      	beq.n	800c4da <VL53L0X_get_pal_range_status+0x242>
			(SignalRatePerSpad < RangeIgnoreThresholdValue)) {
 800c4cc:	69bb      	ldr	r3, [r7, #24]
		if ((RangeIgnoreThresholdValue > 0) &&
 800c4ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d202      	bcs.n	800c4da <VL53L0X_get_pal_range_status+0x242>
			/* Limit Fail add 2^6 to range status */
			RangeIgnoreThresholdflag = 1;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		}
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c4da:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d14a      	bne.n	800c578 <VL53L0X_get_pal_range_status+0x2e0>
		if (NoneFlag == 1) {
 800c4e2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800c4e6:	2b01      	cmp	r3, #1
 800c4e8:	d103      	bne.n	800c4f2 <VL53L0X_get_pal_range_status+0x25a>
			*pPalRangeStatus = 255;	 /* NONE */
 800c4ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4ec:	22ff      	movs	r2, #255	; 0xff
 800c4ee:	701a      	strb	r2, [r3, #0]
 800c4f0:	e042      	b.n	800c578 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 1 ||
 800c4f2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c4f6:	2b01      	cmp	r3, #1
 800c4f8:	d007      	beq.n	800c50a <VL53L0X_get_pal_range_status+0x272>
 800c4fa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c4fe:	2b02      	cmp	r3, #2
 800c500:	d003      	beq.n	800c50a <VL53L0X_get_pal_range_status+0x272>
					DeviceRangeStatusInternal == 2 ||
 800c502:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c506:	2b03      	cmp	r3, #3
 800c508:	d103      	bne.n	800c512 <VL53L0X_get_pal_range_status+0x27a>
					DeviceRangeStatusInternal == 3) {
			*pPalRangeStatus = 5; /* HW fail */
 800c50a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c50c:	2205      	movs	r2, #5
 800c50e:	701a      	strb	r2, [r3, #0]
 800c510:	e032      	b.n	800c578 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 6 ||
 800c512:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c516:	2b06      	cmp	r3, #6
 800c518:	d003      	beq.n	800c522 <VL53L0X_get_pal_range_status+0x28a>
 800c51a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c51e:	2b09      	cmp	r3, #9
 800c520:	d103      	bne.n	800c52a <VL53L0X_get_pal_range_status+0x292>
					DeviceRangeStatusInternal == 9) {
			*pPalRangeStatus = 4;  /* Phase fail */
 800c522:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c524:	2204      	movs	r2, #4
 800c526:	701a      	strb	r2, [r3, #0]
 800c528:	e026      	b.n	800c578 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 8 ||
 800c52a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c52e:	2b08      	cmp	r3, #8
 800c530:	d007      	beq.n	800c542 <VL53L0X_get_pal_range_status+0x2aa>
 800c532:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c536:	2b0a      	cmp	r3, #10
 800c538:	d003      	beq.n	800c542 <VL53L0X_get_pal_range_status+0x2aa>
					DeviceRangeStatusInternal == 10 ||
 800c53a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c53e:	2b01      	cmp	r3, #1
 800c540:	d103      	bne.n	800c54a <VL53L0X_get_pal_range_status+0x2b2>
					SignalRefClipflag == 1) {
			*pPalRangeStatus = 3;  /* Min range */
 800c542:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c544:	2203      	movs	r2, #3
 800c546:	701a      	strb	r2, [r3, #0]
 800c548:	e016      	b.n	800c578 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (DeviceRangeStatusInternal == 4 ||
 800c54a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c54e:	2b04      	cmp	r3, #4
 800c550:	d003      	beq.n	800c55a <VL53L0X_get_pal_range_status+0x2c2>
 800c552:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c556:	2b01      	cmp	r3, #1
 800c558:	d103      	bne.n	800c562 <VL53L0X_get_pal_range_status+0x2ca>
					RangeIgnoreThresholdflag == 1) {
			*pPalRangeStatus = 2;  /* Signal Fail */
 800c55a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c55c:	2202      	movs	r2, #2
 800c55e:	701a      	strb	r2, [r3, #0]
 800c560:	e00a      	b.n	800c578 <VL53L0X_get_pal_range_status+0x2e0>
		} else if (SigmaLimitflag == 1) {
 800c562:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c566:	2b01      	cmp	r3, #1
 800c568:	d103      	bne.n	800c572 <VL53L0X_get_pal_range_status+0x2da>
			*pPalRangeStatus = 1;  /* Sigma	 Fail */
 800c56a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c56c:	2201      	movs	r2, #1
 800c56e:	701a      	strb	r2, [r3, #0]
 800c570:	e002      	b.n	800c578 <VL53L0X_get_pal_range_status+0x2e0>
		} else {
			*pPalRangeStatus = 0; /* Range Valid */
 800c572:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c574:	2200      	movs	r2, #0
 800c576:	701a      	strb	r2, [r3, #0]
		}
	}

	/* DMAX only relevant during range error */
	if (*pPalRangeStatus == 0)
 800c578:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c57a:	781b      	ldrb	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d102      	bne.n	800c586 <VL53L0X_get_pal_range_status+0x2ee>
		pRangingMeasurementData->RangeDMaxMilliMeter = 0;
 800c580:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c582:	2200      	movs	r2, #0
 800c584:	815a      	strh	r2, [r3, #10]

	/* fill the Limit Check Status */

	Status =  VL53L0X_GetLimitCheckEnable(Dev,
 800c586:	f107 032a 	add.w	r3, r7, #42	; 0x2a
 800c58a:	461a      	mov	r2, r3
 800c58c:	2101      	movs	r1, #1
 800c58e:	68f8      	ldr	r0, [r7, #12]
 800c590:	f7fc f93c 	bl	800880c <VL53L0X_GetLimitCheckEnable>
 800c594:	4603      	mov	r3, r0
 800c596:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
			&SignalRateFinalRangeLimitCheckEnable);

	if (Status == VL53L0X_ERROR_NONE) {
 800c59a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d14f      	bne.n	800c642 <VL53L0X_get_pal_range_status+0x3aa>
		if ((SigmaLimitCheckEnable == 0) || (SigmaLimitflag == 1))
 800c5a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d003      	beq.n	800c5b2 <VL53L0X_get_pal_range_status+0x31a>
 800c5aa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 800c5ae:	2b01      	cmp	r3, #1
 800c5b0:	d103      	bne.n	800c5ba <VL53L0X_get_pal_range_status+0x322>
			Temp8 = 1;
 800c5b2:	2301      	movs	r3, #1
 800c5b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5b8:	e002      	b.n	800c5c0 <VL53L0X_get_pal_range_status+0x328>
		else
			Temp8 = 0;
 800c5ba:	2300      	movs	r3, #0
 800c5bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c5c6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
				VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, Temp8);

		if ((DeviceRangeStatusInternal == 4) ||
 800c5ca:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800c5ce:	2b04      	cmp	r3, #4
 800c5d0:	d003      	beq.n	800c5da <VL53L0X_get_pal_range_status+0x342>
				(SignalRateFinalRangeLimitCheckEnable == 0))
 800c5d2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
		if ((DeviceRangeStatusInternal == 4) ||
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d103      	bne.n	800c5e2 <VL53L0X_get_pal_range_status+0x34a>
			Temp8 = 1;
 800c5da:	2301      	movs	r3, #1
 800c5dc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c5e0:	e002      	b.n	800c5e8 <VL53L0X_get_pal_range_status+0x350>
		else
			Temp8 = 0;
 800c5e2:	2300      	movs	r3, #0
 800c5e4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c5ee:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
				VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE,
				Temp8);

		if ((SignalRefClipLimitCheckEnable == 0) ||
 800c5f2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d003      	beq.n	800c602 <VL53L0X_get_pal_range_status+0x36a>
 800c5fa:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d103      	bne.n	800c60a <VL53L0X_get_pal_range_status+0x372>
					(SignalRefClipflag == 1))
			Temp8 = 1;
 800c602:	2301      	movs	r3, #1
 800c604:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c608:	e002      	b.n	800c610 <VL53L0X_get_pal_range_status+0x378>
		else
			Temp8 = 0;
 800c60a:	2300      	movs	r3, #0
 800c60c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c616:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				VL53L0X_CHECKENABLE_SIGNAL_REF_CLIP, Temp8);

		if ((RangeIgnoreThresholdLimitCheckEnable == 0) ||
 800c61a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d003      	beq.n	800c62a <VL53L0X_get_pal_range_status+0x392>
 800c622:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800c626:	2b01      	cmp	r3, #1
 800c628:	d103      	bne.n	800c632 <VL53L0X_get_pal_range_status+0x39a>
				(RangeIgnoreThresholdflag == 1))
			Temp8 = 1;
 800c62a:	2301      	movs	r3, #1
 800c62c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c630:	e002      	b.n	800c638 <VL53L0X_get_pal_range_status+0x3a0>
		else
			Temp8 = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

		VL53L0X_SETARRAYPARAMETERFIELD(Dev, LimitChecksStatus,
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800c63e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
				VL53L0X_CHECKENABLE_RANGE_IGNORE_THRESHOLD,
				Temp8);
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c642:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f

}
 800c646:	4618      	mov	r0, r3
 800c648:	3740      	adds	r7, #64	; 0x40
 800c64a:	46bd      	mov	sp, r7
 800c64c:	bd80      	pop	{r7, pc}

0800c64e <VL53L0X_check_part_used>:


VL53L0X_Error VL53L0X_check_part_used(VL53L0X_DEV Dev,
		uint8_t *Revision,
		VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800c64e:	b580      	push	{r7, lr}
 800c650:	b086      	sub	sp, #24
 800c652:	af00      	add	r7, sp, #0
 800c654:	60f8      	str	r0, [r7, #12]
 800c656:	60b9      	str	r1, [r7, #8]
 800c658:	607a      	str	r2, [r7, #4]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c65a:	2300      	movs	r3, #0
 800c65c:	75fb      	strb	r3, [r7, #23]
	uint8_t ModuleIdInt;
	char *ProductId_tmp;

	LOG_FUNCTION_START("");

	Status = VL53L0X_get_info_from_device(Dev, 2);
 800c65e:	2102      	movs	r1, #2
 800c660:	68f8      	ldr	r0, [r7, #12]
 800c662:	f7fd fe0d 	bl	800a280 <VL53L0X_get_info_from_device>
 800c666:	4603      	mov	r3, r0
 800c668:	75fb      	strb	r3, [r7, #23]

	if (Status == VL53L0X_ERROR_NONE) {
 800c66a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d11c      	bne.n	800c6ac <VL53L0X_check_part_used+0x5e>
		ModuleIdInt = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, ModuleId);
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
 800c678:	75bb      	strb	r3, [r7, #22]

	if (ModuleIdInt == 0) {
 800c67a:	7dbb      	ldrb	r3, [r7, #22]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d107      	bne.n	800c690 <VL53L0X_check_part_used+0x42>
		*Revision = 0;
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	2200      	movs	r2, #0
 800c684:	701a      	strb	r2, [r3, #0]
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, "");
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	3340      	adds	r3, #64	; 0x40
 800c68a:	2200      	movs	r2, #0
 800c68c:	701a      	strb	r2, [r3, #0]
 800c68e:	e00d      	b.n	800c6ac <VL53L0X_check_part_used+0x5e>
	} else {
		*Revision = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev, Revision);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f893 20f2 	ldrb.w	r2, [r3, #242]	; 0xf2
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	701a      	strb	r2, [r3, #0]
		ProductId_tmp = VL53L0X_GETDEVICESPECIFICPARAMETER(Dev,
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	33f3      	adds	r3, #243	; 0xf3
 800c69e:	613b      	str	r3, [r7, #16]
			ProductId);
		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->ProductId, ProductId_tmp);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	3340      	adds	r3, #64	; 0x40
 800c6a4:	6939      	ldr	r1, [r7, #16]
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f006 ff9c 	bl	80135e4 <strcpy>
	}
	}

	LOG_FUNCTION_END(Status);
	return Status;
 800c6ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3718      	adds	r7, #24
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <VL53L0X_get_device_info>:


VL53L0X_Error VL53L0X_get_device_info(VL53L0X_DEV Dev,
				VL53L0X_DeviceInfo_t *pVL53L0X_DeviceInfo)
{
 800c6b8:	b5b0      	push	{r4, r5, r7, lr}
 800c6ba:	b084      	sub	sp, #16
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
	VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	73fb      	strb	r3, [r7, #15]
	uint8_t revision_id;
	uint8_t Revision;

	Status = VL53L0X_check_part_used(Dev, &Revision, pVL53L0X_DeviceInfo);
 800c6c6:	f107 030d 	add.w	r3, r7, #13
 800c6ca:	683a      	ldr	r2, [r7, #0]
 800c6cc:	4619      	mov	r1, r3
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7ff ffbd 	bl	800c64e <VL53L0X_check_part_used>
 800c6d4:	4603      	mov	r3, r0
 800c6d6:	73fb      	strb	r3, [r7, #15]

	if (Status == VL53L0X_ERROR_NONE) {
 800c6d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d13b      	bne.n	800c758 <VL53L0X_get_device_info+0xa0>
		if (Revision == 0) {
 800c6e0:	7b7b      	ldrb	r3, [r7, #13]
 800c6e2:	2b00      	cmp	r3, #0
 800c6e4:	d108      	bne.n	800c6f8 <VL53L0X_get_device_info+0x40>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	4a30      	ldr	r2, [pc, #192]	; (800c7ac <VL53L0X_get_device_info+0xf4>)
 800c6ea:	461c      	mov	r4, r3
 800c6ec:	4613      	mov	r3, r2
 800c6ee:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c6f0:	6020      	str	r0, [r4, #0]
 800c6f2:	6061      	str	r1, [r4, #4]
 800c6f4:	60a2      	str	r2, [r4, #8]
 800c6f6:	e027      	b.n	800c748 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS0);
		} else if ((Revision <= 34) && (Revision != 32)) {
 800c6f8:	7b7b      	ldrb	r3, [r7, #13]
 800c6fa:	2b22      	cmp	r3, #34	; 0x22
 800c6fc:	d80b      	bhi.n	800c716 <VL53L0X_get_device_info+0x5e>
 800c6fe:	7b7b      	ldrb	r3, [r7, #13]
 800c700:	2b20      	cmp	r3, #32
 800c702:	d008      	beq.n	800c716 <VL53L0X_get_device_info+0x5e>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	4a2a      	ldr	r2, [pc, #168]	; (800c7b0 <VL53L0X_get_device_info+0xf8>)
 800c708:	461c      	mov	r4, r3
 800c70a:	4613      	mov	r3, r2
 800c70c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c70e:	6020      	str	r0, [r4, #0]
 800c710:	6061      	str	r1, [r4, #4]
 800c712:	60a2      	str	r2, [r4, #8]
 800c714:	e018      	b.n	800c748 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS1);
		} else if (Revision < 39) {
 800c716:	7b7b      	ldrb	r3, [r7, #13]
 800c718:	2b26      	cmp	r3, #38	; 0x26
 800c71a:	d808      	bhi.n	800c72e <VL53L0X_get_device_info+0x76>
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c71c:	683b      	ldr	r3, [r7, #0]
 800c71e:	4a25      	ldr	r2, [pc, #148]	; (800c7b4 <VL53L0X_get_device_info+0xfc>)
 800c720:	461c      	mov	r4, r3
 800c722:	4613      	mov	r3, r2
 800c724:	cb07      	ldmia	r3!, {r0, r1, r2}
 800c726:	6020      	str	r0, [r4, #0]
 800c728:	6061      	str	r1, [r4, #4]
 800c72a:	60a2      	str	r2, [r4, #8]
 800c72c:	e00c      	b.n	800c748 <VL53L0X_get_device_info+0x90>
					VL53L0X_STRING_DEVICE_INFO_NAME_TS2);
		} else {
			VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Name,
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	4a21      	ldr	r2, [pc, #132]	; (800c7b8 <VL53L0X_get_device_info+0x100>)
 800c732:	461d      	mov	r5, r3
 800c734:	4614      	mov	r4, r2
 800c736:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800c738:	6028      	str	r0, [r5, #0]
 800c73a:	6069      	str	r1, [r5, #4]
 800c73c:	60aa      	str	r2, [r5, #8]
 800c73e:	60eb      	str	r3, [r5, #12]
 800c740:	6820      	ldr	r0, [r4, #0]
 800c742:	6128      	str	r0, [r5, #16]
 800c744:	7923      	ldrb	r3, [r4, #4]
 800c746:	752b      	strb	r3, [r5, #20]
					VL53L0X_STRING_DEVICE_INFO_NAME_ES1);
		}

		VL53L0X_COPYSTRING(pVL53L0X_DeviceInfo->Type,
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	3320      	adds	r3, #32
 800c74c:	491b      	ldr	r1, [pc, #108]	; (800c7bc <VL53L0X_get_device_info+0x104>)
 800c74e:	461a      	mov	r2, r3
 800c750:	460b      	mov	r3, r1
 800c752:	cb03      	ldmia	r3!, {r0, r1}
 800c754:	6010      	str	r0, [r2, #0]
 800c756:	6051      	str	r1, [r2, #4]
				VL53L0X_STRING_DEVICE_INFO_TYPE);

	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c758:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d108      	bne.n	800c772 <VL53L0X_get_device_info+0xba>
		Status = VL53L0X_RdByte(Dev, VL53L0X_REG_IDENTIFICATION_MODEL_ID,
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	3360      	adds	r3, #96	; 0x60
 800c764:	461a      	mov	r2, r3
 800c766:	21c0      	movs	r1, #192	; 0xc0
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f000 f86a 	bl	800c842 <VL53L0X_RdByte>
 800c76e:	4603      	mov	r3, r0
 800c770:	73fb      	strb	r3, [r7, #15]
				&pVL53L0X_DeviceInfo->ProductType);
	}

	if (Status == VL53L0X_ERROR_NONE) {
 800c772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d112      	bne.n	800c7a0 <VL53L0X_get_device_info+0xe8>
		Status = VL53L0X_RdByte(Dev,
 800c77a:	f107 030e 	add.w	r3, r7, #14
 800c77e:	461a      	mov	r2, r3
 800c780:	21c2      	movs	r1, #194	; 0xc2
 800c782:	6878      	ldr	r0, [r7, #4]
 800c784:	f000 f85d 	bl	800c842 <VL53L0X_RdByte>
 800c788:	4603      	mov	r3, r0
 800c78a:	73fb      	strb	r3, [r7, #15]
			VL53L0X_REG_IDENTIFICATION_REVISION_ID,
				&revision_id);
		pVL53L0X_DeviceInfo->ProductRevisionMajor = 1;
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	2201      	movs	r2, #1
 800c790:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
					(revision_id & 0xF0) >> 4;
 800c794:	7bbb      	ldrb	r3, [r7, #14]
 800c796:	091b      	lsrs	r3, r3, #4
 800c798:	b2da      	uxtb	r2, r3
		pVL53L0X_DeviceInfo->ProductRevisionMinor =
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	}

	return Status;
 800c7a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3710      	adds	r7, #16
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bdb0      	pop	{r4, r5, r7, pc}
 800c7ac:	08016218 	.word	0x08016218
 800c7b0:	08016224 	.word	0x08016224
 800c7b4:	08016230 	.word	0x08016230
 800c7b8:	0801623c 	.word	0x0801623c
 800c7bc:	08016254 	.word	0x08016254

0800c7c0 <_I2CWrite>:
/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Exported functions --------------------------------------------------------*/
    
int _I2CWrite(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c7c0:	b580      	push	{r7, lr}
 800c7c2:	b088      	sub	sp, #32
 800c7c4:	af02      	add	r7, sp, #8
 800c7c6:	60f8      	str	r0, [r7, #12]
 800c7c8:	60b9      	str	r1, [r7, #8]
 800c7ca:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	330a      	adds	r3, #10
 800c7d0:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Transmit(Dev->I2cHandle, Dev->I2cDevAddr, pdata, count, i2c_time_out);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c7de:	b299      	uxth	r1, r3
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	b29a      	uxth	r2, r3
 800c7e4:	697b      	ldr	r3, [r7, #20]
 800c7e6:	9300      	str	r3, [sp, #0]
 800c7e8:	4613      	mov	r3, r2
 800c7ea:	68ba      	ldr	r2, [r7, #8]
 800c7ec:	f001 fde4 	bl	800e3b8 <HAL_I2C_Master_Transmit>
 800c7f0:	4603      	mov	r3, r0
 800c7f2:	613b      	str	r3, [r7, #16]
    
    return status;
 800c7f4:	693b      	ldr	r3, [r7, #16]
}
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	3718      	adds	r7, #24
 800c7fa:	46bd      	mov	sp, r7
 800c7fc:	bd80      	pop	{r7, pc}

0800c7fe <_I2CRead>:

int _I2CRead(VL53L0X_DEV Dev, uint8_t *pdata, uint32_t count) {
 800c7fe:	b580      	push	{r7, lr}
 800c800:	b088      	sub	sp, #32
 800c802:	af02      	add	r7, sp, #8
 800c804:	60f8      	str	r0, [r7, #12]
 800c806:	60b9      	str	r1, [r7, #8]
 800c808:	607a      	str	r2, [r7, #4]
    int status;
    int i2c_time_out = I2C_TIME_OUT_BASE+ count* I2C_TIME_OUT_BYTE;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	330a      	adds	r3, #10
 800c80e:	617b      	str	r3, [r7, #20]

    status = HAL_I2C_Master_Receive(Dev->I2cHandle, Dev->I2cDevAddr|1, pdata, count, i2c_time_out);
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	f893 315c 	ldrb.w	r3, [r3, #348]	; 0x15c
 800c81c:	f043 0301 	orr.w	r3, r3, #1
 800c820:	b2db      	uxtb	r3, r3
 800c822:	b299      	uxth	r1, r3
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	b29a      	uxth	r2, r3
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	9300      	str	r3, [sp, #0]
 800c82c:	4613      	mov	r3, r2
 800c82e:	68ba      	ldr	r2, [r7, #8]
 800c830:	f001 feb6 	bl	800e5a0 <HAL_I2C_Master_Receive>
 800c834:	4603      	mov	r3, r0
 800c836:	613b      	str	r3, [r7, #16]
    
    return status;
 800c838:	693b      	ldr	r3, [r7, #16]
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3718      	adds	r7, #24
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}

0800c842 <VL53L0X_RdByte>:

VL53L0X_Error VL53L0X_RdByte(VL53L0X_DEV Dev, uint8_t index, uint8_t *data) {
 800c842:	b580      	push	{r7, lr}
 800c844:	b086      	sub	sp, #24
 800c846:	af00      	add	r7, sp, #0
 800c848:	60f8      	str	r0, [r7, #12]
 800c84a:	460b      	mov	r3, r1
 800c84c:	607a      	str	r2, [r7, #4]
 800c84e:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c850:	2300      	movs	r3, #0
 800c852:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c854:	f107 030b 	add.w	r3, r7, #11
 800c858:	2201      	movs	r2, #1
 800c85a:	4619      	mov	r1, r3
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff ffaf 	bl	800c7c0 <_I2CWrite>
 800c862:	6138      	str	r0, [r7, #16]
    
    if( status_int ){
 800c864:	693b      	ldr	r3, [r7, #16]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d002      	beq.n	800c870 <VL53L0X_RdByte+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c86a:	23ec      	movs	r3, #236	; 0xec
 800c86c:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c86e:	e00c      	b.n	800c88a <VL53L0X_RdByte+0x48>
    }
    
    status_int = _I2CRead(Dev, data, 1);
 800c870:	2201      	movs	r2, #1
 800c872:	6879      	ldr	r1, [r7, #4]
 800c874:	68f8      	ldr	r0, [r7, #12]
 800c876:	f7ff ffc2 	bl	800c7fe <_I2CRead>
 800c87a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c87c:	693b      	ldr	r3, [r7, #16]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d002      	beq.n	800c888 <VL53L0X_RdByte+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c882:	23ec      	movs	r3, #236	; 0xec
 800c884:	75fb      	strb	r3, [r7, #23]
 800c886:	e000      	b.n	800c88a <VL53L0X_RdByte+0x48>
    }
done:
 800c888:	bf00      	nop
    return Status;
 800c88a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c88e:	4618      	mov	r0, r3
 800c890:	3718      	adds	r7, #24
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <VL53L0X_WriteMulti>:

uint8_t _I2CBuffer[64];


// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_WriteMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	607a      	str	r2, [r7, #4]
 800c8a2:	603b      	str	r3, [r7, #0]
 800c8a4:	460b      	mov	r3, r1
 800c8a6:	72fb      	strb	r3, [r7, #11]
    int status_int;
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	75fb      	strb	r3, [r7, #23]
    
    if (count > sizeof(_I2CBuffer) - 1) {
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	2b3f      	cmp	r3, #63	; 0x3f
 800c8b0:	d902      	bls.n	800c8b8 <VL53L0X_WriteMulti+0x20>
        return VL53L0X_ERROR_INVALID_PARAMS;
 800c8b2:	f06f 0303 	mvn.w	r3, #3
 800c8b6:	e016      	b.n	800c8e6 <VL53L0X_WriteMulti+0x4e>
    }
    
    _I2CBuffer[0] = index;
 800c8b8:	4a0d      	ldr	r2, [pc, #52]	; (800c8f0 <VL53L0X_WriteMulti+0x58>)
 800c8ba:	7afb      	ldrb	r3, [r7, #11]
 800c8bc:	7013      	strb	r3, [r2, #0]
    memcpy(&_I2CBuffer[1], pdata, count);
 800c8be:	683a      	ldr	r2, [r7, #0]
 800c8c0:	6879      	ldr	r1, [r7, #4]
 800c8c2:	480c      	ldr	r0, [pc, #48]	; (800c8f4 <VL53L0X_WriteMulti+0x5c>)
 800c8c4:	f006 f94c 	bl	8012b60 <memcpy>
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	3301      	adds	r3, #1
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	4908      	ldr	r1, [pc, #32]	; (800c8f0 <VL53L0X_WriteMulti+0x58>)
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f7ff ff75 	bl	800c7c0 <_I2CWrite>
 800c8d6:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d001      	beq.n	800c8e2 <VL53L0X_WriteMulti+0x4a>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c8de:	23ec      	movs	r3, #236	; 0xec
 800c8e0:	75fb      	strb	r3, [r7, #23]
    }
    
    return Status;
 800c8e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3718      	adds	r7, #24
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}
 800c8ee:	bf00      	nop
 800c8f0:	20002bd8 	.word	0x20002bd8
 800c8f4:	20002bd9 	.word	0x20002bd9

0800c8f8 <VL53L0X_ReadMulti>:

// the ranging_sensor_comms.dll will take care of the page selection
VL53L0X_Error VL53L0X_ReadMulti(VL53L0X_DEV Dev, uint8_t index, uint8_t *pdata, uint32_t count) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	607a      	str	r2, [r7, #4]
 800c902:	603b      	str	r3, [r7, #0]
 800c904:	460b      	mov	r3, r1
 800c906:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c908:	2300      	movs	r3, #0
 800c90a:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;
    
    status_int = _I2CWrite(Dev, &index, 1);
 800c90c:	f107 030b 	add.w	r3, r7, #11
 800c910:	2201      	movs	r2, #1
 800c912:	4619      	mov	r1, r3
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f7ff ff53 	bl	800c7c0 <_I2CWrite>
 800c91a:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <VL53L0X_ReadMulti+0x30>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c922:	23ec      	movs	r3, #236	; 0xec
 800c924:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c926:	e00c      	b.n	800c942 <VL53L0X_ReadMulti+0x4a>
    }
    
    status_int = _I2CRead(Dev, pdata, count);
 800c928:	683a      	ldr	r2, [r7, #0]
 800c92a:	6879      	ldr	r1, [r7, #4]
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	f7ff ff66 	bl	800c7fe <_I2CRead>
 800c932:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d002      	beq.n	800c940 <VL53L0X_ReadMulti+0x48>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c93a:	23ec      	movs	r3, #236	; 0xec
 800c93c:	75fb      	strb	r3, [r7, #23]
 800c93e:	e000      	b.n	800c942 <VL53L0X_ReadMulti+0x4a>
    }
done:
 800c940:	bf00      	nop
    return Status;
 800c942:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c946:	4618      	mov	r0, r3
 800c948:	3718      	adds	r7, #24
 800c94a:	46bd      	mov	sp, r7
 800c94c:	bd80      	pop	{r7, pc}
	...

0800c950 <VL53L0X_RdWord>:


VL53L0X_Error VL53L0X_RdWord(VL53L0X_DEV Dev, uint8_t index, uint16_t *data) {
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	460b      	mov	r3, r1
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c95e:	2300      	movs	r3, #0
 800c960:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c962:	f107 030b 	add.w	r3, r7, #11
 800c966:	2201      	movs	r2, #1
 800c968:	4619      	mov	r1, r3
 800c96a:	68f8      	ldr	r0, [r7, #12]
 800c96c:	f7ff ff28 	bl	800c7c0 <_I2CWrite>
 800c970:	6138      	str	r0, [r7, #16]

    if( status_int ){
 800c972:	693b      	ldr	r3, [r7, #16]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d002      	beq.n	800c97e <VL53L0X_RdWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c978:	23ec      	movs	r3, #236	; 0xec
 800c97a:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c97c:	e017      	b.n	800c9ae <VL53L0X_RdWord+0x5e>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 2);
 800c97e:	2202      	movs	r2, #2
 800c980:	490e      	ldr	r1, [pc, #56]	; (800c9bc <VL53L0X_RdWord+0x6c>)
 800c982:	68f8      	ldr	r0, [r7, #12]
 800c984:	f7ff ff3b 	bl	800c7fe <_I2CRead>
 800c988:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d002      	beq.n	800c996 <VL53L0X_RdWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c990:	23ec      	movs	r3, #236	; 0xec
 800c992:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c994:	e00b      	b.n	800c9ae <VL53L0X_RdWord+0x5e>
    }

    *data = ((uint16_t)_I2CBuffer[0]<<8) + (uint16_t)_I2CBuffer[1];
 800c996:	4b09      	ldr	r3, [pc, #36]	; (800c9bc <VL53L0X_RdWord+0x6c>)
 800c998:	781b      	ldrb	r3, [r3, #0]
 800c99a:	b29b      	uxth	r3, r3
 800c99c:	021b      	lsls	r3, r3, #8
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	4b06      	ldr	r3, [pc, #24]	; (800c9bc <VL53L0X_RdWord+0x6c>)
 800c9a2:	785b      	ldrb	r3, [r3, #1]
 800c9a4:	b29b      	uxth	r3, r3
 800c9a6:	4413      	add	r3, r2
 800c9a8:	b29a      	uxth	r2, r3
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	801a      	strh	r2, [r3, #0]
done:
    return Status;
 800c9ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3718      	adds	r7, #24
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
 800c9ba:	bf00      	nop
 800c9bc:	20002bd8 	.word	0x20002bd8

0800c9c0 <VL53L0X_RdDWord>:

VL53L0X_Error VL53L0X_RdDWord(VL53L0X_DEV Dev, uint8_t index, uint32_t *data) {
 800c9c0:	b580      	push	{r7, lr}
 800c9c2:	b086      	sub	sp, #24
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	60f8      	str	r0, [r7, #12]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	607a      	str	r2, [r7, #4]
 800c9cc:	72fb      	strb	r3, [r7, #11]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	75fb      	strb	r3, [r7, #23]
    int32_t status_int;

    status_int = _I2CWrite(Dev, &index, 1);
 800c9d2:	f107 030b 	add.w	r3, r7, #11
 800c9d6:	2201      	movs	r2, #1
 800c9d8:	4619      	mov	r1, r3
 800c9da:	68f8      	ldr	r0, [r7, #12]
 800c9dc:	f7ff fef0 	bl	800c7c0 <_I2CWrite>
 800c9e0:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d002      	beq.n	800c9ee <VL53L0X_RdDWord+0x2e>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800c9e8:	23ec      	movs	r3, #236	; 0xec
 800c9ea:	75fb      	strb	r3, [r7, #23]
        goto done;
 800c9ec:	e01b      	b.n	800ca26 <VL53L0X_RdDWord+0x66>
    }
    
    status_int = _I2CRead(Dev, _I2CBuffer, 4);
 800c9ee:	2204      	movs	r2, #4
 800c9f0:	4910      	ldr	r1, [pc, #64]	; (800ca34 <VL53L0X_RdDWord+0x74>)
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f7ff ff03 	bl	800c7fe <_I2CRead>
 800c9f8:	6138      	str	r0, [r7, #16]
    
    if (status_int != 0) {
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d002      	beq.n	800ca06 <VL53L0X_RdDWord+0x46>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ca00:	23ec      	movs	r3, #236	; 0xec
 800ca02:	75fb      	strb	r3, [r7, #23]
        goto done;
 800ca04:	e00f      	b.n	800ca26 <VL53L0X_RdDWord+0x66>
    }

    *data = ((uint32_t)_I2CBuffer[0]<<24) + ((uint32_t)_I2CBuffer[1]<<16) + ((uint32_t)_I2CBuffer[2]<<8) + (uint32_t)_I2CBuffer[3];
 800ca06:	4b0b      	ldr	r3, [pc, #44]	; (800ca34 <VL53L0X_RdDWord+0x74>)
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	061a      	lsls	r2, r3, #24
 800ca0c:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <VL53L0X_RdDWord+0x74>)
 800ca0e:	785b      	ldrb	r3, [r3, #1]
 800ca10:	041b      	lsls	r3, r3, #16
 800ca12:	441a      	add	r2, r3
 800ca14:	4b07      	ldr	r3, [pc, #28]	; (800ca34 <VL53L0X_RdDWord+0x74>)
 800ca16:	789b      	ldrb	r3, [r3, #2]
 800ca18:	021b      	lsls	r3, r3, #8
 800ca1a:	4413      	add	r3, r2
 800ca1c:	4a05      	ldr	r2, [pc, #20]	; (800ca34 <VL53L0X_RdDWord+0x74>)
 800ca1e:	78d2      	ldrb	r2, [r2, #3]
 800ca20:	441a      	add	r2, r3
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	601a      	str	r2, [r3, #0]

done:
    return Status;
 800ca26:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	3718      	adds	r7, #24
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	bd80      	pop	{r7, pc}
 800ca32:	bf00      	nop
 800ca34:	20002bd8 	.word	0x20002bd8

0800ca38 <VL53L0X_WrByte>:

VL53L0X_Error VL53L0X_WrByte(VL53L0X_DEV Dev, uint8_t index, uint8_t data) {
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b084      	sub	sp, #16
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	460b      	mov	r3, r1
 800ca42:	70fb      	strb	r3, [r7, #3]
 800ca44:	4613      	mov	r3, r2
 800ca46:	70bb      	strb	r3, [r7, #2]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ca4c:	4a0b      	ldr	r2, [pc, #44]	; (800ca7c <VL53L0X_WrByte+0x44>)
 800ca4e:	78fb      	ldrb	r3, [r7, #3]
 800ca50:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data;
 800ca52:	4a0a      	ldr	r2, [pc, #40]	; (800ca7c <VL53L0X_WrByte+0x44>)
 800ca54:	78bb      	ldrb	r3, [r7, #2]
 800ca56:	7053      	strb	r3, [r2, #1]

    status_int = _I2CWrite(Dev, _I2CBuffer, 2);
 800ca58:	2202      	movs	r2, #2
 800ca5a:	4908      	ldr	r1, [pc, #32]	; (800ca7c <VL53L0X_WrByte+0x44>)
 800ca5c:	6878      	ldr	r0, [r7, #4]
 800ca5e:	f7ff feaf 	bl	800c7c0 <_I2CWrite>
 800ca62:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800ca64:	68bb      	ldr	r3, [r7, #8]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d001      	beq.n	800ca6e <VL53L0X_WrByte+0x36>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800ca6a:	23ec      	movs	r3, #236	; 0xec
 800ca6c:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800ca6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}
 800ca7a:	bf00      	nop
 800ca7c:	20002bd8 	.word	0x20002bd8

0800ca80 <VL53L0X_WrWord>:

VL53L0X_Error VL53L0X_WrWord(VL53L0X_DEV Dev, uint8_t index, uint16_t data) {
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
 800ca86:	6078      	str	r0, [r7, #4]
 800ca88:	460b      	mov	r3, r1
 800ca8a:	70fb      	strb	r3, [r7, #3]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	803b      	strh	r3, [r7, #0]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800ca90:	2300      	movs	r3, #0
 800ca92:	73fb      	strb	r3, [r7, #15]
    int32_t status_int;

    _I2CBuffer[0] = index;
 800ca94:	4a0e      	ldr	r2, [pc, #56]	; (800cad0 <VL53L0X_WrWord+0x50>)
 800ca96:	78fb      	ldrb	r3, [r7, #3]
 800ca98:	7013      	strb	r3, [r2, #0]
    _I2CBuffer[1] = data >> 8;
 800ca9a:	883b      	ldrh	r3, [r7, #0]
 800ca9c:	0a1b      	lsrs	r3, r3, #8
 800ca9e:	b29b      	uxth	r3, r3
 800caa0:	b2da      	uxtb	r2, r3
 800caa2:	4b0b      	ldr	r3, [pc, #44]	; (800cad0 <VL53L0X_WrWord+0x50>)
 800caa4:	705a      	strb	r2, [r3, #1]
    _I2CBuffer[2] = data & 0x00FF;
 800caa6:	883b      	ldrh	r3, [r7, #0]
 800caa8:	b2da      	uxtb	r2, r3
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <VL53L0X_WrWord+0x50>)
 800caac:	709a      	strb	r2, [r3, #2]

    status_int = _I2CWrite(Dev, _I2CBuffer, 3);
 800caae:	2203      	movs	r2, #3
 800cab0:	4907      	ldr	r1, [pc, #28]	; (800cad0 <VL53L0X_WrWord+0x50>)
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f7ff fe84 	bl	800c7c0 <_I2CWrite>
 800cab8:	60b8      	str	r0, [r7, #8]
    
    if (status_int != 0) {
 800caba:	68bb      	ldr	r3, [r7, #8]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d001      	beq.n	800cac4 <VL53L0X_WrWord+0x44>
        Status = VL53L0X_ERROR_CONTROL_INTERFACE;
 800cac0:	23ec      	movs	r3, #236	; 0xec
 800cac2:	73fb      	strb	r3, [r7, #15]
    }
    
    return Status;
 800cac4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cac8:	4618      	mov	r0, r3
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	20002bd8 	.word	0x20002bd8

0800cad4 <VL53L0X_UpdateByte>:

VL53L0X_Error VL53L0X_UpdateByte(VL53L0X_DEV Dev, uint8_t index, uint8_t AndData, uint8_t OrData) {
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b084      	sub	sp, #16
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	4608      	mov	r0, r1
 800cade:	4611      	mov	r1, r2
 800cae0:	461a      	mov	r2, r3
 800cae2:	4603      	mov	r3, r0
 800cae4:	70fb      	strb	r3, [r7, #3]
 800cae6:	460b      	mov	r3, r1
 800cae8:	70bb      	strb	r3, [r7, #2]
 800caea:	4613      	mov	r3, r2
 800caec:	707b      	strb	r3, [r7, #1]
    VL53L0X_Error Status = VL53L0X_ERROR_NONE;
 800caee:	2300      	movs	r3, #0
 800caf0:	73fb      	strb	r3, [r7, #15]
    uint8_t data;

    Status = VL53L0X_RdByte(Dev, index, &data);
 800caf2:	f107 020e 	add.w	r2, r7, #14
 800caf6:	78fb      	ldrb	r3, [r7, #3]
 800caf8:	4619      	mov	r1, r3
 800cafa:	6878      	ldr	r0, [r7, #4]
 800cafc:	f7ff fea1 	bl	800c842 <VL53L0X_RdByte>
 800cb00:	4603      	mov	r3, r0
 800cb02:	73fb      	strb	r3, [r7, #15]
    
    if (Status) {
 800cb04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	d110      	bne.n	800cb2e <VL53L0X_UpdateByte+0x5a>
        goto done;
    }
    
    data = (data & AndData) | OrData;
 800cb0c:	7bba      	ldrb	r2, [r7, #14]
 800cb0e:	78bb      	ldrb	r3, [r7, #2]
 800cb10:	4013      	ands	r3, r2
 800cb12:	b2da      	uxtb	r2, r3
 800cb14:	787b      	ldrb	r3, [r7, #1]
 800cb16:	4313      	orrs	r3, r2
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	73bb      	strb	r3, [r7, #14]
    Status = VL53L0X_WrByte(Dev, index, data);
 800cb1c:	7bba      	ldrb	r2, [r7, #14]
 800cb1e:	78fb      	ldrb	r3, [r7, #3]
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff ff88 	bl	800ca38 <VL53L0X_WrByte>
 800cb28:	4603      	mov	r3, r0
 800cb2a:	73fb      	strb	r3, [r7, #15]
 800cb2c:	e000      	b.n	800cb30 <VL53L0X_UpdateByte+0x5c>
        goto done;
 800cb2e:	bf00      	nop
done:
    return Status;
 800cb30:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3710      	adds	r7, #16
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <VL53L0X_PollingDelay>:
    }

    return Status;
}

VL53L0X_Error VL53L0X_PollingDelay(VL53L0X_DEV Dev) {
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b084      	sub	sp, #16
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
    VL53L0X_Error status = VL53L0X_ERROR_NONE;
 800cb44:	2300      	movs	r3, #0
 800cb46:	73fb      	strb	r3, [r7, #15]

    // do nothing
    VL53L0X_OsDelay();
 800cb48:	2002      	movs	r0, #2
 800cb4a:	f000 fedd 	bl	800d908 <HAL_Delay>
    return status;
 800cb4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb52:	4618      	mov	r0, r3
 800cb54:	3710      	adds	r7, #16
 800cb56:	46bd      	mov	sp, r7
 800cb58:	bd80      	pop	{r7, pc}
	...

0800cb5c <SetupSingleShot>:

/**
 *  Setup all detected sensors for single shot mode and setup ranging configuration
 */
void SetupSingleShot(VL53L0X_Dev_t Dev)
{
 800cb5c:	b084      	sub	sp, #16
 800cb5e:	b580      	push	{r7, lr}
 800cb60:	b088      	sub	sp, #32
 800cb62:	af00      	add	r7, sp, #0
 800cb64:	f107 0c28 	add.w	ip, r7, #40	; 0x28
 800cb68:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  int status;
  uint8_t VhvSettings;
  uint8_t PhaseCal;
  uint32_t refSpadCount;
	uint8_t isApertureSpads;
	FixPoint1616_t signalLimit = (FixPoint1616_t)(0.25*65536);
 800cb6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cb70:	61fb      	str	r3, [r7, #28]
	FixPoint1616_t sigmaLimit = (FixPoint1616_t)(18*65536);
 800cb72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800cb76:	61bb      	str	r3, [r7, #24]
	uint32_t timingBudget = 33000;
 800cb78:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800cb7c:	617b      	str	r3, [r7, #20]
	uint8_t preRangeVcselPeriod = 14;
 800cb7e:	230e      	movs	r3, #14
 800cb80:	74fb      	strb	r3, [r7, #19]
	uint8_t finalRangeVcselPeriod = 10;
 800cb82:	230a      	movs	r3, #10
 800cb84:	74bb      	strb	r3, [r7, #18]

                          
  if( Dev.Present){
 800cb86:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	f000 80ac 	beq.w	800cce8 <SetupSingleShot+0x18c>
    status=VL53L0X_StaticInit(&Dev);
 800cb90:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cb94:	f7fb f8e0 	bl	8007d58 <VL53L0X_StaticInit>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d002      	beq.n	800cba8 <SetupSingleShot+0x4c>
      printf("VL53L0X_StaticInit failed\n");
 800cba2:	4855      	ldr	r0, [pc, #340]	; (800ccf8 <SetupSingleShot+0x19c>)
 800cba4:	f006 fce2 	bl	801356c <puts>
    }
    
    status = VL53L0X_PerformRefCalibration(&Dev, &VhvSettings, &PhaseCal);
 800cba8:	f107 020a 	add.w	r2, r7, #10
 800cbac:	f107 030b 	add.w	r3, r7, #11
 800cbb0:	4619      	mov	r1, r3
 800cbb2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cbb6:	f7fb ffa3 	bl	8008b00 <VL53L0X_PerformRefCalibration>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d002      	beq.n	800cbca <SetupSingleShot+0x6e>
      printf("VL53L0X_PerformRefCalibration failed\n");
 800cbc4:	484d      	ldr	r0, [pc, #308]	; (800ccfc <SetupSingleShot+0x1a0>)
 800cbc6:	f006 fcd1 	bl	801356c <puts>
    }
    
    status = VL53L0X_PerformRefSpadManagement(&Dev, &refSpadCount, &isApertureSpads);
 800cbca:	1cfa      	adds	r2, r7, #3
 800cbcc:	1d3b      	adds	r3, r7, #4
 800cbce:	4619      	mov	r1, r3
 800cbd0:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cbd4:	f7fc fbec 	bl	80093b0 <VL53L0X_PerformRefSpadManagement>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d002      	beq.n	800cbe8 <SetupSingleShot+0x8c>
      printf("VL53L0X_PerformRefSpadManagement failed\n");
 800cbe2:	4847      	ldr	r0, [pc, #284]	; (800cd00 <SetupSingleShot+0x1a4>)
 800cbe4:	f006 fcc2 	bl	801356c <puts>
    }
    
    status = VL53L0X_SetDeviceMode(&Dev, VL53L0X_DEVICEMODE_SINGLE_RANGING); // Setup in single ranging mode
 800cbe8:	2100      	movs	r1, #0
 800cbea:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cbee:	f7fb fac5 	bl	800817c <VL53L0X_SetDeviceMode>
 800cbf2:	4603      	mov	r3, r0
 800cbf4:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d002      	beq.n	800cc02 <SetupSingleShot+0xa6>
      printf("VL53L0X_SetDeviceMode failed\n");
 800cbfc:	4841      	ldr	r0, [pc, #260]	; (800cd04 <SetupSingleShot+0x1a8>)
 800cbfe:	f006 fcb5 	bl	801356c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, 1); // Enable Sigma limit
 800cc02:	2201      	movs	r2, #1
 800cc04:	2100      	movs	r1, #0
 800cc06:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cc0a:	f7fb fd73 	bl	80086f4 <VL53L0X_SetLimitCheckEnable>
 800cc0e:	4603      	mov	r3, r0
 800cc10:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2b00      	cmp	r3, #0
 800cc16:	d002      	beq.n	800cc1e <SetupSingleShot+0xc2>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800cc18:	483b      	ldr	r0, [pc, #236]	; (800cd08 <SetupSingleShot+0x1ac>)
 800cc1a:	f006 fca7 	bl	801356c <puts>
    }
    
    status = VL53L0X_SetLimitCheckEnable(&Dev, VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, 1); // Enable Signa limit
 800cc1e:	2201      	movs	r2, #1
 800cc20:	2101      	movs	r1, #1
 800cc22:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cc26:	f7fb fd65 	bl	80086f4 <VL53L0X_SetLimitCheckEnable>
 800cc2a:	4603      	mov	r3, r0
 800cc2c:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d002      	beq.n	800cc3a <SetupSingleShot+0xde>
      printf("VL53L0X_SetLimitCheckEnable failed\n");
 800cc34:	4834      	ldr	r0, [pc, #208]	; (800cd08 <SetupSingleShot+0x1ac>)
 800cc36:	f006 fc99 	bl	801356c <puts>
    }
    
    /* Ranging configuration */
    signalLimit = (FixPoint1616_t)(0.1*65536);
 800cc3a:	f641 1399 	movw	r3, #6553	; 0x1999
 800cc3e:	61fb      	str	r3, [r7, #28]
    sigmaLimit = (FixPoint1616_t)(60*65536);
 800cc40:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800cc44:	61bb      	str	r3, [r7, #24]
    timingBudget = 33000;
 800cc46:	f248 03e8 	movw	r3, #33000	; 0x80e8
 800cc4a:	617b      	str	r3, [r7, #20]
    preRangeVcselPeriod = 18;
 800cc4c:	2312      	movs	r3, #18
 800cc4e:	74fb      	strb	r3, [r7, #19]
    finalRangeVcselPeriod = 14;
 800cc50:	230e      	movs	r3, #14
 800cc52:	74bb      	strb	r3, [r7, #18]
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGNAL_RATE_FINAL_RANGE, signalLimit);
 800cc54:	69fa      	ldr	r2, [r7, #28]
 800cc56:	2101      	movs	r1, #1
 800cc58:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cc5c:	f7fb fdfa 	bl	8008854 <VL53L0X_SetLimitCheckValue>
 800cc60:	4603      	mov	r3, r0
 800cc62:	60fb      	str	r3, [r7, #12]
    
    if( status ){
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d002      	beq.n	800cc70 <SetupSingleShot+0x114>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800cc6a:	4828      	ldr	r0, [pc, #160]	; (800cd0c <SetupSingleShot+0x1b0>)
 800cc6c:	f006 fc7e 	bl	801356c <puts>
    }
    
    status = VL53L0X_SetLimitCheckValue(&Dev,  VL53L0X_CHECKENABLE_SIGMA_FINAL_RANGE, sigmaLimit);
 800cc70:	69ba      	ldr	r2, [r7, #24]
 800cc72:	2100      	movs	r1, #0
 800cc74:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cc78:	f7fb fdec 	bl	8008854 <VL53L0X_SetLimitCheckValue>
 800cc7c:	4603      	mov	r3, r0
 800cc7e:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cc80:	68fb      	ldr	r3, [r7, #12]
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d002      	beq.n	800cc8c <SetupSingleShot+0x130>
      printf("VL53L0X_SetLimitCheckValue failed\n");
 800cc86:	4821      	ldr	r0, [pc, #132]	; (800cd0c <SetupSingleShot+0x1b0>)
 800cc88:	f006 fc70 	bl	801356c <puts>
    }
    
    status = VL53L0X_SetMeasurementTimingBudgetMicroSeconds(&Dev,  timingBudget);
 800cc8c:	6979      	ldr	r1, [r7, #20]
 800cc8e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800cc92:	f7fb fad1 	bl	8008238 <VL53L0X_SetMeasurementTimingBudgetMicroSeconds>
 800cc96:	4603      	mov	r3, r0
 800cc98:	60fb      	str	r3, [r7, #12]
    if( status ){
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d002      	beq.n	800cca6 <SetupSingleShot+0x14a>
      printf("VL53L0X_SetMeasurementTimingBudgetMicroSeconds failed\n");
 800cca0:	481b      	ldr	r0, [pc, #108]	; (800cd10 <SetupSingleShot+0x1b4>)
 800cca2:	f006 fc63 	bl	801356c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_PRE_RANGE, preRangeVcselPeriod);
 800cca6:	7cfb      	ldrb	r3, [r7, #19]
 800cca8:	461a      	mov	r2, r3
 800ccaa:	2100      	movs	r1, #0
 800ccac:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ccb0:	f7fb fae8 	bl	8008284 <VL53L0X_SetVcselPulsePeriod>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	60fb      	str	r3, [r7, #12]
    if( status ){
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d002      	beq.n	800ccc4 <SetupSingleShot+0x168>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800ccbe:	4815      	ldr	r0, [pc, #84]	; (800cd14 <SetupSingleShot+0x1b8>)
 800ccc0:	f006 fc54 	bl	801356c <puts>
    }
    
    status = VL53L0X_SetVcselPulsePeriod(&Dev,  VL53L0X_VCSEL_PERIOD_FINAL_RANGE, finalRangeVcselPeriod);
 800ccc4:	7cbb      	ldrb	r3, [r7, #18]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	2101      	movs	r1, #1
 800ccca:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800ccce:	f7fb fad9 	bl	8008284 <VL53L0X_SetVcselPulsePeriod>
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	60fb      	str	r3, [r7, #12]
    if( status ){
 800ccd6:	68fb      	ldr	r3, [r7, #12]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d002      	beq.n	800cce2 <SetupSingleShot+0x186>
      printf("VL53L0X_SetVcselPulsePeriod failed\n");
 800ccdc:	480d      	ldr	r0, [pc, #52]	; (800cd14 <SetupSingleShot+0x1b8>)
 800ccde:	f006 fc45 	bl	801356c <puts>
    }
    
    Dev.LeakyFirst=1;
 800cce2:	2301      	movs	r3, #1
 800cce4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  }
}
 800cce8:	bf00      	nop
 800ccea:	3720      	adds	r7, #32
 800ccec:	46bd      	mov	sp, r7
 800ccee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ccf2:	b004      	add	sp, #16
 800ccf4:	4770      	bx	lr
 800ccf6:	bf00      	nop
 800ccf8:	080166bc 	.word	0x080166bc
 800ccfc:	080166d8 	.word	0x080166d8
 800cd00:	08016700 	.word	0x08016700
 800cd04:	08016728 	.word	0x08016728
 800cd08:	08016748 	.word	0x08016748
 800cd0c:	0801676c 	.word	0x0801676c
 800cd10:	08016790 	.word	0x08016790
 800cd14:	080167c8 	.word	0x080167c8

0800cd18 <HTS221_H_Init>:
  */
/**
  * @brief  Set HTS221 humidity sensor Initialization.
  */
void HTS221_H_Init(uint16_t DeviceAddr)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b084      	sub	sp, #16
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	4603      	mov	r3, r0
 800cd20:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800cd22:	88fb      	ldrh	r3, [r7, #6]
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2120      	movs	r1, #32
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7fa fc3b 	bl	80075a4 <SENSOR_IO_Read>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	f023 0304 	bic.w	r3, r3, #4
 800cd38:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800cd3a:	7bfb      	ldrb	r3, [r7, #15]
 800cd3c:	f043 0304 	orr.w	r3, r3, #4
 800cd40:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800cd42:	7bfb      	ldrb	r3, [r7, #15]
 800cd44:	f023 0303 	bic.w	r3, r3, #3
 800cd48:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	f043 0301 	orr.w	r3, r3, #1
 800cd50:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cd58:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800cd5a:	88fb      	ldrh	r3, [r7, #6]
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	7bfa      	ldrb	r2, [r7, #15]
 800cd60:	2120      	movs	r1, #32
 800cd62:	4618      	mov	r0, r3
 800cd64:	f7fa fc04 	bl	8007570 <SENSOR_IO_Write>
}
 800cd68:	bf00      	nop
 800cd6a:	3710      	adds	r7, #16
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <HTS221_H_ReadID>:
/**
  * @brief  Read HTS221 ID.
  * @retval ID 
  */
uint8_t HTS221_H_ReadID(uint16_t DeviceAddr)
{  
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b084      	sub	sp, #16
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	4603      	mov	r3, r0
 800cd78:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	73fb      	strb	r3, [r7, #15]
 
  /* IO interface initialization */
  SENSOR_IO_Init(); 
 800cd7e:	f7fa fbed 	bl	800755c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, HTS221_WHO_AM_I_REG);
 800cd82:	88fb      	ldrh	r3, [r7, #6]
 800cd84:	b2db      	uxtb	r3, r3
 800cd86:	210f      	movs	r1, #15
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fa fc0b 	bl	80075a4 <SENSOR_IO_Read>
 800cd8e:	4603      	mov	r3, r0
 800cd90:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800cd92:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd94:	4618      	mov	r0, r3
 800cd96:	3710      	adds	r7, #16
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	bd80      	pop	{r7, pc}

0800cd9c <HTS221_H_ReadHumidity>:
/**
  * @brief  Read humidity value of HTS221
  * @retval humidity value;
  */
float HTS221_H_ReadHumidity(uint16_t DeviceAddr)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b088      	sub	sp, #32
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	4603      	mov	r3, r0
 800cda4:	80fb      	strh	r3, [r7, #6]
  int16_t H0_T0_out, H1_T0_out, H_T_out;
  int16_t H0_rh, H1_rh;
  uint8_t buffer[2];
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_RH_X2 | 0x80), buffer, 2);
 800cda6:	88fb      	ldrh	r3, [r7, #6]
 800cda8:	b2d8      	uxtb	r0, r3
 800cdaa:	f107 020c 	add.w	r2, r7, #12
 800cdae:	2302      	movs	r3, #2
 800cdb0:	21b0      	movs	r1, #176	; 0xb0
 800cdb2:	f7fa fc15 	bl	80075e0 <SENSOR_IO_ReadMultiple>

  H0_rh = buffer[0] >> 1;
 800cdb6:	7b3b      	ldrb	r3, [r7, #12]
 800cdb8:	085b      	lsrs	r3, r3, #1
 800cdba:	b2db      	uxtb	r3, r3
 800cdbc:	83fb      	strh	r3, [r7, #30]
  H1_rh = buffer[1] >> 1;
 800cdbe:	7b7b      	ldrb	r3, [r7, #13]
 800cdc0:	085b      	lsrs	r3, r3, #1
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	83bb      	strh	r3, [r7, #28]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H0_T0_OUT_L | 0x80), buffer, 2);
 800cdc6:	88fb      	ldrh	r3, [r7, #6]
 800cdc8:	b2d8      	uxtb	r0, r3
 800cdca:	f107 020c 	add.w	r2, r7, #12
 800cdce:	2302      	movs	r3, #2
 800cdd0:	21b6      	movs	r1, #182	; 0xb6
 800cdd2:	f7fa fc05 	bl	80075e0 <SENSOR_IO_ReadMultiple>

  H0_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800cdd6:	7b7b      	ldrb	r3, [r7, #13]
 800cdd8:	021b      	lsls	r3, r3, #8
 800cdda:	b21a      	sxth	r2, r3
 800cddc:	7b3b      	ldrb	r3, [r7, #12]
 800cdde:	b21b      	sxth	r3, r3
 800cde0:	4313      	orrs	r3, r2
 800cde2:	837b      	strh	r3, [r7, #26]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_H1_T0_OUT_L | 0x80), buffer, 2);
 800cde4:	88fb      	ldrh	r3, [r7, #6]
 800cde6:	b2d8      	uxtb	r0, r3
 800cde8:	f107 020c 	add.w	r2, r7, #12
 800cdec:	2302      	movs	r3, #2
 800cdee:	21ba      	movs	r1, #186	; 0xba
 800cdf0:	f7fa fbf6 	bl	80075e0 <SENSOR_IO_ReadMultiple>

  H1_T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800cdf4:	7b7b      	ldrb	r3, [r7, #13]
 800cdf6:	021b      	lsls	r3, r3, #8
 800cdf8:	b21a      	sxth	r2, r3
 800cdfa:	7b3b      	ldrb	r3, [r7, #12]
 800cdfc:	b21b      	sxth	r3, r3
 800cdfe:	4313      	orrs	r3, r2
 800ce00:	833b      	strh	r3, [r7, #24]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_HR_OUT_L_REG | 0x80), buffer, 2);
 800ce02:	88fb      	ldrh	r3, [r7, #6]
 800ce04:	b2d8      	uxtb	r0, r3
 800ce06:	f107 020c 	add.w	r2, r7, #12
 800ce0a:	2302      	movs	r3, #2
 800ce0c:	21a8      	movs	r1, #168	; 0xa8
 800ce0e:	f7fa fbe7 	bl	80075e0 <SENSOR_IO_ReadMultiple>

  H_T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800ce12:	7b7b      	ldrb	r3, [r7, #13]
 800ce14:	021b      	lsls	r3, r3, #8
 800ce16:	b21a      	sxth	r2, r3
 800ce18:	7b3b      	ldrb	r3, [r7, #12]
 800ce1a:	b21b      	sxth	r3, r3
 800ce1c:	4313      	orrs	r3, r2
 800ce1e:	82fb      	strh	r3, [r7, #22]

  tmp_f = (float)(H_T_out - H0_T0_out) * (float)(H1_rh - H0_rh) / (float)(H1_T0_out - H0_T0_out)  +  H0_rh;
 800ce20:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800ce24:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ce28:	1ad3      	subs	r3, r2, r3
 800ce2a:	ee07 3a90 	vmov	s15, r3
 800ce2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ce32:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800ce36:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce3a:	1ad3      	subs	r3, r2, r3
 800ce3c:	ee07 3a90 	vmov	s15, r3
 800ce40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce44:	ee67 6a27 	vmul.f32	s13, s14, s15
 800ce48:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ce4c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800ce50:	1ad3      	subs	r3, r2, r3
 800ce52:	ee07 3a90 	vmov	s15, r3
 800ce56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800ce62:	ee07 3a90 	vmov	s15, r3
 800ce66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce6e:	edc7 7a04 	vstr	s15, [r7, #16]
  tmp_f *= 10.0f;
 800ce72:	edd7 7a04 	vldr	s15, [r7, #16]
 800ce76:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ce7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800ce7e:	edc7 7a04 	vstr	s15, [r7, #16]

  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
        : ( tmp_f <    0.0f ) ?    0.0f
 800ce82:	edd7 7a04 	vldr	s15, [r7, #16]
 800ce86:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800cecc <HTS221_H_ReadHumidity+0x130>
 800ce8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ce8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce92:	dd01      	ble.n	800ce98 <HTS221_H_ReadHumidity+0xfc>
 800ce94:	4b0e      	ldr	r3, [pc, #56]	; (800ced0 <HTS221_H_ReadHumidity+0x134>)
 800ce96:	e00a      	b.n	800ceae <HTS221_H_ReadHumidity+0x112>
        : tmp_f;
 800ce98:	edd7 7a04 	vldr	s15, [r7, #16]
 800ce9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800cea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea4:	d502      	bpl.n	800ceac <HTS221_H_ReadHumidity+0x110>
 800cea6:	f04f 0300 	mov.w	r3, #0
 800ceaa:	e000      	b.n	800ceae <HTS221_H_ReadHumidity+0x112>
 800ceac:	693b      	ldr	r3, [r7, #16]
  tmp_f = ( tmp_f > 1000.0f ) ? 1000.0f
 800ceae:	613b      	str	r3, [r7, #16]

  return (tmp_f / 10.0f);
 800ceb0:	edd7 7a04 	vldr	s15, [r7, #16]
 800ceb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800ceb8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800cebc:	eef0 7a66 	vmov.f32	s15, s13
}
 800cec0:	eeb0 0a67 	vmov.f32	s0, s15
 800cec4:	3720      	adds	r7, #32
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	447a0000 	.word	0x447a0000
 800ced0:	447a0000 	.word	0x447a0000

0800ced4 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 800ced4:	b580      	push	{r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	4603      	mov	r3, r0
 800cedc:	6039      	str	r1, [r7, #0]
 800cede:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 800cee0:	88fb      	ldrh	r3, [r7, #6]
 800cee2:	b2db      	uxtb	r3, r3
 800cee4:	2120      	movs	r1, #32
 800cee6:	4618      	mov	r0, r3
 800cee8:	f7fa fb5c 	bl	80075a4 <SENSOR_IO_Read>
 800ceec:	4603      	mov	r3, r0
 800ceee:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 800cef0:	7bfb      	ldrb	r3, [r7, #15]
 800cef2:	f023 0304 	bic.w	r3, r3, #4
 800cef6:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 800cef8:	7bfb      	ldrb	r3, [r7, #15]
 800cefa:	f043 0304 	orr.w	r3, r3, #4
 800cefe:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 800cf00:	7bfb      	ldrb	r3, [r7, #15]
 800cf02:	f023 0303 	bic.w	r3, r3, #3
 800cf06:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 800cf08:	7bfb      	ldrb	r3, [r7, #15]
 800cf0a:	f043 0301 	orr.w	r3, r3, #1
 800cf0e:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cf16:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 800cf18:	88fb      	ldrh	r3, [r7, #6]
 800cf1a:	b2db      	uxtb	r3, r3
 800cf1c:	7bfa      	ldrb	r2, [r7, #15]
 800cf1e:	2120      	movs	r1, #32
 800cf20:	4618      	mov	r0, r3
 800cf22:	f7fa fb25 	bl	8007570 <SENSOR_IO_Write>
}
 800cf26:	bf00      	nop
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b088      	sub	sp, #32
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	4603      	mov	r3, r0
 800cf36:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 800cf38:	88fb      	ldrh	r3, [r7, #6]
 800cf3a:	b2d8      	uxtb	r0, r3
 800cf3c:	f107 0208 	add.w	r2, r7, #8
 800cf40:	2302      	movs	r3, #2
 800cf42:	21b2      	movs	r1, #178	; 0xb2
 800cf44:	f7fa fb4c 	bl	80075e0 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 800cf48:	88fb      	ldrh	r3, [r7, #6]
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	2135      	movs	r1, #53	; 0x35
 800cf4e:	4618      	mov	r0, r3
 800cf50:	f7fa fb28 	bl	80075a4 <SENSOR_IO_Read>
 800cf54:	4603      	mov	r3, r0
 800cf56:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 800cf58:	7ffb      	ldrb	r3, [r7, #31]
 800cf5a:	021b      	lsls	r3, r3, #8
 800cf5c:	b21b      	sxth	r3, r3
 800cf5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf62:	b21a      	sxth	r2, r3
 800cf64:	7a3b      	ldrb	r3, [r7, #8]
 800cf66:	b21b      	sxth	r3, r3
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 800cf6c:	7ffb      	ldrb	r3, [r7, #31]
 800cf6e:	019b      	lsls	r3, r3, #6
 800cf70:	b21b      	sxth	r3, r3
 800cf72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800cf76:	b21a      	sxth	r2, r3
 800cf78:	7a7b      	ldrb	r3, [r7, #9]
 800cf7a:	b21b      	sxth	r3, r3
 800cf7c:	4313      	orrs	r3, r2
 800cf7e:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 800cf80:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800cf84:	10db      	asrs	r3, r3, #3
 800cf86:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 800cf88:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800cf8c:	10db      	asrs	r3, r3, #3
 800cf8e:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 800cf90:	88fb      	ldrh	r3, [r7, #6]
 800cf92:	b2d8      	uxtb	r0, r3
 800cf94:	f107 0208 	add.w	r2, r7, #8
 800cf98:	2304      	movs	r3, #4
 800cf9a:	21bc      	movs	r1, #188	; 0xbc
 800cf9c:	f7fa fb20 	bl	80075e0 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800cfa0:	7a7b      	ldrb	r3, [r7, #9]
 800cfa2:	021b      	lsls	r3, r3, #8
 800cfa4:	b21a      	sxth	r2, r3
 800cfa6:	7a3b      	ldrb	r3, [r7, #8]
 800cfa8:	b21b      	sxth	r3, r3
 800cfaa:	4313      	orrs	r3, r2
 800cfac:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 800cfae:	7afb      	ldrb	r3, [r7, #11]
 800cfb0:	021b      	lsls	r3, r3, #8
 800cfb2:	b21a      	sxth	r2, r3
 800cfb4:	7abb      	ldrb	r3, [r7, #10]
 800cfb6:	b21b      	sxth	r3, r3
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 800cfbc:	88fb      	ldrh	r3, [r7, #6]
 800cfbe:	b2d8      	uxtb	r0, r3
 800cfc0:	f107 0208 	add.w	r2, r7, #8
 800cfc4:	2302      	movs	r3, #2
 800cfc6:	21aa      	movs	r1, #170	; 0xaa
 800cfc8:	f7fa fb0a 	bl	80075e0 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 800cfcc:	7a7b      	ldrb	r3, [r7, #9]
 800cfce:	021b      	lsls	r3, r3, #8
 800cfd0:	b21a      	sxth	r2, r3
 800cfd2:	7a3b      	ldrb	r3, [r7, #8]
 800cfd4:	b21b      	sxth	r3, r3
 800cfd6:	4313      	orrs	r3, r2
 800cfd8:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 800cfda:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800cfde:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800cfe2:	1ad3      	subs	r3, r2, r3
 800cfe4:	ee07 3a90 	vmov	s15, r3
 800cfe8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800cfec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800cff0:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800cff4:	1ad3      	subs	r3, r2, r3
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cffe:	ee67 6a27 	vmul.f32	s13, s14, s15
 800d002:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800d006:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800d00a:	1ad3      	subs	r3, r2, r3
 800d00c:	ee07 3a90 	vmov	s15, r3
 800d010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d018:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d024:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d028:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	ee07 3a90 	vmov	s15, r3
}
 800d032:	eeb0 0a67 	vmov.f32	s0, s15
 800d036:	3720      	adds	r7, #32
 800d038:	46bd      	mov	sp, r7
 800d03a:	bd80      	pop	{r7, pc}

0800d03c <LIS3MDL_MagInit>:
  * @brief  Set LIS3MDL Magnetometer Initialization.
  * @param  LIS3MDL_InitStruct: pointer to a LIS3MDL_MagInitTypeDef structure 
  *         that contains the configuration setting for the LIS3MDL.
  */
void LIS3MDL_MagInit(MAGNETO_InitTypeDef LIS3MDL_InitStruct)
{  
 800d03c:	b580      	push	{r7, lr}
 800d03e:	b082      	sub	sp, #8
 800d040:	af00      	add	r7, sp, #0
 800d042:	463b      	mov	r3, r7
 800d044:	e883 0003 	stmia.w	r3, {r0, r1}
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG1, LIS3MDL_InitStruct.Register1);
 800d048:	783b      	ldrb	r3, [r7, #0]
 800d04a:	461a      	mov	r2, r3
 800d04c:	2120      	movs	r1, #32
 800d04e:	203c      	movs	r0, #60	; 0x3c
 800d050:	f7fa fa8e 	bl	8007570 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2, LIS3MDL_InitStruct.Register2);
 800d054:	787b      	ldrb	r3, [r7, #1]
 800d056:	461a      	mov	r2, r3
 800d058:	2121      	movs	r1, #33	; 0x21
 800d05a:	203c      	movs	r0, #60	; 0x3c
 800d05c:	f7fa fa88 	bl	8007570 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, LIS3MDL_InitStruct.Register3);
 800d060:	78bb      	ldrb	r3, [r7, #2]
 800d062:	461a      	mov	r2, r3
 800d064:	2122      	movs	r1, #34	; 0x22
 800d066:	203c      	movs	r0, #60	; 0x3c
 800d068:	f7fa fa82 	bl	8007570 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG4, LIS3MDL_InitStruct.Register4);
 800d06c:	78fb      	ldrb	r3, [r7, #3]
 800d06e:	461a      	mov	r2, r3
 800d070:	2123      	movs	r1, #35	; 0x23
 800d072:	203c      	movs	r0, #60	; 0x3c
 800d074:	f7fa fa7c 	bl	8007570 <SENSOR_IO_Write>
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG5, LIS3MDL_InitStruct.Register5);
 800d078:	793b      	ldrb	r3, [r7, #4]
 800d07a:	461a      	mov	r2, r3
 800d07c:	2124      	movs	r1, #36	; 0x24
 800d07e:	203c      	movs	r0, #60	; 0x3c
 800d080:	f7fa fa76 	bl	8007570 <SENSOR_IO_Write>
}
 800d084:	bf00      	nop
 800d086:	3708      	adds	r7, #8
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}

0800d08c <LIS3MDL_MagDeInit>:

/**
  * @brief  LIS3MDL Magnetometer De-initialization.
  */
void LIS3MDL_MagDeInit(void)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800d092:	2300      	movs	r3, #0
 800d094:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800d096:	2122      	movs	r1, #34	; 0x22
 800d098:	203c      	movs	r0, #60	; 0x3c
 800d09a:	f7fa fa83 	bl	80075a4 <SENSOR_IO_Read>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	71fb      	strb	r3, [r7, #7]

  /* Clear Selection Mode bits */
  ctrl &= ~(LIS3MDL_MAG_SELECTION_MODE);
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	f023 0303 	bic.w	r3, r3, #3
 800d0a8:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LIS3MDL_MAG_POWERDOWN2_MODE;
 800d0aa:	79fb      	ldrb	r3, [r7, #7]
 800d0ac:	f043 0303 	orr.w	r3, r3, #3
 800d0b0:	71fb      	strb	r3, [r7, #7]
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	2122      	movs	r1, #34	; 0x22
 800d0b8:	203c      	movs	r0, #60	; 0x3c
 800d0ba:	f7fa fa59 	bl	8007570 <SENSOR_IO_Write>
}
 800d0be:	bf00      	nop
 800d0c0:	3708      	adds	r7, #8
 800d0c2:	46bd      	mov	sp, r7
 800d0c4:	bd80      	pop	{r7, pc}

0800d0c6 <LIS3MDL_MagReadID>:
/**
  * @brief  Read LIS3MDL ID.
  * @retval ID 
  */
uint8_t LIS3MDL_MagReadID(void)
{
 800d0c6:	b580      	push	{r7, lr}
 800d0c8:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800d0ca:	f7fa fa47 	bl	800755c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_WHO_AM_I_REG));
 800d0ce:	210f      	movs	r1, #15
 800d0d0:	203c      	movs	r0, #60	; 0x3c
 800d0d2:	f7fa fa67 	bl	80075a4 <SENSOR_IO_Read>
 800d0d6:	4603      	mov	r3, r0
}
 800d0d8:	4618      	mov	r0, r3
 800d0da:	bd80      	pop	{r7, pc}

0800d0dc <LIS3MDL_MagLowPower>:
/**
  * @brief  Set/Unset Magnetometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LIS3MDL_MagLowPower(uint16_t status)
{  
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b084      	sub	sp, #16
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	73fb      	strb	r3, [r7, #15]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3);
 800d0ea:	2122      	movs	r1, #34	; 0x22
 800d0ec:	203c      	movs	r0, #60	; 0x3c
 800d0ee:	f7fa fa59 	bl	80075a4 <SENSOR_IO_Read>
 800d0f2:	4603      	mov	r3, r0
 800d0f4:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x20);
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
 800d0f8:	f023 0320 	bic.w	r3, r3, #32
 800d0fc:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800d0fe:	88fb      	ldrh	r3, [r7, #6]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d003      	beq.n	800d10c <LIS3MDL_MagLowPower+0x30>
  {
    ctrl |= LIS3MDL_MAG_CONFIG_LOWPOWER_MODE;
 800d104:	7bfb      	ldrb	r3, [r7, #15]
 800d106:	f043 0320 	orr.w	r3, r3, #32
 800d10a:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LIS3MDL_MAG_CONFIG_NORMAL_MODE;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG3, ctrl);  
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
 800d10e:	461a      	mov	r2, r3
 800d110:	2122      	movs	r1, #34	; 0x22
 800d112:	203c      	movs	r0, #60	; 0x3c
 800d114:	f7fa fa2c 	bl	8007570 <SENSOR_IO_Write>
}
 800d118:	bf00      	nop
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <LIS3MDL_MagReadXYZ>:
/**
  * @brief  Read X, Y & Z Magnetometer values 
  * @param  pData: Data out pointer
  */
void LIS3MDL_MagReadXYZ(int16_t* pData)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b088      	sub	sp, #32
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlm= 0;
 800d128:	2300      	movs	r3, #0
 800d12a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800d12c:	2300      	movs	r3, #0
 800d12e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800d130:	f04f 0300 	mov.w	r3, #0
 800d134:	61bb      	str	r3, [r7, #24]
  
  /* Read the magnetometer control register content */
  ctrlm = SENSOR_IO_Read(LIS3MDL_MAG_I2C_ADDRESS_HIGH, LIS3MDL_MAG_CTRL_REG2);
 800d136:	2121      	movs	r1, #33	; 0x21
 800d138:	203c      	movs	r0, #60	; 0x3c
 800d13a:	f7fa fa33 	bl	80075a4 <SENSOR_IO_Read>
 800d13e:	4603      	mov	r3, r0
 800d140:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LIS3MDL_MAG_I2C_ADDRESS_HIGH, (LIS3MDL_MAG_OUTX_L | 0x80), buffer, 6);
 800d142:	f107 0208 	add.w	r2, r7, #8
 800d146:	2306      	movs	r3, #6
 800d148:	21a8      	movs	r1, #168	; 0xa8
 800d14a:	203c      	movs	r0, #60	; 0x3c
 800d14c:	f7fa fa48 	bl	80075e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800d150:	2300      	movs	r3, #0
 800d152:	77fb      	strb	r3, [r7, #31]
 800d154:	e01f      	b.n	800d196 <LIS3MDL_MagReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800d156:	7ffb      	ldrb	r3, [r7, #31]
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	3301      	adds	r3, #1
 800d15c:	f107 0220 	add.w	r2, r7, #32
 800d160:	4413      	add	r3, r2
 800d162:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d166:	b29b      	uxth	r3, r3
 800d168:	021b      	lsls	r3, r3, #8
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	7ffb      	ldrb	r3, [r7, #31]
 800d16e:	005b      	lsls	r3, r3, #1
 800d170:	f107 0120 	add.w	r1, r7, #32
 800d174:	440b      	add	r3, r1
 800d176:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	4413      	add	r3, r2
 800d17e:	b29a      	uxth	r2, r3
 800d180:	7ffb      	ldrb	r3, [r7, #31]
 800d182:	b212      	sxth	r2, r2
 800d184:	005b      	lsls	r3, r3, #1
 800d186:	f107 0120 	add.w	r1, r7, #32
 800d18a:	440b      	add	r3, r1
 800d18c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800d190:	7ffb      	ldrb	r3, [r7, #31]
 800d192:	3301      	adds	r3, #1
 800d194:	77fb      	strb	r3, [r7, #31]
 800d196:	7ffb      	ldrb	r3, [r7, #31]
 800d198:	2b02      	cmp	r3, #2
 800d19a:	d9dc      	bls.n	800d156 <LIS3MDL_MagReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL_REG2 */
  switch(ctrlm & 0x60)
 800d19c:	7dfb      	ldrb	r3, [r7, #23]
 800d19e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1a2:	2b60      	cmp	r3, #96	; 0x60
 800d1a4:	d013      	beq.n	800d1ce <LIS3MDL_MagReadXYZ+0xae>
 800d1a6:	2b60      	cmp	r3, #96	; 0x60
 800d1a8:	dc14      	bgt.n	800d1d4 <LIS3MDL_MagReadXYZ+0xb4>
 800d1aa:	2b40      	cmp	r3, #64	; 0x40
 800d1ac:	d00c      	beq.n	800d1c8 <LIS3MDL_MagReadXYZ+0xa8>
 800d1ae:	2b40      	cmp	r3, #64	; 0x40
 800d1b0:	dc10      	bgt.n	800d1d4 <LIS3MDL_MagReadXYZ+0xb4>
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d002      	beq.n	800d1bc <LIS3MDL_MagReadXYZ+0x9c>
 800d1b6:	2b20      	cmp	r3, #32
 800d1b8:	d003      	beq.n	800d1c2 <LIS3MDL_MagReadXYZ+0xa2>
 800d1ba:	e00b      	b.n	800d1d4 <LIS3MDL_MagReadXYZ+0xb4>
  {
  case LIS3MDL_MAG_FS_4_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_4GA;
 800d1bc:	4b19      	ldr	r3, [pc, #100]	; (800d224 <LIS3MDL_MagReadXYZ+0x104>)
 800d1be:	61bb      	str	r3, [r7, #24]
    break;
 800d1c0:	e008      	b.n	800d1d4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_8_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_8GA;
 800d1c2:	4b19      	ldr	r3, [pc, #100]	; (800d228 <LIS3MDL_MagReadXYZ+0x108>)
 800d1c4:	61bb      	str	r3, [r7, #24]
    break;
 800d1c6:	e005      	b.n	800d1d4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_12_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_12GA;
 800d1c8:	4b18      	ldr	r3, [pc, #96]	; (800d22c <LIS3MDL_MagReadXYZ+0x10c>)
 800d1ca:	61bb      	str	r3, [r7, #24]
    break;
 800d1cc:	e002      	b.n	800d1d4 <LIS3MDL_MagReadXYZ+0xb4>
  case LIS3MDL_MAG_FS_16_GA:
    sensitivity = LIS3MDL_MAG_SENSITIVITY_FOR_FS_16GA;
 800d1ce:	4b18      	ldr	r3, [pc, #96]	; (800d230 <LIS3MDL_MagReadXYZ+0x110>)
 800d1d0:	61bb      	str	r3, [r7, #24]
    break;    
 800d1d2:	bf00      	nop
  }
  
  /* Obtain the mGauss value for the three axis */
  for(i=0; i<3; i++)
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	77fb      	strb	r3, [r7, #31]
 800d1d8:	e01b      	b.n	800d212 <LIS3MDL_MagReadXYZ+0xf2>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800d1da:	7ffb      	ldrb	r3, [r7, #31]
 800d1dc:	005b      	lsls	r3, r3, #1
 800d1de:	f107 0220 	add.w	r2, r7, #32
 800d1e2:	4413      	add	r3, r2
 800d1e4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800d1e8:	ee07 3a90 	vmov	s15, r3
 800d1ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d1f0:	edd7 7a06 	vldr	s15, [r7, #24]
 800d1f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d1f8:	7ffb      	ldrb	r3, [r7, #31]
 800d1fa:	005b      	lsls	r3, r3, #1
 800d1fc:	687a      	ldr	r2, [r7, #4]
 800d1fe:	4413      	add	r3, r2
 800d200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d204:	ee17 2a90 	vmov	r2, s15
 800d208:	b212      	sxth	r2, r2
 800d20a:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800d20c:	7ffb      	ldrb	r3, [r7, #31]
 800d20e:	3301      	adds	r3, #1
 800d210:	77fb      	strb	r3, [r7, #31]
 800d212:	7ffb      	ldrb	r3, [r7, #31]
 800d214:	2b02      	cmp	r3, #2
 800d216:	d9e0      	bls.n	800d1da <LIS3MDL_MagReadXYZ+0xba>
  }
}
 800d218:	bf00      	nop
 800d21a:	bf00      	nop
 800d21c:	3720      	adds	r7, #32
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	3e0f5c29 	.word	0x3e0f5c29
 800d228:	3e947ae1 	.word	0x3e947ae1
 800d22c:	3edc28f6 	.word	0x3edc28f6
 800d230:	3f147ae1 	.word	0x3f147ae1

0800d234 <LPS22HB_P_Init>:
  */
/**
  * @brief  Set LPS22HB pressure sensor Initialization.
  */
void LPS22HB_P_Init(uint16_t DeviceAddr)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b082      	sub	sp, #8
 800d238:	af00      	add	r7, sp, #0
 800d23a:	4603      	mov	r3, r0
 800d23c:	80fb      	strh	r3, [r7, #6]
  LPS22HB_Init(DeviceAddr);
 800d23e:	88fb      	ldrh	r3, [r7, #6]
 800d240:	4618      	mov	r0, r3
 800d242:	f000 f87b 	bl	800d33c <LPS22HB_Init>
}
 800d246:	bf00      	nop
 800d248:	3708      	adds	r7, #8
 800d24a:	46bd      	mov	sp, r7
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <LPS22HB_P_ReadID>:
/**
  * @brief  Read LPS22HB ID.
  * @retval ID 
  */
uint8_t LPS22HB_P_ReadID(uint16_t DeviceAddr)
{  
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	4603      	mov	r3, r0
 800d256:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d258:	2300      	movs	r3, #0
 800d25a:	73fb      	strb	r3, [r7, #15]

  /* IO interface initialization */
  SENSOR_IO_Init();  
 800d25c:	f7fa f97e 	bl	800755c <SENSOR_IO_Init>
  
  /* Read value at Who am I register address */
  ctrl = SENSOR_IO_Read(DeviceAddr, LPS22HB_WHO_AM_I_REG);
 800d260:	88fb      	ldrh	r3, [r7, #6]
 800d262:	b2db      	uxtb	r3, r3
 800d264:	210f      	movs	r1, #15
 800d266:	4618      	mov	r0, r3
 800d268:	f7fa f99c 	bl	80075a4 <SENSOR_IO_Read>
 800d26c:	4603      	mov	r3, r0
 800d26e:	73fb      	strb	r3, [r7, #15]
  
  return ctrl;
 800d270:	7bfb      	ldrb	r3, [r7, #15]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}
	...

0800d27c <LPS22HB_P_ReadPressure>:
/**
  * @brief  Read pressure value of LPS22HB
  * @retval pressure value
  */
float LPS22HB_P_ReadPressure(uint16_t DeviceAddr)
{
 800d27c:	b590      	push	{r4, r7, lr}
 800d27e:	b087      	sub	sp, #28
 800d280:	af00      	add	r7, sp, #0
 800d282:	4603      	mov	r3, r0
 800d284:	80fb      	strh	r3, [r7, #6]
  int32_t raw_press;
  uint8_t buffer[3];
  uint32_t tmp = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	617b      	str	r3, [r7, #20]
  uint8_t i;

  for(i = 0; i < 3; i++)
 800d28a:	2300      	movs	r3, #0
 800d28c:	74fb      	strb	r3, [r7, #19]
 800d28e:	e013      	b.n	800d2b8 <LPS22HB_P_ReadPressure+0x3c>
  {
    buffer[i] = SENSOR_IO_Read(DeviceAddr, (LPS22HB_PRESS_OUT_XL_REG + i));
 800d290:	88fb      	ldrh	r3, [r7, #6]
 800d292:	b2da      	uxtb	r2, r3
 800d294:	7cfb      	ldrb	r3, [r7, #19]
 800d296:	3328      	adds	r3, #40	; 0x28
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	7cfc      	ldrb	r4, [r7, #19]
 800d29c:	4619      	mov	r1, r3
 800d29e:	4610      	mov	r0, r2
 800d2a0:	f7fa f980 	bl	80075a4 <SENSOR_IO_Read>
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	f107 0318 	add.w	r3, r7, #24
 800d2ac:	4423      	add	r3, r4
 800d2ae:	f803 2c10 	strb.w	r2, [r3, #-16]
  for(i = 0; i < 3; i++)
 800d2b2:	7cfb      	ldrb	r3, [r7, #19]
 800d2b4:	3301      	adds	r3, #1
 800d2b6:	74fb      	strb	r3, [r7, #19]
 800d2b8:	7cfb      	ldrb	r3, [r7, #19]
 800d2ba:	2b02      	cmp	r3, #2
 800d2bc:	d9e8      	bls.n	800d290 <LPS22HB_P_ReadPressure+0x14>
  }

  /* Build the raw data */
  for(i = 0; i < 3; i++)
 800d2be:	2300      	movs	r3, #0
 800d2c0:	74fb      	strb	r3, [r7, #19]
 800d2c2:	e010      	b.n	800d2e6 <LPS22HB_P_ReadPressure+0x6a>
    tmp |= (((uint32_t)buffer[i]) << (8 * i));
 800d2c4:	7cfb      	ldrb	r3, [r7, #19]
 800d2c6:	f107 0218 	add.w	r2, r7, #24
 800d2ca:	4413      	add	r3, r2
 800d2cc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	7cfb      	ldrb	r3, [r7, #19]
 800d2d4:	00db      	lsls	r3, r3, #3
 800d2d6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2da:	697a      	ldr	r2, [r7, #20]
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	617b      	str	r3, [r7, #20]
  for(i = 0; i < 3; i++)
 800d2e0:	7cfb      	ldrb	r3, [r7, #19]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	74fb      	strb	r3, [r7, #19]
 800d2e6:	7cfb      	ldrb	r3, [r7, #19]
 800d2e8:	2b02      	cmp	r3, #2
 800d2ea:	d9eb      	bls.n	800d2c4 <LPS22HB_P_ReadPressure+0x48>

  /* convert the 2's complement 24 bit to 2's complement 32 bit */
  if(tmp & 0x00800000)
 800d2ec:	697b      	ldr	r3, [r7, #20]
 800d2ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <LPS22HB_P_ReadPressure+0x82>
    tmp |= 0xFF000000;
 800d2f6:	697b      	ldr	r3, [r7, #20]
 800d2f8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d2fc:	617b      	str	r3, [r7, #20]

  raw_press = ((int32_t)tmp);
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	60fb      	str	r3, [r7, #12]

  raw_press = (raw_press * 100) / 4096;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	2264      	movs	r2, #100	; 0x64
 800d306:	fb02 f303 	mul.w	r3, r2, r3
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	da01      	bge.n	800d312 <LPS22HB_P_ReadPressure+0x96>
 800d30e:	f603 73ff 	addw	r3, r3, #4095	; 0xfff
 800d312:	131b      	asrs	r3, r3, #12
 800d314:	60fb      	str	r3, [r7, #12]

  return (float)((float)raw_press / 100.0f);
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	ee07 3a90 	vmov	s15, r3
 800d31c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d320:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800d338 <LPS22HB_P_ReadPressure+0xbc>
 800d324:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d328:	eef0 7a66 	vmov.f32	s15, s13
}
 800d32c:	eeb0 0a67 	vmov.f32	s0, s15
 800d330:	371c      	adds	r7, #28
 800d332:	46bd      	mov	sp, r7
 800d334:	bd90      	pop	{r4, r7, pc}
 800d336:	bf00      	nop
 800d338:	42c80000 	.word	0x42c80000

0800d33c <LPS22HB_Init>:
  * @brief  Set LPS22HB Initialization.
  * @param  DeviceAddr: I2C device address
  * @retval None
  */
static void LPS22HB_Init(uint16_t DeviceAddr)
{
 800d33c:	b580      	push	{r7, lr}
 800d33e:	b084      	sub	sp, #16
 800d340:	af00      	add	r7, sp, #0
 800d342:	4603      	mov	r3, r0
 800d344:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;

  /* Set Power mode */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_RES_CONF_REG);
 800d346:	88fb      	ldrh	r3, [r7, #6]
 800d348:	b2db      	uxtb	r3, r3
 800d34a:	211a      	movs	r1, #26
 800d34c:	4618      	mov	r0, r3
 800d34e:	f7fa f929 	bl	80075a4 <SENSOR_IO_Read>
 800d352:	4603      	mov	r3, r0
 800d354:	73fb      	strb	r3, [r7, #15]

  tmp &= ~LPS22HB_LCEN_MASK;
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	f023 0301 	bic.w	r3, r3, #1
 800d35c:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set low current mode */
 800d35e:	7bfb      	ldrb	r3, [r7, #15]
 800d360:	f043 0301 	orr.w	r3, r3, #1
 800d364:	73fb      	strb	r3, [r7, #15]

  SENSOR_IO_Write(DeviceAddr, LPS22HB_RES_CONF_REG, tmp);
 800d366:	88fb      	ldrh	r3, [r7, #6]
 800d368:	b2db      	uxtb	r3, r3
 800d36a:	7bfa      	ldrb	r2, [r7, #15]
 800d36c:	211a      	movs	r1, #26
 800d36e:	4618      	mov	r0, r3
 800d370:	f7fa f8fe 	bl	8007570 <SENSOR_IO_Write>

  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, LPS22HB_CTRL_REG1);
 800d374:	88fb      	ldrh	r3, [r7, #6]
 800d376:	b2db      	uxtb	r3, r3
 800d378:	2110      	movs	r1, #16
 800d37a:	4618      	mov	r0, r3
 800d37c:	f7fa f912 	bl	80075a4 <SENSOR_IO_Read>
 800d380:	4603      	mov	r3, r0
 800d382:	73fb      	strb	r3, [r7, #15]

  /* Set default ODR */
  tmp &= ~LPS22HB_ODR_MASK;
 800d384:	7bfb      	ldrb	r3, [r7, #15]
 800d386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d38a:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x30; /* Set ODR to 25Hz */
 800d38c:	7bfb      	ldrb	r3, [r7, #15]
 800d38e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 800d392:	73fb      	strb	r3, [r7, #15]

  /* Enable BDU */
  tmp &= ~LPS22HB_BDU_MASK;
 800d394:	7bfb      	ldrb	r3, [r7, #15]
 800d396:	f023 0302 	bic.w	r3, r3, #2
 800d39a:	73fb      	strb	r3, [r7, #15]
  tmp |= ((uint8_t)0x02);
 800d39c:	7bfb      	ldrb	r3, [r7, #15]
 800d39e:	f043 0302 	orr.w	r3, r3, #2
 800d3a2:	73fb      	strb	r3, [r7, #15]

  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, LPS22HB_CTRL_REG1, tmp);
 800d3a4:	88fb      	ldrh	r3, [r7, #6]
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	7bfa      	ldrb	r2, [r7, #15]
 800d3aa:	2110      	movs	r1, #16
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f7fa f8df 	bl	8007570 <SENSOR_IO_Write>
}  
 800d3b2:	bf00      	nop
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}

0800d3ba <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 800d3ba:	b580      	push	{r7, lr}
 800d3bc:	b084      	sub	sp, #16
 800d3be:	af00      	add	r7, sp, #0
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800d3c8:	2110      	movs	r1, #16
 800d3ca:	20d4      	movs	r0, #212	; 0xd4
 800d3cc:	f7fa f8ea 	bl	80075a4 <SENSOR_IO_Read>
 800d3d0:	4603      	mov	r3, r0
 800d3d2:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800d3d4:	88fb      	ldrh	r3, [r7, #6]
 800d3d6:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800d3d8:	7bbb      	ldrb	r3, [r7, #14]
 800d3da:	f003 0303 	and.w	r3, r3, #3
 800d3de:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800d3e0:	7bba      	ldrb	r2, [r7, #14]
 800d3e2:	7bfb      	ldrb	r3, [r7, #15]
 800d3e4:	4313      	orrs	r3, r2
 800d3e6:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
 800d3ea:	461a      	mov	r2, r3
 800d3ec:	2110      	movs	r1, #16
 800d3ee:	20d4      	movs	r0, #212	; 0xd4
 800d3f0:	f7fa f8be 	bl	8007570 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800d3f4:	2112      	movs	r1, #18
 800d3f6:	20d4      	movs	r0, #212	; 0xd4
 800d3f8:	f7fa f8d4 	bl	80075a4 <SENSOR_IO_Read>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800d400:	88fb      	ldrh	r3, [r7, #6]
 800d402:	0a1b      	lsrs	r3, r3, #8
 800d404:	b29b      	uxth	r3, r3
 800d406:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800d408:	7bbb      	ldrb	r3, [r7, #14]
 800d40a:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800d40e:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800d410:	7bba      	ldrb	r2, [r7, #14]
 800d412:	7bfb      	ldrb	r3, [r7, #15]
 800d414:	4313      	orrs	r3, r2
 800d416:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800d418:	7bbb      	ldrb	r3, [r7, #14]
 800d41a:	461a      	mov	r2, r3
 800d41c:	2112      	movs	r1, #18
 800d41e:	20d4      	movs	r0, #212	; 0xd4
 800d420:	f7fa f8a6 	bl	8007570 <SENSOR_IO_Write>
}
 800d424:	bf00      	nop
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800d432:	2300      	movs	r3, #0
 800d434:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800d436:	2110      	movs	r1, #16
 800d438:	20d4      	movs	r0, #212	; 0xd4
 800d43a:	f7fa f8b3 	bl	80075a4 <SENSOR_IO_Read>
 800d43e:	4603      	mov	r3, r0
 800d440:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800d442:	79fb      	ldrb	r3, [r7, #7]
 800d444:	f003 030f 	and.w	r3, r3, #15
 800d448:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	461a      	mov	r2, r3
 800d44e:	2110      	movs	r1, #16
 800d450:	20d4      	movs	r0, #212	; 0xd4
 800d452:	f7fa f88d 	bl	8007570 <SENSOR_IO_Write>
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 800d45e:	b580      	push	{r7, lr}
 800d460:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 800d462:	f7fa f87b 	bl	800755c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 800d466:	210f      	movs	r1, #15
 800d468:	20d4      	movs	r0, #212	; 0xd4
 800d46a:	f7fa f89b 	bl	80075a4 <SENSOR_IO_Read>
 800d46e:	4603      	mov	r3, r0
}
 800d470:	4618      	mov	r0, r3
 800d472:	bd80      	pop	{r7, pc}

0800d474 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 800d474:	b580      	push	{r7, lr}
 800d476:	b084      	sub	sp, #16
 800d478:	af00      	add	r7, sp, #0
 800d47a:	4603      	mov	r3, r0
 800d47c:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d47e:	2300      	movs	r3, #0
 800d480:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 800d482:	2115      	movs	r1, #21
 800d484:	20d4      	movs	r0, #212	; 0xd4
 800d486:	f7fa f88d 	bl	80075a4 <SENSOR_IO_Read>
 800d48a:	4603      	mov	r3, r0
 800d48c:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 800d48e:	7bfb      	ldrb	r3, [r7, #15]
 800d490:	f023 0310 	bic.w	r3, r3, #16
 800d494:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800d496:	88fb      	ldrh	r3, [r7, #6]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 800d49c:	7bfb      	ldrb	r3, [r7, #15]
 800d49e:	f043 0310 	orr.w	r3, r3, #16
 800d4a2:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	2115      	movs	r1, #21
 800d4aa:	20d4      	movs	r0, #212	; 0xd4
 800d4ac:	f7fa f860 	bl	8007570 <SENSOR_IO_Write>
}
 800d4b0:	bf00      	nop
 800d4b2:	3710      	adds	r7, #16
 800d4b4:	46bd      	mov	sp, r7
 800d4b6:	bd80      	pop	{r7, pc}

0800d4b8 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b088      	sub	sp, #32
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 800d4c0:	2300      	movs	r3, #0
 800d4c2:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800d4c8:	f04f 0300 	mov.w	r3, #0
 800d4cc:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800d4ce:	2110      	movs	r1, #16
 800d4d0:	20d4      	movs	r0, #212	; 0xd4
 800d4d2:	f7fa f867 	bl	80075a4 <SENSOR_IO_Read>
 800d4d6:	4603      	mov	r3, r0
 800d4d8:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800d4da:	f107 0208 	add.w	r2, r7, #8
 800d4de:	2306      	movs	r3, #6
 800d4e0:	2128      	movs	r1, #40	; 0x28
 800d4e2:	20d4      	movs	r0, #212	; 0xd4
 800d4e4:	f7fa f87c 	bl	80075e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800d4e8:	2300      	movs	r3, #0
 800d4ea:	77fb      	strb	r3, [r7, #31]
 800d4ec:	e01f      	b.n	800d52e <LSM6DSL_AccReadXYZ+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800d4ee:	7ffb      	ldrb	r3, [r7, #31]
 800d4f0:	005b      	lsls	r3, r3, #1
 800d4f2:	3301      	adds	r3, #1
 800d4f4:	f107 0220 	add.w	r2, r7, #32
 800d4f8:	4413      	add	r3, r2
 800d4fa:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d4fe:	b29b      	uxth	r3, r3
 800d500:	021b      	lsls	r3, r3, #8
 800d502:	b29a      	uxth	r2, r3
 800d504:	7ffb      	ldrb	r3, [r7, #31]
 800d506:	005b      	lsls	r3, r3, #1
 800d508:	f107 0120 	add.w	r1, r7, #32
 800d50c:	440b      	add	r3, r1
 800d50e:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d512:	b29b      	uxth	r3, r3
 800d514:	4413      	add	r3, r2
 800d516:	b29a      	uxth	r2, r3
 800d518:	7ffb      	ldrb	r3, [r7, #31]
 800d51a:	b212      	sxth	r2, r2
 800d51c:	005b      	lsls	r3, r3, #1
 800d51e:	f107 0120 	add.w	r1, r7, #32
 800d522:	440b      	add	r3, r1
 800d524:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800d528:	7ffb      	ldrb	r3, [r7, #31]
 800d52a:	3301      	adds	r3, #1
 800d52c:	77fb      	strb	r3, [r7, #31]
 800d52e:	7ffb      	ldrb	r3, [r7, #31]
 800d530:	2b02      	cmp	r3, #2
 800d532:	d9dc      	bls.n	800d4ee <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800d534:	7dfb      	ldrb	r3, [r7, #23]
 800d536:	f003 030c 	and.w	r3, r3, #12
 800d53a:	2b0c      	cmp	r3, #12
 800d53c:	d828      	bhi.n	800d590 <LSM6DSL_AccReadXYZ+0xd8>
 800d53e:	a201      	add	r2, pc, #4	; (adr r2, 800d544 <LSM6DSL_AccReadXYZ+0x8c>)
 800d540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d544:	0800d579 	.word	0x0800d579
 800d548:	0800d591 	.word	0x0800d591
 800d54c:	0800d591 	.word	0x0800d591
 800d550:	0800d591 	.word	0x0800d591
 800d554:	0800d58b 	.word	0x0800d58b
 800d558:	0800d591 	.word	0x0800d591
 800d55c:	0800d591 	.word	0x0800d591
 800d560:	0800d591 	.word	0x0800d591
 800d564:	0800d57f 	.word	0x0800d57f
 800d568:	0800d591 	.word	0x0800d591
 800d56c:	0800d591 	.word	0x0800d591
 800d570:	0800d591 	.word	0x0800d591
 800d574:	0800d585 	.word	0x0800d585
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 800d578:	4b19      	ldr	r3, [pc, #100]	; (800d5e0 <LSM6DSL_AccReadXYZ+0x128>)
 800d57a:	61bb      	str	r3, [r7, #24]
    break;
 800d57c:	e008      	b.n	800d590 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 800d57e:	4b19      	ldr	r3, [pc, #100]	; (800d5e4 <LSM6DSL_AccReadXYZ+0x12c>)
 800d580:	61bb      	str	r3, [r7, #24]
    break;
 800d582:	e005      	b.n	800d590 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 800d584:	4b18      	ldr	r3, [pc, #96]	; (800d5e8 <LSM6DSL_AccReadXYZ+0x130>)
 800d586:	61bb      	str	r3, [r7, #24]
    break;
 800d588:	e002      	b.n	800d590 <LSM6DSL_AccReadXYZ+0xd8>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 800d58a:	4b18      	ldr	r3, [pc, #96]	; (800d5ec <LSM6DSL_AccReadXYZ+0x134>)
 800d58c:	61bb      	str	r3, [r7, #24]
    break;    
 800d58e:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800d590:	2300      	movs	r3, #0
 800d592:	77fb      	strb	r3, [r7, #31]
 800d594:	e01b      	b.n	800d5ce <LSM6DSL_AccReadXYZ+0x116>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 800d596:	7ffb      	ldrb	r3, [r7, #31]
 800d598:	005b      	lsls	r3, r3, #1
 800d59a:	f107 0220 	add.w	r2, r7, #32
 800d59e:	4413      	add	r3, r2
 800d5a0:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800d5a4:	ee07 3a90 	vmov	s15, r3
 800d5a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d5ac:	edd7 7a06 	vldr	s15, [r7, #24]
 800d5b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5b4:	7ffb      	ldrb	r3, [r7, #31]
 800d5b6:	005b      	lsls	r3, r3, #1
 800d5b8:	687a      	ldr	r2, [r7, #4]
 800d5ba:	4413      	add	r3, r2
 800d5bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d5c0:	ee17 2a90 	vmov	r2, s15
 800d5c4:	b212      	sxth	r2, r2
 800d5c6:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 800d5c8:	7ffb      	ldrb	r3, [r7, #31]
 800d5ca:	3301      	adds	r3, #1
 800d5cc:	77fb      	strb	r3, [r7, #31]
 800d5ce:	7ffb      	ldrb	r3, [r7, #31]
 800d5d0:	2b02      	cmp	r3, #2
 800d5d2:	d9e0      	bls.n	800d596 <LSM6DSL_AccReadXYZ+0xde>
  }
}
 800d5d4:	bf00      	nop
 800d5d6:	bf00      	nop
 800d5d8:	3720      	adds	r7, #32
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	3d79db23 	.word	0x3d79db23
 800d5e4:	3df9db23 	.word	0x3df9db23
 800d5e8:	3e79db23 	.word	0x3e79db23
 800d5ec:	3ef9db23 	.word	0x3ef9db23

0800d5f0 <LSM6DSL_GyroInit>:
  * @brief  Set LSM6DSL Gyroscope Initialization.
  * @param  InitStruct: pointer to a LSM6DSL_InitTypeDef structure 
  *         that contains the configuration setting for the LSM6DSL.
  */
void LSM6DSL_GyroInit(uint16_t InitStruct)
{  
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL2_G */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800d5fe:	2111      	movs	r1, #17
 800d600:	20d4      	movs	r0, #212	; 0xd4
 800d602:	f7f9 ffcf 	bl	80075a4 <SENSOR_IO_Read>
 800d606:	4603      	mov	r3, r0
 800d608:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL2_G register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800d60a:	88fb      	ldrh	r3, [r7, #6]
 800d60c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800d60e:	7bbb      	ldrb	r3, [r7, #14]
 800d610:	f003 0303 	and.w	r3, r3, #3
 800d614:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800d616:	7bba      	ldrb	r2, [r7, #14]
 800d618:	7bfb      	ldrb	r3, [r7, #15]
 800d61a:	4313      	orrs	r3, r2
 800d61c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, tmp);
 800d61e:	7bbb      	ldrb	r3, [r7, #14]
 800d620:	461a      	mov	r2, r3
 800d622:	2111      	movs	r1, #17
 800d624:	20d4      	movs	r0, #212	; 0xd4
 800d626:	f7f9 ffa3 	bl	8007570 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 800d62a:	2112      	movs	r1, #18
 800d62c:	20d4      	movs	r0, #212	; 0xd4
 800d62e:	f7f9 ffb9 	bl	80075a4 <SENSOR_IO_Read>
 800d632:	4603      	mov	r3, r0
 800d634:	73bb      	strb	r3, [r7, #14]

  /* Write value to GYRO MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800d636:	88fb      	ldrh	r3, [r7, #6]
 800d638:	0a1b      	lsrs	r3, r3, #8
 800d63a:	b29b      	uxth	r3, r3
 800d63c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 800d63e:	7bbb      	ldrb	r3, [r7, #14]
 800d640:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800d644:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800d646:	7bba      	ldrb	r2, [r7, #14]
 800d648:	7bfb      	ldrb	r3, [r7, #15]
 800d64a:	4313      	orrs	r3, r2
 800d64c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 800d64e:	7bbb      	ldrb	r3, [r7, #14]
 800d650:	461a      	mov	r2, r3
 800d652:	2112      	movs	r1, #18
 800d654:	20d4      	movs	r0, #212	; 0xd4
 800d656:	f7f9 ff8b 	bl	8007570 <SENSOR_IO_Write>
}
 800d65a:	bf00      	nop
 800d65c:	3710      	adds	r7, #16
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <LSM6DSL_GyroDeInit>:

/**
  * @brief LSM6DSL Gyroscope De-initialization
  */
void LSM6DSL_GyroDeInit(void)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b082      	sub	sp, #8
 800d666:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 800d668:	2300      	movs	r3, #0
 800d66a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800d66c:	2111      	movs	r1, #17
 800d66e:	20d4      	movs	r0, #212	; 0xd4
 800d670:	f7f9 ff98 	bl	80075a4 <SENSOR_IO_Read>
 800d674:	4603      	mov	r3, r0
 800d676:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 800d678:	79fb      	ldrb	r3, [r7, #7]
 800d67a:	f003 030f 	and.w	r3, r3, #15
 800d67e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G, ctrl);
 800d680:	79fb      	ldrb	r3, [r7, #7]
 800d682:	461a      	mov	r2, r3
 800d684:	2111      	movs	r1, #17
 800d686:	20d4      	movs	r0, #212	; 0xd4
 800d688:	f7f9 ff72 	bl	8007570 <SENSOR_IO_Write>
}
 800d68c:	bf00      	nop
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}

0800d694 <LSM6DSL_GyroReadID>:
/**
  * @brief  Read ID address of LSM6DSL
  * @retval ID 
  */
uint8_t LSM6DSL_GyroReadID(void)
{
 800d694:	b580      	push	{r7, lr}
 800d696:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();  
 800d698:	f7f9 ff60 	bl	800755c <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG);
 800d69c:	210f      	movs	r1, #15
 800d69e:	20d4      	movs	r0, #212	; 0xd4
 800d6a0:	f7f9 ff80 	bl	80075a4 <SENSOR_IO_Read>
 800d6a4:	4603      	mov	r3, r0
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <LSM6DSL_GyroLowPower>:
/**
  * @brief Set/Unset LSM6DSL Gyroscope in low power mode
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled 
  */
void LSM6DSL_GyroLowPower(uint16_t status)
{  
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b084      	sub	sp, #16
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800d6b4:	2300      	movs	r3, #0
 800d6b6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL7_G value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G);
 800d6b8:	2116      	movs	r1, #22
 800d6ba:	20d4      	movs	r0, #212	; 0xd4
 800d6bc:	f7f9 ff72 	bl	80075a4 <SENSOR_IO_Read>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x80);
 800d6c4:	7bfb      	ldrb	r3, [r7, #15]
 800d6c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d6ca:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 800d6cc:	88fb      	ldrh	r3, [r7, #6]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d003      	beq.n	800d6da <LSM6DSL_GyroLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_ENABLED;
 800d6d2:	7bfb      	ldrb	r3, [r7, #15]
 800d6d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d6d8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_G_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL7_G, ctrl);
 800d6da:	7bfb      	ldrb	r3, [r7, #15]
 800d6dc:	461a      	mov	r2, r3
 800d6de:	2116      	movs	r1, #22
 800d6e0:	20d4      	movs	r0, #212	; 0xd4
 800d6e2:	f7f9 ff45 	bl	8007570 <SENSOR_IO_Write>
}
 800d6e6:	bf00      	nop
 800d6e8:	3710      	adds	r7, #16
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
	...

0800d6f0 <LSM6DSL_GyroReadXYZAngRate>:
/**
* @brief  Calculate the LSM6DSL angular data.
* @param  pfData: Data out pointer
*/
void LSM6DSL_GyroReadXYZAngRate(float *pfData)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b088      	sub	sp, #32
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlg= 0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 800d700:	f04f 0300 	mov.w	r3, #0
 800d704:	61bb      	str	r3, [r7, #24]
  
  /* Read the gyro control register content */
  ctrlg = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL2_G);
 800d706:	2111      	movs	r1, #17
 800d708:	20d4      	movs	r0, #212	; 0xd4
 800d70a:	f7f9 ff4b 	bl	80075a4 <SENSOR_IO_Read>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_G, buffer, 6);
 800d712:	f107 0208 	add.w	r2, r7, #8
 800d716:	2306      	movs	r3, #6
 800d718:	2122      	movs	r1, #34	; 0x22
 800d71a:	20d4      	movs	r0, #212	; 0xd4
 800d71c:	f7f9 ff60 	bl	80075e0 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 800d720:	2300      	movs	r3, #0
 800d722:	77fb      	strb	r3, [r7, #31]
 800d724:	e01f      	b.n	800d766 <LSM6DSL_GyroReadXYZAngRate+0x76>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800d726:	7ffb      	ldrb	r3, [r7, #31]
 800d728:	005b      	lsls	r3, r3, #1
 800d72a:	3301      	adds	r3, #1
 800d72c:	f107 0220 	add.w	r2, r7, #32
 800d730:	4413      	add	r3, r2
 800d732:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d736:	b29b      	uxth	r3, r3
 800d738:	021b      	lsls	r3, r3, #8
 800d73a:	b29a      	uxth	r2, r3
 800d73c:	7ffb      	ldrb	r3, [r7, #31]
 800d73e:	005b      	lsls	r3, r3, #1
 800d740:	f107 0120 	add.w	r1, r7, #32
 800d744:	440b      	add	r3, r1
 800d746:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	4413      	add	r3, r2
 800d74e:	b29a      	uxth	r2, r3
 800d750:	7ffb      	ldrb	r3, [r7, #31]
 800d752:	b212      	sxth	r2, r2
 800d754:	005b      	lsls	r3, r3, #1
 800d756:	f107 0120 	add.w	r1, r7, #32
 800d75a:	440b      	add	r3, r1
 800d75c:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 800d760:	7ffb      	ldrb	r3, [r7, #31]
 800d762:	3301      	adds	r3, #1
 800d764:	77fb      	strb	r3, [r7, #31]
 800d766:	7ffb      	ldrb	r3, [r7, #31]
 800d768:	2b02      	cmp	r3, #2
 800d76a:	d9dc      	bls.n	800d726 <LSM6DSL_GyroReadXYZAngRate+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL2_G */
  switch(ctrlg & 0x0C)
 800d76c:	7dfb      	ldrb	r3, [r7, #23]
 800d76e:	f003 030c 	and.w	r3, r3, #12
 800d772:	2b0c      	cmp	r3, #12
 800d774:	d828      	bhi.n	800d7c8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
 800d776:	a201      	add	r2, pc, #4	; (adr r2, 800d77c <LSM6DSL_GyroReadXYZAngRate+0x8c>)
 800d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77c:	0800d7b1 	.word	0x0800d7b1
 800d780:	0800d7c9 	.word	0x0800d7c9
 800d784:	0800d7c9 	.word	0x0800d7c9
 800d788:	0800d7c9 	.word	0x0800d7c9
 800d78c:	0800d7b7 	.word	0x0800d7b7
 800d790:	0800d7c9 	.word	0x0800d7c9
 800d794:	0800d7c9 	.word	0x0800d7c9
 800d798:	0800d7c9 	.word	0x0800d7c9
 800d79c:	0800d7bd 	.word	0x0800d7bd
 800d7a0:	0800d7c9 	.word	0x0800d7c9
 800d7a4:	0800d7c9 	.word	0x0800d7c9
 800d7a8:	0800d7c9 	.word	0x0800d7c9
 800d7ac:	0800d7c3 	.word	0x0800d7c3
  {
  case LSM6DSL_GYRO_FS_245:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_245DPS;
 800d7b0:	4b17      	ldr	r3, [pc, #92]	; (800d810 <LSM6DSL_GyroReadXYZAngRate+0x120>)
 800d7b2:	61bb      	str	r3, [r7, #24]
    break;
 800d7b4:	e008      	b.n	800d7c8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_500:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_500DPS;
 800d7b6:	4b17      	ldr	r3, [pc, #92]	; (800d814 <LSM6DSL_GyroReadXYZAngRate+0x124>)
 800d7b8:	61bb      	str	r3, [r7, #24]
    break;
 800d7ba:	e005      	b.n	800d7c8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_1000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_1000DPS;
 800d7bc:	4b16      	ldr	r3, [pc, #88]	; (800d818 <LSM6DSL_GyroReadXYZAngRate+0x128>)
 800d7be:	61bb      	str	r3, [r7, #24]
    break;
 800d7c0:	e002      	b.n	800d7c8 <LSM6DSL_GyroReadXYZAngRate+0xd8>
  case LSM6DSL_GYRO_FS_2000:
    sensitivity = LSM6DSL_GYRO_SENSITIVITY_2000DPS;
 800d7c2:	4b16      	ldr	r3, [pc, #88]	; (800d81c <LSM6DSL_GyroReadXYZAngRate+0x12c>)
 800d7c4:	61bb      	str	r3, [r7, #24]
    break;    
 800d7c6:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	77fb      	strb	r3, [r7, #31]
 800d7cc:	e017      	b.n	800d7fe <LSM6DSL_GyroReadXYZAngRate+0x10e>
  {
    pfData[i]=( float )(pnRawData[i] * sensitivity);
 800d7ce:	7ffb      	ldrb	r3, [r7, #31]
 800d7d0:	005b      	lsls	r3, r3, #1
 800d7d2:	f107 0220 	add.w	r2, r7, #32
 800d7d6:	4413      	add	r3, r2
 800d7d8:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800d7dc:	ee07 3a90 	vmov	s15, r3
 800d7e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800d7e4:	7ffb      	ldrb	r3, [r7, #31]
 800d7e6:	009b      	lsls	r3, r3, #2
 800d7e8:	687a      	ldr	r2, [r7, #4]
 800d7ea:	4413      	add	r3, r2
 800d7ec:	edd7 7a06 	vldr	s15, [r7, #24]
 800d7f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d7f4:	edc3 7a00 	vstr	s15, [r3]
  for(i=0; i<3; i++)
 800d7f8:	7ffb      	ldrb	r3, [r7, #31]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	77fb      	strb	r3, [r7, #31]
 800d7fe:	7ffb      	ldrb	r3, [r7, #31]
 800d800:	2b02      	cmp	r3, #2
 800d802:	d9e4      	bls.n	800d7ce <LSM6DSL_GyroReadXYZAngRate+0xde>
  }
}
 800d804:	bf00      	nop
 800d806:	bf00      	nop
 800d808:	3720      	adds	r7, #32
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	410c0000 	.word	0x410c0000
 800d814:	418c0000 	.word	0x418c0000
 800d818:	420c0000 	.word	0x420c0000
 800d81c:	428c0000 	.word	0x428c0000

0800d820 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800d82a:	2003      	movs	r0, #3
 800d82c:	f000 f960 	bl	800daf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800d830:	2000      	movs	r0, #0
 800d832:	f000 f80d 	bl	800d850 <HAL_InitTick>
 800d836:	4603      	mov	r3, r0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	71fb      	strb	r3, [r7, #7]
 800d840:	e001      	b.n	800d846 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800d842:	f7f9 fa6b 	bl	8006d1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800d846:	79fb      	ldrb	r3, [r7, #7]
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3708      	adds	r7, #8
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd80      	pop	{r7, pc}

0800d850 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b084      	sub	sp, #16
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800d858:	2300      	movs	r3, #0
 800d85a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800d85c:	4b17      	ldr	r3, [pc, #92]	; (800d8bc <HAL_InitTick+0x6c>)
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d023      	beq.n	800d8ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800d864:	4b16      	ldr	r3, [pc, #88]	; (800d8c0 <HAL_InitTick+0x70>)
 800d866:	681a      	ldr	r2, [r3, #0]
 800d868:	4b14      	ldr	r3, [pc, #80]	; (800d8bc <HAL_InitTick+0x6c>)
 800d86a:	781b      	ldrb	r3, [r3, #0]
 800d86c:	4619      	mov	r1, r3
 800d86e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800d872:	fbb3 f3f1 	udiv	r3, r3, r1
 800d876:	fbb2 f3f3 	udiv	r3, r2, r3
 800d87a:	4618      	mov	r0, r3
 800d87c:	f000 f96d 	bl	800db5a <HAL_SYSTICK_Config>
 800d880:	4603      	mov	r3, r0
 800d882:	2b00      	cmp	r3, #0
 800d884:	d10f      	bne.n	800d8a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	2b0f      	cmp	r3, #15
 800d88a:	d809      	bhi.n	800d8a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800d88c:	2200      	movs	r2, #0
 800d88e:	6879      	ldr	r1, [r7, #4]
 800d890:	f04f 30ff 	mov.w	r0, #4294967295
 800d894:	f000 f937 	bl	800db06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800d898:	4a0a      	ldr	r2, [pc, #40]	; (800d8c4 <HAL_InitTick+0x74>)
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6013      	str	r3, [r2, #0]
 800d89e:	e007      	b.n	800d8b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800d8a0:	2301      	movs	r3, #1
 800d8a2:	73fb      	strb	r3, [r7, #15]
 800d8a4:	e004      	b.n	800d8b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	73fb      	strb	r3, [r7, #15]
 800d8aa:	e001      	b.n	800d8b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800d8b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}
 800d8ba:	bf00      	nop
 800d8bc:	2000092c 	.word	0x2000092c
 800d8c0:	200005a4 	.word	0x200005a4
 800d8c4:	20000928 	.word	0x20000928

0800d8c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d8c8:	b480      	push	{r7}
 800d8ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800d8cc:	4b06      	ldr	r3, [pc, #24]	; (800d8e8 <HAL_IncTick+0x20>)
 800d8ce:	781b      	ldrb	r3, [r3, #0]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	4b06      	ldr	r3, [pc, #24]	; (800d8ec <HAL_IncTick+0x24>)
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	4413      	add	r3, r2
 800d8d8:	4a04      	ldr	r2, [pc, #16]	; (800d8ec <HAL_IncTick+0x24>)
 800d8da:	6013      	str	r3, [r2, #0]
}
 800d8dc:	bf00      	nop
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr
 800d8e6:	bf00      	nop
 800d8e8:	2000092c 	.word	0x2000092c
 800d8ec:	20002c18 	.word	0x20002c18

0800d8f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	af00      	add	r7, sp, #0
  return uwTick;
 800d8f4:	4b03      	ldr	r3, [pc, #12]	; (800d904 <HAL_GetTick+0x14>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
}
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	46bd      	mov	sp, r7
 800d8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d900:	4770      	bx	lr
 800d902:	bf00      	nop
 800d904:	20002c18 	.word	0x20002c18

0800d908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d908:	b580      	push	{r7, lr}
 800d90a:	b084      	sub	sp, #16
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d910:	f7ff ffee 	bl	800d8f0 <HAL_GetTick>
 800d914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d920:	d005      	beq.n	800d92e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800d922:	4b0a      	ldr	r3, [pc, #40]	; (800d94c <HAL_Delay+0x44>)
 800d924:	781b      	ldrb	r3, [r3, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	4413      	add	r3, r2
 800d92c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800d92e:	bf00      	nop
 800d930:	f7ff ffde 	bl	800d8f0 <HAL_GetTick>
 800d934:	4602      	mov	r2, r0
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	1ad3      	subs	r3, r2, r3
 800d93a:	68fa      	ldr	r2, [r7, #12]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d8f7      	bhi.n	800d930 <HAL_Delay+0x28>
  {
  }
}
 800d940:	bf00      	nop
 800d942:	bf00      	nop
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
 800d94a:	bf00      	nop
 800d94c:	2000092c 	.word	0x2000092c

0800d950 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	f003 0307 	and.w	r3, r3, #7
 800d95e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800d960:	4b0c      	ldr	r3, [pc, #48]	; (800d994 <__NVIC_SetPriorityGrouping+0x44>)
 800d962:	68db      	ldr	r3, [r3, #12]
 800d964:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800d966:	68ba      	ldr	r2, [r7, #8]
 800d968:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800d96c:	4013      	ands	r3, r2
 800d96e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800d974:	68bb      	ldr	r3, [r7, #8]
 800d976:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800d978:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800d97c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d980:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800d982:	4a04      	ldr	r2, [pc, #16]	; (800d994 <__NVIC_SetPriorityGrouping+0x44>)
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	60d3      	str	r3, [r2, #12]
}
 800d988:	bf00      	nop
 800d98a:	3714      	adds	r7, #20
 800d98c:	46bd      	mov	sp, r7
 800d98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d992:	4770      	bx	lr
 800d994:	e000ed00 	.word	0xe000ed00

0800d998 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800d998:	b480      	push	{r7}
 800d99a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800d99c:	4b04      	ldr	r3, [pc, #16]	; (800d9b0 <__NVIC_GetPriorityGrouping+0x18>)
 800d99e:	68db      	ldr	r3, [r3, #12]
 800d9a0:	0a1b      	lsrs	r3, r3, #8
 800d9a2:	f003 0307 	and.w	r3, r3, #7
}
 800d9a6:	4618      	mov	r0, r3
 800d9a8:	46bd      	mov	sp, r7
 800d9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ae:	4770      	bx	lr
 800d9b0:	e000ed00 	.word	0xe000ed00

0800d9b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800d9b4:	b480      	push	{r7}
 800d9b6:	b083      	sub	sp, #12
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	4603      	mov	r3, r0
 800d9bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d9be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	db0b      	blt.n	800d9de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800d9c6:	79fb      	ldrb	r3, [r7, #7]
 800d9c8:	f003 021f 	and.w	r2, r3, #31
 800d9cc:	4907      	ldr	r1, [pc, #28]	; (800d9ec <__NVIC_EnableIRQ+0x38>)
 800d9ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9d2:	095b      	lsrs	r3, r3, #5
 800d9d4:	2001      	movs	r0, #1
 800d9d6:	fa00 f202 	lsl.w	r2, r0, r2
 800d9da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800d9de:	bf00      	nop
 800d9e0:	370c      	adds	r7, #12
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr
 800d9ea:	bf00      	nop
 800d9ec:	e000e100 	.word	0xe000e100

0800d9f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800d9f0:	b480      	push	{r7}
 800d9f2:	b083      	sub	sp, #12
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	6039      	str	r1, [r7, #0]
 800d9fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800d9fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da00:	2b00      	cmp	r3, #0
 800da02:	db0a      	blt.n	800da1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	b2da      	uxtb	r2, r3
 800da08:	490c      	ldr	r1, [pc, #48]	; (800da3c <__NVIC_SetPriority+0x4c>)
 800da0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800da0e:	0112      	lsls	r2, r2, #4
 800da10:	b2d2      	uxtb	r2, r2
 800da12:	440b      	add	r3, r1
 800da14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800da18:	e00a      	b.n	800da30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	b2da      	uxtb	r2, r3
 800da1e:	4908      	ldr	r1, [pc, #32]	; (800da40 <__NVIC_SetPriority+0x50>)
 800da20:	79fb      	ldrb	r3, [r7, #7]
 800da22:	f003 030f 	and.w	r3, r3, #15
 800da26:	3b04      	subs	r3, #4
 800da28:	0112      	lsls	r2, r2, #4
 800da2a:	b2d2      	uxtb	r2, r2
 800da2c:	440b      	add	r3, r1
 800da2e:	761a      	strb	r2, [r3, #24]
}
 800da30:	bf00      	nop
 800da32:	370c      	adds	r7, #12
 800da34:	46bd      	mov	sp, r7
 800da36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3a:	4770      	bx	lr
 800da3c:	e000e100 	.word	0xe000e100
 800da40:	e000ed00 	.word	0xe000ed00

0800da44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800da44:	b480      	push	{r7}
 800da46:	b089      	sub	sp, #36	; 0x24
 800da48:	af00      	add	r7, sp, #0
 800da4a:	60f8      	str	r0, [r7, #12]
 800da4c:	60b9      	str	r1, [r7, #8]
 800da4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f003 0307 	and.w	r3, r3, #7
 800da56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800da58:	69fb      	ldr	r3, [r7, #28]
 800da5a:	f1c3 0307 	rsb	r3, r3, #7
 800da5e:	2b04      	cmp	r3, #4
 800da60:	bf28      	it	cs
 800da62:	2304      	movcs	r3, #4
 800da64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	3304      	adds	r3, #4
 800da6a:	2b06      	cmp	r3, #6
 800da6c:	d902      	bls.n	800da74 <NVIC_EncodePriority+0x30>
 800da6e:	69fb      	ldr	r3, [r7, #28]
 800da70:	3b03      	subs	r3, #3
 800da72:	e000      	b.n	800da76 <NVIC_EncodePriority+0x32>
 800da74:	2300      	movs	r3, #0
 800da76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da78:	f04f 32ff 	mov.w	r2, #4294967295
 800da7c:	69bb      	ldr	r3, [r7, #24]
 800da7e:	fa02 f303 	lsl.w	r3, r2, r3
 800da82:	43da      	mvns	r2, r3
 800da84:	68bb      	ldr	r3, [r7, #8]
 800da86:	401a      	ands	r2, r3
 800da88:	697b      	ldr	r3, [r7, #20]
 800da8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800da8c:	f04f 31ff 	mov.w	r1, #4294967295
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	fa01 f303 	lsl.w	r3, r1, r3
 800da96:	43d9      	mvns	r1, r3
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800da9c:	4313      	orrs	r3, r2
         );
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3724      	adds	r7, #36	; 0x24
 800daa2:	46bd      	mov	sp, r7
 800daa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa8:	4770      	bx	lr
	...

0800daac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	3b01      	subs	r3, #1
 800dab8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800dabc:	d301      	bcc.n	800dac2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800dabe:	2301      	movs	r3, #1
 800dac0:	e00f      	b.n	800dae2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800dac2:	4a0a      	ldr	r2, [pc, #40]	; (800daec <SysTick_Config+0x40>)
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	3b01      	subs	r3, #1
 800dac8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800daca:	210f      	movs	r1, #15
 800dacc:	f04f 30ff 	mov.w	r0, #4294967295
 800dad0:	f7ff ff8e 	bl	800d9f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <SysTick_Config+0x40>)
 800dad6:	2200      	movs	r2, #0
 800dad8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800dada:	4b04      	ldr	r3, [pc, #16]	; (800daec <SysTick_Config+0x40>)
 800dadc:	2207      	movs	r2, #7
 800dade:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
 800daea:	bf00      	nop
 800daec:	e000e010 	.word	0xe000e010

0800daf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b082      	sub	sp, #8
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f7ff ff29 	bl	800d950 <__NVIC_SetPriorityGrouping>
}
 800dafe:	bf00      	nop
 800db00:	3708      	adds	r7, #8
 800db02:	46bd      	mov	sp, r7
 800db04:	bd80      	pop	{r7, pc}

0800db06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800db06:	b580      	push	{r7, lr}
 800db08:	b086      	sub	sp, #24
 800db0a:	af00      	add	r7, sp, #0
 800db0c:	4603      	mov	r3, r0
 800db0e:	60b9      	str	r1, [r7, #8]
 800db10:	607a      	str	r2, [r7, #4]
 800db12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800db14:	2300      	movs	r3, #0
 800db16:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800db18:	f7ff ff3e 	bl	800d998 <__NVIC_GetPriorityGrouping>
 800db1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800db1e:	687a      	ldr	r2, [r7, #4]
 800db20:	68b9      	ldr	r1, [r7, #8]
 800db22:	6978      	ldr	r0, [r7, #20]
 800db24:	f7ff ff8e 	bl	800da44 <NVIC_EncodePriority>
 800db28:	4602      	mov	r2, r0
 800db2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db2e:	4611      	mov	r1, r2
 800db30:	4618      	mov	r0, r3
 800db32:	f7ff ff5d 	bl	800d9f0 <__NVIC_SetPriority>
}
 800db36:	bf00      	nop
 800db38:	3718      	adds	r7, #24
 800db3a:	46bd      	mov	sp, r7
 800db3c:	bd80      	pop	{r7, pc}

0800db3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b082      	sub	sp, #8
 800db42:	af00      	add	r7, sp, #0
 800db44:	4603      	mov	r3, r0
 800db46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800db48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800db4c:	4618      	mov	r0, r3
 800db4e:	f7ff ff31 	bl	800d9b4 <__NVIC_EnableIRQ>
}
 800db52:	bf00      	nop
 800db54:	3708      	adds	r7, #8
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f7ff ffa2 	bl	800daac <SysTick_Config>
 800db68:	4603      	mov	r3, r0
}
 800db6a:	4618      	mov	r0, r3
 800db6c:	3708      	adds	r7, #8
 800db6e:	46bd      	mov	sp, r7
 800db70:	bd80      	pop	{r7, pc}

0800db72 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800db72:	b480      	push	{r7}
 800db74:	b085      	sub	sp, #20
 800db76:	af00      	add	r7, sp, #0
 800db78:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800db7a:	2300      	movs	r3, #0
 800db7c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800db84:	b2db      	uxtb	r3, r3
 800db86:	2b02      	cmp	r3, #2
 800db88:	d008      	beq.n	800db9c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	2204      	movs	r2, #4
 800db8e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	e022      	b.n	800dbe2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	681a      	ldr	r2, [r3, #0]
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f022 020e 	bic.w	r2, r2, #14
 800dbaa:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	681a      	ldr	r2, [r3, #0]
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	f022 0201 	bic.w	r2, r2, #1
 800dbba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc0:	f003 021c 	and.w	r2, r3, #28
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc8:	2101      	movs	r1, #1
 800dbca:	fa01 f202 	lsl.w	r2, r1, r2
 800dbce:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2201      	movs	r2, #1
 800dbd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800dbe0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800dbee:	b580      	push	{r7, lr}
 800dbf0:	b084      	sub	sp, #16
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800dc00:	b2db      	uxtb	r3, r3
 800dc02:	2b02      	cmp	r3, #2
 800dc04:	d005      	beq.n	800dc12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2204      	movs	r2, #4
 800dc0a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	73fb      	strb	r3, [r7, #15]
 800dc10:	e029      	b.n	800dc66 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f022 020e 	bic.w	r2, r2, #14
 800dc20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	681a      	ldr	r2, [r3, #0]
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	f022 0201 	bic.w	r2, r2, #1
 800dc30:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc36:	f003 021c 	and.w	r2, r3, #28
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3e:	2101      	movs	r1, #1
 800dc40:	fa01 f202 	lsl.w	r2, r1, r2
 800dc44:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	2201      	movs	r2, #1
 800dc4a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2200      	movs	r2, #0
 800dc52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d003      	beq.n	800dc66 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	4798      	blx	r3
    }
  }
  return status;
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3710      	adds	r7, #16
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800dc70:	b480      	push	{r7}
 800dc72:	b087      	sub	sp, #28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	6078      	str	r0, [r7, #4]
 800dc78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800dc7e:	e17f      	b.n	800df80 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	681a      	ldr	r2, [r3, #0]
 800dc84:	2101      	movs	r1, #1
 800dc86:	697b      	ldr	r3, [r7, #20]
 800dc88:	fa01 f303 	lsl.w	r3, r1, r3
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	f000 8171 	beq.w	800df7a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	685b      	ldr	r3, [r3, #4]
 800dc9c:	f003 0303 	and.w	r3, r3, #3
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d005      	beq.n	800dcb0 <HAL_GPIO_Init+0x40>
 800dca4:	683b      	ldr	r3, [r7, #0]
 800dca6:	685b      	ldr	r3, [r3, #4]
 800dca8:	f003 0303 	and.w	r3, r3, #3
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d130      	bne.n	800dd12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	689b      	ldr	r3, [r3, #8]
 800dcb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800dcb6:	697b      	ldr	r3, [r7, #20]
 800dcb8:	005b      	lsls	r3, r3, #1
 800dcba:	2203      	movs	r2, #3
 800dcbc:	fa02 f303 	lsl.w	r3, r2, r3
 800dcc0:	43db      	mvns	r3, r3
 800dcc2:	693a      	ldr	r2, [r7, #16]
 800dcc4:	4013      	ands	r3, r2
 800dcc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	68da      	ldr	r2, [r3, #12]
 800dccc:	697b      	ldr	r3, [r7, #20]
 800dcce:	005b      	lsls	r3, r3, #1
 800dcd0:	fa02 f303 	lsl.w	r3, r2, r3
 800dcd4:	693a      	ldr	r2, [r7, #16]
 800dcd6:	4313      	orrs	r3, r2
 800dcd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	693a      	ldr	r2, [r7, #16]
 800dcde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	685b      	ldr	r3, [r3, #4]
 800dce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800dce6:	2201      	movs	r2, #1
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	fa02 f303 	lsl.w	r3, r2, r3
 800dcee:	43db      	mvns	r3, r3
 800dcf0:	693a      	ldr	r2, [r7, #16]
 800dcf2:	4013      	ands	r3, r2
 800dcf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800dcf6:	683b      	ldr	r3, [r7, #0]
 800dcf8:	685b      	ldr	r3, [r3, #4]
 800dcfa:	091b      	lsrs	r3, r3, #4
 800dcfc:	f003 0201 	and.w	r2, r3, #1
 800dd00:	697b      	ldr	r3, [r7, #20]
 800dd02:	fa02 f303 	lsl.w	r3, r2, r3
 800dd06:	693a      	ldr	r2, [r7, #16]
 800dd08:	4313      	orrs	r3, r2
 800dd0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	693a      	ldr	r2, [r7, #16]
 800dd10:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800dd12:	683b      	ldr	r3, [r7, #0]
 800dd14:	685b      	ldr	r3, [r3, #4]
 800dd16:	f003 0303 	and.w	r3, r3, #3
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d118      	bne.n	800dd50 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800dd24:	2201      	movs	r2, #1
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	fa02 f303 	lsl.w	r3, r2, r3
 800dd2c:	43db      	mvns	r3, r3
 800dd2e:	693a      	ldr	r2, [r7, #16]
 800dd30:	4013      	ands	r3, r2
 800dd32:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	685b      	ldr	r3, [r3, #4]
 800dd38:	08db      	lsrs	r3, r3, #3
 800dd3a:	f003 0201 	and.w	r2, r3, #1
 800dd3e:	697b      	ldr	r3, [r7, #20]
 800dd40:	fa02 f303 	lsl.w	r3, r2, r3
 800dd44:	693a      	ldr	r2, [r7, #16]
 800dd46:	4313      	orrs	r3, r2
 800dd48:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	693a      	ldr	r2, [r7, #16]
 800dd4e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	685b      	ldr	r3, [r3, #4]
 800dd54:	f003 0303 	and.w	r3, r3, #3
 800dd58:	2b03      	cmp	r3, #3
 800dd5a:	d017      	beq.n	800dd8c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	68db      	ldr	r3, [r3, #12]
 800dd60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	005b      	lsls	r3, r3, #1
 800dd66:	2203      	movs	r2, #3
 800dd68:	fa02 f303 	lsl.w	r3, r2, r3
 800dd6c:	43db      	mvns	r3, r3
 800dd6e:	693a      	ldr	r2, [r7, #16]
 800dd70:	4013      	ands	r3, r2
 800dd72:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	689a      	ldr	r2, [r3, #8]
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	005b      	lsls	r3, r3, #1
 800dd7c:	fa02 f303 	lsl.w	r3, r2, r3
 800dd80:	693a      	ldr	r2, [r7, #16]
 800dd82:	4313      	orrs	r3, r2
 800dd84:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800dd8c:	683b      	ldr	r3, [r7, #0]
 800dd8e:	685b      	ldr	r3, [r3, #4]
 800dd90:	f003 0303 	and.w	r3, r3, #3
 800dd94:	2b02      	cmp	r3, #2
 800dd96:	d123      	bne.n	800dde0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	08da      	lsrs	r2, r3, #3
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	3208      	adds	r2, #8
 800dda0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dda4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f003 0307 	and.w	r3, r3, #7
 800ddac:	009b      	lsls	r3, r3, #2
 800ddae:	220f      	movs	r2, #15
 800ddb0:	fa02 f303 	lsl.w	r3, r2, r3
 800ddb4:	43db      	mvns	r3, r3
 800ddb6:	693a      	ldr	r2, [r7, #16]
 800ddb8:	4013      	ands	r3, r2
 800ddba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	691a      	ldr	r2, [r3, #16]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	f003 0307 	and.w	r3, r3, #7
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	fa02 f303 	lsl.w	r3, r2, r3
 800ddcc:	693a      	ldr	r2, [r7, #16]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	08da      	lsrs	r2, r3, #3
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	3208      	adds	r2, #8
 800ddda:	6939      	ldr	r1, [r7, #16]
 800dddc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800dde6:	697b      	ldr	r3, [r7, #20]
 800dde8:	005b      	lsls	r3, r3, #1
 800ddea:	2203      	movs	r2, #3
 800ddec:	fa02 f303 	lsl.w	r3, r2, r3
 800ddf0:	43db      	mvns	r3, r3
 800ddf2:	693a      	ldr	r2, [r7, #16]
 800ddf4:	4013      	ands	r3, r2
 800ddf6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800ddf8:	683b      	ldr	r3, [r7, #0]
 800ddfa:	685b      	ldr	r3, [r3, #4]
 800ddfc:	f003 0203 	and.w	r2, r3, #3
 800de00:	697b      	ldr	r3, [r7, #20]
 800de02:	005b      	lsls	r3, r3, #1
 800de04:	fa02 f303 	lsl.w	r3, r2, r3
 800de08:	693a      	ldr	r2, [r7, #16]
 800de0a:	4313      	orrs	r3, r2
 800de0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	693a      	ldr	r2, [r7, #16]
 800de12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	f000 80ac 	beq.w	800df7a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800de22:	4b5f      	ldr	r3, [pc, #380]	; (800dfa0 <HAL_GPIO_Init+0x330>)
 800de24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de26:	4a5e      	ldr	r2, [pc, #376]	; (800dfa0 <HAL_GPIO_Init+0x330>)
 800de28:	f043 0301 	orr.w	r3, r3, #1
 800de2c:	6613      	str	r3, [r2, #96]	; 0x60
 800de2e:	4b5c      	ldr	r3, [pc, #368]	; (800dfa0 <HAL_GPIO_Init+0x330>)
 800de30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	60bb      	str	r3, [r7, #8]
 800de38:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800de3a:	4a5a      	ldr	r2, [pc, #360]	; (800dfa4 <HAL_GPIO_Init+0x334>)
 800de3c:	697b      	ldr	r3, [r7, #20]
 800de3e:	089b      	lsrs	r3, r3, #2
 800de40:	3302      	adds	r3, #2
 800de42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de46:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	f003 0303 	and.w	r3, r3, #3
 800de4e:	009b      	lsls	r3, r3, #2
 800de50:	220f      	movs	r2, #15
 800de52:	fa02 f303 	lsl.w	r3, r2, r3
 800de56:	43db      	mvns	r3, r3
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	4013      	ands	r3, r2
 800de5c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800de64:	d025      	beq.n	800deb2 <HAL_GPIO_Init+0x242>
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	4a4f      	ldr	r2, [pc, #316]	; (800dfa8 <HAL_GPIO_Init+0x338>)
 800de6a:	4293      	cmp	r3, r2
 800de6c:	d01f      	beq.n	800deae <HAL_GPIO_Init+0x23e>
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	4a4e      	ldr	r2, [pc, #312]	; (800dfac <HAL_GPIO_Init+0x33c>)
 800de72:	4293      	cmp	r3, r2
 800de74:	d019      	beq.n	800deaa <HAL_GPIO_Init+0x23a>
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	4a4d      	ldr	r2, [pc, #308]	; (800dfb0 <HAL_GPIO_Init+0x340>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d013      	beq.n	800dea6 <HAL_GPIO_Init+0x236>
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	4a4c      	ldr	r2, [pc, #304]	; (800dfb4 <HAL_GPIO_Init+0x344>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d00d      	beq.n	800dea2 <HAL_GPIO_Init+0x232>
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	4a4b      	ldr	r2, [pc, #300]	; (800dfb8 <HAL_GPIO_Init+0x348>)
 800de8a:	4293      	cmp	r3, r2
 800de8c:	d007      	beq.n	800de9e <HAL_GPIO_Init+0x22e>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	4a4a      	ldr	r2, [pc, #296]	; (800dfbc <HAL_GPIO_Init+0x34c>)
 800de92:	4293      	cmp	r3, r2
 800de94:	d101      	bne.n	800de9a <HAL_GPIO_Init+0x22a>
 800de96:	2306      	movs	r3, #6
 800de98:	e00c      	b.n	800deb4 <HAL_GPIO_Init+0x244>
 800de9a:	2307      	movs	r3, #7
 800de9c:	e00a      	b.n	800deb4 <HAL_GPIO_Init+0x244>
 800de9e:	2305      	movs	r3, #5
 800dea0:	e008      	b.n	800deb4 <HAL_GPIO_Init+0x244>
 800dea2:	2304      	movs	r3, #4
 800dea4:	e006      	b.n	800deb4 <HAL_GPIO_Init+0x244>
 800dea6:	2303      	movs	r3, #3
 800dea8:	e004      	b.n	800deb4 <HAL_GPIO_Init+0x244>
 800deaa:	2302      	movs	r3, #2
 800deac:	e002      	b.n	800deb4 <HAL_GPIO_Init+0x244>
 800deae:	2301      	movs	r3, #1
 800deb0:	e000      	b.n	800deb4 <HAL_GPIO_Init+0x244>
 800deb2:	2300      	movs	r3, #0
 800deb4:	697a      	ldr	r2, [r7, #20]
 800deb6:	f002 0203 	and.w	r2, r2, #3
 800deba:	0092      	lsls	r2, r2, #2
 800debc:	4093      	lsls	r3, r2
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	4313      	orrs	r3, r2
 800dec2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800dec4:	4937      	ldr	r1, [pc, #220]	; (800dfa4 <HAL_GPIO_Init+0x334>)
 800dec6:	697b      	ldr	r3, [r7, #20]
 800dec8:	089b      	lsrs	r3, r3, #2
 800deca:	3302      	adds	r3, #2
 800decc:	693a      	ldr	r2, [r7, #16]
 800dece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ded2:	4b3b      	ldr	r3, [pc, #236]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800ded4:	689b      	ldr	r3, [r3, #8]
 800ded6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	43db      	mvns	r3, r3
 800dedc:	693a      	ldr	r2, [r7, #16]
 800dede:	4013      	ands	r3, r2
 800dee0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800dee2:	683b      	ldr	r3, [r7, #0]
 800dee4:	685b      	ldr	r3, [r3, #4]
 800dee6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800deea:	2b00      	cmp	r3, #0
 800deec:	d003      	beq.n	800def6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800deee:	693a      	ldr	r2, [r7, #16]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	4313      	orrs	r3, r2
 800def4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800def6:	4a32      	ldr	r2, [pc, #200]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800def8:	693b      	ldr	r3, [r7, #16]
 800defa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800defc:	4b30      	ldr	r3, [pc, #192]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800defe:	68db      	ldr	r3, [r3, #12]
 800df00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	43db      	mvns	r3, r3
 800df06:	693a      	ldr	r2, [r7, #16]
 800df08:	4013      	ands	r3, r2
 800df0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800df0c:	683b      	ldr	r3, [r7, #0]
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800df14:	2b00      	cmp	r3, #0
 800df16:	d003      	beq.n	800df20 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800df18:	693a      	ldr	r2, [r7, #16]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	4313      	orrs	r3, r2
 800df1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800df20:	4a27      	ldr	r2, [pc, #156]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800df22:	693b      	ldr	r3, [r7, #16]
 800df24:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800df26:	4b26      	ldr	r3, [pc, #152]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	43db      	mvns	r3, r3
 800df30:	693a      	ldr	r2, [r7, #16]
 800df32:	4013      	ands	r3, r2
 800df34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800df36:	683b      	ldr	r3, [r7, #0]
 800df38:	685b      	ldr	r3, [r3, #4]
 800df3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d003      	beq.n	800df4a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800df42:	693a      	ldr	r2, [r7, #16]
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	4313      	orrs	r3, r2
 800df48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800df4a:	4a1d      	ldr	r2, [pc, #116]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800df4c:	693b      	ldr	r3, [r7, #16]
 800df4e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800df50:	4b1b      	ldr	r3, [pc, #108]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	43db      	mvns	r3, r3
 800df5a:	693a      	ldr	r2, [r7, #16]
 800df5c:	4013      	ands	r3, r2
 800df5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	685b      	ldr	r3, [r3, #4]
 800df64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d003      	beq.n	800df74 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800df6c:	693a      	ldr	r2, [r7, #16]
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	4313      	orrs	r3, r2
 800df72:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800df74:	4a12      	ldr	r2, [pc, #72]	; (800dfc0 <HAL_GPIO_Init+0x350>)
 800df76:	693b      	ldr	r3, [r7, #16]
 800df78:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800df7a:	697b      	ldr	r3, [r7, #20]
 800df7c:	3301      	adds	r3, #1
 800df7e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	681a      	ldr	r2, [r3, #0]
 800df84:	697b      	ldr	r3, [r7, #20]
 800df86:	fa22 f303 	lsr.w	r3, r2, r3
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f47f ae78 	bne.w	800dc80 <HAL_GPIO_Init+0x10>
  }
}
 800df90:	bf00      	nop
 800df92:	bf00      	nop
 800df94:	371c      	adds	r7, #28
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	40021000 	.word	0x40021000
 800dfa4:	40010000 	.word	0x40010000
 800dfa8:	48000400 	.word	0x48000400
 800dfac:	48000800 	.word	0x48000800
 800dfb0:	48000c00 	.word	0x48000c00
 800dfb4:	48001000 	.word	0x48001000
 800dfb8:	48001400 	.word	0x48001400
 800dfbc:	48001800 	.word	0x48001800
 800dfc0:	40010400 	.word	0x40010400

0800dfc4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800dfc4:	b480      	push	{r7}
 800dfc6:	b087      	sub	sp, #28
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800dfd2:	e0cd      	b.n	800e170 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800dfd4:	2201      	movs	r2, #1
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	fa02 f303 	lsl.w	r3, r2, r3
 800dfdc:	683a      	ldr	r2, [r7, #0]
 800dfde:	4013      	ands	r3, r2
 800dfe0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800dfe2:	693b      	ldr	r3, [r7, #16]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 80c0 	beq.w	800e16a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800dfea:	4a68      	ldr	r2, [pc, #416]	; (800e18c <HAL_GPIO_DeInit+0x1c8>)
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	089b      	lsrs	r3, r3, #2
 800dff0:	3302      	adds	r3, #2
 800dff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dff6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	f003 0303 	and.w	r3, r3, #3
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	220f      	movs	r2, #15
 800e002:	fa02 f303 	lsl.w	r3, r2, r3
 800e006:	68fa      	ldr	r2, [r7, #12]
 800e008:	4013      	ands	r3, r2
 800e00a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800e012:	d025      	beq.n	800e060 <HAL_GPIO_DeInit+0x9c>
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	4a5e      	ldr	r2, [pc, #376]	; (800e190 <HAL_GPIO_DeInit+0x1cc>)
 800e018:	4293      	cmp	r3, r2
 800e01a:	d01f      	beq.n	800e05c <HAL_GPIO_DeInit+0x98>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	4a5d      	ldr	r2, [pc, #372]	; (800e194 <HAL_GPIO_DeInit+0x1d0>)
 800e020:	4293      	cmp	r3, r2
 800e022:	d019      	beq.n	800e058 <HAL_GPIO_DeInit+0x94>
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	4a5c      	ldr	r2, [pc, #368]	; (800e198 <HAL_GPIO_DeInit+0x1d4>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d013      	beq.n	800e054 <HAL_GPIO_DeInit+0x90>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4a5b      	ldr	r2, [pc, #364]	; (800e19c <HAL_GPIO_DeInit+0x1d8>)
 800e030:	4293      	cmp	r3, r2
 800e032:	d00d      	beq.n	800e050 <HAL_GPIO_DeInit+0x8c>
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	4a5a      	ldr	r2, [pc, #360]	; (800e1a0 <HAL_GPIO_DeInit+0x1dc>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d007      	beq.n	800e04c <HAL_GPIO_DeInit+0x88>
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	4a59      	ldr	r2, [pc, #356]	; (800e1a4 <HAL_GPIO_DeInit+0x1e0>)
 800e040:	4293      	cmp	r3, r2
 800e042:	d101      	bne.n	800e048 <HAL_GPIO_DeInit+0x84>
 800e044:	2306      	movs	r3, #6
 800e046:	e00c      	b.n	800e062 <HAL_GPIO_DeInit+0x9e>
 800e048:	2307      	movs	r3, #7
 800e04a:	e00a      	b.n	800e062 <HAL_GPIO_DeInit+0x9e>
 800e04c:	2305      	movs	r3, #5
 800e04e:	e008      	b.n	800e062 <HAL_GPIO_DeInit+0x9e>
 800e050:	2304      	movs	r3, #4
 800e052:	e006      	b.n	800e062 <HAL_GPIO_DeInit+0x9e>
 800e054:	2303      	movs	r3, #3
 800e056:	e004      	b.n	800e062 <HAL_GPIO_DeInit+0x9e>
 800e058:	2302      	movs	r3, #2
 800e05a:	e002      	b.n	800e062 <HAL_GPIO_DeInit+0x9e>
 800e05c:	2301      	movs	r3, #1
 800e05e:	e000      	b.n	800e062 <HAL_GPIO_DeInit+0x9e>
 800e060:	2300      	movs	r3, #0
 800e062:	697a      	ldr	r2, [r7, #20]
 800e064:	f002 0203 	and.w	r2, r2, #3
 800e068:	0092      	lsls	r2, r2, #2
 800e06a:	4093      	lsls	r3, r2
 800e06c:	68fa      	ldr	r2, [r7, #12]
 800e06e:	429a      	cmp	r2, r3
 800e070:	d132      	bne.n	800e0d8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800e072:	4b4d      	ldr	r3, [pc, #308]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e074:	681a      	ldr	r2, [r3, #0]
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	43db      	mvns	r3, r3
 800e07a:	494b      	ldr	r1, [pc, #300]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e07c:	4013      	ands	r3, r2
 800e07e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800e080:	4b49      	ldr	r3, [pc, #292]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e082:	685a      	ldr	r2, [r3, #4]
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	43db      	mvns	r3, r3
 800e088:	4947      	ldr	r1, [pc, #284]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e08a:	4013      	ands	r3, r2
 800e08c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800e08e:	4b46      	ldr	r3, [pc, #280]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e090:	68da      	ldr	r2, [r3, #12]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	43db      	mvns	r3, r3
 800e096:	4944      	ldr	r1, [pc, #272]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e098:	4013      	ands	r3, r2
 800e09a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800e09c:	4b42      	ldr	r3, [pc, #264]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e09e:	689a      	ldr	r2, [r3, #8]
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	43db      	mvns	r3, r3
 800e0a4:	4940      	ldr	r1, [pc, #256]	; (800e1a8 <HAL_GPIO_DeInit+0x1e4>)
 800e0a6:	4013      	ands	r3, r2
 800e0a8:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f003 0303 	and.w	r3, r3, #3
 800e0b0:	009b      	lsls	r3, r3, #2
 800e0b2:	220f      	movs	r2, #15
 800e0b4:	fa02 f303 	lsl.w	r3, r2, r3
 800e0b8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800e0ba:	4a34      	ldr	r2, [pc, #208]	; (800e18c <HAL_GPIO_DeInit+0x1c8>)
 800e0bc:	697b      	ldr	r3, [r7, #20]
 800e0be:	089b      	lsrs	r3, r3, #2
 800e0c0:	3302      	adds	r3, #2
 800e0c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	43da      	mvns	r2, r3
 800e0ca:	4830      	ldr	r0, [pc, #192]	; (800e18c <HAL_GPIO_DeInit+0x1c8>)
 800e0cc:	697b      	ldr	r3, [r7, #20]
 800e0ce:	089b      	lsrs	r3, r3, #2
 800e0d0:	400a      	ands	r2, r1
 800e0d2:	3302      	adds	r3, #2
 800e0d4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	005b      	lsls	r3, r3, #1
 800e0e0:	2103      	movs	r1, #3
 800e0e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e0e6:	431a      	orrs	r2, r3
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800e0ec:	697b      	ldr	r3, [r7, #20]
 800e0ee:	08da      	lsrs	r2, r3, #3
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	3208      	adds	r2, #8
 800e0f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e0f8:	697b      	ldr	r3, [r7, #20]
 800e0fa:	f003 0307 	and.w	r3, r3, #7
 800e0fe:	009b      	lsls	r3, r3, #2
 800e100:	220f      	movs	r2, #15
 800e102:	fa02 f303 	lsl.w	r3, r2, r3
 800e106:	43db      	mvns	r3, r3
 800e108:	697a      	ldr	r2, [r7, #20]
 800e10a:	08d2      	lsrs	r2, r2, #3
 800e10c:	4019      	ands	r1, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	3208      	adds	r2, #8
 800e112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	689a      	ldr	r2, [r3, #8]
 800e11a:	697b      	ldr	r3, [r7, #20]
 800e11c:	005b      	lsls	r3, r3, #1
 800e11e:	2103      	movs	r1, #3
 800e120:	fa01 f303 	lsl.w	r3, r1, r3
 800e124:	43db      	mvns	r3, r3
 800e126:	401a      	ands	r2, r3
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685a      	ldr	r2, [r3, #4]
 800e130:	2101      	movs	r1, #1
 800e132:	697b      	ldr	r3, [r7, #20]
 800e134:	fa01 f303 	lsl.w	r3, r1, r3
 800e138:	43db      	mvns	r3, r3
 800e13a:	401a      	ands	r2, r3
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	68da      	ldr	r2, [r3, #12]
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	005b      	lsls	r3, r3, #1
 800e148:	2103      	movs	r1, #3
 800e14a:	fa01 f303 	lsl.w	r3, r1, r3
 800e14e:	43db      	mvns	r3, r3
 800e150:	401a      	ands	r2, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15a:	2101      	movs	r1, #1
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	fa01 f303 	lsl.w	r3, r1, r3
 800e162:	43db      	mvns	r3, r3
 800e164:	401a      	ands	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	3301      	adds	r3, #1
 800e16e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800e170:	683a      	ldr	r2, [r7, #0]
 800e172:	697b      	ldr	r3, [r7, #20]
 800e174:	fa22 f303 	lsr.w	r3, r2, r3
 800e178:	2b00      	cmp	r3, #0
 800e17a:	f47f af2b 	bne.w	800dfd4 <HAL_GPIO_DeInit+0x10>
  }
}
 800e17e:	bf00      	nop
 800e180:	bf00      	nop
 800e182:	371c      	adds	r7, #28
 800e184:	46bd      	mov	sp, r7
 800e186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18a:	4770      	bx	lr
 800e18c:	40010000 	.word	0x40010000
 800e190:	48000400 	.word	0x48000400
 800e194:	48000800 	.word	0x48000800
 800e198:	48000c00 	.word	0x48000c00
 800e19c:	48001000 	.word	0x48001000
 800e1a0:	48001400 	.word	0x48001400
 800e1a4:	48001800 	.word	0x48001800
 800e1a8:	40010400 	.word	0x40010400

0800e1ac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800e1ac:	b480      	push	{r7}
 800e1ae:	b085      	sub	sp, #20
 800e1b0:	af00      	add	r7, sp, #0
 800e1b2:	6078      	str	r0, [r7, #4]
 800e1b4:	460b      	mov	r3, r1
 800e1b6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	691a      	ldr	r2, [r3, #16]
 800e1bc:	887b      	ldrh	r3, [r7, #2]
 800e1be:	4013      	ands	r3, r2
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d002      	beq.n	800e1ca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	73fb      	strb	r3, [r7, #15]
 800e1c8:	e001      	b.n	800e1ce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800e1ca:	2300      	movs	r3, #0
 800e1cc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800e1ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	3714      	adds	r7, #20
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1da:	4770      	bx	lr

0800e1dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	807b      	strh	r3, [r7, #2]
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800e1ec:	787b      	ldrb	r3, [r7, #1]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800e1f2:	887a      	ldrh	r2, [r7, #2]
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800e1f8:	e002      	b.n	800e200 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800e1fa:	887a      	ldrh	r2, [r7, #2]
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 800e200:	bf00      	nop
 800e202:	370c      	adds	r7, #12
 800e204:	46bd      	mov	sp, r7
 800e206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e20a:	4770      	bx	lr

0800e20c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800e20c:	b580      	push	{r7, lr}
 800e20e:	b082      	sub	sp, #8
 800e210:	af00      	add	r7, sp, #0
 800e212:	4603      	mov	r3, r0
 800e214:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800e216:	4b08      	ldr	r3, [pc, #32]	; (800e238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e218:	695a      	ldr	r2, [r3, #20]
 800e21a:	88fb      	ldrh	r3, [r7, #6]
 800e21c:	4013      	ands	r3, r2
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d006      	beq.n	800e230 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800e222:	4a05      	ldr	r2, [pc, #20]	; (800e238 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800e224:	88fb      	ldrh	r3, [r7, #6]
 800e226:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800e228:	88fb      	ldrh	r3, [r7, #6]
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7f8 fd62 	bl	8006cf4 <HAL_GPIO_EXTI_Callback>
  }
}
 800e230:	bf00      	nop
 800e232:	3708      	adds	r7, #8
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	40010400 	.word	0x40010400

0800e23c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b082      	sub	sp, #8
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d101      	bne.n	800e24e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e081      	b.n	800e352 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e254:	b2db      	uxtb	r3, r3
 800e256:	2b00      	cmp	r3, #0
 800e258:	d106      	bne.n	800e268 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	2200      	movs	r2, #0
 800e25e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800e262:	6878      	ldr	r0, [r7, #4]
 800e264:	f7f8 fd7e 	bl	8006d64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2224      	movs	r2, #36	; 0x24
 800e26c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	681a      	ldr	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f022 0201 	bic.w	r2, r2, #1
 800e27e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	685a      	ldr	r2, [r3, #4]
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800e28c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	689a      	ldr	r2, [r3, #8]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e29c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d107      	bne.n	800e2b6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	689a      	ldr	r2, [r3, #8]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e2b2:	609a      	str	r2, [r3, #8]
 800e2b4:	e006      	b.n	800e2c4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	689a      	ldr	r2, [r3, #8]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800e2c2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	68db      	ldr	r3, [r3, #12]
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d104      	bne.n	800e2d6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e2d4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	685b      	ldr	r3, [r3, #4]
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	6812      	ldr	r2, [r2, #0]
 800e2e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e2e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e2e8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	68da      	ldr	r2, [r3, #12]
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e2f8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	691a      	ldr	r2, [r3, #16]
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	695b      	ldr	r3, [r3, #20]
 800e302:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	699b      	ldr	r3, [r3, #24]
 800e30a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	430a      	orrs	r2, r1
 800e312:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	69d9      	ldr	r1, [r3, #28]
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a1a      	ldr	r2, [r3, #32]
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	430a      	orrs	r2, r1
 800e322:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	681a      	ldr	r2, [r3, #0]
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	f042 0201 	orr.w	r2, r2, #1
 800e332:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	2200      	movs	r2, #0
 800e338:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2220      	movs	r2, #32
 800e33e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2200      	movs	r2, #0
 800e346:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	2200      	movs	r2, #0
 800e34c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800e350:	2300      	movs	r3, #0
}
 800e352:	4618      	mov	r0, r3
 800e354:	3708      	adds	r7, #8
 800e356:	46bd      	mov	sp, r7
 800e358:	bd80      	pop	{r7, pc}

0800e35a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e35a:	b580      	push	{r7, lr}
 800e35c:	b082      	sub	sp, #8
 800e35e:	af00      	add	r7, sp, #0
 800e360:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d101      	bne.n	800e36c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e368:	2301      	movs	r3, #1
 800e36a:	e021      	b.n	800e3b0 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	2224      	movs	r2, #36	; 0x24
 800e370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	f022 0201 	bic.w	r2, r2, #1
 800e382:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	f7f8 fd4b 	bl	8006e20 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2200      	movs	r2, #0
 800e38e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	2200      	movs	r2, #0
 800e394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	2200      	movs	r2, #0
 800e39c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3708      	adds	r7, #8
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b088      	sub	sp, #32
 800e3bc:	af02      	add	r7, sp, #8
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	607a      	str	r2, [r7, #4]
 800e3c2:	461a      	mov	r2, r3
 800e3c4:	460b      	mov	r3, r1
 800e3c6:	817b      	strh	r3, [r7, #10]
 800e3c8:	4613      	mov	r3, r2
 800e3ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	2b20      	cmp	r3, #32
 800e3d6:	f040 80da 	bne.w	800e58e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e3e0:	2b01      	cmp	r3, #1
 800e3e2:	d101      	bne.n	800e3e8 <HAL_I2C_Master_Transmit+0x30>
 800e3e4:	2302      	movs	r3, #2
 800e3e6:	e0d3      	b.n	800e590 <HAL_I2C_Master_Transmit+0x1d8>
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	2201      	movs	r2, #1
 800e3ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e3f0:	f7ff fa7e 	bl	800d8f0 <HAL_GetTick>
 800e3f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e3f6:	697b      	ldr	r3, [r7, #20]
 800e3f8:	9300      	str	r3, [sp, #0]
 800e3fa:	2319      	movs	r3, #25
 800e3fc:	2201      	movs	r2, #1
 800e3fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e402:	68f8      	ldr	r0, [r7, #12]
 800e404:	f000 fdc4 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800e408:	4603      	mov	r3, r0
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d001      	beq.n	800e412 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800e40e:	2301      	movs	r3, #1
 800e410:	e0be      	b.n	800e590 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2221      	movs	r2, #33	; 0x21
 800e416:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	2210      	movs	r2, #16
 800e41e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	2200      	movs	r2, #0
 800e426:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	893a      	ldrh	r2, [r7, #8]
 800e432:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2200      	movs	r2, #0
 800e438:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e43a:	68fb      	ldr	r3, [r7, #12]
 800e43c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e43e:	b29b      	uxth	r3, r3
 800e440:	2bff      	cmp	r3, #255	; 0xff
 800e442:	d90e      	bls.n	800e462 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	22ff      	movs	r2, #255	; 0xff
 800e448:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e44a:	68fb      	ldr	r3, [r7, #12]
 800e44c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e44e:	b2da      	uxtb	r2, r3
 800e450:	8979      	ldrh	r1, [r7, #10]
 800e452:	4b51      	ldr	r3, [pc, #324]	; (800e598 <HAL_I2C_Master_Transmit+0x1e0>)
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e45a:	68f8      	ldr	r0, [r7, #12]
 800e45c:	f000 ffba 	bl	800f3d4 <I2C_TransferConfig>
 800e460:	e06c      	b.n	800e53c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e466:	b29a      	uxth	r2, r3
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e470:	b2da      	uxtb	r2, r3
 800e472:	8979      	ldrh	r1, [r7, #10]
 800e474:	4b48      	ldr	r3, [pc, #288]	; (800e598 <HAL_I2C_Master_Transmit+0x1e0>)
 800e476:	9300      	str	r3, [sp, #0]
 800e478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e47c:	68f8      	ldr	r0, [r7, #12]
 800e47e:	f000 ffa9 	bl	800f3d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800e482:	e05b      	b.n	800e53c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e484:	697a      	ldr	r2, [r7, #20]
 800e486:	6a39      	ldr	r1, [r7, #32]
 800e488:	68f8      	ldr	r0, [r7, #12]
 800e48a:	f000 fdc1 	bl	800f010 <I2C_WaitOnTXISFlagUntilTimeout>
 800e48e:	4603      	mov	r3, r0
 800e490:	2b00      	cmp	r3, #0
 800e492:	d001      	beq.n	800e498 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800e494:	2301      	movs	r3, #1
 800e496:	e07b      	b.n	800e590 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e49c:	781a      	ldrb	r2, [r3, #0]
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4a8:	1c5a      	adds	r2, r3, #1
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4b2:	b29b      	uxth	r3, r3
 800e4b4:	3b01      	subs	r3, #1
 800e4b6:	b29a      	uxth	r2, r3
 800e4b8:	68fb      	ldr	r3, [r7, #12]
 800e4ba:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4c0:	3b01      	subs	r3, #1
 800e4c2:	b29a      	uxth	r2, r3
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d034      	beq.n	800e53c <HAL_I2C_Master_Transmit+0x184>
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d130      	bne.n	800e53c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e4da:	697b      	ldr	r3, [r7, #20]
 800e4dc:	9300      	str	r3, [sp, #0]
 800e4de:	6a3b      	ldr	r3, [r7, #32]
 800e4e0:	2200      	movs	r2, #0
 800e4e2:	2180      	movs	r1, #128	; 0x80
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f000 fd53 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d001      	beq.n	800e4f4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800e4f0:	2301      	movs	r3, #1
 800e4f2:	e04d      	b.n	800e590 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	2bff      	cmp	r3, #255	; 0xff
 800e4fc:	d90e      	bls.n	800e51c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	22ff      	movs	r2, #255	; 0xff
 800e502:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	8979      	ldrh	r1, [r7, #10]
 800e50c:	2300      	movs	r3, #0
 800e50e:	9300      	str	r3, [sp, #0]
 800e510:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e514:	68f8      	ldr	r0, [r7, #12]
 800e516:	f000 ff5d 	bl	800f3d4 <I2C_TransferConfig>
 800e51a:	e00f      	b.n	800e53c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e520:	b29a      	uxth	r2, r3
 800e522:	68fb      	ldr	r3, [r7, #12]
 800e524:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e52a:	b2da      	uxtb	r2, r3
 800e52c:	8979      	ldrh	r1, [r7, #10]
 800e52e:	2300      	movs	r3, #0
 800e530:	9300      	str	r3, [sp, #0]
 800e532:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e536:	68f8      	ldr	r0, [r7, #12]
 800e538:	f000 ff4c 	bl	800f3d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e540:	b29b      	uxth	r3, r3
 800e542:	2b00      	cmp	r3, #0
 800e544:	d19e      	bne.n	800e484 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	6a39      	ldr	r1, [r7, #32]
 800e54a:	68f8      	ldr	r0, [r7, #12]
 800e54c:	f000 fda0 	bl	800f090 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e550:	4603      	mov	r3, r0
 800e552:	2b00      	cmp	r3, #0
 800e554:	d001      	beq.n	800e55a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800e556:	2301      	movs	r3, #1
 800e558:	e01a      	b.n	800e590 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e55a:	68fb      	ldr	r3, [r7, #12]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	2220      	movs	r2, #32
 800e560:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	6859      	ldr	r1, [r3, #4]
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	4b0b      	ldr	r3, [pc, #44]	; (800e59c <HAL_I2C_Master_Transmit+0x1e4>)
 800e56e:	400b      	ands	r3, r1
 800e570:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	2220      	movs	r2, #32
 800e576:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	2200      	movs	r2, #0
 800e57e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	2200      	movs	r2, #0
 800e586:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e58a:	2300      	movs	r3, #0
 800e58c:	e000      	b.n	800e590 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800e58e:	2302      	movs	r3, #2
  }
}
 800e590:	4618      	mov	r0, r3
 800e592:	3718      	adds	r7, #24
 800e594:	46bd      	mov	sp, r7
 800e596:	bd80      	pop	{r7, pc}
 800e598:	80002000 	.word	0x80002000
 800e59c:	fe00e800 	.word	0xfe00e800

0800e5a0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b088      	sub	sp, #32
 800e5a4:	af02      	add	r7, sp, #8
 800e5a6:	60f8      	str	r0, [r7, #12]
 800e5a8:	607a      	str	r2, [r7, #4]
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	460b      	mov	r3, r1
 800e5ae:	817b      	strh	r3, [r7, #10]
 800e5b0:	4613      	mov	r3, r2
 800e5b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e5ba:	b2db      	uxtb	r3, r3
 800e5bc:	2b20      	cmp	r3, #32
 800e5be:	f040 80db 	bne.w	800e778 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d101      	bne.n	800e5d0 <HAL_I2C_Master_Receive+0x30>
 800e5cc:	2302      	movs	r3, #2
 800e5ce:	e0d4      	b.n	800e77a <HAL_I2C_Master_Receive+0x1da>
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	2201      	movs	r2, #1
 800e5d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e5d8:	f7ff f98a 	bl	800d8f0 <HAL_GetTick>
 800e5dc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e5de:	697b      	ldr	r3, [r7, #20]
 800e5e0:	9300      	str	r3, [sp, #0]
 800e5e2:	2319      	movs	r3, #25
 800e5e4:	2201      	movs	r2, #1
 800e5e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e5ea:	68f8      	ldr	r0, [r7, #12]
 800e5ec:	f000 fcd0 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d001      	beq.n	800e5fa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	e0bf      	b.n	800e77a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
 800e5fc:	2222      	movs	r2, #34	; 0x22
 800e5fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2210      	movs	r2, #16
 800e606:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	2200      	movs	r2, #0
 800e60e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	687a      	ldr	r2, [r7, #4]
 800e614:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	893a      	ldrh	r2, [r7, #8]
 800e61a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	2200      	movs	r2, #0
 800e620:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e622:	68fb      	ldr	r3, [r7, #12]
 800e624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e626:	b29b      	uxth	r3, r3
 800e628:	2bff      	cmp	r3, #255	; 0xff
 800e62a:	d90e      	bls.n	800e64a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	22ff      	movs	r2, #255	; 0xff
 800e630:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e636:	b2da      	uxtb	r2, r3
 800e638:	8979      	ldrh	r1, [r7, #10]
 800e63a:	4b52      	ldr	r3, [pc, #328]	; (800e784 <HAL_I2C_Master_Receive+0x1e4>)
 800e63c:	9300      	str	r3, [sp, #0]
 800e63e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f000 fec6 	bl	800f3d4 <I2C_TransferConfig>
 800e648:	e06d      	b.n	800e726 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e64e:	b29a      	uxth	r2, r3
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e658:	b2da      	uxtb	r2, r3
 800e65a:	8979      	ldrh	r1, [r7, #10]
 800e65c:	4b49      	ldr	r3, [pc, #292]	; (800e784 <HAL_I2C_Master_Receive+0x1e4>)
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f000 feb5 	bl	800f3d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800e66a:	e05c      	b.n	800e726 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e66c:	697a      	ldr	r2, [r7, #20]
 800e66e:	6a39      	ldr	r1, [r7, #32]
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	f000 fd49 	bl	800f108 <I2C_WaitOnRXNEFlagUntilTimeout>
 800e676:	4603      	mov	r3, r0
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d001      	beq.n	800e680 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800e67c:	2301      	movs	r3, #1
 800e67e:	e07c      	b.n	800e77a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e686:	68fb      	ldr	r3, [r7, #12]
 800e688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e68a:	b2d2      	uxtb	r2, r2
 800e68c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e692:	1c5a      	adds	r2, r3, #1
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e69c:	3b01      	subs	r3, #1
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6a8:	b29b      	uxth	r3, r3
 800e6aa:	3b01      	subs	r3, #1
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d034      	beq.n	800e726 <HAL_I2C_Master_Receive+0x186>
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d130      	bne.n	800e726 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e6c4:	697b      	ldr	r3, [r7, #20]
 800e6c6:	9300      	str	r3, [sp, #0]
 800e6c8:	6a3b      	ldr	r3, [r7, #32]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	2180      	movs	r1, #128	; 0x80
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f000 fc5e 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d001      	beq.n	800e6de <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800e6da:	2301      	movs	r3, #1
 800e6dc:	e04d      	b.n	800e77a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	2bff      	cmp	r3, #255	; 0xff
 800e6e6:	d90e      	bls.n	800e706 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	22ff      	movs	r2, #255	; 0xff
 800e6ec:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	8979      	ldrh	r1, [r7, #10]
 800e6f6:	2300      	movs	r3, #0
 800e6f8:	9300      	str	r3, [sp, #0]
 800e6fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e6fe:	68f8      	ldr	r0, [r7, #12]
 800e700:	f000 fe68 	bl	800f3d4 <I2C_TransferConfig>
 800e704:	e00f      	b.n	800e726 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e70a:	b29a      	uxth	r2, r3
 800e70c:	68fb      	ldr	r3, [r7, #12]
 800e70e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e714:	b2da      	uxtb	r2, r3
 800e716:	8979      	ldrh	r1, [r7, #10]
 800e718:	2300      	movs	r3, #0
 800e71a:	9300      	str	r3, [sp, #0]
 800e71c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e720:	68f8      	ldr	r0, [r7, #12]
 800e722:	f000 fe57 	bl	800f3d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d19d      	bne.n	800e66c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e730:	697a      	ldr	r2, [r7, #20]
 800e732:	6a39      	ldr	r1, [r7, #32]
 800e734:	68f8      	ldr	r0, [r7, #12]
 800e736:	f000 fcab 	bl	800f090 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e73a:	4603      	mov	r3, r0
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d001      	beq.n	800e744 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800e740:	2301      	movs	r3, #1
 800e742:	e01a      	b.n	800e77a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	2220      	movs	r2, #32
 800e74a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6859      	ldr	r1, [r3, #4]
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <HAL_I2C_Master_Receive+0x1e8>)
 800e758:	400b      	ands	r3, r1
 800e75a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	2220      	movs	r2, #32
 800e760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	2200      	movs	r2, #0
 800e768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	2200      	movs	r2, #0
 800e770:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e774:	2300      	movs	r3, #0
 800e776:	e000      	b.n	800e77a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800e778:	2302      	movs	r3, #2
  }
}
 800e77a:	4618      	mov	r0, r3
 800e77c:	3718      	adds	r7, #24
 800e77e:	46bd      	mov	sp, r7
 800e780:	bd80      	pop	{r7, pc}
 800e782:	bf00      	nop
 800e784:	80002400 	.word	0x80002400
 800e788:	fe00e800 	.word	0xfe00e800

0800e78c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e78c:	b580      	push	{r7, lr}
 800e78e:	b088      	sub	sp, #32
 800e790:	af02      	add	r7, sp, #8
 800e792:	60f8      	str	r0, [r7, #12]
 800e794:	4608      	mov	r0, r1
 800e796:	4611      	mov	r1, r2
 800e798:	461a      	mov	r2, r3
 800e79a:	4603      	mov	r3, r0
 800e79c:	817b      	strh	r3, [r7, #10]
 800e79e:	460b      	mov	r3, r1
 800e7a0:	813b      	strh	r3, [r7, #8]
 800e7a2:	4613      	mov	r3, r2
 800e7a4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e7a6:	68fb      	ldr	r3, [r7, #12]
 800e7a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e7ac:	b2db      	uxtb	r3, r3
 800e7ae:	2b20      	cmp	r3, #32
 800e7b0:	f040 80f9 	bne.w	800e9a6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e7b4:	6a3b      	ldr	r3, [r7, #32]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d002      	beq.n	800e7c0 <HAL_I2C_Mem_Write+0x34>
 800e7ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d105      	bne.n	800e7cc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e7c0:	68fb      	ldr	r3, [r7, #12]
 800e7c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7c6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e0ed      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d101      	bne.n	800e7da <HAL_I2C_Mem_Write+0x4e>
 800e7d6:	2302      	movs	r3, #2
 800e7d8:	e0e6      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	2201      	movs	r2, #1
 800e7de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e7e2:	f7ff f885 	bl	800d8f0 <HAL_GetTick>
 800e7e6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e7e8:	697b      	ldr	r3, [r7, #20]
 800e7ea:	9300      	str	r3, [sp, #0]
 800e7ec:	2319      	movs	r3, #25
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800e7f4:	68f8      	ldr	r0, [r7, #12]
 800e7f6:	f000 fbcb 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	d001      	beq.n	800e804 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e800:	2301      	movs	r3, #1
 800e802:	e0d1      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e804:	68fb      	ldr	r3, [r7, #12]
 800e806:	2221      	movs	r2, #33	; 0x21
 800e808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	2240      	movs	r2, #64	; 0x40
 800e810:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	2200      	movs	r2, #0
 800e818:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6a3a      	ldr	r2, [r7, #32]
 800e81e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800e824:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	2200      	movs	r2, #0
 800e82a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e82c:	88f8      	ldrh	r0, [r7, #6]
 800e82e:	893a      	ldrh	r2, [r7, #8]
 800e830:	8979      	ldrh	r1, [r7, #10]
 800e832:	697b      	ldr	r3, [r7, #20]
 800e834:	9301      	str	r3, [sp, #4]
 800e836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e838:	9300      	str	r3, [sp, #0]
 800e83a:	4603      	mov	r3, r0
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f000 fadb 	bl	800edf8 <I2C_RequestMemoryWrite>
 800e842:	4603      	mov	r3, r0
 800e844:	2b00      	cmp	r3, #0
 800e846:	d005      	beq.n	800e854 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	2200      	movs	r2, #0
 800e84c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800e850:	2301      	movs	r3, #1
 800e852:	e0a9      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e858:	b29b      	uxth	r3, r3
 800e85a:	2bff      	cmp	r3, #255	; 0xff
 800e85c:	d90e      	bls.n	800e87c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	22ff      	movs	r2, #255	; 0xff
 800e862:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e864:	68fb      	ldr	r3, [r7, #12]
 800e866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e868:	b2da      	uxtb	r2, r3
 800e86a:	8979      	ldrh	r1, [r7, #10]
 800e86c:	2300      	movs	r3, #0
 800e86e:	9300      	str	r3, [sp, #0]
 800e870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e874:	68f8      	ldr	r0, [r7, #12]
 800e876:	f000 fdad 	bl	800f3d4 <I2C_TransferConfig>
 800e87a:	e00f      	b.n	800e89c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e880:	b29a      	uxth	r2, r3
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e886:	68fb      	ldr	r3, [r7, #12]
 800e888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e88a:	b2da      	uxtb	r2, r3
 800e88c:	8979      	ldrh	r1, [r7, #10]
 800e88e:	2300      	movs	r3, #0
 800e890:	9300      	str	r3, [sp, #0]
 800e892:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e896:	68f8      	ldr	r0, [r7, #12]
 800e898:	f000 fd9c 	bl	800f3d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e89c:	697a      	ldr	r2, [r7, #20]
 800e89e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8a0:	68f8      	ldr	r0, [r7, #12]
 800e8a2:	f000 fbb5 	bl	800f010 <I2C_WaitOnTXISFlagUntilTimeout>
 800e8a6:	4603      	mov	r3, r0
 800e8a8:	2b00      	cmp	r3, #0
 800e8aa:	d001      	beq.n	800e8b0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e8ac:	2301      	movs	r3, #1
 800e8ae:	e07b      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8b4:	781a      	ldrb	r2, [r3, #0]
 800e8b6:	68fb      	ldr	r3, [r7, #12]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8c0:	1c5a      	adds	r2, r3, #1
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8ca:	b29b      	uxth	r3, r3
 800e8cc:	3b01      	subs	r3, #1
 800e8ce:	b29a      	uxth	r2, r3
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8d8:	3b01      	subs	r3, #1
 800e8da:	b29a      	uxth	r2, r3
 800e8dc:	68fb      	ldr	r3, [r7, #12]
 800e8de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e8e0:	68fb      	ldr	r3, [r7, #12]
 800e8e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d034      	beq.n	800e954 <HAL_I2C_Mem_Write+0x1c8>
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d130      	bne.n	800e954 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e8f2:	697b      	ldr	r3, [r7, #20]
 800e8f4:	9300      	str	r3, [sp, #0]
 800e8f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8f8:	2200      	movs	r2, #0
 800e8fa:	2180      	movs	r1, #128	; 0x80
 800e8fc:	68f8      	ldr	r0, [r7, #12]
 800e8fe:	f000 fb47 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800e902:	4603      	mov	r3, r0
 800e904:	2b00      	cmp	r3, #0
 800e906:	d001      	beq.n	800e90c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e908:	2301      	movs	r3, #1
 800e90a:	e04d      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e910:	b29b      	uxth	r3, r3
 800e912:	2bff      	cmp	r3, #255	; 0xff
 800e914:	d90e      	bls.n	800e934 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	22ff      	movs	r2, #255	; 0xff
 800e91a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e920:	b2da      	uxtb	r2, r3
 800e922:	8979      	ldrh	r1, [r7, #10]
 800e924:	2300      	movs	r3, #0
 800e926:	9300      	str	r3, [sp, #0]
 800e928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e92c:	68f8      	ldr	r0, [r7, #12]
 800e92e:	f000 fd51 	bl	800f3d4 <I2C_TransferConfig>
 800e932:	e00f      	b.n	800e954 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e938:	b29a      	uxth	r2, r3
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e942:	b2da      	uxtb	r2, r3
 800e944:	8979      	ldrh	r1, [r7, #10]
 800e946:	2300      	movs	r3, #0
 800e948:	9300      	str	r3, [sp, #0]
 800e94a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800e94e:	68f8      	ldr	r0, [r7, #12]
 800e950:	f000 fd40 	bl	800f3d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e958:	b29b      	uxth	r3, r3
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d19e      	bne.n	800e89c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e95e:	697a      	ldr	r2, [r7, #20]
 800e960:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e962:	68f8      	ldr	r0, [r7, #12]
 800e964:	f000 fb94 	bl	800f090 <I2C_WaitOnSTOPFlagUntilTimeout>
 800e968:	4603      	mov	r3, r0
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d001      	beq.n	800e972 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e96e:	2301      	movs	r3, #1
 800e970:	e01a      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	2220      	movs	r2, #32
 800e978:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	6859      	ldr	r1, [r3, #4]
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	4b0a      	ldr	r3, [pc, #40]	; (800e9b0 <HAL_I2C_Mem_Write+0x224>)
 800e986:	400b      	ands	r3, r1
 800e988:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e98a:	68fb      	ldr	r3, [r7, #12]
 800e98c:	2220      	movs	r2, #32
 800e98e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	2200      	movs	r2, #0
 800e996:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	2200      	movs	r2, #0
 800e99e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	e000      	b.n	800e9a8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e9a6:	2302      	movs	r3, #2
  }
}
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	3718      	adds	r7, #24
 800e9ac:	46bd      	mov	sp, r7
 800e9ae:	bd80      	pop	{r7, pc}
 800e9b0:	fe00e800 	.word	0xfe00e800

0800e9b4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b088      	sub	sp, #32
 800e9b8:	af02      	add	r7, sp, #8
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	4608      	mov	r0, r1
 800e9be:	4611      	mov	r1, r2
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	817b      	strh	r3, [r7, #10]
 800e9c6:	460b      	mov	r3, r1
 800e9c8:	813b      	strh	r3, [r7, #8]
 800e9ca:	4613      	mov	r3, r2
 800e9cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	2b20      	cmp	r3, #32
 800e9d8:	f040 80fd 	bne.w	800ebd6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e9dc:	6a3b      	ldr	r3, [r7, #32]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d002      	beq.n	800e9e8 <HAL_I2C_Mem_Read+0x34>
 800e9e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d105      	bne.n	800e9f4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e9ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800e9f0:	2301      	movs	r3, #1
 800e9f2:	e0f1      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e9fa:	2b01      	cmp	r3, #1
 800e9fc:	d101      	bne.n	800ea02 <HAL_I2C_Mem_Read+0x4e>
 800e9fe:	2302      	movs	r3, #2
 800ea00:	e0ea      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	2201      	movs	r2, #1
 800ea06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ea0a:	f7fe ff71 	bl	800d8f0 <HAL_GetTick>
 800ea0e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ea10:	697b      	ldr	r3, [r7, #20]
 800ea12:	9300      	str	r3, [sp, #0]
 800ea14:	2319      	movs	r3, #25
 800ea16:	2201      	movs	r2, #1
 800ea18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ea1c:	68f8      	ldr	r0, [r7, #12]
 800ea1e:	f000 fab7 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d001      	beq.n	800ea2c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800ea28:	2301      	movs	r3, #1
 800ea2a:	e0d5      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	2222      	movs	r2, #34	; 0x22
 800ea30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	2240      	movs	r2, #64	; 0x40
 800ea38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	6a3a      	ldr	r2, [r7, #32]
 800ea46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ea4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	2200      	movs	r2, #0
 800ea52:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ea54:	88f8      	ldrh	r0, [r7, #6]
 800ea56:	893a      	ldrh	r2, [r7, #8]
 800ea58:	8979      	ldrh	r1, [r7, #10]
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	9301      	str	r3, [sp, #4]
 800ea5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea60:	9300      	str	r3, [sp, #0]
 800ea62:	4603      	mov	r3, r0
 800ea64:	68f8      	ldr	r0, [r7, #12]
 800ea66:	f000 fa1b 	bl	800eea0 <I2C_RequestMemoryRead>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d005      	beq.n	800ea7c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e0ad      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	2bff      	cmp	r3, #255	; 0xff
 800ea84:	d90e      	bls.n	800eaa4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ea86:	68fb      	ldr	r3, [r7, #12]
 800ea88:	22ff      	movs	r2, #255	; 0xff
 800ea8a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ea90:	b2da      	uxtb	r2, r3
 800ea92:	8979      	ldrh	r1, [r7, #10]
 800ea94:	4b52      	ldr	r3, [pc, #328]	; (800ebe0 <HAL_I2C_Mem_Read+0x22c>)
 800ea96:	9300      	str	r3, [sp, #0]
 800ea98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f000 fc99 	bl	800f3d4 <I2C_TransferConfig>
 800eaa2:	e00f      	b.n	800eac4 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eaa8:	b29a      	uxth	r2, r3
 800eaaa:	68fb      	ldr	r3, [r7, #12]
 800eaac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eab2:	b2da      	uxtb	r2, r3
 800eab4:	8979      	ldrh	r1, [r7, #10]
 800eab6:	4b4a      	ldr	r3, [pc, #296]	; (800ebe0 <HAL_I2C_Mem_Read+0x22c>)
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eabe:	68f8      	ldr	r0, [r7, #12]
 800eac0:	f000 fc88 	bl	800f3d4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800eac4:	697b      	ldr	r3, [r7, #20]
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eaca:	2200      	movs	r2, #0
 800eacc:	2104      	movs	r1, #4
 800eace:	68f8      	ldr	r0, [r7, #12]
 800ead0:	f000 fa5e 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800ead4:	4603      	mov	r3, r0
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d001      	beq.n	800eade <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800eada:	2301      	movs	r3, #1
 800eadc:	e07c      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eae4:	68fb      	ldr	r3, [r7, #12]
 800eae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eae8:	b2d2      	uxtb	r2, r2
 800eaea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaf0:	1c5a      	adds	r2, r3, #1
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eafa:	3b01      	subs	r3, #1
 800eafc:	b29a      	uxth	r2, r3
 800eafe:	68fb      	ldr	r3, [r7, #12]
 800eb00:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb06:	b29b      	uxth	r3, r3
 800eb08:	3b01      	subs	r3, #1
 800eb0a:	b29a      	uxth	r2, r3
 800eb0c:	68fb      	ldr	r3, [r7, #12]
 800eb0e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb14:	b29b      	uxth	r3, r3
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d034      	beq.n	800eb84 <HAL_I2C_Mem_Read+0x1d0>
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d130      	bne.n	800eb84 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	2200      	movs	r2, #0
 800eb2a:	2180      	movs	r1, #128	; 0x80
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f000 fa2f 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d001      	beq.n	800eb3c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800eb38:	2301      	movs	r3, #1
 800eb3a:	e04d      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb40:	b29b      	uxth	r3, r3
 800eb42:	2bff      	cmp	r3, #255	; 0xff
 800eb44:	d90e      	bls.n	800eb64 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	22ff      	movs	r2, #255	; 0xff
 800eb4a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb50:	b2da      	uxtb	r2, r3
 800eb52:	8979      	ldrh	r1, [r7, #10]
 800eb54:	2300      	movs	r3, #0
 800eb56:	9300      	str	r3, [sp, #0]
 800eb58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eb5c:	68f8      	ldr	r0, [r7, #12]
 800eb5e:	f000 fc39 	bl	800f3d4 <I2C_TransferConfig>
 800eb62:	e00f      	b.n	800eb84 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb68:	b29a      	uxth	r2, r3
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb72:	b2da      	uxtb	r2, r3
 800eb74:	8979      	ldrh	r1, [r7, #10]
 800eb76:	2300      	movs	r3, #0
 800eb78:	9300      	str	r3, [sp, #0]
 800eb7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800eb7e:	68f8      	ldr	r0, [r7, #12]
 800eb80:	f000 fc28 	bl	800f3d4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800eb88:	b29b      	uxth	r3, r3
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d19a      	bne.n	800eac4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800eb8e:	697a      	ldr	r2, [r7, #20]
 800eb90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800eb92:	68f8      	ldr	r0, [r7, #12]
 800eb94:	f000 fa7c 	bl	800f090 <I2C_WaitOnSTOPFlagUntilTimeout>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d001      	beq.n	800eba2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e01a      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	2220      	movs	r2, #32
 800eba8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	6859      	ldr	r1, [r3, #4]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	4b0b      	ldr	r3, [pc, #44]	; (800ebe4 <HAL_I2C_Mem_Read+0x230>)
 800ebb6:	400b      	ands	r3, r1
 800ebb8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2220      	movs	r2, #32
 800ebbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2200      	movs	r2, #0
 800ebc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2200      	movs	r2, #0
 800ebce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
 800ebd4:	e000      	b.n	800ebd8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ebd6:	2302      	movs	r3, #2
  }
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3718      	adds	r7, #24
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}
 800ebe0:	80002400 	.word	0x80002400
 800ebe4:	fe00e800 	.word	0xfe00e800

0800ebe8 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b08a      	sub	sp, #40	; 0x28
 800ebec:	af02      	add	r7, sp, #8
 800ebee:	60f8      	str	r0, [r7, #12]
 800ebf0:	607a      	str	r2, [r7, #4]
 800ebf2:	603b      	str	r3, [r7, #0]
 800ebf4:	460b      	mov	r3, r1
 800ebf6:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec02:	b2db      	uxtb	r3, r3
 800ec04:	2b20      	cmp	r3, #32
 800ec06:	f040 80f1 	bne.w	800edec <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ec18:	d101      	bne.n	800ec1e <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800ec1a:	2302      	movs	r3, #2
 800ec1c:	e0e7      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec24:	2b01      	cmp	r3, #1
 800ec26:	d101      	bne.n	800ec2c <HAL_I2C_IsDeviceReady+0x44>
 800ec28:	2302      	movs	r3, #2
 800ec2a:	e0e0      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2201      	movs	r2, #1
 800ec30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	2224      	movs	r2, #36	; 0x24
 800ec38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	2200      	movs	r2, #0
 800ec40:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	68db      	ldr	r3, [r3, #12]
 800ec46:	2b01      	cmp	r3, #1
 800ec48:	d107      	bne.n	800ec5a <HAL_I2C_IsDeviceReady+0x72>
 800ec4a:	897b      	ldrh	r3, [r7, #10]
 800ec4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec50:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ec54:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800ec58:	e004      	b.n	800ec64 <HAL_I2C_IsDeviceReady+0x7c>
 800ec5a:	897b      	ldrh	r3, [r7, #10]
 800ec5c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ec60:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800ec64:	68fa      	ldr	r2, [r7, #12]
 800ec66:	6812      	ldr	r2, [r2, #0]
 800ec68:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800ec6a:	f7fe fe41 	bl	800d8f0 <HAL_GetTick>
 800ec6e:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	699b      	ldr	r3, [r3, #24]
 800ec76:	f003 0320 	and.w	r3, r3, #32
 800ec7a:	2b20      	cmp	r3, #32
 800ec7c:	bf0c      	ite	eq
 800ec7e:	2301      	moveq	r3, #1
 800ec80:	2300      	movne	r3, #0
 800ec82:	b2db      	uxtb	r3, r3
 800ec84:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	699b      	ldr	r3, [r3, #24]
 800ec8c:	f003 0310 	and.w	r3, r3, #16
 800ec90:	2b10      	cmp	r3, #16
 800ec92:	bf0c      	ite	eq
 800ec94:	2301      	moveq	r3, #1
 800ec96:	2300      	movne	r3, #0
 800ec98:	b2db      	uxtb	r3, r3
 800ec9a:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ec9c:	e034      	b.n	800ed08 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800ec9e:	683b      	ldr	r3, [r7, #0]
 800eca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eca4:	d01a      	beq.n	800ecdc <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800eca6:	f7fe fe23 	bl	800d8f0 <HAL_GetTick>
 800ecaa:	4602      	mov	r2, r0
 800ecac:	69bb      	ldr	r3, [r7, #24]
 800ecae:	1ad3      	subs	r3, r2, r3
 800ecb0:	683a      	ldr	r2, [r7, #0]
 800ecb2:	429a      	cmp	r2, r3
 800ecb4:	d302      	bcc.n	800ecbc <HAL_I2C_IsDeviceReady+0xd4>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d10f      	bne.n	800ecdc <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	2220      	movs	r2, #32
 800ecc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ecc8:	f043 0220 	orr.w	r2, r3, #32
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	2200      	movs	r2, #0
 800ecd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800ecd8:	2301      	movs	r3, #1
 800ecda:	e088      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	699b      	ldr	r3, [r3, #24]
 800ece2:	f003 0320 	and.w	r3, r3, #32
 800ece6:	2b20      	cmp	r3, #32
 800ece8:	bf0c      	ite	eq
 800ecea:	2301      	moveq	r3, #1
 800ecec:	2300      	movne	r3, #0
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	699b      	ldr	r3, [r3, #24]
 800ecf8:	f003 0310 	and.w	r3, r3, #16
 800ecfc:	2b10      	cmp	r3, #16
 800ecfe:	bf0c      	ite	eq
 800ed00:	2301      	moveq	r3, #1
 800ed02:	2300      	movne	r3, #0
 800ed04:	b2db      	uxtb	r3, r3
 800ed06:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800ed08:	7ffb      	ldrb	r3, [r7, #31]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d102      	bne.n	800ed14 <HAL_I2C_IsDeviceReady+0x12c>
 800ed0e:	7fbb      	ldrb	r3, [r7, #30]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d0c4      	beq.n	800ec9e <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800ed14:	68fb      	ldr	r3, [r7, #12]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	699b      	ldr	r3, [r3, #24]
 800ed1a:	f003 0310 	and.w	r3, r3, #16
 800ed1e:	2b10      	cmp	r3, #16
 800ed20:	d01a      	beq.n	800ed58 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ed22:	69bb      	ldr	r3, [r7, #24]
 800ed24:	9300      	str	r3, [sp, #0]
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	2200      	movs	r2, #0
 800ed2a:	2120      	movs	r1, #32
 800ed2c:	68f8      	ldr	r0, [r7, #12]
 800ed2e:	f000 f92f 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800ed32:	4603      	mov	r3, r0
 800ed34:	2b00      	cmp	r3, #0
 800ed36:	d001      	beq.n	800ed3c <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e058      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	2220      	movs	r2, #32
 800ed42:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800ed44:	68fb      	ldr	r3, [r7, #12]
 800ed46:	2220      	movs	r2, #32
 800ed48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	2200      	movs	r2, #0
 800ed50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 800ed54:	2300      	movs	r3, #0
 800ed56:	e04a      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	9300      	str	r3, [sp, #0]
 800ed5c:	683b      	ldr	r3, [r7, #0]
 800ed5e:	2200      	movs	r2, #0
 800ed60:	2120      	movs	r1, #32
 800ed62:	68f8      	ldr	r0, [r7, #12]
 800ed64:	f000 f914 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d001      	beq.n	800ed72 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e03d      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	2210      	movs	r2, #16
 800ed78:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	2220      	movs	r2, #32
 800ed80:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800ed82:	697b      	ldr	r3, [r7, #20]
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	429a      	cmp	r2, r3
 800ed88:	d118      	bne.n	800edbc <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	681b      	ldr	r3, [r3, #0]
 800ed8e:	685a      	ldr	r2, [r3, #4]
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ed98:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800ed9a:	69bb      	ldr	r3, [r7, #24]
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	683b      	ldr	r3, [r7, #0]
 800eda0:	2200      	movs	r2, #0
 800eda2:	2120      	movs	r1, #32
 800eda4:	68f8      	ldr	r0, [r7, #12]
 800eda6:	f000 f8f3 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800edb0:	2301      	movs	r3, #1
 800edb2:	e01c      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	2220      	movs	r2, #32
 800edba:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800edbc:	697b      	ldr	r3, [r7, #20]
 800edbe:	3301      	adds	r3, #1
 800edc0:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	687a      	ldr	r2, [r7, #4]
 800edc6:	429a      	cmp	r2, r3
 800edc8:	f63f af3b 	bhi.w	800ec42 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	2220      	movs	r2, #32
 800edd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd8:	f043 0220 	orr.w	r2, r3, #32
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ede0:	68fb      	ldr	r3, [r7, #12]
 800ede2:	2200      	movs	r2, #0
 800ede4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800ede8:	2301      	movs	r3, #1
 800edea:	e000      	b.n	800edee <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800edec:	2302      	movs	r3, #2
  }
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3720      	adds	r7, #32
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}
	...

0800edf8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af02      	add	r7, sp, #8
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	4608      	mov	r0, r1
 800ee02:	4611      	mov	r1, r2
 800ee04:	461a      	mov	r2, r3
 800ee06:	4603      	mov	r3, r0
 800ee08:	817b      	strh	r3, [r7, #10]
 800ee0a:	460b      	mov	r3, r1
 800ee0c:	813b      	strh	r3, [r7, #8]
 800ee0e:	4613      	mov	r3, r2
 800ee10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ee12:	88fb      	ldrh	r3, [r7, #6]
 800ee14:	b2da      	uxtb	r2, r3
 800ee16:	8979      	ldrh	r1, [r7, #10]
 800ee18:	4b20      	ldr	r3, [pc, #128]	; (800ee9c <I2C_RequestMemoryWrite+0xa4>)
 800ee1a:	9300      	str	r3, [sp, #0]
 800ee1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ee20:	68f8      	ldr	r0, [r7, #12]
 800ee22:	f000 fad7 	bl	800f3d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee26:	69fa      	ldr	r2, [r7, #28]
 800ee28:	69b9      	ldr	r1, [r7, #24]
 800ee2a:	68f8      	ldr	r0, [r7, #12]
 800ee2c:	f000 f8f0 	bl	800f010 <I2C_WaitOnTXISFlagUntilTimeout>
 800ee30:	4603      	mov	r3, r0
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d001      	beq.n	800ee3a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ee36:	2301      	movs	r3, #1
 800ee38:	e02c      	b.n	800ee94 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ee3a:	88fb      	ldrh	r3, [r7, #6]
 800ee3c:	2b01      	cmp	r3, #1
 800ee3e:	d105      	bne.n	800ee4c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee40:	893b      	ldrh	r3, [r7, #8]
 800ee42:	b2da      	uxtb	r2, r3
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	629a      	str	r2, [r3, #40]	; 0x28
 800ee4a:	e015      	b.n	800ee78 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ee4c:	893b      	ldrh	r3, [r7, #8]
 800ee4e:	0a1b      	lsrs	r3, r3, #8
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ee5a:	69fa      	ldr	r2, [r7, #28]
 800ee5c:	69b9      	ldr	r1, [r7, #24]
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f000 f8d6 	bl	800f010 <I2C_WaitOnTXISFlagUntilTimeout>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d001      	beq.n	800ee6e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	e012      	b.n	800ee94 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ee6e:	893b      	ldrh	r3, [r7, #8]
 800ee70:	b2da      	uxtb	r2, r3
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ee78:	69fb      	ldr	r3, [r7, #28]
 800ee7a:	9300      	str	r3, [sp, #0]
 800ee7c:	69bb      	ldr	r3, [r7, #24]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	2180      	movs	r1, #128	; 0x80
 800ee82:	68f8      	ldr	r0, [r7, #12]
 800ee84:	f000 f884 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800ee88:	4603      	mov	r3, r0
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e000      	b.n	800ee94 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ee92:	2300      	movs	r3, #0
}
 800ee94:	4618      	mov	r0, r3
 800ee96:	3710      	adds	r7, #16
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	80002000 	.word	0x80002000

0800eea0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b086      	sub	sp, #24
 800eea4:	af02      	add	r7, sp, #8
 800eea6:	60f8      	str	r0, [r7, #12]
 800eea8:	4608      	mov	r0, r1
 800eeaa:	4611      	mov	r1, r2
 800eeac:	461a      	mov	r2, r3
 800eeae:	4603      	mov	r3, r0
 800eeb0:	817b      	strh	r3, [r7, #10]
 800eeb2:	460b      	mov	r3, r1
 800eeb4:	813b      	strh	r3, [r7, #8]
 800eeb6:	4613      	mov	r3, r2
 800eeb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800eeba:	88fb      	ldrh	r3, [r7, #6]
 800eebc:	b2da      	uxtb	r2, r3
 800eebe:	8979      	ldrh	r1, [r7, #10]
 800eec0:	4b20      	ldr	r3, [pc, #128]	; (800ef44 <I2C_RequestMemoryRead+0xa4>)
 800eec2:	9300      	str	r3, [sp, #0]
 800eec4:	2300      	movs	r3, #0
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	f000 fa84 	bl	800f3d4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800eecc:	69fa      	ldr	r2, [r7, #28]
 800eece:	69b9      	ldr	r1, [r7, #24]
 800eed0:	68f8      	ldr	r0, [r7, #12]
 800eed2:	f000 f89d 	bl	800f010 <I2C_WaitOnTXISFlagUntilTimeout>
 800eed6:	4603      	mov	r3, r0
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d001      	beq.n	800eee0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800eedc:	2301      	movs	r3, #1
 800eede:	e02c      	b.n	800ef3a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800eee0:	88fb      	ldrh	r3, [r7, #6]
 800eee2:	2b01      	cmp	r3, #1
 800eee4:	d105      	bne.n	800eef2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800eee6:	893b      	ldrh	r3, [r7, #8]
 800eee8:	b2da      	uxtb	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	629a      	str	r2, [r3, #40]	; 0x28
 800eef0:	e015      	b.n	800ef1e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800eef2:	893b      	ldrh	r3, [r7, #8]
 800eef4:	0a1b      	lsrs	r3, r3, #8
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	b2da      	uxtb	r2, r3
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ef00:	69fa      	ldr	r2, [r7, #28]
 800ef02:	69b9      	ldr	r1, [r7, #24]
 800ef04:	68f8      	ldr	r0, [r7, #12]
 800ef06:	f000 f883 	bl	800f010 <I2C_WaitOnTXISFlagUntilTimeout>
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d001      	beq.n	800ef14 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800ef10:	2301      	movs	r3, #1
 800ef12:	e012      	b.n	800ef3a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ef14:	893b      	ldrh	r3, [r7, #8]
 800ef16:	b2da      	uxtb	r2, r3
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800ef1e:	69fb      	ldr	r3, [r7, #28]
 800ef20:	9300      	str	r3, [sp, #0]
 800ef22:	69bb      	ldr	r3, [r7, #24]
 800ef24:	2200      	movs	r2, #0
 800ef26:	2140      	movs	r1, #64	; 0x40
 800ef28:	68f8      	ldr	r0, [r7, #12]
 800ef2a:	f000 f831 	bl	800ef90 <I2C_WaitOnFlagUntilTimeout>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d001      	beq.n	800ef38 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800ef34:	2301      	movs	r3, #1
 800ef36:	e000      	b.n	800ef3a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800ef38:	2300      	movs	r3, #0
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3710      	adds	r7, #16
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	80002000 	.word	0x80002000

0800ef48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800ef48:	b480      	push	{r7}
 800ef4a:	b083      	sub	sp, #12
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	699b      	ldr	r3, [r3, #24]
 800ef56:	f003 0302 	and.w	r3, r3, #2
 800ef5a:	2b02      	cmp	r3, #2
 800ef5c:	d103      	bne.n	800ef66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	2200      	movs	r2, #0
 800ef64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	681b      	ldr	r3, [r3, #0]
 800ef6a:	699b      	ldr	r3, [r3, #24]
 800ef6c:	f003 0301 	and.w	r3, r3, #1
 800ef70:	2b01      	cmp	r3, #1
 800ef72:	d007      	beq.n	800ef84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	699a      	ldr	r2, [r3, #24]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f042 0201 	orr.w	r2, r2, #1
 800ef82:	619a      	str	r2, [r3, #24]
  }
}
 800ef84:	bf00      	nop
 800ef86:	370c      	adds	r7, #12
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8e:	4770      	bx	lr

0800ef90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b084      	sub	sp, #16
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	603b      	str	r3, [r7, #0]
 800ef9c:	4613      	mov	r3, r2
 800ef9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800efa0:	e022      	b.n	800efe8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa8:	d01e      	beq.n	800efe8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efaa:	f7fe fca1 	bl	800d8f0 <HAL_GetTick>
 800efae:	4602      	mov	r2, r0
 800efb0:	69bb      	ldr	r3, [r7, #24]
 800efb2:	1ad3      	subs	r3, r2, r3
 800efb4:	683a      	ldr	r2, [r7, #0]
 800efb6:	429a      	cmp	r2, r3
 800efb8:	d302      	bcc.n	800efc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800efba:	683b      	ldr	r3, [r7, #0]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d113      	bne.n	800efe8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efc4:	f043 0220 	orr.w	r2, r3, #32
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	2220      	movs	r2, #32
 800efd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	2200      	movs	r2, #0
 800efd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800efe4:	2301      	movs	r3, #1
 800efe6:	e00f      	b.n	800f008 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	699a      	ldr	r2, [r3, #24]
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	4013      	ands	r3, r2
 800eff2:	68ba      	ldr	r2, [r7, #8]
 800eff4:	429a      	cmp	r2, r3
 800eff6:	bf0c      	ite	eq
 800eff8:	2301      	moveq	r3, #1
 800effa:	2300      	movne	r3, #0
 800effc:	b2db      	uxtb	r3, r3
 800effe:	461a      	mov	r2, r3
 800f000:	79fb      	ldrb	r3, [r7, #7]
 800f002:	429a      	cmp	r2, r3
 800f004:	d0cd      	beq.n	800efa2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800f006:	2300      	movs	r3, #0
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3710      	adds	r7, #16
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	60f8      	str	r0, [r7, #12]
 800f018:	60b9      	str	r1, [r7, #8]
 800f01a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f01c:	e02c      	b.n	800f078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f01e:	687a      	ldr	r2, [r7, #4]
 800f020:	68b9      	ldr	r1, [r7, #8]
 800f022:	68f8      	ldr	r0, [r7, #12]
 800f024:	f000 f8ea 	bl	800f1fc <I2C_IsErrorOccurred>
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d001      	beq.n	800f032 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f02e:	2301      	movs	r3, #1
 800f030:	e02a      	b.n	800f088 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f038:	d01e      	beq.n	800f078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f03a:	f7fe fc59 	bl	800d8f0 <HAL_GetTick>
 800f03e:	4602      	mov	r2, r0
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	1ad3      	subs	r3, r2, r3
 800f044:	68ba      	ldr	r2, [r7, #8]
 800f046:	429a      	cmp	r2, r3
 800f048:	d302      	bcc.n	800f050 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800f04a:	68bb      	ldr	r3, [r7, #8]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d113      	bne.n	800f078 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f050:	68fb      	ldr	r3, [r7, #12]
 800f052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f054:	f043 0220 	orr.w	r2, r3, #32
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	2220      	movs	r2, #32
 800f060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	2200      	movs	r2, #0
 800f068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	2200      	movs	r2, #0
 800f070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800f074:	2301      	movs	r3, #1
 800f076:	e007      	b.n	800f088 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	f003 0302 	and.w	r3, r3, #2
 800f082:	2b02      	cmp	r3, #2
 800f084:	d1cb      	bne.n	800f01e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f09c:	e028      	b.n	800f0f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f09e:	687a      	ldr	r2, [r7, #4]
 800f0a0:	68b9      	ldr	r1, [r7, #8]
 800f0a2:	68f8      	ldr	r0, [r7, #12]
 800f0a4:	f000 f8aa 	bl	800f1fc <I2C_IsErrorOccurred>
 800f0a8:	4603      	mov	r3, r0
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d001      	beq.n	800f0b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f0ae:	2301      	movs	r3, #1
 800f0b0:	e026      	b.n	800f100 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f0b2:	f7fe fc1d 	bl	800d8f0 <HAL_GetTick>
 800f0b6:	4602      	mov	r2, r0
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	1ad3      	subs	r3, r2, r3
 800f0bc:	68ba      	ldr	r2, [r7, #8]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d302      	bcc.n	800f0c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800f0c2:	68bb      	ldr	r3, [r7, #8]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d113      	bne.n	800f0f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0cc:	f043 0220 	orr.w	r2, r3, #32
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2220      	movs	r2, #32
 800f0d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	2200      	movs	r2, #0
 800f0e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e007      	b.n	800f100 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	699b      	ldr	r3, [r3, #24]
 800f0f6:	f003 0320 	and.w	r3, r3, #32
 800f0fa:	2b20      	cmp	r3, #32
 800f0fc:	d1cf      	bne.n	800f09e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f0fe:	2300      	movs	r3, #0
}
 800f100:	4618      	mov	r0, r3
 800f102:	3710      	adds	r7, #16
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b084      	sub	sp, #16
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f114:	e064      	b.n	800f1e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	68b9      	ldr	r1, [r7, #8]
 800f11a:	68f8      	ldr	r0, [r7, #12]
 800f11c:	f000 f86e 	bl	800f1fc <I2C_IsErrorOccurred>
 800f120:	4603      	mov	r3, r0
 800f122:	2b00      	cmp	r3, #0
 800f124:	d001      	beq.n	800f12a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800f126:	2301      	movs	r3, #1
 800f128:	e062      	b.n	800f1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	699b      	ldr	r3, [r3, #24]
 800f130:	f003 0320 	and.w	r3, r3, #32
 800f134:	2b20      	cmp	r3, #32
 800f136:	d138      	bne.n	800f1aa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	699b      	ldr	r3, [r3, #24]
 800f13e:	f003 0304 	and.w	r3, r3, #4
 800f142:	2b04      	cmp	r3, #4
 800f144:	d105      	bne.n	800f152 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800f14e:	2300      	movs	r3, #0
 800f150:	e04e      	b.n	800f1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	699b      	ldr	r3, [r3, #24]
 800f158:	f003 0310 	and.w	r3, r3, #16
 800f15c:	2b10      	cmp	r3, #16
 800f15e:	d107      	bne.n	800f170 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2210      	movs	r2, #16
 800f166:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2204      	movs	r2, #4
 800f16c:	645a      	str	r2, [r3, #68]	; 0x44
 800f16e:	e002      	b.n	800f176 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	2200      	movs	r2, #0
 800f174:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2220      	movs	r2, #32
 800f17c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	6859      	ldr	r1, [r3, #4]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	681a      	ldr	r2, [r3, #0]
 800f188:	4b1b      	ldr	r3, [pc, #108]	; (800f1f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800f18a:	400b      	ands	r3, r1
 800f18c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2220      	movs	r2, #32
 800f192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2200      	movs	r2, #0
 800f19a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800f19e:	68fb      	ldr	r3, [r7, #12]
 800f1a0:	2200      	movs	r2, #0
 800f1a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e022      	b.n	800f1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f1aa:	f7fe fba1 	bl	800d8f0 <HAL_GetTick>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	1ad3      	subs	r3, r2, r3
 800f1b4:	68ba      	ldr	r2, [r7, #8]
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d302      	bcc.n	800f1c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d10f      	bne.n	800f1e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f1c4:	f043 0220 	orr.w	r2, r3, #32
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	2220      	movs	r2, #32
 800f1d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e007      	b.n	800f1f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	f003 0304 	and.w	r3, r3, #4
 800f1ea:	2b04      	cmp	r3, #4
 800f1ec:	d193      	bne.n	800f116 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800f1ee:	2300      	movs	r3, #0
}
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	3710      	adds	r7, #16
 800f1f4:	46bd      	mov	sp, r7
 800f1f6:	bd80      	pop	{r7, pc}
 800f1f8:	fe00e800 	.word	0xfe00e800

0800f1fc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b08a      	sub	sp, #40	; 0x28
 800f200:	af00      	add	r7, sp, #0
 800f202:	60f8      	str	r0, [r7, #12]
 800f204:	60b9      	str	r1, [r7, #8]
 800f206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800f20e:	68fb      	ldr	r3, [r7, #12]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800f216:	2300      	movs	r3, #0
 800f218:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	f003 0310 	and.w	r3, r3, #16
 800f224:	2b00      	cmp	r3, #0
 800f226:	d075      	beq.n	800f314 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	2210      	movs	r2, #16
 800f22e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f230:	e056      	b.n	800f2e0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800f232:	68bb      	ldr	r3, [r7, #8]
 800f234:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f238:	d052      	beq.n	800f2e0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800f23a:	f7fe fb59 	bl	800d8f0 <HAL_GetTick>
 800f23e:	4602      	mov	r2, r0
 800f240:	69fb      	ldr	r3, [r7, #28]
 800f242:	1ad3      	subs	r3, r2, r3
 800f244:	68ba      	ldr	r2, [r7, #8]
 800f246:	429a      	cmp	r2, r3
 800f248:	d302      	bcc.n	800f250 <I2C_IsErrorOccurred+0x54>
 800f24a:	68bb      	ldr	r3, [r7, #8]
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d147      	bne.n	800f2e0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	685b      	ldr	r3, [r3, #4]
 800f256:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f25a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f262:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	699b      	ldr	r3, [r3, #24]
 800f26a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f26e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f272:	d12e      	bne.n	800f2d2 <I2C_IsErrorOccurred+0xd6>
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f27a:	d02a      	beq.n	800f2d2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800f27c:	7cfb      	ldrb	r3, [r7, #19]
 800f27e:	2b20      	cmp	r3, #32
 800f280:	d027      	beq.n	800f2d2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	685a      	ldr	r2, [r3, #4]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f290:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800f292:	f7fe fb2d 	bl	800d8f0 <HAL_GetTick>
 800f296:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f298:	e01b      	b.n	800f2d2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800f29a:	f7fe fb29 	bl	800d8f0 <HAL_GetTick>
 800f29e:	4602      	mov	r2, r0
 800f2a0:	69fb      	ldr	r3, [r7, #28]
 800f2a2:	1ad3      	subs	r3, r2, r3
 800f2a4:	2b19      	cmp	r3, #25
 800f2a6:	d914      	bls.n	800f2d2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800f2a8:	68fb      	ldr	r3, [r7, #12]
 800f2aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f2ac:	f043 0220 	orr.w	r2, r3, #32
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800f2b4:	68fb      	ldr	r3, [r7, #12]
 800f2b6:	2220      	movs	r2, #32
 800f2b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800f2bc:	68fb      	ldr	r3, [r7, #12]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	2200      	movs	r2, #0
 800f2c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	681b      	ldr	r3, [r3, #0]
 800f2d6:	699b      	ldr	r3, [r3, #24]
 800f2d8:	f003 0320 	and.w	r3, r3, #32
 800f2dc:	2b20      	cmp	r3, #32
 800f2de:	d1dc      	bne.n	800f29a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	699b      	ldr	r3, [r3, #24]
 800f2e6:	f003 0320 	and.w	r3, r3, #32
 800f2ea:	2b20      	cmp	r3, #32
 800f2ec:	d003      	beq.n	800f2f6 <I2C_IsErrorOccurred+0xfa>
 800f2ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d09d      	beq.n	800f232 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800f2f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f2fa:	2b00      	cmp	r3, #0
 800f2fc:	d103      	bne.n	800f306 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	681b      	ldr	r3, [r3, #0]
 800f302:	2220      	movs	r2, #32
 800f304:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800f306:	6a3b      	ldr	r3, [r7, #32]
 800f308:	f043 0304 	orr.w	r3, r3, #4
 800f30c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800f30e:	2301      	movs	r3, #1
 800f310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	699b      	ldr	r3, [r3, #24]
 800f31a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800f31c:	69bb      	ldr	r3, [r7, #24]
 800f31e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f322:	2b00      	cmp	r3, #0
 800f324:	d00b      	beq.n	800f33e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800f326:	6a3b      	ldr	r3, [r7, #32]
 800f328:	f043 0301 	orr.w	r3, r3, #1
 800f32c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f336:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f338:	2301      	movs	r3, #1
 800f33a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f344:	2b00      	cmp	r3, #0
 800f346:	d00b      	beq.n	800f360 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800f348:	6a3b      	ldr	r3, [r7, #32]
 800f34a:	f043 0308 	orr.w	r3, r3, #8
 800f34e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f358:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f35a:	2301      	movs	r3, #1
 800f35c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800f360:	69bb      	ldr	r3, [r7, #24]
 800f362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f366:	2b00      	cmp	r3, #0
 800f368:	d00b      	beq.n	800f382 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800f36a:	6a3b      	ldr	r3, [r7, #32]
 800f36c:	f043 0302 	orr.w	r3, r3, #2
 800f370:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f37a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800f37c:	2301      	movs	r3, #1
 800f37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800f382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f386:	2b00      	cmp	r3, #0
 800f388:	d01c      	beq.n	800f3c4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800f38a:	68f8      	ldr	r0, [r7, #12]
 800f38c:	f7ff fddc 	bl	800ef48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	681b      	ldr	r3, [r3, #0]
 800f394:	6859      	ldr	r1, [r3, #4]
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	681a      	ldr	r2, [r3, #0]
 800f39a:	4b0d      	ldr	r3, [pc, #52]	; (800f3d0 <I2C_IsErrorOccurred+0x1d4>)
 800f39c:	400b      	ands	r3, r1
 800f39e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f3a4:	6a3b      	ldr	r3, [r7, #32]
 800f3a6:	431a      	orrs	r2, r3
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800f3ac:	68fb      	ldr	r3, [r7, #12]
 800f3ae:	2220      	movs	r2, #32
 800f3b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f3bc:	68fb      	ldr	r3, [r7, #12]
 800f3be:	2200      	movs	r2, #0
 800f3c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800f3c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3728      	adds	r7, #40	; 0x28
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	fe00e800 	.word	0xfe00e800

0800f3d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b087      	sub	sp, #28
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	60f8      	str	r0, [r7, #12]
 800f3dc:	607b      	str	r3, [r7, #4]
 800f3de:	460b      	mov	r3, r1
 800f3e0:	817b      	strh	r3, [r7, #10]
 800f3e2:	4613      	mov	r3, r2
 800f3e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f3e6:	897b      	ldrh	r3, [r7, #10]
 800f3e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f3ec:	7a7b      	ldrb	r3, [r7, #9]
 800f3ee:	041b      	lsls	r3, r3, #16
 800f3f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f3f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f3fa:	6a3b      	ldr	r3, [r7, #32]
 800f3fc:	4313      	orrs	r3, r2
 800f3fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f402:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	685a      	ldr	r2, [r3, #4]
 800f40a:	6a3b      	ldr	r3, [r7, #32]
 800f40c:	0d5b      	lsrs	r3, r3, #21
 800f40e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800f412:	4b08      	ldr	r3, [pc, #32]	; (800f434 <I2C_TransferConfig+0x60>)
 800f414:	430b      	orrs	r3, r1
 800f416:	43db      	mvns	r3, r3
 800f418:	ea02 0103 	and.w	r1, r2, r3
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	697a      	ldr	r2, [r7, #20]
 800f422:	430a      	orrs	r2, r1
 800f424:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f426:	bf00      	nop
 800f428:	371c      	adds	r7, #28
 800f42a:	46bd      	mov	sp, r7
 800f42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f430:	4770      	bx	lr
 800f432:	bf00      	nop
 800f434:	03ff63ff 	.word	0x03ff63ff

0800f438 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f438:	b480      	push	{r7}
 800f43a:	b083      	sub	sp, #12
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	2b20      	cmp	r3, #32
 800f44c:	d138      	bne.n	800f4c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f454:	2b01      	cmp	r3, #1
 800f456:	d101      	bne.n	800f45c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f458:	2302      	movs	r3, #2
 800f45a:	e032      	b.n	800f4c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2201      	movs	r2, #1
 800f460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2224      	movs	r2, #36	; 0x24
 800f468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	f022 0201 	bic.w	r2, r2, #1
 800f47a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	681a      	ldr	r2, [r3, #0]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	681b      	ldr	r3, [r3, #0]
 800f486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800f48a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	6819      	ldr	r1, [r3, #0]
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	683a      	ldr	r2, [r7, #0]
 800f498:	430a      	orrs	r2, r1
 800f49a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	681a      	ldr	r2, [r3, #0]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	f042 0201 	orr.w	r2, r2, #1
 800f4aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	2220      	movs	r2, #32
 800f4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	e000      	b.n	800f4c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f4c0:	2302      	movs	r3, #2
  }
}
 800f4c2:	4618      	mov	r0, r3
 800f4c4:	370c      	adds	r7, #12
 800f4c6:	46bd      	mov	sp, r7
 800f4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4cc:	4770      	bx	lr

0800f4ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f4ce:	b480      	push	{r7}
 800f4d0:	b085      	sub	sp, #20
 800f4d2:	af00      	add	r7, sp, #0
 800f4d4:	6078      	str	r0, [r7, #4]
 800f4d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f4de:	b2db      	uxtb	r3, r3
 800f4e0:	2b20      	cmp	r3, #32
 800f4e2:	d139      	bne.n	800f558 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f4ea:	2b01      	cmp	r3, #1
 800f4ec:	d101      	bne.n	800f4f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f4ee:	2302      	movs	r3, #2
 800f4f0:	e033      	b.n	800f55a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2224      	movs	r2, #36	; 0x24
 800f4fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f022 0201 	bic.w	r2, r2, #1
 800f510:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f51a:	68fb      	ldr	r3, [r7, #12]
 800f51c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f520:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f522:	683b      	ldr	r3, [r7, #0]
 800f524:	021b      	lsls	r3, r3, #8
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	4313      	orrs	r3, r2
 800f52a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	f042 0201 	orr.w	r2, r2, #1
 800f542:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	2220      	movs	r2, #32
 800f548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	2200      	movs	r2, #0
 800f550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800f554:	2300      	movs	r3, #0
 800f556:	e000      	b.n	800f55a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f558:	2302      	movs	r3, #2
  }
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr
	...

0800f568 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800f568:	b480      	push	{r7}
 800f56a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800f56c:	4b04      	ldr	r3, [pc, #16]	; (800f580 <HAL_PWREx_GetVoltageRange+0x18>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800f574:	4618      	mov	r0, r3
 800f576:	46bd      	mov	sp, r7
 800f578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57c:	4770      	bx	lr
 800f57e:	bf00      	nop
 800f580:	40007000 	.word	0x40007000

0800f584 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800f584:	b480      	push	{r7}
 800f586:	b085      	sub	sp, #20
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f592:	d130      	bne.n	800f5f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800f594:	4b23      	ldr	r3, [pc, #140]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f596:	681b      	ldr	r3, [r3, #0]
 800f598:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f59c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f5a0:	d038      	beq.n	800f614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800f5a2:	4b20      	ldr	r3, [pc, #128]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f5aa:	4a1e      	ldr	r2, [pc, #120]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f5b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800f5b2:	4b1d      	ldr	r3, [pc, #116]	; (800f628 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	2232      	movs	r2, #50	; 0x32
 800f5b8:	fb02 f303 	mul.w	r3, r2, r3
 800f5bc:	4a1b      	ldr	r2, [pc, #108]	; (800f62c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800f5be:	fba2 2303 	umull	r2, r3, r2, r3
 800f5c2:	0c9b      	lsrs	r3, r3, #18
 800f5c4:	3301      	adds	r3, #1
 800f5c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f5c8:	e002      	b.n	800f5d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800f5ca:	68fb      	ldr	r3, [r7, #12]
 800f5cc:	3b01      	subs	r3, #1
 800f5ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800f5d0:	4b14      	ldr	r3, [pc, #80]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5d2:	695b      	ldr	r3, [r3, #20]
 800f5d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5dc:	d102      	bne.n	800f5e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800f5de:	68fb      	ldr	r3, [r7, #12]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d1f2      	bne.n	800f5ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800f5e4:	4b0f      	ldr	r3, [pc, #60]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5e6:	695b      	ldr	r3, [r3, #20]
 800f5e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f5ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f5f0:	d110      	bne.n	800f614 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800f5f2:	2303      	movs	r3, #3
 800f5f4:	e00f      	b.n	800f616 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800f5f6:	4b0b      	ldr	r3, [pc, #44]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f5f8:	681b      	ldr	r3, [r3, #0]
 800f5fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800f5fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f602:	d007      	beq.n	800f614 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800f604:	4b07      	ldr	r3, [pc, #28]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f60c:	4a05      	ldr	r2, [pc, #20]	; (800f624 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800f60e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f612:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800f614:	2300      	movs	r3, #0
}
 800f616:	4618      	mov	r0, r3
 800f618:	3714      	adds	r7, #20
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	40007000 	.word	0x40007000
 800f628:	200005a4 	.word	0x200005a4
 800f62c:	431bde83 	.word	0x431bde83

0800f630 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b088      	sub	sp, #32
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800f63e:	2301      	movs	r3, #1
 800f640:	e3c6      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f642:	4ba1      	ldr	r3, [pc, #644]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f644:	689b      	ldr	r3, [r3, #8]
 800f646:	f003 030c 	and.w	r3, r3, #12
 800f64a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800f64c:	4b9e      	ldr	r3, [pc, #632]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	f003 0303 	and.w	r3, r3, #3
 800f654:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f003 0310 	and.w	r3, r3, #16
 800f65e:	2b00      	cmp	r3, #0
 800f660:	f000 80e4 	beq.w	800f82c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800f664:	69bb      	ldr	r3, [r7, #24]
 800f666:	2b00      	cmp	r3, #0
 800f668:	d007      	beq.n	800f67a <HAL_RCC_OscConfig+0x4a>
 800f66a:	69bb      	ldr	r3, [r7, #24]
 800f66c:	2b0c      	cmp	r3, #12
 800f66e:	f040 808b 	bne.w	800f788 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800f672:	697b      	ldr	r3, [r7, #20]
 800f674:	2b01      	cmp	r3, #1
 800f676:	f040 8087 	bne.w	800f788 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f67a:	4b93      	ldr	r3, [pc, #588]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	f003 0302 	and.w	r3, r3, #2
 800f682:	2b00      	cmp	r3, #0
 800f684:	d005      	beq.n	800f692 <HAL_RCC_OscConfig+0x62>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	699b      	ldr	r3, [r3, #24]
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d101      	bne.n	800f692 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800f68e:	2301      	movs	r3, #1
 800f690:	e39e      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	6a1a      	ldr	r2, [r3, #32]
 800f696:	4b8c      	ldr	r3, [pc, #560]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f698:	681b      	ldr	r3, [r3, #0]
 800f69a:	f003 0308 	and.w	r3, r3, #8
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d004      	beq.n	800f6ac <HAL_RCC_OscConfig+0x7c>
 800f6a2:	4b89      	ldr	r3, [pc, #548]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6a4:	681b      	ldr	r3, [r3, #0]
 800f6a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6aa:	e005      	b.n	800f6b8 <HAL_RCC_OscConfig+0x88>
 800f6ac:	4b86      	ldr	r3, [pc, #536]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800f6b2:	091b      	lsrs	r3, r3, #4
 800f6b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f6b8:	4293      	cmp	r3, r2
 800f6ba:	d223      	bcs.n	800f704 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f6bc:	687b      	ldr	r3, [r7, #4]
 800f6be:	6a1b      	ldr	r3, [r3, #32]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f000 fd53 	bl	801016c <RCC_SetFlashLatencyFromMSIRange>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e37f      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f6d0:	4b7d      	ldr	r3, [pc, #500]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	4a7c      	ldr	r2, [pc, #496]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6d6:	f043 0308 	orr.w	r3, r3, #8
 800f6da:	6013      	str	r3, [r2, #0]
 800f6dc:	4b7a      	ldr	r3, [pc, #488]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	6a1b      	ldr	r3, [r3, #32]
 800f6e8:	4977      	ldr	r1, [pc, #476]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6ea:	4313      	orrs	r3, r2
 800f6ec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f6ee:	4b76      	ldr	r3, [pc, #472]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	69db      	ldr	r3, [r3, #28]
 800f6fa:	021b      	lsls	r3, r3, #8
 800f6fc:	4972      	ldr	r1, [pc, #456]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f6fe:	4313      	orrs	r3, r2
 800f700:	604b      	str	r3, [r1, #4]
 800f702:	e025      	b.n	800f750 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f704:	4b70      	ldr	r3, [pc, #448]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f706:	681b      	ldr	r3, [r3, #0]
 800f708:	4a6f      	ldr	r2, [pc, #444]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f70a:	f043 0308 	orr.w	r3, r3, #8
 800f70e:	6013      	str	r3, [r2, #0]
 800f710:	4b6d      	ldr	r3, [pc, #436]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6a1b      	ldr	r3, [r3, #32]
 800f71c:	496a      	ldr	r1, [pc, #424]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f71e:	4313      	orrs	r3, r2
 800f720:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f722:	4b69      	ldr	r3, [pc, #420]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f724:	685b      	ldr	r3, [r3, #4]
 800f726:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	69db      	ldr	r3, [r3, #28]
 800f72e:	021b      	lsls	r3, r3, #8
 800f730:	4965      	ldr	r1, [pc, #404]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f732:	4313      	orrs	r3, r2
 800f734:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800f736:	69bb      	ldr	r3, [r7, #24]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d109      	bne.n	800f750 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a1b      	ldr	r3, [r3, #32]
 800f740:	4618      	mov	r0, r3
 800f742:	f000 fd13 	bl	801016c <RCC_SetFlashLatencyFromMSIRange>
 800f746:	4603      	mov	r3, r0
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800f74c:	2301      	movs	r3, #1
 800f74e:	e33f      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800f750:	f000 fc48 	bl	800ffe4 <HAL_RCC_GetSysClockFreq>
 800f754:	4602      	mov	r2, r0
 800f756:	4b5c      	ldr	r3, [pc, #368]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f758:	689b      	ldr	r3, [r3, #8]
 800f75a:	091b      	lsrs	r3, r3, #4
 800f75c:	f003 030f 	and.w	r3, r3, #15
 800f760:	495a      	ldr	r1, [pc, #360]	; (800f8cc <HAL_RCC_OscConfig+0x29c>)
 800f762:	5ccb      	ldrb	r3, [r1, r3]
 800f764:	f003 031f 	and.w	r3, r3, #31
 800f768:	fa22 f303 	lsr.w	r3, r2, r3
 800f76c:	4a58      	ldr	r2, [pc, #352]	; (800f8d0 <HAL_RCC_OscConfig+0x2a0>)
 800f76e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800f770:	4b58      	ldr	r3, [pc, #352]	; (800f8d4 <HAL_RCC_OscConfig+0x2a4>)
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	4618      	mov	r0, r3
 800f776:	f7fe f86b 	bl	800d850 <HAL_InitTick>
 800f77a:	4603      	mov	r3, r0
 800f77c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800f77e:	7bfb      	ldrb	r3, [r7, #15]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d052      	beq.n	800f82a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800f784:	7bfb      	ldrb	r3, [r7, #15]
 800f786:	e323      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	699b      	ldr	r3, [r3, #24]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	d032      	beq.n	800f7f6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800f790:	4b4d      	ldr	r3, [pc, #308]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f792:	681b      	ldr	r3, [r3, #0]
 800f794:	4a4c      	ldr	r2, [pc, #304]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f796:	f043 0301 	orr.w	r3, r3, #1
 800f79a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f79c:	f7fe f8a8 	bl	800d8f0 <HAL_GetTick>
 800f7a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f7a2:	e008      	b.n	800f7b6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f7a4:	f7fe f8a4 	bl	800d8f0 <HAL_GetTick>
 800f7a8:	4602      	mov	r2, r0
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	1ad3      	subs	r3, r2, r3
 800f7ae:	2b02      	cmp	r3, #2
 800f7b0:	d901      	bls.n	800f7b6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800f7b2:	2303      	movs	r3, #3
 800f7b4:	e30c      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800f7b6:	4b44      	ldr	r3, [pc, #272]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	f003 0302 	and.w	r3, r3, #2
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d0f0      	beq.n	800f7a4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800f7c2:	4b41      	ldr	r3, [pc, #260]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	4a40      	ldr	r2, [pc, #256]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7c8:	f043 0308 	orr.w	r3, r3, #8
 800f7cc:	6013      	str	r3, [r2, #0]
 800f7ce:	4b3e      	ldr	r3, [pc, #248]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	493b      	ldr	r1, [pc, #236]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800f7e0:	4b39      	ldr	r3, [pc, #228]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7e2:	685b      	ldr	r3, [r3, #4]
 800f7e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	69db      	ldr	r3, [r3, #28]
 800f7ec:	021b      	lsls	r3, r3, #8
 800f7ee:	4936      	ldr	r1, [pc, #216]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7f0:	4313      	orrs	r3, r2
 800f7f2:	604b      	str	r3, [r1, #4]
 800f7f4:	e01a      	b.n	800f82c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800f7f6:	4b34      	ldr	r3, [pc, #208]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	4a33      	ldr	r2, [pc, #204]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f7fc:	f023 0301 	bic.w	r3, r3, #1
 800f800:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800f802:	f7fe f875 	bl	800d8f0 <HAL_GetTick>
 800f806:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f808:	e008      	b.n	800f81c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800f80a:	f7fe f871 	bl	800d8f0 <HAL_GetTick>
 800f80e:	4602      	mov	r2, r0
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	1ad3      	subs	r3, r2, r3
 800f814:	2b02      	cmp	r3, #2
 800f816:	d901      	bls.n	800f81c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800f818:	2303      	movs	r3, #3
 800f81a:	e2d9      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800f81c:	4b2a      	ldr	r3, [pc, #168]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f003 0302 	and.w	r3, r3, #2
 800f824:	2b00      	cmp	r3, #0
 800f826:	d1f0      	bne.n	800f80a <HAL_RCC_OscConfig+0x1da>
 800f828:	e000      	b.n	800f82c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800f82a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	681b      	ldr	r3, [r3, #0]
 800f830:	f003 0301 	and.w	r3, r3, #1
 800f834:	2b00      	cmp	r3, #0
 800f836:	d074      	beq.n	800f922 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800f838:	69bb      	ldr	r3, [r7, #24]
 800f83a:	2b08      	cmp	r3, #8
 800f83c:	d005      	beq.n	800f84a <HAL_RCC_OscConfig+0x21a>
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	2b0c      	cmp	r3, #12
 800f842:	d10e      	bne.n	800f862 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800f844:	697b      	ldr	r3, [r7, #20]
 800f846:	2b03      	cmp	r3, #3
 800f848:	d10b      	bne.n	800f862 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f84a:	4b1f      	ldr	r3, [pc, #124]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f852:	2b00      	cmp	r3, #0
 800f854:	d064      	beq.n	800f920 <HAL_RCC_OscConfig+0x2f0>
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d160      	bne.n	800f920 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800f85e:	2301      	movs	r3, #1
 800f860:	e2b6      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	685b      	ldr	r3, [r3, #4]
 800f866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f86a:	d106      	bne.n	800f87a <HAL_RCC_OscConfig+0x24a>
 800f86c:	4b16      	ldr	r3, [pc, #88]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a15      	ldr	r2, [pc, #84]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f876:	6013      	str	r3, [r2, #0]
 800f878:	e01d      	b.n	800f8b6 <HAL_RCC_OscConfig+0x286>
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	685b      	ldr	r3, [r3, #4]
 800f87e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f882:	d10c      	bne.n	800f89e <HAL_RCC_OscConfig+0x26e>
 800f884:	4b10      	ldr	r3, [pc, #64]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	4a0f      	ldr	r2, [pc, #60]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f88a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f88e:	6013      	str	r3, [r2, #0]
 800f890:	4b0d      	ldr	r3, [pc, #52]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a0c      	ldr	r2, [pc, #48]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f89a:	6013      	str	r3, [r2, #0]
 800f89c:	e00b      	b.n	800f8b6 <HAL_RCC_OscConfig+0x286>
 800f89e:	4b0a      	ldr	r3, [pc, #40]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	4a09      	ldr	r2, [pc, #36]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f8a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f8a8:	6013      	str	r3, [r2, #0]
 800f8aa:	4b07      	ldr	r3, [pc, #28]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	4a06      	ldr	r2, [pc, #24]	; (800f8c8 <HAL_RCC_OscConfig+0x298>)
 800f8b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f8b4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d01c      	beq.n	800f8f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8be:	f7fe f817 	bl	800d8f0 <HAL_GetTick>
 800f8c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f8c4:	e011      	b.n	800f8ea <HAL_RCC_OscConfig+0x2ba>
 800f8c6:	bf00      	nop
 800f8c8:	40021000 	.word	0x40021000
 800f8cc:	080167ec 	.word	0x080167ec
 800f8d0:	200005a4 	.word	0x200005a4
 800f8d4:	20000928 	.word	0x20000928
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f8d8:	f7fe f80a 	bl	800d8f0 <HAL_GetTick>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	693b      	ldr	r3, [r7, #16]
 800f8e0:	1ad3      	subs	r3, r2, r3
 800f8e2:	2b64      	cmp	r3, #100	; 0x64
 800f8e4:	d901      	bls.n	800f8ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800f8e6:	2303      	movs	r3, #3
 800f8e8:	e272      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800f8ea:	4baf      	ldr	r3, [pc, #700]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d0f0      	beq.n	800f8d8 <HAL_RCC_OscConfig+0x2a8>
 800f8f6:	e014      	b.n	800f922 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f8f8:	f7fd fffa 	bl	800d8f0 <HAL_GetTick>
 800f8fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f8fe:	e008      	b.n	800f912 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f900:	f7fd fff6 	bl	800d8f0 <HAL_GetTick>
 800f904:	4602      	mov	r2, r0
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	1ad3      	subs	r3, r2, r3
 800f90a:	2b64      	cmp	r3, #100	; 0x64
 800f90c:	d901      	bls.n	800f912 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800f90e:	2303      	movs	r3, #3
 800f910:	e25e      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800f912:	4ba5      	ldr	r3, [pc, #660]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	d1f0      	bne.n	800f900 <HAL_RCC_OscConfig+0x2d0>
 800f91e:	e000      	b.n	800f922 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f920:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	f003 0302 	and.w	r3, r3, #2
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d060      	beq.n	800f9f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800f92e:	69bb      	ldr	r3, [r7, #24]
 800f930:	2b04      	cmp	r3, #4
 800f932:	d005      	beq.n	800f940 <HAL_RCC_OscConfig+0x310>
 800f934:	69bb      	ldr	r3, [r7, #24]
 800f936:	2b0c      	cmp	r3, #12
 800f938:	d119      	bne.n	800f96e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800f93a:	697b      	ldr	r3, [r7, #20]
 800f93c:	2b02      	cmp	r3, #2
 800f93e:	d116      	bne.n	800f96e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f940:	4b99      	ldr	r3, [pc, #612]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d005      	beq.n	800f958 <HAL_RCC_OscConfig+0x328>
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	68db      	ldr	r3, [r3, #12]
 800f950:	2b00      	cmp	r3, #0
 800f952:	d101      	bne.n	800f958 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800f954:	2301      	movs	r3, #1
 800f956:	e23b      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f958:	4b93      	ldr	r3, [pc, #588]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f95a:	685b      	ldr	r3, [r3, #4]
 800f95c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	691b      	ldr	r3, [r3, #16]
 800f964:	061b      	lsls	r3, r3, #24
 800f966:	4990      	ldr	r1, [pc, #576]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f968:	4313      	orrs	r3, r2
 800f96a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f96c:	e040      	b.n	800f9f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d023      	beq.n	800f9be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800f976:	4b8c      	ldr	r3, [pc, #560]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	4a8b      	ldr	r2, [pc, #556]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f97c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f982:	f7fd ffb5 	bl	800d8f0 <HAL_GetTick>
 800f986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f988:	e008      	b.n	800f99c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f98a:	f7fd ffb1 	bl	800d8f0 <HAL_GetTick>
 800f98e:	4602      	mov	r2, r0
 800f990:	693b      	ldr	r3, [r7, #16]
 800f992:	1ad3      	subs	r3, r2, r3
 800f994:	2b02      	cmp	r3, #2
 800f996:	d901      	bls.n	800f99c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800f998:	2303      	movs	r3, #3
 800f99a:	e219      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800f99c:	4b82      	ldr	r3, [pc, #520]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f99e:	681b      	ldr	r3, [r3, #0]
 800f9a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9a4:	2b00      	cmp	r3, #0
 800f9a6:	d0f0      	beq.n	800f98a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f9a8:	4b7f      	ldr	r3, [pc, #508]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	691b      	ldr	r3, [r3, #16]
 800f9b4:	061b      	lsls	r3, r3, #24
 800f9b6:	497c      	ldr	r1, [pc, #496]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	604b      	str	r3, [r1, #4]
 800f9bc:	e018      	b.n	800f9f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f9be:	4b7a      	ldr	r3, [pc, #488]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a79      	ldr	r2, [pc, #484]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f9c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f9c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9ca:	f7fd ff91 	bl	800d8f0 <HAL_GetTick>
 800f9ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f9d0:	e008      	b.n	800f9e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f9d2:	f7fd ff8d 	bl	800d8f0 <HAL_GetTick>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	693b      	ldr	r3, [r7, #16]
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d901      	bls.n	800f9e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800f9e0:	2303      	movs	r3, #3
 800f9e2:	e1f5      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800f9e4:	4b70      	ldr	r3, [pc, #448]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1f0      	bne.n	800f9d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f003 0308 	and.w	r3, r3, #8
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d03c      	beq.n	800fa76 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	695b      	ldr	r3, [r3, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d01c      	beq.n	800fa3e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fa04:	4b68      	ldr	r3, [pc, #416]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa0a:	4a67      	ldr	r2, [pc, #412]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa0c:	f043 0301 	orr.w	r3, r3, #1
 800fa10:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa14:	f7fd ff6c 	bl	800d8f0 <HAL_GetTick>
 800fa18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fa1a:	e008      	b.n	800fa2e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa1c:	f7fd ff68 	bl	800d8f0 <HAL_GetTick>
 800fa20:	4602      	mov	r2, r0
 800fa22:	693b      	ldr	r3, [r7, #16]
 800fa24:	1ad3      	subs	r3, r2, r3
 800fa26:	2b02      	cmp	r3, #2
 800fa28:	d901      	bls.n	800fa2e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800fa2a:	2303      	movs	r3, #3
 800fa2c:	e1d0      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800fa2e:	4b5e      	ldr	r3, [pc, #376]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa34:	f003 0302 	and.w	r3, r3, #2
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d0ef      	beq.n	800fa1c <HAL_RCC_OscConfig+0x3ec>
 800fa3c:	e01b      	b.n	800fa76 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fa3e:	4b5a      	ldr	r3, [pc, #360]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa44:	4a58      	ldr	r2, [pc, #352]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa46:	f023 0301 	bic.w	r3, r3, #1
 800fa4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa4e:	f7fd ff4f 	bl	800d8f0 <HAL_GetTick>
 800fa52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fa54:	e008      	b.n	800fa68 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa56:	f7fd ff4b 	bl	800d8f0 <HAL_GetTick>
 800fa5a:	4602      	mov	r2, r0
 800fa5c:	693b      	ldr	r3, [r7, #16]
 800fa5e:	1ad3      	subs	r3, r2, r3
 800fa60:	2b02      	cmp	r3, #2
 800fa62:	d901      	bls.n	800fa68 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800fa64:	2303      	movs	r3, #3
 800fa66:	e1b3      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800fa68:	4b4f      	ldr	r3, [pc, #316]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800fa6e:	f003 0302 	and.w	r3, r3, #2
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d1ef      	bne.n	800fa56 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f003 0304 	and.w	r3, r3, #4
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	f000 80a6 	beq.w	800fbd0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800fa84:	2300      	movs	r3, #0
 800fa86:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800fa88:	4b47      	ldr	r3, [pc, #284]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	d10d      	bne.n	800fab0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800fa94:	4b44      	ldr	r3, [pc, #272]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa98:	4a43      	ldr	r2, [pc, #268]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fa9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa9e:	6593      	str	r3, [r2, #88]	; 0x58
 800faa0:	4b41      	ldr	r3, [pc, #260]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800faa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800faa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800faa8:	60bb      	str	r3, [r7, #8]
 800faaa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800faac:	2301      	movs	r3, #1
 800faae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fab0:	4b3e      	ldr	r3, [pc, #248]	; (800fbac <HAL_RCC_OscConfig+0x57c>)
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d118      	bne.n	800faee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800fabc:	4b3b      	ldr	r3, [pc, #236]	; (800fbac <HAL_RCC_OscConfig+0x57c>)
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	4a3a      	ldr	r2, [pc, #232]	; (800fbac <HAL_RCC_OscConfig+0x57c>)
 800fac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fac6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800fac8:	f7fd ff12 	bl	800d8f0 <HAL_GetTick>
 800facc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800face:	e008      	b.n	800fae2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fad0:	f7fd ff0e 	bl	800d8f0 <HAL_GetTick>
 800fad4:	4602      	mov	r2, r0
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	1ad3      	subs	r3, r2, r3
 800fada:	2b02      	cmp	r3, #2
 800fadc:	d901      	bls.n	800fae2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800fade:	2303      	movs	r3, #3
 800fae0:	e176      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800fae2:	4b32      	ldr	r3, [pc, #200]	; (800fbac <HAL_RCC_OscConfig+0x57c>)
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faea:	2b00      	cmp	r3, #0
 800faec:	d0f0      	beq.n	800fad0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	689b      	ldr	r3, [r3, #8]
 800faf2:	2b01      	cmp	r3, #1
 800faf4:	d108      	bne.n	800fb08 <HAL_RCC_OscConfig+0x4d8>
 800faf6:	4b2c      	ldr	r3, [pc, #176]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800faf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fafc:	4a2a      	ldr	r2, [pc, #168]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fafe:	f043 0301 	orr.w	r3, r3, #1
 800fb02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fb06:	e024      	b.n	800fb52 <HAL_RCC_OscConfig+0x522>
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	689b      	ldr	r3, [r3, #8]
 800fb0c:	2b05      	cmp	r3, #5
 800fb0e:	d110      	bne.n	800fb32 <HAL_RCC_OscConfig+0x502>
 800fb10:	4b25      	ldr	r3, [pc, #148]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb16:	4a24      	ldr	r2, [pc, #144]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb18:	f043 0304 	orr.w	r3, r3, #4
 800fb1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fb20:	4b21      	ldr	r3, [pc, #132]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb26:	4a20      	ldr	r2, [pc, #128]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb28:	f043 0301 	orr.w	r3, r3, #1
 800fb2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fb30:	e00f      	b.n	800fb52 <HAL_RCC_OscConfig+0x522>
 800fb32:	4b1d      	ldr	r3, [pc, #116]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb38:	4a1b      	ldr	r2, [pc, #108]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb3a:	f023 0301 	bic.w	r3, r3, #1
 800fb3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800fb42:	4b19      	ldr	r3, [pc, #100]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb48:	4a17      	ldr	r2, [pc, #92]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb4a:	f023 0304 	bic.w	r3, r3, #4
 800fb4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	689b      	ldr	r3, [r3, #8]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d016      	beq.n	800fb88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb5a:	f7fd fec9 	bl	800d8f0 <HAL_GetTick>
 800fb5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fb60:	e00a      	b.n	800fb78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb62:	f7fd fec5 	bl	800d8f0 <HAL_GetTick>
 800fb66:	4602      	mov	r2, r0
 800fb68:	693b      	ldr	r3, [r7, #16]
 800fb6a:	1ad3      	subs	r3, r2, r3
 800fb6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d901      	bls.n	800fb78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800fb74:	2303      	movs	r3, #3
 800fb76:	e12b      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800fb78:	4b0b      	ldr	r3, [pc, #44]	; (800fba8 <HAL_RCC_OscConfig+0x578>)
 800fb7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fb7e:	f003 0302 	and.w	r3, r3, #2
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d0ed      	beq.n	800fb62 <HAL_RCC_OscConfig+0x532>
 800fb86:	e01a      	b.n	800fbbe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fb88:	f7fd feb2 	bl	800d8f0 <HAL_GetTick>
 800fb8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fb8e:	e00f      	b.n	800fbb0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fb90:	f7fd feae 	bl	800d8f0 <HAL_GetTick>
 800fb94:	4602      	mov	r2, r0
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb9e:	4293      	cmp	r3, r2
 800fba0:	d906      	bls.n	800fbb0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800fba2:	2303      	movs	r3, #3
 800fba4:	e114      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
 800fba6:	bf00      	nop
 800fba8:	40021000 	.word	0x40021000
 800fbac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800fbb0:	4b89      	ldr	r3, [pc, #548]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fbb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fbb6:	f003 0302 	and.w	r3, r3, #2
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d1e8      	bne.n	800fb90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800fbbe:	7ffb      	ldrb	r3, [r7, #31]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d105      	bne.n	800fbd0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800fbc4:	4b84      	ldr	r3, [pc, #528]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fbc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fbc8:	4a83      	ldr	r2, [pc, #524]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fbca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800fbce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	f000 80fa 	beq.w	800fdce <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fbde:	2b02      	cmp	r3, #2
 800fbe0:	f040 80d0 	bne.w	800fd84 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800fbe4:	4b7c      	ldr	r3, [pc, #496]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fbe6:	68db      	ldr	r3, [r3, #12]
 800fbe8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fbea:	697b      	ldr	r3, [r7, #20]
 800fbec:	f003 0203 	and.w	r2, r3, #3
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbf4:	429a      	cmp	r2, r3
 800fbf6:	d130      	bne.n	800fc5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc02:	3b01      	subs	r3, #1
 800fc04:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d127      	bne.n	800fc5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc14:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d11f      	bne.n	800fc5a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fc1a:	697b      	ldr	r3, [r7, #20]
 800fc1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fc20:	687a      	ldr	r2, [r7, #4]
 800fc22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fc24:	2a07      	cmp	r2, #7
 800fc26:	bf14      	ite	ne
 800fc28:	2201      	movne	r2, #1
 800fc2a:	2200      	moveq	r2, #0
 800fc2c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800fc2e:	4293      	cmp	r3, r2
 800fc30:	d113      	bne.n	800fc5a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc3c:	085b      	lsrs	r3, r3, #1
 800fc3e:	3b01      	subs	r3, #1
 800fc40:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800fc42:	429a      	cmp	r2, r3
 800fc44:	d109      	bne.n	800fc5a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800fc46:	697b      	ldr	r3, [r7, #20]
 800fc48:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc50:	085b      	lsrs	r3, r3, #1
 800fc52:	3b01      	subs	r3, #1
 800fc54:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d06e      	beq.n	800fd38 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fc5a:	69bb      	ldr	r3, [r7, #24]
 800fc5c:	2b0c      	cmp	r3, #12
 800fc5e:	d069      	beq.n	800fd34 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800fc60:	4b5d      	ldr	r3, [pc, #372]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d105      	bne.n	800fc78 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800fc6c:	4b5a      	ldr	r3, [pc, #360]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e0a9      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800fc7c:	4b56      	ldr	r3, [pc, #344]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a55      	ldr	r2, [pc, #340]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fc82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fc86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fc88:	f7fd fe32 	bl	800d8f0 <HAL_GetTick>
 800fc8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fc8e:	e008      	b.n	800fca2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc90:	f7fd fe2e 	bl	800d8f0 <HAL_GetTick>
 800fc94:	4602      	mov	r2, r0
 800fc96:	693b      	ldr	r3, [r7, #16]
 800fc98:	1ad3      	subs	r3, r2, r3
 800fc9a:	2b02      	cmp	r3, #2
 800fc9c:	d901      	bls.n	800fca2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800fc9e:	2303      	movs	r3, #3
 800fca0:	e096      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fca2:	4b4d      	ldr	r3, [pc, #308]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d1f0      	bne.n	800fc90 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fcae:	4b4a      	ldr	r3, [pc, #296]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fcb0:	68da      	ldr	r2, [r3, #12]
 800fcb2:	4b4a      	ldr	r3, [pc, #296]	; (800fddc <HAL_RCC_OscConfig+0x7ac>)
 800fcb4:	4013      	ands	r3, r2
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800fcba:	687a      	ldr	r2, [r7, #4]
 800fcbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fcbe:	3a01      	subs	r2, #1
 800fcc0:	0112      	lsls	r2, r2, #4
 800fcc2:	4311      	orrs	r1, r2
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800fcc8:	0212      	lsls	r2, r2, #8
 800fcca:	4311      	orrs	r1, r2
 800fccc:	687a      	ldr	r2, [r7, #4]
 800fcce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800fcd0:	0852      	lsrs	r2, r2, #1
 800fcd2:	3a01      	subs	r2, #1
 800fcd4:	0552      	lsls	r2, r2, #21
 800fcd6:	4311      	orrs	r1, r2
 800fcd8:	687a      	ldr	r2, [r7, #4]
 800fcda:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800fcdc:	0852      	lsrs	r2, r2, #1
 800fcde:	3a01      	subs	r2, #1
 800fce0:	0652      	lsls	r2, r2, #25
 800fce2:	4311      	orrs	r1, r2
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800fce8:	0912      	lsrs	r2, r2, #4
 800fcea:	0452      	lsls	r2, r2, #17
 800fcec:	430a      	orrs	r2, r1
 800fcee:	493a      	ldr	r1, [pc, #232]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fcf0:	4313      	orrs	r3, r2
 800fcf2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800fcf4:	4b38      	ldr	r3, [pc, #224]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fcf6:	681b      	ldr	r3, [r3, #0]
 800fcf8:	4a37      	ldr	r2, [pc, #220]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fcfa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fcfe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd00:	4b35      	ldr	r3, [pc, #212]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd02:	68db      	ldr	r3, [r3, #12]
 800fd04:	4a34      	ldr	r2, [pc, #208]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd0a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800fd0c:	f7fd fdf0 	bl	800d8f0 <HAL_GetTick>
 800fd10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd12:	e008      	b.n	800fd26 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd14:	f7fd fdec 	bl	800d8f0 <HAL_GetTick>
 800fd18:	4602      	mov	r2, r0
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	1ad3      	subs	r3, r2, r3
 800fd1e:	2b02      	cmp	r3, #2
 800fd20:	d901      	bls.n	800fd26 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800fd22:	2303      	movs	r3, #3
 800fd24:	e054      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd26:	4b2c      	ldr	r3, [pc, #176]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d0f0      	beq.n	800fd14 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fd32:	e04c      	b.n	800fdce <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800fd34:	2301      	movs	r3, #1
 800fd36:	e04b      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd38:	4b27      	ldr	r3, [pc, #156]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d144      	bne.n	800fdce <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800fd44:	4b24      	ldr	r3, [pc, #144]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4a23      	ldr	r2, [pc, #140]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800fd50:	4b21      	ldr	r3, [pc, #132]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd52:	68db      	ldr	r3, [r3, #12]
 800fd54:	4a20      	ldr	r2, [pc, #128]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800fd5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fd5c:	f7fd fdc8 	bl	800d8f0 <HAL_GetTick>
 800fd60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd62:	e008      	b.n	800fd76 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd64:	f7fd fdc4 	bl	800d8f0 <HAL_GetTick>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	693b      	ldr	r3, [r7, #16]
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	2b02      	cmp	r3, #2
 800fd70:	d901      	bls.n	800fd76 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800fd72:	2303      	movs	r3, #3
 800fd74:	e02c      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fd76:	4b18      	ldr	r3, [pc, #96]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d0f0      	beq.n	800fd64 <HAL_RCC_OscConfig+0x734>
 800fd82:	e024      	b.n	800fdce <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800fd84:	69bb      	ldr	r3, [r7, #24]
 800fd86:	2b0c      	cmp	r3, #12
 800fd88:	d01f      	beq.n	800fdca <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fd8a:	4b13      	ldr	r3, [pc, #76]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	4a12      	ldr	r2, [pc, #72]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fd90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800fd94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd96:	f7fd fdab 	bl	800d8f0 <HAL_GetTick>
 800fd9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fd9c:	e008      	b.n	800fdb0 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd9e:	f7fd fda7 	bl	800d8f0 <HAL_GetTick>
 800fda2:	4602      	mov	r2, r0
 800fda4:	693b      	ldr	r3, [r7, #16]
 800fda6:	1ad3      	subs	r3, r2, r3
 800fda8:	2b02      	cmp	r3, #2
 800fdaa:	d901      	bls.n	800fdb0 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 800fdac:	2303      	movs	r3, #3
 800fdae:	e00f      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800fdb0:	4b09      	ldr	r3, [pc, #36]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d1f0      	bne.n	800fd9e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800fdbc:	4b06      	ldr	r3, [pc, #24]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fdbe:	68da      	ldr	r2, [r3, #12]
 800fdc0:	4905      	ldr	r1, [pc, #20]	; (800fdd8 <HAL_RCC_OscConfig+0x7a8>)
 800fdc2:	4b07      	ldr	r3, [pc, #28]	; (800fde0 <HAL_RCC_OscConfig+0x7b0>)
 800fdc4:	4013      	ands	r3, r2
 800fdc6:	60cb      	str	r3, [r1, #12]
 800fdc8:	e001      	b.n	800fdce <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800fdca:	2301      	movs	r3, #1
 800fdcc:	e000      	b.n	800fdd0 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800fdce:	2300      	movs	r3, #0
}
 800fdd0:	4618      	mov	r0, r3
 800fdd2:	3720      	adds	r7, #32
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	bd80      	pop	{r7, pc}
 800fdd8:	40021000 	.word	0x40021000
 800fddc:	f99d808c 	.word	0xf99d808c
 800fde0:	feeefffc 	.word	0xfeeefffc

0800fde4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b084      	sub	sp, #16
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
 800fdec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d101      	bne.n	800fdf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fdf4:	2301      	movs	r3, #1
 800fdf6:	e0e7      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800fdf8:	4b75      	ldr	r3, [pc, #468]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	f003 0307 	and.w	r3, r3, #7
 800fe00:	683a      	ldr	r2, [r7, #0]
 800fe02:	429a      	cmp	r2, r3
 800fe04:	d910      	bls.n	800fe28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe06:	4b72      	ldr	r3, [pc, #456]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	f023 0207 	bic.w	r2, r3, #7
 800fe0e:	4970      	ldr	r1, [pc, #448]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800fe10:	683b      	ldr	r3, [r7, #0]
 800fe12:	4313      	orrs	r3, r2
 800fe14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800fe16:	4b6e      	ldr	r3, [pc, #440]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800fe18:	681b      	ldr	r3, [r3, #0]
 800fe1a:	f003 0307 	and.w	r3, r3, #7
 800fe1e:	683a      	ldr	r2, [r7, #0]
 800fe20:	429a      	cmp	r2, r3
 800fe22:	d001      	beq.n	800fe28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800fe24:	2301      	movs	r3, #1
 800fe26:	e0cf      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f003 0302 	and.w	r3, r3, #2
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d010      	beq.n	800fe56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	689a      	ldr	r2, [r3, #8]
 800fe38:	4b66      	ldr	r3, [pc, #408]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe3a:	689b      	ldr	r3, [r3, #8]
 800fe3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fe40:	429a      	cmp	r2, r3
 800fe42:	d908      	bls.n	800fe56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fe44:	4b63      	ldr	r3, [pc, #396]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe46:	689b      	ldr	r3, [r3, #8]
 800fe48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	689b      	ldr	r3, [r3, #8]
 800fe50:	4960      	ldr	r1, [pc, #384]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe52:	4313      	orrs	r3, r2
 800fe54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	681b      	ldr	r3, [r3, #0]
 800fe5a:	f003 0301 	and.w	r3, r3, #1
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d04c      	beq.n	800fefc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	2b03      	cmp	r3, #3
 800fe68:	d107      	bne.n	800fe7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800fe6a:	4b5a      	ldr	r3, [pc, #360]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fe72:	2b00      	cmp	r3, #0
 800fe74:	d121      	bne.n	800feba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800fe76:	2301      	movs	r3, #1
 800fe78:	e0a6      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	685b      	ldr	r3, [r3, #4]
 800fe7e:	2b02      	cmp	r3, #2
 800fe80:	d107      	bne.n	800fe92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800fe82:	4b54      	ldr	r3, [pc, #336]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fe8a:	2b00      	cmp	r3, #0
 800fe8c:	d115      	bne.n	800feba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fe8e:	2301      	movs	r3, #1
 800fe90:	e09a      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	685b      	ldr	r3, [r3, #4]
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d107      	bne.n	800feaa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800fe9a:	4b4e      	ldr	r3, [pc, #312]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800fe9c:	681b      	ldr	r3, [r3, #0]
 800fe9e:	f003 0302 	and.w	r3, r3, #2
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d109      	bne.n	800feba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800fea6:	2301      	movs	r3, #1
 800fea8:	e08e      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800feaa:	4b4a      	ldr	r3, [pc, #296]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d101      	bne.n	800feba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800feb6:	2301      	movs	r3, #1
 800feb8:	e086      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800feba:	4b46      	ldr	r3, [pc, #280]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800febc:	689b      	ldr	r3, [r3, #8]
 800febe:	f023 0203 	bic.w	r2, r3, #3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	4943      	ldr	r1, [pc, #268]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800fec8:	4313      	orrs	r3, r2
 800feca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fecc:	f7fd fd10 	bl	800d8f0 <HAL_GetTick>
 800fed0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fed2:	e00a      	b.n	800feea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fed4:	f7fd fd0c 	bl	800d8f0 <HAL_GetTick>
 800fed8:	4602      	mov	r2, r0
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	1ad3      	subs	r3, r2, r3
 800fede:	f241 3288 	movw	r2, #5000	; 0x1388
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d901      	bls.n	800feea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800fee6:	2303      	movs	r3, #3
 800fee8:	e06e      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800feea:	4b3a      	ldr	r3, [pc, #232]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800feec:	689b      	ldr	r3, [r3, #8]
 800feee:	f003 020c 	and.w	r2, r3, #12
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	685b      	ldr	r3, [r3, #4]
 800fef6:	009b      	lsls	r3, r3, #2
 800fef8:	429a      	cmp	r2, r3
 800fefa:	d1eb      	bne.n	800fed4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	f003 0302 	and.w	r3, r3, #2
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	d010      	beq.n	800ff2a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	689a      	ldr	r2, [r3, #8]
 800ff0c:	4b31      	ldr	r3, [pc, #196]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ff0e:	689b      	ldr	r3, [r3, #8]
 800ff10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff14:	429a      	cmp	r2, r3
 800ff16:	d208      	bcs.n	800ff2a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff18:	4b2e      	ldr	r3, [pc, #184]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	689b      	ldr	r3, [r3, #8]
 800ff24:	492b      	ldr	r1, [pc, #172]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ff26:	4313      	orrs	r3, r2
 800ff28:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800ff2a:	4b29      	ldr	r3, [pc, #164]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800ff2c:	681b      	ldr	r3, [r3, #0]
 800ff2e:	f003 0307 	and.w	r3, r3, #7
 800ff32:	683a      	ldr	r2, [r7, #0]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d210      	bcs.n	800ff5a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ff38:	4b25      	ldr	r3, [pc, #148]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	f023 0207 	bic.w	r2, r3, #7
 800ff40:	4923      	ldr	r1, [pc, #140]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	4313      	orrs	r3, r2
 800ff46:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800ff48:	4b21      	ldr	r3, [pc, #132]	; (800ffd0 <HAL_RCC_ClockConfig+0x1ec>)
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	f003 0307 	and.w	r3, r3, #7
 800ff50:	683a      	ldr	r2, [r7, #0]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d001      	beq.n	800ff5a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800ff56:	2301      	movs	r3, #1
 800ff58:	e036      	b.n	800ffc8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	681b      	ldr	r3, [r3, #0]
 800ff5e:	f003 0304 	and.w	r3, r3, #4
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d008      	beq.n	800ff78 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ff66:	4b1b      	ldr	r3, [pc, #108]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ff68:	689b      	ldr	r3, [r3, #8]
 800ff6a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	4918      	ldr	r1, [pc, #96]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ff74:	4313      	orrs	r3, r2
 800ff76:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	f003 0308 	and.w	r3, r3, #8
 800ff80:	2b00      	cmp	r3, #0
 800ff82:	d009      	beq.n	800ff98 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ff84:	4b13      	ldr	r3, [pc, #76]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ff86:	689b      	ldr	r3, [r3, #8]
 800ff88:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	691b      	ldr	r3, [r3, #16]
 800ff90:	00db      	lsls	r3, r3, #3
 800ff92:	4910      	ldr	r1, [pc, #64]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ff94:	4313      	orrs	r3, r2
 800ff96:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ff98:	f000 f824 	bl	800ffe4 <HAL_RCC_GetSysClockFreq>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	4b0d      	ldr	r3, [pc, #52]	; (800ffd4 <HAL_RCC_ClockConfig+0x1f0>)
 800ffa0:	689b      	ldr	r3, [r3, #8]
 800ffa2:	091b      	lsrs	r3, r3, #4
 800ffa4:	f003 030f 	and.w	r3, r3, #15
 800ffa8:	490b      	ldr	r1, [pc, #44]	; (800ffd8 <HAL_RCC_ClockConfig+0x1f4>)
 800ffaa:	5ccb      	ldrb	r3, [r1, r3]
 800ffac:	f003 031f 	and.w	r3, r3, #31
 800ffb0:	fa22 f303 	lsr.w	r3, r2, r3
 800ffb4:	4a09      	ldr	r2, [pc, #36]	; (800ffdc <HAL_RCC_ClockConfig+0x1f8>)
 800ffb6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ffb8:	4b09      	ldr	r3, [pc, #36]	; (800ffe0 <HAL_RCC_ClockConfig+0x1fc>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7fd fc47 	bl	800d850 <HAL_InitTick>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	72fb      	strb	r3, [r7, #11]

  return status;
 800ffc6:	7afb      	ldrb	r3, [r7, #11]
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}
 800ffd0:	40022000 	.word	0x40022000
 800ffd4:	40021000 	.word	0x40021000
 800ffd8:	080167ec 	.word	0x080167ec
 800ffdc:	200005a4 	.word	0x200005a4
 800ffe0:	20000928 	.word	0x20000928

0800ffe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ffe4:	b480      	push	{r7}
 800ffe6:	b089      	sub	sp, #36	; 0x24
 800ffe8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800ffea:	2300      	movs	r3, #0
 800ffec:	61fb      	str	r3, [r7, #28]
 800ffee:	2300      	movs	r3, #0
 800fff0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fff2:	4b3e      	ldr	r3, [pc, #248]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 800fff4:	689b      	ldr	r3, [r3, #8]
 800fff6:	f003 030c 	and.w	r3, r3, #12
 800fffa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800fffc:	4b3b      	ldr	r3, [pc, #236]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 800fffe:	68db      	ldr	r3, [r3, #12]
 8010000:	f003 0303 	and.w	r3, r3, #3
 8010004:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d005      	beq.n	8010018 <HAL_RCC_GetSysClockFreq+0x34>
 801000c:	693b      	ldr	r3, [r7, #16]
 801000e:	2b0c      	cmp	r3, #12
 8010010:	d121      	bne.n	8010056 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2b01      	cmp	r3, #1
 8010016:	d11e      	bne.n	8010056 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8010018:	4b34      	ldr	r3, [pc, #208]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	f003 0308 	and.w	r3, r3, #8
 8010020:	2b00      	cmp	r3, #0
 8010022:	d107      	bne.n	8010034 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8010024:	4b31      	ldr	r3, [pc, #196]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 8010026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801002a:	0a1b      	lsrs	r3, r3, #8
 801002c:	f003 030f 	and.w	r3, r3, #15
 8010030:	61fb      	str	r3, [r7, #28]
 8010032:	e005      	b.n	8010040 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8010034:	4b2d      	ldr	r3, [pc, #180]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	091b      	lsrs	r3, r3, #4
 801003a:	f003 030f 	and.w	r3, r3, #15
 801003e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8010040:	4a2b      	ldr	r2, [pc, #172]	; (80100f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010048:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 801004a:	693b      	ldr	r3, [r7, #16]
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10d      	bne.n	801006c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8010050:	69fb      	ldr	r3, [r7, #28]
 8010052:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8010054:	e00a      	b.n	801006c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	2b04      	cmp	r3, #4
 801005a:	d102      	bne.n	8010062 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 801005c:	4b25      	ldr	r3, [pc, #148]	; (80100f4 <HAL_RCC_GetSysClockFreq+0x110>)
 801005e:	61bb      	str	r3, [r7, #24]
 8010060:	e004      	b.n	801006c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	2b08      	cmp	r3, #8
 8010066:	d101      	bne.n	801006c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8010068:	4b23      	ldr	r3, [pc, #140]	; (80100f8 <HAL_RCC_GetSysClockFreq+0x114>)
 801006a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	2b0c      	cmp	r3, #12
 8010070:	d134      	bne.n	80100dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8010072:	4b1e      	ldr	r3, [pc, #120]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 8010074:	68db      	ldr	r3, [r3, #12]
 8010076:	f003 0303 	and.w	r3, r3, #3
 801007a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	2b02      	cmp	r3, #2
 8010080:	d003      	beq.n	801008a <HAL_RCC_GetSysClockFreq+0xa6>
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	2b03      	cmp	r3, #3
 8010086:	d003      	beq.n	8010090 <HAL_RCC_GetSysClockFreq+0xac>
 8010088:	e005      	b.n	8010096 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 801008a:	4b1a      	ldr	r3, [pc, #104]	; (80100f4 <HAL_RCC_GetSysClockFreq+0x110>)
 801008c:	617b      	str	r3, [r7, #20]
      break;
 801008e:	e005      	b.n	801009c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8010090:	4b19      	ldr	r3, [pc, #100]	; (80100f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8010092:	617b      	str	r3, [r7, #20]
      break;
 8010094:	e002      	b.n	801009c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8010096:	69fb      	ldr	r3, [r7, #28]
 8010098:	617b      	str	r3, [r7, #20]
      break;
 801009a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 801009c:	4b13      	ldr	r3, [pc, #76]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	091b      	lsrs	r3, r3, #4
 80100a2:	f003 0307 	and.w	r3, r3, #7
 80100a6:	3301      	adds	r3, #1
 80100a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80100aa:	4b10      	ldr	r3, [pc, #64]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 80100ac:	68db      	ldr	r3, [r3, #12]
 80100ae:	0a1b      	lsrs	r3, r3, #8
 80100b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80100b4:	697a      	ldr	r2, [r7, #20]
 80100b6:	fb02 f203 	mul.w	r2, r2, r3
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80100c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80100c2:	4b0a      	ldr	r3, [pc, #40]	; (80100ec <HAL_RCC_GetSysClockFreq+0x108>)
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	0e5b      	lsrs	r3, r3, #25
 80100c8:	f003 0303 	and.w	r3, r3, #3
 80100cc:	3301      	adds	r3, #1
 80100ce:	005b      	lsls	r3, r3, #1
 80100d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80100d2:	697a      	ldr	r2, [r7, #20]
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80100da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80100dc:	69bb      	ldr	r3, [r7, #24]
}
 80100de:	4618      	mov	r0, r3
 80100e0:	3724      	adds	r7, #36	; 0x24
 80100e2:	46bd      	mov	sp, r7
 80100e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e8:	4770      	bx	lr
 80100ea:	bf00      	nop
 80100ec:	40021000 	.word	0x40021000
 80100f0:	08016804 	.word	0x08016804
 80100f4:	00f42400 	.word	0x00f42400
 80100f8:	007a1200 	.word	0x007a1200

080100fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80100fc:	b480      	push	{r7}
 80100fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010100:	4b03      	ldr	r3, [pc, #12]	; (8010110 <HAL_RCC_GetHCLKFreq+0x14>)
 8010102:	681b      	ldr	r3, [r3, #0]
}
 8010104:	4618      	mov	r0, r3
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	200005a4 	.word	0x200005a4

08010114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8010118:	f7ff fff0 	bl	80100fc <HAL_RCC_GetHCLKFreq>
 801011c:	4602      	mov	r2, r0
 801011e:	4b06      	ldr	r3, [pc, #24]	; (8010138 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010120:	689b      	ldr	r3, [r3, #8]
 8010122:	0a1b      	lsrs	r3, r3, #8
 8010124:	f003 0307 	and.w	r3, r3, #7
 8010128:	4904      	ldr	r1, [pc, #16]	; (801013c <HAL_RCC_GetPCLK1Freq+0x28>)
 801012a:	5ccb      	ldrb	r3, [r1, r3]
 801012c:	f003 031f 	and.w	r3, r3, #31
 8010130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010134:	4618      	mov	r0, r3
 8010136:	bd80      	pop	{r7, pc}
 8010138:	40021000 	.word	0x40021000
 801013c:	080167fc 	.word	0x080167fc

08010140 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010140:	b580      	push	{r7, lr}
 8010142:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8010144:	f7ff ffda 	bl	80100fc <HAL_RCC_GetHCLKFreq>
 8010148:	4602      	mov	r2, r0
 801014a:	4b06      	ldr	r3, [pc, #24]	; (8010164 <HAL_RCC_GetPCLK2Freq+0x24>)
 801014c:	689b      	ldr	r3, [r3, #8]
 801014e:	0adb      	lsrs	r3, r3, #11
 8010150:	f003 0307 	and.w	r3, r3, #7
 8010154:	4904      	ldr	r1, [pc, #16]	; (8010168 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010156:	5ccb      	ldrb	r3, [r1, r3]
 8010158:	f003 031f 	and.w	r3, r3, #31
 801015c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010160:	4618      	mov	r0, r3
 8010162:	bd80      	pop	{r7, pc}
 8010164:	40021000 	.word	0x40021000
 8010168:	080167fc 	.word	0x080167fc

0801016c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b086      	sub	sp, #24
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8010174:	2300      	movs	r3, #0
 8010176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8010178:	4b2a      	ldr	r3, [pc, #168]	; (8010224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801017a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801017c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010180:	2b00      	cmp	r3, #0
 8010182:	d003      	beq.n	801018c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8010184:	f7ff f9f0 	bl	800f568 <HAL_PWREx_GetVoltageRange>
 8010188:	6178      	str	r0, [r7, #20]
 801018a:	e014      	b.n	80101b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 801018c:	4b25      	ldr	r3, [pc, #148]	; (8010224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801018e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010190:	4a24      	ldr	r2, [pc, #144]	; (8010224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8010192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010196:	6593      	str	r3, [r2, #88]	; 0x58
 8010198:	4b22      	ldr	r3, [pc, #136]	; (8010224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 801019a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801019c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101a0:	60fb      	str	r3, [r7, #12]
 80101a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80101a4:	f7ff f9e0 	bl	800f568 <HAL_PWREx_GetVoltageRange>
 80101a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80101aa:	4b1e      	ldr	r3, [pc, #120]	; (8010224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80101ae:	4a1d      	ldr	r2, [pc, #116]	; (8010224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80101b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80101b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80101b6:	697b      	ldr	r3, [r7, #20]
 80101b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101bc:	d10b      	bne.n	80101d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2b80      	cmp	r3, #128	; 0x80
 80101c2:	d919      	bls.n	80101f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	2ba0      	cmp	r3, #160	; 0xa0
 80101c8:	d902      	bls.n	80101d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80101ca:	2302      	movs	r3, #2
 80101cc:	613b      	str	r3, [r7, #16]
 80101ce:	e013      	b.n	80101f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80101d0:	2301      	movs	r3, #1
 80101d2:	613b      	str	r3, [r7, #16]
 80101d4:	e010      	b.n	80101f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2b80      	cmp	r3, #128	; 0x80
 80101da:	d902      	bls.n	80101e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80101dc:	2303      	movs	r3, #3
 80101de:	613b      	str	r3, [r7, #16]
 80101e0:	e00a      	b.n	80101f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80101e2:	687b      	ldr	r3, [r7, #4]
 80101e4:	2b80      	cmp	r3, #128	; 0x80
 80101e6:	d102      	bne.n	80101ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80101e8:	2302      	movs	r3, #2
 80101ea:	613b      	str	r3, [r7, #16]
 80101ec:	e004      	b.n	80101f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2b70      	cmp	r3, #112	; 0x70
 80101f2:	d101      	bne.n	80101f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80101f4:	2301      	movs	r3, #1
 80101f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80101f8:	4b0b      	ldr	r3, [pc, #44]	; (8010228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	f023 0207 	bic.w	r2, r3, #7
 8010200:	4909      	ldr	r1, [pc, #36]	; (8010228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8010202:	693b      	ldr	r3, [r7, #16]
 8010204:	4313      	orrs	r3, r2
 8010206:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8010208:	4b07      	ldr	r3, [pc, #28]	; (8010228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 801020a:	681b      	ldr	r3, [r3, #0]
 801020c:	f003 0307 	and.w	r3, r3, #7
 8010210:	693a      	ldr	r2, [r7, #16]
 8010212:	429a      	cmp	r2, r3
 8010214:	d001      	beq.n	801021a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8010216:	2301      	movs	r3, #1
 8010218:	e000      	b.n	801021c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 801021a:	2300      	movs	r3, #0
}
 801021c:	4618      	mov	r0, r3
 801021e:	3718      	adds	r7, #24
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}
 8010224:	40021000 	.word	0x40021000
 8010228:	40022000 	.word	0x40022000

0801022c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b086      	sub	sp, #24
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010234:	2300      	movs	r3, #0
 8010236:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010238:	2300      	movs	r3, #0
 801023a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010244:	2b00      	cmp	r3, #0
 8010246:	d041      	beq.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801024c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010250:	d02a      	beq.n	80102a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8010252:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8010256:	d824      	bhi.n	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010258:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801025c:	d008      	beq.n	8010270 <HAL_RCCEx_PeriphCLKConfig+0x44>
 801025e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010262:	d81e      	bhi.n	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8010264:	2b00      	cmp	r3, #0
 8010266:	d00a      	beq.n	801027e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8010268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801026c:	d010      	beq.n	8010290 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801026e:	e018      	b.n	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010270:	4b86      	ldr	r3, [pc, #536]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010272:	68db      	ldr	r3, [r3, #12]
 8010274:	4a85      	ldr	r2, [pc, #532]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010276:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801027a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 801027c:	e015      	b.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801027e:	687b      	ldr	r3, [r7, #4]
 8010280:	3304      	adds	r3, #4
 8010282:	2100      	movs	r1, #0
 8010284:	4618      	mov	r0, r3
 8010286:	f000 fabb 	bl	8010800 <RCCEx_PLLSAI1_Config>
 801028a:	4603      	mov	r3, r0
 801028c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 801028e:	e00c      	b.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	3320      	adds	r3, #32
 8010294:	2100      	movs	r1, #0
 8010296:	4618      	mov	r0, r3
 8010298:	f000 fba6 	bl	80109e8 <RCCEx_PLLSAI2_Config>
 801029c:	4603      	mov	r3, r0
 801029e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80102a0:	e003      	b.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80102a2:	2301      	movs	r3, #1
 80102a4:	74fb      	strb	r3, [r7, #19]
      break;
 80102a6:	e000      	b.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80102a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80102aa:	7cfb      	ldrb	r3, [r7, #19]
 80102ac:	2b00      	cmp	r3, #0
 80102ae:	d10b      	bne.n	80102c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80102b0:	4b76      	ldr	r3, [pc, #472]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80102b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80102be:	4973      	ldr	r1, [pc, #460]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80102c0:	4313      	orrs	r3, r2
 80102c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80102c6:	e001      	b.n	80102cc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102c8:	7cfb      	ldrb	r3, [r7, #19]
 80102ca:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	681b      	ldr	r3, [r3, #0]
 80102d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d041      	beq.n	801035c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80102dc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80102e0:	d02a      	beq.n	8010338 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80102e2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80102e6:	d824      	bhi.n	8010332 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80102e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80102ec:	d008      	beq.n	8010300 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80102ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80102f2:	d81e      	bhi.n	8010332 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00a      	beq.n	801030e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80102f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80102fc:	d010      	beq.n	8010320 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80102fe:	e018      	b.n	8010332 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8010300:	4b62      	ldr	r3, [pc, #392]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010302:	68db      	ldr	r3, [r3, #12]
 8010304:	4a61      	ldr	r2, [pc, #388]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801030a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801030c:	e015      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	3304      	adds	r3, #4
 8010312:	2100      	movs	r1, #0
 8010314:	4618      	mov	r0, r3
 8010316:	f000 fa73 	bl	8010800 <RCCEx_PLLSAI1_Config>
 801031a:	4603      	mov	r3, r0
 801031c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 801031e:	e00c      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	3320      	adds	r3, #32
 8010324:	2100      	movs	r1, #0
 8010326:	4618      	mov	r0, r3
 8010328:	f000 fb5e 	bl	80109e8 <RCCEx_PLLSAI2_Config>
 801032c:	4603      	mov	r3, r0
 801032e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8010330:	e003      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8010332:	2301      	movs	r3, #1
 8010334:	74fb      	strb	r3, [r7, #19]
      break;
 8010336:	e000      	b.n	801033a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8010338:	bf00      	nop
    }

    if(ret == HAL_OK)
 801033a:	7cfb      	ldrb	r3, [r7, #19]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d10b      	bne.n	8010358 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8010340:	4b52      	ldr	r3, [pc, #328]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010346:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801034e:	494f      	ldr	r1, [pc, #316]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010350:	4313      	orrs	r3, r2
 8010352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8010356:	e001      	b.n	801035c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010358:	7cfb      	ldrb	r3, [r7, #19]
 801035a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010364:	2b00      	cmp	r3, #0
 8010366:	f000 80a0 	beq.w	80104aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 801036a:	2300      	movs	r3, #0
 801036c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801036e:	4b47      	ldr	r3, [pc, #284]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010376:	2b00      	cmp	r3, #0
 8010378:	d101      	bne.n	801037e <HAL_RCCEx_PeriphCLKConfig+0x152>
 801037a:	2301      	movs	r3, #1
 801037c:	e000      	b.n	8010380 <HAL_RCCEx_PeriphCLKConfig+0x154>
 801037e:	2300      	movs	r3, #0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d00d      	beq.n	80103a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010384:	4b41      	ldr	r3, [pc, #260]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010388:	4a40      	ldr	r2, [pc, #256]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801038a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801038e:	6593      	str	r3, [r2, #88]	; 0x58
 8010390:	4b3e      	ldr	r3, [pc, #248]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010398:	60bb      	str	r3, [r7, #8]
 801039a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 801039c:	2301      	movs	r3, #1
 801039e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80103a0:	4b3b      	ldr	r3, [pc, #236]	; (8010490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	4a3a      	ldr	r2, [pc, #232]	; (8010490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80103ac:	f7fd faa0 	bl	800d8f0 <HAL_GetTick>
 80103b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80103b2:	e009      	b.n	80103c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80103b4:	f7fd fa9c 	bl	800d8f0 <HAL_GetTick>
 80103b8:	4602      	mov	r2, r0
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	1ad3      	subs	r3, r2, r3
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d902      	bls.n	80103c8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80103c2:	2303      	movs	r3, #3
 80103c4:	74fb      	strb	r3, [r7, #19]
        break;
 80103c6:	e005      	b.n	80103d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80103c8:	4b31      	ldr	r3, [pc, #196]	; (8010490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103d0:	2b00      	cmp	r3, #0
 80103d2:	d0ef      	beq.n	80103b4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80103d4:	7cfb      	ldrb	r3, [r7, #19]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d15c      	bne.n	8010494 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80103da:	4b2c      	ldr	r3, [pc, #176]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80103e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d01f      	beq.n	801042c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80103f2:	697a      	ldr	r2, [r7, #20]
 80103f4:	429a      	cmp	r2, r3
 80103f6:	d019      	beq.n	801042c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80103f8:	4b24      	ldr	r3, [pc, #144]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80103fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80103fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010402:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010404:	4b21      	ldr	r3, [pc, #132]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010406:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801040a:	4a20      	ldr	r2, [pc, #128]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801040c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010410:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010414:	4b1d      	ldr	r3, [pc, #116]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801041a:	4a1c      	ldr	r2, [pc, #112]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801041c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8010420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8010424:	4a19      	ldr	r2, [pc, #100]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	f003 0301 	and.w	r3, r3, #1
 8010432:	2b00      	cmp	r3, #0
 8010434:	d016      	beq.n	8010464 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010436:	f7fd fa5b 	bl	800d8f0 <HAL_GetTick>
 801043a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 801043c:	e00b      	b.n	8010456 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801043e:	f7fd fa57 	bl	800d8f0 <HAL_GetTick>
 8010442:	4602      	mov	r2, r0
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	1ad3      	subs	r3, r2, r3
 8010448:	f241 3288 	movw	r2, #5000	; 0x1388
 801044c:	4293      	cmp	r3, r2
 801044e:	d902      	bls.n	8010456 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8010450:	2303      	movs	r3, #3
 8010452:	74fb      	strb	r3, [r7, #19]
            break;
 8010454:	e006      	b.n	8010464 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8010456:	4b0d      	ldr	r3, [pc, #52]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8010458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801045c:	f003 0302 	and.w	r3, r3, #2
 8010460:	2b00      	cmp	r3, #0
 8010462:	d0ec      	beq.n	801043e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8010464:	7cfb      	ldrb	r3, [r7, #19]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d10c      	bne.n	8010484 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801046a:	4b08      	ldr	r3, [pc, #32]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801046c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010470:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801047a:	4904      	ldr	r1, [pc, #16]	; (801048c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 801047c:	4313      	orrs	r3, r2
 801047e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8010482:	e009      	b.n	8010498 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010484:	7cfb      	ldrb	r3, [r7, #19]
 8010486:	74bb      	strb	r3, [r7, #18]
 8010488:	e006      	b.n	8010498 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 801048a:	bf00      	nop
 801048c:	40021000 	.word	0x40021000
 8010490:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010494:	7cfb      	ldrb	r3, [r7, #19]
 8010496:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010498:	7c7b      	ldrb	r3, [r7, #17]
 801049a:	2b01      	cmp	r3, #1
 801049c:	d105      	bne.n	80104aa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 801049e:	4b9e      	ldr	r3, [pc, #632]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104a2:	4a9d      	ldr	r2, [pc, #628]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80104a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	681b      	ldr	r3, [r3, #0]
 80104ae:	f003 0301 	and.w	r3, r3, #1
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d00a      	beq.n	80104cc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80104b6:	4b98      	ldr	r3, [pc, #608]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104bc:	f023 0203 	bic.w	r2, r3, #3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80104c4:	4994      	ldr	r1, [pc, #592]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104c6:	4313      	orrs	r3, r2
 80104c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	f003 0302 	and.w	r3, r3, #2
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d00a      	beq.n	80104ee <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80104d8:	4b8f      	ldr	r3, [pc, #572]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80104de:	f023 020c 	bic.w	r2, r3, #12
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80104e6:	498c      	ldr	r1, [pc, #560]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104e8:	4313      	orrs	r3, r2
 80104ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	681b      	ldr	r3, [r3, #0]
 80104f2:	f003 0304 	and.w	r3, r3, #4
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d00a      	beq.n	8010510 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80104fa:	4b87      	ldr	r3, [pc, #540]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80104fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010500:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010508:	4983      	ldr	r1, [pc, #524]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801050a:	4313      	orrs	r3, r2
 801050c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	f003 0308 	and.w	r3, r3, #8
 8010518:	2b00      	cmp	r3, #0
 801051a:	d00a      	beq.n	8010532 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 801051c:	4b7e      	ldr	r3, [pc, #504]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801051e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010522:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801052a:	497b      	ldr	r1, [pc, #492]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801052c:	4313      	orrs	r3, r2
 801052e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	f003 0310 	and.w	r3, r3, #16
 801053a:	2b00      	cmp	r3, #0
 801053c:	d00a      	beq.n	8010554 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 801053e:	4b76      	ldr	r3, [pc, #472]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010544:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801054c:	4972      	ldr	r1, [pc, #456]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801054e:	4313      	orrs	r3, r2
 8010550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	f003 0320 	and.w	r3, r3, #32
 801055c:	2b00      	cmp	r3, #0
 801055e:	d00a      	beq.n	8010576 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010560:	4b6d      	ldr	r3, [pc, #436]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010566:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801056e:	496a      	ldr	r1, [pc, #424]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010570:	4313      	orrs	r3, r2
 8010572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801057e:	2b00      	cmp	r3, #0
 8010580:	d00a      	beq.n	8010598 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010582:	4b65      	ldr	r3, [pc, #404]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010588:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010590:	4961      	ldr	r1, [pc, #388]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010592:	4313      	orrs	r3, r2
 8010594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d00a      	beq.n	80105ba <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80105a4:	4b5c      	ldr	r3, [pc, #368]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105b2:	4959      	ldr	r1, [pc, #356]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105b4:	4313      	orrs	r3, r2
 80105b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d00a      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80105c6:	4b54      	ldr	r3, [pc, #336]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105cc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80105d4:	4950      	ldr	r1, [pc, #320]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105d6:	4313      	orrs	r3, r2
 80105d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d00a      	beq.n	80105fe <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80105e8:	4b4b      	ldr	r3, [pc, #300]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80105ee:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80105f6:	4948      	ldr	r1, [pc, #288]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80105f8:	4313      	orrs	r3, r2
 80105fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010606:	2b00      	cmp	r3, #0
 8010608:	d00a      	beq.n	8010620 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 801060a:	4b43      	ldr	r3, [pc, #268]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801060c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010610:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010618:	493f      	ldr	r1, [pc, #252]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801061a:	4313      	orrs	r3, r2
 801061c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010628:	2b00      	cmp	r3, #0
 801062a:	d028      	beq.n	801067e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801062c:	4b3a      	ldr	r3, [pc, #232]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801062e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010632:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801063a:	4937      	ldr	r1, [pc, #220]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801063c:	4313      	orrs	r3, r2
 801063e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010646:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801064a:	d106      	bne.n	801065a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 801064c:	4b32      	ldr	r3, [pc, #200]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	4a31      	ldr	r2, [pc, #196]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8010652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010656:	60d3      	str	r3, [r2, #12]
 8010658:	e011      	b.n	801067e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010662:	d10c      	bne.n	801067e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	3304      	adds	r3, #4
 8010668:	2101      	movs	r1, #1
 801066a:	4618      	mov	r0, r3
 801066c:	f000 f8c8 	bl	8010800 <RCCEx_PLLSAI1_Config>
 8010670:	4603      	mov	r3, r0
 8010672:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8010674:	7cfb      	ldrb	r3, [r7, #19]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d001      	beq.n	801067e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 801067a:	7cfb      	ldrb	r3, [r7, #19]
 801067c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8010686:	2b00      	cmp	r3, #0
 8010688:	d028      	beq.n	80106dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 801068a:	4b23      	ldr	r3, [pc, #140]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801068c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010690:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010698:	491f      	ldr	r1, [pc, #124]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801069a:	4313      	orrs	r3, r2
 801069c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80106a8:	d106      	bne.n	80106b8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80106aa:	4b1b      	ldr	r3, [pc, #108]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106ac:	68db      	ldr	r3, [r3, #12]
 80106ae:	4a1a      	ldr	r2, [pc, #104]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80106b4:	60d3      	str	r3, [r2, #12]
 80106b6:	e011      	b.n	80106dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80106c0:	d10c      	bne.n	80106dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	3304      	adds	r3, #4
 80106c6:	2101      	movs	r1, #1
 80106c8:	4618      	mov	r0, r3
 80106ca:	f000 f899 	bl	8010800 <RCCEx_PLLSAI1_Config>
 80106ce:	4603      	mov	r3, r0
 80106d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80106d2:	7cfb      	ldrb	r3, [r7, #19]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d001      	beq.n	80106dc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80106d8:	7cfb      	ldrb	r3, [r7, #19]
 80106da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d02b      	beq.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80106e8:	4b0b      	ldr	r3, [pc, #44]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80106ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106f6:	4908      	ldr	r1, [pc, #32]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80106f8:	4313      	orrs	r3, r2
 80106fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8010706:	d109      	bne.n	801071c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8010708:	4b03      	ldr	r3, [pc, #12]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801070a:	68db      	ldr	r3, [r3, #12]
 801070c:	4a02      	ldr	r2, [pc, #8]	; (8010718 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 801070e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010712:	60d3      	str	r3, [r2, #12]
 8010714:	e014      	b.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8010716:	bf00      	nop
 8010718:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010724:	d10c      	bne.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	3304      	adds	r3, #4
 801072a:	2101      	movs	r1, #1
 801072c:	4618      	mov	r0, r3
 801072e:	f000 f867 	bl	8010800 <RCCEx_PLLSAI1_Config>
 8010732:	4603      	mov	r3, r0
 8010734:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8010736:	7cfb      	ldrb	r3, [r7, #19]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d001      	beq.n	8010740 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 801073c:	7cfb      	ldrb	r3, [r7, #19]
 801073e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8010748:	2b00      	cmp	r3, #0
 801074a:	d02f      	beq.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801074c:	4b2b      	ldr	r3, [pc, #172]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801074e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801075a:	4928      	ldr	r1, [pc, #160]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 801075c:	4313      	orrs	r3, r2
 801075e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010766:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801076a:	d10d      	bne.n	8010788 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	3304      	adds	r3, #4
 8010770:	2102      	movs	r1, #2
 8010772:	4618      	mov	r0, r3
 8010774:	f000 f844 	bl	8010800 <RCCEx_PLLSAI1_Config>
 8010778:	4603      	mov	r3, r0
 801077a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 801077c:	7cfb      	ldrb	r3, [r7, #19]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d014      	beq.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8010782:	7cfb      	ldrb	r3, [r7, #19]
 8010784:	74bb      	strb	r3, [r7, #18]
 8010786:	e011      	b.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801078c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010790:	d10c      	bne.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	3320      	adds	r3, #32
 8010796:	2102      	movs	r1, #2
 8010798:	4618      	mov	r0, r3
 801079a:	f000 f925 	bl	80109e8 <RCCEx_PLLSAI2_Config>
 801079e:	4603      	mov	r3, r0
 80107a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80107a2:	7cfb      	ldrb	r3, [r7, #19]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d001      	beq.n	80107ac <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80107a8:	7cfb      	ldrb	r3, [r7, #19]
 80107aa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80107ac:	687b      	ldr	r3, [r7, #4]
 80107ae:	681b      	ldr	r3, [r3, #0]
 80107b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d00a      	beq.n	80107ce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80107b8:	4b10      	ldr	r3, [pc, #64]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107be:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80107c6:	490d      	ldr	r1, [pc, #52]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107c8:	4313      	orrs	r3, r2
 80107ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d00b      	beq.n	80107f2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80107da:	4b08      	ldr	r3, [pc, #32]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80107e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80107ea:	4904      	ldr	r1, [pc, #16]	; (80107fc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80107ec:	4313      	orrs	r3, r2
 80107ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80107f2:	7cbb      	ldrb	r3, [r7, #18]
}
 80107f4:	4618      	mov	r0, r3
 80107f6:	3718      	adds	r7, #24
 80107f8:	46bd      	mov	sp, r7
 80107fa:	bd80      	pop	{r7, pc}
 80107fc:	40021000 	.word	0x40021000

08010800 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8010800:	b580      	push	{r7, lr}
 8010802:	b084      	sub	sp, #16
 8010804:	af00      	add	r7, sp, #0
 8010806:	6078      	str	r0, [r7, #4]
 8010808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801080a:	2300      	movs	r3, #0
 801080c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 801080e:	4b75      	ldr	r3, [pc, #468]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010810:	68db      	ldr	r3, [r3, #12]
 8010812:	f003 0303 	and.w	r3, r3, #3
 8010816:	2b00      	cmp	r3, #0
 8010818:	d018      	beq.n	801084c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 801081a:	4b72      	ldr	r3, [pc, #456]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801081c:	68db      	ldr	r3, [r3, #12]
 801081e:	f003 0203 	and.w	r2, r3, #3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	429a      	cmp	r2, r3
 8010828:	d10d      	bne.n	8010846 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	681b      	ldr	r3, [r3, #0]
       ||
 801082e:	2b00      	cmp	r3, #0
 8010830:	d009      	beq.n	8010846 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8010832:	4b6c      	ldr	r3, [pc, #432]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010834:	68db      	ldr	r3, [r3, #12]
 8010836:	091b      	lsrs	r3, r3, #4
 8010838:	f003 0307 	and.w	r3, r3, #7
 801083c:	1c5a      	adds	r2, r3, #1
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	685b      	ldr	r3, [r3, #4]
       ||
 8010842:	429a      	cmp	r2, r3
 8010844:	d047      	beq.n	80108d6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010846:	2301      	movs	r3, #1
 8010848:	73fb      	strb	r3, [r7, #15]
 801084a:	e044      	b.n	80108d6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	2b03      	cmp	r3, #3
 8010852:	d018      	beq.n	8010886 <RCCEx_PLLSAI1_Config+0x86>
 8010854:	2b03      	cmp	r3, #3
 8010856:	d825      	bhi.n	80108a4 <RCCEx_PLLSAI1_Config+0xa4>
 8010858:	2b01      	cmp	r3, #1
 801085a:	d002      	beq.n	8010862 <RCCEx_PLLSAI1_Config+0x62>
 801085c:	2b02      	cmp	r3, #2
 801085e:	d009      	beq.n	8010874 <RCCEx_PLLSAI1_Config+0x74>
 8010860:	e020      	b.n	80108a4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010862:	4b60      	ldr	r3, [pc, #384]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010864:	681b      	ldr	r3, [r3, #0]
 8010866:	f003 0302 	and.w	r3, r3, #2
 801086a:	2b00      	cmp	r3, #0
 801086c:	d11d      	bne.n	80108aa <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 801086e:	2301      	movs	r3, #1
 8010870:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010872:	e01a      	b.n	80108aa <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010874:	4b5b      	ldr	r3, [pc, #364]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801087c:	2b00      	cmp	r3, #0
 801087e:	d116      	bne.n	80108ae <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8010880:	2301      	movs	r3, #1
 8010882:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010884:	e013      	b.n	80108ae <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010886:	4b57      	ldr	r3, [pc, #348]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010888:	681b      	ldr	r3, [r3, #0]
 801088a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801088e:	2b00      	cmp	r3, #0
 8010890:	d10f      	bne.n	80108b2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010892:	4b54      	ldr	r3, [pc, #336]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 801089a:	2b00      	cmp	r3, #0
 801089c:	d109      	bne.n	80108b2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 801089e:	2301      	movs	r3, #1
 80108a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80108a2:	e006      	b.n	80108b2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80108a4:	2301      	movs	r3, #1
 80108a6:	73fb      	strb	r3, [r7, #15]
      break;
 80108a8:	e004      	b.n	80108b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108aa:	bf00      	nop
 80108ac:	e002      	b.n	80108b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108ae:	bf00      	nop
 80108b0:	e000      	b.n	80108b4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80108b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80108b4:	7bfb      	ldrb	r3, [r7, #15]
 80108b6:	2b00      	cmp	r3, #0
 80108b8:	d10d      	bne.n	80108d6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80108ba:	4b4a      	ldr	r3, [pc, #296]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108bc:	68db      	ldr	r3, [r3, #12]
 80108be:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	6819      	ldr	r1, [r3, #0]
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	685b      	ldr	r3, [r3, #4]
 80108ca:	3b01      	subs	r3, #1
 80108cc:	011b      	lsls	r3, r3, #4
 80108ce:	430b      	orrs	r3, r1
 80108d0:	4944      	ldr	r1, [pc, #272]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108d2:	4313      	orrs	r3, r2
 80108d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80108d6:	7bfb      	ldrb	r3, [r7, #15]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d17d      	bne.n	80109d8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80108dc:	4b41      	ldr	r3, [pc, #260]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108de:	681b      	ldr	r3, [r3, #0]
 80108e0:	4a40      	ldr	r2, [pc, #256]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80108e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80108e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80108e8:	f7fd f802 	bl	800d8f0 <HAL_GetTick>
 80108ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80108ee:	e009      	b.n	8010904 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80108f0:	f7fc fffe 	bl	800d8f0 <HAL_GetTick>
 80108f4:	4602      	mov	r2, r0
 80108f6:	68bb      	ldr	r3, [r7, #8]
 80108f8:	1ad3      	subs	r3, r2, r3
 80108fa:	2b02      	cmp	r3, #2
 80108fc:	d902      	bls.n	8010904 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80108fe:	2303      	movs	r3, #3
 8010900:	73fb      	strb	r3, [r7, #15]
        break;
 8010902:	e005      	b.n	8010910 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8010904:	4b37      	ldr	r3, [pc, #220]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801090c:	2b00      	cmp	r3, #0
 801090e:	d1ef      	bne.n	80108f0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010910:	7bfb      	ldrb	r3, [r7, #15]
 8010912:	2b00      	cmp	r3, #0
 8010914:	d160      	bne.n	80109d8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010916:	683b      	ldr	r3, [r7, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d111      	bne.n	8010940 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801091c:	4b31      	ldr	r3, [pc, #196]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801091e:	691b      	ldr	r3, [r3, #16]
 8010920:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8010924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010928:	687a      	ldr	r2, [r7, #4]
 801092a:	6892      	ldr	r2, [r2, #8]
 801092c:	0211      	lsls	r1, r2, #8
 801092e:	687a      	ldr	r2, [r7, #4]
 8010930:	68d2      	ldr	r2, [r2, #12]
 8010932:	0912      	lsrs	r2, r2, #4
 8010934:	0452      	lsls	r2, r2, #17
 8010936:	430a      	orrs	r2, r1
 8010938:	492a      	ldr	r1, [pc, #168]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801093a:	4313      	orrs	r3, r2
 801093c:	610b      	str	r3, [r1, #16]
 801093e:	e027      	b.n	8010990 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	2b01      	cmp	r3, #1
 8010944:	d112      	bne.n	801096c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8010946:	4b27      	ldr	r3, [pc, #156]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010948:	691b      	ldr	r3, [r3, #16]
 801094a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 801094e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010952:	687a      	ldr	r2, [r7, #4]
 8010954:	6892      	ldr	r2, [r2, #8]
 8010956:	0211      	lsls	r1, r2, #8
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	6912      	ldr	r2, [r2, #16]
 801095c:	0852      	lsrs	r2, r2, #1
 801095e:	3a01      	subs	r2, #1
 8010960:	0552      	lsls	r2, r2, #21
 8010962:	430a      	orrs	r2, r1
 8010964:	491f      	ldr	r1, [pc, #124]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010966:	4313      	orrs	r3, r2
 8010968:	610b      	str	r3, [r1, #16]
 801096a:	e011      	b.n	8010990 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 801096c:	4b1d      	ldr	r3, [pc, #116]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801096e:	691b      	ldr	r3, [r3, #16]
 8010970:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8010974:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010978:	687a      	ldr	r2, [r7, #4]
 801097a:	6892      	ldr	r2, [r2, #8]
 801097c:	0211      	lsls	r1, r2, #8
 801097e:	687a      	ldr	r2, [r7, #4]
 8010980:	6952      	ldr	r2, [r2, #20]
 8010982:	0852      	lsrs	r2, r2, #1
 8010984:	3a01      	subs	r2, #1
 8010986:	0652      	lsls	r2, r2, #25
 8010988:	430a      	orrs	r2, r1
 801098a:	4916      	ldr	r1, [pc, #88]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 801098c:	4313      	orrs	r3, r2
 801098e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8010990:	4b14      	ldr	r3, [pc, #80]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	4a13      	ldr	r2, [pc, #76]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8010996:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801099a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801099c:	f7fc ffa8 	bl	800d8f0 <HAL_GetTick>
 80109a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80109a2:	e009      	b.n	80109b8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80109a4:	f7fc ffa4 	bl	800d8f0 <HAL_GetTick>
 80109a8:	4602      	mov	r2, r0
 80109aa:	68bb      	ldr	r3, [r7, #8]
 80109ac:	1ad3      	subs	r3, r2, r3
 80109ae:	2b02      	cmp	r3, #2
 80109b0:	d902      	bls.n	80109b8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80109b2:	2303      	movs	r3, #3
 80109b4:	73fb      	strb	r3, [r7, #15]
          break;
 80109b6:	e005      	b.n	80109c4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80109b8:	4b0a      	ldr	r3, [pc, #40]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80109c0:	2b00      	cmp	r3, #0
 80109c2:	d0ef      	beq.n	80109a4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80109c4:	7bfb      	ldrb	r3, [r7, #15]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d106      	bne.n	80109d8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80109ca:	4b06      	ldr	r3, [pc, #24]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109cc:	691a      	ldr	r2, [r3, #16]
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	699b      	ldr	r3, [r3, #24]
 80109d2:	4904      	ldr	r1, [pc, #16]	; (80109e4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80109d4:	4313      	orrs	r3, r2
 80109d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80109d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80109da:	4618      	mov	r0, r3
 80109dc:	3710      	adds	r7, #16
 80109de:	46bd      	mov	sp, r7
 80109e0:	bd80      	pop	{r7, pc}
 80109e2:	bf00      	nop
 80109e4:	40021000 	.word	0x40021000

080109e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80109e8:	b580      	push	{r7, lr}
 80109ea:	b084      	sub	sp, #16
 80109ec:	af00      	add	r7, sp, #0
 80109ee:	6078      	str	r0, [r7, #4]
 80109f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80109f2:	2300      	movs	r3, #0
 80109f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80109f6:	4b6a      	ldr	r3, [pc, #424]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80109f8:	68db      	ldr	r3, [r3, #12]
 80109fa:	f003 0303 	and.w	r3, r3, #3
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d018      	beq.n	8010a34 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8010a02:	4b67      	ldr	r3, [pc, #412]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a04:	68db      	ldr	r3, [r3, #12]
 8010a06:	f003 0203 	and.w	r2, r3, #3
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	681b      	ldr	r3, [r3, #0]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d10d      	bne.n	8010a2e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	681b      	ldr	r3, [r3, #0]
       ||
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d009      	beq.n	8010a2e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8010a1a:	4b61      	ldr	r3, [pc, #388]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a1c:	68db      	ldr	r3, [r3, #12]
 8010a1e:	091b      	lsrs	r3, r3, #4
 8010a20:	f003 0307 	and.w	r3, r3, #7
 8010a24:	1c5a      	adds	r2, r3, #1
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	685b      	ldr	r3, [r3, #4]
       ||
 8010a2a:	429a      	cmp	r2, r3
 8010a2c:	d047      	beq.n	8010abe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8010a2e:	2301      	movs	r3, #1
 8010a30:	73fb      	strb	r3, [r7, #15]
 8010a32:	e044      	b.n	8010abe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	681b      	ldr	r3, [r3, #0]
 8010a38:	2b03      	cmp	r3, #3
 8010a3a:	d018      	beq.n	8010a6e <RCCEx_PLLSAI2_Config+0x86>
 8010a3c:	2b03      	cmp	r3, #3
 8010a3e:	d825      	bhi.n	8010a8c <RCCEx_PLLSAI2_Config+0xa4>
 8010a40:	2b01      	cmp	r3, #1
 8010a42:	d002      	beq.n	8010a4a <RCCEx_PLLSAI2_Config+0x62>
 8010a44:	2b02      	cmp	r3, #2
 8010a46:	d009      	beq.n	8010a5c <RCCEx_PLLSAI2_Config+0x74>
 8010a48:	e020      	b.n	8010a8c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8010a4a:	4b55      	ldr	r3, [pc, #340]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	f003 0302 	and.w	r3, r3, #2
 8010a52:	2b00      	cmp	r3, #0
 8010a54:	d11d      	bne.n	8010a92 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8010a56:	2301      	movs	r3, #1
 8010a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a5a:	e01a      	b.n	8010a92 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8010a5c:	4b50      	ldr	r3, [pc, #320]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8010a64:	2b00      	cmp	r3, #0
 8010a66:	d116      	bne.n	8010a96 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8010a68:	2301      	movs	r3, #1
 8010a6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8010a6c:	e013      	b.n	8010a96 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8010a6e:	4b4c      	ldr	r3, [pc, #304]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d10f      	bne.n	8010a9a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8010a7a:	4b49      	ldr	r3, [pc, #292]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d109      	bne.n	8010a9a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8010a86:	2301      	movs	r3, #1
 8010a88:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010a8a:	e006      	b.n	8010a9a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8010a8c:	2301      	movs	r3, #1
 8010a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8010a90:	e004      	b.n	8010a9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010a92:	bf00      	nop
 8010a94:	e002      	b.n	8010a9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010a96:	bf00      	nop
 8010a98:	e000      	b.n	8010a9c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8010a9a:	bf00      	nop
    }

    if(status == HAL_OK)
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d10d      	bne.n	8010abe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8010aa2:	4b3f      	ldr	r3, [pc, #252]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aa4:	68db      	ldr	r3, [r3, #12]
 8010aa6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	6819      	ldr	r1, [r3, #0]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	685b      	ldr	r3, [r3, #4]
 8010ab2:	3b01      	subs	r3, #1
 8010ab4:	011b      	lsls	r3, r3, #4
 8010ab6:	430b      	orrs	r3, r1
 8010ab8:	4939      	ldr	r1, [pc, #228]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aba:	4313      	orrs	r3, r2
 8010abc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8010abe:	7bfb      	ldrb	r3, [r7, #15]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d167      	bne.n	8010b94 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8010ac4:	4b36      	ldr	r3, [pc, #216]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010ac6:	681b      	ldr	r3, [r3, #0]
 8010ac8:	4a35      	ldr	r2, [pc, #212]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010ace:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010ad0:	f7fc ff0e 	bl	800d8f0 <HAL_GetTick>
 8010ad4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010ad6:	e009      	b.n	8010aec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010ad8:	f7fc ff0a 	bl	800d8f0 <HAL_GetTick>
 8010adc:	4602      	mov	r2, r0
 8010ade:	68bb      	ldr	r3, [r7, #8]
 8010ae0:	1ad3      	subs	r3, r2, r3
 8010ae2:	2b02      	cmp	r3, #2
 8010ae4:	d902      	bls.n	8010aec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8010ae6:	2303      	movs	r3, #3
 8010ae8:	73fb      	strb	r3, [r7, #15]
        break;
 8010aea:	e005      	b.n	8010af8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8010aec:	4b2c      	ldr	r3, [pc, #176]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d1ef      	bne.n	8010ad8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8010af8:	7bfb      	ldrb	r3, [r7, #15]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d14a      	bne.n	8010b94 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d111      	bne.n	8010b28 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010b04:	4b26      	ldr	r3, [pc, #152]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b06:	695b      	ldr	r3, [r3, #20]
 8010b08:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8010b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8010b10:	687a      	ldr	r2, [r7, #4]
 8010b12:	6892      	ldr	r2, [r2, #8]
 8010b14:	0211      	lsls	r1, r2, #8
 8010b16:	687a      	ldr	r2, [r7, #4]
 8010b18:	68d2      	ldr	r2, [r2, #12]
 8010b1a:	0912      	lsrs	r2, r2, #4
 8010b1c:	0452      	lsls	r2, r2, #17
 8010b1e:	430a      	orrs	r2, r1
 8010b20:	491f      	ldr	r1, [pc, #124]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b22:	4313      	orrs	r3, r2
 8010b24:	614b      	str	r3, [r1, #20]
 8010b26:	e011      	b.n	8010b4c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8010b28:	4b1d      	ldr	r3, [pc, #116]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b2a:	695b      	ldr	r3, [r3, #20]
 8010b2c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8010b30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8010b34:	687a      	ldr	r2, [r7, #4]
 8010b36:	6892      	ldr	r2, [r2, #8]
 8010b38:	0211      	lsls	r1, r2, #8
 8010b3a:	687a      	ldr	r2, [r7, #4]
 8010b3c:	6912      	ldr	r2, [r2, #16]
 8010b3e:	0852      	lsrs	r2, r2, #1
 8010b40:	3a01      	subs	r2, #1
 8010b42:	0652      	lsls	r2, r2, #25
 8010b44:	430a      	orrs	r2, r1
 8010b46:	4916      	ldr	r1, [pc, #88]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b48:	4313      	orrs	r3, r2
 8010b4a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8010b4c:	4b14      	ldr	r3, [pc, #80]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a13      	ldr	r2, [pc, #76]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8010b58:	f7fc feca 	bl	800d8f0 <HAL_GetTick>
 8010b5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010b5e:	e009      	b.n	8010b74 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8010b60:	f7fc fec6 	bl	800d8f0 <HAL_GetTick>
 8010b64:	4602      	mov	r2, r0
 8010b66:	68bb      	ldr	r3, [r7, #8]
 8010b68:	1ad3      	subs	r3, r2, r3
 8010b6a:	2b02      	cmp	r3, #2
 8010b6c:	d902      	bls.n	8010b74 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8010b6e:	2303      	movs	r3, #3
 8010b70:	73fb      	strb	r3, [r7, #15]
          break;
 8010b72:	e005      	b.n	8010b80 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8010b74:	4b0a      	ldr	r3, [pc, #40]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d0ef      	beq.n	8010b60 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8010b80:	7bfb      	ldrb	r3, [r7, #15]
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d106      	bne.n	8010b94 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8010b86:	4b06      	ldr	r3, [pc, #24]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b88:	695a      	ldr	r2, [r3, #20]
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	695b      	ldr	r3, [r3, #20]
 8010b8e:	4904      	ldr	r1, [pc, #16]	; (8010ba0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8010b90:	4313      	orrs	r3, r2
 8010b92:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8010b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b96:	4618      	mov	r0, r3
 8010b98:	3710      	adds	r7, #16
 8010b9a:	46bd      	mov	sp, r7
 8010b9c:	bd80      	pop	{r7, pc}
 8010b9e:	bf00      	nop
 8010ba0:	40021000 	.word	0x40021000

08010ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8010ba4:	b580      	push	{r7, lr}
 8010ba6:	b082      	sub	sp, #8
 8010ba8:	af00      	add	r7, sp, #0
 8010baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d101      	bne.n	8010bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8010bb2:	2301      	movs	r3, #1
 8010bb4:	e049      	b.n	8010c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d106      	bne.n	8010bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	2200      	movs	r2, #0
 8010bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8010bca:	6878      	ldr	r0, [r7, #4]
 8010bcc:	f7f6 f94c 	bl	8006e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	2202      	movs	r2, #2
 8010bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	3304      	adds	r3, #4
 8010be0:	4619      	mov	r1, r3
 8010be2:	4610      	mov	r0, r2
 8010be4:	f000 fa56 	bl	8011094 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2201      	movs	r2, #1
 8010bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2201      	movs	r2, #1
 8010bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	2201      	movs	r2, #1
 8010c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	2201      	movs	r2, #1
 8010c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	2201      	movs	r2, #1
 8010c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	2201      	movs	r2, #1
 8010c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	2201      	movs	r2, #1
 8010c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2201      	movs	r2, #1
 8010c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2201      	movs	r2, #1
 8010c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2201      	movs	r2, #1
 8010c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	2201      	movs	r2, #1
 8010c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8010c48:	2300      	movs	r3, #0
}
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	3708      	adds	r7, #8
 8010c4e:	46bd      	mov	sp, r7
 8010c50:	bd80      	pop	{r7, pc}
	...

08010c54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8010c54:	b480      	push	{r7}
 8010c56:	b085      	sub	sp, #20
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010c62:	b2db      	uxtb	r3, r3
 8010c64:	2b01      	cmp	r3, #1
 8010c66:	d001      	beq.n	8010c6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8010c68:	2301      	movs	r3, #1
 8010c6a:	e047      	b.n	8010cfc <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2202      	movs	r2, #2
 8010c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	4a23      	ldr	r2, [pc, #140]	; (8010d08 <HAL_TIM_Base_Start+0xb4>)
 8010c7a:	4293      	cmp	r3, r2
 8010c7c:	d01d      	beq.n	8010cba <HAL_TIM_Base_Start+0x66>
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010c86:	d018      	beq.n	8010cba <HAL_TIM_Base_Start+0x66>
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	681b      	ldr	r3, [r3, #0]
 8010c8c:	4a1f      	ldr	r2, [pc, #124]	; (8010d0c <HAL_TIM_Base_Start+0xb8>)
 8010c8e:	4293      	cmp	r3, r2
 8010c90:	d013      	beq.n	8010cba <HAL_TIM_Base_Start+0x66>
 8010c92:	687b      	ldr	r3, [r7, #4]
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4a1e      	ldr	r2, [pc, #120]	; (8010d10 <HAL_TIM_Base_Start+0xbc>)
 8010c98:	4293      	cmp	r3, r2
 8010c9a:	d00e      	beq.n	8010cba <HAL_TIM_Base_Start+0x66>
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	681b      	ldr	r3, [r3, #0]
 8010ca0:	4a1c      	ldr	r2, [pc, #112]	; (8010d14 <HAL_TIM_Base_Start+0xc0>)
 8010ca2:	4293      	cmp	r3, r2
 8010ca4:	d009      	beq.n	8010cba <HAL_TIM_Base_Start+0x66>
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	681b      	ldr	r3, [r3, #0]
 8010caa:	4a1b      	ldr	r2, [pc, #108]	; (8010d18 <HAL_TIM_Base_Start+0xc4>)
 8010cac:	4293      	cmp	r3, r2
 8010cae:	d004      	beq.n	8010cba <HAL_TIM_Base_Start+0x66>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	4a19      	ldr	r2, [pc, #100]	; (8010d1c <HAL_TIM_Base_Start+0xc8>)
 8010cb6:	4293      	cmp	r3, r2
 8010cb8:	d115      	bne.n	8010ce6 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	681b      	ldr	r3, [r3, #0]
 8010cbe:	689a      	ldr	r2, [r3, #8]
 8010cc0:	4b17      	ldr	r3, [pc, #92]	; (8010d20 <HAL_TIM_Base_Start+0xcc>)
 8010cc2:	4013      	ands	r3, r2
 8010cc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010cc6:	68fb      	ldr	r3, [r7, #12]
 8010cc8:	2b06      	cmp	r3, #6
 8010cca:	d015      	beq.n	8010cf8 <HAL_TIM_Base_Start+0xa4>
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010cd2:	d011      	beq.n	8010cf8 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	681b      	ldr	r3, [r3, #0]
 8010cd8:	681a      	ldr	r2, [r3, #0]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	681b      	ldr	r3, [r3, #0]
 8010cde:	f042 0201 	orr.w	r2, r2, #1
 8010ce2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010ce4:	e008      	b.n	8010cf8 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	681a      	ldr	r2, [r3, #0]
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f042 0201 	orr.w	r2, r2, #1
 8010cf4:	601a      	str	r2, [r3, #0]
 8010cf6:	e000      	b.n	8010cfa <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010cf8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010cfa:	2300      	movs	r3, #0
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3714      	adds	r7, #20
 8010d00:	46bd      	mov	sp, r7
 8010d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d06:	4770      	bx	lr
 8010d08:	40012c00 	.word	0x40012c00
 8010d0c:	40000400 	.word	0x40000400
 8010d10:	40000800 	.word	0x40000800
 8010d14:	40000c00 	.word	0x40000c00
 8010d18:	40013400 	.word	0x40013400
 8010d1c:	40014000 	.word	0x40014000
 8010d20:	00010007 	.word	0x00010007

08010d24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8010d24:	b480      	push	{r7}
 8010d26:	b085      	sub	sp, #20
 8010d28:	af00      	add	r7, sp, #0
 8010d2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8010d32:	b2db      	uxtb	r3, r3
 8010d34:	2b01      	cmp	r3, #1
 8010d36:	d001      	beq.n	8010d3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	e04f      	b.n	8010ddc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2202      	movs	r2, #2
 8010d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	68da      	ldr	r2, [r3, #12]
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	f042 0201 	orr.w	r2, r2, #1
 8010d52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	4a23      	ldr	r2, [pc, #140]	; (8010de8 <HAL_TIM_Base_Start_IT+0xc4>)
 8010d5a:	4293      	cmp	r3, r2
 8010d5c:	d01d      	beq.n	8010d9a <HAL_TIM_Base_Start_IT+0x76>
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d66:	d018      	beq.n	8010d9a <HAL_TIM_Base_Start_IT+0x76>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	4a1f      	ldr	r2, [pc, #124]	; (8010dec <HAL_TIM_Base_Start_IT+0xc8>)
 8010d6e:	4293      	cmp	r3, r2
 8010d70:	d013      	beq.n	8010d9a <HAL_TIM_Base_Start_IT+0x76>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	4a1e      	ldr	r2, [pc, #120]	; (8010df0 <HAL_TIM_Base_Start_IT+0xcc>)
 8010d78:	4293      	cmp	r3, r2
 8010d7a:	d00e      	beq.n	8010d9a <HAL_TIM_Base_Start_IT+0x76>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4a1c      	ldr	r2, [pc, #112]	; (8010df4 <HAL_TIM_Base_Start_IT+0xd0>)
 8010d82:	4293      	cmp	r3, r2
 8010d84:	d009      	beq.n	8010d9a <HAL_TIM_Base_Start_IT+0x76>
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	4a1b      	ldr	r2, [pc, #108]	; (8010df8 <HAL_TIM_Base_Start_IT+0xd4>)
 8010d8c:	4293      	cmp	r3, r2
 8010d8e:	d004      	beq.n	8010d9a <HAL_TIM_Base_Start_IT+0x76>
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	4a19      	ldr	r2, [pc, #100]	; (8010dfc <HAL_TIM_Base_Start_IT+0xd8>)
 8010d96:	4293      	cmp	r3, r2
 8010d98:	d115      	bne.n	8010dc6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	689a      	ldr	r2, [r3, #8]
 8010da0:	4b17      	ldr	r3, [pc, #92]	; (8010e00 <HAL_TIM_Base_Start_IT+0xdc>)
 8010da2:	4013      	ands	r3, r2
 8010da4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2b06      	cmp	r3, #6
 8010daa:	d015      	beq.n	8010dd8 <HAL_TIM_Base_Start_IT+0xb4>
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010db2:	d011      	beq.n	8010dd8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	681a      	ldr	r2, [r3, #0]
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	681b      	ldr	r3, [r3, #0]
 8010dbe:	f042 0201 	orr.w	r2, r2, #1
 8010dc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010dc4:	e008      	b.n	8010dd8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	681b      	ldr	r3, [r3, #0]
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	681b      	ldr	r3, [r3, #0]
 8010dd0:	f042 0201 	orr.w	r2, r2, #1
 8010dd4:	601a      	str	r2, [r3, #0]
 8010dd6:	e000      	b.n	8010dda <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8010dd8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8010dda:	2300      	movs	r3, #0
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3714      	adds	r7, #20
 8010de0:	46bd      	mov	sp, r7
 8010de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de6:	4770      	bx	lr
 8010de8:	40012c00 	.word	0x40012c00
 8010dec:	40000400 	.word	0x40000400
 8010df0:	40000800 	.word	0x40000800
 8010df4:	40000c00 	.word	0x40000c00
 8010df8:	40013400 	.word	0x40013400
 8010dfc:	40014000 	.word	0x40014000
 8010e00:	00010007 	.word	0x00010007

08010e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8010e04:	b580      	push	{r7, lr}
 8010e06:	b082      	sub	sp, #8
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	681b      	ldr	r3, [r3, #0]
 8010e10:	691b      	ldr	r3, [r3, #16]
 8010e12:	f003 0302 	and.w	r3, r3, #2
 8010e16:	2b02      	cmp	r3, #2
 8010e18:	d122      	bne.n	8010e60 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	68db      	ldr	r3, [r3, #12]
 8010e20:	f003 0302 	and.w	r3, r3, #2
 8010e24:	2b02      	cmp	r3, #2
 8010e26:	d11b      	bne.n	8010e60 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f06f 0202 	mvn.w	r2, #2
 8010e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2201      	movs	r2, #1
 8010e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	699b      	ldr	r3, [r3, #24]
 8010e3e:	f003 0303 	and.w	r3, r3, #3
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d003      	beq.n	8010e4e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f000 f905 	bl	8011056 <HAL_TIM_IC_CaptureCallback>
 8010e4c:	e005      	b.n	8010e5a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8010e4e:	6878      	ldr	r0, [r7, #4]
 8010e50:	f000 f8f7 	bl	8011042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010e54:	6878      	ldr	r0, [r7, #4]
 8010e56:	f000 f908 	bl	801106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	691b      	ldr	r3, [r3, #16]
 8010e66:	f003 0304 	and.w	r3, r3, #4
 8010e6a:	2b04      	cmp	r3, #4
 8010e6c:	d122      	bne.n	8010eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	68db      	ldr	r3, [r3, #12]
 8010e74:	f003 0304 	and.w	r3, r3, #4
 8010e78:	2b04      	cmp	r3, #4
 8010e7a:	d11b      	bne.n	8010eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	681b      	ldr	r3, [r3, #0]
 8010e80:	f06f 0204 	mvn.w	r2, #4
 8010e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	2202      	movs	r2, #2
 8010e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8010e8c:	687b      	ldr	r3, [r7, #4]
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	699b      	ldr	r3, [r3, #24]
 8010e92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d003      	beq.n	8010ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f000 f8db 	bl	8011056 <HAL_TIM_IC_CaptureCallback>
 8010ea0:	e005      	b.n	8010eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ea2:	6878      	ldr	r0, [r7, #4]
 8010ea4:	f000 f8cd 	bl	8011042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	f000 f8de 	bl	801106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	2200      	movs	r2, #0
 8010eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	691b      	ldr	r3, [r3, #16]
 8010eba:	f003 0308 	and.w	r3, r3, #8
 8010ebe:	2b08      	cmp	r3, #8
 8010ec0:	d122      	bne.n	8010f08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	68db      	ldr	r3, [r3, #12]
 8010ec8:	f003 0308 	and.w	r3, r3, #8
 8010ecc:	2b08      	cmp	r3, #8
 8010ece:	d11b      	bne.n	8010f08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f06f 0208 	mvn.w	r2, #8
 8010ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	2204      	movs	r2, #4
 8010ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	69db      	ldr	r3, [r3, #28]
 8010ee6:	f003 0303 	and.w	r3, r3, #3
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d003      	beq.n	8010ef6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f000 f8b1 	bl	8011056 <HAL_TIM_IC_CaptureCallback>
 8010ef4:	e005      	b.n	8010f02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010ef6:	6878      	ldr	r0, [r7, #4]
 8010ef8:	f000 f8a3 	bl	8011042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010efc:	6878      	ldr	r0, [r7, #4]
 8010efe:	f000 f8b4 	bl	801106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	2200      	movs	r2, #0
 8010f06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	691b      	ldr	r3, [r3, #16]
 8010f0e:	f003 0310 	and.w	r3, r3, #16
 8010f12:	2b10      	cmp	r3, #16
 8010f14:	d122      	bne.n	8010f5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	68db      	ldr	r3, [r3, #12]
 8010f1c:	f003 0310 	and.w	r3, r3, #16
 8010f20:	2b10      	cmp	r3, #16
 8010f22:	d11b      	bne.n	8010f5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	f06f 0210 	mvn.w	r2, #16
 8010f2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2208      	movs	r2, #8
 8010f32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	69db      	ldr	r3, [r3, #28]
 8010f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d003      	beq.n	8010f4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f000 f887 	bl	8011056 <HAL_TIM_IC_CaptureCallback>
 8010f48:	e005      	b.n	8010f56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f000 f879 	bl	8011042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8010f50:	6878      	ldr	r0, [r7, #4]
 8010f52:	f000 f88a 	bl	801106a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	2200      	movs	r2, #0
 8010f5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	691b      	ldr	r3, [r3, #16]
 8010f62:	f003 0301 	and.w	r3, r3, #1
 8010f66:	2b01      	cmp	r3, #1
 8010f68:	d10e      	bne.n	8010f88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	681b      	ldr	r3, [r3, #0]
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	f003 0301 	and.w	r3, r3, #1
 8010f74:	2b01      	cmp	r3, #1
 8010f76:	d107      	bne.n	8010f88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	681b      	ldr	r3, [r3, #0]
 8010f7c:	f06f 0201 	mvn.w	r2, #1
 8010f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8010f82:	6878      	ldr	r0, [r7, #4]
 8010f84:	f7f5 fe50 	bl	8006c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	681b      	ldr	r3, [r3, #0]
 8010f8c:	691b      	ldr	r3, [r3, #16]
 8010f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010f92:	2b80      	cmp	r3, #128	; 0x80
 8010f94:	d10e      	bne.n	8010fb4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	681b      	ldr	r3, [r3, #0]
 8010f9a:	68db      	ldr	r3, [r3, #12]
 8010f9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fa0:	2b80      	cmp	r3, #128	; 0x80
 8010fa2:	d107      	bne.n	8010fb4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8010fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8010fae:	6878      	ldr	r0, [r7, #4]
 8010fb0:	f000 f914 	bl	80111dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	681b      	ldr	r3, [r3, #0]
 8010fb8:	691b      	ldr	r3, [r3, #16]
 8010fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fc2:	d10e      	bne.n	8010fe2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	68db      	ldr	r3, [r3, #12]
 8010fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fce:	2b80      	cmp	r3, #128	; 0x80
 8010fd0:	d107      	bne.n	8010fe2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8010fd2:	687b      	ldr	r3, [r7, #4]
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8010fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8010fdc:	6878      	ldr	r0, [r7, #4]
 8010fde:	f000 f907 	bl	80111f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8010fe2:	687b      	ldr	r3, [r7, #4]
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	691b      	ldr	r3, [r3, #16]
 8010fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010fec:	2b40      	cmp	r3, #64	; 0x40
 8010fee:	d10e      	bne.n	801100e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	68db      	ldr	r3, [r3, #12]
 8010ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010ffa:	2b40      	cmp	r3, #64	; 0x40
 8010ffc:	d107      	bne.n	801100e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8011006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 f838 	bl	801107e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	691b      	ldr	r3, [r3, #16]
 8011014:	f003 0320 	and.w	r3, r3, #32
 8011018:	2b20      	cmp	r3, #32
 801101a:	d10e      	bne.n	801103a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	681b      	ldr	r3, [r3, #0]
 8011020:	68db      	ldr	r3, [r3, #12]
 8011022:	f003 0320 	and.w	r3, r3, #32
 8011026:	2b20      	cmp	r3, #32
 8011028:	d107      	bne.n	801103a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	f06f 0220 	mvn.w	r2, #32
 8011032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8011034:	6878      	ldr	r0, [r7, #4]
 8011036:	f000 f8c7 	bl	80111c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801103a:	bf00      	nop
 801103c:	3708      	adds	r7, #8
 801103e:	46bd      	mov	sp, r7
 8011040:	bd80      	pop	{r7, pc}

08011042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8011042:	b480      	push	{r7}
 8011044:	b083      	sub	sp, #12
 8011046:	af00      	add	r7, sp, #0
 8011048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801104a:	bf00      	nop
 801104c:	370c      	adds	r7, #12
 801104e:	46bd      	mov	sp, r7
 8011050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011054:	4770      	bx	lr

08011056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8011056:	b480      	push	{r7}
 8011058:	b083      	sub	sp, #12
 801105a:	af00      	add	r7, sp, #0
 801105c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801105e:	bf00      	nop
 8011060:	370c      	adds	r7, #12
 8011062:	46bd      	mov	sp, r7
 8011064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011068:	4770      	bx	lr

0801106a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 801106a:	b480      	push	{r7}
 801106c:	b083      	sub	sp, #12
 801106e:	af00      	add	r7, sp, #0
 8011070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8011072:	bf00      	nop
 8011074:	370c      	adds	r7, #12
 8011076:	46bd      	mov	sp, r7
 8011078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801107c:	4770      	bx	lr

0801107e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 801107e:	b480      	push	{r7}
 8011080:	b083      	sub	sp, #12
 8011082:	af00      	add	r7, sp, #0
 8011084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8011086:	bf00      	nop
 8011088:	370c      	adds	r7, #12
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr
	...

08011094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
 801109c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	681b      	ldr	r3, [r3, #0]
 80110a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	4a40      	ldr	r2, [pc, #256]	; (80111a8 <TIM_Base_SetConfig+0x114>)
 80110a8:	4293      	cmp	r3, r2
 80110aa:	d013      	beq.n	80110d4 <TIM_Base_SetConfig+0x40>
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110b2:	d00f      	beq.n	80110d4 <TIM_Base_SetConfig+0x40>
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	4a3d      	ldr	r2, [pc, #244]	; (80111ac <TIM_Base_SetConfig+0x118>)
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d00b      	beq.n	80110d4 <TIM_Base_SetConfig+0x40>
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	4a3c      	ldr	r2, [pc, #240]	; (80111b0 <TIM_Base_SetConfig+0x11c>)
 80110c0:	4293      	cmp	r3, r2
 80110c2:	d007      	beq.n	80110d4 <TIM_Base_SetConfig+0x40>
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	4a3b      	ldr	r2, [pc, #236]	; (80111b4 <TIM_Base_SetConfig+0x120>)
 80110c8:	4293      	cmp	r3, r2
 80110ca:	d003      	beq.n	80110d4 <TIM_Base_SetConfig+0x40>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	4a3a      	ldr	r2, [pc, #232]	; (80111b8 <TIM_Base_SetConfig+0x124>)
 80110d0:	4293      	cmp	r3, r2
 80110d2:	d108      	bne.n	80110e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80110da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80110dc:	683b      	ldr	r3, [r7, #0]
 80110de:	685b      	ldr	r3, [r3, #4]
 80110e0:	68fa      	ldr	r2, [r7, #12]
 80110e2:	4313      	orrs	r3, r2
 80110e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	4a2f      	ldr	r2, [pc, #188]	; (80111a8 <TIM_Base_SetConfig+0x114>)
 80110ea:	4293      	cmp	r3, r2
 80110ec:	d01f      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 80110ee:	687b      	ldr	r3, [r7, #4]
 80110f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110f4:	d01b      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	4a2c      	ldr	r2, [pc, #176]	; (80111ac <TIM_Base_SetConfig+0x118>)
 80110fa:	4293      	cmp	r3, r2
 80110fc:	d017      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	4a2b      	ldr	r2, [pc, #172]	; (80111b0 <TIM_Base_SetConfig+0x11c>)
 8011102:	4293      	cmp	r3, r2
 8011104:	d013      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	4a2a      	ldr	r2, [pc, #168]	; (80111b4 <TIM_Base_SetConfig+0x120>)
 801110a:	4293      	cmp	r3, r2
 801110c:	d00f      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	4a29      	ldr	r2, [pc, #164]	; (80111b8 <TIM_Base_SetConfig+0x124>)
 8011112:	4293      	cmp	r3, r2
 8011114:	d00b      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	4a28      	ldr	r2, [pc, #160]	; (80111bc <TIM_Base_SetConfig+0x128>)
 801111a:	4293      	cmp	r3, r2
 801111c:	d007      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	4a27      	ldr	r2, [pc, #156]	; (80111c0 <TIM_Base_SetConfig+0x12c>)
 8011122:	4293      	cmp	r3, r2
 8011124:	d003      	beq.n	801112e <TIM_Base_SetConfig+0x9a>
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	4a26      	ldr	r2, [pc, #152]	; (80111c4 <TIM_Base_SetConfig+0x130>)
 801112a:	4293      	cmp	r3, r2
 801112c:	d108      	bne.n	8011140 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801112e:	68fb      	ldr	r3, [r7, #12]
 8011130:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8011134:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8011136:	683b      	ldr	r3, [r7, #0]
 8011138:	68db      	ldr	r3, [r3, #12]
 801113a:	68fa      	ldr	r2, [r7, #12]
 801113c:	4313      	orrs	r3, r2
 801113e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011146:	683b      	ldr	r3, [r7, #0]
 8011148:	695b      	ldr	r3, [r3, #20]
 801114a:	4313      	orrs	r3, r2
 801114c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	68fa      	ldr	r2, [r7, #12]
 8011152:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8011154:	683b      	ldr	r3, [r7, #0]
 8011156:	689a      	ldr	r2, [r3, #8]
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801115c:	683b      	ldr	r3, [r7, #0]
 801115e:	681a      	ldr	r2, [r3, #0]
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	4a10      	ldr	r2, [pc, #64]	; (80111a8 <TIM_Base_SetConfig+0x114>)
 8011168:	4293      	cmp	r3, r2
 801116a:	d00f      	beq.n	801118c <TIM_Base_SetConfig+0xf8>
 801116c:	687b      	ldr	r3, [r7, #4]
 801116e:	4a12      	ldr	r2, [pc, #72]	; (80111b8 <TIM_Base_SetConfig+0x124>)
 8011170:	4293      	cmp	r3, r2
 8011172:	d00b      	beq.n	801118c <TIM_Base_SetConfig+0xf8>
 8011174:	687b      	ldr	r3, [r7, #4]
 8011176:	4a11      	ldr	r2, [pc, #68]	; (80111bc <TIM_Base_SetConfig+0x128>)
 8011178:	4293      	cmp	r3, r2
 801117a:	d007      	beq.n	801118c <TIM_Base_SetConfig+0xf8>
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	4a10      	ldr	r2, [pc, #64]	; (80111c0 <TIM_Base_SetConfig+0x12c>)
 8011180:	4293      	cmp	r3, r2
 8011182:	d003      	beq.n	801118c <TIM_Base_SetConfig+0xf8>
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	4a0f      	ldr	r2, [pc, #60]	; (80111c4 <TIM_Base_SetConfig+0x130>)
 8011188:	4293      	cmp	r3, r2
 801118a:	d103      	bne.n	8011194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801118c:	683b      	ldr	r3, [r7, #0]
 801118e:	691a      	ldr	r2, [r3, #16]
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	2201      	movs	r2, #1
 8011198:	615a      	str	r2, [r3, #20]
}
 801119a:	bf00      	nop
 801119c:	3714      	adds	r7, #20
 801119e:	46bd      	mov	sp, r7
 80111a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111a4:	4770      	bx	lr
 80111a6:	bf00      	nop
 80111a8:	40012c00 	.word	0x40012c00
 80111ac:	40000400 	.word	0x40000400
 80111b0:	40000800 	.word	0x40000800
 80111b4:	40000c00 	.word	0x40000c00
 80111b8:	40013400 	.word	0x40013400
 80111bc:	40014000 	.word	0x40014000
 80111c0:	40014400 	.word	0x40014400
 80111c4:	40014800 	.word	0x40014800

080111c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80111c8:	b480      	push	{r7}
 80111ca:	b083      	sub	sp, #12
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80111d0:	bf00      	nop
 80111d2:	370c      	adds	r7, #12
 80111d4:	46bd      	mov	sp, r7
 80111d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111da:	4770      	bx	lr

080111dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80111dc:	b480      	push	{r7}
 80111de:	b083      	sub	sp, #12
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80111e4:	bf00      	nop
 80111e6:	370c      	adds	r7, #12
 80111e8:	46bd      	mov	sp, r7
 80111ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ee:	4770      	bx	lr

080111f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80111f8:	bf00      	nop
 80111fa:	370c      	adds	r7, #12
 80111fc:	46bd      	mov	sp, r7
 80111fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011202:	4770      	bx	lr

08011204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d101      	bne.n	8011216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8011212:	2301      	movs	r3, #1
 8011214:	e040      	b.n	8011298 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801121a:	2b00      	cmp	r3, #0
 801121c:	d106      	bne.n	801122c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2200      	movs	r2, #0
 8011222:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8011226:	6878      	ldr	r0, [r7, #4]
 8011228:	f7f5 fe58 	bl	8006edc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	2224      	movs	r2, #36	; 0x24
 8011230:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	681a      	ldr	r2, [r3, #0]
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	f022 0201 	bic.w	r2, r2, #1
 8011240:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f000 fc86 	bl	8011b54 <UART_SetConfig>
 8011248:	4603      	mov	r3, r0
 801124a:	2b01      	cmp	r3, #1
 801124c:	d101      	bne.n	8011252 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 801124e:	2301      	movs	r3, #1
 8011250:	e022      	b.n	8011298 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011256:	2b00      	cmp	r3, #0
 8011258:	d002      	beq.n	8011260 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 ff04 	bl	8012068 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8011260:	687b      	ldr	r3, [r7, #4]
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	685a      	ldr	r2, [r3, #4]
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801126e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	689a      	ldr	r2, [r3, #8]
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801127e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	681a      	ldr	r2, [r3, #0]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	f042 0201 	orr.w	r2, r2, #1
 801128e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8011290:	6878      	ldr	r0, [r7, #4]
 8011292:	f000 ff8b 	bl	80121ac <UART_CheckIdleState>
 8011296:	4603      	mov	r3, r0
}
 8011298:	4618      	mov	r0, r3
 801129a:	3708      	adds	r7, #8
 801129c:	46bd      	mov	sp, r7
 801129e:	bd80      	pop	{r7, pc}

080112a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80112a0:	b580      	push	{r7, lr}
 80112a2:	b08a      	sub	sp, #40	; 0x28
 80112a4:	af02      	add	r7, sp, #8
 80112a6:	60f8      	str	r0, [r7, #12]
 80112a8:	60b9      	str	r1, [r7, #8]
 80112aa:	603b      	str	r3, [r7, #0]
 80112ac:	4613      	mov	r3, r2
 80112ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80112b4:	2b20      	cmp	r3, #32
 80112b6:	f040 8082 	bne.w	80113be <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80112ba:	68bb      	ldr	r3, [r7, #8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d002      	beq.n	80112c6 <HAL_UART_Transmit+0x26>
 80112c0:	88fb      	ldrh	r3, [r7, #6]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d101      	bne.n	80112ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80112c6:	2301      	movs	r3, #1
 80112c8:	e07a      	b.n	80113c0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80112d0:	2b01      	cmp	r3, #1
 80112d2:	d101      	bne.n	80112d8 <HAL_UART_Transmit+0x38>
 80112d4:	2302      	movs	r3, #2
 80112d6:	e073      	b.n	80113c0 <HAL_UART_Transmit+0x120>
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	2201      	movs	r2, #1
 80112dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	2200      	movs	r2, #0
 80112e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2221      	movs	r2, #33	; 0x21
 80112ec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80112ee:	f7fc faff 	bl	800d8f0 <HAL_GetTick>
 80112f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	88fa      	ldrh	r2, [r7, #6]
 80112f8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	88fa      	ldrh	r2, [r7, #6]
 8011300:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	689b      	ldr	r3, [r3, #8]
 8011308:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801130c:	d108      	bne.n	8011320 <HAL_UART_Transmit+0x80>
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	691b      	ldr	r3, [r3, #16]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d104      	bne.n	8011320 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8011316:	2300      	movs	r3, #0
 8011318:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	61bb      	str	r3, [r7, #24]
 801131e:	e003      	b.n	8011328 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8011324:	2300      	movs	r3, #0
 8011326:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	2200      	movs	r2, #0
 801132c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8011330:	e02d      	b.n	801138e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8011332:	683b      	ldr	r3, [r7, #0]
 8011334:	9300      	str	r3, [sp, #0]
 8011336:	697b      	ldr	r3, [r7, #20]
 8011338:	2200      	movs	r2, #0
 801133a:	2180      	movs	r1, #128	; 0x80
 801133c:	68f8      	ldr	r0, [r7, #12]
 801133e:	f000 ff7e 	bl	801223e <UART_WaitOnFlagUntilTimeout>
 8011342:	4603      	mov	r3, r0
 8011344:	2b00      	cmp	r3, #0
 8011346:	d001      	beq.n	801134c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8011348:	2303      	movs	r3, #3
 801134a:	e039      	b.n	80113c0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 801134c:	69fb      	ldr	r3, [r7, #28]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d10b      	bne.n	801136a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8011352:	69bb      	ldr	r3, [r7, #24]
 8011354:	881a      	ldrh	r2, [r3, #0]
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801135e:	b292      	uxth	r2, r2
 8011360:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8011362:	69bb      	ldr	r3, [r7, #24]
 8011364:	3302      	adds	r3, #2
 8011366:	61bb      	str	r3, [r7, #24]
 8011368:	e008      	b.n	801137c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801136a:	69fb      	ldr	r3, [r7, #28]
 801136c:	781a      	ldrb	r2, [r3, #0]
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	681b      	ldr	r3, [r3, #0]
 8011372:	b292      	uxth	r2, r2
 8011374:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	3301      	adds	r3, #1
 801137a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011382:	b29b      	uxth	r3, r3
 8011384:	3b01      	subs	r3, #1
 8011386:	b29a      	uxth	r2, r3
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8011394:	b29b      	uxth	r3, r3
 8011396:	2b00      	cmp	r3, #0
 8011398:	d1cb      	bne.n	8011332 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801139a:	683b      	ldr	r3, [r7, #0]
 801139c:	9300      	str	r3, [sp, #0]
 801139e:	697b      	ldr	r3, [r7, #20]
 80113a0:	2200      	movs	r2, #0
 80113a2:	2140      	movs	r1, #64	; 0x40
 80113a4:	68f8      	ldr	r0, [r7, #12]
 80113a6:	f000 ff4a 	bl	801223e <UART_WaitOnFlagUntilTimeout>
 80113aa:	4603      	mov	r3, r0
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d001      	beq.n	80113b4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80113b0:	2303      	movs	r3, #3
 80113b2:	e005      	b.n	80113c0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80113b4:	68fb      	ldr	r3, [r7, #12]
 80113b6:	2220      	movs	r2, #32
 80113b8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	e000      	b.n	80113c0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80113be:	2302      	movs	r3, #2
  }
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3720      	adds	r7, #32
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b08b      	sub	sp, #44	; 0x2c
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	60f8      	str	r0, [r7, #12]
 80113d0:	60b9      	str	r1, [r7, #8]
 80113d2:	4613      	mov	r3, r2
 80113d4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113da:	2b20      	cmp	r3, #32
 80113dc:	d156      	bne.n	801148c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d002      	beq.n	80113ea <HAL_UART_Transmit_IT+0x22>
 80113e4:	88fb      	ldrh	r3, [r7, #6]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d101      	bne.n	80113ee <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80113ea:	2301      	movs	r3, #1
 80113ec:	e04f      	b.n	801148e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80113f4:	2b01      	cmp	r3, #1
 80113f6:	d101      	bne.n	80113fc <HAL_UART_Transmit_IT+0x34>
 80113f8:	2302      	movs	r3, #2
 80113fa:	e048      	b.n	801148e <HAL_UART_Transmit_IT+0xc6>
 80113fc:	68fb      	ldr	r3, [r7, #12]
 80113fe:	2201      	movs	r2, #1
 8011400:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	68ba      	ldr	r2, [r7, #8]
 8011408:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 801140a:	68fb      	ldr	r3, [r7, #12]
 801140c:	88fa      	ldrh	r2, [r7, #6]
 801140e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	88fa      	ldrh	r2, [r7, #6]
 8011416:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 801141a:	68fb      	ldr	r3, [r7, #12]
 801141c:	2200      	movs	r2, #0
 801141e:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	2200      	movs	r2, #0
 8011424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8011428:	68fb      	ldr	r3, [r7, #12]
 801142a:	2221      	movs	r2, #33	; 0x21
 801142c:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	689b      	ldr	r3, [r3, #8]
 8011432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011436:	d107      	bne.n	8011448 <HAL_UART_Transmit_IT+0x80>
 8011438:	68fb      	ldr	r3, [r7, #12]
 801143a:	691b      	ldr	r3, [r3, #16]
 801143c:	2b00      	cmp	r3, #0
 801143e:	d103      	bne.n	8011448 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	4a16      	ldr	r2, [pc, #88]	; (801149c <HAL_UART_Transmit_IT+0xd4>)
 8011444:	669a      	str	r2, [r3, #104]	; 0x68
 8011446:	e002      	b.n	801144e <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	4a15      	ldr	r2, [pc, #84]	; (80114a0 <HAL_UART_Transmit_IT+0xd8>)
 801144c:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2200      	movs	r2, #0
 8011452:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145c:	697b      	ldr	r3, [r7, #20]
 801145e:	e853 3f00 	ldrex	r3, [r3]
 8011462:	613b      	str	r3, [r7, #16]
   return(result);
 8011464:	693b      	ldr	r3, [r7, #16]
 8011466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801146a:	627b      	str	r3, [r7, #36]	; 0x24
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	681b      	ldr	r3, [r3, #0]
 8011470:	461a      	mov	r2, r3
 8011472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011474:	623b      	str	r3, [r7, #32]
 8011476:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011478:	69f9      	ldr	r1, [r7, #28]
 801147a:	6a3a      	ldr	r2, [r7, #32]
 801147c:	e841 2300 	strex	r3, r2, [r1]
 8011480:	61bb      	str	r3, [r7, #24]
   return(result);
 8011482:	69bb      	ldr	r3, [r7, #24]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d1e6      	bne.n	8011456 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8011488:	2300      	movs	r3, #0
 801148a:	e000      	b.n	801148e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 801148c:	2302      	movs	r3, #2
  }
}
 801148e:	4618      	mov	r0, r3
 8011490:	372c      	adds	r7, #44	; 0x2c
 8011492:	46bd      	mov	sp, r7
 8011494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011498:	4770      	bx	lr
 801149a:	bf00      	nop
 801149c:	08012707 	.word	0x08012707
 80114a0:	0801264f 	.word	0x0801264f

080114a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b08a      	sub	sp, #40	; 0x28
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	60f8      	str	r0, [r7, #12]
 80114ac:	60b9      	str	r1, [r7, #8]
 80114ae:	4613      	mov	r3, r2
 80114b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80114b2:	68fb      	ldr	r3, [r7, #12]
 80114b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80114b6:	2b20      	cmp	r3, #32
 80114b8:	d142      	bne.n	8011540 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80114ba:	68bb      	ldr	r3, [r7, #8]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d002      	beq.n	80114c6 <HAL_UART_Receive_IT+0x22>
 80114c0:	88fb      	ldrh	r3, [r7, #6]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d101      	bne.n	80114ca <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80114c6:	2301      	movs	r3, #1
 80114c8:	e03b      	b.n	8011542 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80114d0:	2b01      	cmp	r3, #1
 80114d2:	d101      	bne.n	80114d8 <HAL_UART_Receive_IT+0x34>
 80114d4:	2302      	movs	r3, #2
 80114d6:	e034      	b.n	8011542 <HAL_UART_Receive_IT+0x9e>
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	2201      	movs	r2, #1
 80114dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	2200      	movs	r2, #0
 80114e4:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	681b      	ldr	r3, [r3, #0]
 80114ea:	4a18      	ldr	r2, [pc, #96]	; (801154c <HAL_UART_Receive_IT+0xa8>)
 80114ec:	4293      	cmp	r3, r2
 80114ee:	d01f      	beq.n	8011530 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d018      	beq.n	8011530 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011504:	697b      	ldr	r3, [r7, #20]
 8011506:	e853 3f00 	ldrex	r3, [r3]
 801150a:	613b      	str	r3, [r7, #16]
   return(result);
 801150c:	693b      	ldr	r3, [r7, #16]
 801150e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8011512:	627b      	str	r3, [r7, #36]	; 0x24
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	461a      	mov	r2, r3
 801151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801151c:	623b      	str	r3, [r7, #32]
 801151e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011520:	69f9      	ldr	r1, [r7, #28]
 8011522:	6a3a      	ldr	r2, [r7, #32]
 8011524:	e841 2300 	strex	r3, r2, [r1]
 8011528:	61bb      	str	r3, [r7, #24]
   return(result);
 801152a:	69bb      	ldr	r3, [r7, #24]
 801152c:	2b00      	cmp	r3, #0
 801152e:	d1e6      	bne.n	80114fe <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8011530:	88fb      	ldrh	r3, [r7, #6]
 8011532:	461a      	mov	r2, r3
 8011534:	68b9      	ldr	r1, [r7, #8]
 8011536:	68f8      	ldr	r0, [r7, #12]
 8011538:	f000 ff46 	bl	80123c8 <UART_Start_Receive_IT>
 801153c:	4603      	mov	r3, r0
 801153e:	e000      	b.n	8011542 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8011540:	2302      	movs	r3, #2
  }
}
 8011542:	4618      	mov	r0, r3
 8011544:	3728      	adds	r7, #40	; 0x28
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	40008000 	.word	0x40008000

08011550 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8011550:	b580      	push	{r7, lr}
 8011552:	b0ba      	sub	sp, #232	; 0xe8
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8011558:	687b      	ldr	r3, [r7, #4]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	69db      	ldr	r3, [r3, #28]
 801155e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	689b      	ldr	r3, [r3, #8]
 8011572:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8011576:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801157a:	f640 030f 	movw	r3, #2063	; 0x80f
 801157e:	4013      	ands	r3, r2
 8011580:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8011584:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8011588:	2b00      	cmp	r3, #0
 801158a:	d115      	bne.n	80115b8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801158c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011590:	f003 0320 	and.w	r3, r3, #32
 8011594:	2b00      	cmp	r3, #0
 8011596:	d00f      	beq.n	80115b8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8011598:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801159c:	f003 0320 	and.w	r3, r3, #32
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d009      	beq.n	80115b8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	f000 82a6 	beq.w	8011afa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80115b2:	6878      	ldr	r0, [r7, #4]
 80115b4:	4798      	blx	r3
      }
      return;
 80115b6:	e2a0      	b.n	8011afa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80115b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80115bc:	2b00      	cmp	r3, #0
 80115be:	f000 8117 	beq.w	80117f0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80115c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80115c6:	f003 0301 	and.w	r3, r3, #1
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d106      	bne.n	80115dc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80115ce:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80115d2:	4b85      	ldr	r3, [pc, #532]	; (80117e8 <HAL_UART_IRQHandler+0x298>)
 80115d4:	4013      	ands	r3, r2
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	f000 810a 	beq.w	80117f0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80115dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80115e0:	f003 0301 	and.w	r3, r3, #1
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d011      	beq.n	801160c <HAL_UART_IRQHandler+0xbc>
 80115e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80115ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d00b      	beq.n	801160c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681b      	ldr	r3, [r3, #0]
 80115f8:	2201      	movs	r2, #1
 80115fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011602:	f043 0201 	orr.w	r2, r3, #1
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801160c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011610:	f003 0302 	and.w	r3, r3, #2
 8011614:	2b00      	cmp	r3, #0
 8011616:	d011      	beq.n	801163c <HAL_UART_IRQHandler+0xec>
 8011618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801161c:	f003 0301 	and.w	r3, r3, #1
 8011620:	2b00      	cmp	r3, #0
 8011622:	d00b      	beq.n	801163c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2202      	movs	r2, #2
 801162a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801162c:	687b      	ldr	r3, [r7, #4]
 801162e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011632:	f043 0204 	orr.w	r2, r3, #4
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801163c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011640:	f003 0304 	and.w	r3, r3, #4
 8011644:	2b00      	cmp	r3, #0
 8011646:	d011      	beq.n	801166c <HAL_UART_IRQHandler+0x11c>
 8011648:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801164c:	f003 0301 	and.w	r3, r3, #1
 8011650:	2b00      	cmp	r3, #0
 8011652:	d00b      	beq.n	801166c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2204      	movs	r2, #4
 801165a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011662:	f043 0202 	orr.w	r2, r3, #2
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 801166c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011670:	f003 0308 	and.w	r3, r3, #8
 8011674:	2b00      	cmp	r3, #0
 8011676:	d017      	beq.n	80116a8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8011678:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801167c:	f003 0320 	and.w	r3, r3, #32
 8011680:	2b00      	cmp	r3, #0
 8011682:	d105      	bne.n	8011690 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8011684:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011688:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801168c:	2b00      	cmp	r3, #0
 801168e:	d00b      	beq.n	80116a8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	681b      	ldr	r3, [r3, #0]
 8011694:	2208      	movs	r2, #8
 8011696:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801169e:	f043 0208 	orr.w	r2, r3, #8
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80116a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d012      	beq.n	80116da <HAL_UART_IRQHandler+0x18a>
 80116b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d00c      	beq.n	80116da <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80116c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116d0:	f043 0220 	orr.w	r2, r3, #32
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	f000 820c 	beq.w	8011afe <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80116e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80116ea:	f003 0320 	and.w	r3, r3, #32
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d00d      	beq.n	801170e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80116f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80116f6:	f003 0320 	and.w	r3, r3, #32
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d007      	beq.n	801170e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011702:	2b00      	cmp	r3, #0
 8011704:	d003      	beq.n	801170e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801170a:	6878      	ldr	r0, [r7, #4]
 801170c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	689b      	ldr	r3, [r3, #8]
 801171e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011722:	2b40      	cmp	r3, #64	; 0x40
 8011724:	d005      	beq.n	8011732 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8011726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801172a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801172e:	2b00      	cmp	r3, #0
 8011730:	d04f      	beq.n	80117d2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8011732:	6878      	ldr	r0, [r7, #4]
 8011734:	f000 ff12 	bl	801255c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	689b      	ldr	r3, [r3, #8]
 801173e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011742:	2b40      	cmp	r3, #64	; 0x40
 8011744:	d141      	bne.n	80117ca <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	3308      	adds	r3, #8
 801174c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011750:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011754:	e853 3f00 	ldrex	r3, [r3]
 8011758:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801175c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	3308      	adds	r3, #8
 801176e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8011772:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8011776:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801177a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801177e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011782:	e841 2300 	strex	r3, r2, [r1]
 8011786:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801178a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801178e:	2b00      	cmp	r3, #0
 8011790:	d1d9      	bne.n	8011746 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011796:	2b00      	cmp	r3, #0
 8011798:	d013      	beq.n	80117c2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801179e:	4a13      	ldr	r2, [pc, #76]	; (80117ec <HAL_UART_IRQHandler+0x29c>)
 80117a0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117a6:	4618      	mov	r0, r3
 80117a8:	f7fc fa21 	bl	800dbee <HAL_DMA_Abort_IT>
 80117ac:	4603      	mov	r3, r0
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d017      	beq.n	80117e2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117b8:	687a      	ldr	r2, [r7, #4]
 80117ba:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80117bc:	4610      	mov	r0, r2
 80117be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117c0:	e00f      	b.n	80117e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80117c2:	6878      	ldr	r0, [r7, #4]
 80117c4:	f000 f9b0 	bl	8011b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117c8:	e00b      	b.n	80117e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80117ca:	6878      	ldr	r0, [r7, #4]
 80117cc:	f000 f9ac 	bl	8011b28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117d0:	e007      	b.n	80117e2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f000 f9a8 	bl	8011b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80117d8:	687b      	ldr	r3, [r7, #4]
 80117da:	2200      	movs	r2, #0
 80117dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80117e0:	e18d      	b.n	8011afe <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80117e2:	bf00      	nop
    return;
 80117e4:	e18b      	b.n	8011afe <HAL_UART_IRQHandler+0x5ae>
 80117e6:	bf00      	nop
 80117e8:	04000120 	.word	0x04000120
 80117ec:	08012623 	.word	0x08012623

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80117f4:	2b01      	cmp	r3, #1
 80117f6:	f040 8146 	bne.w	8011a86 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80117fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80117fe:	f003 0310 	and.w	r3, r3, #16
 8011802:	2b00      	cmp	r3, #0
 8011804:	f000 813f 	beq.w	8011a86 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8011808:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801180c:	f003 0310 	and.w	r3, r3, #16
 8011810:	2b00      	cmp	r3, #0
 8011812:	f000 8138 	beq.w	8011a86 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	2210      	movs	r2, #16
 801181c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	681b      	ldr	r3, [r3, #0]
 8011822:	689b      	ldr	r3, [r3, #8]
 8011824:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011828:	2b40      	cmp	r3, #64	; 0x40
 801182a:	f040 80b4 	bne.w	8011996 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011832:	681b      	ldr	r3, [r3, #0]
 8011834:	685b      	ldr	r3, [r3, #4]
 8011836:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801183a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801183e:	2b00      	cmp	r3, #0
 8011840:	f000 815f 	beq.w	8011b02 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801184a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801184e:	429a      	cmp	r2, r3
 8011850:	f080 8157 	bcs.w	8011b02 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801185a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	f003 0320 	and.w	r3, r3, #32
 801186a:	2b00      	cmp	r3, #0
 801186c:	f040 8085 	bne.w	801197a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011870:	687b      	ldr	r3, [r7, #4]
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011878:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801187c:	e853 3f00 	ldrex	r3, [r3]
 8011880:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8011884:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011888:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801188c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	681b      	ldr	r3, [r3, #0]
 8011894:	461a      	mov	r2, r3
 8011896:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801189a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801189e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118a2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80118a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80118aa:	e841 2300 	strex	r3, r2, [r1]
 80118ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80118b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80118b6:	2b00      	cmp	r3, #0
 80118b8:	d1da      	bne.n	8011870 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	3308      	adds	r3, #8
 80118c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80118c4:	e853 3f00 	ldrex	r3, [r3]
 80118c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80118ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80118cc:	f023 0301 	bic.w	r3, r3, #1
 80118d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	3308      	adds	r3, #8
 80118da:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80118de:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80118e2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80118e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80118ea:	e841 2300 	strex	r3, r2, [r1]
 80118ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80118f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d1e1      	bne.n	80118ba <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	3308      	adds	r3, #8
 80118fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011900:	e853 3f00 	ldrex	r3, [r3]
 8011904:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8011906:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801190c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	681b      	ldr	r3, [r3, #0]
 8011914:	3308      	adds	r3, #8
 8011916:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801191a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801191c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801191e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011920:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011922:	e841 2300 	strex	r3, r2, [r1]
 8011926:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8011928:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801192a:	2b00      	cmp	r3, #0
 801192c:	d1e3      	bne.n	80118f6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2220      	movs	r2, #32
 8011932:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011934:	687b      	ldr	r3, [r7, #4]
 8011936:	2200      	movs	r2, #0
 8011938:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011942:	e853 3f00 	ldrex	r3, [r3]
 8011946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801194a:	f023 0310 	bic.w	r3, r3, #16
 801194e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	461a      	mov	r2, r3
 8011958:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801195c:	65bb      	str	r3, [r7, #88]	; 0x58
 801195e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011960:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011962:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011964:	e841 2300 	strex	r3, r2, [r1]
 8011968:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801196a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801196c:	2b00      	cmp	r3, #0
 801196e:	d1e4      	bne.n	801193a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011974:	4618      	mov	r0, r3
 8011976:	f7fc f8fc 	bl	800db72 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8011980:	687b      	ldr	r3, [r7, #4]
 8011982:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8011986:	b29b      	uxth	r3, r3
 8011988:	1ad3      	subs	r3, r2, r3
 801198a:	b29b      	uxth	r3, r3
 801198c:	4619      	mov	r1, r3
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f000 f8d4 	bl	8011b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011994:	e0b5      	b.n	8011b02 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80119a2:	b29b      	uxth	r3, r3
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80119b0:	b29b      	uxth	r3, r3
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f000 80a7 	beq.w	8011b06 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80119b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80119bc:	2b00      	cmp	r3, #0
 80119be:	f000 80a2 	beq.w	8011b06 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681b      	ldr	r3, [r3, #0]
 80119c6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ca:	e853 3f00 	ldrex	r3, [r3]
 80119ce:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80119d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80119d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	681b      	ldr	r3, [r3, #0]
 80119de:	461a      	mov	r2, r3
 80119e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80119e4:	647b      	str	r3, [r7, #68]	; 0x44
 80119e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80119ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80119ec:	e841 2300 	strex	r3, r2, [r1]
 80119f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80119f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d1e4      	bne.n	80119c2 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	681b      	ldr	r3, [r3, #0]
 80119fc:	3308      	adds	r3, #8
 80119fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	e853 3f00 	ldrex	r3, [r3]
 8011a06:	623b      	str	r3, [r7, #32]
   return(result);
 8011a08:	6a3b      	ldr	r3, [r7, #32]
 8011a0a:	f023 0301 	bic.w	r3, r3, #1
 8011a0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	3308      	adds	r3, #8
 8011a18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011a1c:	633a      	str	r2, [r7, #48]	; 0x30
 8011a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a24:	e841 2300 	strex	r3, r2, [r1]
 8011a28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2c:	2b00      	cmp	r3, #0
 8011a2e:	d1e3      	bne.n	80119f8 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	2220      	movs	r2, #32
 8011a34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	2200      	movs	r2, #0
 8011a3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	2200      	movs	r2, #0
 8011a40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a48:	693b      	ldr	r3, [r7, #16]
 8011a4a:	e853 3f00 	ldrex	r3, [r3]
 8011a4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f023 0310 	bic.w	r3, r3, #16
 8011a56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	681b      	ldr	r3, [r3, #0]
 8011a5e:	461a      	mov	r2, r3
 8011a60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011a64:	61fb      	str	r3, [r7, #28]
 8011a66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a68:	69b9      	ldr	r1, [r7, #24]
 8011a6a:	69fa      	ldr	r2, [r7, #28]
 8011a6c:	e841 2300 	strex	r3, r2, [r1]
 8011a70:	617b      	str	r3, [r7, #20]
   return(result);
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d1e4      	bne.n	8011a42 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8011a78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8011a7c:	4619      	mov	r1, r3
 8011a7e:	6878      	ldr	r0, [r7, #4]
 8011a80:	f000 f85c 	bl	8011b3c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8011a84:	e03f      	b.n	8011b06 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8011a86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011a8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d00e      	beq.n	8011ab0 <HAL_UART_IRQHandler+0x560>
 8011a92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8011a96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d008      	beq.n	8011ab0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8011a9e:	687b      	ldr	r3, [r7, #4]
 8011aa0:	681b      	ldr	r3, [r3, #0]
 8011aa2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8011aa6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8011aa8:	6878      	ldr	r0, [r7, #4]
 8011aaa:	f001 f816 	bl	8012ada <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8011aae:	e02d      	b.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8011ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ab4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d00e      	beq.n	8011ada <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8011abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d008      	beq.n	8011ada <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d01c      	beq.n	8011b0a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011ad4:	6878      	ldr	r0, [r7, #4]
 8011ad6:	4798      	blx	r3
    }
    return;
 8011ad8:	e017      	b.n	8011b0a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8011ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8011ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d012      	beq.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
 8011ae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8011aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d00c      	beq.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8011af2:	6878      	ldr	r0, [r7, #4]
 8011af4:	f000 fe67 	bl	80127c6 <UART_EndTransmit_IT>
    return;
 8011af8:	e008      	b.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8011afa:	bf00      	nop
 8011afc:	e006      	b.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8011afe:	bf00      	nop
 8011b00:	e004      	b.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8011b02:	bf00      	nop
 8011b04:	e002      	b.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
      return;
 8011b06:	bf00      	nop
 8011b08:	e000      	b.n	8011b0c <HAL_UART_IRQHandler+0x5bc>
    return;
 8011b0a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8011b0c:	37e8      	adds	r7, #232	; 0xe8
 8011b0e:	46bd      	mov	sp, r7
 8011b10:	bd80      	pop	{r7, pc}
 8011b12:	bf00      	nop

08011b14 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8011b14:	b480      	push	{r7}
 8011b16:	b083      	sub	sp, #12
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8011b1c:	bf00      	nop
 8011b1e:	370c      	adds	r7, #12
 8011b20:	46bd      	mov	sp, r7
 8011b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b26:	4770      	bx	lr

08011b28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8011b28:	b480      	push	{r7}
 8011b2a:	b083      	sub	sp, #12
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8011b30:	bf00      	nop
 8011b32:	370c      	adds	r7, #12
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b083      	sub	sp, #12
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	460b      	mov	r3, r1
 8011b46:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8011b48:	bf00      	nop
 8011b4a:	370c      	adds	r7, #12
 8011b4c:	46bd      	mov	sp, r7
 8011b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b52:	4770      	bx	lr

08011b54 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8011b54:	b5b0      	push	{r4, r5, r7, lr}
 8011b56:	b088      	sub	sp, #32
 8011b58:	af00      	add	r7, sp, #0
 8011b5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8011b5c:	2300      	movs	r3, #0
 8011b5e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	689a      	ldr	r2, [r3, #8]
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	691b      	ldr	r3, [r3, #16]
 8011b68:	431a      	orrs	r2, r3
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	695b      	ldr	r3, [r3, #20]
 8011b6e:	431a      	orrs	r2, r3
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	69db      	ldr	r3, [r3, #28]
 8011b74:	4313      	orrs	r3, r2
 8011b76:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	681b      	ldr	r3, [r3, #0]
 8011b7c:	681a      	ldr	r2, [r3, #0]
 8011b7e:	4bad      	ldr	r3, [pc, #692]	; (8011e34 <UART_SetConfig+0x2e0>)
 8011b80:	4013      	ands	r3, r2
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	6812      	ldr	r2, [r2, #0]
 8011b86:	69f9      	ldr	r1, [r7, #28]
 8011b88:	430b      	orrs	r3, r1
 8011b8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	681b      	ldr	r3, [r3, #0]
 8011b90:	685b      	ldr	r3, [r3, #4]
 8011b92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	68da      	ldr	r2, [r3, #12]
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	430a      	orrs	r2, r1
 8011ba0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	699b      	ldr	r3, [r3, #24]
 8011ba6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	681b      	ldr	r3, [r3, #0]
 8011bac:	4aa2      	ldr	r2, [pc, #648]	; (8011e38 <UART_SetConfig+0x2e4>)
 8011bae:	4293      	cmp	r3, r2
 8011bb0:	d004      	beq.n	8011bbc <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	6a1b      	ldr	r3, [r3, #32]
 8011bb6:	69fa      	ldr	r2, [r7, #28]
 8011bb8:	4313      	orrs	r3, r2
 8011bba:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	689b      	ldr	r3, [r3, #8]
 8011bc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	681b      	ldr	r3, [r3, #0]
 8011bca:	69fa      	ldr	r2, [r7, #28]
 8011bcc:	430a      	orrs	r2, r1
 8011bce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	4a99      	ldr	r2, [pc, #612]	; (8011e3c <UART_SetConfig+0x2e8>)
 8011bd6:	4293      	cmp	r3, r2
 8011bd8:	d121      	bne.n	8011c1e <UART_SetConfig+0xca>
 8011bda:	4b99      	ldr	r3, [pc, #612]	; (8011e40 <UART_SetConfig+0x2ec>)
 8011bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011be0:	f003 0303 	and.w	r3, r3, #3
 8011be4:	2b03      	cmp	r3, #3
 8011be6:	d817      	bhi.n	8011c18 <UART_SetConfig+0xc4>
 8011be8:	a201      	add	r2, pc, #4	; (adr r2, 8011bf0 <UART_SetConfig+0x9c>)
 8011bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011bee:	bf00      	nop
 8011bf0:	08011c01 	.word	0x08011c01
 8011bf4:	08011c0d 	.word	0x08011c0d
 8011bf8:	08011c07 	.word	0x08011c07
 8011bfc:	08011c13 	.word	0x08011c13
 8011c00:	2301      	movs	r3, #1
 8011c02:	76fb      	strb	r3, [r7, #27]
 8011c04:	e0e7      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c06:	2302      	movs	r3, #2
 8011c08:	76fb      	strb	r3, [r7, #27]
 8011c0a:	e0e4      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c0c:	2304      	movs	r3, #4
 8011c0e:	76fb      	strb	r3, [r7, #27]
 8011c10:	e0e1      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c12:	2308      	movs	r3, #8
 8011c14:	76fb      	strb	r3, [r7, #27]
 8011c16:	e0de      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c18:	2310      	movs	r3, #16
 8011c1a:	76fb      	strb	r3, [r7, #27]
 8011c1c:	e0db      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	4a88      	ldr	r2, [pc, #544]	; (8011e44 <UART_SetConfig+0x2f0>)
 8011c24:	4293      	cmp	r3, r2
 8011c26:	d132      	bne.n	8011c8e <UART_SetConfig+0x13a>
 8011c28:	4b85      	ldr	r3, [pc, #532]	; (8011e40 <UART_SetConfig+0x2ec>)
 8011c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c2e:	f003 030c 	and.w	r3, r3, #12
 8011c32:	2b0c      	cmp	r3, #12
 8011c34:	d828      	bhi.n	8011c88 <UART_SetConfig+0x134>
 8011c36:	a201      	add	r2, pc, #4	; (adr r2, 8011c3c <UART_SetConfig+0xe8>)
 8011c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c3c:	08011c71 	.word	0x08011c71
 8011c40:	08011c89 	.word	0x08011c89
 8011c44:	08011c89 	.word	0x08011c89
 8011c48:	08011c89 	.word	0x08011c89
 8011c4c:	08011c7d 	.word	0x08011c7d
 8011c50:	08011c89 	.word	0x08011c89
 8011c54:	08011c89 	.word	0x08011c89
 8011c58:	08011c89 	.word	0x08011c89
 8011c5c:	08011c77 	.word	0x08011c77
 8011c60:	08011c89 	.word	0x08011c89
 8011c64:	08011c89 	.word	0x08011c89
 8011c68:	08011c89 	.word	0x08011c89
 8011c6c:	08011c83 	.word	0x08011c83
 8011c70:	2300      	movs	r3, #0
 8011c72:	76fb      	strb	r3, [r7, #27]
 8011c74:	e0af      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c76:	2302      	movs	r3, #2
 8011c78:	76fb      	strb	r3, [r7, #27]
 8011c7a:	e0ac      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c7c:	2304      	movs	r3, #4
 8011c7e:	76fb      	strb	r3, [r7, #27]
 8011c80:	e0a9      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c82:	2308      	movs	r3, #8
 8011c84:	76fb      	strb	r3, [r7, #27]
 8011c86:	e0a6      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c88:	2310      	movs	r3, #16
 8011c8a:	76fb      	strb	r3, [r7, #27]
 8011c8c:	e0a3      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	4a6d      	ldr	r2, [pc, #436]	; (8011e48 <UART_SetConfig+0x2f4>)
 8011c94:	4293      	cmp	r3, r2
 8011c96:	d120      	bne.n	8011cda <UART_SetConfig+0x186>
 8011c98:	4b69      	ldr	r3, [pc, #420]	; (8011e40 <UART_SetConfig+0x2ec>)
 8011c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011c9e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8011ca2:	2b30      	cmp	r3, #48	; 0x30
 8011ca4:	d013      	beq.n	8011cce <UART_SetConfig+0x17a>
 8011ca6:	2b30      	cmp	r3, #48	; 0x30
 8011ca8:	d814      	bhi.n	8011cd4 <UART_SetConfig+0x180>
 8011caa:	2b20      	cmp	r3, #32
 8011cac:	d009      	beq.n	8011cc2 <UART_SetConfig+0x16e>
 8011cae:	2b20      	cmp	r3, #32
 8011cb0:	d810      	bhi.n	8011cd4 <UART_SetConfig+0x180>
 8011cb2:	2b00      	cmp	r3, #0
 8011cb4:	d002      	beq.n	8011cbc <UART_SetConfig+0x168>
 8011cb6:	2b10      	cmp	r3, #16
 8011cb8:	d006      	beq.n	8011cc8 <UART_SetConfig+0x174>
 8011cba:	e00b      	b.n	8011cd4 <UART_SetConfig+0x180>
 8011cbc:	2300      	movs	r3, #0
 8011cbe:	76fb      	strb	r3, [r7, #27]
 8011cc0:	e089      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011cc2:	2302      	movs	r3, #2
 8011cc4:	76fb      	strb	r3, [r7, #27]
 8011cc6:	e086      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011cc8:	2304      	movs	r3, #4
 8011cca:	76fb      	strb	r3, [r7, #27]
 8011ccc:	e083      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011cce:	2308      	movs	r3, #8
 8011cd0:	76fb      	strb	r3, [r7, #27]
 8011cd2:	e080      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011cd4:	2310      	movs	r3, #16
 8011cd6:	76fb      	strb	r3, [r7, #27]
 8011cd8:	e07d      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	4a5b      	ldr	r2, [pc, #364]	; (8011e4c <UART_SetConfig+0x2f8>)
 8011ce0:	4293      	cmp	r3, r2
 8011ce2:	d120      	bne.n	8011d26 <UART_SetConfig+0x1d2>
 8011ce4:	4b56      	ldr	r3, [pc, #344]	; (8011e40 <UART_SetConfig+0x2ec>)
 8011ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011cea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8011cee:	2bc0      	cmp	r3, #192	; 0xc0
 8011cf0:	d013      	beq.n	8011d1a <UART_SetConfig+0x1c6>
 8011cf2:	2bc0      	cmp	r3, #192	; 0xc0
 8011cf4:	d814      	bhi.n	8011d20 <UART_SetConfig+0x1cc>
 8011cf6:	2b80      	cmp	r3, #128	; 0x80
 8011cf8:	d009      	beq.n	8011d0e <UART_SetConfig+0x1ba>
 8011cfa:	2b80      	cmp	r3, #128	; 0x80
 8011cfc:	d810      	bhi.n	8011d20 <UART_SetConfig+0x1cc>
 8011cfe:	2b00      	cmp	r3, #0
 8011d00:	d002      	beq.n	8011d08 <UART_SetConfig+0x1b4>
 8011d02:	2b40      	cmp	r3, #64	; 0x40
 8011d04:	d006      	beq.n	8011d14 <UART_SetConfig+0x1c0>
 8011d06:	e00b      	b.n	8011d20 <UART_SetConfig+0x1cc>
 8011d08:	2300      	movs	r3, #0
 8011d0a:	76fb      	strb	r3, [r7, #27]
 8011d0c:	e063      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d0e:	2302      	movs	r3, #2
 8011d10:	76fb      	strb	r3, [r7, #27]
 8011d12:	e060      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d14:	2304      	movs	r3, #4
 8011d16:	76fb      	strb	r3, [r7, #27]
 8011d18:	e05d      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d1a:	2308      	movs	r3, #8
 8011d1c:	76fb      	strb	r3, [r7, #27]
 8011d1e:	e05a      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d20:	2310      	movs	r3, #16
 8011d22:	76fb      	strb	r3, [r7, #27]
 8011d24:	e057      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	4a49      	ldr	r2, [pc, #292]	; (8011e50 <UART_SetConfig+0x2fc>)
 8011d2c:	4293      	cmp	r3, r2
 8011d2e:	d125      	bne.n	8011d7c <UART_SetConfig+0x228>
 8011d30:	4b43      	ldr	r3, [pc, #268]	; (8011e40 <UART_SetConfig+0x2ec>)
 8011d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8011d3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011d3e:	d017      	beq.n	8011d70 <UART_SetConfig+0x21c>
 8011d40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011d44:	d817      	bhi.n	8011d76 <UART_SetConfig+0x222>
 8011d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d4a:	d00b      	beq.n	8011d64 <UART_SetConfig+0x210>
 8011d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011d50:	d811      	bhi.n	8011d76 <UART_SetConfig+0x222>
 8011d52:	2b00      	cmp	r3, #0
 8011d54:	d003      	beq.n	8011d5e <UART_SetConfig+0x20a>
 8011d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d5a:	d006      	beq.n	8011d6a <UART_SetConfig+0x216>
 8011d5c:	e00b      	b.n	8011d76 <UART_SetConfig+0x222>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	76fb      	strb	r3, [r7, #27]
 8011d62:	e038      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d64:	2302      	movs	r3, #2
 8011d66:	76fb      	strb	r3, [r7, #27]
 8011d68:	e035      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d6a:	2304      	movs	r3, #4
 8011d6c:	76fb      	strb	r3, [r7, #27]
 8011d6e:	e032      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d70:	2308      	movs	r3, #8
 8011d72:	76fb      	strb	r3, [r7, #27]
 8011d74:	e02f      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d76:	2310      	movs	r3, #16
 8011d78:	76fb      	strb	r3, [r7, #27]
 8011d7a:	e02c      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	4a2d      	ldr	r2, [pc, #180]	; (8011e38 <UART_SetConfig+0x2e4>)
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d125      	bne.n	8011dd2 <UART_SetConfig+0x27e>
 8011d86:	4b2e      	ldr	r3, [pc, #184]	; (8011e40 <UART_SetConfig+0x2ec>)
 8011d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011d8c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8011d90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011d94:	d017      	beq.n	8011dc6 <UART_SetConfig+0x272>
 8011d96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011d9a:	d817      	bhi.n	8011dcc <UART_SetConfig+0x278>
 8011d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011da0:	d00b      	beq.n	8011dba <UART_SetConfig+0x266>
 8011da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011da6:	d811      	bhi.n	8011dcc <UART_SetConfig+0x278>
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d003      	beq.n	8011db4 <UART_SetConfig+0x260>
 8011dac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011db0:	d006      	beq.n	8011dc0 <UART_SetConfig+0x26c>
 8011db2:	e00b      	b.n	8011dcc <UART_SetConfig+0x278>
 8011db4:	2300      	movs	r3, #0
 8011db6:	76fb      	strb	r3, [r7, #27]
 8011db8:	e00d      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011dba:	2302      	movs	r3, #2
 8011dbc:	76fb      	strb	r3, [r7, #27]
 8011dbe:	e00a      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011dc0:	2304      	movs	r3, #4
 8011dc2:	76fb      	strb	r3, [r7, #27]
 8011dc4:	e007      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011dc6:	2308      	movs	r3, #8
 8011dc8:	76fb      	strb	r3, [r7, #27]
 8011dca:	e004      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011dcc:	2310      	movs	r3, #16
 8011dce:	76fb      	strb	r3, [r7, #27]
 8011dd0:	e001      	b.n	8011dd6 <UART_SetConfig+0x282>
 8011dd2:	2310      	movs	r3, #16
 8011dd4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	4a17      	ldr	r2, [pc, #92]	; (8011e38 <UART_SetConfig+0x2e4>)
 8011ddc:	4293      	cmp	r3, r2
 8011dde:	f040 8087 	bne.w	8011ef0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8011de2:	7efb      	ldrb	r3, [r7, #27]
 8011de4:	2b08      	cmp	r3, #8
 8011de6:	d837      	bhi.n	8011e58 <UART_SetConfig+0x304>
 8011de8:	a201      	add	r2, pc, #4	; (adr r2, 8011df0 <UART_SetConfig+0x29c>)
 8011dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011dee:	bf00      	nop
 8011df0:	08011e15 	.word	0x08011e15
 8011df4:	08011e59 	.word	0x08011e59
 8011df8:	08011e1d 	.word	0x08011e1d
 8011dfc:	08011e59 	.word	0x08011e59
 8011e00:	08011e23 	.word	0x08011e23
 8011e04:	08011e59 	.word	0x08011e59
 8011e08:	08011e59 	.word	0x08011e59
 8011e0c:	08011e59 	.word	0x08011e59
 8011e10:	08011e2b 	.word	0x08011e2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011e14:	f7fe f97e 	bl	8010114 <HAL_RCC_GetPCLK1Freq>
 8011e18:	6178      	str	r0, [r7, #20]
        break;
 8011e1a:	e022      	b.n	8011e62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011e1c:	4b0d      	ldr	r3, [pc, #52]	; (8011e54 <UART_SetConfig+0x300>)
 8011e1e:	617b      	str	r3, [r7, #20]
        break;
 8011e20:	e01f      	b.n	8011e62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011e22:	f7fe f8df 	bl	800ffe4 <HAL_RCC_GetSysClockFreq>
 8011e26:	6178      	str	r0, [r7, #20]
        break;
 8011e28:	e01b      	b.n	8011e62 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011e2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011e2e:	617b      	str	r3, [r7, #20]
        break;
 8011e30:	e017      	b.n	8011e62 <UART_SetConfig+0x30e>
 8011e32:	bf00      	nop
 8011e34:	efff69f3 	.word	0xefff69f3
 8011e38:	40008000 	.word	0x40008000
 8011e3c:	40013800 	.word	0x40013800
 8011e40:	40021000 	.word	0x40021000
 8011e44:	40004400 	.word	0x40004400
 8011e48:	40004800 	.word	0x40004800
 8011e4c:	40004c00 	.word	0x40004c00
 8011e50:	40005000 	.word	0x40005000
 8011e54:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011e5c:	2301      	movs	r3, #1
 8011e5e:	76bb      	strb	r3, [r7, #26]
        break;
 8011e60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011e62:	697b      	ldr	r3, [r7, #20]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	f000 80f1 	beq.w	801204c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	685a      	ldr	r2, [r3, #4]
 8011e6e:	4613      	mov	r3, r2
 8011e70:	005b      	lsls	r3, r3, #1
 8011e72:	4413      	add	r3, r2
 8011e74:	697a      	ldr	r2, [r7, #20]
 8011e76:	429a      	cmp	r2, r3
 8011e78:	d305      	bcc.n	8011e86 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8011e80:	697a      	ldr	r2, [r7, #20]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d902      	bls.n	8011e8c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8011e86:	2301      	movs	r3, #1
 8011e88:	76bb      	strb	r3, [r7, #26]
 8011e8a:	e0df      	b.n	801204c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8011e8c:	697b      	ldr	r3, [r7, #20]
 8011e8e:	4618      	mov	r0, r3
 8011e90:	f04f 0100 	mov.w	r1, #0
 8011e94:	f04f 0200 	mov.w	r2, #0
 8011e98:	f04f 0300 	mov.w	r3, #0
 8011e9c:	020b      	lsls	r3, r1, #8
 8011e9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8011ea2:	0202      	lsls	r2, r0, #8
 8011ea4:	6879      	ldr	r1, [r7, #4]
 8011ea6:	6849      	ldr	r1, [r1, #4]
 8011ea8:	0849      	lsrs	r1, r1, #1
 8011eaa:	4608      	mov	r0, r1
 8011eac:	f04f 0100 	mov.w	r1, #0
 8011eb0:	1814      	adds	r4, r2, r0
 8011eb2:	eb43 0501 	adc.w	r5, r3, r1
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	461a      	mov	r2, r3
 8011ebc:	f04f 0300 	mov.w	r3, #0
 8011ec0:	4620      	mov	r0, r4
 8011ec2:	4629      	mov	r1, r5
 8011ec4:	f7ee fe70 	bl	8000ba8 <__aeabi_uldivmod>
 8011ec8:	4602      	mov	r2, r0
 8011eca:	460b      	mov	r3, r1
 8011ecc:	4613      	mov	r3, r2
 8011ece:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011ed6:	d308      	bcc.n	8011eea <UART_SetConfig+0x396>
 8011ed8:	693b      	ldr	r3, [r7, #16]
 8011eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011ede:	d204      	bcs.n	8011eea <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	681b      	ldr	r3, [r3, #0]
 8011ee4:	693a      	ldr	r2, [r7, #16]
 8011ee6:	60da      	str	r2, [r3, #12]
 8011ee8:	e0b0      	b.n	801204c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8011eea:	2301      	movs	r3, #1
 8011eec:	76bb      	strb	r3, [r7, #26]
 8011eee:	e0ad      	b.n	801204c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	69db      	ldr	r3, [r3, #28]
 8011ef4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ef8:	d15b      	bne.n	8011fb2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8011efa:	7efb      	ldrb	r3, [r7, #27]
 8011efc:	2b08      	cmp	r3, #8
 8011efe:	d828      	bhi.n	8011f52 <UART_SetConfig+0x3fe>
 8011f00:	a201      	add	r2, pc, #4	; (adr r2, 8011f08 <UART_SetConfig+0x3b4>)
 8011f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f06:	bf00      	nop
 8011f08:	08011f2d 	.word	0x08011f2d
 8011f0c:	08011f35 	.word	0x08011f35
 8011f10:	08011f3d 	.word	0x08011f3d
 8011f14:	08011f53 	.word	0x08011f53
 8011f18:	08011f43 	.word	0x08011f43
 8011f1c:	08011f53 	.word	0x08011f53
 8011f20:	08011f53 	.word	0x08011f53
 8011f24:	08011f53 	.word	0x08011f53
 8011f28:	08011f4b 	.word	0x08011f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011f2c:	f7fe f8f2 	bl	8010114 <HAL_RCC_GetPCLK1Freq>
 8011f30:	6178      	str	r0, [r7, #20]
        break;
 8011f32:	e013      	b.n	8011f5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011f34:	f7fe f904 	bl	8010140 <HAL_RCC_GetPCLK2Freq>
 8011f38:	6178      	str	r0, [r7, #20]
        break;
 8011f3a:	e00f      	b.n	8011f5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011f3c:	4b49      	ldr	r3, [pc, #292]	; (8012064 <UART_SetConfig+0x510>)
 8011f3e:	617b      	str	r3, [r7, #20]
        break;
 8011f40:	e00c      	b.n	8011f5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011f42:	f7fe f84f 	bl	800ffe4 <HAL_RCC_GetSysClockFreq>
 8011f46:	6178      	str	r0, [r7, #20]
        break;
 8011f48:	e008      	b.n	8011f5c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011f4e:	617b      	str	r3, [r7, #20]
        break;
 8011f50:	e004      	b.n	8011f5c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8011f52:	2300      	movs	r3, #0
 8011f54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8011f56:	2301      	movs	r3, #1
 8011f58:	76bb      	strb	r3, [r7, #26]
        break;
 8011f5a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011f5c:	697b      	ldr	r3, [r7, #20]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d074      	beq.n	801204c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8011f62:	697b      	ldr	r3, [r7, #20]
 8011f64:	005a      	lsls	r2, r3, #1
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	685b      	ldr	r3, [r3, #4]
 8011f6a:	085b      	lsrs	r3, r3, #1
 8011f6c:	441a      	add	r2, r3
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	685b      	ldr	r3, [r3, #4]
 8011f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8011f76:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	2b0f      	cmp	r3, #15
 8011f7c:	d916      	bls.n	8011fac <UART_SetConfig+0x458>
 8011f7e:	693b      	ldr	r3, [r7, #16]
 8011f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011f84:	d212      	bcs.n	8011fac <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8011f86:	693b      	ldr	r3, [r7, #16]
 8011f88:	b29b      	uxth	r3, r3
 8011f8a:	f023 030f 	bic.w	r3, r3, #15
 8011f8e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	085b      	lsrs	r3, r3, #1
 8011f94:	b29b      	uxth	r3, r3
 8011f96:	f003 0307 	and.w	r3, r3, #7
 8011f9a:	b29a      	uxth	r2, r3
 8011f9c:	89fb      	ldrh	r3, [r7, #14]
 8011f9e:	4313      	orrs	r3, r2
 8011fa0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	89fa      	ldrh	r2, [r7, #14]
 8011fa8:	60da      	str	r2, [r3, #12]
 8011faa:	e04f      	b.n	801204c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8011fac:	2301      	movs	r3, #1
 8011fae:	76bb      	strb	r3, [r7, #26]
 8011fb0:	e04c      	b.n	801204c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8011fb2:	7efb      	ldrb	r3, [r7, #27]
 8011fb4:	2b08      	cmp	r3, #8
 8011fb6:	d828      	bhi.n	801200a <UART_SetConfig+0x4b6>
 8011fb8:	a201      	add	r2, pc, #4	; (adr r2, 8011fc0 <UART_SetConfig+0x46c>)
 8011fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011fbe:	bf00      	nop
 8011fc0:	08011fe5 	.word	0x08011fe5
 8011fc4:	08011fed 	.word	0x08011fed
 8011fc8:	08011ff5 	.word	0x08011ff5
 8011fcc:	0801200b 	.word	0x0801200b
 8011fd0:	08011ffb 	.word	0x08011ffb
 8011fd4:	0801200b 	.word	0x0801200b
 8011fd8:	0801200b 	.word	0x0801200b
 8011fdc:	0801200b 	.word	0x0801200b
 8011fe0:	08012003 	.word	0x08012003
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011fe4:	f7fe f896 	bl	8010114 <HAL_RCC_GetPCLK1Freq>
 8011fe8:	6178      	str	r0, [r7, #20]
        break;
 8011fea:	e013      	b.n	8012014 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011fec:	f7fe f8a8 	bl	8010140 <HAL_RCC_GetPCLK2Freq>
 8011ff0:	6178      	str	r0, [r7, #20]
        break;
 8011ff2:	e00f      	b.n	8012014 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8011ff4:	4b1b      	ldr	r3, [pc, #108]	; (8012064 <UART_SetConfig+0x510>)
 8011ff6:	617b      	str	r3, [r7, #20]
        break;
 8011ff8:	e00c      	b.n	8012014 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8011ffa:	f7fd fff3 	bl	800ffe4 <HAL_RCC_GetSysClockFreq>
 8011ffe:	6178      	str	r0, [r7, #20]
        break;
 8012000:	e008      	b.n	8012014 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8012002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012006:	617b      	str	r3, [r7, #20]
        break;
 8012008:	e004      	b.n	8012014 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 801200a:	2300      	movs	r3, #0
 801200c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 801200e:	2301      	movs	r3, #1
 8012010:	76bb      	strb	r3, [r7, #26]
        break;
 8012012:	bf00      	nop
    }

    if (pclk != 0U)
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	2b00      	cmp	r3, #0
 8012018:	d018      	beq.n	801204c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	685b      	ldr	r3, [r3, #4]
 801201e:	085a      	lsrs	r2, r3, #1
 8012020:	697b      	ldr	r3, [r7, #20]
 8012022:	441a      	add	r2, r3
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	fbb2 f3f3 	udiv	r3, r2, r3
 801202c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801202e:	693b      	ldr	r3, [r7, #16]
 8012030:	2b0f      	cmp	r3, #15
 8012032:	d909      	bls.n	8012048 <UART_SetConfig+0x4f4>
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801203a:	d205      	bcs.n	8012048 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801203c:	693b      	ldr	r3, [r7, #16]
 801203e:	b29a      	uxth	r2, r3
 8012040:	687b      	ldr	r3, [r7, #4]
 8012042:	681b      	ldr	r3, [r3, #0]
 8012044:	60da      	str	r2, [r3, #12]
 8012046:	e001      	b.n	801204c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8012048:	2301      	movs	r3, #1
 801204a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2200      	movs	r2, #0
 8012050:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8012052:	687b      	ldr	r3, [r7, #4]
 8012054:	2200      	movs	r2, #0
 8012056:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8012058:	7ebb      	ldrb	r3, [r7, #26]
}
 801205a:	4618      	mov	r0, r3
 801205c:	3720      	adds	r7, #32
 801205e:	46bd      	mov	sp, r7
 8012060:	bdb0      	pop	{r4, r5, r7, pc}
 8012062:	bf00      	nop
 8012064:	00f42400 	.word	0x00f42400

08012068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8012068:	b480      	push	{r7}
 801206a:	b083      	sub	sp, #12
 801206c:	af00      	add	r7, sp, #0
 801206e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012074:	f003 0301 	and.w	r3, r3, #1
 8012078:	2b00      	cmp	r3, #0
 801207a:	d00a      	beq.n	8012092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	685b      	ldr	r3, [r3, #4]
 8012082:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8012086:	687b      	ldr	r3, [r7, #4]
 8012088:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	430a      	orrs	r2, r1
 8012090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012096:	f003 0302 	and.w	r3, r3, #2
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00a      	beq.n	80120b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801209e:	687b      	ldr	r3, [r7, #4]
 80120a0:	681b      	ldr	r3, [r3, #0]
 80120a2:	685b      	ldr	r3, [r3, #4]
 80120a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	430a      	orrs	r2, r1
 80120b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b8:	f003 0304 	and.w	r3, r3, #4
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d00a      	beq.n	80120d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	685b      	ldr	r3, [r3, #4]
 80120c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	430a      	orrs	r2, r1
 80120d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120da:	f003 0308 	and.w	r3, r3, #8
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d00a      	beq.n	80120f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	685b      	ldr	r3, [r3, #4]
 80120e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	430a      	orrs	r2, r1
 80120f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120fc:	f003 0310 	and.w	r3, r3, #16
 8012100:	2b00      	cmp	r3, #0
 8012102:	d00a      	beq.n	801211a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	689b      	ldr	r3, [r3, #8]
 801210a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801210e:	687b      	ldr	r3, [r7, #4]
 8012110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	430a      	orrs	r2, r1
 8012118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801211e:	f003 0320 	and.w	r3, r3, #32
 8012122:	2b00      	cmp	r3, #0
 8012124:	d00a      	beq.n	801213c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	689b      	ldr	r3, [r3, #8]
 801212c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	430a      	orrs	r2, r1
 801213a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012144:	2b00      	cmp	r3, #0
 8012146:	d01a      	beq.n	801217e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	681b      	ldr	r3, [r3, #0]
 801214c:	685b      	ldr	r3, [r3, #4]
 801214e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	430a      	orrs	r2, r1
 801215c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012166:	d10a      	bne.n	801217e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	681b      	ldr	r3, [r3, #0]
 801217a:	430a      	orrs	r2, r1
 801217c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012186:	2b00      	cmp	r3, #0
 8012188:	d00a      	beq.n	80121a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	685b      	ldr	r3, [r3, #4]
 8012190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8012194:	687b      	ldr	r3, [r7, #4]
 8012196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	430a      	orrs	r2, r1
 801219e:	605a      	str	r2, [r3, #4]
  }
}
 80121a0:	bf00      	nop
 80121a2:	370c      	adds	r7, #12
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80121ac:	b580      	push	{r7, lr}
 80121ae:	b086      	sub	sp, #24
 80121b0:	af02      	add	r7, sp, #8
 80121b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	2200      	movs	r2, #0
 80121b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80121bc:	f7fb fb98 	bl	800d8f0 <HAL_GetTick>
 80121c0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80121c2:	687b      	ldr	r3, [r7, #4]
 80121c4:	681b      	ldr	r3, [r3, #0]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	f003 0308 	and.w	r3, r3, #8
 80121cc:	2b08      	cmp	r3, #8
 80121ce:	d10e      	bne.n	80121ee <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80121d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	68fb      	ldr	r3, [r7, #12]
 80121d8:	2200      	movs	r2, #0
 80121da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80121de:	6878      	ldr	r0, [r7, #4]
 80121e0:	f000 f82d 	bl	801223e <UART_WaitOnFlagUntilTimeout>
 80121e4:	4603      	mov	r3, r0
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d001      	beq.n	80121ee <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80121ea:	2303      	movs	r3, #3
 80121ec:	e023      	b.n	8012236 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	681b      	ldr	r3, [r3, #0]
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f003 0304 	and.w	r3, r3, #4
 80121f8:	2b04      	cmp	r3, #4
 80121fa:	d10e      	bne.n	801221a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80121fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8012200:	9300      	str	r3, [sp, #0]
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2200      	movs	r2, #0
 8012206:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801220a:	6878      	ldr	r0, [r7, #4]
 801220c:	f000 f817 	bl	801223e <UART_WaitOnFlagUntilTimeout>
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8012216:	2303      	movs	r3, #3
 8012218:	e00d      	b.n	8012236 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	2220      	movs	r2, #32
 801221e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	2220      	movs	r2, #32
 8012224:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2200      	movs	r2, #0
 8012230:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}

0801223e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801223e:	b580      	push	{r7, lr}
 8012240:	b09c      	sub	sp, #112	; 0x70
 8012242:	af00      	add	r7, sp, #0
 8012244:	60f8      	str	r0, [r7, #12]
 8012246:	60b9      	str	r1, [r7, #8]
 8012248:	603b      	str	r3, [r7, #0]
 801224a:	4613      	mov	r3, r2
 801224c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801224e:	e0a5      	b.n	801239c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012250:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012256:	f000 80a1 	beq.w	801239c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801225a:	f7fb fb49 	bl	800d8f0 <HAL_GetTick>
 801225e:	4602      	mov	r2, r0
 8012260:	683b      	ldr	r3, [r7, #0]
 8012262:	1ad3      	subs	r3, r2, r3
 8012264:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012266:	429a      	cmp	r2, r3
 8012268:	d302      	bcc.n	8012270 <UART_WaitOnFlagUntilTimeout+0x32>
 801226a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801226c:	2b00      	cmp	r3, #0
 801226e:	d13e      	bne.n	80122ee <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012278:	e853 3f00 	ldrex	r3, [r3]
 801227c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801227e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012280:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012284:	667b      	str	r3, [r7, #100]	; 0x64
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	461a      	mov	r2, r3
 801228c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801228e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012290:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012292:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012294:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012296:	e841 2300 	strex	r3, r2, [r1]
 801229a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801229c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d1e6      	bne.n	8012270 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	3308      	adds	r3, #8
 80122a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80122ac:	e853 3f00 	ldrex	r3, [r3]
 80122b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122b4:	f023 0301 	bic.w	r3, r3, #1
 80122b8:	663b      	str	r3, [r7, #96]	; 0x60
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	681b      	ldr	r3, [r3, #0]
 80122be:	3308      	adds	r3, #8
 80122c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80122c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80122c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80122c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80122ca:	e841 2300 	strex	r3, r2, [r1]
 80122ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80122d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d1e5      	bne.n	80122a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	2220      	movs	r2, #32
 80122da:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2220      	movs	r2, #32
 80122e0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	2200      	movs	r2, #0
 80122e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80122ea:	2303      	movs	r3, #3
 80122ec:	e067      	b.n	80123be <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	681b      	ldr	r3, [r3, #0]
 80122f4:	f003 0304 	and.w	r3, r3, #4
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d04f      	beq.n	801239c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	681b      	ldr	r3, [r3, #0]
 8012300:	69db      	ldr	r3, [r3, #28]
 8012302:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8012306:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801230a:	d147      	bne.n	801239c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681b      	ldr	r3, [r3, #0]
 8012310:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012314:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801231e:	e853 3f00 	ldrex	r3, [r3]
 8012322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012326:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801232a:	66fb      	str	r3, [r7, #108]	; 0x6c
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	461a      	mov	r2, r3
 8012332:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8012334:	637b      	str	r3, [r7, #52]	; 0x34
 8012336:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801233a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801233c:	e841 2300 	strex	r3, r2, [r1]
 8012340:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012344:	2b00      	cmp	r3, #0
 8012346:	d1e6      	bne.n	8012316 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	3308      	adds	r3, #8
 801234e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012350:	697b      	ldr	r3, [r7, #20]
 8012352:	e853 3f00 	ldrex	r3, [r3]
 8012356:	613b      	str	r3, [r7, #16]
   return(result);
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	f023 0301 	bic.w	r3, r3, #1
 801235e:	66bb      	str	r3, [r7, #104]	; 0x68
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	3308      	adds	r3, #8
 8012366:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012368:	623a      	str	r2, [r7, #32]
 801236a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801236c:	69f9      	ldr	r1, [r7, #28]
 801236e:	6a3a      	ldr	r2, [r7, #32]
 8012370:	e841 2300 	strex	r3, r2, [r1]
 8012374:	61bb      	str	r3, [r7, #24]
   return(result);
 8012376:	69bb      	ldr	r3, [r7, #24]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d1e5      	bne.n	8012348 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	2220      	movs	r2, #32
 8012380:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	2220      	movs	r2, #32
 8012386:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	2220      	movs	r2, #32
 801238c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2200      	movs	r2, #0
 8012394:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8012398:	2303      	movs	r3, #3
 801239a:	e010      	b.n	80123be <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	681b      	ldr	r3, [r3, #0]
 80123a0:	69da      	ldr	r2, [r3, #28]
 80123a2:	68bb      	ldr	r3, [r7, #8]
 80123a4:	4013      	ands	r3, r2
 80123a6:	68ba      	ldr	r2, [r7, #8]
 80123a8:	429a      	cmp	r2, r3
 80123aa:	bf0c      	ite	eq
 80123ac:	2301      	moveq	r3, #1
 80123ae:	2300      	movne	r3, #0
 80123b0:	b2db      	uxtb	r3, r3
 80123b2:	461a      	mov	r2, r3
 80123b4:	79fb      	ldrb	r3, [r7, #7]
 80123b6:	429a      	cmp	r2, r3
 80123b8:	f43f af4a 	beq.w	8012250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80123bc:	2300      	movs	r3, #0
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3770      	adds	r7, #112	; 0x70
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
	...

080123c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80123c8:	b480      	push	{r7}
 80123ca:	b097      	sub	sp, #92	; 0x5c
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	4613      	mov	r3, r2
 80123d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	68ba      	ldr	r2, [r7, #8]
 80123da:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80123dc:	68fb      	ldr	r3, [r7, #12]
 80123de:	88fa      	ldrh	r2, [r7, #6]
 80123e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	88fa      	ldrh	r2, [r7, #6]
 80123e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2200      	movs	r2, #0
 80123f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	689b      	ldr	r3, [r3, #8]
 80123f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80123fa:	d10e      	bne.n	801241a <UART_Start_Receive_IT+0x52>
 80123fc:	68fb      	ldr	r3, [r7, #12]
 80123fe:	691b      	ldr	r3, [r3, #16]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d105      	bne.n	8012410 <UART_Start_Receive_IT+0x48>
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	f240 12ff 	movw	r2, #511	; 0x1ff
 801240a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801240e:	e02d      	b.n	801246c <UART_Start_Receive_IT+0xa4>
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	22ff      	movs	r2, #255	; 0xff
 8012414:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012418:	e028      	b.n	801246c <UART_Start_Receive_IT+0xa4>
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	689b      	ldr	r3, [r3, #8]
 801241e:	2b00      	cmp	r3, #0
 8012420:	d10d      	bne.n	801243e <UART_Start_Receive_IT+0x76>
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	691b      	ldr	r3, [r3, #16]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d104      	bne.n	8012434 <UART_Start_Receive_IT+0x6c>
 801242a:	68fb      	ldr	r3, [r7, #12]
 801242c:	22ff      	movs	r2, #255	; 0xff
 801242e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012432:	e01b      	b.n	801246c <UART_Start_Receive_IT+0xa4>
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	227f      	movs	r2, #127	; 0x7f
 8012438:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801243c:	e016      	b.n	801246c <UART_Start_Receive_IT+0xa4>
 801243e:	68fb      	ldr	r3, [r7, #12]
 8012440:	689b      	ldr	r3, [r3, #8]
 8012442:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8012446:	d10d      	bne.n	8012464 <UART_Start_Receive_IT+0x9c>
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	691b      	ldr	r3, [r3, #16]
 801244c:	2b00      	cmp	r3, #0
 801244e:	d104      	bne.n	801245a <UART_Start_Receive_IT+0x92>
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	227f      	movs	r2, #127	; 0x7f
 8012454:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012458:	e008      	b.n	801246c <UART_Start_Receive_IT+0xa4>
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	223f      	movs	r2, #63	; 0x3f
 801245e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8012462:	e003      	b.n	801246c <UART_Start_Receive_IT+0xa4>
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2200      	movs	r2, #0
 8012468:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801246c:	68fb      	ldr	r3, [r7, #12]
 801246e:	2200      	movs	r2, #0
 8012470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	2222      	movs	r2, #34	; 0x22
 8012478:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	3308      	adds	r3, #8
 8012480:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012484:	e853 3f00 	ldrex	r3, [r3]
 8012488:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801248a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801248c:	f043 0301 	orr.w	r3, r3, #1
 8012490:	657b      	str	r3, [r7, #84]	; 0x54
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	3308      	adds	r3, #8
 8012498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801249a:	64ba      	str	r2, [r7, #72]	; 0x48
 801249c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801249e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80124a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80124a2:	e841 2300 	strex	r3, r2, [r1]
 80124a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80124a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d1e5      	bne.n	801247a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	689b      	ldr	r3, [r3, #8]
 80124b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80124b6:	d107      	bne.n	80124c8 <UART_Start_Receive_IT+0x100>
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	691b      	ldr	r3, [r3, #16]
 80124bc:	2b00      	cmp	r3, #0
 80124be:	d103      	bne.n	80124c8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	4a24      	ldr	r2, [pc, #144]	; (8012554 <UART_Start_Receive_IT+0x18c>)
 80124c4:	665a      	str	r2, [r3, #100]	; 0x64
 80124c6:	e002      	b.n	80124ce <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	4a23      	ldr	r2, [pc, #140]	; (8012558 <UART_Start_Receive_IT+0x190>)
 80124cc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	2200      	movs	r2, #0
 80124d2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80124d6:	68fb      	ldr	r3, [r7, #12]
 80124d8:	691b      	ldr	r3, [r3, #16]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d019      	beq.n	8012512 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124e6:	e853 3f00 	ldrex	r3, [r3]
 80124ea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80124ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80124f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	681b      	ldr	r3, [r3, #0]
 80124f8:	461a      	mov	r2, r3
 80124fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124fc:	637b      	str	r3, [r7, #52]	; 0x34
 80124fe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012500:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012504:	e841 2300 	strex	r3, r2, [r1]
 8012508:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801250a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801250c:	2b00      	cmp	r3, #0
 801250e:	d1e6      	bne.n	80124de <UART_Start_Receive_IT+0x116>
 8012510:	e018      	b.n	8012544 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	681b      	ldr	r3, [r3, #0]
 8012516:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012518:	697b      	ldr	r3, [r7, #20]
 801251a:	e853 3f00 	ldrex	r3, [r3]
 801251e:	613b      	str	r3, [r7, #16]
   return(result);
 8012520:	693b      	ldr	r3, [r7, #16]
 8012522:	f043 0320 	orr.w	r3, r3, #32
 8012526:	653b      	str	r3, [r7, #80]	; 0x50
 8012528:	68fb      	ldr	r3, [r7, #12]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	461a      	mov	r2, r3
 801252e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012530:	623b      	str	r3, [r7, #32]
 8012532:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012534:	69f9      	ldr	r1, [r7, #28]
 8012536:	6a3a      	ldr	r2, [r7, #32]
 8012538:	e841 2300 	strex	r3, r2, [r1]
 801253c:	61bb      	str	r3, [r7, #24]
   return(result);
 801253e:	69bb      	ldr	r3, [r7, #24]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d1e6      	bne.n	8012512 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8012544:	2300      	movs	r3, #0
}
 8012546:	4618      	mov	r0, r3
 8012548:	375c      	adds	r7, #92	; 0x5c
 801254a:	46bd      	mov	sp, r7
 801254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012550:	4770      	bx	lr
 8012552:	bf00      	nop
 8012554:	0801297b 	.word	0x0801297b
 8012558:	0801281b 	.word	0x0801281b

0801255c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801255c:	b480      	push	{r7}
 801255e:	b095      	sub	sp, #84	; 0x54
 8012560:	af00      	add	r7, sp, #0
 8012562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	681b      	ldr	r3, [r3, #0]
 8012568:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801256a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801256c:	e853 3f00 	ldrex	r3, [r3]
 8012570:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012578:	64fb      	str	r3, [r7, #76]	; 0x4c
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	461a      	mov	r2, r3
 8012580:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012582:	643b      	str	r3, [r7, #64]	; 0x40
 8012584:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012586:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801258a:	e841 2300 	strex	r3, r2, [r1]
 801258e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012592:	2b00      	cmp	r3, #0
 8012594:	d1e6      	bne.n	8012564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	3308      	adds	r3, #8
 801259c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801259e:	6a3b      	ldr	r3, [r7, #32]
 80125a0:	e853 3f00 	ldrex	r3, [r3]
 80125a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	f023 0301 	bic.w	r3, r3, #1
 80125ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	681b      	ldr	r3, [r3, #0]
 80125b2:	3308      	adds	r3, #8
 80125b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80125b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80125b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80125bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80125be:	e841 2300 	strex	r3, r2, [r1]
 80125c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80125c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d1e5      	bne.n	8012596 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125ca:	687b      	ldr	r3, [r7, #4]
 80125cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80125ce:	2b01      	cmp	r3, #1
 80125d0:	d118      	bne.n	8012604 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	e853 3f00 	ldrex	r3, [r3]
 80125de:	60bb      	str	r3, [r7, #8]
   return(result);
 80125e0:	68bb      	ldr	r3, [r7, #8]
 80125e2:	f023 0310 	bic.w	r3, r3, #16
 80125e6:	647b      	str	r3, [r7, #68]	; 0x44
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	681b      	ldr	r3, [r3, #0]
 80125ec:	461a      	mov	r2, r3
 80125ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80125f0:	61bb      	str	r3, [r7, #24]
 80125f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125f4:	6979      	ldr	r1, [r7, #20]
 80125f6:	69ba      	ldr	r2, [r7, #24]
 80125f8:	e841 2300 	strex	r3, r2, [r1]
 80125fc:	613b      	str	r3, [r7, #16]
   return(result);
 80125fe:	693b      	ldr	r3, [r7, #16]
 8012600:	2b00      	cmp	r3, #0
 8012602:	d1e6      	bne.n	80125d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	2220      	movs	r2, #32
 8012608:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	2200      	movs	r2, #0
 801260e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	2200      	movs	r2, #0
 8012614:	665a      	str	r2, [r3, #100]	; 0x64
}
 8012616:	bf00      	nop
 8012618:	3754      	adds	r7, #84	; 0x54
 801261a:	46bd      	mov	sp, r7
 801261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012620:	4770      	bx	lr

08012622 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b084      	sub	sp, #16
 8012626:	af00      	add	r7, sp, #0
 8012628:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801262e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	2200      	movs	r2, #0
 8012634:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	2200      	movs	r2, #0
 801263c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f7ff fa71 	bl	8011b28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012646:	bf00      	nop
 8012648:	3710      	adds	r7, #16
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 801264e:	b480      	push	{r7}
 8012650:	b08f      	sub	sp, #60	; 0x3c
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801265a:	2b21      	cmp	r3, #33	; 0x21
 801265c:	d14d      	bne.n	80126fa <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8012664:	b29b      	uxth	r3, r3
 8012666:	2b00      	cmp	r3, #0
 8012668:	d132      	bne.n	80126d0 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
 801266e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012670:	6a3b      	ldr	r3, [r7, #32]
 8012672:	e853 3f00 	ldrex	r3, [r3]
 8012676:	61fb      	str	r3, [r7, #28]
   return(result);
 8012678:	69fb      	ldr	r3, [r7, #28]
 801267a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801267e:	637b      	str	r3, [r7, #52]	; 0x34
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	461a      	mov	r2, r3
 8012686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012688:	62fb      	str	r3, [r7, #44]	; 0x2c
 801268a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801268c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801268e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012690:	e841 2300 	strex	r3, r2, [r1]
 8012694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012698:	2b00      	cmp	r3, #0
 801269a:	d1e6      	bne.n	801266a <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126a2:	68fb      	ldr	r3, [r7, #12]
 80126a4:	e853 3f00 	ldrex	r3, [r3]
 80126a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80126aa:	68bb      	ldr	r3, [r7, #8]
 80126ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80126b0:	633b      	str	r3, [r7, #48]	; 0x30
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	461a      	mov	r2, r3
 80126b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126ba:	61bb      	str	r3, [r7, #24]
 80126bc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126be:	6979      	ldr	r1, [r7, #20]
 80126c0:	69ba      	ldr	r2, [r7, #24]
 80126c2:	e841 2300 	strex	r3, r2, [r1]
 80126c6:	613b      	str	r3, [r7, #16]
   return(result);
 80126c8:	693b      	ldr	r3, [r7, #16]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	d1e6      	bne.n	801269c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80126ce:	e014      	b.n	80126fa <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126d4:	781a      	ldrb	r2, [r3, #0]
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	b292      	uxth	r2, r2
 80126dc:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80126e2:	1c5a      	adds	r2, r3, #1
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80126ee:	b29b      	uxth	r3, r3
 80126f0:	3b01      	subs	r3, #1
 80126f2:	b29a      	uxth	r2, r3
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80126fa:	bf00      	nop
 80126fc:	373c      	adds	r7, #60	; 0x3c
 80126fe:	46bd      	mov	sp, r7
 8012700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012704:	4770      	bx	lr

08012706 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8012706:	b480      	push	{r7}
 8012708:	b091      	sub	sp, #68	; 0x44
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012712:	2b21      	cmp	r3, #33	; 0x21
 8012714:	d151      	bne.n	80127ba <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801271c:	b29b      	uxth	r3, r3
 801271e:	2b00      	cmp	r3, #0
 8012720:	d132      	bne.n	8012788 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801272a:	e853 3f00 	ldrex	r3, [r3]
 801272e:	623b      	str	r3, [r7, #32]
   return(result);
 8012730:	6a3b      	ldr	r3, [r7, #32]
 8012732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012736:	63bb      	str	r3, [r7, #56]	; 0x38
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	461a      	mov	r2, r3
 801273e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012740:	633b      	str	r3, [r7, #48]	; 0x30
 8012742:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012744:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012748:	e841 2300 	strex	r3, r2, [r1]
 801274c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012750:	2b00      	cmp	r3, #0
 8012752:	d1e6      	bne.n	8012722 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	e853 3f00 	ldrex	r3, [r3]
 8012760:	60fb      	str	r3, [r7, #12]
   return(result);
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012768:	637b      	str	r3, [r7, #52]	; 0x34
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	681b      	ldr	r3, [r3, #0]
 801276e:	461a      	mov	r2, r3
 8012770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012772:	61fb      	str	r3, [r7, #28]
 8012774:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012776:	69b9      	ldr	r1, [r7, #24]
 8012778:	69fa      	ldr	r2, [r7, #28]
 801277a:	e841 2300 	strex	r3, r2, [r1]
 801277e:	617b      	str	r3, [r7, #20]
   return(result);
 8012780:	697b      	ldr	r3, [r7, #20]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d1e6      	bne.n	8012754 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8012786:	e018      	b.n	80127ba <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801278c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 801278e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012790:	881a      	ldrh	r2, [r3, #0]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	681b      	ldr	r3, [r3, #0]
 8012796:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801279a:	b292      	uxth	r2, r2
 801279c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80127a2:	1c9a      	adds	r2, r3, #2
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80127ae:	b29b      	uxth	r3, r3
 80127b0:	3b01      	subs	r3, #1
 80127b2:	b29a      	uxth	r2, r3
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80127ba:	bf00      	nop
 80127bc:	3744      	adds	r7, #68	; 0x44
 80127be:	46bd      	mov	sp, r7
 80127c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c4:	4770      	bx	lr

080127c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b088      	sub	sp, #32
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	e853 3f00 	ldrex	r3, [r3]
 80127da:	60bb      	str	r3, [r7, #8]
   return(result);
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80127e2:	61fb      	str	r3, [r7, #28]
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	461a      	mov	r2, r3
 80127ea:	69fb      	ldr	r3, [r7, #28]
 80127ec:	61bb      	str	r3, [r7, #24]
 80127ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80127f0:	6979      	ldr	r1, [r7, #20]
 80127f2:	69ba      	ldr	r2, [r7, #24]
 80127f4:	e841 2300 	strex	r3, r2, [r1]
 80127f8:	613b      	str	r3, [r7, #16]
   return(result);
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d1e6      	bne.n	80127ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2220      	movs	r2, #32
 8012804:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	2200      	movs	r2, #0
 801280a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801280c:	6878      	ldr	r0, [r7, #4]
 801280e:	f7ff f981 	bl	8011b14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8012812:	bf00      	nop
 8012814:	3720      	adds	r7, #32
 8012816:	46bd      	mov	sp, r7
 8012818:	bd80      	pop	{r7, pc}

0801281a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801281a:	b580      	push	{r7, lr}
 801281c:	b096      	sub	sp, #88	; 0x58
 801281e:	af00      	add	r7, sp, #0
 8012820:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012828:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012830:	2b22      	cmp	r3, #34	; 0x22
 8012832:	f040 8094 	bne.w	801295e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	681b      	ldr	r3, [r3, #0]
 801283a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801283c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8012840:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8012844:	b2d9      	uxtb	r1, r3
 8012846:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801284a:	b2da      	uxtb	r2, r3
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012850:	400a      	ands	r2, r1
 8012852:	b2d2      	uxtb	r2, r2
 8012854:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801285a:	1c5a      	adds	r2, r3, #1
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012866:	b29b      	uxth	r3, r3
 8012868:	3b01      	subs	r3, #1
 801286a:	b29a      	uxth	r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8012878:	b29b      	uxth	r3, r3
 801287a:	2b00      	cmp	r3, #0
 801287c:	d179      	bne.n	8012972 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012886:	e853 3f00 	ldrex	r3, [r3]
 801288a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801288c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801288e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8012892:	653b      	str	r3, [r7, #80]	; 0x50
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	681b      	ldr	r3, [r3, #0]
 8012898:	461a      	mov	r2, r3
 801289a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801289c:	647b      	str	r3, [r7, #68]	; 0x44
 801289e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80128a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80128a4:	e841 2300 	strex	r3, r2, [r1]
 80128a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80128aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d1e6      	bne.n	801287e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	3308      	adds	r3, #8
 80128b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80128b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ba:	e853 3f00 	ldrex	r3, [r3]
 80128be:	623b      	str	r3, [r7, #32]
   return(result);
 80128c0:	6a3b      	ldr	r3, [r7, #32]
 80128c2:	f023 0301 	bic.w	r3, r3, #1
 80128c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80128c8:	687b      	ldr	r3, [r7, #4]
 80128ca:	681b      	ldr	r3, [r3, #0]
 80128cc:	3308      	adds	r3, #8
 80128ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80128d0:	633a      	str	r2, [r7, #48]	; 0x30
 80128d2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80128d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80128d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80128d8:	e841 2300 	strex	r3, r2, [r1]
 80128dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80128de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d1e5      	bne.n	80128b0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	2220      	movs	r2, #32
 80128e8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	2200      	movs	r2, #0
 80128ee:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80128f4:	2b01      	cmp	r3, #1
 80128f6:	d12e      	bne.n	8012956 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2200      	movs	r2, #0
 80128fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012904:	693b      	ldr	r3, [r7, #16]
 8012906:	e853 3f00 	ldrex	r3, [r3]
 801290a:	60fb      	str	r3, [r7, #12]
   return(result);
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f023 0310 	bic.w	r3, r3, #16
 8012912:	64bb      	str	r3, [r7, #72]	; 0x48
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	461a      	mov	r2, r3
 801291a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801291c:	61fb      	str	r3, [r7, #28]
 801291e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012920:	69b9      	ldr	r1, [r7, #24]
 8012922:	69fa      	ldr	r2, [r7, #28]
 8012924:	e841 2300 	strex	r3, r2, [r1]
 8012928:	617b      	str	r3, [r7, #20]
   return(result);
 801292a:	697b      	ldr	r3, [r7, #20]
 801292c:	2b00      	cmp	r3, #0
 801292e:	d1e6      	bne.n	80128fe <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	681b      	ldr	r3, [r3, #0]
 8012934:	69db      	ldr	r3, [r3, #28]
 8012936:	f003 0310 	and.w	r3, r3, #16
 801293a:	2b10      	cmp	r3, #16
 801293c:	d103      	bne.n	8012946 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	2210      	movs	r2, #16
 8012944:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012946:	687b      	ldr	r3, [r7, #4]
 8012948:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801294c:	4619      	mov	r1, r3
 801294e:	6878      	ldr	r0, [r7, #4]
 8012950:	f7ff f8f4 	bl	8011b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012954:	e00d      	b.n	8012972 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f7f4 f930 	bl	8006bbc <HAL_UART_RxCpltCallback>
}
 801295c:	e009      	b.n	8012972 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	8b1b      	ldrh	r3, [r3, #24]
 8012964:	b29a      	uxth	r2, r3
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f042 0208 	orr.w	r2, r2, #8
 801296e:	b292      	uxth	r2, r2
 8012970:	831a      	strh	r2, [r3, #24]
}
 8012972:	bf00      	nop
 8012974:	3758      	adds	r7, #88	; 0x58
 8012976:	46bd      	mov	sp, r7
 8012978:	bd80      	pop	{r7, pc}

0801297a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801297a:	b580      	push	{r7, lr}
 801297c:	b096      	sub	sp, #88	; 0x58
 801297e:	af00      	add	r7, sp, #0
 8012980:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012988:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012990:	2b22      	cmp	r3, #34	; 0x22
 8012992:	f040 8094 	bne.w	8012abe <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801299c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129a4:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80129a6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80129aa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80129ae:	4013      	ands	r3, r2
 80129b0:	b29a      	uxth	r2, r3
 80129b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80129ba:	1c9a      	adds	r2, r3, #2
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80129c6:	b29b      	uxth	r3, r3
 80129c8:	3b01      	subs	r3, #1
 80129ca:	b29a      	uxth	r2, r3
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80129d8:	b29b      	uxth	r3, r3
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d179      	bne.n	8012ad2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80129e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129e6:	e853 3f00 	ldrex	r3, [r3]
 80129ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80129ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80129f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	461a      	mov	r2, r3
 80129fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129fc:	643b      	str	r3, [r7, #64]	; 0x40
 80129fe:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a00:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012a04:	e841 2300 	strex	r3, r2, [r1]
 8012a08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8012a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d1e6      	bne.n	80129de <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012a10:	687b      	ldr	r3, [r7, #4]
 8012a12:	681b      	ldr	r3, [r3, #0]
 8012a14:	3308      	adds	r3, #8
 8012a16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a18:	6a3b      	ldr	r3, [r7, #32]
 8012a1a:	e853 3f00 	ldrex	r3, [r3]
 8012a1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8012a20:	69fb      	ldr	r3, [r7, #28]
 8012a22:	f023 0301 	bic.w	r3, r3, #1
 8012a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	3308      	adds	r3, #8
 8012a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a30:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012a32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012a36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a38:	e841 2300 	strex	r3, r2, [r1]
 8012a3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d1e5      	bne.n	8012a10 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	2220      	movs	r2, #32
 8012a48:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	2200      	movs	r2, #0
 8012a4e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8012a54:	2b01      	cmp	r3, #1
 8012a56:	d12e      	bne.n	8012ab6 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	e853 3f00 	ldrex	r3, [r3]
 8012a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	f023 0310 	bic.w	r3, r3, #16
 8012a72:	647b      	str	r3, [r7, #68]	; 0x44
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	461a      	mov	r2, r3
 8012a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a7c:	61bb      	str	r3, [r7, #24]
 8012a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012a80:	6979      	ldr	r1, [r7, #20]
 8012a82:	69ba      	ldr	r2, [r7, #24]
 8012a84:	e841 2300 	strex	r3, r2, [r1]
 8012a88:	613b      	str	r3, [r7, #16]
   return(result);
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d1e6      	bne.n	8012a5e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	681b      	ldr	r3, [r3, #0]
 8012a94:	69db      	ldr	r3, [r3, #28]
 8012a96:	f003 0310 	and.w	r3, r3, #16
 8012a9a:	2b10      	cmp	r3, #16
 8012a9c:	d103      	bne.n	8012aa6 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	681b      	ldr	r3, [r3, #0]
 8012aa2:	2210      	movs	r2, #16
 8012aa4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8012aac:	4619      	mov	r1, r3
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7ff f844 	bl	8011b3c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012ab4:	e00d      	b.n	8012ad2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8012ab6:	6878      	ldr	r0, [r7, #4]
 8012ab8:	f7f4 f880 	bl	8006bbc <HAL_UART_RxCpltCallback>
}
 8012abc:	e009      	b.n	8012ad2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012abe:	687b      	ldr	r3, [r7, #4]
 8012ac0:	681b      	ldr	r3, [r3, #0]
 8012ac2:	8b1b      	ldrh	r3, [r3, #24]
 8012ac4:	b29a      	uxth	r2, r3
 8012ac6:	687b      	ldr	r3, [r7, #4]
 8012ac8:	681b      	ldr	r3, [r3, #0]
 8012aca:	f042 0208 	orr.w	r2, r2, #8
 8012ace:	b292      	uxth	r2, r2
 8012ad0:	831a      	strh	r2, [r3, #24]
}
 8012ad2:	bf00      	nop
 8012ad4:	3758      	adds	r7, #88	; 0x58
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}

08012ada <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012ada:	b480      	push	{r7}
 8012adc:	b083      	sub	sp, #12
 8012ade:	af00      	add	r7, sp, #0
 8012ae0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012ae2:	bf00      	nop
 8012ae4:	370c      	adds	r7, #12
 8012ae6:	46bd      	mov	sp, r7
 8012ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aec:	4770      	bx	lr
	...

08012af0 <__errno>:
 8012af0:	4b01      	ldr	r3, [pc, #4]	; (8012af8 <__errno+0x8>)
 8012af2:	6818      	ldr	r0, [r3, #0]
 8012af4:	4770      	bx	lr
 8012af6:	bf00      	nop
 8012af8:	20000930 	.word	0x20000930

08012afc <__libc_init_array>:
 8012afc:	b570      	push	{r4, r5, r6, lr}
 8012afe:	4d0d      	ldr	r5, [pc, #52]	; (8012b34 <__libc_init_array+0x38>)
 8012b00:	4c0d      	ldr	r4, [pc, #52]	; (8012b38 <__libc_init_array+0x3c>)
 8012b02:	1b64      	subs	r4, r4, r5
 8012b04:	10a4      	asrs	r4, r4, #2
 8012b06:	2600      	movs	r6, #0
 8012b08:	42a6      	cmp	r6, r4
 8012b0a:	d109      	bne.n	8012b20 <__libc_init_array+0x24>
 8012b0c:	4d0b      	ldr	r5, [pc, #44]	; (8012b3c <__libc_init_array+0x40>)
 8012b0e:	4c0c      	ldr	r4, [pc, #48]	; (8012b40 <__libc_init_array+0x44>)
 8012b10:	f002 ff6e 	bl	80159f0 <_init>
 8012b14:	1b64      	subs	r4, r4, r5
 8012b16:	10a4      	asrs	r4, r4, #2
 8012b18:	2600      	movs	r6, #0
 8012b1a:	42a6      	cmp	r6, r4
 8012b1c:	d105      	bne.n	8012b2a <__libc_init_array+0x2e>
 8012b1e:	bd70      	pop	{r4, r5, r6, pc}
 8012b20:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b24:	4798      	blx	r3
 8012b26:	3601      	adds	r6, #1
 8012b28:	e7ee      	b.n	8012b08 <__libc_init_array+0xc>
 8012b2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8012b2e:	4798      	blx	r3
 8012b30:	3601      	adds	r6, #1
 8012b32:	e7f2      	b.n	8012b1a <__libc_init_array+0x1e>
 8012b34:	08016c1c 	.word	0x08016c1c
 8012b38:	08016c1c 	.word	0x08016c1c
 8012b3c:	08016c1c 	.word	0x08016c1c
 8012b40:	08016c20 	.word	0x08016c20

08012b44 <memcmp>:
 8012b44:	b530      	push	{r4, r5, lr}
 8012b46:	3901      	subs	r1, #1
 8012b48:	2400      	movs	r4, #0
 8012b4a:	42a2      	cmp	r2, r4
 8012b4c:	d101      	bne.n	8012b52 <memcmp+0xe>
 8012b4e:	2000      	movs	r0, #0
 8012b50:	e005      	b.n	8012b5e <memcmp+0x1a>
 8012b52:	5d03      	ldrb	r3, [r0, r4]
 8012b54:	3401      	adds	r4, #1
 8012b56:	5d0d      	ldrb	r5, [r1, r4]
 8012b58:	42ab      	cmp	r3, r5
 8012b5a:	d0f6      	beq.n	8012b4a <memcmp+0x6>
 8012b5c:	1b58      	subs	r0, r3, r5
 8012b5e:	bd30      	pop	{r4, r5, pc}

08012b60 <memcpy>:
 8012b60:	440a      	add	r2, r1
 8012b62:	4291      	cmp	r1, r2
 8012b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8012b68:	d100      	bne.n	8012b6c <memcpy+0xc>
 8012b6a:	4770      	bx	lr
 8012b6c:	b510      	push	{r4, lr}
 8012b6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012b72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8012b76:	4291      	cmp	r1, r2
 8012b78:	d1f9      	bne.n	8012b6e <memcpy+0xe>
 8012b7a:	bd10      	pop	{r4, pc}

08012b7c <memset>:
 8012b7c:	4402      	add	r2, r0
 8012b7e:	4603      	mov	r3, r0
 8012b80:	4293      	cmp	r3, r2
 8012b82:	d100      	bne.n	8012b86 <memset+0xa>
 8012b84:	4770      	bx	lr
 8012b86:	f803 1b01 	strb.w	r1, [r3], #1
 8012b8a:	e7f9      	b.n	8012b80 <memset+0x4>

08012b8c <__cvt>:
 8012b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b90:	ec55 4b10 	vmov	r4, r5, d0
 8012b94:	2d00      	cmp	r5, #0
 8012b96:	460e      	mov	r6, r1
 8012b98:	4619      	mov	r1, r3
 8012b9a:	462b      	mov	r3, r5
 8012b9c:	bfbb      	ittet	lt
 8012b9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012ba2:	461d      	movlt	r5, r3
 8012ba4:	2300      	movge	r3, #0
 8012ba6:	232d      	movlt	r3, #45	; 0x2d
 8012ba8:	700b      	strb	r3, [r1, #0]
 8012baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012bac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012bb0:	4691      	mov	r9, r2
 8012bb2:	f023 0820 	bic.w	r8, r3, #32
 8012bb6:	bfbc      	itt	lt
 8012bb8:	4622      	movlt	r2, r4
 8012bba:	4614      	movlt	r4, r2
 8012bbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012bc0:	d005      	beq.n	8012bce <__cvt+0x42>
 8012bc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012bc6:	d100      	bne.n	8012bca <__cvt+0x3e>
 8012bc8:	3601      	adds	r6, #1
 8012bca:	2102      	movs	r1, #2
 8012bcc:	e000      	b.n	8012bd0 <__cvt+0x44>
 8012bce:	2103      	movs	r1, #3
 8012bd0:	ab03      	add	r3, sp, #12
 8012bd2:	9301      	str	r3, [sp, #4]
 8012bd4:	ab02      	add	r3, sp, #8
 8012bd6:	9300      	str	r3, [sp, #0]
 8012bd8:	ec45 4b10 	vmov	d0, r4, r5
 8012bdc:	4653      	mov	r3, sl
 8012bde:	4632      	mov	r2, r6
 8012be0:	f000 fe56 	bl	8013890 <_dtoa_r>
 8012be4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012be8:	4607      	mov	r7, r0
 8012bea:	d102      	bne.n	8012bf2 <__cvt+0x66>
 8012bec:	f019 0f01 	tst.w	r9, #1
 8012bf0:	d022      	beq.n	8012c38 <__cvt+0xac>
 8012bf2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012bf6:	eb07 0906 	add.w	r9, r7, r6
 8012bfa:	d110      	bne.n	8012c1e <__cvt+0x92>
 8012bfc:	783b      	ldrb	r3, [r7, #0]
 8012bfe:	2b30      	cmp	r3, #48	; 0x30
 8012c00:	d10a      	bne.n	8012c18 <__cvt+0x8c>
 8012c02:	2200      	movs	r2, #0
 8012c04:	2300      	movs	r3, #0
 8012c06:	4620      	mov	r0, r4
 8012c08:	4629      	mov	r1, r5
 8012c0a:	f7ed ff5d 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c0e:	b918      	cbnz	r0, 8012c18 <__cvt+0x8c>
 8012c10:	f1c6 0601 	rsb	r6, r6, #1
 8012c14:	f8ca 6000 	str.w	r6, [sl]
 8012c18:	f8da 3000 	ldr.w	r3, [sl]
 8012c1c:	4499      	add	r9, r3
 8012c1e:	2200      	movs	r2, #0
 8012c20:	2300      	movs	r3, #0
 8012c22:	4620      	mov	r0, r4
 8012c24:	4629      	mov	r1, r5
 8012c26:	f7ed ff4f 	bl	8000ac8 <__aeabi_dcmpeq>
 8012c2a:	b108      	cbz	r0, 8012c30 <__cvt+0xa4>
 8012c2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012c30:	2230      	movs	r2, #48	; 0x30
 8012c32:	9b03      	ldr	r3, [sp, #12]
 8012c34:	454b      	cmp	r3, r9
 8012c36:	d307      	bcc.n	8012c48 <__cvt+0xbc>
 8012c38:	9b03      	ldr	r3, [sp, #12]
 8012c3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012c3c:	1bdb      	subs	r3, r3, r7
 8012c3e:	4638      	mov	r0, r7
 8012c40:	6013      	str	r3, [r2, #0]
 8012c42:	b004      	add	sp, #16
 8012c44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012c48:	1c59      	adds	r1, r3, #1
 8012c4a:	9103      	str	r1, [sp, #12]
 8012c4c:	701a      	strb	r2, [r3, #0]
 8012c4e:	e7f0      	b.n	8012c32 <__cvt+0xa6>

08012c50 <__exponent>:
 8012c50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012c52:	4603      	mov	r3, r0
 8012c54:	2900      	cmp	r1, #0
 8012c56:	bfb8      	it	lt
 8012c58:	4249      	neglt	r1, r1
 8012c5a:	f803 2b02 	strb.w	r2, [r3], #2
 8012c5e:	bfb4      	ite	lt
 8012c60:	222d      	movlt	r2, #45	; 0x2d
 8012c62:	222b      	movge	r2, #43	; 0x2b
 8012c64:	2909      	cmp	r1, #9
 8012c66:	7042      	strb	r2, [r0, #1]
 8012c68:	dd2a      	ble.n	8012cc0 <__exponent+0x70>
 8012c6a:	f10d 0407 	add.w	r4, sp, #7
 8012c6e:	46a4      	mov	ip, r4
 8012c70:	270a      	movs	r7, #10
 8012c72:	46a6      	mov	lr, r4
 8012c74:	460a      	mov	r2, r1
 8012c76:	fb91 f6f7 	sdiv	r6, r1, r7
 8012c7a:	fb07 1516 	mls	r5, r7, r6, r1
 8012c7e:	3530      	adds	r5, #48	; 0x30
 8012c80:	2a63      	cmp	r2, #99	; 0x63
 8012c82:	f104 34ff 	add.w	r4, r4, #4294967295
 8012c86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012c8a:	4631      	mov	r1, r6
 8012c8c:	dcf1      	bgt.n	8012c72 <__exponent+0x22>
 8012c8e:	3130      	adds	r1, #48	; 0x30
 8012c90:	f1ae 0502 	sub.w	r5, lr, #2
 8012c94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012c98:	1c44      	adds	r4, r0, #1
 8012c9a:	4629      	mov	r1, r5
 8012c9c:	4561      	cmp	r1, ip
 8012c9e:	d30a      	bcc.n	8012cb6 <__exponent+0x66>
 8012ca0:	f10d 0209 	add.w	r2, sp, #9
 8012ca4:	eba2 020e 	sub.w	r2, r2, lr
 8012ca8:	4565      	cmp	r5, ip
 8012caa:	bf88      	it	hi
 8012cac:	2200      	movhi	r2, #0
 8012cae:	4413      	add	r3, r2
 8012cb0:	1a18      	subs	r0, r3, r0
 8012cb2:	b003      	add	sp, #12
 8012cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012cb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012cba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012cbe:	e7ed      	b.n	8012c9c <__exponent+0x4c>
 8012cc0:	2330      	movs	r3, #48	; 0x30
 8012cc2:	3130      	adds	r1, #48	; 0x30
 8012cc4:	7083      	strb	r3, [r0, #2]
 8012cc6:	70c1      	strb	r1, [r0, #3]
 8012cc8:	1d03      	adds	r3, r0, #4
 8012cca:	e7f1      	b.n	8012cb0 <__exponent+0x60>

08012ccc <_printf_float>:
 8012ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cd0:	ed2d 8b02 	vpush	{d8}
 8012cd4:	b08d      	sub	sp, #52	; 0x34
 8012cd6:	460c      	mov	r4, r1
 8012cd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012cdc:	4616      	mov	r6, r2
 8012cde:	461f      	mov	r7, r3
 8012ce0:	4605      	mov	r5, r0
 8012ce2:	f001 fd79 	bl	80147d8 <_localeconv_r>
 8012ce6:	f8d0 a000 	ldr.w	sl, [r0]
 8012cea:	4650      	mov	r0, sl
 8012cec:	f7ed fa70 	bl	80001d0 <strlen>
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	930a      	str	r3, [sp, #40]	; 0x28
 8012cf4:	6823      	ldr	r3, [r4, #0]
 8012cf6:	9305      	str	r3, [sp, #20]
 8012cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8012cfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012d00:	3307      	adds	r3, #7
 8012d02:	f023 0307 	bic.w	r3, r3, #7
 8012d06:	f103 0208 	add.w	r2, r3, #8
 8012d0a:	f8c8 2000 	str.w	r2, [r8]
 8012d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012d16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012d1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012d1e:	9307      	str	r3, [sp, #28]
 8012d20:	f8cd 8018 	str.w	r8, [sp, #24]
 8012d24:	ee08 0a10 	vmov	s16, r0
 8012d28:	4b9f      	ldr	r3, [pc, #636]	; (8012fa8 <_printf_float+0x2dc>)
 8012d2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d32:	f7ed fefb 	bl	8000b2c <__aeabi_dcmpun>
 8012d36:	bb88      	cbnz	r0, 8012d9c <_printf_float+0xd0>
 8012d38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012d3c:	4b9a      	ldr	r3, [pc, #616]	; (8012fa8 <_printf_float+0x2dc>)
 8012d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012d42:	f7ed fed5 	bl	8000af0 <__aeabi_dcmple>
 8012d46:	bb48      	cbnz	r0, 8012d9c <_printf_float+0xd0>
 8012d48:	2200      	movs	r2, #0
 8012d4a:	2300      	movs	r3, #0
 8012d4c:	4640      	mov	r0, r8
 8012d4e:	4649      	mov	r1, r9
 8012d50:	f7ed fec4 	bl	8000adc <__aeabi_dcmplt>
 8012d54:	b110      	cbz	r0, 8012d5c <_printf_float+0x90>
 8012d56:	232d      	movs	r3, #45	; 0x2d
 8012d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d5c:	4b93      	ldr	r3, [pc, #588]	; (8012fac <_printf_float+0x2e0>)
 8012d5e:	4894      	ldr	r0, [pc, #592]	; (8012fb0 <_printf_float+0x2e4>)
 8012d60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012d64:	bf94      	ite	ls
 8012d66:	4698      	movls	r8, r3
 8012d68:	4680      	movhi	r8, r0
 8012d6a:	2303      	movs	r3, #3
 8012d6c:	6123      	str	r3, [r4, #16]
 8012d6e:	9b05      	ldr	r3, [sp, #20]
 8012d70:	f023 0204 	bic.w	r2, r3, #4
 8012d74:	6022      	str	r2, [r4, #0]
 8012d76:	f04f 0900 	mov.w	r9, #0
 8012d7a:	9700      	str	r7, [sp, #0]
 8012d7c:	4633      	mov	r3, r6
 8012d7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012d80:	4621      	mov	r1, r4
 8012d82:	4628      	mov	r0, r5
 8012d84:	f000 f9d8 	bl	8013138 <_printf_common>
 8012d88:	3001      	adds	r0, #1
 8012d8a:	f040 8090 	bne.w	8012eae <_printf_float+0x1e2>
 8012d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012d92:	b00d      	add	sp, #52	; 0x34
 8012d94:	ecbd 8b02 	vpop	{d8}
 8012d98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d9c:	4642      	mov	r2, r8
 8012d9e:	464b      	mov	r3, r9
 8012da0:	4640      	mov	r0, r8
 8012da2:	4649      	mov	r1, r9
 8012da4:	f7ed fec2 	bl	8000b2c <__aeabi_dcmpun>
 8012da8:	b140      	cbz	r0, 8012dbc <_printf_float+0xf0>
 8012daa:	464b      	mov	r3, r9
 8012dac:	2b00      	cmp	r3, #0
 8012dae:	bfbc      	itt	lt
 8012db0:	232d      	movlt	r3, #45	; 0x2d
 8012db2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012db6:	487f      	ldr	r0, [pc, #508]	; (8012fb4 <_printf_float+0x2e8>)
 8012db8:	4b7f      	ldr	r3, [pc, #508]	; (8012fb8 <_printf_float+0x2ec>)
 8012dba:	e7d1      	b.n	8012d60 <_printf_float+0x94>
 8012dbc:	6863      	ldr	r3, [r4, #4]
 8012dbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012dc2:	9206      	str	r2, [sp, #24]
 8012dc4:	1c5a      	adds	r2, r3, #1
 8012dc6:	d13f      	bne.n	8012e48 <_printf_float+0x17c>
 8012dc8:	2306      	movs	r3, #6
 8012dca:	6063      	str	r3, [r4, #4]
 8012dcc:	9b05      	ldr	r3, [sp, #20]
 8012dce:	6861      	ldr	r1, [r4, #4]
 8012dd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012dd4:	2300      	movs	r3, #0
 8012dd6:	9303      	str	r3, [sp, #12]
 8012dd8:	ab0a      	add	r3, sp, #40	; 0x28
 8012dda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012dde:	ab09      	add	r3, sp, #36	; 0x24
 8012de0:	ec49 8b10 	vmov	d0, r8, r9
 8012de4:	9300      	str	r3, [sp, #0]
 8012de6:	6022      	str	r2, [r4, #0]
 8012de8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012dec:	4628      	mov	r0, r5
 8012dee:	f7ff fecd 	bl	8012b8c <__cvt>
 8012df2:	9b06      	ldr	r3, [sp, #24]
 8012df4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012df6:	2b47      	cmp	r3, #71	; 0x47
 8012df8:	4680      	mov	r8, r0
 8012dfa:	d108      	bne.n	8012e0e <_printf_float+0x142>
 8012dfc:	1cc8      	adds	r0, r1, #3
 8012dfe:	db02      	blt.n	8012e06 <_printf_float+0x13a>
 8012e00:	6863      	ldr	r3, [r4, #4]
 8012e02:	4299      	cmp	r1, r3
 8012e04:	dd41      	ble.n	8012e8a <_printf_float+0x1be>
 8012e06:	f1ab 0b02 	sub.w	fp, fp, #2
 8012e0a:	fa5f fb8b 	uxtb.w	fp, fp
 8012e0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012e12:	d820      	bhi.n	8012e56 <_printf_float+0x18a>
 8012e14:	3901      	subs	r1, #1
 8012e16:	465a      	mov	r2, fp
 8012e18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012e1c:	9109      	str	r1, [sp, #36]	; 0x24
 8012e1e:	f7ff ff17 	bl	8012c50 <__exponent>
 8012e22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e24:	1813      	adds	r3, r2, r0
 8012e26:	2a01      	cmp	r2, #1
 8012e28:	4681      	mov	r9, r0
 8012e2a:	6123      	str	r3, [r4, #16]
 8012e2c:	dc02      	bgt.n	8012e34 <_printf_float+0x168>
 8012e2e:	6822      	ldr	r2, [r4, #0]
 8012e30:	07d2      	lsls	r2, r2, #31
 8012e32:	d501      	bpl.n	8012e38 <_printf_float+0x16c>
 8012e34:	3301      	adds	r3, #1
 8012e36:	6123      	str	r3, [r4, #16]
 8012e38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d09c      	beq.n	8012d7a <_printf_float+0xae>
 8012e40:	232d      	movs	r3, #45	; 0x2d
 8012e42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012e46:	e798      	b.n	8012d7a <_printf_float+0xae>
 8012e48:	9a06      	ldr	r2, [sp, #24]
 8012e4a:	2a47      	cmp	r2, #71	; 0x47
 8012e4c:	d1be      	bne.n	8012dcc <_printf_float+0x100>
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d1bc      	bne.n	8012dcc <_printf_float+0x100>
 8012e52:	2301      	movs	r3, #1
 8012e54:	e7b9      	b.n	8012dca <_printf_float+0xfe>
 8012e56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012e5a:	d118      	bne.n	8012e8e <_printf_float+0x1c2>
 8012e5c:	2900      	cmp	r1, #0
 8012e5e:	6863      	ldr	r3, [r4, #4]
 8012e60:	dd0b      	ble.n	8012e7a <_printf_float+0x1ae>
 8012e62:	6121      	str	r1, [r4, #16]
 8012e64:	b913      	cbnz	r3, 8012e6c <_printf_float+0x1a0>
 8012e66:	6822      	ldr	r2, [r4, #0]
 8012e68:	07d0      	lsls	r0, r2, #31
 8012e6a:	d502      	bpl.n	8012e72 <_printf_float+0x1a6>
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	440b      	add	r3, r1
 8012e70:	6123      	str	r3, [r4, #16]
 8012e72:	65a1      	str	r1, [r4, #88]	; 0x58
 8012e74:	f04f 0900 	mov.w	r9, #0
 8012e78:	e7de      	b.n	8012e38 <_printf_float+0x16c>
 8012e7a:	b913      	cbnz	r3, 8012e82 <_printf_float+0x1b6>
 8012e7c:	6822      	ldr	r2, [r4, #0]
 8012e7e:	07d2      	lsls	r2, r2, #31
 8012e80:	d501      	bpl.n	8012e86 <_printf_float+0x1ba>
 8012e82:	3302      	adds	r3, #2
 8012e84:	e7f4      	b.n	8012e70 <_printf_float+0x1a4>
 8012e86:	2301      	movs	r3, #1
 8012e88:	e7f2      	b.n	8012e70 <_printf_float+0x1a4>
 8012e8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012e8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e90:	4299      	cmp	r1, r3
 8012e92:	db05      	blt.n	8012ea0 <_printf_float+0x1d4>
 8012e94:	6823      	ldr	r3, [r4, #0]
 8012e96:	6121      	str	r1, [r4, #16]
 8012e98:	07d8      	lsls	r0, r3, #31
 8012e9a:	d5ea      	bpl.n	8012e72 <_printf_float+0x1a6>
 8012e9c:	1c4b      	adds	r3, r1, #1
 8012e9e:	e7e7      	b.n	8012e70 <_printf_float+0x1a4>
 8012ea0:	2900      	cmp	r1, #0
 8012ea2:	bfd4      	ite	le
 8012ea4:	f1c1 0202 	rsble	r2, r1, #2
 8012ea8:	2201      	movgt	r2, #1
 8012eaa:	4413      	add	r3, r2
 8012eac:	e7e0      	b.n	8012e70 <_printf_float+0x1a4>
 8012eae:	6823      	ldr	r3, [r4, #0]
 8012eb0:	055a      	lsls	r2, r3, #21
 8012eb2:	d407      	bmi.n	8012ec4 <_printf_float+0x1f8>
 8012eb4:	6923      	ldr	r3, [r4, #16]
 8012eb6:	4642      	mov	r2, r8
 8012eb8:	4631      	mov	r1, r6
 8012eba:	4628      	mov	r0, r5
 8012ebc:	47b8      	blx	r7
 8012ebe:	3001      	adds	r0, #1
 8012ec0:	d12c      	bne.n	8012f1c <_printf_float+0x250>
 8012ec2:	e764      	b.n	8012d8e <_printf_float+0xc2>
 8012ec4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012ec8:	f240 80e0 	bls.w	801308c <_printf_float+0x3c0>
 8012ecc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	f7ed fdf8 	bl	8000ac8 <__aeabi_dcmpeq>
 8012ed8:	2800      	cmp	r0, #0
 8012eda:	d034      	beq.n	8012f46 <_printf_float+0x27a>
 8012edc:	4a37      	ldr	r2, [pc, #220]	; (8012fbc <_printf_float+0x2f0>)
 8012ede:	2301      	movs	r3, #1
 8012ee0:	4631      	mov	r1, r6
 8012ee2:	4628      	mov	r0, r5
 8012ee4:	47b8      	blx	r7
 8012ee6:	3001      	adds	r0, #1
 8012ee8:	f43f af51 	beq.w	8012d8e <_printf_float+0xc2>
 8012eec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ef0:	429a      	cmp	r2, r3
 8012ef2:	db02      	blt.n	8012efa <_printf_float+0x22e>
 8012ef4:	6823      	ldr	r3, [r4, #0]
 8012ef6:	07d8      	lsls	r0, r3, #31
 8012ef8:	d510      	bpl.n	8012f1c <_printf_float+0x250>
 8012efa:	ee18 3a10 	vmov	r3, s16
 8012efe:	4652      	mov	r2, sl
 8012f00:	4631      	mov	r1, r6
 8012f02:	4628      	mov	r0, r5
 8012f04:	47b8      	blx	r7
 8012f06:	3001      	adds	r0, #1
 8012f08:	f43f af41 	beq.w	8012d8e <_printf_float+0xc2>
 8012f0c:	f04f 0800 	mov.w	r8, #0
 8012f10:	f104 091a 	add.w	r9, r4, #26
 8012f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f16:	3b01      	subs	r3, #1
 8012f18:	4543      	cmp	r3, r8
 8012f1a:	dc09      	bgt.n	8012f30 <_printf_float+0x264>
 8012f1c:	6823      	ldr	r3, [r4, #0]
 8012f1e:	079b      	lsls	r3, r3, #30
 8012f20:	f100 8105 	bmi.w	801312e <_printf_float+0x462>
 8012f24:	68e0      	ldr	r0, [r4, #12]
 8012f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012f28:	4298      	cmp	r0, r3
 8012f2a:	bfb8      	it	lt
 8012f2c:	4618      	movlt	r0, r3
 8012f2e:	e730      	b.n	8012d92 <_printf_float+0xc6>
 8012f30:	2301      	movs	r3, #1
 8012f32:	464a      	mov	r2, r9
 8012f34:	4631      	mov	r1, r6
 8012f36:	4628      	mov	r0, r5
 8012f38:	47b8      	blx	r7
 8012f3a:	3001      	adds	r0, #1
 8012f3c:	f43f af27 	beq.w	8012d8e <_printf_float+0xc2>
 8012f40:	f108 0801 	add.w	r8, r8, #1
 8012f44:	e7e6      	b.n	8012f14 <_printf_float+0x248>
 8012f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	dc39      	bgt.n	8012fc0 <_printf_float+0x2f4>
 8012f4c:	4a1b      	ldr	r2, [pc, #108]	; (8012fbc <_printf_float+0x2f0>)
 8012f4e:	2301      	movs	r3, #1
 8012f50:	4631      	mov	r1, r6
 8012f52:	4628      	mov	r0, r5
 8012f54:	47b8      	blx	r7
 8012f56:	3001      	adds	r0, #1
 8012f58:	f43f af19 	beq.w	8012d8e <_printf_float+0xc2>
 8012f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012f60:	4313      	orrs	r3, r2
 8012f62:	d102      	bne.n	8012f6a <_printf_float+0x29e>
 8012f64:	6823      	ldr	r3, [r4, #0]
 8012f66:	07d9      	lsls	r1, r3, #31
 8012f68:	d5d8      	bpl.n	8012f1c <_printf_float+0x250>
 8012f6a:	ee18 3a10 	vmov	r3, s16
 8012f6e:	4652      	mov	r2, sl
 8012f70:	4631      	mov	r1, r6
 8012f72:	4628      	mov	r0, r5
 8012f74:	47b8      	blx	r7
 8012f76:	3001      	adds	r0, #1
 8012f78:	f43f af09 	beq.w	8012d8e <_printf_float+0xc2>
 8012f7c:	f04f 0900 	mov.w	r9, #0
 8012f80:	f104 0a1a 	add.w	sl, r4, #26
 8012f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012f86:	425b      	negs	r3, r3
 8012f88:	454b      	cmp	r3, r9
 8012f8a:	dc01      	bgt.n	8012f90 <_printf_float+0x2c4>
 8012f8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f8e:	e792      	b.n	8012eb6 <_printf_float+0x1ea>
 8012f90:	2301      	movs	r3, #1
 8012f92:	4652      	mov	r2, sl
 8012f94:	4631      	mov	r1, r6
 8012f96:	4628      	mov	r0, r5
 8012f98:	47b8      	blx	r7
 8012f9a:	3001      	adds	r0, #1
 8012f9c:	f43f aef7 	beq.w	8012d8e <_printf_float+0xc2>
 8012fa0:	f109 0901 	add.w	r9, r9, #1
 8012fa4:	e7ee      	b.n	8012f84 <_printf_float+0x2b8>
 8012fa6:	bf00      	nop
 8012fa8:	7fefffff 	.word	0x7fefffff
 8012fac:	08016838 	.word	0x08016838
 8012fb0:	0801683c 	.word	0x0801683c
 8012fb4:	08016844 	.word	0x08016844
 8012fb8:	08016840 	.word	0x08016840
 8012fbc:	08016848 	.word	0x08016848
 8012fc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012fc4:	429a      	cmp	r2, r3
 8012fc6:	bfa8      	it	ge
 8012fc8:	461a      	movge	r2, r3
 8012fca:	2a00      	cmp	r2, #0
 8012fcc:	4691      	mov	r9, r2
 8012fce:	dc37      	bgt.n	8013040 <_printf_float+0x374>
 8012fd0:	f04f 0b00 	mov.w	fp, #0
 8012fd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012fd8:	f104 021a 	add.w	r2, r4, #26
 8012fdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012fde:	9305      	str	r3, [sp, #20]
 8012fe0:	eba3 0309 	sub.w	r3, r3, r9
 8012fe4:	455b      	cmp	r3, fp
 8012fe6:	dc33      	bgt.n	8013050 <_printf_float+0x384>
 8012fe8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012fec:	429a      	cmp	r2, r3
 8012fee:	db3b      	blt.n	8013068 <_printf_float+0x39c>
 8012ff0:	6823      	ldr	r3, [r4, #0]
 8012ff2:	07da      	lsls	r2, r3, #31
 8012ff4:	d438      	bmi.n	8013068 <_printf_float+0x39c>
 8012ff6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012ff8:	9b05      	ldr	r3, [sp, #20]
 8012ffa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ffc:	1ad3      	subs	r3, r2, r3
 8012ffe:	eba2 0901 	sub.w	r9, r2, r1
 8013002:	4599      	cmp	r9, r3
 8013004:	bfa8      	it	ge
 8013006:	4699      	movge	r9, r3
 8013008:	f1b9 0f00 	cmp.w	r9, #0
 801300c:	dc35      	bgt.n	801307a <_printf_float+0x3ae>
 801300e:	f04f 0800 	mov.w	r8, #0
 8013012:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8013016:	f104 0a1a 	add.w	sl, r4, #26
 801301a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801301e:	1a9b      	subs	r3, r3, r2
 8013020:	eba3 0309 	sub.w	r3, r3, r9
 8013024:	4543      	cmp	r3, r8
 8013026:	f77f af79 	ble.w	8012f1c <_printf_float+0x250>
 801302a:	2301      	movs	r3, #1
 801302c:	4652      	mov	r2, sl
 801302e:	4631      	mov	r1, r6
 8013030:	4628      	mov	r0, r5
 8013032:	47b8      	blx	r7
 8013034:	3001      	adds	r0, #1
 8013036:	f43f aeaa 	beq.w	8012d8e <_printf_float+0xc2>
 801303a:	f108 0801 	add.w	r8, r8, #1
 801303e:	e7ec      	b.n	801301a <_printf_float+0x34e>
 8013040:	4613      	mov	r3, r2
 8013042:	4631      	mov	r1, r6
 8013044:	4642      	mov	r2, r8
 8013046:	4628      	mov	r0, r5
 8013048:	47b8      	blx	r7
 801304a:	3001      	adds	r0, #1
 801304c:	d1c0      	bne.n	8012fd0 <_printf_float+0x304>
 801304e:	e69e      	b.n	8012d8e <_printf_float+0xc2>
 8013050:	2301      	movs	r3, #1
 8013052:	4631      	mov	r1, r6
 8013054:	4628      	mov	r0, r5
 8013056:	9205      	str	r2, [sp, #20]
 8013058:	47b8      	blx	r7
 801305a:	3001      	adds	r0, #1
 801305c:	f43f ae97 	beq.w	8012d8e <_printf_float+0xc2>
 8013060:	9a05      	ldr	r2, [sp, #20]
 8013062:	f10b 0b01 	add.w	fp, fp, #1
 8013066:	e7b9      	b.n	8012fdc <_printf_float+0x310>
 8013068:	ee18 3a10 	vmov	r3, s16
 801306c:	4652      	mov	r2, sl
 801306e:	4631      	mov	r1, r6
 8013070:	4628      	mov	r0, r5
 8013072:	47b8      	blx	r7
 8013074:	3001      	adds	r0, #1
 8013076:	d1be      	bne.n	8012ff6 <_printf_float+0x32a>
 8013078:	e689      	b.n	8012d8e <_printf_float+0xc2>
 801307a:	9a05      	ldr	r2, [sp, #20]
 801307c:	464b      	mov	r3, r9
 801307e:	4442      	add	r2, r8
 8013080:	4631      	mov	r1, r6
 8013082:	4628      	mov	r0, r5
 8013084:	47b8      	blx	r7
 8013086:	3001      	adds	r0, #1
 8013088:	d1c1      	bne.n	801300e <_printf_float+0x342>
 801308a:	e680      	b.n	8012d8e <_printf_float+0xc2>
 801308c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801308e:	2a01      	cmp	r2, #1
 8013090:	dc01      	bgt.n	8013096 <_printf_float+0x3ca>
 8013092:	07db      	lsls	r3, r3, #31
 8013094:	d538      	bpl.n	8013108 <_printf_float+0x43c>
 8013096:	2301      	movs	r3, #1
 8013098:	4642      	mov	r2, r8
 801309a:	4631      	mov	r1, r6
 801309c:	4628      	mov	r0, r5
 801309e:	47b8      	blx	r7
 80130a0:	3001      	adds	r0, #1
 80130a2:	f43f ae74 	beq.w	8012d8e <_printf_float+0xc2>
 80130a6:	ee18 3a10 	vmov	r3, s16
 80130aa:	4652      	mov	r2, sl
 80130ac:	4631      	mov	r1, r6
 80130ae:	4628      	mov	r0, r5
 80130b0:	47b8      	blx	r7
 80130b2:	3001      	adds	r0, #1
 80130b4:	f43f ae6b 	beq.w	8012d8e <_printf_float+0xc2>
 80130b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80130bc:	2200      	movs	r2, #0
 80130be:	2300      	movs	r3, #0
 80130c0:	f7ed fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80130c4:	b9d8      	cbnz	r0, 80130fe <_printf_float+0x432>
 80130c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130c8:	f108 0201 	add.w	r2, r8, #1
 80130cc:	3b01      	subs	r3, #1
 80130ce:	4631      	mov	r1, r6
 80130d0:	4628      	mov	r0, r5
 80130d2:	47b8      	blx	r7
 80130d4:	3001      	adds	r0, #1
 80130d6:	d10e      	bne.n	80130f6 <_printf_float+0x42a>
 80130d8:	e659      	b.n	8012d8e <_printf_float+0xc2>
 80130da:	2301      	movs	r3, #1
 80130dc:	4652      	mov	r2, sl
 80130de:	4631      	mov	r1, r6
 80130e0:	4628      	mov	r0, r5
 80130e2:	47b8      	blx	r7
 80130e4:	3001      	adds	r0, #1
 80130e6:	f43f ae52 	beq.w	8012d8e <_printf_float+0xc2>
 80130ea:	f108 0801 	add.w	r8, r8, #1
 80130ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80130f0:	3b01      	subs	r3, #1
 80130f2:	4543      	cmp	r3, r8
 80130f4:	dcf1      	bgt.n	80130da <_printf_float+0x40e>
 80130f6:	464b      	mov	r3, r9
 80130f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80130fc:	e6dc      	b.n	8012eb8 <_printf_float+0x1ec>
 80130fe:	f04f 0800 	mov.w	r8, #0
 8013102:	f104 0a1a 	add.w	sl, r4, #26
 8013106:	e7f2      	b.n	80130ee <_printf_float+0x422>
 8013108:	2301      	movs	r3, #1
 801310a:	4642      	mov	r2, r8
 801310c:	e7df      	b.n	80130ce <_printf_float+0x402>
 801310e:	2301      	movs	r3, #1
 8013110:	464a      	mov	r2, r9
 8013112:	4631      	mov	r1, r6
 8013114:	4628      	mov	r0, r5
 8013116:	47b8      	blx	r7
 8013118:	3001      	adds	r0, #1
 801311a:	f43f ae38 	beq.w	8012d8e <_printf_float+0xc2>
 801311e:	f108 0801 	add.w	r8, r8, #1
 8013122:	68e3      	ldr	r3, [r4, #12]
 8013124:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8013126:	1a5b      	subs	r3, r3, r1
 8013128:	4543      	cmp	r3, r8
 801312a:	dcf0      	bgt.n	801310e <_printf_float+0x442>
 801312c:	e6fa      	b.n	8012f24 <_printf_float+0x258>
 801312e:	f04f 0800 	mov.w	r8, #0
 8013132:	f104 0919 	add.w	r9, r4, #25
 8013136:	e7f4      	b.n	8013122 <_printf_float+0x456>

08013138 <_printf_common>:
 8013138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801313c:	4616      	mov	r6, r2
 801313e:	4699      	mov	r9, r3
 8013140:	688a      	ldr	r2, [r1, #8]
 8013142:	690b      	ldr	r3, [r1, #16]
 8013144:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013148:	4293      	cmp	r3, r2
 801314a:	bfb8      	it	lt
 801314c:	4613      	movlt	r3, r2
 801314e:	6033      	str	r3, [r6, #0]
 8013150:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013154:	4607      	mov	r7, r0
 8013156:	460c      	mov	r4, r1
 8013158:	b10a      	cbz	r2, 801315e <_printf_common+0x26>
 801315a:	3301      	adds	r3, #1
 801315c:	6033      	str	r3, [r6, #0]
 801315e:	6823      	ldr	r3, [r4, #0]
 8013160:	0699      	lsls	r1, r3, #26
 8013162:	bf42      	ittt	mi
 8013164:	6833      	ldrmi	r3, [r6, #0]
 8013166:	3302      	addmi	r3, #2
 8013168:	6033      	strmi	r3, [r6, #0]
 801316a:	6825      	ldr	r5, [r4, #0]
 801316c:	f015 0506 	ands.w	r5, r5, #6
 8013170:	d106      	bne.n	8013180 <_printf_common+0x48>
 8013172:	f104 0a19 	add.w	sl, r4, #25
 8013176:	68e3      	ldr	r3, [r4, #12]
 8013178:	6832      	ldr	r2, [r6, #0]
 801317a:	1a9b      	subs	r3, r3, r2
 801317c:	42ab      	cmp	r3, r5
 801317e:	dc26      	bgt.n	80131ce <_printf_common+0x96>
 8013180:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013184:	1e13      	subs	r3, r2, #0
 8013186:	6822      	ldr	r2, [r4, #0]
 8013188:	bf18      	it	ne
 801318a:	2301      	movne	r3, #1
 801318c:	0692      	lsls	r2, r2, #26
 801318e:	d42b      	bmi.n	80131e8 <_printf_common+0xb0>
 8013190:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013194:	4649      	mov	r1, r9
 8013196:	4638      	mov	r0, r7
 8013198:	47c0      	blx	r8
 801319a:	3001      	adds	r0, #1
 801319c:	d01e      	beq.n	80131dc <_printf_common+0xa4>
 801319e:	6823      	ldr	r3, [r4, #0]
 80131a0:	68e5      	ldr	r5, [r4, #12]
 80131a2:	6832      	ldr	r2, [r6, #0]
 80131a4:	f003 0306 	and.w	r3, r3, #6
 80131a8:	2b04      	cmp	r3, #4
 80131aa:	bf08      	it	eq
 80131ac:	1aad      	subeq	r5, r5, r2
 80131ae:	68a3      	ldr	r3, [r4, #8]
 80131b0:	6922      	ldr	r2, [r4, #16]
 80131b2:	bf0c      	ite	eq
 80131b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80131b8:	2500      	movne	r5, #0
 80131ba:	4293      	cmp	r3, r2
 80131bc:	bfc4      	itt	gt
 80131be:	1a9b      	subgt	r3, r3, r2
 80131c0:	18ed      	addgt	r5, r5, r3
 80131c2:	2600      	movs	r6, #0
 80131c4:	341a      	adds	r4, #26
 80131c6:	42b5      	cmp	r5, r6
 80131c8:	d11a      	bne.n	8013200 <_printf_common+0xc8>
 80131ca:	2000      	movs	r0, #0
 80131cc:	e008      	b.n	80131e0 <_printf_common+0xa8>
 80131ce:	2301      	movs	r3, #1
 80131d0:	4652      	mov	r2, sl
 80131d2:	4649      	mov	r1, r9
 80131d4:	4638      	mov	r0, r7
 80131d6:	47c0      	blx	r8
 80131d8:	3001      	adds	r0, #1
 80131da:	d103      	bne.n	80131e4 <_printf_common+0xac>
 80131dc:	f04f 30ff 	mov.w	r0, #4294967295
 80131e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80131e4:	3501      	adds	r5, #1
 80131e6:	e7c6      	b.n	8013176 <_printf_common+0x3e>
 80131e8:	18e1      	adds	r1, r4, r3
 80131ea:	1c5a      	adds	r2, r3, #1
 80131ec:	2030      	movs	r0, #48	; 0x30
 80131ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80131f2:	4422      	add	r2, r4
 80131f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80131f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80131fc:	3302      	adds	r3, #2
 80131fe:	e7c7      	b.n	8013190 <_printf_common+0x58>
 8013200:	2301      	movs	r3, #1
 8013202:	4622      	mov	r2, r4
 8013204:	4649      	mov	r1, r9
 8013206:	4638      	mov	r0, r7
 8013208:	47c0      	blx	r8
 801320a:	3001      	adds	r0, #1
 801320c:	d0e6      	beq.n	80131dc <_printf_common+0xa4>
 801320e:	3601      	adds	r6, #1
 8013210:	e7d9      	b.n	80131c6 <_printf_common+0x8e>
	...

08013214 <_printf_i>:
 8013214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013218:	460c      	mov	r4, r1
 801321a:	4691      	mov	r9, r2
 801321c:	7e27      	ldrb	r7, [r4, #24]
 801321e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013220:	2f78      	cmp	r7, #120	; 0x78
 8013222:	4680      	mov	r8, r0
 8013224:	469a      	mov	sl, r3
 8013226:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801322a:	d807      	bhi.n	801323c <_printf_i+0x28>
 801322c:	2f62      	cmp	r7, #98	; 0x62
 801322e:	d80a      	bhi.n	8013246 <_printf_i+0x32>
 8013230:	2f00      	cmp	r7, #0
 8013232:	f000 80d8 	beq.w	80133e6 <_printf_i+0x1d2>
 8013236:	2f58      	cmp	r7, #88	; 0x58
 8013238:	f000 80a3 	beq.w	8013382 <_printf_i+0x16e>
 801323c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013244:	e03a      	b.n	80132bc <_printf_i+0xa8>
 8013246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801324a:	2b15      	cmp	r3, #21
 801324c:	d8f6      	bhi.n	801323c <_printf_i+0x28>
 801324e:	a001      	add	r0, pc, #4	; (adr r0, 8013254 <_printf_i+0x40>)
 8013250:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8013254:	080132ad 	.word	0x080132ad
 8013258:	080132c1 	.word	0x080132c1
 801325c:	0801323d 	.word	0x0801323d
 8013260:	0801323d 	.word	0x0801323d
 8013264:	0801323d 	.word	0x0801323d
 8013268:	0801323d 	.word	0x0801323d
 801326c:	080132c1 	.word	0x080132c1
 8013270:	0801323d 	.word	0x0801323d
 8013274:	0801323d 	.word	0x0801323d
 8013278:	0801323d 	.word	0x0801323d
 801327c:	0801323d 	.word	0x0801323d
 8013280:	080133cd 	.word	0x080133cd
 8013284:	080132f1 	.word	0x080132f1
 8013288:	080133af 	.word	0x080133af
 801328c:	0801323d 	.word	0x0801323d
 8013290:	0801323d 	.word	0x0801323d
 8013294:	080133ef 	.word	0x080133ef
 8013298:	0801323d 	.word	0x0801323d
 801329c:	080132f1 	.word	0x080132f1
 80132a0:	0801323d 	.word	0x0801323d
 80132a4:	0801323d 	.word	0x0801323d
 80132a8:	080133b7 	.word	0x080133b7
 80132ac:	680b      	ldr	r3, [r1, #0]
 80132ae:	1d1a      	adds	r2, r3, #4
 80132b0:	681b      	ldr	r3, [r3, #0]
 80132b2:	600a      	str	r2, [r1, #0]
 80132b4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80132b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80132bc:	2301      	movs	r3, #1
 80132be:	e0a3      	b.n	8013408 <_printf_i+0x1f4>
 80132c0:	6825      	ldr	r5, [r4, #0]
 80132c2:	6808      	ldr	r0, [r1, #0]
 80132c4:	062e      	lsls	r6, r5, #24
 80132c6:	f100 0304 	add.w	r3, r0, #4
 80132ca:	d50a      	bpl.n	80132e2 <_printf_i+0xce>
 80132cc:	6805      	ldr	r5, [r0, #0]
 80132ce:	600b      	str	r3, [r1, #0]
 80132d0:	2d00      	cmp	r5, #0
 80132d2:	da03      	bge.n	80132dc <_printf_i+0xc8>
 80132d4:	232d      	movs	r3, #45	; 0x2d
 80132d6:	426d      	negs	r5, r5
 80132d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132dc:	485e      	ldr	r0, [pc, #376]	; (8013458 <_printf_i+0x244>)
 80132de:	230a      	movs	r3, #10
 80132e0:	e019      	b.n	8013316 <_printf_i+0x102>
 80132e2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80132e6:	6805      	ldr	r5, [r0, #0]
 80132e8:	600b      	str	r3, [r1, #0]
 80132ea:	bf18      	it	ne
 80132ec:	b22d      	sxthne	r5, r5
 80132ee:	e7ef      	b.n	80132d0 <_printf_i+0xbc>
 80132f0:	680b      	ldr	r3, [r1, #0]
 80132f2:	6825      	ldr	r5, [r4, #0]
 80132f4:	1d18      	adds	r0, r3, #4
 80132f6:	6008      	str	r0, [r1, #0]
 80132f8:	0628      	lsls	r0, r5, #24
 80132fa:	d501      	bpl.n	8013300 <_printf_i+0xec>
 80132fc:	681d      	ldr	r5, [r3, #0]
 80132fe:	e002      	b.n	8013306 <_printf_i+0xf2>
 8013300:	0669      	lsls	r1, r5, #25
 8013302:	d5fb      	bpl.n	80132fc <_printf_i+0xe8>
 8013304:	881d      	ldrh	r5, [r3, #0]
 8013306:	4854      	ldr	r0, [pc, #336]	; (8013458 <_printf_i+0x244>)
 8013308:	2f6f      	cmp	r7, #111	; 0x6f
 801330a:	bf0c      	ite	eq
 801330c:	2308      	moveq	r3, #8
 801330e:	230a      	movne	r3, #10
 8013310:	2100      	movs	r1, #0
 8013312:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013316:	6866      	ldr	r6, [r4, #4]
 8013318:	60a6      	str	r6, [r4, #8]
 801331a:	2e00      	cmp	r6, #0
 801331c:	bfa2      	ittt	ge
 801331e:	6821      	ldrge	r1, [r4, #0]
 8013320:	f021 0104 	bicge.w	r1, r1, #4
 8013324:	6021      	strge	r1, [r4, #0]
 8013326:	b90d      	cbnz	r5, 801332c <_printf_i+0x118>
 8013328:	2e00      	cmp	r6, #0
 801332a:	d04d      	beq.n	80133c8 <_printf_i+0x1b4>
 801332c:	4616      	mov	r6, r2
 801332e:	fbb5 f1f3 	udiv	r1, r5, r3
 8013332:	fb03 5711 	mls	r7, r3, r1, r5
 8013336:	5dc7      	ldrb	r7, [r0, r7]
 8013338:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801333c:	462f      	mov	r7, r5
 801333e:	42bb      	cmp	r3, r7
 8013340:	460d      	mov	r5, r1
 8013342:	d9f4      	bls.n	801332e <_printf_i+0x11a>
 8013344:	2b08      	cmp	r3, #8
 8013346:	d10b      	bne.n	8013360 <_printf_i+0x14c>
 8013348:	6823      	ldr	r3, [r4, #0]
 801334a:	07df      	lsls	r7, r3, #31
 801334c:	d508      	bpl.n	8013360 <_printf_i+0x14c>
 801334e:	6923      	ldr	r3, [r4, #16]
 8013350:	6861      	ldr	r1, [r4, #4]
 8013352:	4299      	cmp	r1, r3
 8013354:	bfde      	ittt	le
 8013356:	2330      	movle	r3, #48	; 0x30
 8013358:	f806 3c01 	strble.w	r3, [r6, #-1]
 801335c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013360:	1b92      	subs	r2, r2, r6
 8013362:	6122      	str	r2, [r4, #16]
 8013364:	f8cd a000 	str.w	sl, [sp]
 8013368:	464b      	mov	r3, r9
 801336a:	aa03      	add	r2, sp, #12
 801336c:	4621      	mov	r1, r4
 801336e:	4640      	mov	r0, r8
 8013370:	f7ff fee2 	bl	8013138 <_printf_common>
 8013374:	3001      	adds	r0, #1
 8013376:	d14c      	bne.n	8013412 <_printf_i+0x1fe>
 8013378:	f04f 30ff 	mov.w	r0, #4294967295
 801337c:	b004      	add	sp, #16
 801337e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013382:	4835      	ldr	r0, [pc, #212]	; (8013458 <_printf_i+0x244>)
 8013384:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013388:	6823      	ldr	r3, [r4, #0]
 801338a:	680e      	ldr	r6, [r1, #0]
 801338c:	061f      	lsls	r7, r3, #24
 801338e:	f856 5b04 	ldr.w	r5, [r6], #4
 8013392:	600e      	str	r6, [r1, #0]
 8013394:	d514      	bpl.n	80133c0 <_printf_i+0x1ac>
 8013396:	07d9      	lsls	r1, r3, #31
 8013398:	bf44      	itt	mi
 801339a:	f043 0320 	orrmi.w	r3, r3, #32
 801339e:	6023      	strmi	r3, [r4, #0]
 80133a0:	b91d      	cbnz	r5, 80133aa <_printf_i+0x196>
 80133a2:	6823      	ldr	r3, [r4, #0]
 80133a4:	f023 0320 	bic.w	r3, r3, #32
 80133a8:	6023      	str	r3, [r4, #0]
 80133aa:	2310      	movs	r3, #16
 80133ac:	e7b0      	b.n	8013310 <_printf_i+0xfc>
 80133ae:	6823      	ldr	r3, [r4, #0]
 80133b0:	f043 0320 	orr.w	r3, r3, #32
 80133b4:	6023      	str	r3, [r4, #0]
 80133b6:	2378      	movs	r3, #120	; 0x78
 80133b8:	4828      	ldr	r0, [pc, #160]	; (801345c <_printf_i+0x248>)
 80133ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80133be:	e7e3      	b.n	8013388 <_printf_i+0x174>
 80133c0:	065e      	lsls	r6, r3, #25
 80133c2:	bf48      	it	mi
 80133c4:	b2ad      	uxthmi	r5, r5
 80133c6:	e7e6      	b.n	8013396 <_printf_i+0x182>
 80133c8:	4616      	mov	r6, r2
 80133ca:	e7bb      	b.n	8013344 <_printf_i+0x130>
 80133cc:	680b      	ldr	r3, [r1, #0]
 80133ce:	6826      	ldr	r6, [r4, #0]
 80133d0:	6960      	ldr	r0, [r4, #20]
 80133d2:	1d1d      	adds	r5, r3, #4
 80133d4:	600d      	str	r5, [r1, #0]
 80133d6:	0635      	lsls	r5, r6, #24
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	d501      	bpl.n	80133e0 <_printf_i+0x1cc>
 80133dc:	6018      	str	r0, [r3, #0]
 80133de:	e002      	b.n	80133e6 <_printf_i+0x1d2>
 80133e0:	0671      	lsls	r1, r6, #25
 80133e2:	d5fb      	bpl.n	80133dc <_printf_i+0x1c8>
 80133e4:	8018      	strh	r0, [r3, #0]
 80133e6:	2300      	movs	r3, #0
 80133e8:	6123      	str	r3, [r4, #16]
 80133ea:	4616      	mov	r6, r2
 80133ec:	e7ba      	b.n	8013364 <_printf_i+0x150>
 80133ee:	680b      	ldr	r3, [r1, #0]
 80133f0:	1d1a      	adds	r2, r3, #4
 80133f2:	600a      	str	r2, [r1, #0]
 80133f4:	681e      	ldr	r6, [r3, #0]
 80133f6:	6862      	ldr	r2, [r4, #4]
 80133f8:	2100      	movs	r1, #0
 80133fa:	4630      	mov	r0, r6
 80133fc:	f7ec fef0 	bl	80001e0 <memchr>
 8013400:	b108      	cbz	r0, 8013406 <_printf_i+0x1f2>
 8013402:	1b80      	subs	r0, r0, r6
 8013404:	6060      	str	r0, [r4, #4]
 8013406:	6863      	ldr	r3, [r4, #4]
 8013408:	6123      	str	r3, [r4, #16]
 801340a:	2300      	movs	r3, #0
 801340c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013410:	e7a8      	b.n	8013364 <_printf_i+0x150>
 8013412:	6923      	ldr	r3, [r4, #16]
 8013414:	4632      	mov	r2, r6
 8013416:	4649      	mov	r1, r9
 8013418:	4640      	mov	r0, r8
 801341a:	47d0      	blx	sl
 801341c:	3001      	adds	r0, #1
 801341e:	d0ab      	beq.n	8013378 <_printf_i+0x164>
 8013420:	6823      	ldr	r3, [r4, #0]
 8013422:	079b      	lsls	r3, r3, #30
 8013424:	d413      	bmi.n	801344e <_printf_i+0x23a>
 8013426:	68e0      	ldr	r0, [r4, #12]
 8013428:	9b03      	ldr	r3, [sp, #12]
 801342a:	4298      	cmp	r0, r3
 801342c:	bfb8      	it	lt
 801342e:	4618      	movlt	r0, r3
 8013430:	e7a4      	b.n	801337c <_printf_i+0x168>
 8013432:	2301      	movs	r3, #1
 8013434:	4632      	mov	r2, r6
 8013436:	4649      	mov	r1, r9
 8013438:	4640      	mov	r0, r8
 801343a:	47d0      	blx	sl
 801343c:	3001      	adds	r0, #1
 801343e:	d09b      	beq.n	8013378 <_printf_i+0x164>
 8013440:	3501      	adds	r5, #1
 8013442:	68e3      	ldr	r3, [r4, #12]
 8013444:	9903      	ldr	r1, [sp, #12]
 8013446:	1a5b      	subs	r3, r3, r1
 8013448:	42ab      	cmp	r3, r5
 801344a:	dcf2      	bgt.n	8013432 <_printf_i+0x21e>
 801344c:	e7eb      	b.n	8013426 <_printf_i+0x212>
 801344e:	2500      	movs	r5, #0
 8013450:	f104 0619 	add.w	r6, r4, #25
 8013454:	e7f5      	b.n	8013442 <_printf_i+0x22e>
 8013456:	bf00      	nop
 8013458:	0801684a 	.word	0x0801684a
 801345c:	0801685b 	.word	0x0801685b

08013460 <iprintf>:
 8013460:	b40f      	push	{r0, r1, r2, r3}
 8013462:	4b0a      	ldr	r3, [pc, #40]	; (801348c <iprintf+0x2c>)
 8013464:	b513      	push	{r0, r1, r4, lr}
 8013466:	681c      	ldr	r4, [r3, #0]
 8013468:	b124      	cbz	r4, 8013474 <iprintf+0x14>
 801346a:	69a3      	ldr	r3, [r4, #24]
 801346c:	b913      	cbnz	r3, 8013474 <iprintf+0x14>
 801346e:	4620      	mov	r0, r4
 8013470:	f001 f914 	bl	801469c <__sinit>
 8013474:	ab05      	add	r3, sp, #20
 8013476:	9a04      	ldr	r2, [sp, #16]
 8013478:	68a1      	ldr	r1, [r4, #8]
 801347a:	9301      	str	r3, [sp, #4]
 801347c:	4620      	mov	r0, r4
 801347e:	f001 ffdd 	bl	801543c <_vfiprintf_r>
 8013482:	b002      	add	sp, #8
 8013484:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013488:	b004      	add	sp, #16
 801348a:	4770      	bx	lr
 801348c:	20000930 	.word	0x20000930

08013490 <_puts_r>:
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	460e      	mov	r6, r1
 8013494:	4605      	mov	r5, r0
 8013496:	b118      	cbz	r0, 80134a0 <_puts_r+0x10>
 8013498:	6983      	ldr	r3, [r0, #24]
 801349a:	b90b      	cbnz	r3, 80134a0 <_puts_r+0x10>
 801349c:	f001 f8fe 	bl	801469c <__sinit>
 80134a0:	69ab      	ldr	r3, [r5, #24]
 80134a2:	68ac      	ldr	r4, [r5, #8]
 80134a4:	b913      	cbnz	r3, 80134ac <_puts_r+0x1c>
 80134a6:	4628      	mov	r0, r5
 80134a8:	f001 f8f8 	bl	801469c <__sinit>
 80134ac:	4b2c      	ldr	r3, [pc, #176]	; (8013560 <_puts_r+0xd0>)
 80134ae:	429c      	cmp	r4, r3
 80134b0:	d120      	bne.n	80134f4 <_puts_r+0x64>
 80134b2:	686c      	ldr	r4, [r5, #4]
 80134b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80134b6:	07db      	lsls	r3, r3, #31
 80134b8:	d405      	bmi.n	80134c6 <_puts_r+0x36>
 80134ba:	89a3      	ldrh	r3, [r4, #12]
 80134bc:	0598      	lsls	r0, r3, #22
 80134be:	d402      	bmi.n	80134c6 <_puts_r+0x36>
 80134c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80134c2:	f001 f98e 	bl	80147e2 <__retarget_lock_acquire_recursive>
 80134c6:	89a3      	ldrh	r3, [r4, #12]
 80134c8:	0719      	lsls	r1, r3, #28
 80134ca:	d51d      	bpl.n	8013508 <_puts_r+0x78>
 80134cc:	6923      	ldr	r3, [r4, #16]
 80134ce:	b1db      	cbz	r3, 8013508 <_puts_r+0x78>
 80134d0:	3e01      	subs	r6, #1
 80134d2:	68a3      	ldr	r3, [r4, #8]
 80134d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80134d8:	3b01      	subs	r3, #1
 80134da:	60a3      	str	r3, [r4, #8]
 80134dc:	bb39      	cbnz	r1, 801352e <_puts_r+0x9e>
 80134de:	2b00      	cmp	r3, #0
 80134e0:	da38      	bge.n	8013554 <_puts_r+0xc4>
 80134e2:	4622      	mov	r2, r4
 80134e4:	210a      	movs	r1, #10
 80134e6:	4628      	mov	r0, r5
 80134e8:	f000 f884 	bl	80135f4 <__swbuf_r>
 80134ec:	3001      	adds	r0, #1
 80134ee:	d011      	beq.n	8013514 <_puts_r+0x84>
 80134f0:	250a      	movs	r5, #10
 80134f2:	e011      	b.n	8013518 <_puts_r+0x88>
 80134f4:	4b1b      	ldr	r3, [pc, #108]	; (8013564 <_puts_r+0xd4>)
 80134f6:	429c      	cmp	r4, r3
 80134f8:	d101      	bne.n	80134fe <_puts_r+0x6e>
 80134fa:	68ac      	ldr	r4, [r5, #8]
 80134fc:	e7da      	b.n	80134b4 <_puts_r+0x24>
 80134fe:	4b1a      	ldr	r3, [pc, #104]	; (8013568 <_puts_r+0xd8>)
 8013500:	429c      	cmp	r4, r3
 8013502:	bf08      	it	eq
 8013504:	68ec      	ldreq	r4, [r5, #12]
 8013506:	e7d5      	b.n	80134b4 <_puts_r+0x24>
 8013508:	4621      	mov	r1, r4
 801350a:	4628      	mov	r0, r5
 801350c:	f000 f8c4 	bl	8013698 <__swsetup_r>
 8013510:	2800      	cmp	r0, #0
 8013512:	d0dd      	beq.n	80134d0 <_puts_r+0x40>
 8013514:	f04f 35ff 	mov.w	r5, #4294967295
 8013518:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801351a:	07da      	lsls	r2, r3, #31
 801351c:	d405      	bmi.n	801352a <_puts_r+0x9a>
 801351e:	89a3      	ldrh	r3, [r4, #12]
 8013520:	059b      	lsls	r3, r3, #22
 8013522:	d402      	bmi.n	801352a <_puts_r+0x9a>
 8013524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013526:	f001 f95d 	bl	80147e4 <__retarget_lock_release_recursive>
 801352a:	4628      	mov	r0, r5
 801352c:	bd70      	pop	{r4, r5, r6, pc}
 801352e:	2b00      	cmp	r3, #0
 8013530:	da04      	bge.n	801353c <_puts_r+0xac>
 8013532:	69a2      	ldr	r2, [r4, #24]
 8013534:	429a      	cmp	r2, r3
 8013536:	dc06      	bgt.n	8013546 <_puts_r+0xb6>
 8013538:	290a      	cmp	r1, #10
 801353a:	d004      	beq.n	8013546 <_puts_r+0xb6>
 801353c:	6823      	ldr	r3, [r4, #0]
 801353e:	1c5a      	adds	r2, r3, #1
 8013540:	6022      	str	r2, [r4, #0]
 8013542:	7019      	strb	r1, [r3, #0]
 8013544:	e7c5      	b.n	80134d2 <_puts_r+0x42>
 8013546:	4622      	mov	r2, r4
 8013548:	4628      	mov	r0, r5
 801354a:	f000 f853 	bl	80135f4 <__swbuf_r>
 801354e:	3001      	adds	r0, #1
 8013550:	d1bf      	bne.n	80134d2 <_puts_r+0x42>
 8013552:	e7df      	b.n	8013514 <_puts_r+0x84>
 8013554:	6823      	ldr	r3, [r4, #0]
 8013556:	250a      	movs	r5, #10
 8013558:	1c5a      	adds	r2, r3, #1
 801355a:	6022      	str	r2, [r4, #0]
 801355c:	701d      	strb	r5, [r3, #0]
 801355e:	e7db      	b.n	8013518 <_puts_r+0x88>
 8013560:	08016920 	.word	0x08016920
 8013564:	08016940 	.word	0x08016940
 8013568:	08016900 	.word	0x08016900

0801356c <puts>:
 801356c:	4b02      	ldr	r3, [pc, #8]	; (8013578 <puts+0xc>)
 801356e:	4601      	mov	r1, r0
 8013570:	6818      	ldr	r0, [r3, #0]
 8013572:	f7ff bf8d 	b.w	8013490 <_puts_r>
 8013576:	bf00      	nop
 8013578:	20000930 	.word	0x20000930

0801357c <sniprintf>:
 801357c:	b40c      	push	{r2, r3}
 801357e:	b530      	push	{r4, r5, lr}
 8013580:	4b17      	ldr	r3, [pc, #92]	; (80135e0 <sniprintf+0x64>)
 8013582:	1e0c      	subs	r4, r1, #0
 8013584:	681d      	ldr	r5, [r3, #0]
 8013586:	b09d      	sub	sp, #116	; 0x74
 8013588:	da08      	bge.n	801359c <sniprintf+0x20>
 801358a:	238b      	movs	r3, #139	; 0x8b
 801358c:	602b      	str	r3, [r5, #0]
 801358e:	f04f 30ff 	mov.w	r0, #4294967295
 8013592:	b01d      	add	sp, #116	; 0x74
 8013594:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013598:	b002      	add	sp, #8
 801359a:	4770      	bx	lr
 801359c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80135a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80135a4:	bf14      	ite	ne
 80135a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80135aa:	4623      	moveq	r3, r4
 80135ac:	9304      	str	r3, [sp, #16]
 80135ae:	9307      	str	r3, [sp, #28]
 80135b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80135b4:	9002      	str	r0, [sp, #8]
 80135b6:	9006      	str	r0, [sp, #24]
 80135b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80135bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80135be:	ab21      	add	r3, sp, #132	; 0x84
 80135c0:	a902      	add	r1, sp, #8
 80135c2:	4628      	mov	r0, r5
 80135c4:	9301      	str	r3, [sp, #4]
 80135c6:	f001 fe0f 	bl	80151e8 <_svfiprintf_r>
 80135ca:	1c43      	adds	r3, r0, #1
 80135cc:	bfbc      	itt	lt
 80135ce:	238b      	movlt	r3, #139	; 0x8b
 80135d0:	602b      	strlt	r3, [r5, #0]
 80135d2:	2c00      	cmp	r4, #0
 80135d4:	d0dd      	beq.n	8013592 <sniprintf+0x16>
 80135d6:	9b02      	ldr	r3, [sp, #8]
 80135d8:	2200      	movs	r2, #0
 80135da:	701a      	strb	r2, [r3, #0]
 80135dc:	e7d9      	b.n	8013592 <sniprintf+0x16>
 80135de:	bf00      	nop
 80135e0:	20000930 	.word	0x20000930

080135e4 <strcpy>:
 80135e4:	4603      	mov	r3, r0
 80135e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80135ea:	f803 2b01 	strb.w	r2, [r3], #1
 80135ee:	2a00      	cmp	r2, #0
 80135f0:	d1f9      	bne.n	80135e6 <strcpy+0x2>
 80135f2:	4770      	bx	lr

080135f4 <__swbuf_r>:
 80135f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135f6:	460e      	mov	r6, r1
 80135f8:	4614      	mov	r4, r2
 80135fa:	4605      	mov	r5, r0
 80135fc:	b118      	cbz	r0, 8013606 <__swbuf_r+0x12>
 80135fe:	6983      	ldr	r3, [r0, #24]
 8013600:	b90b      	cbnz	r3, 8013606 <__swbuf_r+0x12>
 8013602:	f001 f84b 	bl	801469c <__sinit>
 8013606:	4b21      	ldr	r3, [pc, #132]	; (801368c <__swbuf_r+0x98>)
 8013608:	429c      	cmp	r4, r3
 801360a:	d12b      	bne.n	8013664 <__swbuf_r+0x70>
 801360c:	686c      	ldr	r4, [r5, #4]
 801360e:	69a3      	ldr	r3, [r4, #24]
 8013610:	60a3      	str	r3, [r4, #8]
 8013612:	89a3      	ldrh	r3, [r4, #12]
 8013614:	071a      	lsls	r2, r3, #28
 8013616:	d52f      	bpl.n	8013678 <__swbuf_r+0x84>
 8013618:	6923      	ldr	r3, [r4, #16]
 801361a:	b36b      	cbz	r3, 8013678 <__swbuf_r+0x84>
 801361c:	6923      	ldr	r3, [r4, #16]
 801361e:	6820      	ldr	r0, [r4, #0]
 8013620:	1ac0      	subs	r0, r0, r3
 8013622:	6963      	ldr	r3, [r4, #20]
 8013624:	b2f6      	uxtb	r6, r6
 8013626:	4283      	cmp	r3, r0
 8013628:	4637      	mov	r7, r6
 801362a:	dc04      	bgt.n	8013636 <__swbuf_r+0x42>
 801362c:	4621      	mov	r1, r4
 801362e:	4628      	mov	r0, r5
 8013630:	f000 ffa0 	bl	8014574 <_fflush_r>
 8013634:	bb30      	cbnz	r0, 8013684 <__swbuf_r+0x90>
 8013636:	68a3      	ldr	r3, [r4, #8]
 8013638:	3b01      	subs	r3, #1
 801363a:	60a3      	str	r3, [r4, #8]
 801363c:	6823      	ldr	r3, [r4, #0]
 801363e:	1c5a      	adds	r2, r3, #1
 8013640:	6022      	str	r2, [r4, #0]
 8013642:	701e      	strb	r6, [r3, #0]
 8013644:	6963      	ldr	r3, [r4, #20]
 8013646:	3001      	adds	r0, #1
 8013648:	4283      	cmp	r3, r0
 801364a:	d004      	beq.n	8013656 <__swbuf_r+0x62>
 801364c:	89a3      	ldrh	r3, [r4, #12]
 801364e:	07db      	lsls	r3, r3, #31
 8013650:	d506      	bpl.n	8013660 <__swbuf_r+0x6c>
 8013652:	2e0a      	cmp	r6, #10
 8013654:	d104      	bne.n	8013660 <__swbuf_r+0x6c>
 8013656:	4621      	mov	r1, r4
 8013658:	4628      	mov	r0, r5
 801365a:	f000 ff8b 	bl	8014574 <_fflush_r>
 801365e:	b988      	cbnz	r0, 8013684 <__swbuf_r+0x90>
 8013660:	4638      	mov	r0, r7
 8013662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013664:	4b0a      	ldr	r3, [pc, #40]	; (8013690 <__swbuf_r+0x9c>)
 8013666:	429c      	cmp	r4, r3
 8013668:	d101      	bne.n	801366e <__swbuf_r+0x7a>
 801366a:	68ac      	ldr	r4, [r5, #8]
 801366c:	e7cf      	b.n	801360e <__swbuf_r+0x1a>
 801366e:	4b09      	ldr	r3, [pc, #36]	; (8013694 <__swbuf_r+0xa0>)
 8013670:	429c      	cmp	r4, r3
 8013672:	bf08      	it	eq
 8013674:	68ec      	ldreq	r4, [r5, #12]
 8013676:	e7ca      	b.n	801360e <__swbuf_r+0x1a>
 8013678:	4621      	mov	r1, r4
 801367a:	4628      	mov	r0, r5
 801367c:	f000 f80c 	bl	8013698 <__swsetup_r>
 8013680:	2800      	cmp	r0, #0
 8013682:	d0cb      	beq.n	801361c <__swbuf_r+0x28>
 8013684:	f04f 37ff 	mov.w	r7, #4294967295
 8013688:	e7ea      	b.n	8013660 <__swbuf_r+0x6c>
 801368a:	bf00      	nop
 801368c:	08016920 	.word	0x08016920
 8013690:	08016940 	.word	0x08016940
 8013694:	08016900 	.word	0x08016900

08013698 <__swsetup_r>:
 8013698:	4b32      	ldr	r3, [pc, #200]	; (8013764 <__swsetup_r+0xcc>)
 801369a:	b570      	push	{r4, r5, r6, lr}
 801369c:	681d      	ldr	r5, [r3, #0]
 801369e:	4606      	mov	r6, r0
 80136a0:	460c      	mov	r4, r1
 80136a2:	b125      	cbz	r5, 80136ae <__swsetup_r+0x16>
 80136a4:	69ab      	ldr	r3, [r5, #24]
 80136a6:	b913      	cbnz	r3, 80136ae <__swsetup_r+0x16>
 80136a8:	4628      	mov	r0, r5
 80136aa:	f000 fff7 	bl	801469c <__sinit>
 80136ae:	4b2e      	ldr	r3, [pc, #184]	; (8013768 <__swsetup_r+0xd0>)
 80136b0:	429c      	cmp	r4, r3
 80136b2:	d10f      	bne.n	80136d4 <__swsetup_r+0x3c>
 80136b4:	686c      	ldr	r4, [r5, #4]
 80136b6:	89a3      	ldrh	r3, [r4, #12]
 80136b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80136bc:	0719      	lsls	r1, r3, #28
 80136be:	d42c      	bmi.n	801371a <__swsetup_r+0x82>
 80136c0:	06dd      	lsls	r5, r3, #27
 80136c2:	d411      	bmi.n	80136e8 <__swsetup_r+0x50>
 80136c4:	2309      	movs	r3, #9
 80136c6:	6033      	str	r3, [r6, #0]
 80136c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80136cc:	81a3      	strh	r3, [r4, #12]
 80136ce:	f04f 30ff 	mov.w	r0, #4294967295
 80136d2:	e03e      	b.n	8013752 <__swsetup_r+0xba>
 80136d4:	4b25      	ldr	r3, [pc, #148]	; (801376c <__swsetup_r+0xd4>)
 80136d6:	429c      	cmp	r4, r3
 80136d8:	d101      	bne.n	80136de <__swsetup_r+0x46>
 80136da:	68ac      	ldr	r4, [r5, #8]
 80136dc:	e7eb      	b.n	80136b6 <__swsetup_r+0x1e>
 80136de:	4b24      	ldr	r3, [pc, #144]	; (8013770 <__swsetup_r+0xd8>)
 80136e0:	429c      	cmp	r4, r3
 80136e2:	bf08      	it	eq
 80136e4:	68ec      	ldreq	r4, [r5, #12]
 80136e6:	e7e6      	b.n	80136b6 <__swsetup_r+0x1e>
 80136e8:	0758      	lsls	r0, r3, #29
 80136ea:	d512      	bpl.n	8013712 <__swsetup_r+0x7a>
 80136ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80136ee:	b141      	cbz	r1, 8013702 <__swsetup_r+0x6a>
 80136f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80136f4:	4299      	cmp	r1, r3
 80136f6:	d002      	beq.n	80136fe <__swsetup_r+0x66>
 80136f8:	4630      	mov	r0, r6
 80136fa:	f001 fc6f 	bl	8014fdc <_free_r>
 80136fe:	2300      	movs	r3, #0
 8013700:	6363      	str	r3, [r4, #52]	; 0x34
 8013702:	89a3      	ldrh	r3, [r4, #12]
 8013704:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8013708:	81a3      	strh	r3, [r4, #12]
 801370a:	2300      	movs	r3, #0
 801370c:	6063      	str	r3, [r4, #4]
 801370e:	6923      	ldr	r3, [r4, #16]
 8013710:	6023      	str	r3, [r4, #0]
 8013712:	89a3      	ldrh	r3, [r4, #12]
 8013714:	f043 0308 	orr.w	r3, r3, #8
 8013718:	81a3      	strh	r3, [r4, #12]
 801371a:	6923      	ldr	r3, [r4, #16]
 801371c:	b94b      	cbnz	r3, 8013732 <__swsetup_r+0x9a>
 801371e:	89a3      	ldrh	r3, [r4, #12]
 8013720:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8013724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013728:	d003      	beq.n	8013732 <__swsetup_r+0x9a>
 801372a:	4621      	mov	r1, r4
 801372c:	4630      	mov	r0, r6
 801372e:	f001 f87f 	bl	8014830 <__smakebuf_r>
 8013732:	89a0      	ldrh	r0, [r4, #12]
 8013734:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8013738:	f010 0301 	ands.w	r3, r0, #1
 801373c:	d00a      	beq.n	8013754 <__swsetup_r+0xbc>
 801373e:	2300      	movs	r3, #0
 8013740:	60a3      	str	r3, [r4, #8]
 8013742:	6963      	ldr	r3, [r4, #20]
 8013744:	425b      	negs	r3, r3
 8013746:	61a3      	str	r3, [r4, #24]
 8013748:	6923      	ldr	r3, [r4, #16]
 801374a:	b943      	cbnz	r3, 801375e <__swsetup_r+0xc6>
 801374c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8013750:	d1ba      	bne.n	80136c8 <__swsetup_r+0x30>
 8013752:	bd70      	pop	{r4, r5, r6, pc}
 8013754:	0781      	lsls	r1, r0, #30
 8013756:	bf58      	it	pl
 8013758:	6963      	ldrpl	r3, [r4, #20]
 801375a:	60a3      	str	r3, [r4, #8]
 801375c:	e7f4      	b.n	8013748 <__swsetup_r+0xb0>
 801375e:	2000      	movs	r0, #0
 8013760:	e7f7      	b.n	8013752 <__swsetup_r+0xba>
 8013762:	bf00      	nop
 8013764:	20000930 	.word	0x20000930
 8013768:	08016920 	.word	0x08016920
 801376c:	08016940 	.word	0x08016940
 8013770:	08016900 	.word	0x08016900

08013774 <quorem>:
 8013774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013778:	6903      	ldr	r3, [r0, #16]
 801377a:	690c      	ldr	r4, [r1, #16]
 801377c:	42a3      	cmp	r3, r4
 801377e:	4607      	mov	r7, r0
 8013780:	f2c0 8081 	blt.w	8013886 <quorem+0x112>
 8013784:	3c01      	subs	r4, #1
 8013786:	f101 0814 	add.w	r8, r1, #20
 801378a:	f100 0514 	add.w	r5, r0, #20
 801378e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013792:	9301      	str	r3, [sp, #4]
 8013794:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8013798:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801379c:	3301      	adds	r3, #1
 801379e:	429a      	cmp	r2, r3
 80137a0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80137a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80137a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80137ac:	d331      	bcc.n	8013812 <quorem+0x9e>
 80137ae:	f04f 0e00 	mov.w	lr, #0
 80137b2:	4640      	mov	r0, r8
 80137b4:	46ac      	mov	ip, r5
 80137b6:	46f2      	mov	sl, lr
 80137b8:	f850 2b04 	ldr.w	r2, [r0], #4
 80137bc:	b293      	uxth	r3, r2
 80137be:	fb06 e303 	mla	r3, r6, r3, lr
 80137c2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	ebaa 0303 	sub.w	r3, sl, r3
 80137cc:	0c12      	lsrs	r2, r2, #16
 80137ce:	f8dc a000 	ldr.w	sl, [ip]
 80137d2:	fb06 e202 	mla	r2, r6, r2, lr
 80137d6:	fa13 f38a 	uxtah	r3, r3, sl
 80137da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80137de:	fa1f fa82 	uxth.w	sl, r2
 80137e2:	f8dc 2000 	ldr.w	r2, [ip]
 80137e6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80137ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80137ee:	b29b      	uxth	r3, r3
 80137f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80137f4:	4581      	cmp	r9, r0
 80137f6:	f84c 3b04 	str.w	r3, [ip], #4
 80137fa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80137fe:	d2db      	bcs.n	80137b8 <quorem+0x44>
 8013800:	f855 300b 	ldr.w	r3, [r5, fp]
 8013804:	b92b      	cbnz	r3, 8013812 <quorem+0x9e>
 8013806:	9b01      	ldr	r3, [sp, #4]
 8013808:	3b04      	subs	r3, #4
 801380a:	429d      	cmp	r5, r3
 801380c:	461a      	mov	r2, r3
 801380e:	d32e      	bcc.n	801386e <quorem+0xfa>
 8013810:	613c      	str	r4, [r7, #16]
 8013812:	4638      	mov	r0, r7
 8013814:	f001 fad2 	bl	8014dbc <__mcmp>
 8013818:	2800      	cmp	r0, #0
 801381a:	db24      	blt.n	8013866 <quorem+0xf2>
 801381c:	3601      	adds	r6, #1
 801381e:	4628      	mov	r0, r5
 8013820:	f04f 0c00 	mov.w	ip, #0
 8013824:	f858 2b04 	ldr.w	r2, [r8], #4
 8013828:	f8d0 e000 	ldr.w	lr, [r0]
 801382c:	b293      	uxth	r3, r2
 801382e:	ebac 0303 	sub.w	r3, ip, r3
 8013832:	0c12      	lsrs	r2, r2, #16
 8013834:	fa13 f38e 	uxtah	r3, r3, lr
 8013838:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801383c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013840:	b29b      	uxth	r3, r3
 8013842:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013846:	45c1      	cmp	r9, r8
 8013848:	f840 3b04 	str.w	r3, [r0], #4
 801384c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013850:	d2e8      	bcs.n	8013824 <quorem+0xb0>
 8013852:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013856:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801385a:	b922      	cbnz	r2, 8013866 <quorem+0xf2>
 801385c:	3b04      	subs	r3, #4
 801385e:	429d      	cmp	r5, r3
 8013860:	461a      	mov	r2, r3
 8013862:	d30a      	bcc.n	801387a <quorem+0x106>
 8013864:	613c      	str	r4, [r7, #16]
 8013866:	4630      	mov	r0, r6
 8013868:	b003      	add	sp, #12
 801386a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801386e:	6812      	ldr	r2, [r2, #0]
 8013870:	3b04      	subs	r3, #4
 8013872:	2a00      	cmp	r2, #0
 8013874:	d1cc      	bne.n	8013810 <quorem+0x9c>
 8013876:	3c01      	subs	r4, #1
 8013878:	e7c7      	b.n	801380a <quorem+0x96>
 801387a:	6812      	ldr	r2, [r2, #0]
 801387c:	3b04      	subs	r3, #4
 801387e:	2a00      	cmp	r2, #0
 8013880:	d1f0      	bne.n	8013864 <quorem+0xf0>
 8013882:	3c01      	subs	r4, #1
 8013884:	e7eb      	b.n	801385e <quorem+0xea>
 8013886:	2000      	movs	r0, #0
 8013888:	e7ee      	b.n	8013868 <quorem+0xf4>
 801388a:	0000      	movs	r0, r0
 801388c:	0000      	movs	r0, r0
	...

08013890 <_dtoa_r>:
 8013890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013894:	ed2d 8b02 	vpush	{d8}
 8013898:	ec57 6b10 	vmov	r6, r7, d0
 801389c:	b095      	sub	sp, #84	; 0x54
 801389e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80138a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80138a4:	9105      	str	r1, [sp, #20]
 80138a6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80138aa:	4604      	mov	r4, r0
 80138ac:	9209      	str	r2, [sp, #36]	; 0x24
 80138ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80138b0:	b975      	cbnz	r5, 80138d0 <_dtoa_r+0x40>
 80138b2:	2010      	movs	r0, #16
 80138b4:	f000 fffc 	bl	80148b0 <malloc>
 80138b8:	4602      	mov	r2, r0
 80138ba:	6260      	str	r0, [r4, #36]	; 0x24
 80138bc:	b920      	cbnz	r0, 80138c8 <_dtoa_r+0x38>
 80138be:	4bb2      	ldr	r3, [pc, #712]	; (8013b88 <_dtoa_r+0x2f8>)
 80138c0:	21ea      	movs	r1, #234	; 0xea
 80138c2:	48b2      	ldr	r0, [pc, #712]	; (8013b8c <_dtoa_r+0x2fc>)
 80138c4:	f001 ff50 	bl	8015768 <__assert_func>
 80138c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80138cc:	6005      	str	r5, [r0, #0]
 80138ce:	60c5      	str	r5, [r0, #12]
 80138d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138d2:	6819      	ldr	r1, [r3, #0]
 80138d4:	b151      	cbz	r1, 80138ec <_dtoa_r+0x5c>
 80138d6:	685a      	ldr	r2, [r3, #4]
 80138d8:	604a      	str	r2, [r1, #4]
 80138da:	2301      	movs	r3, #1
 80138dc:	4093      	lsls	r3, r2
 80138de:	608b      	str	r3, [r1, #8]
 80138e0:	4620      	mov	r0, r4
 80138e2:	f001 f82d 	bl	8014940 <_Bfree>
 80138e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80138e8:	2200      	movs	r2, #0
 80138ea:	601a      	str	r2, [r3, #0]
 80138ec:	1e3b      	subs	r3, r7, #0
 80138ee:	bfb9      	ittee	lt
 80138f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80138f4:	9303      	strlt	r3, [sp, #12]
 80138f6:	2300      	movge	r3, #0
 80138f8:	f8c8 3000 	strge.w	r3, [r8]
 80138fc:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013900:	4ba3      	ldr	r3, [pc, #652]	; (8013b90 <_dtoa_r+0x300>)
 8013902:	bfbc      	itt	lt
 8013904:	2201      	movlt	r2, #1
 8013906:	f8c8 2000 	strlt.w	r2, [r8]
 801390a:	ea33 0309 	bics.w	r3, r3, r9
 801390e:	d11b      	bne.n	8013948 <_dtoa_r+0xb8>
 8013910:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013912:	f242 730f 	movw	r3, #9999	; 0x270f
 8013916:	6013      	str	r3, [r2, #0]
 8013918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801391c:	4333      	orrs	r3, r6
 801391e:	f000 857a 	beq.w	8014416 <_dtoa_r+0xb86>
 8013922:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013924:	b963      	cbnz	r3, 8013940 <_dtoa_r+0xb0>
 8013926:	4b9b      	ldr	r3, [pc, #620]	; (8013b94 <_dtoa_r+0x304>)
 8013928:	e024      	b.n	8013974 <_dtoa_r+0xe4>
 801392a:	4b9b      	ldr	r3, [pc, #620]	; (8013b98 <_dtoa_r+0x308>)
 801392c:	9300      	str	r3, [sp, #0]
 801392e:	3308      	adds	r3, #8
 8013930:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8013932:	6013      	str	r3, [r2, #0]
 8013934:	9800      	ldr	r0, [sp, #0]
 8013936:	b015      	add	sp, #84	; 0x54
 8013938:	ecbd 8b02 	vpop	{d8}
 801393c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013940:	4b94      	ldr	r3, [pc, #592]	; (8013b94 <_dtoa_r+0x304>)
 8013942:	9300      	str	r3, [sp, #0]
 8013944:	3303      	adds	r3, #3
 8013946:	e7f3      	b.n	8013930 <_dtoa_r+0xa0>
 8013948:	ed9d 7b02 	vldr	d7, [sp, #8]
 801394c:	2200      	movs	r2, #0
 801394e:	ec51 0b17 	vmov	r0, r1, d7
 8013952:	2300      	movs	r3, #0
 8013954:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8013958:	f7ed f8b6 	bl	8000ac8 <__aeabi_dcmpeq>
 801395c:	4680      	mov	r8, r0
 801395e:	b158      	cbz	r0, 8013978 <_dtoa_r+0xe8>
 8013960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8013962:	2301      	movs	r3, #1
 8013964:	6013      	str	r3, [r2, #0]
 8013966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013968:	2b00      	cmp	r3, #0
 801396a:	f000 8551 	beq.w	8014410 <_dtoa_r+0xb80>
 801396e:	488b      	ldr	r0, [pc, #556]	; (8013b9c <_dtoa_r+0x30c>)
 8013970:	6018      	str	r0, [r3, #0]
 8013972:	1e43      	subs	r3, r0, #1
 8013974:	9300      	str	r3, [sp, #0]
 8013976:	e7dd      	b.n	8013934 <_dtoa_r+0xa4>
 8013978:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801397c:	aa12      	add	r2, sp, #72	; 0x48
 801397e:	a913      	add	r1, sp, #76	; 0x4c
 8013980:	4620      	mov	r0, r4
 8013982:	f001 fabf 	bl	8014f04 <__d2b>
 8013986:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801398a:	4683      	mov	fp, r0
 801398c:	2d00      	cmp	r5, #0
 801398e:	d07c      	beq.n	8013a8a <_dtoa_r+0x1fa>
 8013990:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013992:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8013996:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801399a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801399e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80139a2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80139a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80139aa:	4b7d      	ldr	r3, [pc, #500]	; (8013ba0 <_dtoa_r+0x310>)
 80139ac:	2200      	movs	r2, #0
 80139ae:	4630      	mov	r0, r6
 80139b0:	4639      	mov	r1, r7
 80139b2:	f7ec fc69 	bl	8000288 <__aeabi_dsub>
 80139b6:	a36e      	add	r3, pc, #440	; (adr r3, 8013b70 <_dtoa_r+0x2e0>)
 80139b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139bc:	f7ec fe1c 	bl	80005f8 <__aeabi_dmul>
 80139c0:	a36d      	add	r3, pc, #436	; (adr r3, 8013b78 <_dtoa_r+0x2e8>)
 80139c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139c6:	f7ec fc61 	bl	800028c <__adddf3>
 80139ca:	4606      	mov	r6, r0
 80139cc:	4628      	mov	r0, r5
 80139ce:	460f      	mov	r7, r1
 80139d0:	f7ec fda8 	bl	8000524 <__aeabi_i2d>
 80139d4:	a36a      	add	r3, pc, #424	; (adr r3, 8013b80 <_dtoa_r+0x2f0>)
 80139d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80139da:	f7ec fe0d 	bl	80005f8 <__aeabi_dmul>
 80139de:	4602      	mov	r2, r0
 80139e0:	460b      	mov	r3, r1
 80139e2:	4630      	mov	r0, r6
 80139e4:	4639      	mov	r1, r7
 80139e6:	f7ec fc51 	bl	800028c <__adddf3>
 80139ea:	4606      	mov	r6, r0
 80139ec:	460f      	mov	r7, r1
 80139ee:	f7ed f8b3 	bl	8000b58 <__aeabi_d2iz>
 80139f2:	2200      	movs	r2, #0
 80139f4:	4682      	mov	sl, r0
 80139f6:	2300      	movs	r3, #0
 80139f8:	4630      	mov	r0, r6
 80139fa:	4639      	mov	r1, r7
 80139fc:	f7ed f86e 	bl	8000adc <__aeabi_dcmplt>
 8013a00:	b148      	cbz	r0, 8013a16 <_dtoa_r+0x186>
 8013a02:	4650      	mov	r0, sl
 8013a04:	f7ec fd8e 	bl	8000524 <__aeabi_i2d>
 8013a08:	4632      	mov	r2, r6
 8013a0a:	463b      	mov	r3, r7
 8013a0c:	f7ed f85c 	bl	8000ac8 <__aeabi_dcmpeq>
 8013a10:	b908      	cbnz	r0, 8013a16 <_dtoa_r+0x186>
 8013a12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a16:	f1ba 0f16 	cmp.w	sl, #22
 8013a1a:	d854      	bhi.n	8013ac6 <_dtoa_r+0x236>
 8013a1c:	4b61      	ldr	r3, [pc, #388]	; (8013ba4 <_dtoa_r+0x314>)
 8013a1e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013a26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013a2a:	f7ed f857 	bl	8000adc <__aeabi_dcmplt>
 8013a2e:	2800      	cmp	r0, #0
 8013a30:	d04b      	beq.n	8013aca <_dtoa_r+0x23a>
 8013a32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8013a36:	2300      	movs	r3, #0
 8013a38:	930e      	str	r3, [sp, #56]	; 0x38
 8013a3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8013a3c:	1b5d      	subs	r5, r3, r5
 8013a3e:	1e6b      	subs	r3, r5, #1
 8013a40:	9304      	str	r3, [sp, #16]
 8013a42:	bf43      	ittte	mi
 8013a44:	2300      	movmi	r3, #0
 8013a46:	f1c5 0801 	rsbmi	r8, r5, #1
 8013a4a:	9304      	strmi	r3, [sp, #16]
 8013a4c:	f04f 0800 	movpl.w	r8, #0
 8013a50:	f1ba 0f00 	cmp.w	sl, #0
 8013a54:	db3b      	blt.n	8013ace <_dtoa_r+0x23e>
 8013a56:	9b04      	ldr	r3, [sp, #16]
 8013a58:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8013a5c:	4453      	add	r3, sl
 8013a5e:	9304      	str	r3, [sp, #16]
 8013a60:	2300      	movs	r3, #0
 8013a62:	9306      	str	r3, [sp, #24]
 8013a64:	9b05      	ldr	r3, [sp, #20]
 8013a66:	2b09      	cmp	r3, #9
 8013a68:	d869      	bhi.n	8013b3e <_dtoa_r+0x2ae>
 8013a6a:	2b05      	cmp	r3, #5
 8013a6c:	bfc4      	itt	gt
 8013a6e:	3b04      	subgt	r3, #4
 8013a70:	9305      	strgt	r3, [sp, #20]
 8013a72:	9b05      	ldr	r3, [sp, #20]
 8013a74:	f1a3 0302 	sub.w	r3, r3, #2
 8013a78:	bfcc      	ite	gt
 8013a7a:	2500      	movgt	r5, #0
 8013a7c:	2501      	movle	r5, #1
 8013a7e:	2b03      	cmp	r3, #3
 8013a80:	d869      	bhi.n	8013b56 <_dtoa_r+0x2c6>
 8013a82:	e8df f003 	tbb	[pc, r3]
 8013a86:	4e2c      	.short	0x4e2c
 8013a88:	5a4c      	.short	0x5a4c
 8013a8a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 8013a8e:	441d      	add	r5, r3
 8013a90:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013a94:	2b20      	cmp	r3, #32
 8013a96:	bfc1      	itttt	gt
 8013a98:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013a9c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013aa0:	fa09 f303 	lslgt.w	r3, r9, r3
 8013aa4:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013aa8:	bfda      	itte	le
 8013aaa:	f1c3 0320 	rsble	r3, r3, #32
 8013aae:	fa06 f003 	lslle.w	r0, r6, r3
 8013ab2:	4318      	orrgt	r0, r3
 8013ab4:	f7ec fd26 	bl	8000504 <__aeabi_ui2d>
 8013ab8:	2301      	movs	r3, #1
 8013aba:	4606      	mov	r6, r0
 8013abc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013ac0:	3d01      	subs	r5, #1
 8013ac2:	9310      	str	r3, [sp, #64]	; 0x40
 8013ac4:	e771      	b.n	80139aa <_dtoa_r+0x11a>
 8013ac6:	2301      	movs	r3, #1
 8013ac8:	e7b6      	b.n	8013a38 <_dtoa_r+0x1a8>
 8013aca:	900e      	str	r0, [sp, #56]	; 0x38
 8013acc:	e7b5      	b.n	8013a3a <_dtoa_r+0x1aa>
 8013ace:	f1ca 0300 	rsb	r3, sl, #0
 8013ad2:	9306      	str	r3, [sp, #24]
 8013ad4:	2300      	movs	r3, #0
 8013ad6:	eba8 080a 	sub.w	r8, r8, sl
 8013ada:	930d      	str	r3, [sp, #52]	; 0x34
 8013adc:	e7c2      	b.n	8013a64 <_dtoa_r+0x1d4>
 8013ade:	2300      	movs	r3, #0
 8013ae0:	9308      	str	r3, [sp, #32]
 8013ae2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	dc39      	bgt.n	8013b5c <_dtoa_r+0x2cc>
 8013ae8:	f04f 0901 	mov.w	r9, #1
 8013aec:	f8cd 9004 	str.w	r9, [sp, #4]
 8013af0:	464b      	mov	r3, r9
 8013af2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8013af6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8013af8:	2200      	movs	r2, #0
 8013afa:	6042      	str	r2, [r0, #4]
 8013afc:	2204      	movs	r2, #4
 8013afe:	f102 0614 	add.w	r6, r2, #20
 8013b02:	429e      	cmp	r6, r3
 8013b04:	6841      	ldr	r1, [r0, #4]
 8013b06:	d92f      	bls.n	8013b68 <_dtoa_r+0x2d8>
 8013b08:	4620      	mov	r0, r4
 8013b0a:	f000 fed9 	bl	80148c0 <_Balloc>
 8013b0e:	9000      	str	r0, [sp, #0]
 8013b10:	2800      	cmp	r0, #0
 8013b12:	d14b      	bne.n	8013bac <_dtoa_r+0x31c>
 8013b14:	4b24      	ldr	r3, [pc, #144]	; (8013ba8 <_dtoa_r+0x318>)
 8013b16:	4602      	mov	r2, r0
 8013b18:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013b1c:	e6d1      	b.n	80138c2 <_dtoa_r+0x32>
 8013b1e:	2301      	movs	r3, #1
 8013b20:	e7de      	b.n	8013ae0 <_dtoa_r+0x250>
 8013b22:	2300      	movs	r3, #0
 8013b24:	9308      	str	r3, [sp, #32]
 8013b26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b28:	eb0a 0903 	add.w	r9, sl, r3
 8013b2c:	f109 0301 	add.w	r3, r9, #1
 8013b30:	2b01      	cmp	r3, #1
 8013b32:	9301      	str	r3, [sp, #4]
 8013b34:	bfb8      	it	lt
 8013b36:	2301      	movlt	r3, #1
 8013b38:	e7dd      	b.n	8013af6 <_dtoa_r+0x266>
 8013b3a:	2301      	movs	r3, #1
 8013b3c:	e7f2      	b.n	8013b24 <_dtoa_r+0x294>
 8013b3e:	2501      	movs	r5, #1
 8013b40:	2300      	movs	r3, #0
 8013b42:	9305      	str	r3, [sp, #20]
 8013b44:	9508      	str	r5, [sp, #32]
 8013b46:	f04f 39ff 	mov.w	r9, #4294967295
 8013b4a:	2200      	movs	r2, #0
 8013b4c:	f8cd 9004 	str.w	r9, [sp, #4]
 8013b50:	2312      	movs	r3, #18
 8013b52:	9209      	str	r2, [sp, #36]	; 0x24
 8013b54:	e7cf      	b.n	8013af6 <_dtoa_r+0x266>
 8013b56:	2301      	movs	r3, #1
 8013b58:	9308      	str	r3, [sp, #32]
 8013b5a:	e7f4      	b.n	8013b46 <_dtoa_r+0x2b6>
 8013b5c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8013b60:	f8cd 9004 	str.w	r9, [sp, #4]
 8013b64:	464b      	mov	r3, r9
 8013b66:	e7c6      	b.n	8013af6 <_dtoa_r+0x266>
 8013b68:	3101      	adds	r1, #1
 8013b6a:	6041      	str	r1, [r0, #4]
 8013b6c:	0052      	lsls	r2, r2, #1
 8013b6e:	e7c6      	b.n	8013afe <_dtoa_r+0x26e>
 8013b70:	636f4361 	.word	0x636f4361
 8013b74:	3fd287a7 	.word	0x3fd287a7
 8013b78:	8b60c8b3 	.word	0x8b60c8b3
 8013b7c:	3fc68a28 	.word	0x3fc68a28
 8013b80:	509f79fb 	.word	0x509f79fb
 8013b84:	3fd34413 	.word	0x3fd34413
 8013b88:	08016879 	.word	0x08016879
 8013b8c:	08016890 	.word	0x08016890
 8013b90:	7ff00000 	.word	0x7ff00000
 8013b94:	08016875 	.word	0x08016875
 8013b98:	0801686c 	.word	0x0801686c
 8013b9c:	08016849 	.word	0x08016849
 8013ba0:	3ff80000 	.word	0x3ff80000
 8013ba4:	080169e8 	.word	0x080169e8
 8013ba8:	080168ef 	.word	0x080168ef
 8013bac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013bae:	9a00      	ldr	r2, [sp, #0]
 8013bb0:	601a      	str	r2, [r3, #0]
 8013bb2:	9b01      	ldr	r3, [sp, #4]
 8013bb4:	2b0e      	cmp	r3, #14
 8013bb6:	f200 80ad 	bhi.w	8013d14 <_dtoa_r+0x484>
 8013bba:	2d00      	cmp	r5, #0
 8013bbc:	f000 80aa 	beq.w	8013d14 <_dtoa_r+0x484>
 8013bc0:	f1ba 0f00 	cmp.w	sl, #0
 8013bc4:	dd36      	ble.n	8013c34 <_dtoa_r+0x3a4>
 8013bc6:	4ac3      	ldr	r2, [pc, #780]	; (8013ed4 <_dtoa_r+0x644>)
 8013bc8:	f00a 030f 	and.w	r3, sl, #15
 8013bcc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8013bd0:	ed93 7b00 	vldr	d7, [r3]
 8013bd4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8013bd8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8013bdc:	eeb0 8a47 	vmov.f32	s16, s14
 8013be0:	eef0 8a67 	vmov.f32	s17, s15
 8013be4:	d016      	beq.n	8013c14 <_dtoa_r+0x384>
 8013be6:	4bbc      	ldr	r3, [pc, #752]	; (8013ed8 <_dtoa_r+0x648>)
 8013be8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013bec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013bf0:	f7ec fe2c 	bl	800084c <__aeabi_ddiv>
 8013bf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013bf8:	f007 070f 	and.w	r7, r7, #15
 8013bfc:	2503      	movs	r5, #3
 8013bfe:	4eb6      	ldr	r6, [pc, #728]	; (8013ed8 <_dtoa_r+0x648>)
 8013c00:	b957      	cbnz	r7, 8013c18 <_dtoa_r+0x388>
 8013c02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8013c06:	ec53 2b18 	vmov	r2, r3, d8
 8013c0a:	f7ec fe1f 	bl	800084c <__aeabi_ddiv>
 8013c0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c12:	e029      	b.n	8013c68 <_dtoa_r+0x3d8>
 8013c14:	2502      	movs	r5, #2
 8013c16:	e7f2      	b.n	8013bfe <_dtoa_r+0x36e>
 8013c18:	07f9      	lsls	r1, r7, #31
 8013c1a:	d508      	bpl.n	8013c2e <_dtoa_r+0x39e>
 8013c1c:	ec51 0b18 	vmov	r0, r1, d8
 8013c20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8013c24:	f7ec fce8 	bl	80005f8 <__aeabi_dmul>
 8013c28:	ec41 0b18 	vmov	d8, r0, r1
 8013c2c:	3501      	adds	r5, #1
 8013c2e:	107f      	asrs	r7, r7, #1
 8013c30:	3608      	adds	r6, #8
 8013c32:	e7e5      	b.n	8013c00 <_dtoa_r+0x370>
 8013c34:	f000 80a6 	beq.w	8013d84 <_dtoa_r+0x4f4>
 8013c38:	f1ca 0600 	rsb	r6, sl, #0
 8013c3c:	4ba5      	ldr	r3, [pc, #660]	; (8013ed4 <_dtoa_r+0x644>)
 8013c3e:	4fa6      	ldr	r7, [pc, #664]	; (8013ed8 <_dtoa_r+0x648>)
 8013c40:	f006 020f 	and.w	r2, r6, #15
 8013c44:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013c4c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8013c50:	f7ec fcd2 	bl	80005f8 <__aeabi_dmul>
 8013c54:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013c58:	1136      	asrs	r6, r6, #4
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	2502      	movs	r5, #2
 8013c5e:	2e00      	cmp	r6, #0
 8013c60:	f040 8085 	bne.w	8013d6e <_dtoa_r+0x4de>
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d1d2      	bne.n	8013c0e <_dtoa_r+0x37e>
 8013c68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	f000 808c 	beq.w	8013d88 <_dtoa_r+0x4f8>
 8013c70:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013c74:	4b99      	ldr	r3, [pc, #612]	; (8013edc <_dtoa_r+0x64c>)
 8013c76:	2200      	movs	r2, #0
 8013c78:	4630      	mov	r0, r6
 8013c7a:	4639      	mov	r1, r7
 8013c7c:	f7ec ff2e 	bl	8000adc <__aeabi_dcmplt>
 8013c80:	2800      	cmp	r0, #0
 8013c82:	f000 8081 	beq.w	8013d88 <_dtoa_r+0x4f8>
 8013c86:	9b01      	ldr	r3, [sp, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d07d      	beq.n	8013d88 <_dtoa_r+0x4f8>
 8013c8c:	f1b9 0f00 	cmp.w	r9, #0
 8013c90:	dd3c      	ble.n	8013d0c <_dtoa_r+0x47c>
 8013c92:	f10a 33ff 	add.w	r3, sl, #4294967295
 8013c96:	9307      	str	r3, [sp, #28]
 8013c98:	2200      	movs	r2, #0
 8013c9a:	4b91      	ldr	r3, [pc, #580]	; (8013ee0 <_dtoa_r+0x650>)
 8013c9c:	4630      	mov	r0, r6
 8013c9e:	4639      	mov	r1, r7
 8013ca0:	f7ec fcaa 	bl	80005f8 <__aeabi_dmul>
 8013ca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013ca8:	3501      	adds	r5, #1
 8013caa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8013cae:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013cb2:	4628      	mov	r0, r5
 8013cb4:	f7ec fc36 	bl	8000524 <__aeabi_i2d>
 8013cb8:	4632      	mov	r2, r6
 8013cba:	463b      	mov	r3, r7
 8013cbc:	f7ec fc9c 	bl	80005f8 <__aeabi_dmul>
 8013cc0:	4b88      	ldr	r3, [pc, #544]	; (8013ee4 <_dtoa_r+0x654>)
 8013cc2:	2200      	movs	r2, #0
 8013cc4:	f7ec fae2 	bl	800028c <__adddf3>
 8013cc8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8013ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8013cd0:	9303      	str	r3, [sp, #12]
 8013cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d15c      	bne.n	8013d92 <_dtoa_r+0x502>
 8013cd8:	4b83      	ldr	r3, [pc, #524]	; (8013ee8 <_dtoa_r+0x658>)
 8013cda:	2200      	movs	r2, #0
 8013cdc:	4630      	mov	r0, r6
 8013cde:	4639      	mov	r1, r7
 8013ce0:	f7ec fad2 	bl	8000288 <__aeabi_dsub>
 8013ce4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013ce8:	4606      	mov	r6, r0
 8013cea:	460f      	mov	r7, r1
 8013cec:	f7ec ff14 	bl	8000b18 <__aeabi_dcmpgt>
 8013cf0:	2800      	cmp	r0, #0
 8013cf2:	f040 8296 	bne.w	8014222 <_dtoa_r+0x992>
 8013cf6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8013cfa:	4630      	mov	r0, r6
 8013cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013d00:	4639      	mov	r1, r7
 8013d02:	f7ec feeb 	bl	8000adc <__aeabi_dcmplt>
 8013d06:	2800      	cmp	r0, #0
 8013d08:	f040 8288 	bne.w	801421c <_dtoa_r+0x98c>
 8013d0c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8013d10:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8013d14:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	f2c0 8158 	blt.w	8013fcc <_dtoa_r+0x73c>
 8013d1c:	f1ba 0f0e 	cmp.w	sl, #14
 8013d20:	f300 8154 	bgt.w	8013fcc <_dtoa_r+0x73c>
 8013d24:	4b6b      	ldr	r3, [pc, #428]	; (8013ed4 <_dtoa_r+0x644>)
 8013d26:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8013d2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	f280 80e3 	bge.w	8013efc <_dtoa_r+0x66c>
 8013d36:	9b01      	ldr	r3, [sp, #4]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	f300 80df 	bgt.w	8013efc <_dtoa_r+0x66c>
 8013d3e:	f040 826d 	bne.w	801421c <_dtoa_r+0x98c>
 8013d42:	4b69      	ldr	r3, [pc, #420]	; (8013ee8 <_dtoa_r+0x658>)
 8013d44:	2200      	movs	r2, #0
 8013d46:	4640      	mov	r0, r8
 8013d48:	4649      	mov	r1, r9
 8013d4a:	f7ec fc55 	bl	80005f8 <__aeabi_dmul>
 8013d4e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8013d52:	f7ec fed7 	bl	8000b04 <__aeabi_dcmpge>
 8013d56:	9e01      	ldr	r6, [sp, #4]
 8013d58:	4637      	mov	r7, r6
 8013d5a:	2800      	cmp	r0, #0
 8013d5c:	f040 8243 	bne.w	80141e6 <_dtoa_r+0x956>
 8013d60:	9d00      	ldr	r5, [sp, #0]
 8013d62:	2331      	movs	r3, #49	; 0x31
 8013d64:	f805 3b01 	strb.w	r3, [r5], #1
 8013d68:	f10a 0a01 	add.w	sl, sl, #1
 8013d6c:	e23f      	b.n	80141ee <_dtoa_r+0x95e>
 8013d6e:	07f2      	lsls	r2, r6, #31
 8013d70:	d505      	bpl.n	8013d7e <_dtoa_r+0x4ee>
 8013d72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8013d76:	f7ec fc3f 	bl	80005f8 <__aeabi_dmul>
 8013d7a:	3501      	adds	r5, #1
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	1076      	asrs	r6, r6, #1
 8013d80:	3708      	adds	r7, #8
 8013d82:	e76c      	b.n	8013c5e <_dtoa_r+0x3ce>
 8013d84:	2502      	movs	r5, #2
 8013d86:	e76f      	b.n	8013c68 <_dtoa_r+0x3d8>
 8013d88:	9b01      	ldr	r3, [sp, #4]
 8013d8a:	f8cd a01c 	str.w	sl, [sp, #28]
 8013d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8013d90:	e78d      	b.n	8013cae <_dtoa_r+0x41e>
 8013d92:	9900      	ldr	r1, [sp, #0]
 8013d94:	980c      	ldr	r0, [sp, #48]	; 0x30
 8013d96:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013d98:	4b4e      	ldr	r3, [pc, #312]	; (8013ed4 <_dtoa_r+0x644>)
 8013d9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013d9e:	4401      	add	r1, r0
 8013da0:	9102      	str	r1, [sp, #8]
 8013da2:	9908      	ldr	r1, [sp, #32]
 8013da4:	eeb0 8a47 	vmov.f32	s16, s14
 8013da8:	eef0 8a67 	vmov.f32	s17, s15
 8013dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013db0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013db4:	2900      	cmp	r1, #0
 8013db6:	d045      	beq.n	8013e44 <_dtoa_r+0x5b4>
 8013db8:	494c      	ldr	r1, [pc, #304]	; (8013eec <_dtoa_r+0x65c>)
 8013dba:	2000      	movs	r0, #0
 8013dbc:	f7ec fd46 	bl	800084c <__aeabi_ddiv>
 8013dc0:	ec53 2b18 	vmov	r2, r3, d8
 8013dc4:	f7ec fa60 	bl	8000288 <__aeabi_dsub>
 8013dc8:	9d00      	ldr	r5, [sp, #0]
 8013dca:	ec41 0b18 	vmov	d8, r0, r1
 8013dce:	4639      	mov	r1, r7
 8013dd0:	4630      	mov	r0, r6
 8013dd2:	f7ec fec1 	bl	8000b58 <__aeabi_d2iz>
 8013dd6:	900c      	str	r0, [sp, #48]	; 0x30
 8013dd8:	f7ec fba4 	bl	8000524 <__aeabi_i2d>
 8013ddc:	4602      	mov	r2, r0
 8013dde:	460b      	mov	r3, r1
 8013de0:	4630      	mov	r0, r6
 8013de2:	4639      	mov	r1, r7
 8013de4:	f7ec fa50 	bl	8000288 <__aeabi_dsub>
 8013de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013dea:	3330      	adds	r3, #48	; 0x30
 8013dec:	f805 3b01 	strb.w	r3, [r5], #1
 8013df0:	ec53 2b18 	vmov	r2, r3, d8
 8013df4:	4606      	mov	r6, r0
 8013df6:	460f      	mov	r7, r1
 8013df8:	f7ec fe70 	bl	8000adc <__aeabi_dcmplt>
 8013dfc:	2800      	cmp	r0, #0
 8013dfe:	d165      	bne.n	8013ecc <_dtoa_r+0x63c>
 8013e00:	4632      	mov	r2, r6
 8013e02:	463b      	mov	r3, r7
 8013e04:	4935      	ldr	r1, [pc, #212]	; (8013edc <_dtoa_r+0x64c>)
 8013e06:	2000      	movs	r0, #0
 8013e08:	f7ec fa3e 	bl	8000288 <__aeabi_dsub>
 8013e0c:	ec53 2b18 	vmov	r2, r3, d8
 8013e10:	f7ec fe64 	bl	8000adc <__aeabi_dcmplt>
 8013e14:	2800      	cmp	r0, #0
 8013e16:	f040 80b9 	bne.w	8013f8c <_dtoa_r+0x6fc>
 8013e1a:	9b02      	ldr	r3, [sp, #8]
 8013e1c:	429d      	cmp	r5, r3
 8013e1e:	f43f af75 	beq.w	8013d0c <_dtoa_r+0x47c>
 8013e22:	4b2f      	ldr	r3, [pc, #188]	; (8013ee0 <_dtoa_r+0x650>)
 8013e24:	ec51 0b18 	vmov	r0, r1, d8
 8013e28:	2200      	movs	r2, #0
 8013e2a:	f7ec fbe5 	bl	80005f8 <__aeabi_dmul>
 8013e2e:	4b2c      	ldr	r3, [pc, #176]	; (8013ee0 <_dtoa_r+0x650>)
 8013e30:	ec41 0b18 	vmov	d8, r0, r1
 8013e34:	2200      	movs	r2, #0
 8013e36:	4630      	mov	r0, r6
 8013e38:	4639      	mov	r1, r7
 8013e3a:	f7ec fbdd 	bl	80005f8 <__aeabi_dmul>
 8013e3e:	4606      	mov	r6, r0
 8013e40:	460f      	mov	r7, r1
 8013e42:	e7c4      	b.n	8013dce <_dtoa_r+0x53e>
 8013e44:	ec51 0b17 	vmov	r0, r1, d7
 8013e48:	f7ec fbd6 	bl	80005f8 <__aeabi_dmul>
 8013e4c:	9b02      	ldr	r3, [sp, #8]
 8013e4e:	9d00      	ldr	r5, [sp, #0]
 8013e50:	930c      	str	r3, [sp, #48]	; 0x30
 8013e52:	ec41 0b18 	vmov	d8, r0, r1
 8013e56:	4639      	mov	r1, r7
 8013e58:	4630      	mov	r0, r6
 8013e5a:	f7ec fe7d 	bl	8000b58 <__aeabi_d2iz>
 8013e5e:	9011      	str	r0, [sp, #68]	; 0x44
 8013e60:	f7ec fb60 	bl	8000524 <__aeabi_i2d>
 8013e64:	4602      	mov	r2, r0
 8013e66:	460b      	mov	r3, r1
 8013e68:	4630      	mov	r0, r6
 8013e6a:	4639      	mov	r1, r7
 8013e6c:	f7ec fa0c 	bl	8000288 <__aeabi_dsub>
 8013e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013e72:	3330      	adds	r3, #48	; 0x30
 8013e74:	f805 3b01 	strb.w	r3, [r5], #1
 8013e78:	9b02      	ldr	r3, [sp, #8]
 8013e7a:	429d      	cmp	r5, r3
 8013e7c:	4606      	mov	r6, r0
 8013e7e:	460f      	mov	r7, r1
 8013e80:	f04f 0200 	mov.w	r2, #0
 8013e84:	d134      	bne.n	8013ef0 <_dtoa_r+0x660>
 8013e86:	4b19      	ldr	r3, [pc, #100]	; (8013eec <_dtoa_r+0x65c>)
 8013e88:	ec51 0b18 	vmov	r0, r1, d8
 8013e8c:	f7ec f9fe 	bl	800028c <__adddf3>
 8013e90:	4602      	mov	r2, r0
 8013e92:	460b      	mov	r3, r1
 8013e94:	4630      	mov	r0, r6
 8013e96:	4639      	mov	r1, r7
 8013e98:	f7ec fe3e 	bl	8000b18 <__aeabi_dcmpgt>
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d175      	bne.n	8013f8c <_dtoa_r+0x6fc>
 8013ea0:	ec53 2b18 	vmov	r2, r3, d8
 8013ea4:	4911      	ldr	r1, [pc, #68]	; (8013eec <_dtoa_r+0x65c>)
 8013ea6:	2000      	movs	r0, #0
 8013ea8:	f7ec f9ee 	bl	8000288 <__aeabi_dsub>
 8013eac:	4602      	mov	r2, r0
 8013eae:	460b      	mov	r3, r1
 8013eb0:	4630      	mov	r0, r6
 8013eb2:	4639      	mov	r1, r7
 8013eb4:	f7ec fe12 	bl	8000adc <__aeabi_dcmplt>
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	f43f af27 	beq.w	8013d0c <_dtoa_r+0x47c>
 8013ebe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ec0:	1e6b      	subs	r3, r5, #1
 8013ec2:	930c      	str	r3, [sp, #48]	; 0x30
 8013ec4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013ec8:	2b30      	cmp	r3, #48	; 0x30
 8013eca:	d0f8      	beq.n	8013ebe <_dtoa_r+0x62e>
 8013ecc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8013ed0:	e04a      	b.n	8013f68 <_dtoa_r+0x6d8>
 8013ed2:	bf00      	nop
 8013ed4:	080169e8 	.word	0x080169e8
 8013ed8:	080169c0 	.word	0x080169c0
 8013edc:	3ff00000 	.word	0x3ff00000
 8013ee0:	40240000 	.word	0x40240000
 8013ee4:	401c0000 	.word	0x401c0000
 8013ee8:	40140000 	.word	0x40140000
 8013eec:	3fe00000 	.word	0x3fe00000
 8013ef0:	4baf      	ldr	r3, [pc, #700]	; (80141b0 <_dtoa_r+0x920>)
 8013ef2:	f7ec fb81 	bl	80005f8 <__aeabi_dmul>
 8013ef6:	4606      	mov	r6, r0
 8013ef8:	460f      	mov	r7, r1
 8013efa:	e7ac      	b.n	8013e56 <_dtoa_r+0x5c6>
 8013efc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8013f00:	9d00      	ldr	r5, [sp, #0]
 8013f02:	4642      	mov	r2, r8
 8013f04:	464b      	mov	r3, r9
 8013f06:	4630      	mov	r0, r6
 8013f08:	4639      	mov	r1, r7
 8013f0a:	f7ec fc9f 	bl	800084c <__aeabi_ddiv>
 8013f0e:	f7ec fe23 	bl	8000b58 <__aeabi_d2iz>
 8013f12:	9002      	str	r0, [sp, #8]
 8013f14:	f7ec fb06 	bl	8000524 <__aeabi_i2d>
 8013f18:	4642      	mov	r2, r8
 8013f1a:	464b      	mov	r3, r9
 8013f1c:	f7ec fb6c 	bl	80005f8 <__aeabi_dmul>
 8013f20:	4602      	mov	r2, r0
 8013f22:	460b      	mov	r3, r1
 8013f24:	4630      	mov	r0, r6
 8013f26:	4639      	mov	r1, r7
 8013f28:	f7ec f9ae 	bl	8000288 <__aeabi_dsub>
 8013f2c:	9e02      	ldr	r6, [sp, #8]
 8013f2e:	9f01      	ldr	r7, [sp, #4]
 8013f30:	3630      	adds	r6, #48	; 0x30
 8013f32:	f805 6b01 	strb.w	r6, [r5], #1
 8013f36:	9e00      	ldr	r6, [sp, #0]
 8013f38:	1bae      	subs	r6, r5, r6
 8013f3a:	42b7      	cmp	r7, r6
 8013f3c:	4602      	mov	r2, r0
 8013f3e:	460b      	mov	r3, r1
 8013f40:	d137      	bne.n	8013fb2 <_dtoa_r+0x722>
 8013f42:	f7ec f9a3 	bl	800028c <__adddf3>
 8013f46:	4642      	mov	r2, r8
 8013f48:	464b      	mov	r3, r9
 8013f4a:	4606      	mov	r6, r0
 8013f4c:	460f      	mov	r7, r1
 8013f4e:	f7ec fde3 	bl	8000b18 <__aeabi_dcmpgt>
 8013f52:	b9c8      	cbnz	r0, 8013f88 <_dtoa_r+0x6f8>
 8013f54:	4642      	mov	r2, r8
 8013f56:	464b      	mov	r3, r9
 8013f58:	4630      	mov	r0, r6
 8013f5a:	4639      	mov	r1, r7
 8013f5c:	f7ec fdb4 	bl	8000ac8 <__aeabi_dcmpeq>
 8013f60:	b110      	cbz	r0, 8013f68 <_dtoa_r+0x6d8>
 8013f62:	9b02      	ldr	r3, [sp, #8]
 8013f64:	07d9      	lsls	r1, r3, #31
 8013f66:	d40f      	bmi.n	8013f88 <_dtoa_r+0x6f8>
 8013f68:	4620      	mov	r0, r4
 8013f6a:	4659      	mov	r1, fp
 8013f6c:	f000 fce8 	bl	8014940 <_Bfree>
 8013f70:	2300      	movs	r3, #0
 8013f72:	702b      	strb	r3, [r5, #0]
 8013f74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8013f76:	f10a 0001 	add.w	r0, sl, #1
 8013f7a:	6018      	str	r0, [r3, #0]
 8013f7c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	f43f acd8 	beq.w	8013934 <_dtoa_r+0xa4>
 8013f84:	601d      	str	r5, [r3, #0]
 8013f86:	e4d5      	b.n	8013934 <_dtoa_r+0xa4>
 8013f88:	f8cd a01c 	str.w	sl, [sp, #28]
 8013f8c:	462b      	mov	r3, r5
 8013f8e:	461d      	mov	r5, r3
 8013f90:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013f94:	2a39      	cmp	r2, #57	; 0x39
 8013f96:	d108      	bne.n	8013faa <_dtoa_r+0x71a>
 8013f98:	9a00      	ldr	r2, [sp, #0]
 8013f9a:	429a      	cmp	r2, r3
 8013f9c:	d1f7      	bne.n	8013f8e <_dtoa_r+0x6fe>
 8013f9e:	9a07      	ldr	r2, [sp, #28]
 8013fa0:	9900      	ldr	r1, [sp, #0]
 8013fa2:	3201      	adds	r2, #1
 8013fa4:	9207      	str	r2, [sp, #28]
 8013fa6:	2230      	movs	r2, #48	; 0x30
 8013fa8:	700a      	strb	r2, [r1, #0]
 8013faa:	781a      	ldrb	r2, [r3, #0]
 8013fac:	3201      	adds	r2, #1
 8013fae:	701a      	strb	r2, [r3, #0]
 8013fb0:	e78c      	b.n	8013ecc <_dtoa_r+0x63c>
 8013fb2:	4b7f      	ldr	r3, [pc, #508]	; (80141b0 <_dtoa_r+0x920>)
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	f7ec fb1f 	bl	80005f8 <__aeabi_dmul>
 8013fba:	2200      	movs	r2, #0
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	4606      	mov	r6, r0
 8013fc0:	460f      	mov	r7, r1
 8013fc2:	f7ec fd81 	bl	8000ac8 <__aeabi_dcmpeq>
 8013fc6:	2800      	cmp	r0, #0
 8013fc8:	d09b      	beq.n	8013f02 <_dtoa_r+0x672>
 8013fca:	e7cd      	b.n	8013f68 <_dtoa_r+0x6d8>
 8013fcc:	9a08      	ldr	r2, [sp, #32]
 8013fce:	2a00      	cmp	r2, #0
 8013fd0:	f000 80c4 	beq.w	801415c <_dtoa_r+0x8cc>
 8013fd4:	9a05      	ldr	r2, [sp, #20]
 8013fd6:	2a01      	cmp	r2, #1
 8013fd8:	f300 80a8 	bgt.w	801412c <_dtoa_r+0x89c>
 8013fdc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8013fde:	2a00      	cmp	r2, #0
 8013fe0:	f000 80a0 	beq.w	8014124 <_dtoa_r+0x894>
 8013fe4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013fe8:	9e06      	ldr	r6, [sp, #24]
 8013fea:	4645      	mov	r5, r8
 8013fec:	9a04      	ldr	r2, [sp, #16]
 8013fee:	2101      	movs	r1, #1
 8013ff0:	441a      	add	r2, r3
 8013ff2:	4620      	mov	r0, r4
 8013ff4:	4498      	add	r8, r3
 8013ff6:	9204      	str	r2, [sp, #16]
 8013ff8:	f000 fd5e 	bl	8014ab8 <__i2b>
 8013ffc:	4607      	mov	r7, r0
 8013ffe:	2d00      	cmp	r5, #0
 8014000:	dd0b      	ble.n	801401a <_dtoa_r+0x78a>
 8014002:	9b04      	ldr	r3, [sp, #16]
 8014004:	2b00      	cmp	r3, #0
 8014006:	dd08      	ble.n	801401a <_dtoa_r+0x78a>
 8014008:	42ab      	cmp	r3, r5
 801400a:	9a04      	ldr	r2, [sp, #16]
 801400c:	bfa8      	it	ge
 801400e:	462b      	movge	r3, r5
 8014010:	eba8 0803 	sub.w	r8, r8, r3
 8014014:	1aed      	subs	r5, r5, r3
 8014016:	1ad3      	subs	r3, r2, r3
 8014018:	9304      	str	r3, [sp, #16]
 801401a:	9b06      	ldr	r3, [sp, #24]
 801401c:	b1fb      	cbz	r3, 801405e <_dtoa_r+0x7ce>
 801401e:	9b08      	ldr	r3, [sp, #32]
 8014020:	2b00      	cmp	r3, #0
 8014022:	f000 809f 	beq.w	8014164 <_dtoa_r+0x8d4>
 8014026:	2e00      	cmp	r6, #0
 8014028:	dd11      	ble.n	801404e <_dtoa_r+0x7be>
 801402a:	4639      	mov	r1, r7
 801402c:	4632      	mov	r2, r6
 801402e:	4620      	mov	r0, r4
 8014030:	f000 fdfe 	bl	8014c30 <__pow5mult>
 8014034:	465a      	mov	r2, fp
 8014036:	4601      	mov	r1, r0
 8014038:	4607      	mov	r7, r0
 801403a:	4620      	mov	r0, r4
 801403c:	f000 fd52 	bl	8014ae4 <__multiply>
 8014040:	4659      	mov	r1, fp
 8014042:	9007      	str	r0, [sp, #28]
 8014044:	4620      	mov	r0, r4
 8014046:	f000 fc7b 	bl	8014940 <_Bfree>
 801404a:	9b07      	ldr	r3, [sp, #28]
 801404c:	469b      	mov	fp, r3
 801404e:	9b06      	ldr	r3, [sp, #24]
 8014050:	1b9a      	subs	r2, r3, r6
 8014052:	d004      	beq.n	801405e <_dtoa_r+0x7ce>
 8014054:	4659      	mov	r1, fp
 8014056:	4620      	mov	r0, r4
 8014058:	f000 fdea 	bl	8014c30 <__pow5mult>
 801405c:	4683      	mov	fp, r0
 801405e:	2101      	movs	r1, #1
 8014060:	4620      	mov	r0, r4
 8014062:	f000 fd29 	bl	8014ab8 <__i2b>
 8014066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014068:	2b00      	cmp	r3, #0
 801406a:	4606      	mov	r6, r0
 801406c:	dd7c      	ble.n	8014168 <_dtoa_r+0x8d8>
 801406e:	461a      	mov	r2, r3
 8014070:	4601      	mov	r1, r0
 8014072:	4620      	mov	r0, r4
 8014074:	f000 fddc 	bl	8014c30 <__pow5mult>
 8014078:	9b05      	ldr	r3, [sp, #20]
 801407a:	2b01      	cmp	r3, #1
 801407c:	4606      	mov	r6, r0
 801407e:	dd76      	ble.n	801416e <_dtoa_r+0x8de>
 8014080:	2300      	movs	r3, #0
 8014082:	9306      	str	r3, [sp, #24]
 8014084:	6933      	ldr	r3, [r6, #16]
 8014086:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 801408a:	6918      	ldr	r0, [r3, #16]
 801408c:	f000 fcc4 	bl	8014a18 <__hi0bits>
 8014090:	f1c0 0020 	rsb	r0, r0, #32
 8014094:	9b04      	ldr	r3, [sp, #16]
 8014096:	4418      	add	r0, r3
 8014098:	f010 001f 	ands.w	r0, r0, #31
 801409c:	f000 8086 	beq.w	80141ac <_dtoa_r+0x91c>
 80140a0:	f1c0 0320 	rsb	r3, r0, #32
 80140a4:	2b04      	cmp	r3, #4
 80140a6:	dd7f      	ble.n	80141a8 <_dtoa_r+0x918>
 80140a8:	f1c0 001c 	rsb	r0, r0, #28
 80140ac:	9b04      	ldr	r3, [sp, #16]
 80140ae:	4403      	add	r3, r0
 80140b0:	4480      	add	r8, r0
 80140b2:	4405      	add	r5, r0
 80140b4:	9304      	str	r3, [sp, #16]
 80140b6:	f1b8 0f00 	cmp.w	r8, #0
 80140ba:	dd05      	ble.n	80140c8 <_dtoa_r+0x838>
 80140bc:	4659      	mov	r1, fp
 80140be:	4642      	mov	r2, r8
 80140c0:	4620      	mov	r0, r4
 80140c2:	f000 fe0f 	bl	8014ce4 <__lshift>
 80140c6:	4683      	mov	fp, r0
 80140c8:	9b04      	ldr	r3, [sp, #16]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	dd05      	ble.n	80140da <_dtoa_r+0x84a>
 80140ce:	4631      	mov	r1, r6
 80140d0:	461a      	mov	r2, r3
 80140d2:	4620      	mov	r0, r4
 80140d4:	f000 fe06 	bl	8014ce4 <__lshift>
 80140d8:	4606      	mov	r6, r0
 80140da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d069      	beq.n	80141b4 <_dtoa_r+0x924>
 80140e0:	4631      	mov	r1, r6
 80140e2:	4658      	mov	r0, fp
 80140e4:	f000 fe6a 	bl	8014dbc <__mcmp>
 80140e8:	2800      	cmp	r0, #0
 80140ea:	da63      	bge.n	80141b4 <_dtoa_r+0x924>
 80140ec:	2300      	movs	r3, #0
 80140ee:	4659      	mov	r1, fp
 80140f0:	220a      	movs	r2, #10
 80140f2:	4620      	mov	r0, r4
 80140f4:	f000 fc46 	bl	8014984 <__multadd>
 80140f8:	9b08      	ldr	r3, [sp, #32]
 80140fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80140fe:	4683      	mov	fp, r0
 8014100:	2b00      	cmp	r3, #0
 8014102:	f000 818f 	beq.w	8014424 <_dtoa_r+0xb94>
 8014106:	4639      	mov	r1, r7
 8014108:	2300      	movs	r3, #0
 801410a:	220a      	movs	r2, #10
 801410c:	4620      	mov	r0, r4
 801410e:	f000 fc39 	bl	8014984 <__multadd>
 8014112:	f1b9 0f00 	cmp.w	r9, #0
 8014116:	4607      	mov	r7, r0
 8014118:	f300 808e 	bgt.w	8014238 <_dtoa_r+0x9a8>
 801411c:	9b05      	ldr	r3, [sp, #20]
 801411e:	2b02      	cmp	r3, #2
 8014120:	dc50      	bgt.n	80141c4 <_dtoa_r+0x934>
 8014122:	e089      	b.n	8014238 <_dtoa_r+0x9a8>
 8014124:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8014126:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801412a:	e75d      	b.n	8013fe8 <_dtoa_r+0x758>
 801412c:	9b01      	ldr	r3, [sp, #4]
 801412e:	1e5e      	subs	r6, r3, #1
 8014130:	9b06      	ldr	r3, [sp, #24]
 8014132:	42b3      	cmp	r3, r6
 8014134:	bfbf      	itttt	lt
 8014136:	9b06      	ldrlt	r3, [sp, #24]
 8014138:	9606      	strlt	r6, [sp, #24]
 801413a:	1af2      	sublt	r2, r6, r3
 801413c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801413e:	bfb6      	itet	lt
 8014140:	189b      	addlt	r3, r3, r2
 8014142:	1b9e      	subge	r6, r3, r6
 8014144:	930d      	strlt	r3, [sp, #52]	; 0x34
 8014146:	9b01      	ldr	r3, [sp, #4]
 8014148:	bfb8      	it	lt
 801414a:	2600      	movlt	r6, #0
 801414c:	2b00      	cmp	r3, #0
 801414e:	bfb5      	itete	lt
 8014150:	eba8 0503 	sublt.w	r5, r8, r3
 8014154:	9b01      	ldrge	r3, [sp, #4]
 8014156:	2300      	movlt	r3, #0
 8014158:	4645      	movge	r5, r8
 801415a:	e747      	b.n	8013fec <_dtoa_r+0x75c>
 801415c:	9e06      	ldr	r6, [sp, #24]
 801415e:	9f08      	ldr	r7, [sp, #32]
 8014160:	4645      	mov	r5, r8
 8014162:	e74c      	b.n	8013ffe <_dtoa_r+0x76e>
 8014164:	9a06      	ldr	r2, [sp, #24]
 8014166:	e775      	b.n	8014054 <_dtoa_r+0x7c4>
 8014168:	9b05      	ldr	r3, [sp, #20]
 801416a:	2b01      	cmp	r3, #1
 801416c:	dc18      	bgt.n	80141a0 <_dtoa_r+0x910>
 801416e:	9b02      	ldr	r3, [sp, #8]
 8014170:	b9b3      	cbnz	r3, 80141a0 <_dtoa_r+0x910>
 8014172:	9b03      	ldr	r3, [sp, #12]
 8014174:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014178:	b9a3      	cbnz	r3, 80141a4 <_dtoa_r+0x914>
 801417a:	9b03      	ldr	r3, [sp, #12]
 801417c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8014180:	0d1b      	lsrs	r3, r3, #20
 8014182:	051b      	lsls	r3, r3, #20
 8014184:	b12b      	cbz	r3, 8014192 <_dtoa_r+0x902>
 8014186:	9b04      	ldr	r3, [sp, #16]
 8014188:	3301      	adds	r3, #1
 801418a:	9304      	str	r3, [sp, #16]
 801418c:	f108 0801 	add.w	r8, r8, #1
 8014190:	2301      	movs	r3, #1
 8014192:	9306      	str	r3, [sp, #24]
 8014194:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8014196:	2b00      	cmp	r3, #0
 8014198:	f47f af74 	bne.w	8014084 <_dtoa_r+0x7f4>
 801419c:	2001      	movs	r0, #1
 801419e:	e779      	b.n	8014094 <_dtoa_r+0x804>
 80141a0:	2300      	movs	r3, #0
 80141a2:	e7f6      	b.n	8014192 <_dtoa_r+0x902>
 80141a4:	9b02      	ldr	r3, [sp, #8]
 80141a6:	e7f4      	b.n	8014192 <_dtoa_r+0x902>
 80141a8:	d085      	beq.n	80140b6 <_dtoa_r+0x826>
 80141aa:	4618      	mov	r0, r3
 80141ac:	301c      	adds	r0, #28
 80141ae:	e77d      	b.n	80140ac <_dtoa_r+0x81c>
 80141b0:	40240000 	.word	0x40240000
 80141b4:	9b01      	ldr	r3, [sp, #4]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	dc38      	bgt.n	801422c <_dtoa_r+0x99c>
 80141ba:	9b05      	ldr	r3, [sp, #20]
 80141bc:	2b02      	cmp	r3, #2
 80141be:	dd35      	ble.n	801422c <_dtoa_r+0x99c>
 80141c0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80141c4:	f1b9 0f00 	cmp.w	r9, #0
 80141c8:	d10d      	bne.n	80141e6 <_dtoa_r+0x956>
 80141ca:	4631      	mov	r1, r6
 80141cc:	464b      	mov	r3, r9
 80141ce:	2205      	movs	r2, #5
 80141d0:	4620      	mov	r0, r4
 80141d2:	f000 fbd7 	bl	8014984 <__multadd>
 80141d6:	4601      	mov	r1, r0
 80141d8:	4606      	mov	r6, r0
 80141da:	4658      	mov	r0, fp
 80141dc:	f000 fdee 	bl	8014dbc <__mcmp>
 80141e0:	2800      	cmp	r0, #0
 80141e2:	f73f adbd 	bgt.w	8013d60 <_dtoa_r+0x4d0>
 80141e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80141e8:	9d00      	ldr	r5, [sp, #0]
 80141ea:	ea6f 0a03 	mvn.w	sl, r3
 80141ee:	f04f 0800 	mov.w	r8, #0
 80141f2:	4631      	mov	r1, r6
 80141f4:	4620      	mov	r0, r4
 80141f6:	f000 fba3 	bl	8014940 <_Bfree>
 80141fa:	2f00      	cmp	r7, #0
 80141fc:	f43f aeb4 	beq.w	8013f68 <_dtoa_r+0x6d8>
 8014200:	f1b8 0f00 	cmp.w	r8, #0
 8014204:	d005      	beq.n	8014212 <_dtoa_r+0x982>
 8014206:	45b8      	cmp	r8, r7
 8014208:	d003      	beq.n	8014212 <_dtoa_r+0x982>
 801420a:	4641      	mov	r1, r8
 801420c:	4620      	mov	r0, r4
 801420e:	f000 fb97 	bl	8014940 <_Bfree>
 8014212:	4639      	mov	r1, r7
 8014214:	4620      	mov	r0, r4
 8014216:	f000 fb93 	bl	8014940 <_Bfree>
 801421a:	e6a5      	b.n	8013f68 <_dtoa_r+0x6d8>
 801421c:	2600      	movs	r6, #0
 801421e:	4637      	mov	r7, r6
 8014220:	e7e1      	b.n	80141e6 <_dtoa_r+0x956>
 8014222:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8014224:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8014228:	4637      	mov	r7, r6
 801422a:	e599      	b.n	8013d60 <_dtoa_r+0x4d0>
 801422c:	9b08      	ldr	r3, [sp, #32]
 801422e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8014232:	2b00      	cmp	r3, #0
 8014234:	f000 80fd 	beq.w	8014432 <_dtoa_r+0xba2>
 8014238:	2d00      	cmp	r5, #0
 801423a:	dd05      	ble.n	8014248 <_dtoa_r+0x9b8>
 801423c:	4639      	mov	r1, r7
 801423e:	462a      	mov	r2, r5
 8014240:	4620      	mov	r0, r4
 8014242:	f000 fd4f 	bl	8014ce4 <__lshift>
 8014246:	4607      	mov	r7, r0
 8014248:	9b06      	ldr	r3, [sp, #24]
 801424a:	2b00      	cmp	r3, #0
 801424c:	d05c      	beq.n	8014308 <_dtoa_r+0xa78>
 801424e:	6879      	ldr	r1, [r7, #4]
 8014250:	4620      	mov	r0, r4
 8014252:	f000 fb35 	bl	80148c0 <_Balloc>
 8014256:	4605      	mov	r5, r0
 8014258:	b928      	cbnz	r0, 8014266 <_dtoa_r+0x9d6>
 801425a:	4b80      	ldr	r3, [pc, #512]	; (801445c <_dtoa_r+0xbcc>)
 801425c:	4602      	mov	r2, r0
 801425e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8014262:	f7ff bb2e 	b.w	80138c2 <_dtoa_r+0x32>
 8014266:	693a      	ldr	r2, [r7, #16]
 8014268:	3202      	adds	r2, #2
 801426a:	0092      	lsls	r2, r2, #2
 801426c:	f107 010c 	add.w	r1, r7, #12
 8014270:	300c      	adds	r0, #12
 8014272:	f7fe fc75 	bl	8012b60 <memcpy>
 8014276:	2201      	movs	r2, #1
 8014278:	4629      	mov	r1, r5
 801427a:	4620      	mov	r0, r4
 801427c:	f000 fd32 	bl	8014ce4 <__lshift>
 8014280:	9b00      	ldr	r3, [sp, #0]
 8014282:	3301      	adds	r3, #1
 8014284:	9301      	str	r3, [sp, #4]
 8014286:	9b00      	ldr	r3, [sp, #0]
 8014288:	444b      	add	r3, r9
 801428a:	9307      	str	r3, [sp, #28]
 801428c:	9b02      	ldr	r3, [sp, #8]
 801428e:	f003 0301 	and.w	r3, r3, #1
 8014292:	46b8      	mov	r8, r7
 8014294:	9306      	str	r3, [sp, #24]
 8014296:	4607      	mov	r7, r0
 8014298:	9b01      	ldr	r3, [sp, #4]
 801429a:	4631      	mov	r1, r6
 801429c:	3b01      	subs	r3, #1
 801429e:	4658      	mov	r0, fp
 80142a0:	9302      	str	r3, [sp, #8]
 80142a2:	f7ff fa67 	bl	8013774 <quorem>
 80142a6:	4603      	mov	r3, r0
 80142a8:	3330      	adds	r3, #48	; 0x30
 80142aa:	9004      	str	r0, [sp, #16]
 80142ac:	4641      	mov	r1, r8
 80142ae:	4658      	mov	r0, fp
 80142b0:	9308      	str	r3, [sp, #32]
 80142b2:	f000 fd83 	bl	8014dbc <__mcmp>
 80142b6:	463a      	mov	r2, r7
 80142b8:	4681      	mov	r9, r0
 80142ba:	4631      	mov	r1, r6
 80142bc:	4620      	mov	r0, r4
 80142be:	f000 fd99 	bl	8014df4 <__mdiff>
 80142c2:	68c2      	ldr	r2, [r0, #12]
 80142c4:	9b08      	ldr	r3, [sp, #32]
 80142c6:	4605      	mov	r5, r0
 80142c8:	bb02      	cbnz	r2, 801430c <_dtoa_r+0xa7c>
 80142ca:	4601      	mov	r1, r0
 80142cc:	4658      	mov	r0, fp
 80142ce:	f000 fd75 	bl	8014dbc <__mcmp>
 80142d2:	9b08      	ldr	r3, [sp, #32]
 80142d4:	4602      	mov	r2, r0
 80142d6:	4629      	mov	r1, r5
 80142d8:	4620      	mov	r0, r4
 80142da:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80142de:	f000 fb2f 	bl	8014940 <_Bfree>
 80142e2:	9b05      	ldr	r3, [sp, #20]
 80142e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80142e6:	9d01      	ldr	r5, [sp, #4]
 80142e8:	ea43 0102 	orr.w	r1, r3, r2
 80142ec:	9b06      	ldr	r3, [sp, #24]
 80142ee:	430b      	orrs	r3, r1
 80142f0:	9b08      	ldr	r3, [sp, #32]
 80142f2:	d10d      	bne.n	8014310 <_dtoa_r+0xa80>
 80142f4:	2b39      	cmp	r3, #57	; 0x39
 80142f6:	d029      	beq.n	801434c <_dtoa_r+0xabc>
 80142f8:	f1b9 0f00 	cmp.w	r9, #0
 80142fc:	dd01      	ble.n	8014302 <_dtoa_r+0xa72>
 80142fe:	9b04      	ldr	r3, [sp, #16]
 8014300:	3331      	adds	r3, #49	; 0x31
 8014302:	9a02      	ldr	r2, [sp, #8]
 8014304:	7013      	strb	r3, [r2, #0]
 8014306:	e774      	b.n	80141f2 <_dtoa_r+0x962>
 8014308:	4638      	mov	r0, r7
 801430a:	e7b9      	b.n	8014280 <_dtoa_r+0x9f0>
 801430c:	2201      	movs	r2, #1
 801430e:	e7e2      	b.n	80142d6 <_dtoa_r+0xa46>
 8014310:	f1b9 0f00 	cmp.w	r9, #0
 8014314:	db06      	blt.n	8014324 <_dtoa_r+0xa94>
 8014316:	9905      	ldr	r1, [sp, #20]
 8014318:	ea41 0909 	orr.w	r9, r1, r9
 801431c:	9906      	ldr	r1, [sp, #24]
 801431e:	ea59 0101 	orrs.w	r1, r9, r1
 8014322:	d120      	bne.n	8014366 <_dtoa_r+0xad6>
 8014324:	2a00      	cmp	r2, #0
 8014326:	ddec      	ble.n	8014302 <_dtoa_r+0xa72>
 8014328:	4659      	mov	r1, fp
 801432a:	2201      	movs	r2, #1
 801432c:	4620      	mov	r0, r4
 801432e:	9301      	str	r3, [sp, #4]
 8014330:	f000 fcd8 	bl	8014ce4 <__lshift>
 8014334:	4631      	mov	r1, r6
 8014336:	4683      	mov	fp, r0
 8014338:	f000 fd40 	bl	8014dbc <__mcmp>
 801433c:	2800      	cmp	r0, #0
 801433e:	9b01      	ldr	r3, [sp, #4]
 8014340:	dc02      	bgt.n	8014348 <_dtoa_r+0xab8>
 8014342:	d1de      	bne.n	8014302 <_dtoa_r+0xa72>
 8014344:	07da      	lsls	r2, r3, #31
 8014346:	d5dc      	bpl.n	8014302 <_dtoa_r+0xa72>
 8014348:	2b39      	cmp	r3, #57	; 0x39
 801434a:	d1d8      	bne.n	80142fe <_dtoa_r+0xa6e>
 801434c:	9a02      	ldr	r2, [sp, #8]
 801434e:	2339      	movs	r3, #57	; 0x39
 8014350:	7013      	strb	r3, [r2, #0]
 8014352:	462b      	mov	r3, r5
 8014354:	461d      	mov	r5, r3
 8014356:	3b01      	subs	r3, #1
 8014358:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801435c:	2a39      	cmp	r2, #57	; 0x39
 801435e:	d050      	beq.n	8014402 <_dtoa_r+0xb72>
 8014360:	3201      	adds	r2, #1
 8014362:	701a      	strb	r2, [r3, #0]
 8014364:	e745      	b.n	80141f2 <_dtoa_r+0x962>
 8014366:	2a00      	cmp	r2, #0
 8014368:	dd03      	ble.n	8014372 <_dtoa_r+0xae2>
 801436a:	2b39      	cmp	r3, #57	; 0x39
 801436c:	d0ee      	beq.n	801434c <_dtoa_r+0xabc>
 801436e:	3301      	adds	r3, #1
 8014370:	e7c7      	b.n	8014302 <_dtoa_r+0xa72>
 8014372:	9a01      	ldr	r2, [sp, #4]
 8014374:	9907      	ldr	r1, [sp, #28]
 8014376:	f802 3c01 	strb.w	r3, [r2, #-1]
 801437a:	428a      	cmp	r2, r1
 801437c:	d02a      	beq.n	80143d4 <_dtoa_r+0xb44>
 801437e:	4659      	mov	r1, fp
 8014380:	2300      	movs	r3, #0
 8014382:	220a      	movs	r2, #10
 8014384:	4620      	mov	r0, r4
 8014386:	f000 fafd 	bl	8014984 <__multadd>
 801438a:	45b8      	cmp	r8, r7
 801438c:	4683      	mov	fp, r0
 801438e:	f04f 0300 	mov.w	r3, #0
 8014392:	f04f 020a 	mov.w	r2, #10
 8014396:	4641      	mov	r1, r8
 8014398:	4620      	mov	r0, r4
 801439a:	d107      	bne.n	80143ac <_dtoa_r+0xb1c>
 801439c:	f000 faf2 	bl	8014984 <__multadd>
 80143a0:	4680      	mov	r8, r0
 80143a2:	4607      	mov	r7, r0
 80143a4:	9b01      	ldr	r3, [sp, #4]
 80143a6:	3301      	adds	r3, #1
 80143a8:	9301      	str	r3, [sp, #4]
 80143aa:	e775      	b.n	8014298 <_dtoa_r+0xa08>
 80143ac:	f000 faea 	bl	8014984 <__multadd>
 80143b0:	4639      	mov	r1, r7
 80143b2:	4680      	mov	r8, r0
 80143b4:	2300      	movs	r3, #0
 80143b6:	220a      	movs	r2, #10
 80143b8:	4620      	mov	r0, r4
 80143ba:	f000 fae3 	bl	8014984 <__multadd>
 80143be:	4607      	mov	r7, r0
 80143c0:	e7f0      	b.n	80143a4 <_dtoa_r+0xb14>
 80143c2:	f1b9 0f00 	cmp.w	r9, #0
 80143c6:	9a00      	ldr	r2, [sp, #0]
 80143c8:	bfcc      	ite	gt
 80143ca:	464d      	movgt	r5, r9
 80143cc:	2501      	movle	r5, #1
 80143ce:	4415      	add	r5, r2
 80143d0:	f04f 0800 	mov.w	r8, #0
 80143d4:	4659      	mov	r1, fp
 80143d6:	2201      	movs	r2, #1
 80143d8:	4620      	mov	r0, r4
 80143da:	9301      	str	r3, [sp, #4]
 80143dc:	f000 fc82 	bl	8014ce4 <__lshift>
 80143e0:	4631      	mov	r1, r6
 80143e2:	4683      	mov	fp, r0
 80143e4:	f000 fcea 	bl	8014dbc <__mcmp>
 80143e8:	2800      	cmp	r0, #0
 80143ea:	dcb2      	bgt.n	8014352 <_dtoa_r+0xac2>
 80143ec:	d102      	bne.n	80143f4 <_dtoa_r+0xb64>
 80143ee:	9b01      	ldr	r3, [sp, #4]
 80143f0:	07db      	lsls	r3, r3, #31
 80143f2:	d4ae      	bmi.n	8014352 <_dtoa_r+0xac2>
 80143f4:	462b      	mov	r3, r5
 80143f6:	461d      	mov	r5, r3
 80143f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80143fc:	2a30      	cmp	r2, #48	; 0x30
 80143fe:	d0fa      	beq.n	80143f6 <_dtoa_r+0xb66>
 8014400:	e6f7      	b.n	80141f2 <_dtoa_r+0x962>
 8014402:	9a00      	ldr	r2, [sp, #0]
 8014404:	429a      	cmp	r2, r3
 8014406:	d1a5      	bne.n	8014354 <_dtoa_r+0xac4>
 8014408:	f10a 0a01 	add.w	sl, sl, #1
 801440c:	2331      	movs	r3, #49	; 0x31
 801440e:	e779      	b.n	8014304 <_dtoa_r+0xa74>
 8014410:	4b13      	ldr	r3, [pc, #76]	; (8014460 <_dtoa_r+0xbd0>)
 8014412:	f7ff baaf 	b.w	8013974 <_dtoa_r+0xe4>
 8014416:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014418:	2b00      	cmp	r3, #0
 801441a:	f47f aa86 	bne.w	801392a <_dtoa_r+0x9a>
 801441e:	4b11      	ldr	r3, [pc, #68]	; (8014464 <_dtoa_r+0xbd4>)
 8014420:	f7ff baa8 	b.w	8013974 <_dtoa_r+0xe4>
 8014424:	f1b9 0f00 	cmp.w	r9, #0
 8014428:	dc03      	bgt.n	8014432 <_dtoa_r+0xba2>
 801442a:	9b05      	ldr	r3, [sp, #20]
 801442c:	2b02      	cmp	r3, #2
 801442e:	f73f aec9 	bgt.w	80141c4 <_dtoa_r+0x934>
 8014432:	9d00      	ldr	r5, [sp, #0]
 8014434:	4631      	mov	r1, r6
 8014436:	4658      	mov	r0, fp
 8014438:	f7ff f99c 	bl	8013774 <quorem>
 801443c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8014440:	f805 3b01 	strb.w	r3, [r5], #1
 8014444:	9a00      	ldr	r2, [sp, #0]
 8014446:	1aaa      	subs	r2, r5, r2
 8014448:	4591      	cmp	r9, r2
 801444a:	ddba      	ble.n	80143c2 <_dtoa_r+0xb32>
 801444c:	4659      	mov	r1, fp
 801444e:	2300      	movs	r3, #0
 8014450:	220a      	movs	r2, #10
 8014452:	4620      	mov	r0, r4
 8014454:	f000 fa96 	bl	8014984 <__multadd>
 8014458:	4683      	mov	fp, r0
 801445a:	e7eb      	b.n	8014434 <_dtoa_r+0xba4>
 801445c:	080168ef 	.word	0x080168ef
 8014460:	08016848 	.word	0x08016848
 8014464:	0801686c 	.word	0x0801686c

08014468 <__sflush_r>:
 8014468:	898a      	ldrh	r2, [r1, #12]
 801446a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801446e:	4605      	mov	r5, r0
 8014470:	0710      	lsls	r0, r2, #28
 8014472:	460c      	mov	r4, r1
 8014474:	d458      	bmi.n	8014528 <__sflush_r+0xc0>
 8014476:	684b      	ldr	r3, [r1, #4]
 8014478:	2b00      	cmp	r3, #0
 801447a:	dc05      	bgt.n	8014488 <__sflush_r+0x20>
 801447c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801447e:	2b00      	cmp	r3, #0
 8014480:	dc02      	bgt.n	8014488 <__sflush_r+0x20>
 8014482:	2000      	movs	r0, #0
 8014484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014488:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801448a:	2e00      	cmp	r6, #0
 801448c:	d0f9      	beq.n	8014482 <__sflush_r+0x1a>
 801448e:	2300      	movs	r3, #0
 8014490:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014494:	682f      	ldr	r7, [r5, #0]
 8014496:	602b      	str	r3, [r5, #0]
 8014498:	d032      	beq.n	8014500 <__sflush_r+0x98>
 801449a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801449c:	89a3      	ldrh	r3, [r4, #12]
 801449e:	075a      	lsls	r2, r3, #29
 80144a0:	d505      	bpl.n	80144ae <__sflush_r+0x46>
 80144a2:	6863      	ldr	r3, [r4, #4]
 80144a4:	1ac0      	subs	r0, r0, r3
 80144a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80144a8:	b10b      	cbz	r3, 80144ae <__sflush_r+0x46>
 80144aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80144ac:	1ac0      	subs	r0, r0, r3
 80144ae:	2300      	movs	r3, #0
 80144b0:	4602      	mov	r2, r0
 80144b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80144b4:	6a21      	ldr	r1, [r4, #32]
 80144b6:	4628      	mov	r0, r5
 80144b8:	47b0      	blx	r6
 80144ba:	1c43      	adds	r3, r0, #1
 80144bc:	89a3      	ldrh	r3, [r4, #12]
 80144be:	d106      	bne.n	80144ce <__sflush_r+0x66>
 80144c0:	6829      	ldr	r1, [r5, #0]
 80144c2:	291d      	cmp	r1, #29
 80144c4:	d82c      	bhi.n	8014520 <__sflush_r+0xb8>
 80144c6:	4a2a      	ldr	r2, [pc, #168]	; (8014570 <__sflush_r+0x108>)
 80144c8:	40ca      	lsrs	r2, r1
 80144ca:	07d6      	lsls	r6, r2, #31
 80144cc:	d528      	bpl.n	8014520 <__sflush_r+0xb8>
 80144ce:	2200      	movs	r2, #0
 80144d0:	6062      	str	r2, [r4, #4]
 80144d2:	04d9      	lsls	r1, r3, #19
 80144d4:	6922      	ldr	r2, [r4, #16]
 80144d6:	6022      	str	r2, [r4, #0]
 80144d8:	d504      	bpl.n	80144e4 <__sflush_r+0x7c>
 80144da:	1c42      	adds	r2, r0, #1
 80144dc:	d101      	bne.n	80144e2 <__sflush_r+0x7a>
 80144de:	682b      	ldr	r3, [r5, #0]
 80144e0:	b903      	cbnz	r3, 80144e4 <__sflush_r+0x7c>
 80144e2:	6560      	str	r0, [r4, #84]	; 0x54
 80144e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80144e6:	602f      	str	r7, [r5, #0]
 80144e8:	2900      	cmp	r1, #0
 80144ea:	d0ca      	beq.n	8014482 <__sflush_r+0x1a>
 80144ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80144f0:	4299      	cmp	r1, r3
 80144f2:	d002      	beq.n	80144fa <__sflush_r+0x92>
 80144f4:	4628      	mov	r0, r5
 80144f6:	f000 fd71 	bl	8014fdc <_free_r>
 80144fa:	2000      	movs	r0, #0
 80144fc:	6360      	str	r0, [r4, #52]	; 0x34
 80144fe:	e7c1      	b.n	8014484 <__sflush_r+0x1c>
 8014500:	6a21      	ldr	r1, [r4, #32]
 8014502:	2301      	movs	r3, #1
 8014504:	4628      	mov	r0, r5
 8014506:	47b0      	blx	r6
 8014508:	1c41      	adds	r1, r0, #1
 801450a:	d1c7      	bne.n	801449c <__sflush_r+0x34>
 801450c:	682b      	ldr	r3, [r5, #0]
 801450e:	2b00      	cmp	r3, #0
 8014510:	d0c4      	beq.n	801449c <__sflush_r+0x34>
 8014512:	2b1d      	cmp	r3, #29
 8014514:	d001      	beq.n	801451a <__sflush_r+0xb2>
 8014516:	2b16      	cmp	r3, #22
 8014518:	d101      	bne.n	801451e <__sflush_r+0xb6>
 801451a:	602f      	str	r7, [r5, #0]
 801451c:	e7b1      	b.n	8014482 <__sflush_r+0x1a>
 801451e:	89a3      	ldrh	r3, [r4, #12]
 8014520:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014524:	81a3      	strh	r3, [r4, #12]
 8014526:	e7ad      	b.n	8014484 <__sflush_r+0x1c>
 8014528:	690f      	ldr	r7, [r1, #16]
 801452a:	2f00      	cmp	r7, #0
 801452c:	d0a9      	beq.n	8014482 <__sflush_r+0x1a>
 801452e:	0793      	lsls	r3, r2, #30
 8014530:	680e      	ldr	r6, [r1, #0]
 8014532:	bf08      	it	eq
 8014534:	694b      	ldreq	r3, [r1, #20]
 8014536:	600f      	str	r7, [r1, #0]
 8014538:	bf18      	it	ne
 801453a:	2300      	movne	r3, #0
 801453c:	eba6 0807 	sub.w	r8, r6, r7
 8014540:	608b      	str	r3, [r1, #8]
 8014542:	f1b8 0f00 	cmp.w	r8, #0
 8014546:	dd9c      	ble.n	8014482 <__sflush_r+0x1a>
 8014548:	6a21      	ldr	r1, [r4, #32]
 801454a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801454c:	4643      	mov	r3, r8
 801454e:	463a      	mov	r2, r7
 8014550:	4628      	mov	r0, r5
 8014552:	47b0      	blx	r6
 8014554:	2800      	cmp	r0, #0
 8014556:	dc06      	bgt.n	8014566 <__sflush_r+0xfe>
 8014558:	89a3      	ldrh	r3, [r4, #12]
 801455a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801455e:	81a3      	strh	r3, [r4, #12]
 8014560:	f04f 30ff 	mov.w	r0, #4294967295
 8014564:	e78e      	b.n	8014484 <__sflush_r+0x1c>
 8014566:	4407      	add	r7, r0
 8014568:	eba8 0800 	sub.w	r8, r8, r0
 801456c:	e7e9      	b.n	8014542 <__sflush_r+0xda>
 801456e:	bf00      	nop
 8014570:	20400001 	.word	0x20400001

08014574 <_fflush_r>:
 8014574:	b538      	push	{r3, r4, r5, lr}
 8014576:	690b      	ldr	r3, [r1, #16]
 8014578:	4605      	mov	r5, r0
 801457a:	460c      	mov	r4, r1
 801457c:	b913      	cbnz	r3, 8014584 <_fflush_r+0x10>
 801457e:	2500      	movs	r5, #0
 8014580:	4628      	mov	r0, r5
 8014582:	bd38      	pop	{r3, r4, r5, pc}
 8014584:	b118      	cbz	r0, 801458e <_fflush_r+0x1a>
 8014586:	6983      	ldr	r3, [r0, #24]
 8014588:	b90b      	cbnz	r3, 801458e <_fflush_r+0x1a>
 801458a:	f000 f887 	bl	801469c <__sinit>
 801458e:	4b14      	ldr	r3, [pc, #80]	; (80145e0 <_fflush_r+0x6c>)
 8014590:	429c      	cmp	r4, r3
 8014592:	d11b      	bne.n	80145cc <_fflush_r+0x58>
 8014594:	686c      	ldr	r4, [r5, #4]
 8014596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d0ef      	beq.n	801457e <_fflush_r+0xa>
 801459e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80145a0:	07d0      	lsls	r0, r2, #31
 80145a2:	d404      	bmi.n	80145ae <_fflush_r+0x3a>
 80145a4:	0599      	lsls	r1, r3, #22
 80145a6:	d402      	bmi.n	80145ae <_fflush_r+0x3a>
 80145a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145aa:	f000 f91a 	bl	80147e2 <__retarget_lock_acquire_recursive>
 80145ae:	4628      	mov	r0, r5
 80145b0:	4621      	mov	r1, r4
 80145b2:	f7ff ff59 	bl	8014468 <__sflush_r>
 80145b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80145b8:	07da      	lsls	r2, r3, #31
 80145ba:	4605      	mov	r5, r0
 80145bc:	d4e0      	bmi.n	8014580 <_fflush_r+0xc>
 80145be:	89a3      	ldrh	r3, [r4, #12]
 80145c0:	059b      	lsls	r3, r3, #22
 80145c2:	d4dd      	bmi.n	8014580 <_fflush_r+0xc>
 80145c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80145c6:	f000 f90d 	bl	80147e4 <__retarget_lock_release_recursive>
 80145ca:	e7d9      	b.n	8014580 <_fflush_r+0xc>
 80145cc:	4b05      	ldr	r3, [pc, #20]	; (80145e4 <_fflush_r+0x70>)
 80145ce:	429c      	cmp	r4, r3
 80145d0:	d101      	bne.n	80145d6 <_fflush_r+0x62>
 80145d2:	68ac      	ldr	r4, [r5, #8]
 80145d4:	e7df      	b.n	8014596 <_fflush_r+0x22>
 80145d6:	4b04      	ldr	r3, [pc, #16]	; (80145e8 <_fflush_r+0x74>)
 80145d8:	429c      	cmp	r4, r3
 80145da:	bf08      	it	eq
 80145dc:	68ec      	ldreq	r4, [r5, #12]
 80145de:	e7da      	b.n	8014596 <_fflush_r+0x22>
 80145e0:	08016920 	.word	0x08016920
 80145e4:	08016940 	.word	0x08016940
 80145e8:	08016900 	.word	0x08016900

080145ec <std>:
 80145ec:	2300      	movs	r3, #0
 80145ee:	b510      	push	{r4, lr}
 80145f0:	4604      	mov	r4, r0
 80145f2:	e9c0 3300 	strd	r3, r3, [r0]
 80145f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80145fa:	6083      	str	r3, [r0, #8]
 80145fc:	8181      	strh	r1, [r0, #12]
 80145fe:	6643      	str	r3, [r0, #100]	; 0x64
 8014600:	81c2      	strh	r2, [r0, #14]
 8014602:	6183      	str	r3, [r0, #24]
 8014604:	4619      	mov	r1, r3
 8014606:	2208      	movs	r2, #8
 8014608:	305c      	adds	r0, #92	; 0x5c
 801460a:	f7fe fab7 	bl	8012b7c <memset>
 801460e:	4b05      	ldr	r3, [pc, #20]	; (8014624 <std+0x38>)
 8014610:	6263      	str	r3, [r4, #36]	; 0x24
 8014612:	4b05      	ldr	r3, [pc, #20]	; (8014628 <std+0x3c>)
 8014614:	62a3      	str	r3, [r4, #40]	; 0x28
 8014616:	4b05      	ldr	r3, [pc, #20]	; (801462c <std+0x40>)
 8014618:	62e3      	str	r3, [r4, #44]	; 0x2c
 801461a:	4b05      	ldr	r3, [pc, #20]	; (8014630 <std+0x44>)
 801461c:	6224      	str	r4, [r4, #32]
 801461e:	6323      	str	r3, [r4, #48]	; 0x30
 8014620:	bd10      	pop	{r4, pc}
 8014622:	bf00      	nop
 8014624:	080156bd 	.word	0x080156bd
 8014628:	080156df 	.word	0x080156df
 801462c:	08015717 	.word	0x08015717
 8014630:	0801573b 	.word	0x0801573b

08014634 <_cleanup_r>:
 8014634:	4901      	ldr	r1, [pc, #4]	; (801463c <_cleanup_r+0x8>)
 8014636:	f000 b8af 	b.w	8014798 <_fwalk_reent>
 801463a:	bf00      	nop
 801463c:	08014575 	.word	0x08014575

08014640 <__sfmoreglue>:
 8014640:	b570      	push	{r4, r5, r6, lr}
 8014642:	1e4a      	subs	r2, r1, #1
 8014644:	2568      	movs	r5, #104	; 0x68
 8014646:	4355      	muls	r5, r2
 8014648:	460e      	mov	r6, r1
 801464a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801464e:	f000 fd15 	bl	801507c <_malloc_r>
 8014652:	4604      	mov	r4, r0
 8014654:	b140      	cbz	r0, 8014668 <__sfmoreglue+0x28>
 8014656:	2100      	movs	r1, #0
 8014658:	e9c0 1600 	strd	r1, r6, [r0]
 801465c:	300c      	adds	r0, #12
 801465e:	60a0      	str	r0, [r4, #8]
 8014660:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014664:	f7fe fa8a 	bl	8012b7c <memset>
 8014668:	4620      	mov	r0, r4
 801466a:	bd70      	pop	{r4, r5, r6, pc}

0801466c <__sfp_lock_acquire>:
 801466c:	4801      	ldr	r0, [pc, #4]	; (8014674 <__sfp_lock_acquire+0x8>)
 801466e:	f000 b8b8 	b.w	80147e2 <__retarget_lock_acquire_recursive>
 8014672:	bf00      	nop
 8014674:	20002c24 	.word	0x20002c24

08014678 <__sfp_lock_release>:
 8014678:	4801      	ldr	r0, [pc, #4]	; (8014680 <__sfp_lock_release+0x8>)
 801467a:	f000 b8b3 	b.w	80147e4 <__retarget_lock_release_recursive>
 801467e:	bf00      	nop
 8014680:	20002c24 	.word	0x20002c24

08014684 <__sinit_lock_acquire>:
 8014684:	4801      	ldr	r0, [pc, #4]	; (801468c <__sinit_lock_acquire+0x8>)
 8014686:	f000 b8ac 	b.w	80147e2 <__retarget_lock_acquire_recursive>
 801468a:	bf00      	nop
 801468c:	20002c1f 	.word	0x20002c1f

08014690 <__sinit_lock_release>:
 8014690:	4801      	ldr	r0, [pc, #4]	; (8014698 <__sinit_lock_release+0x8>)
 8014692:	f000 b8a7 	b.w	80147e4 <__retarget_lock_release_recursive>
 8014696:	bf00      	nop
 8014698:	20002c1f 	.word	0x20002c1f

0801469c <__sinit>:
 801469c:	b510      	push	{r4, lr}
 801469e:	4604      	mov	r4, r0
 80146a0:	f7ff fff0 	bl	8014684 <__sinit_lock_acquire>
 80146a4:	69a3      	ldr	r3, [r4, #24]
 80146a6:	b11b      	cbz	r3, 80146b0 <__sinit+0x14>
 80146a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146ac:	f7ff bff0 	b.w	8014690 <__sinit_lock_release>
 80146b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80146b4:	6523      	str	r3, [r4, #80]	; 0x50
 80146b6:	4b13      	ldr	r3, [pc, #76]	; (8014704 <__sinit+0x68>)
 80146b8:	4a13      	ldr	r2, [pc, #76]	; (8014708 <__sinit+0x6c>)
 80146ba:	681b      	ldr	r3, [r3, #0]
 80146bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80146be:	42a3      	cmp	r3, r4
 80146c0:	bf04      	itt	eq
 80146c2:	2301      	moveq	r3, #1
 80146c4:	61a3      	streq	r3, [r4, #24]
 80146c6:	4620      	mov	r0, r4
 80146c8:	f000 f820 	bl	801470c <__sfp>
 80146cc:	6060      	str	r0, [r4, #4]
 80146ce:	4620      	mov	r0, r4
 80146d0:	f000 f81c 	bl	801470c <__sfp>
 80146d4:	60a0      	str	r0, [r4, #8]
 80146d6:	4620      	mov	r0, r4
 80146d8:	f000 f818 	bl	801470c <__sfp>
 80146dc:	2200      	movs	r2, #0
 80146de:	60e0      	str	r0, [r4, #12]
 80146e0:	2104      	movs	r1, #4
 80146e2:	6860      	ldr	r0, [r4, #4]
 80146e4:	f7ff ff82 	bl	80145ec <std>
 80146e8:	68a0      	ldr	r0, [r4, #8]
 80146ea:	2201      	movs	r2, #1
 80146ec:	2109      	movs	r1, #9
 80146ee:	f7ff ff7d 	bl	80145ec <std>
 80146f2:	68e0      	ldr	r0, [r4, #12]
 80146f4:	2202      	movs	r2, #2
 80146f6:	2112      	movs	r1, #18
 80146f8:	f7ff ff78 	bl	80145ec <std>
 80146fc:	2301      	movs	r3, #1
 80146fe:	61a3      	str	r3, [r4, #24]
 8014700:	e7d2      	b.n	80146a8 <__sinit+0xc>
 8014702:	bf00      	nop
 8014704:	08016834 	.word	0x08016834
 8014708:	08014635 	.word	0x08014635

0801470c <__sfp>:
 801470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801470e:	4607      	mov	r7, r0
 8014710:	f7ff ffac 	bl	801466c <__sfp_lock_acquire>
 8014714:	4b1e      	ldr	r3, [pc, #120]	; (8014790 <__sfp+0x84>)
 8014716:	681e      	ldr	r6, [r3, #0]
 8014718:	69b3      	ldr	r3, [r6, #24]
 801471a:	b913      	cbnz	r3, 8014722 <__sfp+0x16>
 801471c:	4630      	mov	r0, r6
 801471e:	f7ff ffbd 	bl	801469c <__sinit>
 8014722:	3648      	adds	r6, #72	; 0x48
 8014724:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014728:	3b01      	subs	r3, #1
 801472a:	d503      	bpl.n	8014734 <__sfp+0x28>
 801472c:	6833      	ldr	r3, [r6, #0]
 801472e:	b30b      	cbz	r3, 8014774 <__sfp+0x68>
 8014730:	6836      	ldr	r6, [r6, #0]
 8014732:	e7f7      	b.n	8014724 <__sfp+0x18>
 8014734:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014738:	b9d5      	cbnz	r5, 8014770 <__sfp+0x64>
 801473a:	4b16      	ldr	r3, [pc, #88]	; (8014794 <__sfp+0x88>)
 801473c:	60e3      	str	r3, [r4, #12]
 801473e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014742:	6665      	str	r5, [r4, #100]	; 0x64
 8014744:	f000 f84c 	bl	80147e0 <__retarget_lock_init_recursive>
 8014748:	f7ff ff96 	bl	8014678 <__sfp_lock_release>
 801474c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014750:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014754:	6025      	str	r5, [r4, #0]
 8014756:	61a5      	str	r5, [r4, #24]
 8014758:	2208      	movs	r2, #8
 801475a:	4629      	mov	r1, r5
 801475c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014760:	f7fe fa0c 	bl	8012b7c <memset>
 8014764:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014768:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801476c:	4620      	mov	r0, r4
 801476e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014770:	3468      	adds	r4, #104	; 0x68
 8014772:	e7d9      	b.n	8014728 <__sfp+0x1c>
 8014774:	2104      	movs	r1, #4
 8014776:	4638      	mov	r0, r7
 8014778:	f7ff ff62 	bl	8014640 <__sfmoreglue>
 801477c:	4604      	mov	r4, r0
 801477e:	6030      	str	r0, [r6, #0]
 8014780:	2800      	cmp	r0, #0
 8014782:	d1d5      	bne.n	8014730 <__sfp+0x24>
 8014784:	f7ff ff78 	bl	8014678 <__sfp_lock_release>
 8014788:	230c      	movs	r3, #12
 801478a:	603b      	str	r3, [r7, #0]
 801478c:	e7ee      	b.n	801476c <__sfp+0x60>
 801478e:	bf00      	nop
 8014790:	08016834 	.word	0x08016834
 8014794:	ffff0001 	.word	0xffff0001

08014798 <_fwalk_reent>:
 8014798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801479c:	4606      	mov	r6, r0
 801479e:	4688      	mov	r8, r1
 80147a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80147a4:	2700      	movs	r7, #0
 80147a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80147aa:	f1b9 0901 	subs.w	r9, r9, #1
 80147ae:	d505      	bpl.n	80147bc <_fwalk_reent+0x24>
 80147b0:	6824      	ldr	r4, [r4, #0]
 80147b2:	2c00      	cmp	r4, #0
 80147b4:	d1f7      	bne.n	80147a6 <_fwalk_reent+0xe>
 80147b6:	4638      	mov	r0, r7
 80147b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80147bc:	89ab      	ldrh	r3, [r5, #12]
 80147be:	2b01      	cmp	r3, #1
 80147c0:	d907      	bls.n	80147d2 <_fwalk_reent+0x3a>
 80147c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80147c6:	3301      	adds	r3, #1
 80147c8:	d003      	beq.n	80147d2 <_fwalk_reent+0x3a>
 80147ca:	4629      	mov	r1, r5
 80147cc:	4630      	mov	r0, r6
 80147ce:	47c0      	blx	r8
 80147d0:	4307      	orrs	r7, r0
 80147d2:	3568      	adds	r5, #104	; 0x68
 80147d4:	e7e9      	b.n	80147aa <_fwalk_reent+0x12>
	...

080147d8 <_localeconv_r>:
 80147d8:	4800      	ldr	r0, [pc, #0]	; (80147dc <_localeconv_r+0x4>)
 80147da:	4770      	bx	lr
 80147dc:	20000a84 	.word	0x20000a84

080147e0 <__retarget_lock_init_recursive>:
 80147e0:	4770      	bx	lr

080147e2 <__retarget_lock_acquire_recursive>:
 80147e2:	4770      	bx	lr

080147e4 <__retarget_lock_release_recursive>:
 80147e4:	4770      	bx	lr

080147e6 <__swhatbuf_r>:
 80147e6:	b570      	push	{r4, r5, r6, lr}
 80147e8:	460e      	mov	r6, r1
 80147ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80147ee:	2900      	cmp	r1, #0
 80147f0:	b096      	sub	sp, #88	; 0x58
 80147f2:	4614      	mov	r4, r2
 80147f4:	461d      	mov	r5, r3
 80147f6:	da07      	bge.n	8014808 <__swhatbuf_r+0x22>
 80147f8:	2300      	movs	r3, #0
 80147fa:	602b      	str	r3, [r5, #0]
 80147fc:	89b3      	ldrh	r3, [r6, #12]
 80147fe:	061a      	lsls	r2, r3, #24
 8014800:	d410      	bmi.n	8014824 <__swhatbuf_r+0x3e>
 8014802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014806:	e00e      	b.n	8014826 <__swhatbuf_r+0x40>
 8014808:	466a      	mov	r2, sp
 801480a:	f000 ffed 	bl	80157e8 <_fstat_r>
 801480e:	2800      	cmp	r0, #0
 8014810:	dbf2      	blt.n	80147f8 <__swhatbuf_r+0x12>
 8014812:	9a01      	ldr	r2, [sp, #4]
 8014814:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014818:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801481c:	425a      	negs	r2, r3
 801481e:	415a      	adcs	r2, r3
 8014820:	602a      	str	r2, [r5, #0]
 8014822:	e7ee      	b.n	8014802 <__swhatbuf_r+0x1c>
 8014824:	2340      	movs	r3, #64	; 0x40
 8014826:	2000      	movs	r0, #0
 8014828:	6023      	str	r3, [r4, #0]
 801482a:	b016      	add	sp, #88	; 0x58
 801482c:	bd70      	pop	{r4, r5, r6, pc}
	...

08014830 <__smakebuf_r>:
 8014830:	898b      	ldrh	r3, [r1, #12]
 8014832:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014834:	079d      	lsls	r5, r3, #30
 8014836:	4606      	mov	r6, r0
 8014838:	460c      	mov	r4, r1
 801483a:	d507      	bpl.n	801484c <__smakebuf_r+0x1c>
 801483c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014840:	6023      	str	r3, [r4, #0]
 8014842:	6123      	str	r3, [r4, #16]
 8014844:	2301      	movs	r3, #1
 8014846:	6163      	str	r3, [r4, #20]
 8014848:	b002      	add	sp, #8
 801484a:	bd70      	pop	{r4, r5, r6, pc}
 801484c:	ab01      	add	r3, sp, #4
 801484e:	466a      	mov	r2, sp
 8014850:	f7ff ffc9 	bl	80147e6 <__swhatbuf_r>
 8014854:	9900      	ldr	r1, [sp, #0]
 8014856:	4605      	mov	r5, r0
 8014858:	4630      	mov	r0, r6
 801485a:	f000 fc0f 	bl	801507c <_malloc_r>
 801485e:	b948      	cbnz	r0, 8014874 <__smakebuf_r+0x44>
 8014860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014864:	059a      	lsls	r2, r3, #22
 8014866:	d4ef      	bmi.n	8014848 <__smakebuf_r+0x18>
 8014868:	f023 0303 	bic.w	r3, r3, #3
 801486c:	f043 0302 	orr.w	r3, r3, #2
 8014870:	81a3      	strh	r3, [r4, #12]
 8014872:	e7e3      	b.n	801483c <__smakebuf_r+0xc>
 8014874:	4b0d      	ldr	r3, [pc, #52]	; (80148ac <__smakebuf_r+0x7c>)
 8014876:	62b3      	str	r3, [r6, #40]	; 0x28
 8014878:	89a3      	ldrh	r3, [r4, #12]
 801487a:	6020      	str	r0, [r4, #0]
 801487c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014880:	81a3      	strh	r3, [r4, #12]
 8014882:	9b00      	ldr	r3, [sp, #0]
 8014884:	6163      	str	r3, [r4, #20]
 8014886:	9b01      	ldr	r3, [sp, #4]
 8014888:	6120      	str	r0, [r4, #16]
 801488a:	b15b      	cbz	r3, 80148a4 <__smakebuf_r+0x74>
 801488c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014890:	4630      	mov	r0, r6
 8014892:	f000 ffbb 	bl	801580c <_isatty_r>
 8014896:	b128      	cbz	r0, 80148a4 <__smakebuf_r+0x74>
 8014898:	89a3      	ldrh	r3, [r4, #12]
 801489a:	f023 0303 	bic.w	r3, r3, #3
 801489e:	f043 0301 	orr.w	r3, r3, #1
 80148a2:	81a3      	strh	r3, [r4, #12]
 80148a4:	89a0      	ldrh	r0, [r4, #12]
 80148a6:	4305      	orrs	r5, r0
 80148a8:	81a5      	strh	r5, [r4, #12]
 80148aa:	e7cd      	b.n	8014848 <__smakebuf_r+0x18>
 80148ac:	08014635 	.word	0x08014635

080148b0 <malloc>:
 80148b0:	4b02      	ldr	r3, [pc, #8]	; (80148bc <malloc+0xc>)
 80148b2:	4601      	mov	r1, r0
 80148b4:	6818      	ldr	r0, [r3, #0]
 80148b6:	f000 bbe1 	b.w	801507c <_malloc_r>
 80148ba:	bf00      	nop
 80148bc:	20000930 	.word	0x20000930

080148c0 <_Balloc>:
 80148c0:	b570      	push	{r4, r5, r6, lr}
 80148c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80148c4:	4604      	mov	r4, r0
 80148c6:	460d      	mov	r5, r1
 80148c8:	b976      	cbnz	r6, 80148e8 <_Balloc+0x28>
 80148ca:	2010      	movs	r0, #16
 80148cc:	f7ff fff0 	bl	80148b0 <malloc>
 80148d0:	4602      	mov	r2, r0
 80148d2:	6260      	str	r0, [r4, #36]	; 0x24
 80148d4:	b920      	cbnz	r0, 80148e0 <_Balloc+0x20>
 80148d6:	4b18      	ldr	r3, [pc, #96]	; (8014938 <_Balloc+0x78>)
 80148d8:	4818      	ldr	r0, [pc, #96]	; (801493c <_Balloc+0x7c>)
 80148da:	2166      	movs	r1, #102	; 0x66
 80148dc:	f000 ff44 	bl	8015768 <__assert_func>
 80148e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80148e4:	6006      	str	r6, [r0, #0]
 80148e6:	60c6      	str	r6, [r0, #12]
 80148e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80148ea:	68f3      	ldr	r3, [r6, #12]
 80148ec:	b183      	cbz	r3, 8014910 <_Balloc+0x50>
 80148ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80148f6:	b9b8      	cbnz	r0, 8014928 <_Balloc+0x68>
 80148f8:	2101      	movs	r1, #1
 80148fa:	fa01 f605 	lsl.w	r6, r1, r5
 80148fe:	1d72      	adds	r2, r6, #5
 8014900:	0092      	lsls	r2, r2, #2
 8014902:	4620      	mov	r0, r4
 8014904:	f000 fb5a 	bl	8014fbc <_calloc_r>
 8014908:	b160      	cbz	r0, 8014924 <_Balloc+0x64>
 801490a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801490e:	e00e      	b.n	801492e <_Balloc+0x6e>
 8014910:	2221      	movs	r2, #33	; 0x21
 8014912:	2104      	movs	r1, #4
 8014914:	4620      	mov	r0, r4
 8014916:	f000 fb51 	bl	8014fbc <_calloc_r>
 801491a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801491c:	60f0      	str	r0, [r6, #12]
 801491e:	68db      	ldr	r3, [r3, #12]
 8014920:	2b00      	cmp	r3, #0
 8014922:	d1e4      	bne.n	80148ee <_Balloc+0x2e>
 8014924:	2000      	movs	r0, #0
 8014926:	bd70      	pop	{r4, r5, r6, pc}
 8014928:	6802      	ldr	r2, [r0, #0]
 801492a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801492e:	2300      	movs	r3, #0
 8014930:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8014934:	e7f7      	b.n	8014926 <_Balloc+0x66>
 8014936:	bf00      	nop
 8014938:	08016879 	.word	0x08016879
 801493c:	08016960 	.word	0x08016960

08014940 <_Bfree>:
 8014940:	b570      	push	{r4, r5, r6, lr}
 8014942:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8014944:	4605      	mov	r5, r0
 8014946:	460c      	mov	r4, r1
 8014948:	b976      	cbnz	r6, 8014968 <_Bfree+0x28>
 801494a:	2010      	movs	r0, #16
 801494c:	f7ff ffb0 	bl	80148b0 <malloc>
 8014950:	4602      	mov	r2, r0
 8014952:	6268      	str	r0, [r5, #36]	; 0x24
 8014954:	b920      	cbnz	r0, 8014960 <_Bfree+0x20>
 8014956:	4b09      	ldr	r3, [pc, #36]	; (801497c <_Bfree+0x3c>)
 8014958:	4809      	ldr	r0, [pc, #36]	; (8014980 <_Bfree+0x40>)
 801495a:	218a      	movs	r1, #138	; 0x8a
 801495c:	f000 ff04 	bl	8015768 <__assert_func>
 8014960:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014964:	6006      	str	r6, [r0, #0]
 8014966:	60c6      	str	r6, [r0, #12]
 8014968:	b13c      	cbz	r4, 801497a <_Bfree+0x3a>
 801496a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801496c:	6862      	ldr	r2, [r4, #4]
 801496e:	68db      	ldr	r3, [r3, #12]
 8014970:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014974:	6021      	str	r1, [r4, #0]
 8014976:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801497a:	bd70      	pop	{r4, r5, r6, pc}
 801497c:	08016879 	.word	0x08016879
 8014980:	08016960 	.word	0x08016960

08014984 <__multadd>:
 8014984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014988:	690e      	ldr	r6, [r1, #16]
 801498a:	4607      	mov	r7, r0
 801498c:	4698      	mov	r8, r3
 801498e:	460c      	mov	r4, r1
 8014990:	f101 0014 	add.w	r0, r1, #20
 8014994:	2300      	movs	r3, #0
 8014996:	6805      	ldr	r5, [r0, #0]
 8014998:	b2a9      	uxth	r1, r5
 801499a:	fb02 8101 	mla	r1, r2, r1, r8
 801499e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80149a2:	0c2d      	lsrs	r5, r5, #16
 80149a4:	fb02 c505 	mla	r5, r2, r5, ip
 80149a8:	b289      	uxth	r1, r1
 80149aa:	3301      	adds	r3, #1
 80149ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80149b0:	429e      	cmp	r6, r3
 80149b2:	f840 1b04 	str.w	r1, [r0], #4
 80149b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80149ba:	dcec      	bgt.n	8014996 <__multadd+0x12>
 80149bc:	f1b8 0f00 	cmp.w	r8, #0
 80149c0:	d022      	beq.n	8014a08 <__multadd+0x84>
 80149c2:	68a3      	ldr	r3, [r4, #8]
 80149c4:	42b3      	cmp	r3, r6
 80149c6:	dc19      	bgt.n	80149fc <__multadd+0x78>
 80149c8:	6861      	ldr	r1, [r4, #4]
 80149ca:	4638      	mov	r0, r7
 80149cc:	3101      	adds	r1, #1
 80149ce:	f7ff ff77 	bl	80148c0 <_Balloc>
 80149d2:	4605      	mov	r5, r0
 80149d4:	b928      	cbnz	r0, 80149e2 <__multadd+0x5e>
 80149d6:	4602      	mov	r2, r0
 80149d8:	4b0d      	ldr	r3, [pc, #52]	; (8014a10 <__multadd+0x8c>)
 80149da:	480e      	ldr	r0, [pc, #56]	; (8014a14 <__multadd+0x90>)
 80149dc:	21b5      	movs	r1, #181	; 0xb5
 80149de:	f000 fec3 	bl	8015768 <__assert_func>
 80149e2:	6922      	ldr	r2, [r4, #16]
 80149e4:	3202      	adds	r2, #2
 80149e6:	f104 010c 	add.w	r1, r4, #12
 80149ea:	0092      	lsls	r2, r2, #2
 80149ec:	300c      	adds	r0, #12
 80149ee:	f7fe f8b7 	bl	8012b60 <memcpy>
 80149f2:	4621      	mov	r1, r4
 80149f4:	4638      	mov	r0, r7
 80149f6:	f7ff ffa3 	bl	8014940 <_Bfree>
 80149fa:	462c      	mov	r4, r5
 80149fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8014a00:	3601      	adds	r6, #1
 8014a02:	f8c3 8014 	str.w	r8, [r3, #20]
 8014a06:	6126      	str	r6, [r4, #16]
 8014a08:	4620      	mov	r0, r4
 8014a0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014a0e:	bf00      	nop
 8014a10:	080168ef 	.word	0x080168ef
 8014a14:	08016960 	.word	0x08016960

08014a18 <__hi0bits>:
 8014a18:	0c03      	lsrs	r3, r0, #16
 8014a1a:	041b      	lsls	r3, r3, #16
 8014a1c:	b9d3      	cbnz	r3, 8014a54 <__hi0bits+0x3c>
 8014a1e:	0400      	lsls	r0, r0, #16
 8014a20:	2310      	movs	r3, #16
 8014a22:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8014a26:	bf04      	itt	eq
 8014a28:	0200      	lsleq	r0, r0, #8
 8014a2a:	3308      	addeq	r3, #8
 8014a2c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8014a30:	bf04      	itt	eq
 8014a32:	0100      	lsleq	r0, r0, #4
 8014a34:	3304      	addeq	r3, #4
 8014a36:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8014a3a:	bf04      	itt	eq
 8014a3c:	0080      	lsleq	r0, r0, #2
 8014a3e:	3302      	addeq	r3, #2
 8014a40:	2800      	cmp	r0, #0
 8014a42:	db05      	blt.n	8014a50 <__hi0bits+0x38>
 8014a44:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8014a48:	f103 0301 	add.w	r3, r3, #1
 8014a4c:	bf08      	it	eq
 8014a4e:	2320      	moveq	r3, #32
 8014a50:	4618      	mov	r0, r3
 8014a52:	4770      	bx	lr
 8014a54:	2300      	movs	r3, #0
 8014a56:	e7e4      	b.n	8014a22 <__hi0bits+0xa>

08014a58 <__lo0bits>:
 8014a58:	6803      	ldr	r3, [r0, #0]
 8014a5a:	f013 0207 	ands.w	r2, r3, #7
 8014a5e:	4601      	mov	r1, r0
 8014a60:	d00b      	beq.n	8014a7a <__lo0bits+0x22>
 8014a62:	07da      	lsls	r2, r3, #31
 8014a64:	d424      	bmi.n	8014ab0 <__lo0bits+0x58>
 8014a66:	0798      	lsls	r0, r3, #30
 8014a68:	bf49      	itett	mi
 8014a6a:	085b      	lsrmi	r3, r3, #1
 8014a6c:	089b      	lsrpl	r3, r3, #2
 8014a6e:	2001      	movmi	r0, #1
 8014a70:	600b      	strmi	r3, [r1, #0]
 8014a72:	bf5c      	itt	pl
 8014a74:	600b      	strpl	r3, [r1, #0]
 8014a76:	2002      	movpl	r0, #2
 8014a78:	4770      	bx	lr
 8014a7a:	b298      	uxth	r0, r3
 8014a7c:	b9b0      	cbnz	r0, 8014aac <__lo0bits+0x54>
 8014a7e:	0c1b      	lsrs	r3, r3, #16
 8014a80:	2010      	movs	r0, #16
 8014a82:	f013 0fff 	tst.w	r3, #255	; 0xff
 8014a86:	bf04      	itt	eq
 8014a88:	0a1b      	lsreq	r3, r3, #8
 8014a8a:	3008      	addeq	r0, #8
 8014a8c:	071a      	lsls	r2, r3, #28
 8014a8e:	bf04      	itt	eq
 8014a90:	091b      	lsreq	r3, r3, #4
 8014a92:	3004      	addeq	r0, #4
 8014a94:	079a      	lsls	r2, r3, #30
 8014a96:	bf04      	itt	eq
 8014a98:	089b      	lsreq	r3, r3, #2
 8014a9a:	3002      	addeq	r0, #2
 8014a9c:	07da      	lsls	r2, r3, #31
 8014a9e:	d403      	bmi.n	8014aa8 <__lo0bits+0x50>
 8014aa0:	085b      	lsrs	r3, r3, #1
 8014aa2:	f100 0001 	add.w	r0, r0, #1
 8014aa6:	d005      	beq.n	8014ab4 <__lo0bits+0x5c>
 8014aa8:	600b      	str	r3, [r1, #0]
 8014aaa:	4770      	bx	lr
 8014aac:	4610      	mov	r0, r2
 8014aae:	e7e8      	b.n	8014a82 <__lo0bits+0x2a>
 8014ab0:	2000      	movs	r0, #0
 8014ab2:	4770      	bx	lr
 8014ab4:	2020      	movs	r0, #32
 8014ab6:	4770      	bx	lr

08014ab8 <__i2b>:
 8014ab8:	b510      	push	{r4, lr}
 8014aba:	460c      	mov	r4, r1
 8014abc:	2101      	movs	r1, #1
 8014abe:	f7ff feff 	bl	80148c0 <_Balloc>
 8014ac2:	4602      	mov	r2, r0
 8014ac4:	b928      	cbnz	r0, 8014ad2 <__i2b+0x1a>
 8014ac6:	4b05      	ldr	r3, [pc, #20]	; (8014adc <__i2b+0x24>)
 8014ac8:	4805      	ldr	r0, [pc, #20]	; (8014ae0 <__i2b+0x28>)
 8014aca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8014ace:	f000 fe4b 	bl	8015768 <__assert_func>
 8014ad2:	2301      	movs	r3, #1
 8014ad4:	6144      	str	r4, [r0, #20]
 8014ad6:	6103      	str	r3, [r0, #16]
 8014ad8:	bd10      	pop	{r4, pc}
 8014ada:	bf00      	nop
 8014adc:	080168ef 	.word	0x080168ef
 8014ae0:	08016960 	.word	0x08016960

08014ae4 <__multiply>:
 8014ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ae8:	4614      	mov	r4, r2
 8014aea:	690a      	ldr	r2, [r1, #16]
 8014aec:	6923      	ldr	r3, [r4, #16]
 8014aee:	429a      	cmp	r2, r3
 8014af0:	bfb8      	it	lt
 8014af2:	460b      	movlt	r3, r1
 8014af4:	460d      	mov	r5, r1
 8014af6:	bfbc      	itt	lt
 8014af8:	4625      	movlt	r5, r4
 8014afa:	461c      	movlt	r4, r3
 8014afc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8014b00:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8014b04:	68ab      	ldr	r3, [r5, #8]
 8014b06:	6869      	ldr	r1, [r5, #4]
 8014b08:	eb0a 0709 	add.w	r7, sl, r9
 8014b0c:	42bb      	cmp	r3, r7
 8014b0e:	b085      	sub	sp, #20
 8014b10:	bfb8      	it	lt
 8014b12:	3101      	addlt	r1, #1
 8014b14:	f7ff fed4 	bl	80148c0 <_Balloc>
 8014b18:	b930      	cbnz	r0, 8014b28 <__multiply+0x44>
 8014b1a:	4602      	mov	r2, r0
 8014b1c:	4b42      	ldr	r3, [pc, #264]	; (8014c28 <__multiply+0x144>)
 8014b1e:	4843      	ldr	r0, [pc, #268]	; (8014c2c <__multiply+0x148>)
 8014b20:	f240 115d 	movw	r1, #349	; 0x15d
 8014b24:	f000 fe20 	bl	8015768 <__assert_func>
 8014b28:	f100 0614 	add.w	r6, r0, #20
 8014b2c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8014b30:	4633      	mov	r3, r6
 8014b32:	2200      	movs	r2, #0
 8014b34:	4543      	cmp	r3, r8
 8014b36:	d31e      	bcc.n	8014b76 <__multiply+0x92>
 8014b38:	f105 0c14 	add.w	ip, r5, #20
 8014b3c:	f104 0314 	add.w	r3, r4, #20
 8014b40:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8014b44:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8014b48:	9202      	str	r2, [sp, #8]
 8014b4a:	ebac 0205 	sub.w	r2, ip, r5
 8014b4e:	3a15      	subs	r2, #21
 8014b50:	f022 0203 	bic.w	r2, r2, #3
 8014b54:	3204      	adds	r2, #4
 8014b56:	f105 0115 	add.w	r1, r5, #21
 8014b5a:	458c      	cmp	ip, r1
 8014b5c:	bf38      	it	cc
 8014b5e:	2204      	movcc	r2, #4
 8014b60:	9201      	str	r2, [sp, #4]
 8014b62:	9a02      	ldr	r2, [sp, #8]
 8014b64:	9303      	str	r3, [sp, #12]
 8014b66:	429a      	cmp	r2, r3
 8014b68:	d808      	bhi.n	8014b7c <__multiply+0x98>
 8014b6a:	2f00      	cmp	r7, #0
 8014b6c:	dc55      	bgt.n	8014c1a <__multiply+0x136>
 8014b6e:	6107      	str	r7, [r0, #16]
 8014b70:	b005      	add	sp, #20
 8014b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b76:	f843 2b04 	str.w	r2, [r3], #4
 8014b7a:	e7db      	b.n	8014b34 <__multiply+0x50>
 8014b7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8014b80:	f1ba 0f00 	cmp.w	sl, #0
 8014b84:	d020      	beq.n	8014bc8 <__multiply+0xe4>
 8014b86:	f105 0e14 	add.w	lr, r5, #20
 8014b8a:	46b1      	mov	r9, r6
 8014b8c:	2200      	movs	r2, #0
 8014b8e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8014b92:	f8d9 b000 	ldr.w	fp, [r9]
 8014b96:	b2a1      	uxth	r1, r4
 8014b98:	fa1f fb8b 	uxth.w	fp, fp
 8014b9c:	fb0a b101 	mla	r1, sl, r1, fp
 8014ba0:	4411      	add	r1, r2
 8014ba2:	f8d9 2000 	ldr.w	r2, [r9]
 8014ba6:	0c24      	lsrs	r4, r4, #16
 8014ba8:	0c12      	lsrs	r2, r2, #16
 8014baa:	fb0a 2404 	mla	r4, sl, r4, r2
 8014bae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8014bb2:	b289      	uxth	r1, r1
 8014bb4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8014bb8:	45f4      	cmp	ip, lr
 8014bba:	f849 1b04 	str.w	r1, [r9], #4
 8014bbe:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8014bc2:	d8e4      	bhi.n	8014b8e <__multiply+0xaa>
 8014bc4:	9901      	ldr	r1, [sp, #4]
 8014bc6:	5072      	str	r2, [r6, r1]
 8014bc8:	9a03      	ldr	r2, [sp, #12]
 8014bca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8014bce:	3304      	adds	r3, #4
 8014bd0:	f1b9 0f00 	cmp.w	r9, #0
 8014bd4:	d01f      	beq.n	8014c16 <__multiply+0x132>
 8014bd6:	6834      	ldr	r4, [r6, #0]
 8014bd8:	f105 0114 	add.w	r1, r5, #20
 8014bdc:	46b6      	mov	lr, r6
 8014bde:	f04f 0a00 	mov.w	sl, #0
 8014be2:	880a      	ldrh	r2, [r1, #0]
 8014be4:	f8be b002 	ldrh.w	fp, [lr, #2]
 8014be8:	fb09 b202 	mla	r2, r9, r2, fp
 8014bec:	4492      	add	sl, r2
 8014bee:	b2a4      	uxth	r4, r4
 8014bf0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8014bf4:	f84e 4b04 	str.w	r4, [lr], #4
 8014bf8:	f851 4b04 	ldr.w	r4, [r1], #4
 8014bfc:	f8be 2000 	ldrh.w	r2, [lr]
 8014c00:	0c24      	lsrs	r4, r4, #16
 8014c02:	fb09 2404 	mla	r4, r9, r4, r2
 8014c06:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8014c0a:	458c      	cmp	ip, r1
 8014c0c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8014c10:	d8e7      	bhi.n	8014be2 <__multiply+0xfe>
 8014c12:	9a01      	ldr	r2, [sp, #4]
 8014c14:	50b4      	str	r4, [r6, r2]
 8014c16:	3604      	adds	r6, #4
 8014c18:	e7a3      	b.n	8014b62 <__multiply+0x7e>
 8014c1a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	d1a5      	bne.n	8014b6e <__multiply+0x8a>
 8014c22:	3f01      	subs	r7, #1
 8014c24:	e7a1      	b.n	8014b6a <__multiply+0x86>
 8014c26:	bf00      	nop
 8014c28:	080168ef 	.word	0x080168ef
 8014c2c:	08016960 	.word	0x08016960

08014c30 <__pow5mult>:
 8014c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014c34:	4615      	mov	r5, r2
 8014c36:	f012 0203 	ands.w	r2, r2, #3
 8014c3a:	4606      	mov	r6, r0
 8014c3c:	460f      	mov	r7, r1
 8014c3e:	d007      	beq.n	8014c50 <__pow5mult+0x20>
 8014c40:	4c25      	ldr	r4, [pc, #148]	; (8014cd8 <__pow5mult+0xa8>)
 8014c42:	3a01      	subs	r2, #1
 8014c44:	2300      	movs	r3, #0
 8014c46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014c4a:	f7ff fe9b 	bl	8014984 <__multadd>
 8014c4e:	4607      	mov	r7, r0
 8014c50:	10ad      	asrs	r5, r5, #2
 8014c52:	d03d      	beq.n	8014cd0 <__pow5mult+0xa0>
 8014c54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8014c56:	b97c      	cbnz	r4, 8014c78 <__pow5mult+0x48>
 8014c58:	2010      	movs	r0, #16
 8014c5a:	f7ff fe29 	bl	80148b0 <malloc>
 8014c5e:	4602      	mov	r2, r0
 8014c60:	6270      	str	r0, [r6, #36]	; 0x24
 8014c62:	b928      	cbnz	r0, 8014c70 <__pow5mult+0x40>
 8014c64:	4b1d      	ldr	r3, [pc, #116]	; (8014cdc <__pow5mult+0xac>)
 8014c66:	481e      	ldr	r0, [pc, #120]	; (8014ce0 <__pow5mult+0xb0>)
 8014c68:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014c6c:	f000 fd7c 	bl	8015768 <__assert_func>
 8014c70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8014c74:	6004      	str	r4, [r0, #0]
 8014c76:	60c4      	str	r4, [r0, #12]
 8014c78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014c7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014c80:	b94c      	cbnz	r4, 8014c96 <__pow5mult+0x66>
 8014c82:	f240 2171 	movw	r1, #625	; 0x271
 8014c86:	4630      	mov	r0, r6
 8014c88:	f7ff ff16 	bl	8014ab8 <__i2b>
 8014c8c:	2300      	movs	r3, #0
 8014c8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8014c92:	4604      	mov	r4, r0
 8014c94:	6003      	str	r3, [r0, #0]
 8014c96:	f04f 0900 	mov.w	r9, #0
 8014c9a:	07eb      	lsls	r3, r5, #31
 8014c9c:	d50a      	bpl.n	8014cb4 <__pow5mult+0x84>
 8014c9e:	4639      	mov	r1, r7
 8014ca0:	4622      	mov	r2, r4
 8014ca2:	4630      	mov	r0, r6
 8014ca4:	f7ff ff1e 	bl	8014ae4 <__multiply>
 8014ca8:	4639      	mov	r1, r7
 8014caa:	4680      	mov	r8, r0
 8014cac:	4630      	mov	r0, r6
 8014cae:	f7ff fe47 	bl	8014940 <_Bfree>
 8014cb2:	4647      	mov	r7, r8
 8014cb4:	106d      	asrs	r5, r5, #1
 8014cb6:	d00b      	beq.n	8014cd0 <__pow5mult+0xa0>
 8014cb8:	6820      	ldr	r0, [r4, #0]
 8014cba:	b938      	cbnz	r0, 8014ccc <__pow5mult+0x9c>
 8014cbc:	4622      	mov	r2, r4
 8014cbe:	4621      	mov	r1, r4
 8014cc0:	4630      	mov	r0, r6
 8014cc2:	f7ff ff0f 	bl	8014ae4 <__multiply>
 8014cc6:	6020      	str	r0, [r4, #0]
 8014cc8:	f8c0 9000 	str.w	r9, [r0]
 8014ccc:	4604      	mov	r4, r0
 8014cce:	e7e4      	b.n	8014c9a <__pow5mult+0x6a>
 8014cd0:	4638      	mov	r0, r7
 8014cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014cd6:	bf00      	nop
 8014cd8:	08016ab0 	.word	0x08016ab0
 8014cdc:	08016879 	.word	0x08016879
 8014ce0:	08016960 	.word	0x08016960

08014ce4 <__lshift>:
 8014ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014ce8:	460c      	mov	r4, r1
 8014cea:	6849      	ldr	r1, [r1, #4]
 8014cec:	6923      	ldr	r3, [r4, #16]
 8014cee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8014cf2:	68a3      	ldr	r3, [r4, #8]
 8014cf4:	4607      	mov	r7, r0
 8014cf6:	4691      	mov	r9, r2
 8014cf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014cfc:	f108 0601 	add.w	r6, r8, #1
 8014d00:	42b3      	cmp	r3, r6
 8014d02:	db0b      	blt.n	8014d1c <__lshift+0x38>
 8014d04:	4638      	mov	r0, r7
 8014d06:	f7ff fddb 	bl	80148c0 <_Balloc>
 8014d0a:	4605      	mov	r5, r0
 8014d0c:	b948      	cbnz	r0, 8014d22 <__lshift+0x3e>
 8014d0e:	4602      	mov	r2, r0
 8014d10:	4b28      	ldr	r3, [pc, #160]	; (8014db4 <__lshift+0xd0>)
 8014d12:	4829      	ldr	r0, [pc, #164]	; (8014db8 <__lshift+0xd4>)
 8014d14:	f240 11d9 	movw	r1, #473	; 0x1d9
 8014d18:	f000 fd26 	bl	8015768 <__assert_func>
 8014d1c:	3101      	adds	r1, #1
 8014d1e:	005b      	lsls	r3, r3, #1
 8014d20:	e7ee      	b.n	8014d00 <__lshift+0x1c>
 8014d22:	2300      	movs	r3, #0
 8014d24:	f100 0114 	add.w	r1, r0, #20
 8014d28:	f100 0210 	add.w	r2, r0, #16
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	4553      	cmp	r3, sl
 8014d30:	db33      	blt.n	8014d9a <__lshift+0xb6>
 8014d32:	6920      	ldr	r0, [r4, #16]
 8014d34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8014d38:	f104 0314 	add.w	r3, r4, #20
 8014d3c:	f019 091f 	ands.w	r9, r9, #31
 8014d40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014d44:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8014d48:	d02b      	beq.n	8014da2 <__lshift+0xbe>
 8014d4a:	f1c9 0e20 	rsb	lr, r9, #32
 8014d4e:	468a      	mov	sl, r1
 8014d50:	2200      	movs	r2, #0
 8014d52:	6818      	ldr	r0, [r3, #0]
 8014d54:	fa00 f009 	lsl.w	r0, r0, r9
 8014d58:	4302      	orrs	r2, r0
 8014d5a:	f84a 2b04 	str.w	r2, [sl], #4
 8014d5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d62:	459c      	cmp	ip, r3
 8014d64:	fa22 f20e 	lsr.w	r2, r2, lr
 8014d68:	d8f3      	bhi.n	8014d52 <__lshift+0x6e>
 8014d6a:	ebac 0304 	sub.w	r3, ip, r4
 8014d6e:	3b15      	subs	r3, #21
 8014d70:	f023 0303 	bic.w	r3, r3, #3
 8014d74:	3304      	adds	r3, #4
 8014d76:	f104 0015 	add.w	r0, r4, #21
 8014d7a:	4584      	cmp	ip, r0
 8014d7c:	bf38      	it	cc
 8014d7e:	2304      	movcc	r3, #4
 8014d80:	50ca      	str	r2, [r1, r3]
 8014d82:	b10a      	cbz	r2, 8014d88 <__lshift+0xa4>
 8014d84:	f108 0602 	add.w	r6, r8, #2
 8014d88:	3e01      	subs	r6, #1
 8014d8a:	4638      	mov	r0, r7
 8014d8c:	612e      	str	r6, [r5, #16]
 8014d8e:	4621      	mov	r1, r4
 8014d90:	f7ff fdd6 	bl	8014940 <_Bfree>
 8014d94:	4628      	mov	r0, r5
 8014d96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014d9a:	f842 0f04 	str.w	r0, [r2, #4]!
 8014d9e:	3301      	adds	r3, #1
 8014da0:	e7c5      	b.n	8014d2e <__lshift+0x4a>
 8014da2:	3904      	subs	r1, #4
 8014da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8014da8:	f841 2f04 	str.w	r2, [r1, #4]!
 8014dac:	459c      	cmp	ip, r3
 8014dae:	d8f9      	bhi.n	8014da4 <__lshift+0xc0>
 8014db0:	e7ea      	b.n	8014d88 <__lshift+0xa4>
 8014db2:	bf00      	nop
 8014db4:	080168ef 	.word	0x080168ef
 8014db8:	08016960 	.word	0x08016960

08014dbc <__mcmp>:
 8014dbc:	b530      	push	{r4, r5, lr}
 8014dbe:	6902      	ldr	r2, [r0, #16]
 8014dc0:	690c      	ldr	r4, [r1, #16]
 8014dc2:	1b12      	subs	r2, r2, r4
 8014dc4:	d10e      	bne.n	8014de4 <__mcmp+0x28>
 8014dc6:	f100 0314 	add.w	r3, r0, #20
 8014dca:	3114      	adds	r1, #20
 8014dcc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014dd0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014dd4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014dd8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014ddc:	42a5      	cmp	r5, r4
 8014dde:	d003      	beq.n	8014de8 <__mcmp+0x2c>
 8014de0:	d305      	bcc.n	8014dee <__mcmp+0x32>
 8014de2:	2201      	movs	r2, #1
 8014de4:	4610      	mov	r0, r2
 8014de6:	bd30      	pop	{r4, r5, pc}
 8014de8:	4283      	cmp	r3, r0
 8014dea:	d3f3      	bcc.n	8014dd4 <__mcmp+0x18>
 8014dec:	e7fa      	b.n	8014de4 <__mcmp+0x28>
 8014dee:	f04f 32ff 	mov.w	r2, #4294967295
 8014df2:	e7f7      	b.n	8014de4 <__mcmp+0x28>

08014df4 <__mdiff>:
 8014df4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014df8:	460c      	mov	r4, r1
 8014dfa:	4606      	mov	r6, r0
 8014dfc:	4611      	mov	r1, r2
 8014dfe:	4620      	mov	r0, r4
 8014e00:	4617      	mov	r7, r2
 8014e02:	f7ff ffdb 	bl	8014dbc <__mcmp>
 8014e06:	1e05      	subs	r5, r0, #0
 8014e08:	d110      	bne.n	8014e2c <__mdiff+0x38>
 8014e0a:	4629      	mov	r1, r5
 8014e0c:	4630      	mov	r0, r6
 8014e0e:	f7ff fd57 	bl	80148c0 <_Balloc>
 8014e12:	b930      	cbnz	r0, 8014e22 <__mdiff+0x2e>
 8014e14:	4b39      	ldr	r3, [pc, #228]	; (8014efc <__mdiff+0x108>)
 8014e16:	4602      	mov	r2, r0
 8014e18:	f240 2132 	movw	r1, #562	; 0x232
 8014e1c:	4838      	ldr	r0, [pc, #224]	; (8014f00 <__mdiff+0x10c>)
 8014e1e:	f000 fca3 	bl	8015768 <__assert_func>
 8014e22:	2301      	movs	r3, #1
 8014e24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014e28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e2c:	bfa4      	itt	ge
 8014e2e:	463b      	movge	r3, r7
 8014e30:	4627      	movge	r7, r4
 8014e32:	4630      	mov	r0, r6
 8014e34:	6879      	ldr	r1, [r7, #4]
 8014e36:	bfa6      	itte	ge
 8014e38:	461c      	movge	r4, r3
 8014e3a:	2500      	movge	r5, #0
 8014e3c:	2501      	movlt	r5, #1
 8014e3e:	f7ff fd3f 	bl	80148c0 <_Balloc>
 8014e42:	b920      	cbnz	r0, 8014e4e <__mdiff+0x5a>
 8014e44:	4b2d      	ldr	r3, [pc, #180]	; (8014efc <__mdiff+0x108>)
 8014e46:	4602      	mov	r2, r0
 8014e48:	f44f 7110 	mov.w	r1, #576	; 0x240
 8014e4c:	e7e6      	b.n	8014e1c <__mdiff+0x28>
 8014e4e:	693e      	ldr	r6, [r7, #16]
 8014e50:	60c5      	str	r5, [r0, #12]
 8014e52:	6925      	ldr	r5, [r4, #16]
 8014e54:	f107 0114 	add.w	r1, r7, #20
 8014e58:	f104 0914 	add.w	r9, r4, #20
 8014e5c:	f100 0e14 	add.w	lr, r0, #20
 8014e60:	f107 0210 	add.w	r2, r7, #16
 8014e64:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8014e68:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8014e6c:	46f2      	mov	sl, lr
 8014e6e:	2700      	movs	r7, #0
 8014e70:	f859 3b04 	ldr.w	r3, [r9], #4
 8014e74:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8014e78:	fa1f f883 	uxth.w	r8, r3
 8014e7c:	fa17 f78b 	uxtah	r7, r7, fp
 8014e80:	0c1b      	lsrs	r3, r3, #16
 8014e82:	eba7 0808 	sub.w	r8, r7, r8
 8014e86:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014e8a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014e8e:	fa1f f888 	uxth.w	r8, r8
 8014e92:	141f      	asrs	r7, r3, #16
 8014e94:	454d      	cmp	r5, r9
 8014e96:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014e9a:	f84a 3b04 	str.w	r3, [sl], #4
 8014e9e:	d8e7      	bhi.n	8014e70 <__mdiff+0x7c>
 8014ea0:	1b2b      	subs	r3, r5, r4
 8014ea2:	3b15      	subs	r3, #21
 8014ea4:	f023 0303 	bic.w	r3, r3, #3
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	3415      	adds	r4, #21
 8014eac:	42a5      	cmp	r5, r4
 8014eae:	bf38      	it	cc
 8014eb0:	2304      	movcc	r3, #4
 8014eb2:	4419      	add	r1, r3
 8014eb4:	4473      	add	r3, lr
 8014eb6:	469e      	mov	lr, r3
 8014eb8:	460d      	mov	r5, r1
 8014eba:	4565      	cmp	r5, ip
 8014ebc:	d30e      	bcc.n	8014edc <__mdiff+0xe8>
 8014ebe:	f10c 0203 	add.w	r2, ip, #3
 8014ec2:	1a52      	subs	r2, r2, r1
 8014ec4:	f022 0203 	bic.w	r2, r2, #3
 8014ec8:	3903      	subs	r1, #3
 8014eca:	458c      	cmp	ip, r1
 8014ecc:	bf38      	it	cc
 8014ece:	2200      	movcc	r2, #0
 8014ed0:	441a      	add	r2, r3
 8014ed2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014ed6:	b17b      	cbz	r3, 8014ef8 <__mdiff+0x104>
 8014ed8:	6106      	str	r6, [r0, #16]
 8014eda:	e7a5      	b.n	8014e28 <__mdiff+0x34>
 8014edc:	f855 8b04 	ldr.w	r8, [r5], #4
 8014ee0:	fa17 f488 	uxtah	r4, r7, r8
 8014ee4:	1422      	asrs	r2, r4, #16
 8014ee6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8014eea:	b2a4      	uxth	r4, r4
 8014eec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8014ef0:	f84e 4b04 	str.w	r4, [lr], #4
 8014ef4:	1417      	asrs	r7, r2, #16
 8014ef6:	e7e0      	b.n	8014eba <__mdiff+0xc6>
 8014ef8:	3e01      	subs	r6, #1
 8014efa:	e7ea      	b.n	8014ed2 <__mdiff+0xde>
 8014efc:	080168ef 	.word	0x080168ef
 8014f00:	08016960 	.word	0x08016960

08014f04 <__d2b>:
 8014f04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014f08:	4689      	mov	r9, r1
 8014f0a:	2101      	movs	r1, #1
 8014f0c:	ec57 6b10 	vmov	r6, r7, d0
 8014f10:	4690      	mov	r8, r2
 8014f12:	f7ff fcd5 	bl	80148c0 <_Balloc>
 8014f16:	4604      	mov	r4, r0
 8014f18:	b930      	cbnz	r0, 8014f28 <__d2b+0x24>
 8014f1a:	4602      	mov	r2, r0
 8014f1c:	4b25      	ldr	r3, [pc, #148]	; (8014fb4 <__d2b+0xb0>)
 8014f1e:	4826      	ldr	r0, [pc, #152]	; (8014fb8 <__d2b+0xb4>)
 8014f20:	f240 310a 	movw	r1, #778	; 0x30a
 8014f24:	f000 fc20 	bl	8015768 <__assert_func>
 8014f28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8014f2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8014f30:	bb35      	cbnz	r5, 8014f80 <__d2b+0x7c>
 8014f32:	2e00      	cmp	r6, #0
 8014f34:	9301      	str	r3, [sp, #4]
 8014f36:	d028      	beq.n	8014f8a <__d2b+0x86>
 8014f38:	4668      	mov	r0, sp
 8014f3a:	9600      	str	r6, [sp, #0]
 8014f3c:	f7ff fd8c 	bl	8014a58 <__lo0bits>
 8014f40:	9900      	ldr	r1, [sp, #0]
 8014f42:	b300      	cbz	r0, 8014f86 <__d2b+0x82>
 8014f44:	9a01      	ldr	r2, [sp, #4]
 8014f46:	f1c0 0320 	rsb	r3, r0, #32
 8014f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8014f4e:	430b      	orrs	r3, r1
 8014f50:	40c2      	lsrs	r2, r0
 8014f52:	6163      	str	r3, [r4, #20]
 8014f54:	9201      	str	r2, [sp, #4]
 8014f56:	9b01      	ldr	r3, [sp, #4]
 8014f58:	61a3      	str	r3, [r4, #24]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	bf14      	ite	ne
 8014f5e:	2202      	movne	r2, #2
 8014f60:	2201      	moveq	r2, #1
 8014f62:	6122      	str	r2, [r4, #16]
 8014f64:	b1d5      	cbz	r5, 8014f9c <__d2b+0x98>
 8014f66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8014f6a:	4405      	add	r5, r0
 8014f6c:	f8c9 5000 	str.w	r5, [r9]
 8014f70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014f74:	f8c8 0000 	str.w	r0, [r8]
 8014f78:	4620      	mov	r0, r4
 8014f7a:	b003      	add	sp, #12
 8014f7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014f84:	e7d5      	b.n	8014f32 <__d2b+0x2e>
 8014f86:	6161      	str	r1, [r4, #20]
 8014f88:	e7e5      	b.n	8014f56 <__d2b+0x52>
 8014f8a:	a801      	add	r0, sp, #4
 8014f8c:	f7ff fd64 	bl	8014a58 <__lo0bits>
 8014f90:	9b01      	ldr	r3, [sp, #4]
 8014f92:	6163      	str	r3, [r4, #20]
 8014f94:	2201      	movs	r2, #1
 8014f96:	6122      	str	r2, [r4, #16]
 8014f98:	3020      	adds	r0, #32
 8014f9a:	e7e3      	b.n	8014f64 <__d2b+0x60>
 8014f9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014fa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014fa4:	f8c9 0000 	str.w	r0, [r9]
 8014fa8:	6918      	ldr	r0, [r3, #16]
 8014faa:	f7ff fd35 	bl	8014a18 <__hi0bits>
 8014fae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014fb2:	e7df      	b.n	8014f74 <__d2b+0x70>
 8014fb4:	080168ef 	.word	0x080168ef
 8014fb8:	08016960 	.word	0x08016960

08014fbc <_calloc_r>:
 8014fbc:	b513      	push	{r0, r1, r4, lr}
 8014fbe:	434a      	muls	r2, r1
 8014fc0:	4611      	mov	r1, r2
 8014fc2:	9201      	str	r2, [sp, #4]
 8014fc4:	f000 f85a 	bl	801507c <_malloc_r>
 8014fc8:	4604      	mov	r4, r0
 8014fca:	b118      	cbz	r0, 8014fd4 <_calloc_r+0x18>
 8014fcc:	9a01      	ldr	r2, [sp, #4]
 8014fce:	2100      	movs	r1, #0
 8014fd0:	f7fd fdd4 	bl	8012b7c <memset>
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	b002      	add	sp, #8
 8014fd8:	bd10      	pop	{r4, pc}
	...

08014fdc <_free_r>:
 8014fdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014fde:	2900      	cmp	r1, #0
 8014fe0:	d048      	beq.n	8015074 <_free_r+0x98>
 8014fe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014fe6:	9001      	str	r0, [sp, #4]
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	f1a1 0404 	sub.w	r4, r1, #4
 8014fee:	bfb8      	it	lt
 8014ff0:	18e4      	addlt	r4, r4, r3
 8014ff2:	f000 fc59 	bl	80158a8 <__malloc_lock>
 8014ff6:	4a20      	ldr	r2, [pc, #128]	; (8015078 <_free_r+0x9c>)
 8014ff8:	9801      	ldr	r0, [sp, #4]
 8014ffa:	6813      	ldr	r3, [r2, #0]
 8014ffc:	4615      	mov	r5, r2
 8014ffe:	b933      	cbnz	r3, 801500e <_free_r+0x32>
 8015000:	6063      	str	r3, [r4, #4]
 8015002:	6014      	str	r4, [r2, #0]
 8015004:	b003      	add	sp, #12
 8015006:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801500a:	f000 bc53 	b.w	80158b4 <__malloc_unlock>
 801500e:	42a3      	cmp	r3, r4
 8015010:	d90b      	bls.n	801502a <_free_r+0x4e>
 8015012:	6821      	ldr	r1, [r4, #0]
 8015014:	1862      	adds	r2, r4, r1
 8015016:	4293      	cmp	r3, r2
 8015018:	bf04      	itt	eq
 801501a:	681a      	ldreq	r2, [r3, #0]
 801501c:	685b      	ldreq	r3, [r3, #4]
 801501e:	6063      	str	r3, [r4, #4]
 8015020:	bf04      	itt	eq
 8015022:	1852      	addeq	r2, r2, r1
 8015024:	6022      	streq	r2, [r4, #0]
 8015026:	602c      	str	r4, [r5, #0]
 8015028:	e7ec      	b.n	8015004 <_free_r+0x28>
 801502a:	461a      	mov	r2, r3
 801502c:	685b      	ldr	r3, [r3, #4]
 801502e:	b10b      	cbz	r3, 8015034 <_free_r+0x58>
 8015030:	42a3      	cmp	r3, r4
 8015032:	d9fa      	bls.n	801502a <_free_r+0x4e>
 8015034:	6811      	ldr	r1, [r2, #0]
 8015036:	1855      	adds	r5, r2, r1
 8015038:	42a5      	cmp	r5, r4
 801503a:	d10b      	bne.n	8015054 <_free_r+0x78>
 801503c:	6824      	ldr	r4, [r4, #0]
 801503e:	4421      	add	r1, r4
 8015040:	1854      	adds	r4, r2, r1
 8015042:	42a3      	cmp	r3, r4
 8015044:	6011      	str	r1, [r2, #0]
 8015046:	d1dd      	bne.n	8015004 <_free_r+0x28>
 8015048:	681c      	ldr	r4, [r3, #0]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	6053      	str	r3, [r2, #4]
 801504e:	4421      	add	r1, r4
 8015050:	6011      	str	r1, [r2, #0]
 8015052:	e7d7      	b.n	8015004 <_free_r+0x28>
 8015054:	d902      	bls.n	801505c <_free_r+0x80>
 8015056:	230c      	movs	r3, #12
 8015058:	6003      	str	r3, [r0, #0]
 801505a:	e7d3      	b.n	8015004 <_free_r+0x28>
 801505c:	6825      	ldr	r5, [r4, #0]
 801505e:	1961      	adds	r1, r4, r5
 8015060:	428b      	cmp	r3, r1
 8015062:	bf04      	itt	eq
 8015064:	6819      	ldreq	r1, [r3, #0]
 8015066:	685b      	ldreq	r3, [r3, #4]
 8015068:	6063      	str	r3, [r4, #4]
 801506a:	bf04      	itt	eq
 801506c:	1949      	addeq	r1, r1, r5
 801506e:	6021      	streq	r1, [r4, #0]
 8015070:	6054      	str	r4, [r2, #4]
 8015072:	e7c7      	b.n	8015004 <_free_r+0x28>
 8015074:	b003      	add	sp, #12
 8015076:	bd30      	pop	{r4, r5, pc}
 8015078:	200017e0 	.word	0x200017e0

0801507c <_malloc_r>:
 801507c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801507e:	1ccd      	adds	r5, r1, #3
 8015080:	f025 0503 	bic.w	r5, r5, #3
 8015084:	3508      	adds	r5, #8
 8015086:	2d0c      	cmp	r5, #12
 8015088:	bf38      	it	cc
 801508a:	250c      	movcc	r5, #12
 801508c:	2d00      	cmp	r5, #0
 801508e:	4606      	mov	r6, r0
 8015090:	db01      	blt.n	8015096 <_malloc_r+0x1a>
 8015092:	42a9      	cmp	r1, r5
 8015094:	d903      	bls.n	801509e <_malloc_r+0x22>
 8015096:	230c      	movs	r3, #12
 8015098:	6033      	str	r3, [r6, #0]
 801509a:	2000      	movs	r0, #0
 801509c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801509e:	f000 fc03 	bl	80158a8 <__malloc_lock>
 80150a2:	4921      	ldr	r1, [pc, #132]	; (8015128 <_malloc_r+0xac>)
 80150a4:	680a      	ldr	r2, [r1, #0]
 80150a6:	4614      	mov	r4, r2
 80150a8:	b99c      	cbnz	r4, 80150d2 <_malloc_r+0x56>
 80150aa:	4f20      	ldr	r7, [pc, #128]	; (801512c <_malloc_r+0xb0>)
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	b923      	cbnz	r3, 80150ba <_malloc_r+0x3e>
 80150b0:	4621      	mov	r1, r4
 80150b2:	4630      	mov	r0, r6
 80150b4:	f000 faf2 	bl	801569c <_sbrk_r>
 80150b8:	6038      	str	r0, [r7, #0]
 80150ba:	4629      	mov	r1, r5
 80150bc:	4630      	mov	r0, r6
 80150be:	f000 faed 	bl	801569c <_sbrk_r>
 80150c2:	1c43      	adds	r3, r0, #1
 80150c4:	d123      	bne.n	801510e <_malloc_r+0x92>
 80150c6:	230c      	movs	r3, #12
 80150c8:	6033      	str	r3, [r6, #0]
 80150ca:	4630      	mov	r0, r6
 80150cc:	f000 fbf2 	bl	80158b4 <__malloc_unlock>
 80150d0:	e7e3      	b.n	801509a <_malloc_r+0x1e>
 80150d2:	6823      	ldr	r3, [r4, #0]
 80150d4:	1b5b      	subs	r3, r3, r5
 80150d6:	d417      	bmi.n	8015108 <_malloc_r+0x8c>
 80150d8:	2b0b      	cmp	r3, #11
 80150da:	d903      	bls.n	80150e4 <_malloc_r+0x68>
 80150dc:	6023      	str	r3, [r4, #0]
 80150de:	441c      	add	r4, r3
 80150e0:	6025      	str	r5, [r4, #0]
 80150e2:	e004      	b.n	80150ee <_malloc_r+0x72>
 80150e4:	6863      	ldr	r3, [r4, #4]
 80150e6:	42a2      	cmp	r2, r4
 80150e8:	bf0c      	ite	eq
 80150ea:	600b      	streq	r3, [r1, #0]
 80150ec:	6053      	strne	r3, [r2, #4]
 80150ee:	4630      	mov	r0, r6
 80150f0:	f000 fbe0 	bl	80158b4 <__malloc_unlock>
 80150f4:	f104 000b 	add.w	r0, r4, #11
 80150f8:	1d23      	adds	r3, r4, #4
 80150fa:	f020 0007 	bic.w	r0, r0, #7
 80150fe:	1ac2      	subs	r2, r0, r3
 8015100:	d0cc      	beq.n	801509c <_malloc_r+0x20>
 8015102:	1a1b      	subs	r3, r3, r0
 8015104:	50a3      	str	r3, [r4, r2]
 8015106:	e7c9      	b.n	801509c <_malloc_r+0x20>
 8015108:	4622      	mov	r2, r4
 801510a:	6864      	ldr	r4, [r4, #4]
 801510c:	e7cc      	b.n	80150a8 <_malloc_r+0x2c>
 801510e:	1cc4      	adds	r4, r0, #3
 8015110:	f024 0403 	bic.w	r4, r4, #3
 8015114:	42a0      	cmp	r0, r4
 8015116:	d0e3      	beq.n	80150e0 <_malloc_r+0x64>
 8015118:	1a21      	subs	r1, r4, r0
 801511a:	4630      	mov	r0, r6
 801511c:	f000 fabe 	bl	801569c <_sbrk_r>
 8015120:	3001      	adds	r0, #1
 8015122:	d1dd      	bne.n	80150e0 <_malloc_r+0x64>
 8015124:	e7cf      	b.n	80150c6 <_malloc_r+0x4a>
 8015126:	bf00      	nop
 8015128:	200017e0 	.word	0x200017e0
 801512c:	200017e4 	.word	0x200017e4

08015130 <__ssputs_r>:
 8015130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015134:	688e      	ldr	r6, [r1, #8]
 8015136:	429e      	cmp	r6, r3
 8015138:	4682      	mov	sl, r0
 801513a:	460c      	mov	r4, r1
 801513c:	4690      	mov	r8, r2
 801513e:	461f      	mov	r7, r3
 8015140:	d838      	bhi.n	80151b4 <__ssputs_r+0x84>
 8015142:	898a      	ldrh	r2, [r1, #12]
 8015144:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015148:	d032      	beq.n	80151b0 <__ssputs_r+0x80>
 801514a:	6825      	ldr	r5, [r4, #0]
 801514c:	6909      	ldr	r1, [r1, #16]
 801514e:	eba5 0901 	sub.w	r9, r5, r1
 8015152:	6965      	ldr	r5, [r4, #20]
 8015154:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015158:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801515c:	3301      	adds	r3, #1
 801515e:	444b      	add	r3, r9
 8015160:	106d      	asrs	r5, r5, #1
 8015162:	429d      	cmp	r5, r3
 8015164:	bf38      	it	cc
 8015166:	461d      	movcc	r5, r3
 8015168:	0553      	lsls	r3, r2, #21
 801516a:	d531      	bpl.n	80151d0 <__ssputs_r+0xa0>
 801516c:	4629      	mov	r1, r5
 801516e:	f7ff ff85 	bl	801507c <_malloc_r>
 8015172:	4606      	mov	r6, r0
 8015174:	b950      	cbnz	r0, 801518c <__ssputs_r+0x5c>
 8015176:	230c      	movs	r3, #12
 8015178:	f8ca 3000 	str.w	r3, [sl]
 801517c:	89a3      	ldrh	r3, [r4, #12]
 801517e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015182:	81a3      	strh	r3, [r4, #12]
 8015184:	f04f 30ff 	mov.w	r0, #4294967295
 8015188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801518c:	6921      	ldr	r1, [r4, #16]
 801518e:	464a      	mov	r2, r9
 8015190:	f7fd fce6 	bl	8012b60 <memcpy>
 8015194:	89a3      	ldrh	r3, [r4, #12]
 8015196:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801519a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801519e:	81a3      	strh	r3, [r4, #12]
 80151a0:	6126      	str	r6, [r4, #16]
 80151a2:	6165      	str	r5, [r4, #20]
 80151a4:	444e      	add	r6, r9
 80151a6:	eba5 0509 	sub.w	r5, r5, r9
 80151aa:	6026      	str	r6, [r4, #0]
 80151ac:	60a5      	str	r5, [r4, #8]
 80151ae:	463e      	mov	r6, r7
 80151b0:	42be      	cmp	r6, r7
 80151b2:	d900      	bls.n	80151b6 <__ssputs_r+0x86>
 80151b4:	463e      	mov	r6, r7
 80151b6:	4632      	mov	r2, r6
 80151b8:	6820      	ldr	r0, [r4, #0]
 80151ba:	4641      	mov	r1, r8
 80151bc:	f000 fb5a 	bl	8015874 <memmove>
 80151c0:	68a3      	ldr	r3, [r4, #8]
 80151c2:	6822      	ldr	r2, [r4, #0]
 80151c4:	1b9b      	subs	r3, r3, r6
 80151c6:	4432      	add	r2, r6
 80151c8:	60a3      	str	r3, [r4, #8]
 80151ca:	6022      	str	r2, [r4, #0]
 80151cc:	2000      	movs	r0, #0
 80151ce:	e7db      	b.n	8015188 <__ssputs_r+0x58>
 80151d0:	462a      	mov	r2, r5
 80151d2:	f000 fb75 	bl	80158c0 <_realloc_r>
 80151d6:	4606      	mov	r6, r0
 80151d8:	2800      	cmp	r0, #0
 80151da:	d1e1      	bne.n	80151a0 <__ssputs_r+0x70>
 80151dc:	6921      	ldr	r1, [r4, #16]
 80151de:	4650      	mov	r0, sl
 80151e0:	f7ff fefc 	bl	8014fdc <_free_r>
 80151e4:	e7c7      	b.n	8015176 <__ssputs_r+0x46>
	...

080151e8 <_svfiprintf_r>:
 80151e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80151ec:	4698      	mov	r8, r3
 80151ee:	898b      	ldrh	r3, [r1, #12]
 80151f0:	061b      	lsls	r3, r3, #24
 80151f2:	b09d      	sub	sp, #116	; 0x74
 80151f4:	4607      	mov	r7, r0
 80151f6:	460d      	mov	r5, r1
 80151f8:	4614      	mov	r4, r2
 80151fa:	d50e      	bpl.n	801521a <_svfiprintf_r+0x32>
 80151fc:	690b      	ldr	r3, [r1, #16]
 80151fe:	b963      	cbnz	r3, 801521a <_svfiprintf_r+0x32>
 8015200:	2140      	movs	r1, #64	; 0x40
 8015202:	f7ff ff3b 	bl	801507c <_malloc_r>
 8015206:	6028      	str	r0, [r5, #0]
 8015208:	6128      	str	r0, [r5, #16]
 801520a:	b920      	cbnz	r0, 8015216 <_svfiprintf_r+0x2e>
 801520c:	230c      	movs	r3, #12
 801520e:	603b      	str	r3, [r7, #0]
 8015210:	f04f 30ff 	mov.w	r0, #4294967295
 8015214:	e0d1      	b.n	80153ba <_svfiprintf_r+0x1d2>
 8015216:	2340      	movs	r3, #64	; 0x40
 8015218:	616b      	str	r3, [r5, #20]
 801521a:	2300      	movs	r3, #0
 801521c:	9309      	str	r3, [sp, #36]	; 0x24
 801521e:	2320      	movs	r3, #32
 8015220:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015224:	f8cd 800c 	str.w	r8, [sp, #12]
 8015228:	2330      	movs	r3, #48	; 0x30
 801522a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80153d4 <_svfiprintf_r+0x1ec>
 801522e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015232:	f04f 0901 	mov.w	r9, #1
 8015236:	4623      	mov	r3, r4
 8015238:	469a      	mov	sl, r3
 801523a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801523e:	b10a      	cbz	r2, 8015244 <_svfiprintf_r+0x5c>
 8015240:	2a25      	cmp	r2, #37	; 0x25
 8015242:	d1f9      	bne.n	8015238 <_svfiprintf_r+0x50>
 8015244:	ebba 0b04 	subs.w	fp, sl, r4
 8015248:	d00b      	beq.n	8015262 <_svfiprintf_r+0x7a>
 801524a:	465b      	mov	r3, fp
 801524c:	4622      	mov	r2, r4
 801524e:	4629      	mov	r1, r5
 8015250:	4638      	mov	r0, r7
 8015252:	f7ff ff6d 	bl	8015130 <__ssputs_r>
 8015256:	3001      	adds	r0, #1
 8015258:	f000 80aa 	beq.w	80153b0 <_svfiprintf_r+0x1c8>
 801525c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801525e:	445a      	add	r2, fp
 8015260:	9209      	str	r2, [sp, #36]	; 0x24
 8015262:	f89a 3000 	ldrb.w	r3, [sl]
 8015266:	2b00      	cmp	r3, #0
 8015268:	f000 80a2 	beq.w	80153b0 <_svfiprintf_r+0x1c8>
 801526c:	2300      	movs	r3, #0
 801526e:	f04f 32ff 	mov.w	r2, #4294967295
 8015272:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015276:	f10a 0a01 	add.w	sl, sl, #1
 801527a:	9304      	str	r3, [sp, #16]
 801527c:	9307      	str	r3, [sp, #28]
 801527e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015282:	931a      	str	r3, [sp, #104]	; 0x68
 8015284:	4654      	mov	r4, sl
 8015286:	2205      	movs	r2, #5
 8015288:	f814 1b01 	ldrb.w	r1, [r4], #1
 801528c:	4851      	ldr	r0, [pc, #324]	; (80153d4 <_svfiprintf_r+0x1ec>)
 801528e:	f7ea ffa7 	bl	80001e0 <memchr>
 8015292:	9a04      	ldr	r2, [sp, #16]
 8015294:	b9d8      	cbnz	r0, 80152ce <_svfiprintf_r+0xe6>
 8015296:	06d0      	lsls	r0, r2, #27
 8015298:	bf44      	itt	mi
 801529a:	2320      	movmi	r3, #32
 801529c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152a0:	0711      	lsls	r1, r2, #28
 80152a2:	bf44      	itt	mi
 80152a4:	232b      	movmi	r3, #43	; 0x2b
 80152a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80152aa:	f89a 3000 	ldrb.w	r3, [sl]
 80152ae:	2b2a      	cmp	r3, #42	; 0x2a
 80152b0:	d015      	beq.n	80152de <_svfiprintf_r+0xf6>
 80152b2:	9a07      	ldr	r2, [sp, #28]
 80152b4:	4654      	mov	r4, sl
 80152b6:	2000      	movs	r0, #0
 80152b8:	f04f 0c0a 	mov.w	ip, #10
 80152bc:	4621      	mov	r1, r4
 80152be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80152c2:	3b30      	subs	r3, #48	; 0x30
 80152c4:	2b09      	cmp	r3, #9
 80152c6:	d94e      	bls.n	8015366 <_svfiprintf_r+0x17e>
 80152c8:	b1b0      	cbz	r0, 80152f8 <_svfiprintf_r+0x110>
 80152ca:	9207      	str	r2, [sp, #28]
 80152cc:	e014      	b.n	80152f8 <_svfiprintf_r+0x110>
 80152ce:	eba0 0308 	sub.w	r3, r0, r8
 80152d2:	fa09 f303 	lsl.w	r3, r9, r3
 80152d6:	4313      	orrs	r3, r2
 80152d8:	9304      	str	r3, [sp, #16]
 80152da:	46a2      	mov	sl, r4
 80152dc:	e7d2      	b.n	8015284 <_svfiprintf_r+0x9c>
 80152de:	9b03      	ldr	r3, [sp, #12]
 80152e0:	1d19      	adds	r1, r3, #4
 80152e2:	681b      	ldr	r3, [r3, #0]
 80152e4:	9103      	str	r1, [sp, #12]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	bfbb      	ittet	lt
 80152ea:	425b      	neglt	r3, r3
 80152ec:	f042 0202 	orrlt.w	r2, r2, #2
 80152f0:	9307      	strge	r3, [sp, #28]
 80152f2:	9307      	strlt	r3, [sp, #28]
 80152f4:	bfb8      	it	lt
 80152f6:	9204      	strlt	r2, [sp, #16]
 80152f8:	7823      	ldrb	r3, [r4, #0]
 80152fa:	2b2e      	cmp	r3, #46	; 0x2e
 80152fc:	d10c      	bne.n	8015318 <_svfiprintf_r+0x130>
 80152fe:	7863      	ldrb	r3, [r4, #1]
 8015300:	2b2a      	cmp	r3, #42	; 0x2a
 8015302:	d135      	bne.n	8015370 <_svfiprintf_r+0x188>
 8015304:	9b03      	ldr	r3, [sp, #12]
 8015306:	1d1a      	adds	r2, r3, #4
 8015308:	681b      	ldr	r3, [r3, #0]
 801530a:	9203      	str	r2, [sp, #12]
 801530c:	2b00      	cmp	r3, #0
 801530e:	bfb8      	it	lt
 8015310:	f04f 33ff 	movlt.w	r3, #4294967295
 8015314:	3402      	adds	r4, #2
 8015316:	9305      	str	r3, [sp, #20]
 8015318:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80153e4 <_svfiprintf_r+0x1fc>
 801531c:	7821      	ldrb	r1, [r4, #0]
 801531e:	2203      	movs	r2, #3
 8015320:	4650      	mov	r0, sl
 8015322:	f7ea ff5d 	bl	80001e0 <memchr>
 8015326:	b140      	cbz	r0, 801533a <_svfiprintf_r+0x152>
 8015328:	2340      	movs	r3, #64	; 0x40
 801532a:	eba0 000a 	sub.w	r0, r0, sl
 801532e:	fa03 f000 	lsl.w	r0, r3, r0
 8015332:	9b04      	ldr	r3, [sp, #16]
 8015334:	4303      	orrs	r3, r0
 8015336:	3401      	adds	r4, #1
 8015338:	9304      	str	r3, [sp, #16]
 801533a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801533e:	4826      	ldr	r0, [pc, #152]	; (80153d8 <_svfiprintf_r+0x1f0>)
 8015340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8015344:	2206      	movs	r2, #6
 8015346:	f7ea ff4b 	bl	80001e0 <memchr>
 801534a:	2800      	cmp	r0, #0
 801534c:	d038      	beq.n	80153c0 <_svfiprintf_r+0x1d8>
 801534e:	4b23      	ldr	r3, [pc, #140]	; (80153dc <_svfiprintf_r+0x1f4>)
 8015350:	bb1b      	cbnz	r3, 801539a <_svfiprintf_r+0x1b2>
 8015352:	9b03      	ldr	r3, [sp, #12]
 8015354:	3307      	adds	r3, #7
 8015356:	f023 0307 	bic.w	r3, r3, #7
 801535a:	3308      	adds	r3, #8
 801535c:	9303      	str	r3, [sp, #12]
 801535e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015360:	4433      	add	r3, r6
 8015362:	9309      	str	r3, [sp, #36]	; 0x24
 8015364:	e767      	b.n	8015236 <_svfiprintf_r+0x4e>
 8015366:	fb0c 3202 	mla	r2, ip, r2, r3
 801536a:	460c      	mov	r4, r1
 801536c:	2001      	movs	r0, #1
 801536e:	e7a5      	b.n	80152bc <_svfiprintf_r+0xd4>
 8015370:	2300      	movs	r3, #0
 8015372:	3401      	adds	r4, #1
 8015374:	9305      	str	r3, [sp, #20]
 8015376:	4619      	mov	r1, r3
 8015378:	f04f 0c0a 	mov.w	ip, #10
 801537c:	4620      	mov	r0, r4
 801537e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8015382:	3a30      	subs	r2, #48	; 0x30
 8015384:	2a09      	cmp	r2, #9
 8015386:	d903      	bls.n	8015390 <_svfiprintf_r+0x1a8>
 8015388:	2b00      	cmp	r3, #0
 801538a:	d0c5      	beq.n	8015318 <_svfiprintf_r+0x130>
 801538c:	9105      	str	r1, [sp, #20]
 801538e:	e7c3      	b.n	8015318 <_svfiprintf_r+0x130>
 8015390:	fb0c 2101 	mla	r1, ip, r1, r2
 8015394:	4604      	mov	r4, r0
 8015396:	2301      	movs	r3, #1
 8015398:	e7f0      	b.n	801537c <_svfiprintf_r+0x194>
 801539a:	ab03      	add	r3, sp, #12
 801539c:	9300      	str	r3, [sp, #0]
 801539e:	462a      	mov	r2, r5
 80153a0:	4b0f      	ldr	r3, [pc, #60]	; (80153e0 <_svfiprintf_r+0x1f8>)
 80153a2:	a904      	add	r1, sp, #16
 80153a4:	4638      	mov	r0, r7
 80153a6:	f7fd fc91 	bl	8012ccc <_printf_float>
 80153aa:	1c42      	adds	r2, r0, #1
 80153ac:	4606      	mov	r6, r0
 80153ae:	d1d6      	bne.n	801535e <_svfiprintf_r+0x176>
 80153b0:	89ab      	ldrh	r3, [r5, #12]
 80153b2:	065b      	lsls	r3, r3, #25
 80153b4:	f53f af2c 	bmi.w	8015210 <_svfiprintf_r+0x28>
 80153b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80153ba:	b01d      	add	sp, #116	; 0x74
 80153bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80153c0:	ab03      	add	r3, sp, #12
 80153c2:	9300      	str	r3, [sp, #0]
 80153c4:	462a      	mov	r2, r5
 80153c6:	4b06      	ldr	r3, [pc, #24]	; (80153e0 <_svfiprintf_r+0x1f8>)
 80153c8:	a904      	add	r1, sp, #16
 80153ca:	4638      	mov	r0, r7
 80153cc:	f7fd ff22 	bl	8013214 <_printf_i>
 80153d0:	e7eb      	b.n	80153aa <_svfiprintf_r+0x1c2>
 80153d2:	bf00      	nop
 80153d4:	08016abc 	.word	0x08016abc
 80153d8:	08016ac6 	.word	0x08016ac6
 80153dc:	08012ccd 	.word	0x08012ccd
 80153e0:	08015131 	.word	0x08015131
 80153e4:	08016ac2 	.word	0x08016ac2

080153e8 <__sfputc_r>:
 80153e8:	6893      	ldr	r3, [r2, #8]
 80153ea:	3b01      	subs	r3, #1
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	b410      	push	{r4}
 80153f0:	6093      	str	r3, [r2, #8]
 80153f2:	da08      	bge.n	8015406 <__sfputc_r+0x1e>
 80153f4:	6994      	ldr	r4, [r2, #24]
 80153f6:	42a3      	cmp	r3, r4
 80153f8:	db01      	blt.n	80153fe <__sfputc_r+0x16>
 80153fa:	290a      	cmp	r1, #10
 80153fc:	d103      	bne.n	8015406 <__sfputc_r+0x1e>
 80153fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015402:	f7fe b8f7 	b.w	80135f4 <__swbuf_r>
 8015406:	6813      	ldr	r3, [r2, #0]
 8015408:	1c58      	adds	r0, r3, #1
 801540a:	6010      	str	r0, [r2, #0]
 801540c:	7019      	strb	r1, [r3, #0]
 801540e:	4608      	mov	r0, r1
 8015410:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015414:	4770      	bx	lr

08015416 <__sfputs_r>:
 8015416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015418:	4606      	mov	r6, r0
 801541a:	460f      	mov	r7, r1
 801541c:	4614      	mov	r4, r2
 801541e:	18d5      	adds	r5, r2, r3
 8015420:	42ac      	cmp	r4, r5
 8015422:	d101      	bne.n	8015428 <__sfputs_r+0x12>
 8015424:	2000      	movs	r0, #0
 8015426:	e007      	b.n	8015438 <__sfputs_r+0x22>
 8015428:	f814 1b01 	ldrb.w	r1, [r4], #1
 801542c:	463a      	mov	r2, r7
 801542e:	4630      	mov	r0, r6
 8015430:	f7ff ffda 	bl	80153e8 <__sfputc_r>
 8015434:	1c43      	adds	r3, r0, #1
 8015436:	d1f3      	bne.n	8015420 <__sfputs_r+0xa>
 8015438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801543c <_vfiprintf_r>:
 801543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015440:	460d      	mov	r5, r1
 8015442:	b09d      	sub	sp, #116	; 0x74
 8015444:	4614      	mov	r4, r2
 8015446:	4698      	mov	r8, r3
 8015448:	4606      	mov	r6, r0
 801544a:	b118      	cbz	r0, 8015454 <_vfiprintf_r+0x18>
 801544c:	6983      	ldr	r3, [r0, #24]
 801544e:	b90b      	cbnz	r3, 8015454 <_vfiprintf_r+0x18>
 8015450:	f7ff f924 	bl	801469c <__sinit>
 8015454:	4b89      	ldr	r3, [pc, #548]	; (801567c <_vfiprintf_r+0x240>)
 8015456:	429d      	cmp	r5, r3
 8015458:	d11b      	bne.n	8015492 <_vfiprintf_r+0x56>
 801545a:	6875      	ldr	r5, [r6, #4]
 801545c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801545e:	07d9      	lsls	r1, r3, #31
 8015460:	d405      	bmi.n	801546e <_vfiprintf_r+0x32>
 8015462:	89ab      	ldrh	r3, [r5, #12]
 8015464:	059a      	lsls	r2, r3, #22
 8015466:	d402      	bmi.n	801546e <_vfiprintf_r+0x32>
 8015468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801546a:	f7ff f9ba 	bl	80147e2 <__retarget_lock_acquire_recursive>
 801546e:	89ab      	ldrh	r3, [r5, #12]
 8015470:	071b      	lsls	r3, r3, #28
 8015472:	d501      	bpl.n	8015478 <_vfiprintf_r+0x3c>
 8015474:	692b      	ldr	r3, [r5, #16]
 8015476:	b9eb      	cbnz	r3, 80154b4 <_vfiprintf_r+0x78>
 8015478:	4629      	mov	r1, r5
 801547a:	4630      	mov	r0, r6
 801547c:	f7fe f90c 	bl	8013698 <__swsetup_r>
 8015480:	b1c0      	cbz	r0, 80154b4 <_vfiprintf_r+0x78>
 8015482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015484:	07dc      	lsls	r4, r3, #31
 8015486:	d50e      	bpl.n	80154a6 <_vfiprintf_r+0x6a>
 8015488:	f04f 30ff 	mov.w	r0, #4294967295
 801548c:	b01d      	add	sp, #116	; 0x74
 801548e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015492:	4b7b      	ldr	r3, [pc, #492]	; (8015680 <_vfiprintf_r+0x244>)
 8015494:	429d      	cmp	r5, r3
 8015496:	d101      	bne.n	801549c <_vfiprintf_r+0x60>
 8015498:	68b5      	ldr	r5, [r6, #8]
 801549a:	e7df      	b.n	801545c <_vfiprintf_r+0x20>
 801549c:	4b79      	ldr	r3, [pc, #484]	; (8015684 <_vfiprintf_r+0x248>)
 801549e:	429d      	cmp	r5, r3
 80154a0:	bf08      	it	eq
 80154a2:	68f5      	ldreq	r5, [r6, #12]
 80154a4:	e7da      	b.n	801545c <_vfiprintf_r+0x20>
 80154a6:	89ab      	ldrh	r3, [r5, #12]
 80154a8:	0598      	lsls	r0, r3, #22
 80154aa:	d4ed      	bmi.n	8015488 <_vfiprintf_r+0x4c>
 80154ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80154ae:	f7ff f999 	bl	80147e4 <__retarget_lock_release_recursive>
 80154b2:	e7e9      	b.n	8015488 <_vfiprintf_r+0x4c>
 80154b4:	2300      	movs	r3, #0
 80154b6:	9309      	str	r3, [sp, #36]	; 0x24
 80154b8:	2320      	movs	r3, #32
 80154ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154be:	f8cd 800c 	str.w	r8, [sp, #12]
 80154c2:	2330      	movs	r3, #48	; 0x30
 80154c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8015688 <_vfiprintf_r+0x24c>
 80154c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154cc:	f04f 0901 	mov.w	r9, #1
 80154d0:	4623      	mov	r3, r4
 80154d2:	469a      	mov	sl, r3
 80154d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154d8:	b10a      	cbz	r2, 80154de <_vfiprintf_r+0xa2>
 80154da:	2a25      	cmp	r2, #37	; 0x25
 80154dc:	d1f9      	bne.n	80154d2 <_vfiprintf_r+0x96>
 80154de:	ebba 0b04 	subs.w	fp, sl, r4
 80154e2:	d00b      	beq.n	80154fc <_vfiprintf_r+0xc0>
 80154e4:	465b      	mov	r3, fp
 80154e6:	4622      	mov	r2, r4
 80154e8:	4629      	mov	r1, r5
 80154ea:	4630      	mov	r0, r6
 80154ec:	f7ff ff93 	bl	8015416 <__sfputs_r>
 80154f0:	3001      	adds	r0, #1
 80154f2:	f000 80aa 	beq.w	801564a <_vfiprintf_r+0x20e>
 80154f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80154f8:	445a      	add	r2, fp
 80154fa:	9209      	str	r2, [sp, #36]	; 0x24
 80154fc:	f89a 3000 	ldrb.w	r3, [sl]
 8015500:	2b00      	cmp	r3, #0
 8015502:	f000 80a2 	beq.w	801564a <_vfiprintf_r+0x20e>
 8015506:	2300      	movs	r3, #0
 8015508:	f04f 32ff 	mov.w	r2, #4294967295
 801550c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015510:	f10a 0a01 	add.w	sl, sl, #1
 8015514:	9304      	str	r3, [sp, #16]
 8015516:	9307      	str	r3, [sp, #28]
 8015518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801551c:	931a      	str	r3, [sp, #104]	; 0x68
 801551e:	4654      	mov	r4, sl
 8015520:	2205      	movs	r2, #5
 8015522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015526:	4858      	ldr	r0, [pc, #352]	; (8015688 <_vfiprintf_r+0x24c>)
 8015528:	f7ea fe5a 	bl	80001e0 <memchr>
 801552c:	9a04      	ldr	r2, [sp, #16]
 801552e:	b9d8      	cbnz	r0, 8015568 <_vfiprintf_r+0x12c>
 8015530:	06d1      	lsls	r1, r2, #27
 8015532:	bf44      	itt	mi
 8015534:	2320      	movmi	r3, #32
 8015536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801553a:	0713      	lsls	r3, r2, #28
 801553c:	bf44      	itt	mi
 801553e:	232b      	movmi	r3, #43	; 0x2b
 8015540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015544:	f89a 3000 	ldrb.w	r3, [sl]
 8015548:	2b2a      	cmp	r3, #42	; 0x2a
 801554a:	d015      	beq.n	8015578 <_vfiprintf_r+0x13c>
 801554c:	9a07      	ldr	r2, [sp, #28]
 801554e:	4654      	mov	r4, sl
 8015550:	2000      	movs	r0, #0
 8015552:	f04f 0c0a 	mov.w	ip, #10
 8015556:	4621      	mov	r1, r4
 8015558:	f811 3b01 	ldrb.w	r3, [r1], #1
 801555c:	3b30      	subs	r3, #48	; 0x30
 801555e:	2b09      	cmp	r3, #9
 8015560:	d94e      	bls.n	8015600 <_vfiprintf_r+0x1c4>
 8015562:	b1b0      	cbz	r0, 8015592 <_vfiprintf_r+0x156>
 8015564:	9207      	str	r2, [sp, #28]
 8015566:	e014      	b.n	8015592 <_vfiprintf_r+0x156>
 8015568:	eba0 0308 	sub.w	r3, r0, r8
 801556c:	fa09 f303 	lsl.w	r3, r9, r3
 8015570:	4313      	orrs	r3, r2
 8015572:	9304      	str	r3, [sp, #16]
 8015574:	46a2      	mov	sl, r4
 8015576:	e7d2      	b.n	801551e <_vfiprintf_r+0xe2>
 8015578:	9b03      	ldr	r3, [sp, #12]
 801557a:	1d19      	adds	r1, r3, #4
 801557c:	681b      	ldr	r3, [r3, #0]
 801557e:	9103      	str	r1, [sp, #12]
 8015580:	2b00      	cmp	r3, #0
 8015582:	bfbb      	ittet	lt
 8015584:	425b      	neglt	r3, r3
 8015586:	f042 0202 	orrlt.w	r2, r2, #2
 801558a:	9307      	strge	r3, [sp, #28]
 801558c:	9307      	strlt	r3, [sp, #28]
 801558e:	bfb8      	it	lt
 8015590:	9204      	strlt	r2, [sp, #16]
 8015592:	7823      	ldrb	r3, [r4, #0]
 8015594:	2b2e      	cmp	r3, #46	; 0x2e
 8015596:	d10c      	bne.n	80155b2 <_vfiprintf_r+0x176>
 8015598:	7863      	ldrb	r3, [r4, #1]
 801559a:	2b2a      	cmp	r3, #42	; 0x2a
 801559c:	d135      	bne.n	801560a <_vfiprintf_r+0x1ce>
 801559e:	9b03      	ldr	r3, [sp, #12]
 80155a0:	1d1a      	adds	r2, r3, #4
 80155a2:	681b      	ldr	r3, [r3, #0]
 80155a4:	9203      	str	r2, [sp, #12]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	bfb8      	it	lt
 80155aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80155ae:	3402      	adds	r4, #2
 80155b0:	9305      	str	r3, [sp, #20]
 80155b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8015698 <_vfiprintf_r+0x25c>
 80155b6:	7821      	ldrb	r1, [r4, #0]
 80155b8:	2203      	movs	r2, #3
 80155ba:	4650      	mov	r0, sl
 80155bc:	f7ea fe10 	bl	80001e0 <memchr>
 80155c0:	b140      	cbz	r0, 80155d4 <_vfiprintf_r+0x198>
 80155c2:	2340      	movs	r3, #64	; 0x40
 80155c4:	eba0 000a 	sub.w	r0, r0, sl
 80155c8:	fa03 f000 	lsl.w	r0, r3, r0
 80155cc:	9b04      	ldr	r3, [sp, #16]
 80155ce:	4303      	orrs	r3, r0
 80155d0:	3401      	adds	r4, #1
 80155d2:	9304      	str	r3, [sp, #16]
 80155d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155d8:	482c      	ldr	r0, [pc, #176]	; (801568c <_vfiprintf_r+0x250>)
 80155da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155de:	2206      	movs	r2, #6
 80155e0:	f7ea fdfe 	bl	80001e0 <memchr>
 80155e4:	2800      	cmp	r0, #0
 80155e6:	d03f      	beq.n	8015668 <_vfiprintf_r+0x22c>
 80155e8:	4b29      	ldr	r3, [pc, #164]	; (8015690 <_vfiprintf_r+0x254>)
 80155ea:	bb1b      	cbnz	r3, 8015634 <_vfiprintf_r+0x1f8>
 80155ec:	9b03      	ldr	r3, [sp, #12]
 80155ee:	3307      	adds	r3, #7
 80155f0:	f023 0307 	bic.w	r3, r3, #7
 80155f4:	3308      	adds	r3, #8
 80155f6:	9303      	str	r3, [sp, #12]
 80155f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80155fa:	443b      	add	r3, r7
 80155fc:	9309      	str	r3, [sp, #36]	; 0x24
 80155fe:	e767      	b.n	80154d0 <_vfiprintf_r+0x94>
 8015600:	fb0c 3202 	mla	r2, ip, r2, r3
 8015604:	460c      	mov	r4, r1
 8015606:	2001      	movs	r0, #1
 8015608:	e7a5      	b.n	8015556 <_vfiprintf_r+0x11a>
 801560a:	2300      	movs	r3, #0
 801560c:	3401      	adds	r4, #1
 801560e:	9305      	str	r3, [sp, #20]
 8015610:	4619      	mov	r1, r3
 8015612:	f04f 0c0a 	mov.w	ip, #10
 8015616:	4620      	mov	r0, r4
 8015618:	f810 2b01 	ldrb.w	r2, [r0], #1
 801561c:	3a30      	subs	r2, #48	; 0x30
 801561e:	2a09      	cmp	r2, #9
 8015620:	d903      	bls.n	801562a <_vfiprintf_r+0x1ee>
 8015622:	2b00      	cmp	r3, #0
 8015624:	d0c5      	beq.n	80155b2 <_vfiprintf_r+0x176>
 8015626:	9105      	str	r1, [sp, #20]
 8015628:	e7c3      	b.n	80155b2 <_vfiprintf_r+0x176>
 801562a:	fb0c 2101 	mla	r1, ip, r1, r2
 801562e:	4604      	mov	r4, r0
 8015630:	2301      	movs	r3, #1
 8015632:	e7f0      	b.n	8015616 <_vfiprintf_r+0x1da>
 8015634:	ab03      	add	r3, sp, #12
 8015636:	9300      	str	r3, [sp, #0]
 8015638:	462a      	mov	r2, r5
 801563a:	4b16      	ldr	r3, [pc, #88]	; (8015694 <_vfiprintf_r+0x258>)
 801563c:	a904      	add	r1, sp, #16
 801563e:	4630      	mov	r0, r6
 8015640:	f7fd fb44 	bl	8012ccc <_printf_float>
 8015644:	4607      	mov	r7, r0
 8015646:	1c78      	adds	r0, r7, #1
 8015648:	d1d6      	bne.n	80155f8 <_vfiprintf_r+0x1bc>
 801564a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801564c:	07d9      	lsls	r1, r3, #31
 801564e:	d405      	bmi.n	801565c <_vfiprintf_r+0x220>
 8015650:	89ab      	ldrh	r3, [r5, #12]
 8015652:	059a      	lsls	r2, r3, #22
 8015654:	d402      	bmi.n	801565c <_vfiprintf_r+0x220>
 8015656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015658:	f7ff f8c4 	bl	80147e4 <__retarget_lock_release_recursive>
 801565c:	89ab      	ldrh	r3, [r5, #12]
 801565e:	065b      	lsls	r3, r3, #25
 8015660:	f53f af12 	bmi.w	8015488 <_vfiprintf_r+0x4c>
 8015664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015666:	e711      	b.n	801548c <_vfiprintf_r+0x50>
 8015668:	ab03      	add	r3, sp, #12
 801566a:	9300      	str	r3, [sp, #0]
 801566c:	462a      	mov	r2, r5
 801566e:	4b09      	ldr	r3, [pc, #36]	; (8015694 <_vfiprintf_r+0x258>)
 8015670:	a904      	add	r1, sp, #16
 8015672:	4630      	mov	r0, r6
 8015674:	f7fd fdce 	bl	8013214 <_printf_i>
 8015678:	e7e4      	b.n	8015644 <_vfiprintf_r+0x208>
 801567a:	bf00      	nop
 801567c:	08016920 	.word	0x08016920
 8015680:	08016940 	.word	0x08016940
 8015684:	08016900 	.word	0x08016900
 8015688:	08016abc 	.word	0x08016abc
 801568c:	08016ac6 	.word	0x08016ac6
 8015690:	08012ccd 	.word	0x08012ccd
 8015694:	08015417 	.word	0x08015417
 8015698:	08016ac2 	.word	0x08016ac2

0801569c <_sbrk_r>:
 801569c:	b538      	push	{r3, r4, r5, lr}
 801569e:	4d06      	ldr	r5, [pc, #24]	; (80156b8 <_sbrk_r+0x1c>)
 80156a0:	2300      	movs	r3, #0
 80156a2:	4604      	mov	r4, r0
 80156a4:	4608      	mov	r0, r1
 80156a6:	602b      	str	r3, [r5, #0]
 80156a8:	f7f1 fdf6 	bl	8007298 <_sbrk>
 80156ac:	1c43      	adds	r3, r0, #1
 80156ae:	d102      	bne.n	80156b6 <_sbrk_r+0x1a>
 80156b0:	682b      	ldr	r3, [r5, #0]
 80156b2:	b103      	cbz	r3, 80156b6 <_sbrk_r+0x1a>
 80156b4:	6023      	str	r3, [r4, #0]
 80156b6:	bd38      	pop	{r3, r4, r5, pc}
 80156b8:	20002c28 	.word	0x20002c28

080156bc <__sread>:
 80156bc:	b510      	push	{r4, lr}
 80156be:	460c      	mov	r4, r1
 80156c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156c4:	f000 f922 	bl	801590c <_read_r>
 80156c8:	2800      	cmp	r0, #0
 80156ca:	bfab      	itete	ge
 80156cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80156ce:	89a3      	ldrhlt	r3, [r4, #12]
 80156d0:	181b      	addge	r3, r3, r0
 80156d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80156d6:	bfac      	ite	ge
 80156d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80156da:	81a3      	strhlt	r3, [r4, #12]
 80156dc:	bd10      	pop	{r4, pc}

080156de <__swrite>:
 80156de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156e2:	461f      	mov	r7, r3
 80156e4:	898b      	ldrh	r3, [r1, #12]
 80156e6:	05db      	lsls	r3, r3, #23
 80156e8:	4605      	mov	r5, r0
 80156ea:	460c      	mov	r4, r1
 80156ec:	4616      	mov	r6, r2
 80156ee:	d505      	bpl.n	80156fc <__swrite+0x1e>
 80156f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80156f4:	2302      	movs	r3, #2
 80156f6:	2200      	movs	r2, #0
 80156f8:	f000 f898 	bl	801582c <_lseek_r>
 80156fc:	89a3      	ldrh	r3, [r4, #12]
 80156fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015702:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015706:	81a3      	strh	r3, [r4, #12]
 8015708:	4632      	mov	r2, r6
 801570a:	463b      	mov	r3, r7
 801570c:	4628      	mov	r0, r5
 801570e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015712:	f000 b817 	b.w	8015744 <_write_r>

08015716 <__sseek>:
 8015716:	b510      	push	{r4, lr}
 8015718:	460c      	mov	r4, r1
 801571a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801571e:	f000 f885 	bl	801582c <_lseek_r>
 8015722:	1c43      	adds	r3, r0, #1
 8015724:	89a3      	ldrh	r3, [r4, #12]
 8015726:	bf15      	itete	ne
 8015728:	6560      	strne	r0, [r4, #84]	; 0x54
 801572a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801572e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8015732:	81a3      	strheq	r3, [r4, #12]
 8015734:	bf18      	it	ne
 8015736:	81a3      	strhne	r3, [r4, #12]
 8015738:	bd10      	pop	{r4, pc}

0801573a <__sclose>:
 801573a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801573e:	f000 b831 	b.w	80157a4 <_close_r>
	...

08015744 <_write_r>:
 8015744:	b538      	push	{r3, r4, r5, lr}
 8015746:	4d07      	ldr	r5, [pc, #28]	; (8015764 <_write_r+0x20>)
 8015748:	4604      	mov	r4, r0
 801574a:	4608      	mov	r0, r1
 801574c:	4611      	mov	r1, r2
 801574e:	2200      	movs	r2, #0
 8015750:	602a      	str	r2, [r5, #0]
 8015752:	461a      	mov	r2, r3
 8015754:	f7f1 fd4f 	bl	80071f6 <_write>
 8015758:	1c43      	adds	r3, r0, #1
 801575a:	d102      	bne.n	8015762 <_write_r+0x1e>
 801575c:	682b      	ldr	r3, [r5, #0]
 801575e:	b103      	cbz	r3, 8015762 <_write_r+0x1e>
 8015760:	6023      	str	r3, [r4, #0]
 8015762:	bd38      	pop	{r3, r4, r5, pc}
 8015764:	20002c28 	.word	0x20002c28

08015768 <__assert_func>:
 8015768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801576a:	4614      	mov	r4, r2
 801576c:	461a      	mov	r2, r3
 801576e:	4b09      	ldr	r3, [pc, #36]	; (8015794 <__assert_func+0x2c>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	4605      	mov	r5, r0
 8015774:	68d8      	ldr	r0, [r3, #12]
 8015776:	b14c      	cbz	r4, 801578c <__assert_func+0x24>
 8015778:	4b07      	ldr	r3, [pc, #28]	; (8015798 <__assert_func+0x30>)
 801577a:	9100      	str	r1, [sp, #0]
 801577c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8015780:	4906      	ldr	r1, [pc, #24]	; (801579c <__assert_func+0x34>)
 8015782:	462b      	mov	r3, r5
 8015784:	f000 f81e 	bl	80157c4 <fiprintf>
 8015788:	f000 f8df 	bl	801594a <abort>
 801578c:	4b04      	ldr	r3, [pc, #16]	; (80157a0 <__assert_func+0x38>)
 801578e:	461c      	mov	r4, r3
 8015790:	e7f3      	b.n	801577a <__assert_func+0x12>
 8015792:	bf00      	nop
 8015794:	20000930 	.word	0x20000930
 8015798:	08016acd 	.word	0x08016acd
 801579c:	08016ada 	.word	0x08016ada
 80157a0:	08016b08 	.word	0x08016b08

080157a4 <_close_r>:
 80157a4:	b538      	push	{r3, r4, r5, lr}
 80157a6:	4d06      	ldr	r5, [pc, #24]	; (80157c0 <_close_r+0x1c>)
 80157a8:	2300      	movs	r3, #0
 80157aa:	4604      	mov	r4, r0
 80157ac:	4608      	mov	r0, r1
 80157ae:	602b      	str	r3, [r5, #0]
 80157b0:	f7f1 fd3d 	bl	800722e <_close>
 80157b4:	1c43      	adds	r3, r0, #1
 80157b6:	d102      	bne.n	80157be <_close_r+0x1a>
 80157b8:	682b      	ldr	r3, [r5, #0]
 80157ba:	b103      	cbz	r3, 80157be <_close_r+0x1a>
 80157bc:	6023      	str	r3, [r4, #0]
 80157be:	bd38      	pop	{r3, r4, r5, pc}
 80157c0:	20002c28 	.word	0x20002c28

080157c4 <fiprintf>:
 80157c4:	b40e      	push	{r1, r2, r3}
 80157c6:	b503      	push	{r0, r1, lr}
 80157c8:	4601      	mov	r1, r0
 80157ca:	ab03      	add	r3, sp, #12
 80157cc:	4805      	ldr	r0, [pc, #20]	; (80157e4 <fiprintf+0x20>)
 80157ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80157d2:	6800      	ldr	r0, [r0, #0]
 80157d4:	9301      	str	r3, [sp, #4]
 80157d6:	f7ff fe31 	bl	801543c <_vfiprintf_r>
 80157da:	b002      	add	sp, #8
 80157dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80157e0:	b003      	add	sp, #12
 80157e2:	4770      	bx	lr
 80157e4:	20000930 	.word	0x20000930

080157e8 <_fstat_r>:
 80157e8:	b538      	push	{r3, r4, r5, lr}
 80157ea:	4d07      	ldr	r5, [pc, #28]	; (8015808 <_fstat_r+0x20>)
 80157ec:	2300      	movs	r3, #0
 80157ee:	4604      	mov	r4, r0
 80157f0:	4608      	mov	r0, r1
 80157f2:	4611      	mov	r1, r2
 80157f4:	602b      	str	r3, [r5, #0]
 80157f6:	f7f1 fd26 	bl	8007246 <_fstat>
 80157fa:	1c43      	adds	r3, r0, #1
 80157fc:	d102      	bne.n	8015804 <_fstat_r+0x1c>
 80157fe:	682b      	ldr	r3, [r5, #0]
 8015800:	b103      	cbz	r3, 8015804 <_fstat_r+0x1c>
 8015802:	6023      	str	r3, [r4, #0]
 8015804:	bd38      	pop	{r3, r4, r5, pc}
 8015806:	bf00      	nop
 8015808:	20002c28 	.word	0x20002c28

0801580c <_isatty_r>:
 801580c:	b538      	push	{r3, r4, r5, lr}
 801580e:	4d06      	ldr	r5, [pc, #24]	; (8015828 <_isatty_r+0x1c>)
 8015810:	2300      	movs	r3, #0
 8015812:	4604      	mov	r4, r0
 8015814:	4608      	mov	r0, r1
 8015816:	602b      	str	r3, [r5, #0]
 8015818:	f7f1 fd25 	bl	8007266 <_isatty>
 801581c:	1c43      	adds	r3, r0, #1
 801581e:	d102      	bne.n	8015826 <_isatty_r+0x1a>
 8015820:	682b      	ldr	r3, [r5, #0]
 8015822:	b103      	cbz	r3, 8015826 <_isatty_r+0x1a>
 8015824:	6023      	str	r3, [r4, #0]
 8015826:	bd38      	pop	{r3, r4, r5, pc}
 8015828:	20002c28 	.word	0x20002c28

0801582c <_lseek_r>:
 801582c:	b538      	push	{r3, r4, r5, lr}
 801582e:	4d07      	ldr	r5, [pc, #28]	; (801584c <_lseek_r+0x20>)
 8015830:	4604      	mov	r4, r0
 8015832:	4608      	mov	r0, r1
 8015834:	4611      	mov	r1, r2
 8015836:	2200      	movs	r2, #0
 8015838:	602a      	str	r2, [r5, #0]
 801583a:	461a      	mov	r2, r3
 801583c:	f7f1 fd1e 	bl	800727c <_lseek>
 8015840:	1c43      	adds	r3, r0, #1
 8015842:	d102      	bne.n	801584a <_lseek_r+0x1e>
 8015844:	682b      	ldr	r3, [r5, #0]
 8015846:	b103      	cbz	r3, 801584a <_lseek_r+0x1e>
 8015848:	6023      	str	r3, [r4, #0]
 801584a:	bd38      	pop	{r3, r4, r5, pc}
 801584c:	20002c28 	.word	0x20002c28

08015850 <__ascii_mbtowc>:
 8015850:	b082      	sub	sp, #8
 8015852:	b901      	cbnz	r1, 8015856 <__ascii_mbtowc+0x6>
 8015854:	a901      	add	r1, sp, #4
 8015856:	b142      	cbz	r2, 801586a <__ascii_mbtowc+0x1a>
 8015858:	b14b      	cbz	r3, 801586e <__ascii_mbtowc+0x1e>
 801585a:	7813      	ldrb	r3, [r2, #0]
 801585c:	600b      	str	r3, [r1, #0]
 801585e:	7812      	ldrb	r2, [r2, #0]
 8015860:	1e10      	subs	r0, r2, #0
 8015862:	bf18      	it	ne
 8015864:	2001      	movne	r0, #1
 8015866:	b002      	add	sp, #8
 8015868:	4770      	bx	lr
 801586a:	4610      	mov	r0, r2
 801586c:	e7fb      	b.n	8015866 <__ascii_mbtowc+0x16>
 801586e:	f06f 0001 	mvn.w	r0, #1
 8015872:	e7f8      	b.n	8015866 <__ascii_mbtowc+0x16>

08015874 <memmove>:
 8015874:	4288      	cmp	r0, r1
 8015876:	b510      	push	{r4, lr}
 8015878:	eb01 0402 	add.w	r4, r1, r2
 801587c:	d902      	bls.n	8015884 <memmove+0x10>
 801587e:	4284      	cmp	r4, r0
 8015880:	4623      	mov	r3, r4
 8015882:	d807      	bhi.n	8015894 <memmove+0x20>
 8015884:	1e43      	subs	r3, r0, #1
 8015886:	42a1      	cmp	r1, r4
 8015888:	d008      	beq.n	801589c <memmove+0x28>
 801588a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801588e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015892:	e7f8      	b.n	8015886 <memmove+0x12>
 8015894:	4402      	add	r2, r0
 8015896:	4601      	mov	r1, r0
 8015898:	428a      	cmp	r2, r1
 801589a:	d100      	bne.n	801589e <memmove+0x2a>
 801589c:	bd10      	pop	{r4, pc}
 801589e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80158a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80158a6:	e7f7      	b.n	8015898 <memmove+0x24>

080158a8 <__malloc_lock>:
 80158a8:	4801      	ldr	r0, [pc, #4]	; (80158b0 <__malloc_lock+0x8>)
 80158aa:	f7fe bf9a 	b.w	80147e2 <__retarget_lock_acquire_recursive>
 80158ae:	bf00      	nop
 80158b0:	20002c20 	.word	0x20002c20

080158b4 <__malloc_unlock>:
 80158b4:	4801      	ldr	r0, [pc, #4]	; (80158bc <__malloc_unlock+0x8>)
 80158b6:	f7fe bf95 	b.w	80147e4 <__retarget_lock_release_recursive>
 80158ba:	bf00      	nop
 80158bc:	20002c20 	.word	0x20002c20

080158c0 <_realloc_r>:
 80158c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158c2:	4607      	mov	r7, r0
 80158c4:	4614      	mov	r4, r2
 80158c6:	460e      	mov	r6, r1
 80158c8:	b921      	cbnz	r1, 80158d4 <_realloc_r+0x14>
 80158ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80158ce:	4611      	mov	r1, r2
 80158d0:	f7ff bbd4 	b.w	801507c <_malloc_r>
 80158d4:	b922      	cbnz	r2, 80158e0 <_realloc_r+0x20>
 80158d6:	f7ff fb81 	bl	8014fdc <_free_r>
 80158da:	4625      	mov	r5, r4
 80158dc:	4628      	mov	r0, r5
 80158de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158e0:	f000 f83a 	bl	8015958 <_malloc_usable_size_r>
 80158e4:	42a0      	cmp	r0, r4
 80158e6:	d20f      	bcs.n	8015908 <_realloc_r+0x48>
 80158e8:	4621      	mov	r1, r4
 80158ea:	4638      	mov	r0, r7
 80158ec:	f7ff fbc6 	bl	801507c <_malloc_r>
 80158f0:	4605      	mov	r5, r0
 80158f2:	2800      	cmp	r0, #0
 80158f4:	d0f2      	beq.n	80158dc <_realloc_r+0x1c>
 80158f6:	4631      	mov	r1, r6
 80158f8:	4622      	mov	r2, r4
 80158fa:	f7fd f931 	bl	8012b60 <memcpy>
 80158fe:	4631      	mov	r1, r6
 8015900:	4638      	mov	r0, r7
 8015902:	f7ff fb6b 	bl	8014fdc <_free_r>
 8015906:	e7e9      	b.n	80158dc <_realloc_r+0x1c>
 8015908:	4635      	mov	r5, r6
 801590a:	e7e7      	b.n	80158dc <_realloc_r+0x1c>

0801590c <_read_r>:
 801590c:	b538      	push	{r3, r4, r5, lr}
 801590e:	4d07      	ldr	r5, [pc, #28]	; (801592c <_read_r+0x20>)
 8015910:	4604      	mov	r4, r0
 8015912:	4608      	mov	r0, r1
 8015914:	4611      	mov	r1, r2
 8015916:	2200      	movs	r2, #0
 8015918:	602a      	str	r2, [r5, #0]
 801591a:	461a      	mov	r2, r3
 801591c:	f7f1 fc4e 	bl	80071bc <_read>
 8015920:	1c43      	adds	r3, r0, #1
 8015922:	d102      	bne.n	801592a <_read_r+0x1e>
 8015924:	682b      	ldr	r3, [r5, #0]
 8015926:	b103      	cbz	r3, 801592a <_read_r+0x1e>
 8015928:	6023      	str	r3, [r4, #0]
 801592a:	bd38      	pop	{r3, r4, r5, pc}
 801592c:	20002c28 	.word	0x20002c28

08015930 <__ascii_wctomb>:
 8015930:	b149      	cbz	r1, 8015946 <__ascii_wctomb+0x16>
 8015932:	2aff      	cmp	r2, #255	; 0xff
 8015934:	bf85      	ittet	hi
 8015936:	238a      	movhi	r3, #138	; 0x8a
 8015938:	6003      	strhi	r3, [r0, #0]
 801593a:	700a      	strbls	r2, [r1, #0]
 801593c:	f04f 30ff 	movhi.w	r0, #4294967295
 8015940:	bf98      	it	ls
 8015942:	2001      	movls	r0, #1
 8015944:	4770      	bx	lr
 8015946:	4608      	mov	r0, r1
 8015948:	4770      	bx	lr

0801594a <abort>:
 801594a:	b508      	push	{r3, lr}
 801594c:	2006      	movs	r0, #6
 801594e:	f000 f833 	bl	80159b8 <raise>
 8015952:	2001      	movs	r0, #1
 8015954:	f7f1 fc28 	bl	80071a8 <_exit>

08015958 <_malloc_usable_size_r>:
 8015958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801595c:	1f18      	subs	r0, r3, #4
 801595e:	2b00      	cmp	r3, #0
 8015960:	bfbc      	itt	lt
 8015962:	580b      	ldrlt	r3, [r1, r0]
 8015964:	18c0      	addlt	r0, r0, r3
 8015966:	4770      	bx	lr

08015968 <_raise_r>:
 8015968:	291f      	cmp	r1, #31
 801596a:	b538      	push	{r3, r4, r5, lr}
 801596c:	4604      	mov	r4, r0
 801596e:	460d      	mov	r5, r1
 8015970:	d904      	bls.n	801597c <_raise_r+0x14>
 8015972:	2316      	movs	r3, #22
 8015974:	6003      	str	r3, [r0, #0]
 8015976:	f04f 30ff 	mov.w	r0, #4294967295
 801597a:	bd38      	pop	{r3, r4, r5, pc}
 801597c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801597e:	b112      	cbz	r2, 8015986 <_raise_r+0x1e>
 8015980:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015984:	b94b      	cbnz	r3, 801599a <_raise_r+0x32>
 8015986:	4620      	mov	r0, r4
 8015988:	f000 f830 	bl	80159ec <_getpid_r>
 801598c:	462a      	mov	r2, r5
 801598e:	4601      	mov	r1, r0
 8015990:	4620      	mov	r0, r4
 8015992:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015996:	f000 b817 	b.w	80159c8 <_kill_r>
 801599a:	2b01      	cmp	r3, #1
 801599c:	d00a      	beq.n	80159b4 <_raise_r+0x4c>
 801599e:	1c59      	adds	r1, r3, #1
 80159a0:	d103      	bne.n	80159aa <_raise_r+0x42>
 80159a2:	2316      	movs	r3, #22
 80159a4:	6003      	str	r3, [r0, #0]
 80159a6:	2001      	movs	r0, #1
 80159a8:	e7e7      	b.n	801597a <_raise_r+0x12>
 80159aa:	2400      	movs	r4, #0
 80159ac:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80159b0:	4628      	mov	r0, r5
 80159b2:	4798      	blx	r3
 80159b4:	2000      	movs	r0, #0
 80159b6:	e7e0      	b.n	801597a <_raise_r+0x12>

080159b8 <raise>:
 80159b8:	4b02      	ldr	r3, [pc, #8]	; (80159c4 <raise+0xc>)
 80159ba:	4601      	mov	r1, r0
 80159bc:	6818      	ldr	r0, [r3, #0]
 80159be:	f7ff bfd3 	b.w	8015968 <_raise_r>
 80159c2:	bf00      	nop
 80159c4:	20000930 	.word	0x20000930

080159c8 <_kill_r>:
 80159c8:	b538      	push	{r3, r4, r5, lr}
 80159ca:	4d07      	ldr	r5, [pc, #28]	; (80159e8 <_kill_r+0x20>)
 80159cc:	2300      	movs	r3, #0
 80159ce:	4604      	mov	r4, r0
 80159d0:	4608      	mov	r0, r1
 80159d2:	4611      	mov	r1, r2
 80159d4:	602b      	str	r3, [r5, #0]
 80159d6:	f7f1 fbd7 	bl	8007188 <_kill>
 80159da:	1c43      	adds	r3, r0, #1
 80159dc:	d102      	bne.n	80159e4 <_kill_r+0x1c>
 80159de:	682b      	ldr	r3, [r5, #0]
 80159e0:	b103      	cbz	r3, 80159e4 <_kill_r+0x1c>
 80159e2:	6023      	str	r3, [r4, #0]
 80159e4:	bd38      	pop	{r3, r4, r5, pc}
 80159e6:	bf00      	nop
 80159e8:	20002c28 	.word	0x20002c28

080159ec <_getpid_r>:
 80159ec:	f7f1 bbc4 	b.w	8007178 <_getpid>

080159f0 <_init>:
 80159f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159f2:	bf00      	nop
 80159f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80159f6:	bc08      	pop	{r3}
 80159f8:	469e      	mov	lr, r3
 80159fa:	4770      	bx	lr

080159fc <_fini>:
 80159fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80159fe:	bf00      	nop
 8015a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a02:	bc08      	pop	{r3}
 8015a04:	469e      	mov	lr, r3
 8015a06:	4770      	bx	lr
